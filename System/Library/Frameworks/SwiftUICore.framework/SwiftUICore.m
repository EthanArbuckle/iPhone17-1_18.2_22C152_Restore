uint64_t _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for EffectAnimator.State(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

uint64_t type metadata instantiation function for StyleContextTypeBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

uint64_t type metadata instantiation function for ZStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

void *assignWithCopy for EnvironmentValues(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t type metadata instantiation function for VTable()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t storeEnumTagSinglePayload for _ForegroundLayerLevelColorMatrixEffect(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 12) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _ForegroundLayerLevelColorMatrixEffect(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 12)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for GestureLabelModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t GradientBox.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 128) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 144));

  return swift_deallocClassInstance();
}

uint64_t getEnumTagSinglePayload for ResolvedGradient(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

void *assignWithCopy for LayoutComputer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

uint64_t partial apply for specialized closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:)(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@inout [ScrollTargetRole.Role : [ScrollableCollection]]) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t type metadata instantiation function for SimultaneousGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 40);
}

uint64_t getEnumTagSinglePayload for ResetDeltaModifier.ChildPhase(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for EnvironmentalBodyAccessor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for TupleStyleContext.QueryAtIndexVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t storeEnumTagSinglePayload for ResolvedGradient(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *assignWithCopy for _ForegroundColorModifier(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for ResolvedGradient(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  return implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, v2[5], v2[2], v2[3], v2[4]);
}

uint64_t type metadata instantiation function for KeyframeAnimator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 56);
}

ValueMetadata *type metadata accessor for ColorScheme()
{
  return &type metadata for ColorScheme;
}

uint64_t getEnumTagSinglePayload for ModifiedElements(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

void *static _SemanticFeature_v2.introduced.getter@<X0>(void *result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  if (*result != -1) {
    result = (void *)swift_once();
  }
  *a3 = *a2;
  return result;
}

unsigned char *destructiveInjectEnumTag for LayoutDirection(unsigned char *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance RBSymbolAnimationWiggleFlags(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static HierarchicalShapeStyle.sharedPrimary.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t type metadata instantiation function for EnvironmentObjectKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 8);
}

ValueMetadata *type metadata accessor for RoundedCornerStyle()
{
  return &type metadata for RoundedCornerStyle;
}

uint64_t storeEnumTagSinglePayload for ResetDeltaModifier.ChildPhase(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

uint64_t _GraphValue.value.getter()
{
  return *v0;
}

uint64_t type metadata instantiation function for UnwrapConditional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 48);
}

uint64_t destroy for LocalizedStringKey.StringInterpolation()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata completion function for _ConditionalContent.Storage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in DynamicBody<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for LayoutSubview(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for EnvironmentValues()
{
  return &type metadata for EnvironmentValues;
}

uint64_t partial apply for closure #1 in Attribute.init<A>(_:)@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  uint64_t result;

  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

uint64_t closure #1 in Attribute.init<A>(_:)partial apply@<X0>(_DWORD *a1@<X8>)
{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)partial apply(a1);
}

{
  type metadata accessor for [ViewResponder](0);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_8(a1);
}

{
  type metadata accessor for ViewList();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_12(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_3(a1);
}

{
  type metadata accessor for Attribute<LayoutGestureBox.Value>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_10(a1);
}

{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_5(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t type metadata completion function for JSONCodable()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for BlendMode()
{
  return &type metadata for BlendMode;
}

uint64_t partial apply for closure #1 in static DynamicPropertyCache.fields(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in static DynamicPropertyCache.fields(of:)(a1, a2, a3, *(void ***)(v3 + 16));
}

uint64_t static AGAttributeFlags.removable.getter()
{
  return 2;
}

uint64_t getEnumTagSinglePayload for NamedImage.VectorInfo(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for ScrollPhase(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t _ViewInputs.transform.getter()
{
  return *(unsigned int *)(v0 + 60);
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v2;
  return result;
}

id IndirectAttributeMap.subgraph.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t _ViewInputs.size.getter()
{
  return *(unsigned int *)(v0 + 72);
}

uint64_t _ViewInputs.position.getter()
{
  return *(unsigned int *)(v0 + 64);
}

uint64_t partial apply for closure #2 in GraphHost.init(data:)(unsigned int a1)
{
  return closure #2 in GraphHost.init(data:)(a1);
}

uint64_t type metadata instantiation function for RangeSet<>.IndexSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t destroy for AnimatableFrameAttribute()
{
  return swift_release();
}

uint64_t getEnumTagSinglePayload for ArchivedViewCore.Metadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

uint64_t block_destroy_helper_24()
{
  return swift_release();
}

uint64_t block_destroy_helper_25()
{
  return swift_release();
}

uint64_t block_destroy_helper_26()
{
  return swift_release();
}

uint64_t block_destroy_helper_27()
{
  return swift_release();
}

uint64_t block_destroy_helper_28()
{
  return swift_release();
}

uint64_t block_destroy_helper_29()
{
  return swift_release();
}

uint64_t block_destroy_helper_30()
{
  return swift_release();
}

uint64_t block_destroy_helper_31()
{
  return swift_release();
}

uint64_t block_destroy_helper_32()
{
  return swift_release();
}

uint64_t block_destroy_helper_33()
{
  return swift_release();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance _ShapeStyle_Name(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

uint64_t partial apply for closure #1 in PropertyList.merge(_:)(uint64_t a1, void *a2)
{
  return closure #1 in PropertyList.merge(_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(uint64_t **)(v2 + 32), *(uint64_t **)(v2 + 40));
}

uint64_t _ViewInputs.viewPhase.getter()
{
  return *(unsigned int *)(v0 + 24);
}

uint64_t destroy for DisplayList.Item(uint64_t a1)
{
  return outlined consume of DisplayList.Item.Value(*(void *)(a1 + 40), *(void *)(a1 + 48));
}

uint64_t storeEnumTagSinglePayload for GestureLabelModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t type metadata instantiation function for SimultaneousPreference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 64);
}

uint64_t partial apply for implicit closure #1 in closure #1 in static _OpacityEffect._makeView(modifier:inputs:body:)()
{
  return *(unsigned int *)(v0 + 16);
}

void destroy for ViewRootBodyAccessor(uint64_t a1)
{
}

double ViewSize.animatableData.getter()
{
  return *(double *)v0;
}

uint64_t View.defaultForegroundColor(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  KeyPath = (uint64_t *)swift_getKeyPath();
  uint64_t v8 = a1;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

{
  return View.defaultForegroundColor(_:)(a1, a2, a3);
}

ValueMetadata *type metadata accessor for LayoutDirection()
{
  return &type metadata for LayoutDirection;
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t objectdestroy_25Tm()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t State.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return State.getValue(forReading:)(1, a1, a2);
}

uint64_t getEnumTag for LayoutDirection(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t static Update.lock()()
{
  return static Update.lock()(_MovableLockLock);
}

uint64_t static Update.unlock()()
{
  return static Update.lock()(_MovableLockUnlock);
}

uint64_t storeEnumTagSinglePayload for NamedImage.VectorInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata completion function for SimultaneousGesture()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text()
{
  return &type metadata for Text;
}

uint64_t IndirectAttributeMap.map.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm()
{
  return swift_getWitnessTable();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_26(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_32(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_33(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t initializeBufferWithCopyOfBuffer for _ForegroundLayerLevelColorMatrixEffect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t getEnumTagSinglePayload for _ForegroundColorModifier(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

Swift::Bool __swiftcall Image.Location.mayContainSymbol(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (*v1 == 1)
  {
    if (one-time initialization token for privateSystemAssetManager != -1) {
      swift_once();
    }
    v13 = off_26B0EB020;
    uint64_t v14 = *((void *)off_26B0EB020 + 2);
    if (!v14) {
      return 0;
    }
    BOOL v15 = *((void *)off_26B0EB020 + 4) == countAndFlagsBits && *((void *)off_26B0EB020 + 5) == (void)object;
    if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v14 == 1) {
        return 0;
      }
      if (v13[6] != countAndFlagsBits || v13[7] != (void)object)
      {
        Swift::Bool result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (!result)
        {
          if (v14 != 2)
          {
            v17 = v13 + 9;
            for (uint64_t i = 2; ; ++i)
            {
              uint64_t v19 = i + 1;
              if (__OFADD__(i, 1)) {
                break;
              }
              BOOL v20 = *(v17 - 1) == countAndFlagsBits && *v17 == (void)object;
              if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                return 1;
              }
              Swift::Bool result = 0;
              v17 += 2;
              if (v19 == v14) {
                return result;
              }
            }
            goto LABEL_54;
          }
          return 0;
        }
      }
    }
    return 1;
  }
  if (*v1) {
    return 1;
  }
  if (one-time initialization token for systemAssetManager != -1) {
    swift_once();
  }
  int v4 = off_26B0EE3C8;
  uint64_t v5 = *((void *)off_26B0EE3C8 + 2);
  if (!v5) {
    return 0;
  }
  BOOL v6 = *((void *)off_26B0EE3C8 + 4) == countAndFlagsBits && *((void *)off_26B0EE3C8 + 5) == (void)object;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 1;
  }
  if (v5 == 1) {
    return 0;
  }
  if (v4[6] == countAndFlagsBits && v4[7] == (void)object) {
    return 1;
  }
  Swift::Bool result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v5 == 2) {
    return 0;
  }
  v9 = v4 + 9;
  for (uint64_t j = 2; ; ++j)
  {
    uint64_t v11 = j + 1;
    if (__OFADD__(j, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == countAndFlagsBits && *v9 == (void)object;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    Swift::Bool result = 0;
    v9 += 2;
    if (v11 == v5) {
      return result;
    }
  }
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

uint64_t closure #1 in PropertyList.merge(_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (type metadata accessor for PropertyList.Element() != a1)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  *(void *)a3 = a4;
  swift_retain();
  swift_release();
  uint64_t v11 = *a5;
  if (*a5 < 0) {
    goto LABEL_18;
  }
  if (!v11) {
    goto LABEL_13;
  }
  BOOL v12 = a2;
  while (*(void *)a3)
  {
    *BOOL v12 = *(void *)a3;
    if (!*(void *)a3) {
      goto LABEL_21;
    }
    *(void *)a3 = *(void *)(*(void *)a3 + 32);
    swift_retain();
    swift_retain();
    swift_release();
    ++v12;
    if (!--v11)
    {
      uint64_t v13 = *a5;
      if (*a5 < 0) {
        goto LABEL_19;
      }
      if (v13)
      {
        uint64_t v14 = *a5;
        while (v13 >= v14)
        {
          uint64_t v15 = v14 - 1;
          uint64_t v16 = *a6;
          v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2[v14 - 1] + 216);
          swift_retain();
          swift_retain();
          uint64_t v18 = swift_retain();
          uint64_t v19 = v17(v18, v16);
          swift_release();
          swift_release();
          swift_release();
          *a6 = v19;
          swift_release();
          uint64_t v14 = v15;
          if (!v15) {
            goto LABEL_13;
          }
        }
        __break(1u);
        __break(1u);
        goto LABEL_17;
      }
      goto LABEL_13;
    }
  }
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_13:

  return swift_arrayDestroy();
}

uint64_t closure #2 in static ModifiedContent<>._makeView(view:inputs:)@<X0>(uint64_t *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = a1[2];
  int v11 = *((_DWORD *)a1 + 6);
  int v12 = *((_DWORD *)a1 + 7);
  int v13 = *((_DWORD *)a1 + 9);
  int v28 = *((_DWORD *)a1 + 8);
  uint64_t v14 = a1[5];
  uint64_t v15 = a1[6];
  int v25 = *((_DWORD *)a1 + 15);
  int v26 = *((_DWORD *)a1 + 14);
  int v23 = *((_DWORD *)a1 + 17);
  int v24 = *((_DWORD *)a1 + 16);
  int v21 = *((_DWORD *)a1 + 19);
  int v22 = *((_DWORD *)a1 + 18);
  int v20 = *((_DWORD *)a1 + 20);
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  LODWORD(v52) = a2;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeViewList(view:inputs:), a3, &v31);
  int v16 = v31;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v52 = v8;
  int v53 = v9;
  uint64_t v54 = v10;
  int v55 = v11;
  int v56 = v12;
  int v58 = v13;
  uint64_t v59 = v14;
  uint64_t v60 = v15;
  int v61 = v26;
  int v62 = v25;
  int v63 = v24;
  int v64 = v23;
  int v65 = v22;
  int v66 = v21;
  int v67 = v20;
  int v30 = v16;
  uint64_t v36 = v8;
  int v37 = v9;
  uint64_t v38 = v10;
  int v39 = v11;
  int v40 = v12;
  int v41 = 0;
  int v42 = v13;
  uint64_t v43 = v14;
  uint64_t v44 = v15;
  int v45 = v26;
  int v46 = v25;
  int v47 = v24;
  int v48 = v23;
  int v49 = v22;
  int v50 = v21;
  int v51 = v20;
  v17 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a5 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17(&v30, &v36, a3, a5);
  int v57 = v28;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a7, (uint64_t)&v52);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  uint64_t v13 = a2[5];
  uint64_t v14 = a2[6];
  uint64_t v15 = a2[7];
  int v20 = *((_DWORD *)a2 + 16);
  uint64_t v19 = a2[9];
  char v18 = *((unsigned char *)a2 + 80);
  LODWORD(v21) = a3;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeViewList(view:inputs:), a4, v33);
  uint64_t v16 = v33[0];
  if (AGSubgraphShouldRecordTree()) {
    AGSubgraphBeginTreeElement();
  }
  int v32 = v16;
  uint64_t v21 = v8;
  int v22 = v9;
  uint64_t v23 = v10;
  uint64_t v24 = v11;
  uint64_t v25 = v12;
  uint64_t v26 = v13;
  uint64_t v27 = v14;
  uint64_t v28 = v15;
  int v29 = v20;
  uint64_t v30 = v19;
  char v31 = v18;
  (*(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a6 + 32))(&v32, &v21, a4, a6);
  return $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v16, a4, a6);
}

uint64_t static ModifiedContent<>._makeViewList(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *a2;
  int v12 = *((_DWORD *)a2 + 2);
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  uint64_t v23 = a2[5];
  uint64_t v24 = a2[2];
  uint64_t v21 = a2[7];
  uint64_t v22 = a2[6];
  int v20 = *((_DWORD *)a2 + 16);
  uint64_t v19 = a2[9];
  char v18 = *((unsigned char *)a2 + 80);
  int v10 = *a1;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static ModifiedContent<>._makeView(modifier:inputs:body:), a4, v37);
  uint64_t v15 = v37[0];
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  *(void *)(v16 + 32) = a5;
  *(void *)(v16 + 40) = a6;
  *(_DWORD *)(v16 + 48) = v10;
  if (AGSubgraphShouldRecordTree()) {
    AGSubgraphBeginTreeElement();
  }
  int v36 = v15;
  uint64_t v25 = v11;
  int v26 = v12;
  uint64_t v27 = v24;
  uint64_t v28 = v13;
  uint64_t v29 = v14;
  uint64_t v30 = v23;
  uint64_t v31 = v22;
  uint64_t v32 = v21;
  int v33 = v20;
  uint64_t v34 = v19;
  char v35 = v18;
  (*(void (**)(int *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a6 + 32))(&v36, &v25, partial apply for closure #2 in static ModifiedContent<>._makeViewList(view:inputs:), v16, a4, a6);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v15, a4, a6);
  return swift_release();
}

uint64_t type metadata accessor for _GraphValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _GraphValue.subscript.getter@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X3>, _DWORD *a3@<X8>)
{
  if (*(void *)(*(void *)(a2 - 8) + 64)) {
    a1(1);
  }
  uint64_t result = AGGraphCreateOffsetAttribute2();
  *a3 = result;
  return result;
}

uint64_t $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)()
{
  uint64_t result = AGSubgraphShouldRecordTree();
  if (result)
  {
    return AGSubgraphEndTreeElement();
  }
  return result;
}

uint64_t partial apply for closure #1 in static ModifiedContent<>._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static ModifiedContent<>._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t closure #1 in closure #2 in static ModifiedContent<>._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v12[2] = type metadata accessor for ModifiedContent();
  v12[3] = a2;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a6, (uint64_t)v12, a2, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v10);
  return v12[5];
}

uint64_t closure #1 in static ModifiedContent<>._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = a1 + *(int *)(v9 + 36);
  v14[2] = v9;
  v14[3] = a3;
  uint64_t v11 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v10, a6, (uint64_t)v14, a3, MEMORY[0x263F8E628], v11, MEMORY[0x263F8E658], v12);
  return v14[5];
}

uint64_t implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = *(void *)(v12 - 8);
  double v15 = MEMORY[0x270FA5388](v14);
  v17 = &v20[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, double))(v9 + 16))(v11, v15);
  dispatch thunk of Rule.value.getter();
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, a5);
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v17, (uint64_t)partial apply for closure #1 in static Rule._updateDefault(_:), (uint64_t)v21, a4, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v18);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8))(v17, a4);
}

uint64_t destroy for AnyTransition.InsertionVisitor()
{
  swift_release();

  return swift_release();
}

uint64_t _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x270FA5388]();
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v15(v12, v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t closure #1 in static PointerOffset.of(_:)partial apply@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return partial apply for closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_4(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  type metadata accessor for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool)();
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  type metadata accessor for External<Bool>(0, &lazy cache variable for type metadata for UInt32?, MEMORY[0x263F8E8F8], MEMORY[0x263F8D8F0]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_5(a1, a2);
}

uint64_t partial apply for closure #1 in static PointerOffset.of(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

void _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_0(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1 - 1;
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_1@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_2@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_3@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_5@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_6@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t closure #1 in static PointerOffset.of(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result - 1;
  return result;
}

uint64_t destroy for DisplayList()
{
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in static Rule._updateDefault(_:)()
{
  return closure #1 in static Rule._update(_:attribute:)();
}

uint64_t partial apply for closure #1 in static Rule._update(_:attribute:)()
{
  return AGGraphSetOutputValue();
}

uint64_t closure #1 in static Rule._update(_:attribute:)()
{
  return AGGraphSetOutputValue();
}

uint64_t View.modifier<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x270FA5388](v12);
  double v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, v4, a2, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  return ModifiedContent.init(content:modifier:)((uint64_t)v15, (uint64_t)v11, a2, a3, a4);
}

uint64_t ModifiedContent.init(content:modifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = a5 + *(int *)(type metadata accessor for ModifiedContent() + 36);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32);

  return v9(v8, a2, a4);
}

uint64_t type metadata accessor for ModifiedContent()
{
  return __swift_instantiateGenericMetadata();
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)(uint64_t a1)
{
  return closure #1 in closure #2 in static ModifiedContent<>._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance <> ModifiedContent<A, B>(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static ModifiedContent<>._makeViewList(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t protocol witness for Rule.value.getter in conformance DynamicPreferenceCombiner<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DynamicPreferenceCombiner.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t compare(_:against:)(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v19 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v10 = v9 | (v8 << 6);
LABEL_5:
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)&long long v20 = *(void *)(*(void *)(a1 + 48) + 8 * v10);
  outlined init with copy of AnyTrackedValue(v11 + 40 * v10, (uint64_t)&v20 + 8);
  while (1)
  {
    outlined init with take of (key: ObjectIdentifier, value: AnyTrackedValue)?((uint64_t)&v20, (uint64_t)v23);
    uint64_t v15 = v25;
    if (!v25)
    {
      swift_release();
      return v15 == 0;
    }
    outlined init with take of ScrollStateRequest(&v24, (uint64_t)&v20);
    uint64_t v16 = *((void *)&v21 + 1);
    uint64_t v17 = v22;
    __swift_project_boxed_opaque_existential_1(&v20, *((uint64_t *)&v21 + 1));
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a2, v16, v17) & 1) == 0) {
      break;
    }
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
    if (v6) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v12 < v19)
    {
      unint64_t v13 = *(void *)(v18 + 8 * v12);
      if (v13) {
        goto LABEL_9;
      }
      int64_t v14 = v8 + 2;
      ++v8;
      if (v12 + 1 < v19)
      {
        unint64_t v13 = *(void *)(v18 + 8 * v14);
        if (v13) {
          goto LABEL_12;
        }
        int64_t v8 = v12 + 1;
        if (v12 + 2 < v19)
        {
          unint64_t v13 = *(void *)(v18 + 8 * (v12 + 2));
          if (v13)
          {
            v12 += 2;
            goto LABEL_9;
          }
          int64_t v14 = v12 + 3;
          int64_t v8 = v12 + 2;
          if (v12 + 3 < v19)
          {
            unint64_t v13 = *(void *)(v18 + 8 * v14);
            if (!v13)
            {
              while (1)
              {
                int64_t v12 = v14 + 1;
                if (__OFADD__(v14, 1)) {
                  break;
                }
                if (v12 >= v19)
                {
                  int64_t v8 = v19 - 1;
                  goto LABEL_23;
                }
                unint64_t v13 = *(void *)(v18 + 8 * v12);
                ++v14;
                if (v13) {
                  goto LABEL_9;
                }
              }
LABEL_32:
              __break(1u);
              return result;
            }
LABEL_12:
            int64_t v12 = v14;
LABEL_9:
            unint64_t v6 = (v13 - 1) & v13;
            unint64_t v10 = __clz(__rbit64(v13)) + (v12 << 6);
            int64_t v8 = v12;
            goto LABEL_5;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = 0;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
  return v15 == 0;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined init with take of ScrollStateRequest(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined init with copy of AnyTrackedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for _ViewInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t outlined init with take of (key: ObjectIdentifier, value: AnyTrackedValue)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PropertyList.Element?(0, (unint64_t *)&lazy cache variable for type metadata for (key: ObjectIdentifier, value: AnyTrackedValue)?, 255, (void (*)(uint64_t))type metadata accessor for (key: ObjectIdentifier, value: AnyTrackedValue));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t PropertyList.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a2;
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = a2;
  v9[5] = a1;
  type metadata accessor for PropertyList.Element?(0, &lazy cache variable for type metadata for PropertyList.Element?, a3, (void (*)(uint64_t))type metadata accessor for PropertyList.Element);
  uint64_t v5 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_retain();
  _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v10, (uint64_t)partial apply for closure #1 in PropertyList.subscript.getter, (uint64_t)v9, v5, MEMORY[0x263F8E628], AssociatedTypeWitness, MEMORY[0x263F8E658], v7);
  return swift_release();
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 24))(a2, a3, a4);
}

void type metadata accessor for PropertyList.Element?(uint64_t a1, unint64_t *a2, uint64_t a3, void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a4(a3);
    unint64_t v5 = type metadata accessor for Optional();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388]();
  unint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v14(v13);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v13, a5);
  }
  return result;
}

uint64_t partial apply for closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in PropertyList.subscript.getter(v1[5], v1[4], v1[2], v1[3], a1);
}

uint64_t closure #1 in PropertyList.subscript.setter(uint64_t *a1, Swift::Int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v13 = (char *)&v19 - v12;
  uint64_t v14 = *a1;
  BloomFilter.init(hashValue:)(a2);
  uint64_t v15 = find1<A>(_:key:filter:)(v14, a2, &v20, a4, a5);
  if (!v15
    || (closure #2 in closure #1 in PropertyList.subscript.getter(v15, (uint64_t)v13),
        char v16 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a5 + 24))(a3, v13, a4, a5),
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness),
        (v16 & 1) == 0))
  {
    type metadata accessor for TypedElement();
    uint64_t v18 = *a1;
    swift_allocObject();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = specialized TypedElement.init(value:before:after:)(a3, 0, v18);
    return swift_release();
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t closure #1 in PropertyList.subscript.getter@<X0>(Swift::Int hashValue@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  BloomFilter.init(hashValue:)(hashValue);
  uint64_t v10 = find1<A>(_:key:filter:)(a2, hashValue, &v12, a3, a4);
  if (v10) {
    return closure #2 in closure #1 in PropertyList.subscript.getter(v10, a5);
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  }
}

uint64_t find1<A>(_:key:filter:)(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    uint64_t v8 = (void *)result;
    uint64_t v9 = *a3;
    while (1)
    {
      while ((v9 & ~v8[7]) != 0)
      {
        uint64_t v8 = (void *)v8[5];
        if (!v8) {
          return 0;
        }
      }
      uint64_t v10 = v8[3];
      if (v10)
      {
        uint64_t v11 = v9;
        uint64_t result = find1<A>(_:key:filter:)(v10, a2, &v11, a4, a5);
        if (result) {
          return result;
        }
      }
      if (v8[2] == a4) {
        break;
      }
      uint64_t v8 = (void *)v8[4];
      if (!v8) {
        return 0;
      }
    }
    return (uint64_t)v8;
  }
  return result;
}

SwiftUI::BloomFilter PropertyList.Element.init(keyType:before:after:)(Swift::Int a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 64) = AGMakeUniqueID();
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = a3;
  swift_retain();
  swift_retain();
  swift_release();
  result.value = BloomFilter.init(hashValue:)(a1).value;
  if (!a2)
  {
    uint64_t v13 = v18;
    if (a3)
    {
      int v14 = *(_DWORD *)(a3 + 48);
      int v15 = v14 + 1;
      if (v14 == -1) {
        goto LABEL_17;
      }
      unsigned int v16 = *(_DWORD *)(a3 + 52);
      if (v16 > 0xF)
      {
        int v17 = 1;
        uint64_t v12 = a3;
      }
      else
      {
        int v17 = v16 + 1;
        uint64_t v13 = *(void *)(a3 + 56) | v18;
        uint64_t v12 = *(void *)(a3 + 40);
      }
      swift_release();
      *(_DWORD *)(v3 + 48) = v15;
      *(_DWORD *)(v3 + 52) = v17;
    }
    else
    {
      uint64_t v12 = 0;
      *(void *)(v3 + 48) = 0x100000001;
    }
    *(void *)(v3 + 56) = v13;
    goto LABEL_15;
  }
  int v8 = *(_DWORD *)(a2 + 48);
  result.value = swift_release();
  int v9 = v8 + 1;
  if (v8 == -1)
  {
    __break(1u);
  }
  else
  {
    if (!a3)
    {
LABEL_6:
      *(_DWORD *)(v3 + 48) = v9;
      *(_DWORD *)(v3 + 52) = 0;
      *(void *)(v3 + 56) = -1;
      uint64_t v12 = v3;
LABEL_15:
      *(void *)(v3 + 40) = v12;
      return (SwiftUI::BloomFilter)v3;
    }
    int v10 = *(_DWORD *)(a3 + 48);
    BOOL v11 = __CFADD__(v9, v10);
    v9 += v10;
    if (!v11)
    {
      swift_release();
      goto LABEL_6;
    }
  }
LABEL_17:
  __break(1u);
  return result;
}

SwiftUI::BloomFilter __swiftcall BloomFilter.init(hashValue:)(SwiftUI::BloomFilter hashValue)
{
  *uint64_t v1 = (1 << (hashValue.value >> 4)) | (1 << (hashValue.value >> 10)) | (1 << SBYTE2(hashValue.value));
  return hashValue;
}

uint64_t destroy for Image.ResizableProvider()
{
  return swift_release();
}

SwiftUI::BloomFilter TypedElement.copy(before:after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(void *)(*(void *)v2 + 248);
  swift_allocObject();
  swift_retain();
  swift_retain();
  return specialized TypedElement.init(value:before:after:)(v5, a1, a2);
}

SwiftUI::BloomFilter specialized TypedElement.init(value:before:after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v3 + *(void *)(*(void *)v3 + 248);
  Swift::Int v8 = *(void *)(*(void *)v3 + 232);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v7, a1, AssociatedTypeWitness);

  return PropertyList.Element.init(keyType:before:after:)(v8, a2, a3);
}

void *initializeBufferWithCopyOfBuffer for _ForegroundColorModifier(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t closure #2 in closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(void *)(*(void *)a1 + 248);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v5(a2, v3, AssociatedTypeWitness);
}

uint64_t *initializeBufferWithCopyOfBuffer for UnaryElements(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 48 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v11;
    *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
    *(void *)(v10 + 16) = *(void *)(v11 + 16);
    *(_DWORD *)(v10 + 24) = *(_DWORD *)(v11 + 24);
    *(_DWORD *)(v10 + 28) = *(_DWORD *)(v11 + 28);
    *(_DWORD *)(v10 + 32) = *(_DWORD *)(v11 + 32);
    *(_DWORD *)(v10 + 36) = *(_DWORD *)(v11 + 36);
    *(void *)(v10 + 40) = *(void *)(v11 + 40);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance EnvironmentPropertyKey<A>(uint64_t a1)
{
  return static EnvironmentPropertyKey.defaultValue.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t static EnvironmentPropertyKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t *initializeBufferWithCopyOfBuffer for _TraitWritingModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t TrackedValue.hasMatchingValue(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v11 - v8;
  PropertyList.subscript.getter(v5, a1, v5, v4);
  LOBYTE(a1) = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v4 + 24))(v2, v9, v5, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  return a1 & 1;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance EnvironmentPropertyKey<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static EnvironmentPropertyKey.valuesEqual(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t static EnvironmentPropertyKey.valuesEqual(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))() & 1;
}

uint64_t type metadata accessor for TypedElement()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PropertyList.merge(_:)(uint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v3 = result;
  value = (void *)v1->value;
  if (value)
  {
    if (result && value != (void *)result)
    {
      swift_retain_n();
      SwiftUI::BloomFilter result = swift_retain_n();
      uint64_t v5 = 0;
      uint64_t v6 = value;
      uint64_t v7 = value;
      uint64_t v8 = v3;
      uint64_t v9 = v3;
      do
      {
        if (*(_DWORD *)(v8 + 48) >= *((_DWORD *)v7 + 12))
        {
          if (__OFADD__(v5++, 1))
          {
            __break(1u);
            return result;
          }
          uint64_t v11 = *(void *)(v8 + 32);
          swift_retain();
          swift_release();
          if (!v11)
          {
LABEL_21:
            swift_release();
            swift_release();
            goto LABEL_22;
          }
          swift_release();
          SwiftUI::BloomFilter result = swift_retain();
          uint64_t v8 = v11;
          uint64_t v9 = v11;
        }
        else
        {
          swift_release();
          uint64_t v6 = (void *)v7[4];
          if (!v6) {
            goto LABEL_21;
          }
          swift_retain_n();
          SwiftUI::BloomFilter result = swift_release();
          uint64_t v7 = v6;
        }
      }
      while (v7 != (void *)v8);
      swift_release_n();
      if (!v9 || v6 != (void *)v9)
      {
LABEL_22:
        if (value[3])
        {
          type metadata accessor for TypedElement<EmptyKey>(0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EmptyKey>, (uint64_t)&type metadata for EmptyKey, (uint64_t)&protocol witness table for EmptyKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
          swift_allocObject();
          swift_retain();
          v13.value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for EmptyKey, v3, (uint64_t)value).value;
        }
        else
        {
          uint64_t v14 = value[4];
          int v15 = *(uint64_t (**)(uint64_t, uint64_t))(*value + 216);
          swift_retain();
          uint64_t v16 = swift_retain();
          v13.value = v15(v16, v14);
          swift_release();
          swift_release();
          swift_release();
        }
        swift_release();
        SwiftUI::BloomFilter result = swift_release();
        v2->value = v13.value;
        return result;
      }
      if (v6 != (void *)v3)
      {
        if (v6 == value)
        {
          swift_retain();
          SwiftUI::BloomFilter result = swift_release_n();
          v2->value = v3;
          return result;
        }
        if (v5)
        {
          uint64_t v12 = type metadata accessor for PropertyList.Element();
          MEMORY[0x270FA5388](v12);
          AGTupleWithBuffer();
          swift_release();
          return swift_release();
        }
      }
      return swift_release_n();
    }
  }
  else
  {
    v2->value = result;
    return swift_retain();
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DerivedValue(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

{
  return initializeBufferWithCopyOfBuffer for DerivedValue(a1, a2);
}

uint64_t destroy for DerivedValue(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

{
  return destroy for DerivedValue(a1);
}

uint64_t destroy for TrackedValue(uint64_t a1)
{
  return destroy for DerivedValue(a1);
}

uint64_t type metadata accessor for PropertyList.Element()
{
  return self;
}

uint64_t *initializeBufferWithCopyOfBuffer for TrackedValue(uint64_t *a1, uint64_t *a2)
{
  return initializeBufferWithCopyOfBuffer for DerivedValue(a1, a2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CUIColorName(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LayoutDirection(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance LayoutDirectionKey(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t partial apply for closure #2 in BodyAccessor.setBody(_:)()
{
  return closure #2 in BodyAccessor.setBody(_:)();
}

uint64_t _s7SwiftUI12BodyAccessorPAAE03setC0yy0C0QzyXEFySPyAFGXEfU0_TA_0()
{
  return AGGraphSetOutputValue();
}

uint64_t closure #2 in BodyAccessor.setBody(_:)()
{
  return AGGraphSetOutputValue();
}

uint64_t ChildEnvironment.updateValue()(uint64_t a1)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  uint64_t v68 = a1;
  uint64_t v62 = *(void *)(*(void *)(a1 + 16) - 8);
  MEMORY[0x270FA5388](a1);
  int v63 = (char *)v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = v3;
  uint64_t v4 = type metadata accessor for _EnvironmentKeyWritingModifier();
  uint64_t v67 = type metadata accessor for Optional();
  uint64_t v72 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  uint64_t v59 = (char *)v56 - v5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v65 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v60 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  int v61 = (char *)v56 - v9;
  MEMORY[0x270FA5388](v10);
  int v58 = (char *)v56 - v11;
  MEMORY[0x270FA5388](v12);
  v70 = (char *)v56 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v56 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v56 - v18;
  uint64_t v21 = *(int *)(v20 + 48);
  uint64_t Value = AGGraphGetValue();
  char v24 = v23;
  v74 = *(void **)(v4 - 8);
  uint64_t v25 = (void (*)(char *, uint64_t, uint64_t))v74[2];
  v25(v19, Value, v4);
  uint64_t v26 = v24 & 1;
  v19[v21] = v24 & 1;
  uint64_t v69 = v1;
  uint64_t v27 = (uint64_t *)AGGraphGetValue();
  char v29 = v28;
  uint64_t v30 = v27[1];
  uint64_t v77 = *v27;
  uint64_t v78 = v30;
  char v79 = v28 & 1;
  uint64_t v64 = TupleTypeMetadata2;
  uint64_t v31 = *(int *)(TupleTypeMetadata2 + 48);
  v75 = v19;
  uint64_t v32 = v19;
  int v33 = (void (*)(char *, char *, uint64_t))v25;
  uint64_t v73 = v4;
  v25(v16, (uint64_t)v32, v4);
  v16[v31] = v26;
  uint64_t v71 = v26;
  if (v29)
  {
    uint64_t v38 = *(void (**)(char *, uint64_t))(v65 + 8);
    swift_retain();
    swift_retain();
    uint64_t v34 = v64;
    v38(v16, v64);
  }
  else
  {
    v56[2] = v30;
    uint64_t v34 = v64;
    uint64_t v35 = *(int *)(v64 + 48);
    int v36 = v70;
    int v57 = v16;
    v25(v70, (uint64_t)v16, v73);
    v36[v35] = v26;
    if (v26)
    {
      int v39 = v59;
      uint64_t v40 = v67;
      (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v59, v69 + *(int *)(v68 + 32), v67);
      uint64_t v41 = *(int *)(v34 + 48);
      int v42 = v58;
      uint64_t v43 = ((uint64_t (*)(char *, char *, uint64_t))v25)(v58, v70, v73);
      v56[1] = v56;
      v42[v41] = 1;
      MEMORY[0x270FA5388](v43);
      v56[-2] = v66;
      v56[-1] = v42;
      swift_retain();
      swift_retain();
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue(), (uint64_t)&v56[-4], MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], v44, (uint64_t)v76);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v39, v40);
      int v37 = *(void (**)(char *, uint64_t))(v65 + 8);
      v37(v70, v34);
      v37(v57, v34);
      v37(v42, v34);
      if (LOBYTE(v76[0]) == 2)
      {
        LOBYTE(v26) = v71;
        goto LABEL_10;
      }
      LOBYTE(v26) = v71;
      if (v76[0]) {
        goto LABEL_10;
      }
    }
    else
    {
      int v37 = *(void (**)(char *, uint64_t))(v65 + 8);
      swift_retain();
      swift_retain();
      v37(v70, v34);
      v37(v57, v34);
      LOBYTE(v26) = v71;
    }
    if (AGGraphGetOutputValue())
    {
      swift_release();
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v37)(v75, v34);
    }
  }
LABEL_10:
  uint64_t v46 = *(int *)(v34 + 48);
  int v47 = v61;
  int v48 = v75;
  uint64_t v49 = v73;
  v25(v61, (uint64_t)v75, v73);
  v47[v46] = v26;
  int v50 = (void (*)(char *, uint64_t))v74[1];
  swift_retain();
  v50(v47, v49);
  uint64_t v51 = *(int *)(v34 + 48);
  uint64_t v52 = v60;
  v33(v60, v48, v49);
  v52[v51] = v71;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v63, &v52[*(int *)(v49 + 28)], v66);
  v50(v52, v49);
  swift_setAtWritableKeyPath();
  swift_release();
  v76[0] = v77;
  v76[1] = v78;
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  int v53 = (char *)(v69 + *(int *)(v68 + 32));
  (*(void (**)(char *, uint64_t))(v72 + 8))(v53, v67);
  uint64_t v54 = v74;
  int v55 = (void (*)(char *, char *, uint64_t))v74[4];
  v55(v47, v75, v49);
  v55(v53, v47, v49);
  return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v54[7])(v53, 0, 1, v49);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *Value;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(unsigned __int8 *, void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  char *v36;
  void (*v37)(char *);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44[16];
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unsigned __int8 v48[32];
  long long v49;
  char v50;
  uint64_t v51;

  uint64_t v2 = v1;
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 16);
  int v42 = a1;
  uint64_t v4 = type metadata accessor for Optional();
  int v39 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int v36 = (char *)&v35 - v5;
  uint64_t v6 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v38 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v14 = v13;
  uint64_t v15 = Value[1];
  *(void *)&uint64_t v49 = *Value;
  *((void *)&v49 + 1) = v15;
  int v50 = v13 & 1;
  uint64_t v16 = ChildEnvironment.modifier.getter();
  swift_retain();
  swift_retain();
  swift_release();
  swift_retain();
  uint64_t v17 = (void (*)(unsigned __int8 *, void))swift_readAtKeyPath();
  uint64_t v40 = v6;
  uint64_t v18 = v6;
  uint64_t v19 = v4;
  uint64_t v20 = v39;
  int v37 = *(void (**)(char *))(v18 + 16);
  v37(v11);
  v17(v48, 0);
  uint64_t v41 = v16;
  swift_release();
  int v45 = v3;
  uint64_t v46 = v2;
  int v47 = v11;
  uint64_t v21 = type metadata accessor for _EnvironmentKeyTransformModifier();
  Attribute.syncMainIfReferences<A>(do:)((void (*)(void))partial apply for closure #1 in ChildEnvironment.updateValue(), (uint64_t)v44, v21, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8EE60]);
  long long v22 = v2;
  char v23 = v42;
  if (v14) {
    goto LABEL_7;
  }
  char v24 = *(int *)(v42 + 32);
  uint64_t v35 = v22;
  uint64_t v25 = v36;
  uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 16))(v36, v22 + v24, v19);
  MEMORY[0x270FA5388](v26);
  *(&v35 - 2) = v3;
  *(&v35 - 1) = (uint64_t)v11;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in implicit closure #1 in ChildEnvironment.updateValue(), (uint64_t)(&v35 - 4), MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], v27, (uint64_t)v48);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v19);
  if (v48[0] == 2)
  {
    char v23 = v42;
LABEL_6:
    long long v22 = v35;
    goto LABEL_7;
  }
  char v23 = v42;
  long long v22 = v35;
  if ((v48[0] & 1) == 0)
  {
    *(void *)int v48 = *(void *)(v35 + *(int *)(v42 + 36));
    type metadata accessor for WritableKeyPath();
    type metadata accessor for Optional();
    swift_retain();
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #3 in implicit closure #3 in ChildEnvironment.updateValue(), v41, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], v28, (uint64_t)&v43);
    swift_release();
    if (v43 == 2) {
      goto LABEL_6;
    }
    long long v22 = v35;
    if ((v43 & 1) == 0 && AGGraphGetOutputValue())
    {
      swift_release();
      swift_release();
      swift_release();
      uint64_t v32 = v40;
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v11, v3);
    }
  }
LABEL_7:
  char v29 = (void (*)(uint64_t, char *, uint64_t))v37;
  ((void (*)(char *, char *, uint64_t))v37)(v38, v11, v3);
  uint64_t v30 = v41;
  swift_setAtWritableKeyPath();
  *(_OWORD *)int v48 = v49;
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  uint64_t v31 = v22 + *(int *)(v23 + 32);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v31, v19);
  v29(v31, v11, v3);
  uint64_t v32 = v40;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v31, 0, 1, v3);
  int v33 = *(int *)(v23 + 36);
  swift_release();
  *(void *)(v22 + v33) = v30;
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v11, v3);
}

void *initializeBufferWithCopyOfBuffer for AnyTransition.InsertionVisitor(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for _ConditionalContent(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

uint64_t initializeWithCopy for SimultaneousGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

void *initializeWithCopy for _EnvironmentKeyWritingModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  swift_retain();
  v5(v7, v8, v4);
  return a1;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *SwiftUI::BloomFilter result = *a2;
  return result;
}

void *initializeBufferWithCopyOfBuffer for TraitTransformerModifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for _EnvironmentKeyWritingModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for VStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((*(unsigned __int8 *)(v4 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t initializeWithCopy for CodableAttributedString.Range.EncodingWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithCopy for _IntelligenceSupport.AnimatingText(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t initializeWithCopy for CombinedKeyframes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithCopy for _OverlayModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_OWORD *initializeWithCopy for ZStack(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *initializeWithCopy for _AppearanceActionModifier(void *a1, void *a2)
{
  if (*a2)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  uint64_t v5 = a2[2];
  if (v5)
  {
    uint64_t v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for _EnvironmentKeyTransformModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void storeEnumTagSinglePayload for _EnvironmentKeyWritingModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 >= a2)
  {
    switch(v13)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_42:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if ((v7 & 0x80000000) != 0)
          {
            unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
            uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
            v20(v19);
          }
          else
          {
            if ((a2 & 0x80000000) != 0) {
              uint64_t v18 = a2 ^ 0x80000000;
            }
            else {
              uint64_t v18 = a2 - 1;
            }
            *(void *)a1 = v18;
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t initializeWithCopy for _EndedGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unsigned int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *unsigned int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t static ModifiedContent<>._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  int v11 = *a1;
  uint64_t v12 = *a2;
  uint64_t v13 = a2[2];
  int v18 = *((_DWORD *)a2 + 6);
  int v19 = *((_DWORD *)a2 + 2);
  int v17 = *((_DWORD *)a2 + 7);
  int v31 = *((_DWORD *)a2 + 8);
  uint64_t v14 = a2[5];
  uint64_t v30 = a2[6];
  int v26 = *((_DWORD *)a2 + 14);
  int v27 = *((_DWORD *)a2 + 9);
  int v24 = *((_DWORD *)a2 + 16);
  int v25 = *((_DWORD *)a2 + 15);
  int v22 = *((_DWORD *)a2 + 18);
  int v23 = *((_DWORD *)a2 + 17);
  int v20 = *((_DWORD *)a2 + 20);
  int v21 = *((_DWORD *)a2 + 19);
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  LODWORD(v56) = v11;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static ModifiedContent<>._makeView(modifier:inputs:body:), a4, &v35);
  int v33 = v35;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a3;
  *(void *)(v15 + 24) = a4;
  *(void *)(v15 + 32) = a5;
  *(void *)(v15 + 40) = a6;
  *(_DWORD *)(v15 + 48) = v11;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v56 = v12;
  int v57 = v19;
  uint64_t v58 = v13;
  int v59 = v18;
  int v60 = v17;
  int v62 = v27;
  uint64_t v63 = v14;
  uint64_t v64 = v30;
  int v65 = v26;
  int v66 = v25;
  int v67 = v24;
  int v68 = v23;
  int v69 = v22;
  int v70 = v21;
  int v71 = v20;
  int v34 = v33;
  uint64_t v40 = v12;
  int v41 = v19;
  uint64_t v42 = v13;
  int v43 = v18;
  int v44 = v17;
  int v45 = 0;
  int v46 = v27;
  uint64_t v47 = v14;
  uint64_t v48 = v30;
  int v49 = v26;
  int v50 = v25;
  int v51 = v24;
  int v52 = v23;
  int v53 = v22;
  int v54 = v21;
  int v55 = v20;
  char v28 = *(void (**)(int *, uint64_t *, uint64_t (*)@<X0>(uint64_t *@<X1>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t))(a6 + 24);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v28(&v34, &v40, partial apply for closure #2 in static ModifiedContent<>._makeView(view:inputs:), v15, a4, a6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v61 = v31;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a7, (uint64_t)&v56);
    AGSubgraphEndTreeElement();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance <> ModifiedContent<A, B>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static ModifiedContent<>._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DynamicViewList.WrappedList(uint64_t a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v8 = *(void *)(v5 + 64);
  }
  else {
    size_t v8 = *(void *)(v5 + 64) + 1;
  }
  int v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v8 + 7 + ((v7 + 48) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v12 = *a2;
    *(void *)a1 = *a2;
    a1 = v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v13 = AssociatedTypeWitness;
    long long v14 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v14;
    (**(void (***)(uint64_t, uint64_t *))(v14 - 8))(a1, a2);
    uint64_t v15 = (void *)((a1 + 47) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v16 = (void *)(((unint64_t)a2 + 47) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v15 = *v16;
    int v17 = (void *)(((unint64_t)v15 + v7 + 8) & ~v7);
    int v18 = (const void *)(((unint64_t)v16 + v7 + 8) & ~v7);
    int v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    if (v19(v18, 1, v13))
    {
      memcpy(v17, v18, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v17, v18, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v17, 0, 1, v13);
    }
    *(void *)(((unint64_t)v17 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v18 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t initializeWithCopy for _TraitWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

void protocol witness for SetAlgebra.init() in conformance NSTextLayoutManagerSegmentCategory(void *a1@<X8>)
{
  *a1 = 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SpeedAnimation(double *a1, double *a2)
{
  return *a1 == *a2;
}

void *initializeWithCopy for CodableOptional(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t initializeWithCopy for _OverlayStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(unsigned char *)(*(void *)(v5 + 48) + a1) = *(unsigned char *)(*(void *)(v5 + 48) + a2);
  return a1;
}

uint64_t DerivedValue.hasMatchingValue(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  double v7 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v9 = (char *)&v12 - v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 24))(a1, v4, v3, v7);
  swift_getAssociatedConformanceWitness();
  char v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
  return v10 & 1;
}

uint64_t protocol witness for static DerivedPropertyKey.value(in:) in conformance DerivedEnvironmentPropertyKey<A>(uint64_t a1, uint64_t a2)
{
  return static DerivedEnvironmentPropertyKey.value(in:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t static DerivedEnvironmentPropertyKey.value(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[0] = a1;
  v7[1] = 0;
  uint64_t v5 = *(void (**)(void *, uint64_t, uint64_t))(a3 + 24);
  swift_retain();
  v5(v7, a2, a3);

  return swift_release();
}

uint64_t initializeWithTake for SimultaneousGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance BodyInput<A>()
{
  return static PropertyKey<>.valuesEqual(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type Stack<BodyInputElement> and conformance <A> Stack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Stack<BodyInputElement> and conformance <A> Stack<A>;
  if (!lazy protocol witness table cache variable for type Stack<BodyInputElement> and conformance <A> Stack<A>)
  {
    _s7SwiftUI12AtomicBuffer33_82B2D47816BC992595021D60C278AFF0LLCyAA11TrackerData33_D64CE6C88E7413721C59A34C0C940F2CLLVGMaTm_2(255, &lazy cache variable for type metadata for Stack<BodyInputElement>, (uint64_t)&type metadata for BodyInputElement, (uint64_t (*)(void, uint64_t))type metadata accessor for Stack);
    lazy protocol witness table accessor for type BodyInputElement and conformance BodyInputElement();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Stack<BodyInputElement> and conformance <A> Stack<A>);
  }
  return result;
}

uint64_t static PropertyKey<>.valuesEqual(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> Stack<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Stack<A>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t static Stack<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  int v11 = (char *)&v30 - v10;
  uint64_t v14 = *v13;
  if (!*v12)
  {
    if (!v14)
    {
      char v26 = 1;
      return v26 & 1;
    }
LABEL_8:
    char v26 = 0;
    return v26 & 1;
  }
  type metadata accessor for Stack();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = swift_projectBox();
  if (!v14) {
    goto LABEL_8;
  }
  uint64_t v17 = v16;
  uint64_t v31 = a4;
  uint64_t v18 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v30 = *(void *)(v16 + v18);
  uint64_t v19 = swift_projectBox();
  int v20 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v21 = v17;
  uint64_t v22 = *(void *)(v19 + v18);
  v20(v11, v21, a3);
  uint64_t v23 = v19;
  uint64_t v24 = v30;
  v20(v8, v23, a3);
  uint64_t v25 = v31;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    swift_release();
    swift_release();
    char v28 = *(void (**)(char *, uint64_t))(v6 + 8);
    v28(v8, a3);
    v28(v11, a3);
    swift_release();
    swift_release();
    goto LABEL_8;
  }
  uint64_t v32 = v22;
  uint64_t v33 = v24;
  char v26 = static Stack<A>.== infix(_:_:)(&v33, &v32, a3, v25);
  int v27 = *(void (**)(char *, uint64_t))(v6 + 8);
  v27(v8, a3);
  v27(v11, a3);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v26 & 1;
}

__n128 __swift_memcpy48_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance BodyCountInput<A>(uint64_t a1, uint64_t a2)
{
  return static PropertyKey.valuesEqual(_:_:)(a1, a2) & 1;
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey@<D0>(void *a1@<X2>, double *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  double result = *a2;
  *a3 = *(void *)a2;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SizeFittingTextLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t protocol witness for Rule.value.getter in conformance PairPreferenceCombiner<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PairPreferenceCombiner.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance BackgroundStyleKey()
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance BackgroundStyleKey();
}

{
  type metadata accessor for Any?(0, &lazy cache variable for type metadata for AnyShapeStyle?);
  return AGCompareValues();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance SystemColorDefinitionKey(void *a1@<X8>)
{
  *a1 = &type metadata for CoreUIDefaultSystemColorDefinition;
  a1[1] = &protocol witness table for CoreUIDefaultSystemColorDefinition;
}

void protocol witness for static PropertyKey.defaultValue.getter in conformance BodyInput<A>(void *a1@<X8>)
{
}

uint64_t partial apply for closure #1 in PropertyList.valueWithSecondaryLookup<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in PropertyList.valueWithSecondaryLookup<A>(_:)(*(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t closure #1 in PropertyList.valueWithSecondaryLookup<A>(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v20 = a5;
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v17 - v11;
  Swift::Int v13 = swift_getAssociatedTypeWitness();
  BloomFilter.init(hashValue:)(v13);
  Swift::Int v14 = swift_getAssociatedTypeWitness();
  BloomFilter.init(hashValue:)(v14);
  findValueWithSecondaryLookup<A>(_:secondaryLookupHandler:filter:secondaryFilter:)(v18, v19, &v22, &v21, a3, a4, (uint64_t)v12);
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, AssociatedTypeWitness) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v20, v12, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_checkMetadataState();
  return (*(uint64_t (**)(void))(AssociatedConformanceWitness + 16))();
}

__n128 __swift_memcpy24_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LayoutDirectionBehavior(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  BOOL result = v3 == 2 && v2 == 2;
  if (v2 != 2 && v3 != 2) {
    return ((v3 ^ v2) & 1) == 0;
  }
  return result;
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance UnderlineStyleKey(uint64_t *a1, uint64_t *a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*a1, a1[1], *a2, a2[1]);
}

BOOL specialized static EnvironmentKey<>._valuesEqual(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 1)
  {
    if (a4 == 1) {
      return 1;
    }
    goto LABEL_6;
  }
  if (a4 == 1)
  {
    swift_retain();
LABEL_6:
    outlined copy of Text.LineStyle?(a3, a4);
    outlined consume of Text.LineStyle?(a1, a2);
    outlined consume of Text.LineStyle?(a3, a4);
    return 0;
  }
  if (a1 != a3) {
    goto LABEL_13;
  }
  if (!a2)
  {
    outlined copy of Text.LineStyle?(a1, 0);
    return !a4;
  }
  if (!a4)
  {
LABEL_13:
    outlined copy of Text.LineStyle?(a1, a2);
    swift_release();
    return 0;
  }
  if (a2 != a4)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 88);
    outlined copy of Text.LineStyle?(a1, a2);
    outlined copy of Text.LineStyle?(a1, a2);
    outlined copy of Text.LineStyle?(a1, a4);
    swift_retain();
    LOBYTE(v9) = v9(a4);
    outlined consume of Text.LineStyle?(a1, a4);
    swift_release_n();
    outlined consume of Text.LineStyle?(a1, a2);
    return (v9 & 1) != 0;
  }
  outlined copy of Text.LineStyle?(a1, a2);
  swift_release();
  return 1;
}

uint64_t *initializeBufferWithCopyOfBuffer for SecondaryLookupTrackedValue(uint64_t *a1, uint64_t *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance UnderlineStyleKey@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_24619B550;
  return result;
}

BOOL static EdgeInsets.== infix(_:_:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  BOOL v8 = a1 == a5;
  if (a2 != a6) {
    BOOL v8 = 0;
  }
  if (a3 != a7) {
    BOOL v8 = 0;
  }
  return a4 == a8 && v8;
}

uint64_t initializeWithCopy for AddGestureModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  BOOL v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  *(_DWORD *)(((unint64_t)v7 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v8 + 19) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for Text.ResolvedProperties.Transition(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 12);
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(void *)a2, v6 | (v5 << 32), v7);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 13) = v7;
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _EnvironmentKeyWritingModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for _EnvironmentKeyWritingModifier<A>);
}

uint64_t partial apply for closure #2 in static StaticIf<>._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, void, void, void, void, void, uint64_t))
{
  return a3(a1, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], a2);
}

uint64_t initializeBufferWithCopyOfBuffer for ForEachState.Evictor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for CodableAttributedString.Range.EncodingWrapper(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

void protocol witness for Rule.value.getter in conformance ForEachState<A, B, C>.Evictor()
{
}

void ForEachState.Evictor.value.getter()
{
  Weakuint64_t Value = (unsigned char *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    if ((*WeakValue & 1) == 0) {
      return;
    }
    goto LABEL_3;
  }
  if (one-time initialization token for evictByDefault != -1) {
    swift_once();
  }
  if (static ForEachEvictionInput.evictByDefault == 1)
  {
LABEL_3:
    uint64_t Value = (unsigned int *)AGGraphGetValue();
    ForEachState.evictItems(seed:)(*Value);
  }
}

void OptionalEdgeInsets.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance BackgroundMaterialKey()
{
  return AGCompareValues();
}

BOOL specialized static CUIDesignLibraryCacheKey.Props.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL result = 0;
  if (*a1 == *a2 && ((a1[1] ^ a2[1]) & 1) == 0 && ((a1[2] ^ a2[2]) & 1) == 0) {
    return *((void *)a1 + 1) == *((void *)a2 + 1);
  }
  return result;
}

unint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance FontModifiersKey(unint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.BridgedEnvironmentResolverKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultAccentColorProviderKey(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for BridgedEnvironmentResolver.Type?, &lazy cache variable for type metadata for BridgedEnvironmentResolver.Type, &lazy cache variable for type metadata for BridgedEnvironmentResolver);
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance TypesettingConfigurationKey(uint64_t a1, uint64_t a2)
{
  if (!specialized static TypesettingLanguage.Storage.== infix(_:_:)(a1, a2)) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  double v5 = *(double *)(a1 + v4);
  int v6 = *(unsigned __int8 *)(a1 + v4 + 8);
  uint64_t v7 = a2 + v4;
  double v8 = *(double *)v7;
  int v9 = *(unsigned __int8 *)(v7 + 8);
  if (v6 != 1)
  {
    if (v5 != v8) {
      LOBYTE(v9) = 1;
    }
    return (v9 & 1) == 0;
  }
  if (v5 == 0.0)
  {
    if (v8 != 0.0) {
      LOBYTE(v9) = 0;
    }
    return (v9 & 1) != 0;
  }
  if (*(void *)&v5 != 1)
  {
    if (*(void *)&v8 <= 1uLL) {
      int v9 = 0;
    }
    return v9 == 1;
  }
  if (*(void *)&v8 != 1) {
    LOBYTE(v9) = 0;
  }
  return (v9 & 1) != 0;
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance BackgroundMaterialKey@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_2461B99D0;
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in static _VariadicView.Tree<>._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in closure #2 in static _VariadicView.Tree<>._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t specialized static Font.Context.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
  {
    int v2 = a1[1];
    uint64_t v3 = *((void *)a1 + 1);
    int v4 = a1[24];
    int v5 = a2[1];
    uint64_t v6 = *((void *)a2 + 1);
    int v7 = a2[24];
    if (v2 == 2)
    {
      if (v5 != 2) {
        return 0;
      }
      if (v3 != v6 || v4 != v7) {
        return 0;
      }
    }
    else
    {
      int v10 = (v5 ^ v2) & 1;
      if (v5 == 2 || v10 != 0 || v3 != v6 || v4 != v7) {
        return 0;
      }
    }
    return a1[25] ^ a2[25] ^ 1u;
  }
  return 0;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance FontModifiersKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static FontModifiersKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance StyleOverrideInput<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = protocol witness for PlatformDrawable.makeAsyncUpdate(content:required:layer:bounds:) in conformance CGDrawingLayer();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for PlatformDrawable.makeAsyncUpdate(content:required:layer:bounds:) in conformance CGDrawingLayer()
{
  return 0;
}

uint64_t protocol witness for Rule.value.getter in conformance UpdateEnvironment<A>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return UpdateEnvironment.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t static ViewModifier<>._makeView(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v9 = *a1;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  uint64_t v12 = a2[5];
  uint64_t v13 = a2[6];
  int v14 = *((_DWORD *)a2 + 20);
  uint64_t v28 = *a2;
  int v29 = v10;
  uint64_t v30 = v11;
  long long v31 = *(_OWORD *)(a2 + 3);
  uint64_t v32 = v12;
  uint64_t v33 = v13;
  long long v34 = *(_OWORD *)(a2 + 7);
  uint64_t v35 = a2[9];
  int v36 = v14;
  LODWORD(v19) = v9;
  uint64_t v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(a7 + 8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(&v19, &v28, a5, a7);
  uint64_t v19 = v28;
  int v20 = v29;
  uint64_t v21 = v30;
  long long v22 = v31;
  uint64_t v23 = v32;
  uint64_t v24 = v33;
  long long v25 = v34;
  uint64_t v26 = v35;
  int v27 = v36;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_bridgeObjectRetain();
  a3(v16, &v19);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

__n128 __swift_memcpy36_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t closure #1 in static StaticIf<>._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  v14[2] = type metadata accessor for StaticIf();
  v14[3] = a3;
  uint64_t v11 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a8, (uint64_t)v14, a3, MEMORY[0x263F8E628], v11, MEMORY[0x263F8E658], v12);
  return v15;
}

uint64_t partial apply for closure #1 in static StaticIf<>._makeView(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #2 in static StaticIf<>._makeView(view:inputs:)(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, closure #1 in static StaticIf<>._makeView(view:inputs:));
}

uint64_t initializeWithTake for CombinedKeyframes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t protocol witness for static DerivedEnvironmentKey.value(in:) in conformance ShouldRedactContentKey@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized static ShouldRedactContentKey.value(in:)(a1);
  *a2 = result & 1;
  return result;
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance DefaultTrackingKey@<D0>(void *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static DefaultTrackingKey.defaultValue, a1);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance DefaultBaselineOffsetKey@<D0>(void *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static DefaultBaselineOffsetKey.defaultValue, a1);
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance TextJustificationKey(_WORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TextJustification(__int16 *a1, _WORD *a2)
{
  __int16 v2 = *a1;
  int v3 = (unsigned __int16)*a2;
  if (*a1 == 2) {
    return *a2 == 2;
  }
  if (*a2 == 2 || ((((v2 & 1) == 0) ^ v3) & 1) == 0) {
    return 0;
  }
  return ((v2 & 0x100) == 0) ^ ((unsigned __int16)(v3 & 0x100) >> 8);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance DefaultKerningKey@<D0>(void *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static DefaultKerningKey.defaultValue, a1);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance TextSuffixKey@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  double result = -0.0;
  *(_OWORD *)(a1 + 40) = xmmword_24619B530;
  return result;
}

uint64_t specialized static EnvironmentKey<>._valuesEqual(_:_:)(char a1, char a2)
{
  char v2 = a1 == 2;
  if (a2 != 2) {
    char v2 = 0;
  }
  if (a1 != 2 && a2 != 2) {
    char v2 = ((a2 & 1) == 0) ^ a1;
  }
  return v2 & 1;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance TextScaleKey(char *a1, char *a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static DerivedEnvironmentKey.value(in:) in conformance TextLayoutProperties.Key@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  v6[0] = v4;
  v6[1] = v3;
  swift_retain();
  swift_retain();
  return TextLayoutProperties.init(from:)(v6, a2);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance BodyHeadOutdentKey@<D0>(void *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static BodyHeadOutdentKey.defaultValue, a1);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ResolvableStringReferenceDateKey@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  _s10Foundation4DateVSgMaTm_4(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v6 = __swift_project_value_buffer(v5, a2);

  return outlined init with copy of Date?(v6, a3);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.ResolvableStringReferenceDateKey(uint64_t a1, uint64_t a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2) & 1;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.StringResolutionDate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ResolvableStringReferenceDateKey(&one-time initialization token for defaultValue, (uint64_t)static EnvironmentValues.StringResolutionDate.defaultValue, a1);
}

uint64_t protocol witness for Rule.value.getter in conformance _ForegroundStyleModifier<A>.ForegroundStyleEnvironment@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return _ForegroundStyleModifier.ForegroundStyleEnvironment.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t partial apply for closure #2 in static StaticIf<>._makeView(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #2 in static StaticIf<>._makeView(view:inputs:)(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, closure #2 in static StaticIf<>._makeView(view:inputs:));
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance LocaleKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), unint64_t *a6, void (*a7)(uint64_t))
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t lazy protocol witness table accessor for type Date and conformance Date(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static _AppearanceActionModifier._makeViewList(modifier:inputs:body:)(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v23 = *(_OWORD *)(a2 + 32);
  long long v24 = v6;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v21 = *(_OWORD *)a2;
  long long v22 = v7;
  if (one-time initialization token for v3 != -1) {
    swift_once();
  }
  unsigned int v8 = static Semantics.v3;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  uint64_t v9 = swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    uint64_t v9 = dyld_program_sdk_at_least();
    if ((v9 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (static Semantics.forced >= v8)
  {
LABEL_9:
    v19[0] = __PAIR64__(DWORD2(v22), v5);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type _AppearanceActionModifier.MergedCallbacks and conformance _AppearanceActionModifier.MergedCallbacks();
    uint64_t v9 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v5 = v9;
  }
LABEL_10:
  long long v16 = *(_OWORD *)(a2 + 48);
  v19[2] = *(_OWORD *)(a2 + 32);
  v19[3] = v16;
  v19[4] = *(_OWORD *)(a2 + 64);
  char v20 = *(unsigned char *)(a2 + 80);
  long long v17 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v17;
  a3(v9, v19, v10, v11, v12, v13, v14, v15);
  return specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(v5, &v21);
}

unint64_t lazy protocol witness table accessor for type _AppearanceActionModifier.MergedCallbacks and conformance _AppearanceActionModifier.MergedCallbacks()
{
  unint64_t result = lazy protocol witness table cache variable for type _AppearanceActionModifier.MergedCallbacks and conformance _AppearanceActionModifier.MergedCallbacks;
  if (!lazy protocol witness table cache variable for type _AppearanceActionModifier.MergedCallbacks and conformance _AppearanceActionModifier.MergedCallbacks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AppearanceActionModifier.MergedCallbacks and conformance _AppearanceActionModifier.MergedCallbacks);
  }
  return result;
}

uint64_t partial apply for closure #1 in static VStack._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static VStack._makeView(view:inputs:)(a1);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _PaddingLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _TraitWritingModifier<A>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _TraitWritingModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(ValueMetadata **)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _EnvironmentKeyWritingModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for _EnvironmentKeyWritingModifier<A>);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance LocaleKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance LocaleKey(a1, a2, a3, a4, MEMORY[0x263F07690], &lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
}

uint64_t initializeWithCopy for _PreferenceWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t protocol witness for Rule.value.getter in conformance MakeResolvedRepresentation<A>(uint64_t a1)
{
  return MakeResolvedRepresentation.value.getter(*v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t MakeResolvedRepresentation.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  long long v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, Value, a2);
  (*(void (**)(uint64_t))(*(void *)(a3 + 8) + 48))(a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a2);
}

uint64_t protocol witness for Rule.value.getter in conformance _TraitWritingModifier<A>.AddTrait@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return _TraitWritingModifier.AddTrait.value.getter(*v2, *(void *)(a1 + 16), a2);
}

uint64_t partial apply for closure #1 in closure #2 in static _VariadicView.Tree<>._makeViewList(view:inputs:)(uint64_t a1)
{
  return closure #1 in closure #2 in static _VariadicView.Tree<>._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OpacityEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _FrameLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t initializeWithCopy for SubviewsCollectionSlice(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 16, a2 + 16);
  uint64_t v5 = *(void **)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = v6;
  id v7 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance SymbolVariantsKey(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
  {
    int v2 = a1[1];
    int v3 = a2[1];
    if (v2 == 3)
    {
      if (v3 == 3) {
        return 1;
      }
    }
    else if (v3 != 3 && v2 == v3)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t static ViewInputsModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v23 = *a1;
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  unsigned int v11 = *((_DWORD *)a2 + 6);
  unsigned int v10 = *((_DWORD *)a2 + 7);
  unsigned int v13 = *((_DWORD *)a2 + 8);
  unsigned int v12 = *((_DWORD *)a2 + 9);
  uint64_t v25 = a2[5];
  uint64_t v26 = a2[6];
  uint64_t v27 = a2[7];
  uint64_t v30 = a2[9];
  __int32 v28 = *((_DWORD *)a2 + 16);
  char v29 = *((unsigned char *)a2 + 80);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v43, a5, a6);
  if ((v43 & 0x100000000) != 0) {
    goto LABEL_6;
  }
  unsigned int v14 = v43;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_6:
      LODWORD(v32) = v23;
      uint64_t v43 = v7;
      int v44 = v8;
      uint64_t v45 = v9;
      unint64_t v46 = __PAIR64__(v10, v11);
      unint64_t v47 = __PAIR64__(v12, v13);
      uint64_t v48 = v25;
      uint64_t v49 = v26;
      v50.i64[0] = v27;
      v50.i32[2] = v28;
      uint64_t v51 = v30;
      LOBYTE(v52) = v29;
      return static ViewModifier.makeMultiViewList(modifier:inputs:body:)((int *)&v32, (uint64_t)&v43, a3);
    }
  }
  else if (static Semantics.forced < v14)
  {
    goto LABEL_6;
  }
  unsigned int v16 = *MEMORY[0x263F288F8];
  uint64_t v43 = v7;
  int v44 = v8;
  uint64_t v45 = v9;
  unint64_t v46 = __PAIR64__(v10, v11);
  unint64_t v47 = __PAIR64__(v12, v13);
  uint64_t v48 = v25;
  uint64_t v49 = MEMORY[0x263F8EE78];
  int32x4_t v50 = vdupq_n_s32(v16);
  LODWORD(v51) = v16;
  HIDWORD(v51) = v16;
  unsigned int v52 = v16;
  LODWORD(v32) = v23;
  long long v17 = *(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(a6 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v17(&v32, &v43, a5, a6);
  uint64_t v18 = v43;
  int v19 = v44;
  uint64_t v20 = v45;
  uint64_t v21 = v48;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_retain_n();
  uint64_t v22 = swift_bridgeObjectRetain_n();
  uint64_t v32 = v18;
  int v33 = v19;
  uint64_t v34 = v20;
  unint64_t v35 = v46;
  unint64_t v36 = v47;
  uint64_t v37 = v21;
  uint64_t v38 = v26;
  uint64_t v39 = v27;
  __int32 v40 = v28;
  uint64_t v41 = v30;
  char v42 = v29;
  ((void (*)(uint64_t, uint64_t *))a3)(v22, &v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t partial apply for closure #1 in static HStack._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static HStack._makeView(view:inputs:)(a1);
}

uint64_t closure #1 in static HStack._makeView(view:inputs:)(uint64_t a1)
{
  v5[2] = type metadata accessor for HStack();
  uint64_t v6 = type metadata accessor for _VariadicView.Tree();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v5, v6, MEMORY[0x263F8E628], v2, MEMORY[0x263F8E658], v3);
  return v7;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _FlexFrameLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t protocol witness for static DerivedEnvironmentKey.value(in:) in conformance ShouldRedactSymbolImagesKey@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized static ShouldRedactSymbolImagesKey.value(in:)(a1);
  *a2 = result & 1;
  return result;
}

uint64_t specialized static ShouldRedactSymbolImagesKey.value(in:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!a1[1])
  {
    v8[0] = *a1;
    v8[1] = 0;
    swift_retain();
    char v4 = specialized static ShouldRedactContentKey.value(in:)(v8);
    swift_release();
    if (v4)
    {
      uint64_t v5 = swift_retain_n();
      char v3 = specialized closure #1 in PropertyList.subscript.getter(v5);
      goto LABEL_6;
    }
LABEL_7:
    char v6 = 0;
    return v6 & 1;
  }
  swift_retain_n();
  swift_retain_n();
  char v2 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v1);
  swift_release_n();
  swift_release_n();
  if ((v2 & 1) == 0) {
    goto LABEL_7;
  }
  swift_retain_n();
  swift_retain_n();
  char v3 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
  swift_release_n();
LABEL_6:
  swift_release_n();
  char v6 = v3 ^ 1;
  return v6 & 1;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance SymbolVariantsKey(_WORD *a1@<X8>)
{
  *a1 = 768;
}

uint64_t partial apply for closure #2 in static _BackgroundModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #2 in static _BackgroundModifier._makeView(modifier:inputs:body:)(a1);
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    for (uint64_t i = 0; ; i += 64)
    {
      uint64_t v7 = a1 + i;
      uint64_t v8 = a2 + i;
      if (*(void *)(a1 + i + 32) != *(void *)(a2 + i + 32) || *(void *)(a1 + i + 40) != *(void *)(a2 + i + 40)) {
        break;
      }
      char v10 = *(unsigned char *)(v7 + 84);
      float v11 = *(float *)(v7 + 88);
      char v12 = *(unsigned char *)(v7 + 92);
      int v13 = *(unsigned __int8 *)(v8 + 84);
      float v14 = *(float *)(v8 + 88);
      int v15 = *(unsigned __int8 *)(v8 + 92);
      float v17 = *(float *)(v7 + 76);
      float v16 = *(float *)(v7 + 80);
      __int16 v18 = *(_WORD *)(v7 + 72);
      uint64_t v19 = *(void *)(v7 + 64);
      float v21 = *(float *)(v8 + 76);
      float v20 = *(float *)(v8 + 80);
      __int16 v22 = *(_WORD *)(v8 + 72);
      uint64_t v23 = *(void *)(v8 + 64);
      long long v30 = *(_OWORD *)(v7 + 48);
      uint64_t v31 = v19;
      __int16 v32 = v18;
      long long v27 = *(_OWORD *)(v8 + 48);
      uint64_t v28 = v23;
      __int16 v29 = v22;
      char v24 = static _SymbolEffect.Storage.== infix(_:_:)(&v30, &v27);
      uint64_t result = 0;
      if ((v24 & 1) == 0 || v17 != v21) {
        return result;
      }
      if (v10)
      {
        if (!v13) {
          return 0;
        }
      }
      else
      {
        if (v16 == v20) {
          char v26 = v13;
        }
        else {
          char v26 = 1;
        }
        if (v26) {
          return 0;
        }
      }
      if (v12)
      {
        if (!v15) {
          return 0;
        }
      }
      else
      {
        if (v11 == v14) {
          char v6 = v15;
        }
        else {
          char v6 = 1;
        }
        if (v6) {
          return 0;
        }
      }
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t (*v23)(uint64_t);
  char v24;
  uint64_t (*v25)(uint64_t);
  char v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t result;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t (*v46)(uint64_t);
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  char v3 = 0;
  uint64_t v49 = a2 + 32;
  int32x4_t v50 = a1 + 32;
  uint64_t v48 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v51 = v3;
    char v4 = v50 + 32 * v3;
    char v6 = *(void *)v4;
    uint64_t v5 = *(void *)(v4 + 8);
    uint64_t v7 = *(void *)(v4 + 24);
    uint64_t v8 = v49 + 32 * v3;
    char v10 = *(void *)v8;
    uint64_t v9 = *(void *)(v8 + 8);
    float v11 = *(void *)(v8 + 24);
    int v55 = *(unsigned char *)(v4 + 16);
    int v53 = *(void *)v4;
    int v54 = v5;
    unsigned int v52 = *(unsigned char *)(v8 + 16);
    if (v55)
    {
      if ((*(unsigned char *)(v8 + 16) & 1) == 0) {
        return 0;
      }
      char v12 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 96);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v10, v9, 1);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v6, v5, 1);
      if ((v12(v10) & 1) == 0)
      {
LABEL_117:
        outlined consume of Text.Storage(v10, v9, v55);
        swift_bridgeObjectRelease();
        uint64_t v41 = v6;
        char v42 = v54;
        uint64_t v43 = v55;
        goto LABEL_127;
      }
    }
    else
    {
      if (*(unsigned char *)(v8 + 16)) {
        return 0;
      }
      if (v6 == v10 && v5 == v9)
      {
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v6, v5, 0);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v6, v5, 0);
      }
      else
      {
        float v14 = *(void *)(v4 + 8);
        int v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v10, v9, 0);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v6, v14, 0);
        if ((v15 & 1) == 0) {
          goto LABEL_117;
        }
      }
    }
    uint64_t v56 = v10;
    int v57 = v9;
    float v16 = *(void *)(v7 + 16);
    if (v16 != *(void *)(v11 + 16)) {
      goto LABEL_126;
    }
    if (!v16)
    {
LABEL_69:
      float v17 = v56;
      __int16 v18 = v57;
      goto LABEL_70;
    }
    float v17 = v10;
    __int16 v18 = v9;
    if (v7 != v11) {
      break;
    }
LABEL_70:
    char v3 = v51 + 1;
    outlined consume of Text.Storage(v17, v18, v52);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v53, v54, v55);
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    if (v51 + 1 == v48) {
      return result;
    }
  }
  uint64_t v19 = *(double *)(v7 + 32);
  float v20 = *(unsigned __int8 *)(v7 + 40);
  float v21 = *(uint64_t *)(v11 + 32);
  __int16 v22 = *(unsigned __int8 *)(v11 + 40);
  switch(v20 >> 5)
  {
    case 1u:
      if ((v22 & 0xE0) != 0x20) {
        goto LABEL_126;
      }
      if (v19 == 0.0)
      {
        if (*(double *)&v21 != 0.0)
        {
          int v44 = 0;
          goto LABEL_124;
        }
LABEL_65:
        __int16 v29 = 0;
LABEL_66:
        long long v30 = *(unsigned char *)(v11 + 40);
LABEL_67:
        outlined copy of Text.Modifier(v29, v30);
      }
      else
      {
        if (*(double *)&v21 == 0.0) {
          goto LABEL_126;
        }
LABEL_42:
        uint64_t v25 = *(uint64_t (**)(uint64_t))(**(void **)&v19 + 96);
        outlined copy of Text.Modifier(*(void *)(v7 + 32), *(unsigned char *)(v7 + 40));
        outlined copy of Text.Modifier(v21, v22);
        char v24 = v25(v21);
LABEL_43:
        char v26 = v24;
        outlined consume of Text.Modifier(v21, v22);
        outlined consume of Text.Modifier(*(uint64_t *)&v19, v20);
        if ((v26 & 1) == 0) {
          goto LABEL_126;
        }
      }
LABEL_68:
      if (v16 == 1) {
        goto LABEL_69;
      }
      __int16 v32 = 0;
      int v33 = 1;
      while (v16 != v33)
      {
        if (v33 >= *(void *)(v7 + 16)) {
          goto LABEL_120;
        }
        if (v33 >= *(void *)(v11 + 16)) {
          goto LABEL_121;
        }
        ++v33;
        unint64_t v36 = *(uint64_t *)(v7 + v32 + 48);
        uint64_t v37 = *(unsigned __int8 *)(v7 + v32 + 56);
        uint64_t v38 = *(uint64_t *)(v11 + v32 + 48);
        LODWORD(v20) = *(unsigned __int8 *)(v11 + v32 + 56);
        switch(v37 >> 5)
        {
          case 1u:
            if ((v20 & 0xE0) != 0x20) {
              goto LABEL_126;
            }
            if (*(double *)&v36 == 0.0) {
              goto LABEL_108;
            }
            if (*(double *)&v38 == 0.0) {
              goto LABEL_126;
            }
            goto LABEL_101;
          case 2u:
            if ((v20 & 0xE0) != 0x40) {
              goto LABEL_126;
            }
            if (v37)
            {
              if ((v20 & 1) == 0) {
                goto LABEL_126;
              }
            }
            else if ((v20 & 1) != 0 || *(double *)&v36 != *(double *)&v38)
            {
              goto LABEL_126;
            }
            goto LABEL_79;
          case 3u:
            uint64_t v34 = (v20 & 0xE0) == 96;
            goto LABEL_74;
          case 4u:
            uint64_t v34 = (v20 & 0xE0) == 128;
            goto LABEL_74;
          case 5u:
            uint64_t v34 = (v20 & 0xE0) == 160;
LABEL_74:
            if (!v34 || *(double *)&v36 != *(double *)&v38) {
              goto LABEL_126;
            }
            goto LABEL_79;
          case 6u:
            if ((v20 & 0xE0) != 0xC0) {
              goto LABEL_126;
            }
LABEL_101:
            unint64_t v47 = *(uint64_t (**)(uint64_t))(*(void *)v36 + 96);
            outlined copy of Text.Modifier(v36, v37);
            outlined copy of Text.Modifier(v38, v20);
            uint64_t v39 = v47(v38);
            goto LABEL_102;
          case 7u:
            if (v36 | v37 ^ 0xE0)
            {
              if (v20 < 0xE0 || v38 != 1) {
                goto LABEL_126;
              }
            }
            else if (v20 < 0xE0 || *(double *)&v38 != 0.0)
            {
              goto LABEL_126;
            }
            if (v20 != 224) {
              goto LABEL_126;
            }
            goto LABEL_79;
          default:
            if (v20 >= 0x20) {
              goto LABEL_126;
            }
            if (*(double *)&v36 == 0.0)
            {
LABEL_108:
              if (*(double *)&v38 != 0.0)
              {
                int v44 = 0;
                uint64_t v45 = *(unsigned char *)(v7 + v32 + 56);
                goto LABEL_125;
              }
            }
            else
            {
              if (*(double *)&v38 == 0.0) {
                goto LABEL_126;
              }
              if (v36 != v38)
              {
                unint64_t v46 = *(uint64_t (**)(uint64_t))(*(void *)v36 + 88);
                outlined copy of Text.Modifier(v36, v37);
                outlined copy of Text.Modifier(v38, v20);
                uint64_t v39 = v46(v38);
LABEL_102:
                __int32 v40 = v39;
                outlined consume of Text.Modifier(v38, v20);
                outlined consume of Text.Modifier(v36, v37);
                if ((v40 & 1) == 0) {
                  goto LABEL_126;
                }
              }
            }
LABEL_79:
            v32 += 16;
            if (v16 == v33) {
              goto LABEL_69;
            }
            break;
        }
      }
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      uint64_t v19 = 0.0;
LABEL_123:
      int v44 = *(void *)&v19;
LABEL_124:
      uint64_t v45 = v20;
LABEL_125:
      outlined consume of Text.Modifier(v44, v45);
LABEL_126:
      outlined consume of Text.Storage(v56, v57, v52);
      swift_bridgeObjectRelease();
      uint64_t v41 = v53;
      char v42 = v54;
      uint64_t v43 = v55;
LABEL_127:
      outlined consume of Text.Storage(v41, v42, v43);
      swift_bridgeObjectRelease();
      break;
    case 2u:
      if ((v22 & 0xE0) != 0x40) {
        goto LABEL_123;
      }
      if ((v20 & 1) == 0)
      {
        if (v22) {
          goto LABEL_118;
        }
LABEL_39:
        outlined copy of Text.Modifier(*(void *)(v11 + 32), *(unsigned char *)(v11 + 40));
        outlined consume of Text.Modifier(*(uint64_t *)&v19, v20);
        if (v19 != *(double *)&v21) {
          goto LABEL_126;
        }
        goto LABEL_68;
      }
      if ((v22 & 1) == 0)
      {
LABEL_118:
        outlined copy of Text.Modifier(*(void *)(v11 + 32), *(unsigned char *)(v11 + 40));
        goto LABEL_123;
      }
      __int16 v29 = *(void *)(v11 + 32);
      goto LABEL_66;
    case 3u:
      if ((v22 & 0xE0) != 0x60) {
        goto LABEL_123;
      }
      goto LABEL_39;
    case 4u:
      if ((v22 & 0xE0) != 0x80) {
        goto LABEL_123;
      }
      goto LABEL_39;
    case 5u:
      if ((v22 & 0xE0) == 0xA0) {
        goto LABEL_39;
      }
      goto LABEL_123;
    case 6u:
      if ((v22 & 0xE0) == 0xC0) {
        goto LABEL_42;
      }
      goto LABEL_126;
    case 7u:
      if (!(*(void *)&v19 | v20 ^ 0xE0))
      {
        long long v27 = v22 >= 0xE0 && v21 == 0;
        if (!v27 || v22 != 224) {
          goto LABEL_123;
        }
        outlined copy of Text.Modifier(0, 0xE0u);
        outlined consume of Text.Modifier(*(uint64_t *)&v19, v20);
        goto LABEL_68;
      }
      uint64_t v28 = v22 >= 0xE0 && v21 == 1;
      if (!v28 || v22 != 224) {
        goto LABEL_123;
      }
      __int16 v29 = 1;
      long long v30 = -32;
      goto LABEL_67;
    default:
      if (v22 >= 0x20) {
        goto LABEL_126;
      }
      if (v19 == 0.0)
      {
        if (*(double *)&v21 != 0.0) {
          goto LABEL_122;
        }
        goto LABEL_65;
      }
      if (*(double *)&v21 == 0.0) {
        goto LABEL_126;
      }
      if (*(void *)&v19 != v21)
      {
        uint64_t v23 = *(uint64_t (**)(uint64_t))(**(void **)&v19 + 88);
        outlined copy of Text.Modifier(*(void *)(v7 + 32), *(unsigned char *)(v7 + 40));
        outlined copy of Text.Modifier(v21, v22);
        char v24 = v23(v21);
        goto LABEL_43;
      }
      goto LABEL_68;
  }
  return 0;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t (*v19)(uint64_t);
  char v20;
  uint64_t (*v21)(uint64_t);
  char v22;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  char v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(unsigned char *)(a1 + 40);
  uint64_t v8 = *(unsigned char *)(a2 + 40);
  outlined copy of Text.Modifier(v5, v7);
  outlined copy of Text.Modifier(v6, v8);
  uint64_t v9 = specialized static Text.Modifier.== infix(_:_:)(v5, v7, v6, v8);
  outlined consume of Text.Modifier(v6, v8);
  uint64_t result = outlined consume of Text.Modifier(v5, v7);
  if ((v9 & 1) == 0) {
    return 0;
  }
  float v11 = v2 - 1;
  if (v2 == 1) {
    return 1;
  }
  char v12 = (uint64_t *)(a1 + 56);
  int v13 = (uint64_t *)(a2 + 56);
  while (v11)
  {
    float v14 = *(v12 - 1);
    float v16 = *(unsigned __int8 *)v12;
    v12 += 2;
    int v15 = v16;
    float v17 = *(v13 - 1);
    __int16 v18 = *(unsigned __int8 *)v13;
    switch(v16 >> 5)
    {
      case 1u:
        if ((v18 & 0xE0) != 0x20) {
          return 0;
        }
        if (*(double *)&v14 == 0.0) {
          goto LABEL_38;
        }
        if (*(double *)&v17 == 0.0) {
          return 0;
        }
        goto LABEL_31;
      case 2u:
        if ((v18 & 0xE0) != 0x40) {
          return 0;
        }
        if (v15)
        {
          if ((v18 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          if (v18) {
            return 0;
          }
LABEL_9:
          if (*(double *)&v14 != *(double *)&v17) {
            return 0;
          }
        }
        goto LABEL_10;
      case 3u:
        if ((v18 & 0xE0) != 0x60) {
          return 0;
        }
        goto LABEL_9;
      case 4u:
        if ((v18 & 0xE0) != 0x80) {
          return 0;
        }
        goto LABEL_9;
      case 5u:
        if ((v18 & 0xE0) != 0xA0) {
          return 0;
        }
        goto LABEL_9;
      case 6u:
        if ((v18 & 0xE0) != 0xC0) {
          return 0;
        }
LABEL_31:
        float v21 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 96);
        outlined copy of Text.Modifier(v14, v15);
        outlined copy of Text.Modifier(v17, v18);
        float v20 = v21(v17);
        goto LABEL_32;
      case 7u:
        if (v14 | v15 ^ 0xE0)
        {
          if (v18 < 0xE0) {
            return 0;
          }
          uint64_t result = 0;
          if (v17 != 1) {
            return result;
          }
        }
        else
        {
          if (v18 < 0xE0) {
            return 0;
          }
          uint64_t result = 0;
          if (*(double *)&v17 != 0.0) {
            return result;
          }
        }
        if (v18 != 224) {
          return result;
        }
        goto LABEL_10;
      default:
        if (v18 >= 0x20) {
          return 0;
        }
        if (*(double *)&v14 == 0.0)
        {
LABEL_38:
          if (*(double *)&v17 != 0.0)
          {
            outlined consume of Text.Modifier(0, v15);
            return 0;
          }
        }
        else
        {
          if (*(double *)&v17 == 0.0) {
            return 0;
          }
          if (v14 != v17)
          {
            uint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 88);
            outlined copy of Text.Modifier(v14, v15);
            outlined copy of Text.Modifier(v17, v18);
            float v20 = v19(v17);
LABEL_32:
            __int16 v22 = v20;
            outlined consume of Text.Modifier(v17, v18);
            outlined consume of Text.Modifier(v14, v15);
            if ((v22 & 1) == 0) {
              return 0;
            }
          }
        }
LABEL_10:
        v13 += 2;
        uint64_t result = 1;
        if (!--v11) {
          return result;
        }
        break;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  BOOL v15;
  uint64_t v16;
  uint64_t (*v18)(uint64_t);

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2)
  {
    char v3 = a1;
    if (a1 != a2)
    {
      char v4 = 0;
      float v16 = a2;
      do
      {
        uint64_t v5 = *(void *)(v3 + v4 + 32);
        char v6 = *(void *)(v3 + v4 + 40);
        uint64_t v7 = *(_DWORD *)(v3 + v4 + 48);
        uint64_t v8 = *(unsigned __int8 *)(v3 + v4 + 52);
        uint64_t v9 = *(void *)(a2 + v4 + 40);
        char v10 = *(_DWORD *)(a2 + v4 + 48);
        float v11 = *(unsigned __int8 *)(a2 + v4 + 52);
        if (v5 == *(void *)(a2 + v4 + 32))
        {
          uint64_t result = 0;
          int v15 = v6 == v9 && v7 == v10;
          if (!v15 || ((v8 ^ v11) & 1) != 0) {
            return result;
          }
        }
        else
        {
          __int16 v18 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 104);
          swift_retain();
          char v12 = swift_retain();
          LOBYTE(v18) = v18(v12);
          swift_release();
          swift_release();
          uint64_t result = 0;
          if ((v18 & 1) == 0) {
            return result;
          }
          if (v6 != v9 || v7 != v10) {
            return result;
          }
          a2 = v16;
          char v3 = a1;
          if ((v8 ^ v11)) {
            return result;
          }
        }
        v4 += 24;
        --v2;
      }
      while (v2);
    }
  }
  return 1;
}

{
  uint64_t v2;
  unsigned char *v3;
  unsigned char *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    char v3 = (unsigned char *)(a1 + 40);
    char v4 = (unsigned char *)(a2 + 40);
    do
    {
      char v6 = *((void *)v3 - 1);
      uint64_t v7 = *((void *)v4 - 1);
      uint64_t v5 = *v4;
      if (*v3 == 1)
      {
        if (v6)
        {
          if (!v7) {
            uint64_t v5 = 0;
          }
          if ((v5 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          if (v7) {
            uint64_t v5 = 0;
          }
          if ((v5 & 1) == 0) {
            return 0;
          }
        }
      }
      else
      {
        if (v6 != v7) {
          uint64_t v5 = 1;
        }
        if (v5) {
          return 0;
        }
      }
      v3 += 16;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return 1;
}

{
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    char v3 = (double *)(a2 + 40);
    char v4 = (double *)(a1 + 40);
    do
    {
      uint64_t v5 = *((void *)v4 - 1);
      char v6 = *v4;
      uint64_t v7 = *v3;
      if (v5 == *((void *)v3 - 1))
      {
        if (v6 != v7) {
          return 0;
        }
      }
      else
      {
        uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 88);
        swift_retain();
        uint64_t v9 = swift_retain();
        LOBYTE(v8) = v8(v9);
        swift_release();
        swift_release();
        uint64_t result = 0;
        if ((v8 & 1) == 0 || v6 != v7) {
          return result;
        }
      }
      v3 += 2;
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return 1;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  char v4 = type metadata accessor for LocalizedStringKey.FormatArgument(0) - 8;
  MEMORY[0x270FA5388](v4);
  char v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  char v10 = (char *)&v19 - v9;
  float v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      int v15 = 1;
    }
    else
    {
      char v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      int v13 = *(void *)(v8 + 72);
      float v14 = v11 - 1;
      do
      {
        outlined init with copy of LocalizedStringKey.FormatArgument(a1 + v12, (uint64_t)v10);
        outlined init with copy of LocalizedStringKey.FormatArgument(a2 + v12, (uint64_t)v6);
        int v15 = static LocalizedStringKey.FormatArgument.Storage.== infix(_:_:)(v10, v6);
        outlined destroy of LocalizedStringKey.FormatArgument((uint64_t)v6);
        outlined destroy of LocalizedStringKey.FormatArgument((uint64_t)v10);
        float v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    int v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  float64x2_t *v4;
  float64x2_t *v5;
  uint64_t result;
  BOOL v8;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  char v3 = v2 - 1;
  char v4 = (float64x2_t *)(a2 + 40);
  uint64_t v5 = (float64x2_t *)(a1 + 40);
  do
  {
    uint64_t result = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*v5, *v4), (int32x4_t)vceqq_f64(v5[1], v4[1]))), 0xFuLL))) & (*(void *)&v5[-1].f64[1] == *(void *)&v4[-1].f64[1]);
    uint64_t v8 = v3-- != 0;
    if (result != 1) {
      break;
    }
    char v4 = (float64x2_t *)((char *)v4 + 40);
    uint64_t v5 = (float64x2_t *)((char *)v5 + 40);
  }
  while (v8);
  return result;
}

{
  uint64_t v2;
  uint64_t i;
  uint64_t v6;
  float v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  for (uint64_t i = 0; ; i += 72)
  {
    char v6 = a1 + i;
    uint64_t v7 = *(float *)(a1 + i + 80);
    uint64_t v8 = *(void *)(a1 + i + 88);
    uint64_t v9 = *(unsigned __int8 *)(a1 + i + 96);
    char v10 = a2 + i;
    float v11 = *(float *)(a2 + i + 80);
    char v12 = *(void *)(a2 + i + 88);
    int v13 = *(unsigned __int8 *)(a2 + i + 96);
    if (*(unsigned char *)(a1 + i + 77))
    {
      if (v7 == v11) {
        float v14 = *(unsigned char *)(a2 + i + 77);
      }
      else {
        float v14 = 0;
      }
      if ((v14 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      if (*(unsigned char *)(a2 + i + 77)) {
        return result;
      }
      float v16 = *(void *)(v6 + 32);
      float v17 = *(void *)(v10 + 32);
      if (*(float *)&v16 != *(float *)&v17) {
        return result;
      }
      if (*((float *)&v16 + 1) != *((float *)&v17 + 1)) {
        return result;
      }
      __int16 v18 = *(void *)(v6 + 40);
      uint64_t v19 = *(void *)(v10 + 40);
      if (*(float *)&v18 != *(float *)&v19) {
        return result;
      }
      if (*((float *)&v18 + 1) != *((float *)&v19 + 1)) {
        return result;
      }
      if (*(double *)(v6 + 48) != *(double *)(v10 + 48)) {
        return result;
      }
      if (*(double *)(v6 + 56) != *(double *)(v10 + 56)) {
        return result;
      }
      if (*(double *)(v6 + 64) != *(double *)(v10 + 64)) {
        return result;
      }
      float v20 = *(unsigned int *)(v6 + 72) | ((unint64_t)*(unsigned __int8 *)(v6 + 76) << 32);
      float v21 = *(unsigned int *)(v10 + 72) | ((unint64_t)*(unsigned __int8 *)(v10 + 76) << 32);
      if (*(float *)&v20 != *(float *)&v21) {
        return result;
      }
      uint64_t result = 0;
      if (BYTE4(v20) != BYTE4(v21) || v7 != v11) {
        return result;
      }
    }
    if (v9 == 255)
    {
      if (v13 != 255) {
        goto LABEL_34;
      }
      goto LABEL_6;
    }
    if (v13 == 255)
    {
LABEL_34:
      outlined copy of GraphicsBlendMode?(*(void *)(a2 + i + 88), *(unsigned char *)(a2 + i + 96));
      outlined copy of GraphicsBlendMode?(v8, v9);
      outlined consume of GraphicsBlendMode?(v8, v9);
      outlined consume of GraphicsBlendMode?(v12, v13);
      return 0;
    }
    if (v9) {
      break;
    }
    if (v13) {
      goto LABEL_38;
    }
    outlined consume of GraphicsBlendMode(*(void *)(a1 + i + 88), 0);
    outlined consume of GraphicsBlendMode(v12, 0);
    if (v8 != v12) {
      return 0;
    }
LABEL_6:
    if (!--v2) {
      return 1;
    }
  }
  if (v13)
  {
    outlined copy of GraphicsBlendMode?(*(void *)(a2 + i + 88), *(unsigned char *)(a2 + i + 96));
    outlined copy of GraphicsBlendMode?(v8, v9);
    outlined consume of GraphicsBlendMode(v8, 1);
    outlined consume of GraphicsBlendMode(v12, 1);
    if (v8 != v12) {
      return 0;
    }
    goto LABEL_6;
  }
  outlined copy of GraphicsBlendMode?(*(void *)(a1 + i + 88), *(unsigned char *)(a1 + i + 96));
LABEL_38:
  outlined copy of GraphicsBlendMode?(v12, v13);
  outlined consume of GraphicsBlendMode(v8, v9 & 1);
  outlined consume of GraphicsBlendMode(v12, (v9 & 1) == 0);
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  float v15;
  unint64_t v16;
  float v18;
  unint64_t v19;
  BOOL v20;
  BOOL v22;
  BOOL v23;
  uint64_t v25;
  BOOL v26;
  float *v27;
  float *v28;
  uint64_t v29;
  uint64_t result;
  float v31;
  float v32;
  float v33;
  uint64_t v34;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    char v3 = 0;
    char v4 = a1 + 32;
    uint64_t v5 = a2 + 32;
    do
    {
      uint64_t v7 = 3 * v3++;
      v7 *= 8;
      uint64_t v8 = *(void *)(v4 + v7);
      uint64_t v9 = *(void *)(v4 + v7 + 8);
      char v10 = *(unsigned __int8 *)(v4 + v7 + 16);
      float v11 = v5 + v7;
      char v12 = *(void *)(v5 + v7);
      int v13 = *(void *)(v11 + 8);
      float v14 = *(unsigned __int8 *)(v11 + 16);
      switch(v10)
      {
        case 1:
          if (v14 != 1) {
            return 0;
          }
          int v15 = *(float *)&v12;
          float v16 = HIDWORD(v12);
          if (*(float *)&v8 != v15 || *((float *)&v8 + 1) != *(float *)&v16) {
            return 0;
          }
          continue;
        case 2:
          if (v14 != 2) {
            return 0;
          }
          __int16 v18 = *(float *)&v12;
          uint64_t v19 = HIDWORD(v12);
          float v20 = *(float *)&v8 == v18 && *((float *)&v8 + 1) == *(float *)&v19;
          if (!v20 || *(float *)&v9 != *(float *)&v13) {
            return 0;
          }
          continue;
        case 3:
          if (v14 != 3) {
            return 0;
          }
          __int16 v22 = *(float *)&v8 == *(float *)&v12 && *((float *)&v8 + 1) == *((float *)&v12 + 1);
          uint64_t v23 = v22 && *(float *)&v9 == *(float *)&v13;
          if (!v23 || *((float *)&v9 + 1) != *((float *)&v13 + 1)) {
            return 0;
          }
          continue;
        case 4:
          if (v14 != 4) {
            return 0;
          }
          uint64_t v25 = *(void *)(v8 + 16);
          if (v25 != *(void *)(v12 + 16)) {
            return 0;
          }
          if (v25) {
            char v26 = v8 == v12;
          }
          else {
            char v26 = 1;
          }
          if (v26) {
            continue;
          }
          if (*(float *)(v8 + 32) != *(float *)(v12 + 32)) {
            return 0;
          }
          if (v25 == 1) {
            continue;
          }
          if (*(float *)(v8 + 36) != *(float *)(v12 + 36)) {
            return 0;
          }
          long long v27 = (float *)(v8 + 40);
          uint64_t v28 = (float *)(v12 + 40);
          __int16 v29 = v25 - 2;
          break;
        case 5:
          uint64_t v34 = v13 | v12;
          if (v14 != 5 || v34 != 0) {
            return 0;
          }
          continue;
        default:
          if (*(unsigned char *)(v11 + 16)) {
            char v6 = 0;
          }
          else {
            char v6 = *(float *)&v8 == *(float *)&v12;
          }
          if (!v6) {
            return 0;
          }
          continue;
      }
      while (v29)
      {
        uint64_t result = 0;
        uint64_t v31 = *v27++;
        __int16 v32 = v31;
        int v33 = *v28++;
        --v29;
        if (v32 != v33) {
          return result;
        }
      }
    }
    while (v3 != v2);
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t *v13;
  float v14;
  uint64_t v15;
  unsigned __int8 v16;
  float v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int v43;
  char v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  __int32 v49;
  __int8 v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int8x16_t *v78;
  int8x16_t v79[7];
  __int32 v80;
  __int8 v81;
  _OWORD v82[7];
  int v83;
  char v84;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  char v3 = 0;
  int v68 = a2 + 32;
  int v69 = a1 + 32;
  int v67 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v5 = v69 + 56 * v3;
    char v6 = *(void *)v5;
    uint64_t v7 = *(void *)(v5 + 8);
    uint64_t v77 = *(void *)(v5 + 16);
    uint64_t v78 = *(int8x16_t **)(v5 + 24);
    uint64_t v8 = *(float *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 40);
    char v10 = v68 + 56 * v3;
    float v11 = *(void *)v10;
    v76 = *(void *)(v10 + 8);
    char v12 = *(void *)(v10 + 16);
    int v13 = *(int8x16_t **)(v10 + 24);
    float v14 = *(float *)(v10 + 32);
    int v15 = *(void *)(v10 + 40);
    float v16 = *(unsigned char *)(v10 + 48);
    LODWORD(v17) = HIDWORD(*(void *)v5);
    __int16 v18 = v7;
    uint64_t v73 = v15;
    v74 = v9;
    v75 = v16;
    uint64_t v72 = v3;
    if (v77 < 0) {
      break;
    }
    uint64_t v19 = *(unsigned char *)(v5 + 48);
    float v20 = *(void *)(v10 + 16);
    if (v12 < 0) {
      goto LABEL_62;
    }
    outlined copy of Material.Layer.Storage(v6, v7, v77);
    outlined copy of GraphicsBlendMode(v9, v19);
    outlined copy of Material.Layer.Storage(v11, v76, v12);
    outlined copy of GraphicsBlendMode(v15, v75);
    int v70 = v7;
    int v71 = v6;
    outlined consume of Material.Layer.Storage(v6, v7, v77);
    float v21 = v12;
    outlined consume of Material.Layer.Storage(v11, v76, v12);
    __int16 v22 = v76;
    if (*(float *)&v6 != *(float *)&v11
      || v17 != *((float *)&v11 + 1)
      || *(float *)&v18 != *(float *)&v76
      || *((float *)&v18 + 1) != *((float *)&v76 + 1)
      || v8 != v14)
    {
LABEL_55:
      int v55 = v21;
      uint64_t v7 = v70;
      char v6 = v71;
      uint64_t v56 = v19;
      int v57 = v75;
      int v15 = v73;
      uint64_t v58 = v74;
      goto LABEL_63;
    }
LABEL_47:
    if (v19)
    {
      if (!v75)
      {
        uint64_t v58 = v74;
        uint64_t v63 = swift_unknownObjectRetain();
        uint64_t v56 = 1;
        outlined consume of GraphicsBlendMode(v63, 1);
        int v15 = v73;
        outlined consume of GraphicsBlendMode(v73, 0);
        int v57 = 0;
LABEL_60:
        int v55 = v21;
        uint64_t v7 = v70;
        char v6 = v71;
        goto LABEL_63;
      }
      outlined copy of GraphicsBlendMode(v73, 1);
      outlined copy of GraphicsBlendMode(v74, 1);
      outlined consume of GraphicsBlendMode(v74, 1);
      outlined consume of GraphicsBlendMode(v73, 1);
      outlined consume of Material.Layer.Storage(v11, v22, v21);
      outlined consume of GraphicsBlendMode(v73, 1);
      outlined consume of Material.Layer.Storage(v71, v70, v77);
      outlined consume of GraphicsBlendMode(v74, 1);
      if (v74 != v73) {
        return 0;
      }
    }
    else
    {
      if (v75)
      {
        int v15 = v73;
        swift_unknownObjectRetain();
        uint64_t v58 = v74;
        outlined consume of GraphicsBlendMode(v74, 0);
        int v57 = 1;
        outlined consume of GraphicsBlendMode(v73, 1);
        uint64_t v56 = 0;
        goto LABEL_60;
      }
      outlined consume of GraphicsBlendMode(v74, 0);
      outlined consume of GraphicsBlendMode(v73, 0);
      outlined consume of Material.Layer.Storage(v11, v22, v21);
      outlined consume of GraphicsBlendMode(v73, 0);
      outlined consume of Material.Layer.Storage(v71, v70, v77);
      outlined consume of GraphicsBlendMode(v74, 0);
      if (v74 != v73) {
        return 0;
      }
    }
    char v3 = v72 + 1;
    uint64_t result = 1;
    if (v72 + 1 == v67) {
      return result;
    }
  }
  if ((v12 & 0x8000000000000000) == 0)
  {
    uint64_t v19 = *(unsigned char *)(v5 + 48);
    float v20 = *(void *)(v10 + 16);
    swift_bridgeObjectRetain_n();
LABEL_62:
    outlined copy of Material.Layer.Storage(v6, v7, v77);
    uint64_t v58 = v9;
    int v66 = v19;
    outlined copy of GraphicsBlendMode(v9, v19);
    outlined copy of Material.Layer.Storage(v11, v76, v20);
    int v57 = v75;
    outlined copy of GraphicsBlendMode(v15, v75);
    outlined copy of Material.Layer.Storage(v11, v76, v20);
    outlined consume of Material.Layer.Storage(v6, v7, v77);
    uint64_t v56 = v66;
    outlined consume of Material.Layer.Storage(v11, v76, v20);
    outlined consume of Material.Layer.Storage(v6, v7, v77);
    int v55 = v20;
LABEL_63:
    outlined consume of Material.Layer.Storage(v11, v76, v55);
    outlined consume of GraphicsBlendMode(v15, v57);
    outlined consume of Material.Layer.Storage(v6, v7, v77);
    outlined consume of GraphicsBlendMode(v58, v56);
    return 0;
  }
  long long v30 = *(float *)&v6 == *(float *)&v11
     && *((float *)&v6 + 1) == *((float *)&v11 + 1)
     && *(float *)&v7 == *(float *)&v76
     && *((float *)&v7 + 1) == *((float *)&v76 + 1)
     && *(float *)&v77 == *(float *)&v12;
  uint64_t v64 = *(void *)(v10 + 16);
  int v65 = *(unsigned char *)(v5 + 48);
  if (!v30 || (uint64_t v31 = v78[1].i64[0], v31 != v13[1].i64[0]))
  {
    int v59 = *(void *)(v10 + 16);
    int v60 = *(unsigned char *)(v5 + 48);
    outlined copy of Material.Layer.Storage(v11, v76, v59);
    outlined copy of Material.Layer.Storage(v6, v7, v77);
    outlined copy of Material.Layer.Storage(v11, v76, v59);
    outlined copy of Material.Layer.Storage(v6, v7, v77);
    outlined copy of Material.Layer.Storage(v6, v7, v77);
    outlined copy of GraphicsBlendMode(v9, v60);
    outlined copy of Material.Layer.Storage(v11, v76, v59);
    outlined copy of GraphicsBlendMode(v73, v16);
    __int16 v22 = v76;
    outlined copy of Material.Layer.Storage(v11, v76, v59);
    int v61 = v7;
    uint64_t v34 = v6;
    unint64_t v35 = v61;
    outlined copy of Material.Layer.Storage(v6, v61, v77);
LABEL_57:
    char v6 = v34;
    int v62 = v34;
    uint64_t v7 = v35;
    outlined consume of Material.Layer.Storage(v62, v35, v77);
    outlined consume of Material.Layer.Storage(v11, v22, v64);
    outlined consume of Material.Layer.Storage(v11, v22, v64);
    outlined consume of Material.Layer.Storage(v6, v35, v77);
    outlined consume of Material.Layer.Storage(v11, v22, v64);
    outlined consume of Material.Layer.Storage(v6, v35, v77);
    int v55 = v64;
    int v15 = v73;
    uint64_t v58 = v74;
    uint64_t v56 = v65;
    int v57 = v75;
    goto LABEL_63;
  }
  if (!v31)
  {
    uint64_t v51 = *(void *)(v10 + 16);
    unsigned int v52 = *(unsigned char *)(v5 + 48);
    outlined copy of Material.Layer.Storage(v11, v76, v51);
    outlined copy of Material.Layer.Storage(v6, v7, v77);
    outlined copy of Material.Layer.Storage(v11, v76, v51);
    outlined copy of Material.Layer.Storage(v6, v7, v77);
    outlined copy of Material.Layer.Storage(v6, v7, v77);
    outlined copy of GraphicsBlendMode(v9, v52);
    outlined copy of Material.Layer.Storage(v11, v76, v51);
    outlined copy of GraphicsBlendMode(v73, v16);
    __int16 v22 = v76;
    outlined copy of Material.Layer.Storage(v11, v76, v51);
    int v53 = v7;
    uint64_t v34 = v6;
    unint64_t v35 = v53;
    outlined copy of Material.Layer.Storage(v6, v53, v77);
LABEL_46:
    int v54 = v34;
    outlined consume of Material.Layer.Storage(v34, v35, v77);
    outlined consume of Material.Layer.Storage(v11, v22, v64);
    outlined consume of Material.Layer.Storage(v11, v22, v64);
    outlined consume of Material.Layer.Storage(v34, v35, v77);
    float v21 = v64;
    outlined consume of Material.Layer.Storage(v11, v22, v64);
    int v70 = v35;
    int v71 = v54;
    outlined consume of Material.Layer.Storage(v54, v35, v77);
    uint64_t v19 = v65;
    if (v8 != v14) {
      goto LABEL_55;
    }
    goto LABEL_47;
  }
  __int16 v32 = *(void *)(v5 + 8);
  outlined copy of Material.Layer.Storage(v11, v76, v12);
  outlined copy of Material.Layer.Storage(v6, v7, v77);
  outlined copy of Material.Layer.Storage(v11, v76, v12);
  outlined copy of Material.Layer.Storage(v6, v7, v77);
  outlined copy of Material.Layer.Storage(v6, v7, v77);
  outlined copy of GraphicsBlendMode(v74, v65);
  outlined copy of Material.Layer.Storage(v11, v76, v12);
  outlined copy of GraphicsBlendMode(v73, v16);
  int v33 = v12;
  __int16 v22 = v76;
  outlined copy of Material.Layer.Storage(v11, v76, v33);
  uint64_t v34 = v6;
  unint64_t v35 = v32;
  uint64_t result = outlined copy of Material.Layer.Storage(v6, v32, v77);
  if (v78 == v13) {
    goto LABEL_46;
  }
  unint64_t v36 = 0;
  uint64_t v37 = v13 + 5;
  uint64_t v38 = v78 + 5;
  while (1)
  {
    uint64_t v39 = v38[-2];
    v82[0] = v38[-3];
    v82[1] = v39;
    __int32 v40 = *v38;
    v82[2] = v38[-1];
    v82[3] = v40;
    uint64_t v41 = v38[2];
    char v42 = v38[3];
    v82[4] = v38[1];
    v82[5] = v41;
    uint64_t v43 = v38[4].i32[0];
    int v44 = v38[4].i8[4];
    v82[6] = v42;
    v83 = v43;
    v84 = v44;
    if (v36 >= v13[1].i64[0]) {
      break;
    }
    uint64_t v45 = v37[-2];
    v79[0] = v37[-3];
    v79[1] = v45;
    unint64_t v46 = *v37;
    v79[2] = v37[-1];
    v79[3] = v46;
    unint64_t v47 = v37[2];
    uint64_t v48 = v37[3];
    v79[4] = v37[1];
    v79[5] = v47;
    uint64_t v49 = v37[4].i32[0];
    int32x4_t v50 = v37[4].i8[4];
    v79[6] = v48;
    uint64_t v80 = v49;
    v81 = v50;
    uint64_t result = specialized static GraphicsFilter.== infix(_:_:)((uint64_t)v82, v79);
    if ((result & 1) == 0) {
      goto LABEL_57;
    }
    ++v36;
    uint64_t v37 = (int8x16_t *)((char *)v37 + 120);
    uint64_t v38 = (int8x16_t *)((char *)v38 + 120);
    if (v31 == v36) {
      goto LABEL_46;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  BOOL v14;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      char v12 = 1;
    }
    else
    {
      char v3 = v2 - 1;
      char v4 = (unsigned __int8 *)(a2 + 48);
      uint64_t v5 = (char *)(a1 + 48);
      do
      {
        uint64_t v7 = *((void *)v5 - 2);
        char v6 = *((void *)v5 - 1);
        uint64_t v8 = *((void *)v4 - 2);
        uint64_t v9 = *((void *)v4 - 1);
        char v10 = *v5;
        float v11 = *v4;
        outlined copy of Shader.Argument.Storage(v7, v6, *v5);
        outlined copy of Shader.Argument.Storage(v8, v9, v11);
        char v12 = static Shader.Argument.Storage.== infix(_:_:)(v7, v6, v10, v8, v9, v11);
        outlined consume of Shader.Argument.Storage(v8, v9, v11);
        outlined consume of Shader.Argument.Storage(v7, v6, v10);
        float v14 = v3-- != 0;
        if ((v12 & 1) == 0) {
          break;
        }
        v4 += 24;
        v5 += 24;
      }
      while (v14);
    }
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  void *i;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    char v3 = a1 + 32;
    for (uint64_t i = (void *)(a2 + 32); ; ++i)
    {
      if (*(void *)v3 != *i)
      {
        uint64_t v5 = *(uint64_t (**)(uint64_t))(**(void **)v3 + 88);
        swift_retain();
        char v6 = swift_retain();
        LOBYTE(v5) = v5(v6);
        swift_release();
        swift_release();
        if ((v5 & 1) == 0) {
          break;
        }
      }
      v3 += 8;
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  void *v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  id v27;
  uint64_t v28;
  char v29;
  int v30;
  void *v31;
  char v32;
  id v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  char v38;
  id v39;
  uint64_t v40;
  char v41;
  void *v42;
  id v43;
  uint64_t v44;
  char v45;
  void *v46;
  id v47;
  char v48;
  id v49;
  uint64_t v50;
  char v51;
  id v52;
  uint64_t v53;
  char v54;
  void *v55;
  id v56;
  char v57;
  id v58;
  uint64_t v59;
  char v60;
  id v61;
  uint64_t v62;
  char v63;
  void *v64;
  id v65;
  char v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  long long v79;
  long long v80;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 48);
  v74 = *(void *)(a1 + 16);
  v76 = *(void *)(a1 + 56);
  char v6 = *(unsigned char *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(unsigned char *)(a2 + 40);
  float v11 = *(void *)(a2 + 48);
  char v10 = *(void *)(a2 + 56);
  outlined copy of Text.Effect.Markers.MarkerType(v7, v6);
  outlined copy of Text.Effect.Markers.MarkerType(v8, v9);
  char v12 = specialized static Text.Effect.Markers.MarkerType.== infix(_:_:)(v7, v6, v8, v9);
  outlined consume of Text.Effect.Markers.MarkerType(v8, v9);
  uint64_t result = outlined consume of Text.Effect.Markers.MarkerType(v7, v6);
  if ((v12 & 1) == 0) {
    return 0;
  }
  if (__OFSUB__(v11, v5))
  {
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  if (v11 != v5) {
    return 0;
  }
  if (!__OFSUB__(v10, v76))
  {
    if (v10 == v76)
    {
      int v71 = (void *)*MEMORY[0x263F815F8];
      int v70 = (void *)*MEMORY[0x263F81500];
      int v69 = (void *)*MEMORY[0x263F814F0];
      int v68 = (void *)*MEMORY[0x263F815F0];
      float v14 = (void *)(a2 + 88);
      int v15 = (uint64_t *)(a1 + 88);
      int v67 = MEMORY[0x263F8EE58] + 8;
      float v16 = v74;
      while (1)
      {
        float v17 = --v16 == 0;
        if (!v16) {
          return v17;
        }
        __int16 v18 = *(v15 - 3);
        float v20 = *(v15 - 1);
        uint64_t v19 = *v15;
        float v21 = *(v14 - 3);
        __int16 v22 = *((unsigned char *)v14 - 16);
        char v24 = *(v14 - 1);
        uint64_t v23 = *v14;
        if (*(unsigned char *)(v15 - 2))
        {
          if (v18 != v21) {
            __int16 v22 = 0;
          }
          if ((v22 & 1) == 0) {
            return v17;
          }
LABEL_15:
          uint64_t v25 = v24 == v20;
          if (__OFSUB__(v24, v20)) {
            goto LABEL_134;
          }
          goto LABEL_119;
        }
        if (*(unsigned char *)(v14 - 2)) {
          return v17;
        }
        uint64_t v72 = *(v14 - 1);
        uint64_t v73 = *v14;
        v75 = *(v15 - 1);
        uint64_t v77 = *v15;
        outlined copy of Text.Effect.Markers.MarkerType(v21, 0);
        outlined copy of Text.Effect.Markers.MarkerType(v18, 0);
        specialized static Dictionary.Keys.== infix(_:_:)(v18, v21);
        if ((v26 & 1) == 0) {
          goto LABEL_130;
        }
        if (!*(void *)(v18 + 16)) {
          break;
        }
        long long v27 = v71;
        uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
        if (v29)
        {
          outlined init with copy of Any(*(void *)(v18 + 56) + 32 * v28, (uint64_t)&v79);
        }
        else
        {
          char v79 = 0u;
          uint64_t v80 = 0u;
        }

        if (!*((void *)&v80 + 1)) {
          goto LABEL_30;
        }
        long long v30 = swift_dynamicCast();
        if (v30) {
          uint64_t v31 = v78;
        }
        else {
          uint64_t v31 = 0;
        }
        __int16 v32 = v30 ^ 1;
LABEL_31:
        if (!*(void *)(v21 + 16))
        {
          char v79 = 0u;
          uint64_t v80 = 0u;
LABEL_40:
          uint64_t v37 = MEMORY[0x263F8EE58];
          _sypSgWOhTm_3((uint64_t)&v79, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
          if ((v32 & 1) == 0) {
            goto LABEL_130;
          }
          goto LABEL_46;
        }
        int v33 = v71;
        uint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
        if (v35)
        {
          outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v34, (uint64_t)&v79);
        }
        else
        {
          char v79 = 0u;
          uint64_t v80 = 0u;
        }

        if (!*((void *)&v80 + 1)) {
          goto LABEL_40;
        }
        unint64_t v36 = swift_dynamicCast();
        if (v32)
        {
          uint64_t v37 = MEMORY[0x263F8EE58];
          if (v36) {
            goto LABEL_130;
          }
        }
        else
        {
          if (v31 == v78) {
            uint64_t v38 = v36;
          }
          else {
            uint64_t v38 = 0;
          }
          uint64_t v37 = MEMORY[0x263F8EE58];
          if ((v38 & 1) == 0) {
            goto LABEL_130;
          }
        }
LABEL_46:
        if (!*(void *)(v18 + 16))
        {
          char v79 = 0u;
          uint64_t v80 = 0u;
LABEL_55:
          _sypSgWOhTm_3((uint64_t)&v79, (unint64_t *)&lazy cache variable for type metadata for Any?, v37 + 8, MEMORY[0x263F8D8F0]);
          char v42 = 0;
          goto LABEL_56;
        }
        uint64_t v39 = v70;
        __int32 v40 = specialized __RawDictionaryStorage.find<A>(_:)(v39);
        if (v41)
        {
          outlined init with copy of Any(*(void *)(v18 + 56) + 32 * v40, (uint64_t)&v79);
        }
        else
        {
          char v79 = 0u;
          uint64_t v80 = 0u;
        }

        if (!*((void *)&v80 + 1)) {
          goto LABEL_55;
        }
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        if (swift_dynamicCast()) {
          char v42 = v78;
        }
        else {
          char v42 = 0;
        }
LABEL_56:
        if (!*(void *)(v21 + 16))
        {
          char v79 = 0u;
          uint64_t v80 = 0u;
LABEL_69:
          _sypSgWOhTm_3((uint64_t)&v79, (unint64_t *)&lazy cache variable for type metadata for Any?, v37 + 8, MEMORY[0x263F8D8F0]);
          if (v42) {
            goto LABEL_129;
          }
          goto LABEL_70;
        }
        uint64_t v43 = v70;
        int v44 = specialized __RawDictionaryStorage.find<A>(_:)(v43);
        if (v45)
        {
          outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v44, (uint64_t)&v79);
        }
        else
        {
          char v79 = 0u;
          uint64_t v80 = 0u;
        }

        if (!*((void *)&v80 + 1)) {
          goto LABEL_69;
        }
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        if (swift_dynamicCast()) {
          unint64_t v46 = v78;
        }
        else {
          unint64_t v46 = 0;
        }
        if (v42)
        {
          if (!v46) {
            goto LABEL_129;
          }
          unint64_t v47 = v42;
          uint64_t v48 = static NSObject.== infix(_:_:)();

          if ((v48 & 1) == 0) {
            goto LABEL_130;
          }
        }
        else
        {
          char v42 = v46;
          if (v46) {
            goto LABEL_129;
          }
        }
LABEL_70:
        if (!*(void *)(v18 + 16))
        {
          char v79 = 0u;
          uint64_t v80 = 0u;
LABEL_79:
          _sypSgWOhTm_3((uint64_t)&v79, (unint64_t *)&lazy cache variable for type metadata for Any?, v37 + 8, MEMORY[0x263F8D8F0]);
          char v42 = 0;
          goto LABEL_80;
        }
        uint64_t v49 = v69;
        int32x4_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v49);
        if (v51)
        {
          outlined init with copy of Any(*(void *)(v18 + 56) + 32 * v50, (uint64_t)&v79);
        }
        else
        {
          char v79 = 0u;
          uint64_t v80 = 0u;
        }

        if (!*((void *)&v80 + 1)) {
          goto LABEL_79;
        }
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        if (swift_dynamicCast()) {
          char v42 = v78;
        }
        else {
          char v42 = 0;
        }
LABEL_80:
        if (!*(void *)(v21 + 16))
        {
          char v79 = 0u;
          uint64_t v80 = 0u;
LABEL_93:
          _sypSgWOhTm_3((uint64_t)&v79, (unint64_t *)&lazy cache variable for type metadata for Any?, v37 + 8, MEMORY[0x263F8D8F0]);
          if (v42) {
            goto LABEL_129;
          }
          goto LABEL_94;
        }
        unsigned int v52 = v69;
        int v53 = specialized __RawDictionaryStorage.find<A>(_:)(v52);
        if (v54)
        {
          outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v53, (uint64_t)&v79);
        }
        else
        {
          char v79 = 0u;
          uint64_t v80 = 0u;
        }

        if (!*((void *)&v80 + 1)) {
          goto LABEL_93;
        }
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        if (swift_dynamicCast()) {
          int v55 = v78;
        }
        else {
          int v55 = 0;
        }
        if (v42)
        {
          if (!v55) {
            goto LABEL_129;
          }
          uint64_t v56 = v42;
          int v57 = static NSObject.== infix(_:_:)();

          if ((v57 & 1) == 0) {
            goto LABEL_130;
          }
        }
        else
        {
          char v42 = v55;
          if (v55) {
            goto LABEL_129;
          }
        }
LABEL_94:
        if (!*(void *)(v18 + 16))
        {
          char v79 = 0u;
          uint64_t v80 = 0u;
LABEL_103:
          _sypSgWOhTm_3((uint64_t)&v79, (unint64_t *)&lazy cache variable for type metadata for Any?, v37 + 8, MEMORY[0x263F8D8F0]);
          char v42 = 0;
          goto LABEL_104;
        }
        uint64_t v58 = v68;
        int v59 = specialized __RawDictionaryStorage.find<A>(_:)(v58);
        if (v60)
        {
          outlined init with copy of Any(*(void *)(v18 + 56) + 32 * v59, (uint64_t)&v79);
        }
        else
        {
          char v79 = 0u;
          uint64_t v80 = 0u;
        }

        if (!*((void *)&v80 + 1)) {
          goto LABEL_103;
        }
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        if (swift_dynamicCast()) {
          char v42 = v78;
        }
        else {
          char v42 = 0;
        }
LABEL_104:
        if (!*(void *)(v21 + 16))
        {
          char v79 = 0u;
          uint64_t v80 = 0u;
LABEL_117:
          _sypSgWOhTm_3((uint64_t)&v79, (unint64_t *)&lazy cache variable for type metadata for Any?, v37 + 8, MEMORY[0x263F8D8F0]);
          if (v42) {
            goto LABEL_129;
          }
          goto LABEL_118;
        }
        int v61 = v68;
        int v62 = specialized __RawDictionaryStorage.find<A>(_:)(v61);
        if (v63)
        {
          outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v62, (uint64_t)&v79);
        }
        else
        {
          char v79 = 0u;
          uint64_t v80 = 0u;
        }

        if (!*((void *)&v80 + 1)) {
          goto LABEL_117;
        }
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        if (swift_dynamicCast()) {
          uint64_t v64 = v78;
        }
        else {
          uint64_t v64 = 0;
        }
        if (v42)
        {
          if (!v64) {
            goto LABEL_129;
          }
          int v65 = v42;
          int v66 = static NSObject.== infix(_:_:)();

          outlined consume of Text.Effect.Markers.MarkerType(v21, 0);
          uint64_t result = outlined consume of Text.Effect.Markers.MarkerType(v18, 0);
          float v20 = v75;
          uint64_t v19 = v77;
          char v24 = v72;
          uint64_t v23 = v73;
          if ((v66 & 1) == 0) {
            return v17;
          }
          goto LABEL_15;
        }
        char v42 = v64;
        if (v64)
        {
LABEL_129:

LABEL_130:
          outlined consume of Text.Effect.Markers.MarkerType(v21, 0);
          outlined consume of Text.Effect.Markers.MarkerType(v18, 0);
          return 0;
        }
LABEL_118:
        outlined consume of Text.Effect.Markers.MarkerType(v21, 0);
        uint64_t result = outlined consume of Text.Effect.Markers.MarkerType(v18, 0);
        uint64_t v19 = v77;
        uint64_t v23 = v73;
        uint64_t v25 = v72 == v75;
        if (__OFSUB__(v72, v75))
        {
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
LABEL_119:
        if (!v25) {
          return v17;
        }
        if (__OFSUB__(v23, v19)) {
          goto LABEL_135;
        }
        v14 += 4;
        v15 += 4;
        if (v23 != v19) {
          return v17;
        }
      }
      char v79 = 0u;
      uint64_t v80 = 0u;
LABEL_30:
      _sypSgWOhTm_3((uint64_t)&v79, (unint64_t *)&lazy cache variable for type metadata for Any?, v67, MEMORY[0x263F8D8F0]);
      uint64_t v31 = 0;
      __int16 v32 = 1;
      goto LABEL_31;
    }
    return 0;
  }
LABEL_137:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  void *i;
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  void *v104;
  void *v105;
  double v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char v113;
  void v114[23];

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  char v3 = v2 - 1;
  char v4 = (uint64_t *)(a1 + 56);
  for (uint64_t i = (void *)(a2 + 56); ; i += 11)
  {
    uint64_t result = *(v4 - 3);
    uint64_t v7 = *(v4 - 2);
    uint64_t v8 = (void *)*(v4 - 1);
    uint64_t v9 = *v4;
    float v11 = v4[1];
    char v10 = v4[2];
    char v12 = v4[3];
    int v13 = v4[4];
    int v15 = *((double *)v4 + 5);
    float v14 = *((double *)v4 + 6);
    float v16 = v4[7];
    __int16 v18 = *(i - 3);
    float v17 = *(i - 2);
    uint64_t v19 = (void *)*(i - 1);
    float v20 = *i;
    float v21 = i[1];
    __int16 v22 = i[2];
    char v24 = i[3];
    uint64_t v23 = i[4];
    uint64_t v25 = *((double *)i + 5);
    char v26 = *((double *)i + 6);
    long long v27 = i[7];
    v114[0] = result;
    v114[1] = v7;
    v114[2] = v8;
    v114[3] = v9;
    v114[4] = v11;
    v114[5] = v10;
    v114[6] = v12;
    v114[7] = v13;
    *(double *)&v114[8] = v15;
    *(double *)&v114[9] = v14;
    v114[10] = v16;
    v114[11] = v18;
    v114[12] = v17;
    v114[13] = v19;
    v114[14] = v20;
    v114[15] = v21;
    v112 = v16;
    v113 = v21;
    v114[16] = v22;
    v114[17] = v24;
    v114[18] = v23;
    *(double *)&v114[19] = v25;
    v110 = v12;
    v111 = v13;
    uint64_t v28 = v13 >> 62;
    *(double *)&v114[20] = v26;
    v114[21] = v27;
    v108 = v11;
    v109 = v10;
    v107 = v9;
    v100 = v3;
    v106 = v14;
    if (v28)
    {
      v94 = v18;
      v96 = result;
      __int16 v29 = v23 >> 62;
      if (v28 == 1)
      {
        if (v29 != 1) {
          goto LABEL_39;
        }
        v104 = v8;
        long long v30 = v17;
        uint64_t v31 = v19;
        __int16 v32 = v20;
        int v33 = v22;
        uint64_t v34 = v24;
        unint64_t v35 = v23;
        outlined copy of Text.Effect.Composition.Operation(v18, v17, v19, v20, v113, v22, v24, v23);
        outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v114);
        if (v96 != v94) {
          return 0;
        }
        outlined consume of Text.Effect.Composition.Operation(v96, v30, v31, v32, v113, v33, v34, v35);
        outlined consume of Text.Effect.Composition.Operation(v96, v7, v104, v107, v108, v109, v110, v111);
        if (v7 != v30) {
          return 0;
        }
      }
      else
      {
        if (v29 != 2) {
          goto LABEL_39;
        }
        uint64_t v38 = v8;
        uint64_t v39 = v7;
        __int32 v40 = v17;
        uint64_t v41 = v19;
        char v42 = v20;
        uint64_t v43 = v22;
        v99 = v24;
        int v44 = v23;
        outlined copy of Text.Effect.Composition.Operation(v18, v17, v19, v20, v113, v22, v24, v23);
        outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v114);
        uint64_t result = v96;
        if (v96 != v94) {
          return 0;
        }
        if (__OFSUB__(v40, v39)) {
          goto LABEL_45;
        }
        if (v40 != v39) {
          return 0;
        }
        if (v38 != v41) {
          return 0;
        }
        outlined consume of Text.Effect.Composition.Operation(v96, v39, v38, v42, v113, v43, v99, v44);
        outlined consume of Text.Effect.Composition.Operation(v96, v39, v38, v107, v108, v109, v110, v111);
        if (v107 != v42) {
          return 0;
        }
      }
      goto LABEL_33;
    }
    unint64_t v36 = v22;
    v93 = v19;
    v92 = v23;
    if (v23 >> 62) {
      break;
    }
    if (result != v18)
    {
      uint64_t v72 = v17;
      uint64_t v73 = v7;
      v74 = v18;
      v75 = v23;
      v76 = v20;
      uint64_t v77 = v24;
      outlined copy of Text.Effect.Composition.Operation(result, v73, v8, v9, v11, v10, v12, v111);
      v84 = v74;
      v85 = v72;
      v86 = v93;
      v87 = v76;
      v88 = v113;
      v89 = v36;
      v90 = v77;
      v91 = v75;
      goto LABEL_41;
    }
    if (__OFSUB__(v17, v7))
    {
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v17 != v7)
    {
      v102 = v17;
      uint64_t v78 = v7;
      char v79 = v19;
      uint64_t v80 = v23;
      v81 = result;
      v82 = v20;
      v83 = v24;
      outlined copy of Text.Effect.Composition.Operation(result, v78, v8, v9, v11, v10, v12, v111);
      v84 = v81;
      v85 = v102;
      v86 = v79;
      v87 = v82;
      v88 = v113;
      v89 = v36;
      v90 = v83;
      v91 = v80;
LABEL_41:
      outlined copy of Text.Effect.Composition.Operation(v84, v85, v86, v87, v88, v89, v90, v91);
      outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v114);
      return 0;
    }
    v103 = v26;
    v105 = v8;
    uint64_t v37 = v22;
    v98 = v24;
    if (*(double *)&v10 != *(double *)&v22 || *(double *)&v12 != *(double *)&v24) {
      goto LABEL_37;
    }
    if (v11)
    {
      if ((v21 & 1) == 0) {
        goto LABEL_37;
      }
    }
    else if (v21)
    {
      goto LABEL_37;
    }
    if (v8 != v19)
    {
LABEL_37:
      uint64_t v56 = v9;
      int v57 = result;
      uint64_t v58 = v20;
      int v59 = v10;
      outlined copy of Text.Effect.Composition.Operation(result, v7, v8, v56, v11, v10, v12, v111);
      outlined copy of Text.Effect.Composition.Operation(v57, v7, v93, v58, v113, v36, v98, v92);
      outlined copy of Text.Effect.Composition.Operation(v57, v7, v105, v107, v11, v59, v110, v111);
      outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v114);
      int v60 = v57;
      int v61 = v7;
      int v62 = v105;
      uint64_t v63 = v107;
      uint64_t v64 = v11;
      int v65 = v59;
      int v66 = v110;
      int v67 = v111;
      goto LABEL_43;
    }
    uint64_t v45 = v15;
    unint64_t v46 = v25;
    unint64_t v47 = v7;
    uint64_t v48 = v7;
    uint64_t v49 = v19;
    int32x4_t v50 = v9;
    uint64_t v51 = v11;
    unsigned int v52 = v10;
    int v53 = v23;
    int v54 = result;
    int v55 = v20;
    outlined copy of Text.Effect.Composition.Operation(result, v47, v8, v50, v51, v10, v12, v111);
    outlined copy of Text.Effect.Composition.Operation(v54, v48, v49, v55, v113, v37, v98, v53);
    outlined copy of Text.Effect.Composition.Operation(v54, v48, v105, v107, v108, v52, v110, v111);
    if (v45 != v46 || v106 != v103)
    {
      outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v114);
      uint64_t v63 = v107;
      int v60 = v54;
      int v61 = v48;
      int v62 = v105;
      uint64_t v64 = v108;
      int v65 = v109;
      int v66 = v110;
      int v67 = v111;
      goto LABEL_43;
    }
    outlined copy of Text.Effect.Composition.Operation(v54, v48, v93, v55, v113, v37, v98, v53);
    outlined copy of Text.Effect.Composition.Operation(v54, v48, v105, v107, v108, v109, v110, v111);
    outlined copy of Text.Effect.Composition.Operation(v54, v48, v93, v55, v113, v37, v98, v92);
    v97 = specialized static Array<A>.== infix(_:_:)(v112, v27);
    outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v114);
    outlined consume of Text.Effect.Composition.Operation(v54, v48, v93, v55, v113, v37, v98, v92);
    outlined consume of Text.Effect.Composition.Operation(v54, v48, v105, v107, v108, v109, v110, v111);
    outlined consume of Text.Effect.Composition.Operation(v54, v48, v93, v55, v113, v37, v98, v92);
    outlined consume of Text.Effect.Composition.Operation(v54, v48, v105, v107, v108, v109, v110, v111);
    if ((v97 & 1) == 0) {
      return 0;
    }
LABEL_33:
    if (!v100) {
      return 1;
    }
    v4 += 11;
    char v3 = v100 - 1;
  }
  v95 = v18;
  v96 = result;
  v101 = v17;
  int v68 = v20;
  int v69 = v24;
  int v70 = v8;
  outlined copy of Text.Effect.Composition.Operation(result, v7, v8, v9, v11, v10, v12, v111);
  outlined copy of Text.Layout.Line.Line(v70, v9, v11 & 1);
  swift_bridgeObjectRetain();
  uint64_t v8 = v70;
  float v17 = v101;
  char v24 = v69;
  uint64_t v23 = v92;
  float v20 = v68;
  __int16 v18 = v95;
  uint64_t v19 = v93;
  __int16 v22 = v36;
LABEL_39:
  int v71 = v8;
  outlined copy of Text.Effect.Composition.Operation(v18, v17, v19, v20, v113, v22, v24, v23);
  outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v114);
  int v60 = v96;
  int v61 = v7;
  int v62 = v71;
  uint64_t v63 = v9;
  uint64_t v64 = v11;
  int v65 = v109;
  int v66 = v110;
  int v67 = v111;
LABEL_43:
  outlined consume of Text.Effect.Composition.Operation(v60, v61, v62, v63, v64, v65, v66, v67);
  return 0;
}

{
  uint64_t v2;
  double *v3;
  double *i;
  int v5;
  uint64_t v7;
  uint64_t v8;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    char v3 = (double *)(a2 + 64);
    for (uint64_t i = (double *)(a1 + 64); *(i - 1) == *(v3 - 1) && *i == *v3; i += 6)
    {
      uint64_t v5 = *((unsigned __int8 *)v3 - 16);
      uint64_t v7 = *((void *)v3 - 4);
      uint64_t v8 = *((void *)i - 4);
      if (*(unsigned char *)(i - 2))
      {
        if (v8 != v7) {
          uint64_t v5 = 0;
        }
        if (v5 != 1) {
          return 0;
        }
      }
      else
      {
        if (v8 != v7) {
          LOBYTE(v5) = 1;
        }
        if (v5) {
          return 0;
        }
      }
      v3 += 6;
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  CFIndex v8;
  void *v9;
  CFIndex v10;
  void *v11;
  double v12;
  double v13;
  uint64_t v14;
  id v15;
  id v16;
  const __CTLine *v17;
  const __CTLine *v18;
  void *v19;
  void *v20;
  BOOL v22;
  uint64_t result;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  char v3 = v2 - 1;
  char v4 = a2 + 48;
  uint64_t v5 = a1 + 48;
  do
  {
    long long v27 = *(void *)(v5 + 32);
    uint64_t v28 = *(void *)(v5 + 40);
    uint64_t v7 = *(double *)v5;
    char v6 = *(double *)(v5 + 8);
    uint64_t v9 = *(void **)(v5 - 16);
    uint64_t v8 = *(void *)(v5 - 8);
    float v11 = *(void **)(v4 - 16);
    char v10 = *(void *)(v4 - 8);
    int v13 = *(double *)v4;
    char v12 = *(double *)(v4 + 8);
    float v14 = *(void *)(v4 + 32);
    char v26 = *(void *)(v4 + 40);
    swift_retain_n();
    int v15 = v9;
    swift_retain_n();
    float v16 = v11;
    float v17 = (const __CTLine *)v15;
    __int16 v18 = (const __CTLine *)v16;
    uint64_t v19 = (id)_CTLineGetRunAtIndex(v17, v8);
    float v20 = (id)_CTLineGetRunAtIndex(v18, v10);
    swift_release_n();

    swift_release_n();
    __int16 v22 = v7 == v13 && v19 == v20;
    if (v6 != v12) {
      __int16 v22 = 0;
    }
    if (v27 != v14) {
      __int16 v22 = 0;
    }
    uint64_t result = v28 == v26 && v22;
    uint64_t v25 = v3-- != 0;
    if (result != 1) {
      break;
    }
    v4 += 64;
    v5 += 64;
  }
  while (v25);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  id v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t i;
  id v17;
  void *v18;
  char v19;
  unint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;

  char v4 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  char v6 = (void *)((unint64_t)a2 >> 62);
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 == v23) {
      goto LABEL_5;
    }
    return 0;
  }
  if (v5 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    return 0;
  }
LABEL_5:
  if (!v5) {
    return 1;
  }
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0) {
    uint64_t v7 = a1;
  }
  if (v4) {
    uint64_t v8 = v7;
  }
  uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  char v10 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  if (v6) {
    char v10 = v9;
  }
  if (v8 == v10) {
    return 1;
  }
  if (v5 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v25 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_42:
    uint64_t result = MEMORY[0x24C523D60](0, a1);
    goto LABEL_19;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t result = (uint64_t)*(id *)(a1 + 32);
LABEL_19:
  char v6 = (void *)result;
  char v24 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_44:
    char v12 = (id)MEMORY[0x24C523D60](0, a2);
LABEL_22:
    int v13 = v12;
    type metadata accessor for CFDictionaryRef(0);
    _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_1(&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    float v14 = static _CFObject.== infix(_:_:)();

    if (v14)
    {
      int v15 = 1 - v5;
      for (uint64_t i = 5; ; ++i)
      {
        uint64_t v5 = v15 + i == 5;
        if (v15 + i == 5) {
          break;
        }
        float v20 = i - 4;
        if (v25)
        {
          float v21 = (id)MEMORY[0x24C523D60](i - 4, a1);
        }
        else
        {
          if (v20 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_40:
            __break(1u);
            goto LABEL_41;
          }
          float v21 = *(id *)(a1 + 8 * i);
        }
        __int16 v22 = v21;
        if (v24)
        {
          float v17 = (id)MEMORY[0x24C523D60](i - 4, a2);
        }
        else
        {
          if (v20 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_40;
          }
          float v17 = *(id *)(a2 + 8 * i);
        }
        __int16 v18 = v17;
        uint64_t v19 = static _CFObject.== infix(_:_:)();

        if ((v19 & 1) == 0) {
          return v5;
        }
      }
      return v5;
    }
    return 0;
  }
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    char v12 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  double v12;
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  char v23;
  char v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  char v34;
  uint64_t (*v35)(uint64_t);
  char v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  char v48;
  uint64_t (*v49)(uint64_t);
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  int v68 = *(void *)(a1 + 16);
  if (v68 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v68 || a1 == a2) {
    return 1;
  }
  uint64_t v2 = 0;
  uint64_t v63 = a2 + 32;
  uint64_t v64 = a1 + 32;
  while (1)
  {
    char v4 = v64 + 56 * v2;
    uint64_t v5 = *(double *)v4;
    char v6 = *(double *)(v4 + 8);
    uint64_t v8 = *(void *)(v4 + 24);
    uint64_t v7 = *(void *)(v4 + 32);
    uint64_t v9 = *(unsigned char *)(v4 + 40);
    int v69 = *(void *)(v4 + 48);
    char v10 = *(unsigned __int8 *)(v4 + 16);
    float v11 = v63 + 56 * v2;
    char v12 = *(double *)v11;
    int v13 = *(double *)(v11 + 8);
    float v14 = *(unsigned __int8 *)(v11 + 16);
    int v15 = *(void *)(v11 + 24);
    float v16 = *(void *)(v11 + 32);
    float v17 = *(unsigned char *)(v11 + 40);
    __int16 v18 = *(void *)(v11 + 48);
    if (!v10)
    {
      uint64_t v19 = v14 == 0;
LABEL_11:
      if (!v19 || v5 != v12 || v6 != v13) {
        goto LABEL_123;
      }
      goto LABEL_24;
    }
    if (v10 == 1)
    {
      uint64_t v19 = v14 == 1;
      goto LABEL_11;
    }
    if (v14 != 2 || (*(void *)&v13 | *(void *)&v12) != 0)
    {
LABEL_123:
      outlined copy of Text.Storage(v8, v7, v9);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v15, v16, v17);
      swift_bridgeObjectRetain();
      outlined consume of Text.Storage(v15, v16, v17);
      swift_bridgeObjectRelease();
      uint64_t v51 = v8;
      unsigned int v52 = v7;
      int v53 = v9;
      goto LABEL_131;
    }
LABEL_24:
    if (v9)
    {
      if ((*(unsigned char *)(v11 + 40) & 1) == 0)
      {
        outlined copy of Text.Storage(v8, v7, 1);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v15, v16, 0);
        swift_bridgeObjectRetain();
        outlined consume of Text.Storage(v15, v16, 0);
        swift_bridgeObjectRelease();
        uint64_t v51 = v8;
        unsigned int v52 = v7;
        int v53 = 1;
        goto LABEL_131;
      }
      int v66 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 96);
      outlined copy of Text.Storage(v8, v7, 1);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v15, v16, 1);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v8, v7, 1);
      outlined copy of Text.Storage(v15, v16, 1);
      uint64_t v23 = v66(v15);
      outlined consume of Text.Storage(v15, v16, 1);
      outlined consume of Text.Storage(v8, v7, 1);
      if ((v23 & 1) == 0)
      {
LABEL_125:
        int v54 = v15;
        int v55 = v16;
        uint64_t v56 = v9;
        goto LABEL_126;
      }
    }
    else
    {
      if (*(unsigned char *)(v11 + 40))
      {
        outlined copy of Text.Storage(v8, v7, 0);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v15, v16, 1);
        swift_bridgeObjectRetain();
        outlined consume of Text.Storage(v15, v16, 1);
        swift_bridgeObjectRelease();
        uint64_t v51 = v8;
        unsigned int v52 = v7;
        int v53 = 0;
        goto LABEL_131;
      }
      if (v8 == v15 && v7 == v16)
      {
        outlined copy of Text.Storage(v8, v7, 0);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v8, v7, 0);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined copy of Text.Storage(v8, v7, 0);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v15, v16, 0);
        swift_bridgeObjectRetain();
        if ((v25 & 1) == 0) {
          goto LABEL_125;
        }
      }
    }
    int v65 = v16;
    char v26 = *(void *)(v69 + 16);
    if (v26 != *(void *)(v18 + 16))
    {
      int v54 = v15;
      int v55 = v65;
      uint64_t v56 = v17;
LABEL_126:
      outlined consume of Text.Storage(v54, v55, v56);
      swift_bridgeObjectRelease();
      uint64_t v51 = v8;
      unsigned int v52 = v7;
      int v53 = v9;
      goto LABEL_131;
    }
    if (v26 && v69 != v18) {
      break;
    }
LABEL_6:
    ++v2;
    outlined consume of Text.Storage(v15, v65, v17);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v8, v7, v9);
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    if (v2 == v68) {
      return result;
    }
  }
  int v61 = v9;
  int v62 = v8;
  long long v27 = *(double *)(v69 + 32);
  uint64_t v28 = v18;
  __int16 v29 = *(unsigned __int8 *)(v69 + 40);
  long long v30 = *(uint64_t *)(v18 + 32);
  int v67 = v28;
  uint64_t v31 = *(unsigned __int8 *)(v28 + 40);
  switch(v29 >> 5)
  {
    case 1u:
      if ((v31 & 0xE0) != 0x20) {
        goto LABEL_137;
      }
      if (v27 == 0.0) {
        goto LABEL_69;
      }
      if (*(double *)&v30 == 0.0) {
        goto LABEL_137;
      }
LABEL_61:
      int v59 = v15;
      unint64_t v35 = *(uint64_t (**)(uint64_t))(**(void **)&v27 + 96);
      int v33 = v7;
      outlined copy of Text.Modifier(*(uint64_t *)&v27, v29);
      outlined copy of Text.Modifier(v30, v31);
      uint64_t v34 = v35(v30);
      goto LABEL_62;
    case 2u:
      if ((v31 & 0xE0) != 0x40) {
        goto LABEL_136;
      }
      if (v29)
      {
        if (v31)
        {
          uint64_t v37 = v30;
LABEL_77:
          uint64_t v38 = *(unsigned char *)(v28 + 40);
LABEL_78:
          outlined copy of Text.Modifier(v37, v38);
          goto LABEL_79;
        }
LABEL_134:
        outlined copy of Text.Modifier(v30, v31);
LABEL_136:
        outlined consume of Text.Modifier(*(uint64_t *)&v27, v29);
LABEL_137:
        outlined consume of Text.Storage(v15, v65, v17);
        swift_bridgeObjectRelease();
        uint64_t v51 = v62;
        unsigned int v52 = v7;
        goto LABEL_130;
      }
      if (v31) {
        goto LABEL_134;
      }
LABEL_58:
      outlined copy of Text.Modifier(v30, v31);
      outlined consume of Text.Modifier(*(uint64_t *)&v27, v29);
      if (v27 != *(double *)&v30) {
        goto LABEL_137;
      }
LABEL_79:
      if (v26 == 1)
      {
        uint64_t v8 = v62;
        uint64_t v9 = v61;
        goto LABEL_6;
      }
      int v57 = v17;
      uint64_t v58 = v7;
      int v60 = v15;
      uint64_t v39 = 0;
      __int32 v40 = 1;
      uint64_t v41 = v67;
      while (2)
      {
        if (v26 == v40)
        {
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          JUMPOUT(0x245BAB6F8);
        }
        if (v40 >= *(void *)(v69 + 16)) {
          goto LABEL_139;
        }
        if (v40 >= *(void *)(v41 + 16)) {
          goto LABEL_140;
        }
        ++v40;
        char v42 = *(uint64_t *)(v69 + v39 + 48);
        uint64_t v43 = *(unsigned __int8 *)(v69 + v39 + 56);
        int v44 = *(uint64_t *)(v41 + v39 + 48);
        uint64_t v45 = *(unsigned __int8 *)(v41 + v39 + 56);
        switch(v43 >> 5)
        {
          case 1u:
            if ((v45 & 0xE0) != 0x20) {
              goto LABEL_129;
            }
            if (*(double *)&v42 == 0.0) {
              goto LABEL_114;
            }
            if (*(double *)&v44 == 0.0) {
              goto LABEL_129;
            }
LABEL_107:
            uint64_t v49 = *(uint64_t (**)(uint64_t))(*(void *)v42 + 96);
            unint64_t v47 = v2;
            outlined copy of Text.Modifier(*(void *)(v69 + v39 + 48), *(unsigned char *)(v69 + v39 + 56));
            outlined copy of Text.Modifier(v44, v45);
            uint64_t v48 = v49(v44);
            goto LABEL_108;
          case 2u:
            if ((v45 & 0xE0) != 0x40) {
              goto LABEL_129;
            }
            if (v43)
            {
              if ((v45 & 1) == 0) {
                goto LABEL_129;
              }
            }
            else
            {
              if (v45) {
                goto LABEL_129;
              }
LABEL_83:
              if (*(double *)&v42 != *(double *)&v44) {
                goto LABEL_129;
              }
            }
            goto LABEL_84;
          case 3u:
            if ((v45 & 0xE0) == 0x60) {
              goto LABEL_83;
            }
            goto LABEL_129;
          case 4u:
            if ((v45 & 0xE0) != 0x80) {
              goto LABEL_129;
            }
            goto LABEL_83;
          case 5u:
            if ((v45 & 0xE0) != 0xA0) {
              goto LABEL_129;
            }
            goto LABEL_83;
          case 6u:
            if ((v45 & 0xE0) == 0xC0) {
              goto LABEL_107;
            }
            goto LABEL_129;
          case 7u:
            if (v42 | v43 ^ 0xE0)
            {
              if (v45 < 0xE0 || v44 != 1) {
                goto LABEL_129;
              }
            }
            else if (v45 < 0xE0 || *(double *)&v44 != 0.0)
            {
              goto LABEL_129;
            }
            if (v45 != 224) {
              goto LABEL_129;
            }
            goto LABEL_84;
          default:
            if (v45 >= 0x20) {
              goto LABEL_129;
            }
            if (*(double *)&v42 != 0.0)
            {
              if (*(double *)&v44 == 0.0) {
                goto LABEL_129;
              }
              if (v42 != v44)
              {
                unint64_t v46 = *(uint64_t (**)(uint64_t))(*(void *)v42 + 88);
                unint64_t v47 = v2;
                outlined copy of Text.Modifier(*(void *)(v69 + v39 + 48), *(unsigned char *)(v69 + v39 + 56));
                outlined copy of Text.Modifier(v44, v45);
                uint64_t v48 = v46(v44);
LABEL_108:
                uint64_t v2 = v47;
                int32x4_t v50 = v48;
                outlined consume of Text.Modifier(v44, v45);
                outlined consume of Text.Modifier(v42, v43);
                if ((v50 & 1) == 0) {
                  goto LABEL_129;
                }
              }
              goto LABEL_84;
            }
LABEL_114:
            if (*(double *)&v44 == 0.0)
            {
LABEL_84:
              v39 += 16;
              uint64_t v41 = v67;
              if (v26 == v40)
              {
                uint64_t v7 = v58;
                int v15 = v60;
                uint64_t v8 = v62;
                uint64_t v9 = v61;
                float v17 = v57;
                goto LABEL_6;
              }
              continue;
            }
            outlined consume of Text.Modifier(0, *(unsigned char *)(v69 + v39 + 56));
LABEL_129:
            outlined consume of Text.Storage(v60, v65, v57);
            swift_bridgeObjectRelease();
            uint64_t v51 = v62;
            unsigned int v52 = v58;
LABEL_130:
            int v53 = v61;
LABEL_131:
            outlined consume of Text.Storage(v51, v52, v53);
            swift_bridgeObjectRelease();
            return 0;
        }
      }
    case 3u:
      if ((v31 & 0xE0) != 0x60) {
        goto LABEL_136;
      }
      goto LABEL_58;
    case 4u:
      if ((v31 & 0xE0) != 0x80) {
        goto LABEL_136;
      }
      goto LABEL_58;
    case 5u:
      if ((v31 & 0xE0) == 0xA0) {
        goto LABEL_58;
      }
      goto LABEL_136;
    case 6u:
      if ((v31 & 0xE0) == 0xC0) {
        goto LABEL_61;
      }
      goto LABEL_137;
    case 7u:
      if (!(*(void *)&v27 | v29 ^ 0xE0))
      {
        if (v31 < 0xE0 || *(double *)&v30 != 0.0 || v31 != 224) {
          goto LABEL_136;
        }
        outlined copy of Text.Modifier(0, 0xE0u);
        outlined consume of Text.Modifier(*(uint64_t *)&v27, v29);
        goto LABEL_79;
      }
      if (v31 < 0xE0 || v30 != 1 || v31 != 224) {
        goto LABEL_136;
      }
      uint64_t v37 = 1;
      uint64_t v38 = -32;
      goto LABEL_78;
    default:
      if (v31 >= 0x20) {
        goto LABEL_137;
      }
      if (v27 != 0.0)
      {
        if (*(double *)&v30 == 0.0) {
          goto LABEL_137;
        }
        if (*(void *)&v27 != v30)
        {
          int v59 = v15;
          __int16 v32 = *(uint64_t (**)(uint64_t))(**(void **)&v27 + 88);
          int v33 = v7;
          outlined copy of Text.Modifier(*(uint64_t *)&v27, v29);
          outlined copy of Text.Modifier(v30, v31);
          uint64_t v34 = v32(v30);
LABEL_62:
          uint64_t v7 = v33;
          int v15 = v59;
          unint64_t v36 = v34;
          outlined consume of Text.Modifier(v30, v31);
          outlined consume of Text.Modifier(*(uint64_t *)&v27, v29);
          if ((v36 & 1) == 0) {
            goto LABEL_137;
          }
        }
        goto LABEL_79;
      }
LABEL_69:
      if (*(double *)&v30 == 0.0)
      {
        uint64_t v37 = 0;
        goto LABEL_77;
      }
      long long v27 = 0.0;
      goto LABEL_136;
  }
}

{
  uint64_t v2;
  double v5;
  double v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  BOOL v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v5 = *(double *)(a1 + 40);
  char v6 = *(double *)(a2 + 40);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(**(void **)(a1 + 32) + 104);
  swift_retain();
  uint64_t v8 = swift_retain();
  LOBYTE(v7) = v7(v8);
  swift_release();
  swift_release();
  uint64_t v9 = 0;
  if ((v7 & 1) != 0 && v5 == v6)
  {
    char v10 = (double *)(a2 + 56);
    float v11 = (double *)(a1 + 56);
    do
    {
      uint64_t v9 = --v2 == 0;
      if (!v2) {
        break;
      }
      char v12 = *v11;
      int v13 = *v10;
      float v14 = *(uint64_t (**)(uint64_t))(**((void **)v11 - 1) + 104);
      swift_retain();
      int v15 = swift_retain();
      LOBYTE(v14) = v14(v15);
      swift_release();
      swift_release();
      if ((v14 & 1) == 0) {
        break;
      }
      v10 += 2;
      v11 += 2;
    }
    while (v12 == v13);
  }
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  float v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  float v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  unsigned __int8 v46;
  void *v47;
  uint64_t v48;
  void *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  void v55[10];
  char v56;
  id v57[10];
  char v58;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    goto LABEL_27;
  }
  if (!v2 || a1 == a2)
  {
    uint64_t v28 = 1;
    return v28 & 1;
  }
  char v3 = 0;
  char v4 = v2 - 1;
  while (1)
  {
    uint64_t v34 = v4;
    uint64_t v5 = *(void **)(a1 + v3 + 40);
    char v6 = *(void **)(a1 + v3 + 48);
    uint64_t v7 = *(void **)(a1 + v3 + 56);
    uint64_t v8 = *(void **)(a1 + v3 + 64);
    uint64_t v9 = *(void **)(a1 + v3 + 72);
    char v10 = *(void **)(a1 + v3 + 80);
    float v11 = *(void **)(a1 + v3 + 88);
    char v12 = *(void **)(a1 + v3 + 96);
    int v13 = *(void **)(a1 + v3 + 104);
    float v14 = *(unsigned char *)(a1 + v3 + 112);
    int v15 = *(float *)(a1 + v3 + 116);
    int v54 = *(unsigned __int8 *)(a1 + v3 + 128);
    unsigned int v52 = *(void *)(a1 + v3 + 136);
    int v53 = *(void *)(a1 + v3 + 120);
    int v33 = v3;
    float v16 = *(void **)(a2 + v3 + 32);
    uint64_t v48 = *(void *)(a2 + v3 + 40);
    uint64_t v49 = *(void **)(a2 + v3 + 48);
    unint64_t v47 = *(void **)(a2 + v3 + 56);
    __int16 v18 = *(void *)(a2 + v3 + 64);
    float v17 = *(void *)(a2 + v3 + 72);
    float v20 = *(void *)(a2 + v3 + 80);
    uint64_t v19 = *(void *)(a2 + v3 + 88);
    float v21 = *(void *)(a2 + v3 + 96);
    __int16 v22 = *(void *)(a2 + v3 + 104);
    uint64_t v23 = *(unsigned char *)(a2 + v3 + 112);
    char v24 = *(float *)(a2 + v3 + 116);
    uint64_t v51 = *(void *)(a2 + v3 + 120);
    int32x4_t v50 = *(unsigned __int8 *)(a2 + v3 + 128);
    uint64_t v25 = *(void *)(a2 + v3 + 136);
    v57[0] = *(id *)(a1 + v3 + 32);
    v57[1] = v5;
    v57[2] = v6;
    v57[3] = v7;
    v57[4] = v8;
    v57[5] = v9;
    v57[6] = v10;
    v57[7] = v11;
    v57[8] = v12;
    v57[9] = v13;
    uint64_t v58 = v14;
    v55[0] = v16;
    v55[1] = v48;
    v55[2] = v49;
    v55[3] = v47;
    v55[4] = v18;
    v55[5] = v17;
    v55[6] = v20;
    v55[7] = v19;
    v55[8] = v21;
    v55[9] = v22;
    uint64_t v56 = v23;
    uint64_t v37 = v14;
    uint64_t v38 = (uint64_t)v13;
    uint64_t v39 = (uint64_t)v12;
    char v26 = v57[0];
    uint64_t v45 = (uint64_t)v6;
    unint64_t v46 = v5;
    uint64_t v43 = (uint64_t)v8;
    int v44 = v7;
    uint64_t v41 = (uint64_t)v10;
    char v42 = (uint64_t)v9;
    __int32 v40 = (uint64_t)v11;
    outlined copy of _ShapeStyle_Pack.Fill(v57[0], v5, v6, v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11, (uint64_t)v12, (uint64_t)v13, v14);
    outlined copy of GraphicsBlendMode?(v53, v54);
    swift_bridgeObjectRetain();
    unint64_t v35 = v18;
    unint64_t v36 = v19;
    outlined copy of _ShapeStyle_Pack.Fill(v16, v48, v49, v47, v18, v17, v20, v19, v21, v22, v23);
    outlined copy of GraphicsBlendMode?(v51, v50);
    swift_bridgeObjectRetain();
    if ((static _ShapeStyle_Pack.Fill.== infix(_:_:)(v57, v55) & 1) == 0 || v15 != v24)
    {
      __int16 v29 = v53;
      goto LABEL_26;
    }
    if (v54 != 255) {
      break;
    }
    long long v27 = v53;
    if (v50 != 255)
    {
LABEL_23:
      outlined copy of GraphicsBlendMode?(v51, v50);
      __int16 v29 = v53;
      outlined copy of GraphicsBlendMode?(v53, v54);
      outlined consume of GraphicsBlendMode?(v53, v54);
      outlined consume of GraphicsBlendMode?(v51, v50);
      goto LABEL_26;
    }
LABEL_17:
    uint64_t v28 = specialized static Array<A>.== infix(_:_:)(v52, v25);
    outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v16, v48, (uint64_t)v49, v47, v35, v17, v20, v36, v21, v22, v23);
    outlined consume of GraphicsBlendMode?(v51, v50);
    swift_bridgeObjectRelease();
    outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v26, v46, v45, v44, v43, v42, v41, v40, v39, v38, v37);
    outlined consume of GraphicsBlendMode?(v27, v54);
    swift_bridgeObjectRelease();
    char v4 = v34 - 1;
    if (v28)
    {
      char v3 = v33 + 112;
      if (v34) {
        continue;
      }
    }
    return v28 & 1;
  }
  if (v50 == 255) {
    goto LABEL_23;
  }
  if ((v54 & 1) == 0)
  {
    if (v50) {
      goto LABEL_25;
    }
    long long v27 = v53;
    outlined consume of GraphicsBlendMode(v53, 0);
    outlined consume of GraphicsBlendMode(v51, 0);
    if (v53 != v51)
    {
LABEL_22:
      __int16 v29 = v27;
      goto LABEL_26;
    }
    goto LABEL_17;
  }
  if (v50)
  {
    outlined copy of GraphicsBlendMode?(v51, v50);
    long long v27 = v53;
    outlined copy of GraphicsBlendMode?(v53, v54);
    outlined consume of GraphicsBlendMode(v53, 1);
    outlined consume of GraphicsBlendMode(v51, 1);
    if (v53 != v51) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  swift_unknownObjectRetain();
LABEL_25:
  outlined copy of GraphicsBlendMode(v51, (v54 & 1) == 0);
  __int16 v29 = v53;
  outlined consume of GraphicsBlendMode(v53, v54 & 1);
  outlined consume of GraphicsBlendMode(v51, (v54 & 1) == 0);
LABEL_26:
  outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v16, v48, (uint64_t)v49, v47, v35, v17, v20, v36, v21, v22, v23);
  outlined consume of GraphicsBlendMode?(v51, v50);
  swift_bridgeObjectRelease();
  outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v26, v46, v45, v44, v43, v42, v41, v40, v39, v38, v37);
  outlined consume of GraphicsBlendMode?(v29, v54);
  swift_bridgeObjectRelease();
LABEL_27:
  uint64_t v28 = 0;
  return v28 & 1;
}

{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  for (uint64_t i = 0; ; i += 48)
  {
    char v4 = 0;
    uint64_t v5 = a1 + i;
    char v6 = a2 + i;
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*(float32x4_t *)(a1 + i + 32), *(float32x4_t *)(a2 + i + 32))), 0xFuLL))) & 1) == 0|| *(double *)(v5 + 48) != *(double *)(v6 + 48))
    {
      break;
    }
    if (*(unsigned char *)(a1 + i + 72))
    {
      if ((*(unsigned char *)(v6 + 72) & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (*(unsigned char *)(v6 + 72)) {
        return 0;
      }
      uint64_t v7 = *(void *)(v5 + 56);
      uint64_t v8 = *(void *)(v5 + 64);
      uint64_t v9 = *(void *)(v6 + 64);
      char v10 = *(float *)&v7 == COERCE_FLOAT(*(void *)(v6 + 56))
         && *((float *)&v7 + 1) == COERCE_FLOAT(HIDWORD(*(void *)(v6 + 56)));
      float v11 = v10 && *(float *)&v8 == *(float *)&v9;
      if (!v11 || *((float *)&v8 + 1) != *((float *)&v9 + 1)) {
        return 0;
      }
    }
    if (!--v2) {
      return 1;
    }
  }
  return v4;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  BOOL v27;
  uint64_t v29;
  uint64_t v30;
  void (**v31)(char *, uint64_t);
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;

  char v4 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  MEMORY[0x270FA5388](v4);
  v8.n128_f64[0] = MEMORY[0x270FA5388](v5);
  char v10 = (char *)&v29 - v9;
  float v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v24 = 1;
    }
    else
    {
      char v12 = *(unsigned __int8 *)(v6 + 80);
      float v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      int v13 = v6 + 16;
      __int16 v32 = v7;
      int v33 = v14;
      int v15 = (v12 + 32) & ~v12;
      float v16 = *(void *)(v13 + 56);
      uint64_t v34 = v13;
      long long v30 = v16;
      uint64_t v31 = (void (**)(char *, uint64_t))(v13 - 8);
      float v17 = v11 - 1;
      __int16 v18 = v7;
      do
      {
        uint64_t v19 = a1;
        float v20 = v10;
        float v21 = v10;
        __int16 v22 = v33;
        ((void (*)(char *, uint64_t, uint64_t, __n128))v33)(v20, a1 + v15, v4, v8);
        uint64_t v23 = a2;
        v22(v18, a2 + v15, v4);
        char v10 = v21;
        _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_1(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
        char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v25 = *v31;
        (*v31)(v18, v4);
        v25(v21, v4);
        long long v27 = v17-- != 0;
        if ((v24 & 1) == 0) {
          break;
        }
        v15 += v30;
        a2 = v23;
        a1 = v19;
      }
      while (v27);
    }
  }
  else
  {
    char v24 = 0;
  }
  return v24 & 1;
}

{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  int v8;
  float v9;
  float v10;
  int v11;
  int v12;
  float v13;
  int v14;
  float v15;
  int v16;
  float v17;
  float v18;
  int v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    for (uint64_t i = 0; ; i += 36)
    {
      char v4 = a1 + i;
      uint64_t v5 = a2 + i;
      if (*(_DWORD *)(a1 + i + 32) != *(_DWORD *)(a2 + i + 32)) {
        break;
      }
      char v6 = *(float *)(v4 + 36);
      uint64_t v7 = *(float *)(v4 + 44);
      uint64_t v8 = *(unsigned __int8 *)(v4 + 48);
      char v10 = *(float *)(v4 + 52);
      uint64_t v9 = *(float *)(v4 + 56);
      char v12 = *(_DWORD *)(v4 + 60);
      float v11 = *(_DWORD *)(v4 + 64);
      int v13 = *(float *)(v5 + 36);
      float v14 = *(unsigned __int8 *)(v5 + 40);
      int v15 = *(float *)(v5 + 44);
      float v16 = *(unsigned __int8 *)(v5 + 48);
      __int16 v18 = *(float *)(v5 + 52);
      float v17 = *(float *)(v5 + 56);
      float v20 = *(_DWORD *)(v5 + 60);
      uint64_t v19 = *(_DWORD *)(v5 + 64);
      float v21 = *(unsigned __int8 *)(v4 + 40);
      if (v21)
      {
        if (v21 == 1)
        {
          float v21 = 0;
          if (v14 != 1 || LODWORD(v6) != LODWORD(v13)) {
            return v21;
          }
        }
        else
        {
          float v21 = 0;
          if (v14 != 2 || v13 != 0.0) {
            return v21;
          }
        }
      }
      else if (v14 || v6 != v13)
      {
        return v21;
      }
      if (v8)
      {
        if (v8 == 1)
        {
          if (v16 != 1) {
            return 0;
          }
          float v21 = 0;
          if (LODWORD(v7) != LODWORD(v15)) {
            return v21;
          }
        }
        else
        {
          float v21 = 0;
          if (v16 != 2 || v15 != 0.0) {
            return v21;
          }
        }
        if (v10 != v18 || v9 != v17 || v12 != v20 || v11 != v19) {
          return v21;
        }
      }
      else
      {
        float v21 = 0;
        if (v16) {
          return v21;
        }
        __int16 v22 = v7 == v15 && v10 == v18;
        uint64_t v23 = v22 && v9 == v17;
        char v24 = v23 && v12 == v20;
        if (!v24 || v11 != v19) {
          return v21;
        }
      }
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    for (uint64_t i = 0; ; i += 56)
    {
      char v4 = a1 + i;
      uint64_t v5 = a2 + i;
      if (*(float *)(a1 + i + 32) != *(float *)(a2 + i + 32)) {
        break;
      }
      if (*(unsigned char *)(v4 + 80))
      {
        if ((*(unsigned char *)(v5 + 80) & 1) == 0) {
          return 0;
        }
      }
      else
      {
        if (*(unsigned char *)(v5 + 80)) {
          return 0;
        }
        char v6 = *(void *)(v4 + 40);
        uint64_t v7 = *(void *)(v4 + 48);
        uint64_t v8 = *(void *)(v5 + 48);
        uint64_t v9 = *(void *)(v5 + 40);
        char v10 = *(float *)&v6 == *(float *)&v9 && *((float *)&v6 + 1) == *((float *)&v9 + 1);
        float v11 = v10 && *(float *)&v7 == *(float *)&v8;
        char v12 = v11 && *((float *)&v7 + 1) == *((float *)&v8 + 1);
        int v13 = v12 && *(double *)(v4 + 56) == *(double *)(v5 + 56);
        float v14 = v13 && *(double *)(v4 + 64) == *(double *)(v5 + 64);
        if (!v14 || *(double *)(v4 + 72) != *(double *)(v5 + 72)) {
          return 0;
        }
      }
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  int32x2_t *v4;
  int32x2_t *v5;
  int32x2_t v6;
  uint64_t result;
  BOOL v9;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  char v3 = v2 - 1;
  char v4 = (int32x2_t *)(a1 + 36);
  uint64_t v5 = (int32x2_t *)(a2 + 36);
  do
  {
    char v6 = vceq_s32(*v4, *v5);
    uint64_t result = ((v4[-1].i32[1] == v5[-1].i32[1]) & v6.i8[0]) & v6.i8[4];
    uint64_t v9 = v3-- != 0;
    if (result != 1) {
      break;
    }
    char v4 = (int32x2_t *)((char *)v4 + 12);
    uint64_t v5 = (int32x2_t *)((char *)v5 + 12);
  }
  while (v9);
  return result;
}

{
  uint64_t v2;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  float v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  float v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  long long v19;
  uint64_t v20;
  __int16 v21;
  long long v22;
  uint64_t v23;
  __int16 v24;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2) {
      return 1;
    }
    for (uint64_t i = 0; ; i += 56)
    {
      char v6 = a1 + i;
      uint64_t v7 = a2 + i;
      if (*(void *)(a1 + i + 32) != *(void *)(a2 + i + 32) || *(void *)(a1 + i + 40) != *(void *)(a2 + i + 40)) {
        break;
      }
      uint64_t v9 = *(float *)(v6 + 80);
      char v10 = *(_DWORD *)(v6 + 76);
      float v11 = *(_WORD *)(v6 + 72);
      char v12 = *(void *)(v6 + 64);
      int v13 = *(float *)(v7 + 80);
      float v14 = *(_DWORD *)(v7 + 76);
      int v15 = *(_WORD *)(v7 + 72);
      float v16 = *(void *)(v7 + 64);
      __int16 v22 = *(_OWORD *)(v6 + 48);
      uint64_t v23 = v12;
      char v24 = v11;
      uint64_t v19 = *(_OWORD *)(v7 + 48);
      float v20 = v16;
      float v21 = v15;
      float v17 = static _SymbolEffect.Storage.== infix(_:_:)(&v22, &v19);
      uint64_t result = 0;
      if ((v17 & 1) == 0 || v10 != v14 || v9 != v13) {
        return result;
      }
      if (!--v2) {
        return 1;
      }
    }
  }
  return 0;
}

{
  uint64_t v2;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  long long v12;
  long long v13;
  char v14;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v5 = *(_OWORD *)(a1 + 48);
  v20[0] = *(_OWORD *)(a1 + 32);
  v20[1] = v5;
  float v21 = *(void *)(a1 + 64);
  char v6 = *(_OWORD *)(a2 + 48);
  v22[0] = *(_OWORD *)(a2 + 32);
  v22[1] = v6;
  uint64_t v23 = *(void *)(a2 + 64);
  if ((specialized static MeshGradient.BezierPoint.== infix(_:_:)((float32x2_t *)v20, (float32x2_t *)v22) & 1) == 0) {
    return 0;
  }
  uint64_t v7 = a1 + 72;
  uint64_t v8 = a2 + 72;
  do
  {
    uint64_t v9 = --v2 == 0;
    if (!v2) {
      break;
    }
    char v10 = v7 + 40;
    float v11 = v8 + 40;
    char v12 = *(_OWORD *)(v7 + 16);
    v16[0] = *(_OWORD *)v7;
    v16[1] = v12;
    float v17 = *(void *)(v7 + 32);
    int v13 = *(_OWORD *)(v8 + 16);
    v18[0] = *(_OWORD *)v8;
    v18[1] = v13;
    uint64_t v19 = *(void *)(v8 + 32);
    float v14 = specialized static MeshGradient.BezierPoint.== infix(_:_:)((float32x2_t *)v16, (float32x2_t *)v18);
    uint64_t v8 = v11;
    uint64_t v7 = v10;
  }
  while ((v14 & 1) != 0);
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v8;
  unsigned char v10[120];
  unsigned char v11[120];

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      char v6 = 1;
    }
    else
    {
      char v3 = a1 + 32;
      char v4 = a2 + 32;
      uint64_t v5 = v2 - 1;
      do
      {
        outlined init with copy of AccessibilityCustomContentEntry(v3, (uint64_t)v11);
        outlined init with copy of AccessibilityCustomContentEntry(v4, (uint64_t)v10);
        char v6 = specialized static AccessibilityCustomContentEntry.== infix(_:_:)((uint64_t)v11, (uint64_t)v10);
        outlined destroy of AccessibilityCustomContentEntry((uint64_t)v10);
        outlined destroy of AccessibilityCustomContentEntry((uint64_t)v11);
        uint64_t v8 = v5-- != 0;
        if ((v6 & 1) == 0) {
          break;
        }
        v4 += 120;
        v3 += 120;
      }
      while (v8);
    }
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.SymbolEffectsKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static EnvironmentValues.SymbolEffectsKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.SymbolEffectsKey(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance SymbolRenderingModeKey()
{
  return AGCompareValues();
}

void protocol witness for CodingKey.init(intValue:) in conformance ArchivedViewCore.Metadata.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t partial apply for closure #1 in ShapeStyledDisplayList.updateValue()()
{
  uint64_t v1 = *(unsigned char **)(v0 + 32);
  uint64_t result = AGGraphAnyInputsChanged();
  *uint64_t v1 = result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _AnimationModifier<A>(int *a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static _AnimationModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16));
}

uint64_t PreferenceCombiner.value.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  char v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v37 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x270FA5388](v10);
  int v44 = (char *)&v33 - v12;
  uint64_t v13 = *v3;
  float v14 = *(void (**)(void))(v6 + 16);
  uint64_t v41 = v5;
  uint64_t v34 = v14;
  uint64_t v35 = v6 + 16;
  ((void (*)(uint64_t, uint64_t, double))v14)(v5, v6, v11);
  uint64_t v15 = type metadata accessor for WeakAttribute();
  uint64_t v16 = swift_bridgeObjectRetain();
  if (MEMORY[0x24C522EA0](v16, v15))
  {
    uint64_t v17 = 0;
    unint64_t v36 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v38 = (void (**)(uint64_t, uint64_t))(v8 + 8);
    uint64_t v39 = v6 + 24;
    uint64_t v42 = v15;
    uint64_t v43 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v18 = v13 + 36;
    char v19 = 1;
    uint64_t v40 = v6;
    while (1)
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      uint64_t result = Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (!IsNativeType)
      {
        _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t result = swift_unknownObjectRelease();
      }
      char v26 = v43;
      uint64_t v27 = v17 + 1;
      if (__OFADD__(v17, 1)) {
        break;
      }
      if (v19)
      {
        Weakuint64_t Value = AGGraphGetWeakValue();
        if (WeakValue)
        {
          uint64_t v29 = v13;
          long long v30 = v37;
          (*v36)(v37, WeakValue, AssociatedTypeWitness);
          (*v38)((uint64_t)a2, AssociatedTypeWitness);
          uint64_t v31 = *v26;
          __int16 v32 = v30;
          uint64_t v13 = v29;
          v31(v44, v32, AssociatedTypeWitness);
        }
        else
        {
          v34();
          (*v38)((uint64_t)a2, AssociatedTypeWitness);
          uint64_t v31 = *v26;
        }
        v31(a2, v44, AssociatedTypeWitness);
        uint64_t v6 = v40;
        uint64_t v23 = v42;
      }
      else
      {
        double v20 = MEMORY[0x270FA5388](result);
        *(&v33 - 4) = v41;
        *(&v33 - 3) = v6;
        *((_DWORD *)&v33 - 4) = v21;
        *((_DWORD *)&v33 - 3) = v22;
        (*(void (**)(char *, uint64_t (*)@<X0>(uint64_t@<X8>), double))(v6 + 24))(a2, partial apply for closure #1 in PreferenceCombiner.value.getter, v20);
        uint64_t v23 = v42;
      }
      char v19 = 0;
      v18 += 8;
      ++v17;
      if (v27 == MEMORY[0x24C522EA0](v13, v23)) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #2 in static _OverlayModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #2 in static _OverlayModifier._makeView(modifier:inputs:body:)(a1);
}

uint64_t partial apply for closure #1 in static _OverlayModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static _OverlayModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16));
}

uint64_t closure #1 in static _OverlayModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  void v7[2] = type metadata accessor for _OverlayModifier();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v7, a2, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

double protocol witness for Rule.value.getter in conformance _DefaultForegroundStyleModifier<A>.DefaultForegroundStyleEnvironment@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t partial apply for closure #1 in static ZStack._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static ZStack._makeView(view:inputs:)(a1);
}

uint64_t protocol witness for Rule.value.getter in conformance ForEachState<A, B, C>.Info.Init@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = ForEachState.Info.Init.value.getter(*v2, *((void *)v2 + 1), a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  *(void *)a2 = result;
  *(_DWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _BackgroundModifier<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t partial apply for closure #1 in static _UnaryViewAdaptor._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static _UnaryViewAdaptor._makeView(view:inputs:)(a1, *(void *)(v1 + 16));
}

uint64_t closure #1 in static _UnaryViewAdaptor._makeView(view:inputs:)(uint64_t a1, uint64_t a2)
{
  void v7[2] = type metadata accessor for _UnaryViewAdaptor();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v7, a2, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OverlayModifier<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ValueActionModifier2<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _ValueActionModifier2._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ForegroundStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _ForegroundStyleModifier<A>);
}

uint64_t static _ForegroundStyleModifier.graphInputsSemantics.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for v4 != -1) {
    uint64_t result = swift_once();
  }
  *(_DWORD *)a1 = static Semantics.v4;
  *(unsigned char *)(a1 + 4) = 0;
  return result;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.PreferenceBridgeKey()
{
  return AGCompareValues();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ClipEffect<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AddGestureModifier<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

__n128 __swift_memcpy37_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 29) = *(void *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _PreferenceActionModifier<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for Rule.value.getter in conformance PreferenceTransform<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PreferenceTransform.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t PreferenceTransform.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v20 - v11;
  PreferenceTransform.childValue.getter(a1, (uint64_t)v20 - v11);
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
    uint64_t v14 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a4, v12, AssociatedTypeWitness);
  }
  MEMORY[0x270FA5388](v14);
  v20[-4] = a2;
  v20[-3] = a3;
  LODWORD(v20[-2]) = a1;
  HIDWORD(v20[-2]) = v15;
  v20[-1] = a4;
  v20[1] = AssociatedTypeWitness;
  uint64_t v16 = MEMORY[0x263F8EE60] + 8;
  uint64_t FunctionTypeMetadata = swift_getFunctionTypeMetadata();
  return Attribute.syncMainIfReferences<A>(do:)((void (*)(void))partial apply for closure #1 in PreferenceTransform.value.getter, (uint64_t)&v20[-6], FunctionTypeMetadata, v16, v18);
}

uint64_t PreferenceTransform.childValue.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = HIDWORD(a1);
  int v4 = *MEMORY[0x263F288F8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = AssociatedTypeWitness;
  if (v4 == v3)
  {
    uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v12 = *(void *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2, Value, v6);
    uint64_t v7 = v12;
    uint64_t v8 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);

  return v10(a2, v8, 1, v6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, uint64_t (*a4)(uint64_t, _OWORD *)@<X6>, void *a5@<X8>)
{
  long long v6 = *(_OWORD *)(a2 + 48);
  v10[2] = *(_OWORD *)(a2 + 32);
  v10[3] = v6;
  v10[4] = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v7;
  uint64_t v8 = *a1;
  char v11 = *(unsigned char *)(a2 + 80);
  a3(a5);
  return a4(v8, v10);
}

uint64_t destroy for _BackgroundStyleModifier.BackgroundInfo.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = *(_DWORD *)(v2 + 80) & 0xF8 | 7;
  return (*(uint64_t (**)(uint64_t))(v2 + 8))((a1 + v3 + 48) & ~v3);
}

uint64_t protocol witness for Rule.value.getter in conformance MakeDefaultRepresentation<A>(uint64_t a1)
{
  return MakeDefaultRepresentation.value.getter(*v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t MakeDefaultRepresentation.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, Value, a2);
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  View.modifier<A>(_:)(v8, a2, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a2);
}

uint64_t protocol witness for Rule.value.getter in conformance _BackgroundStyleModifier<A>.BackgroundInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _BackgroundStyleModifier.BackgroundInfo.value.getter(*(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t MatchedDisplayList.value.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void (*v125)(CGRect *__return_ptr, void, void);
  CGFloat v126;
  uint64_t v127;
  uint64_t *v128;
  double v129;
  uint64_t v130;
  uint64_t v131;
  CGRect v132;
  long long v133;
  CGSize v134;
  double v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  __int16 v139;
  char v140;
  int v141;
  long long v142;
  CGSize v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unsigned __int16 v148;
  unsigned __int8 v149;
  int v150;
  void v151[4];
  char v152;

  v128 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v118 = type metadata accessor for Optional();
  uint64_t v117 = *(void *)(v118 - 8);
  MEMORY[0x270FA5388](v118);
  v122 = &v113[-v5];
  uint64_t v124 = v4;
  uint64_t v123 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v6);
  v119 = &v113[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unsigned int v8 = *(_DWORD *)(v2 + 4);
  unsigned int v10 = *(_DWORD *)(v2 + 8);
  unsigned int v11 = *(_DWORD *)(v2 + 12);
  unsigned int v13 = *(_DWORD *)(v2 + 16);
  unsigned int v12 = *(_DWORD *)(v2 + 20);
  LODWORD(v7) = *(_DWORD *)(v2 + 24);
  unsigned int v14 = *(_DWORD *)(v2 + 28);
  int v15 = *(_DWORD *)(v2 + 32);
  int v16 = *(unsigned __int8 *)(v2 + 36);
  LODWORD(v142) = *(_DWORD *)v2;
  unsigned int v9 = v142;
  *(void *)((char *)&v142 + 4) = __PAIR64__(v10, v8);
  HIDWORD(v142) = v11;
  *(void *)&v143.CGFloat width = __PAIR64__(v12, v13);
  LODWORD(v126) = v7;
  *(void *)&v143.CGFloat height = __PAIR64__(v14, v7);
  LODWORD(v125) = v15;
  LODWORD(v144) = v15;
  BYTE4(v144) = v16;
  v127 = a1;
  char v17 = MatchedDisplayList.args.getter();
  LODWORD(v131) = v9;
  LODWORD(v130) = v16;
  LODWORD(v129) = v12;
  if ((v17 & 4) != 0)
  {
    *(void *)&v133 = __PAIR64__(v8, v9);
    unsigned int v116 = v10;
    *((void *)&v133 + 1) = __PAIR64__(v11, v10);
    unsigned int v120 = v11;
    unsigned int v121 = v13;
    *(void *)&v134.CGFloat width = __PAIR64__(v12, v13);
    unsigned int v20 = LODWORD(v126);
    *(void *)&v134.CGFloat height = __PAIR64__(v14, LODWORD(v126));
    int v21 = (int)v125;
    LODWORD(v135) = v125;
    BYTE4(v135) = v16;
    uint64_t v18 = 0;
    unsigned int v22 = v14;
    if (MatchedDisplayList.sharedFrame.getter((uint64_t)&v142) == v8)
    {
      uint64_t v19 = 19;
    }
    else
    {
      unsigned int v23 = v20;
      uint64_t v19 = 19;
      unsigned int v24 = v120;
      unsigned int v25 = v121;
      if ((v146 & 1) == 0)
      {
        int v26 = v21;
        long long v115 = v142;
        CGSize v27 = v143;
        uint64_t Value = AGGraphGetValue();
        uint64_t v29 = *(void *)Value;
        double v30 = *(double *)(Value + 8);
        double v31 = *(double *)(Value + 16);
        double v32 = *(double *)(Value + 24);
        double v33 = *(double *)(Value + 32);
        swift_retain();
        uint64_t v34 = AGGraphGetValue();
        double v36 = *(double *)v34;
        double v35 = *(double *)(v34 + 8);
        CGFloat v37 = v32 - (*(double *)v34 - v30);
        v132.size = v27;
        unsigned int v38 = v131;
        *(void *)&v142 = __PAIR64__(v8, v131);
        unsigned int v114 = v8;
        unsigned int v39 = v116;
        *((void *)&v142 + 1) = __PAIR64__(v24, v116);
        *(void *)&v143.CGFloat width = __PAIR64__(LODWORD(v129), v25);
        unsigned int v40 = v22;
        unsigned int v41 = v24;
        unsigned int v42 = LODWORD(v129);
        *(void *)&v143.CGFloat height = __PAIR64__(v40, v23);
        LODWORD(v144) = v26;
        char v43 = v130;
        BYTE4(v144) = v130;
        uint64_t v44 = v127;
        MatchedDisplayList.args.getter();
        v132.origin.CGFloat x = *(double *)&v115 - v27.width * v45;
        v132.origin.CGFloat y = *((double *)&v115 + 1) - v27.height * v46;
        v144 = 0;
        v143 = (CGSize)0;
        v142 = 0u;
        LOBYTE(v145) = 2;
        *((void *)&v115 + 1) = v29;
        *(void *)&v133 = v29;
        *((double *)&v133 + 1) = v36;
        v134.CGFloat width = v35;
        v134.CGFloat height = v37;
        v135 = v33 - (v35 - v31);
        CGRect.convert(from:transform:)((uint64_t)&v142, (double *)&v133);
        outlined destroy of CoordinateSpace((uint64_t)&v142);
        *(void *)&v142 = __PAIR64__(v114, v38);
        *((void *)&v142 + 1) = __PAIR64__(v41, v39);
        *(void *)&v143.CGFloat width = __PAIR64__(v42, v121);
        *(void *)&v143.CGFloat height = __PAIR64__(v40, LODWORD(v126));
        LODWORD(v144) = v26;
        BYTE4(v144) = v43;
        unint64_t v47 = v122;
        MatchedDisplayList.clipShape.getter(v44, (uint64_t)v122);
        uint64_t v48 = v123;
        uint64_t v49 = v124;
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v123 + 48))(v47, 1, v124) == 1)
        {
          (*(void (**)(unsigned char *, uint64_t))(v117 + 8))(v47, v118);
          CGFloat x = v132.origin.x;
          CGFloat y = v132.origin.y;
          CGFloat width = v132.size.width;
          CGFloat height = v132.size.height;
          if (CGRectIsNull(v132))
          {
            CGFloat v54 = 0.0;
            CGFloat v55 = 0.0;
            CGFloat v56 = 0.0;
            CGFloat v57 = 0.0;
            char v58 = 6;
          }
          else
          {
            char v58 = 0;
            CGFloat v54 = x;
            CGFloat v55 = y;
            CGFloat v56 = width;
            CGFloat v57 = height;
          }
        }
        else
        {
          int v59 = v119;
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v48 + 32))(v119, v47, v49);
          (*(void (**)(void *__return_ptr, uint64_t, CGFloat, CGFloat, CGFloat, CGFloat))(*(void *)(v44 + 24) + 24))(v151, v49, v132.origin.x, v132.origin.y, v132.size.width, v132.size.height);
          CGFloat v54 = *(double *)v151;
          CGFloat v55 = *(double *)&v151[1];
          CGFloat v56 = *(double *)&v151[2];
          CGFloat v57 = *(double *)&v151[3];
          char v58 = v152;
          (*(void (**)(unsigned char *, uint64_t))(v48 + 8))(v59, v49);
        }
        swift_release();
        uint64_t v18 = swift_allocObject();
        *(CGFloat *)(v18 + 16) = v54;
        *(CGFloat *)(v18 + 24) = v55;
        *(CGFloat *)(v18 + 32) = v56;
        *(CGFloat *)(v18 + 40) = v57;
        *(unsigned char *)(v18 + 48) = v58;
        *(_WORD *)(v18 + 49) = 256;
        uint64_t v19 = 6;
        *(_DWORD *)(v18 + 52) = 0;
      }
    }
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = 19;
  }
  int v60 = (double *)AGGraphGetValue();
  double v61 = *v60;
  double v62 = v60[1];
  uint64_t v63 = (double *)AGGraphGetValue();
  double v64 = v61 - *v63;
  double v65 = v62 - v63[1];
  uint64_t v66 = AGGraphGetValue();
  uint64_t v67 = *(void *)v66;
  unsigned __int16 v68 = *(_WORD *)(v66 + 8);
  unsigned __int8 v69 = *(unsigned char *)(v66 + 10);
  swift_bridgeObjectRetain();
  int v70 = (CGSize *)AGGraphGetValue();
  *(double *)&v142 = v64;
  *((double *)&v142 + 1) = v65;
  CGSize v71 = *v70;
  ++static DisplayList.Version.lastValue;
  v143 = v71;
  v144 = static DisplayList.Version.lastValue;
  v145 = v18;
  v146 = (v19 << 32) | 0x4000000000000000;
  v147 = v67;
  v149 = v69;
  v148 = v68;
  v150 = v131;
  LOBYTE(v133) = v130;
  outlined copy of DisplayList.Effect(v18, 0, v19);
  DisplayList.Item.canonicalize(options:)((char *)&v133);
  long long v72 = v142;
  CGSize v73 = v143;
  uint64_t v74 = v144;
  unint64_t v75 = v145;
  unint64_t v77 = v146;
  uint64_t v76 = v147;
  int v78 = v148 | (v149 << 16);
  int v79 = v150;
  unint64_t v80 = v146 >> 62;
  if (v146 >> 62 != 3 || (v78 & 0xFFFFFF) != 0 || v146 != 0xC000000000000000 || v147 | v145)
  {
    v130 = v19;
    v131 = v18;
    _s14AttributeGraph0A0Vy7SwiftUI11DisplayListVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v84 = swift_allocObject();
    *(_OWORD *)(v84 + 16) = xmmword_2461B9DC0;
    *(_OWORD *)(v84 + 32) = v72;
    *(CGSize *)(v84 + 48) = v73;
    *(void *)(v84 + 64) = v74;
    *(void *)(v84 + 72) = v75;
    *(void *)(v84 + 80) = v77;
    *(void *)(v84 + 88) = v76;
    *(unsigned char *)(v84 + 98) = BYTE2(v78);
    *(_WORD *)(v84 + 96) = v78;
    *(_DWORD *)(v84 + 100) = v79;
    uint64_t v83 = v84;
    *(void *)&v129 = v74;
    switch((int)v80)
    {
      case 1:
        LODWORD(v127) = (unsigned __int16)v78;
        uint64_t v86 = outlined copy of DisplayList.Item.Value(v75, v77);
        switch(BYTE4(v77))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(v75, v77);
            outlined copy of DisplayList.Item.Value(v75, v77);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v75, v77, 2);
            unsigned int v87 = (v75 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(v75 + 16, (uint64_t)&v133);
            v126 = v134.height;
            double v104 = v135;
            __swift_project_boxed_opaque_existential_1(&v133, *(uint64_t *)&v134.height);
            v125 = *(void (**)(CGRect *__return_ptr, void, void))(*(void *)&v104 + 56);
            outlined copy of DisplayList.Item.Value(v75, v77);
            outlined copy of DisplayList.Item.Value(v75, v77);
            v125(&v132, *(void *)&v126, *(void *)&v104);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v133);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v75, v77, 3);
            LOWORD(v87) = LOWORD(v132.origin.x);
            break;
          case 7:
            LOWORD(v87) = *(_WORD *)(v75 + 24);
            outlined copy of DisplayList.Item.Value(v75, v77);
            outlined copy of DisplayList.Item.Value(v75, v77);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v75, v77, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(v75, v77);
            outlined copy of DisplayList.Item.Value(v75, v77);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v75, v77, 10);
            LOWORD(v87) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(v75, v77);
            outlined copy of DisplayList.Item.Value(v75, v77);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v75, v77, 12);
            LOWORD(v87) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(v75, v77);
            outlined copy of DisplayList.Item.Value(v75, v77);
            swift_bridgeObjectRelease();
            uint64_t v105 = v75;
            char v106 = v77;
            LOBYTE(v107) = 14;
            goto LABEL_52;
          case 0xF:
            outlined copy of DisplayList.Item.Value(v75, v77);
            outlined copy of DisplayList.Item.Value(v75, v77);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v75, v77, 15);
            LOWORD(v87) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(v75, v77);
            outlined copy of DisplayList.Item.Value(v75, v77);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v75, v77, 16);
            LOWORD(v87) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v75 + 112))(&v133, v86);
            LODWORD(v126) = (unsigned __int16)v133;
            int v108 = (unsigned __int16)word_26FA429C8;
            int v109 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(v75, v77);
            outlined copy of DisplayList.Item.Value(v75, v77);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v75, v77, 17);
            if ((v109 & ~v108) != 0) {
              __int16 v110 = v109;
            }
            else {
              __int16 v110 = 0;
            }
            LOWORD(v87) = LOWORD(v126) | v108 | v110;
            break;
          default:
            outlined copy of DisplayList.Item.Value(v75, v77);
            outlined copy of DisplayList.Item.Value(v75, v77);
            swift_bridgeObjectRelease();
            uint64_t v105 = v75;
            char v106 = v77;
            unint64_t v107 = HIDWORD(v77);
LABEL_52:
            outlined consume of DisplayList.Effect(v105, v106, v107);
            LOWORD(v87) = 0;
            break;
        }
        __int16 v82 = v87 | v127;
        goto LABEL_60;
      case 2:
        uint64_t v88 = *(void *)(v75 + 16);
        if (v88)
        {
          if (v88 == 1)
          {
            uint64_t v89 = 0;
            __int16 v82 = 128;
          }
          else
          {
            __int16 v90 = 0;
            uint64_t v89 = v88 & 0x7FFFFFFFFFFFFFFELL;
            v91 = (__int16 *)(v75 + 104);
            __int16 v92 = 128;
            uint64_t v93 = v88 & 0x7FFFFFFFFFFFFFFELL;
            do
            {
              __int16 v94 = *(v91 - 20);
              __int16 v95 = *v91;
              v91 += 40;
              v92 |= v94;
              v90 |= v95;
              v93 -= 2;
            }
            while (v93);
            __int16 v82 = v90 | v92;
            if (v88 == v89) {
              goto LABEL_43;
            }
          }
          uint64_t v96 = v88 - v89;
          v97 = (__int16 *)(v75 + 40 * v89 + 64);
          do
          {
            __int16 v98 = *v97;
            v97 += 20;
            v82 |= v98;
            --v96;
          }
          while (v96);
        }
        else
        {
          __int16 v82 = 128;
        }
LABEL_43:
        outlined copy of DisplayList.Item.Value(v75, v77);
        outlined copy of DisplayList.Item.Value(v75, v77);
LABEL_60:
        v133 = v72;
        v134 = v73;
        v135 = v129;
        v136 = v75;
        v137 = v77;
        v138 = v76;
        v140 = BYTE2(v78);
        v139 = v78;
        v141 = v79;
        DisplayList.Item.properties.getter(&v132);
        outlined consume of DisplayList.Item.Value(v75, v77);
        outlined consume of DisplayList.Effect(v131, 0, v130);
        char x_low = LOBYTE(v132.origin.x);
        goto LABEL_61;
      case 3:
        outlined copy of DisplayList.Item.Value(v75, v77);
        __int16 v82 = 0;
        goto LABEL_60;
      default:
        switch(v75 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((v75 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v133);
            v127 = *(void *)&v134.height;
            double v85 = v135;
            __swift_project_boxed_opaque_existential_1(&v133, *(uint64_t *)&v134.height);
            v126 = *(CGFloat *)(*(void *)&v85 + 40);
            outlined copy of DisplayList.Item.Value(v75, v77);
            outlined copy of DisplayList.Item.Value(v75, v77);
            (*(void (**)(CGRect *__return_ptr, uint64_t, void))&v126)(&v132, v127, *(void *)&v85);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v133);
            __int16 v82 = LOWORD(v132.origin.x);
            goto LABEL_60;
          case 8uLL:
            CGFloat v99 = *(double *)((v75 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(*(void *)&v99 + 216)) {
              goto LABEL_40;
            }
            uint64_t v100 = *(void *)((v75 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
            v125 = *(void (**)(CGRect *__return_ptr, void, void))(*(void *)&v99 + 216);
            outlined copy of DisplayList.Item.Value(v75, v77);
            outlined copy of DisplayList.Item.Value(v75, v77);
            outlined copy of DisplayList.Item.Value(v75, v77);
            outlined copy of DisplayList.Item.Value(v75, v77);
            v127 = v100;
            swift_retain();
            v126 = v99;
            v101 = v125;
            swift_retain();
            if ((uint64_t)objc_msgSend(v101, sel_length) <= 0) {
              goto LABEL_63;
            }
            if (one-time initialization token for updateSchedule != -1) {
              swift_once();
            }
            uint64_t v102 = static NSAttributedStringKey.updateSchedule;
            objc_msgSend(v101, sel_length);
            if (objc_msgSend(v101, sel_attribute_atIndex_effectiveRange_, v102, 0, 0))
            {
              _bridgeAnyObjectToAny(_:)();
              swift_unknownObjectRelease();
              outlined destroy of Any?((uint64_t)&v133);
              char v103 = *(unsigned char *)(*(void *)&v126 + 256);
              outlined consume of DisplayList.Item.Value(v75, v77);
              swift_release();
              swift_release();
              outlined consume of DisplayList.Item.Value(v75, v77);
              if (v103) {
                __int16 v82 = 8;
              }
              else {
LABEL_41:
              }
                __int16 v82 = 0;
            }
            else
            {
              v134 = (CGSize)0;
              v133 = 0u;
              outlined destroy of Any?((uint64_t)&v133);
LABEL_63:
              outlined consume of DisplayList.Item.Value(v75, v77);
              swift_release();
              swift_release();
              outlined consume of DisplayList.Item.Value(v75, v77);
              __int16 v82 = 0;
            }
            break;
          case 9uLL:
            __int16 v82 = *(_WORD *)((v75 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            goto LABEL_43;
          case 0xBuLL:
            goto LABEL_45;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(v75, v77);
LABEL_45:
            outlined copy of DisplayList.Item.Value(v75, v77);
            outlined copy of DisplayList.Item.Value(v75, v77);
            __int16 v82 = 2;
            goto LABEL_60;
          default:
LABEL_40:
            outlined copy of DisplayList.Item.Value(v75, v77);
            outlined copy of DisplayList.Item.Value(v75, v77);
            goto LABEL_41;
        }
        goto LABEL_60;
    }
  }
  outlined consume of DisplayList.Effect(v18, 0, v19);
  char x_low = 0;
  __int16 v82 = 0;
  uint64_t v83 = MEMORY[0x263F8EE78];
LABEL_61:
  v111 = v128;
  *v128 = v83;
  *((_WORD *)v111 + 4) = v82;
  *((unsigned char *)v111 + 10) = x_low;
  return outlined consume of DisplayList.Item.Value(v75, v77);
}

uint64_t protocol witness for Rule.value.getter in conformance AnchorWriter<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return AnchorWriter.value.getter(*v2, v2[1], a1[2], a1[3], a1[4], a2);
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance AccentColorKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  BOOL result = (*a1 | *a2) == 0;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v2 == v3)
    {
      return 1;
    }
    else
    {
      uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 88);
      uint64_t v7 = swift_retain();
      char v8 = v6(v7);
      swift_release();
      return v8 & 1;
    }
  }
  return result;
}

uint64_t (*protocol witness for Rule.value.getter in conformance AnchorTransform<A, B>@<X0>(void *a1@<X0>, uint64_t (**a2)()@<X8>))()
{
  unint64_t v5 = *v2;
  unint64_t v4 = v2[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unsigned int v9 = AnchorTransform.value.getter(v5, v4, v6, v7, v8);
  uint64_t v11 = v10;
  BOOL result = (uint64_t (*)())swift_allocObject();
  *((void *)result + 2) = v6;
  *((void *)result + 3) = v7;
  *((void *)result + 4) = v8;
  *((void *)result + 5) = v9;
  *((void *)result + 6) = v11;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.PreferenceKey.Value) -> ();
  a2[1] = result;
  return result;
}

uint64_t partial apply for closure #2 in static _ShapeView._makeView(view:inputs:)(uint64_t a1)
{
  return closure #2 in static _ShapeView._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t closure #2 in static _ShapeView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  v10[2] = type metadata accessor for _ShapeView();
  v10[3] = a2;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v10, a2, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v8);
  return v11;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _FixedSizeLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(uint64_t a1, long long *a2)
{
  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_OffsetEffect>.ListModifier, (uint64_t)&type metadata for _OffsetEffect, (uint64_t)&protocol witness table for _OffsetEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_OffsetEffect>, (uint64_t)&type metadata for _OffsetEffect, (uint64_t)&protocol witness table for _OffsetEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_ScaleEffect>.ListModifier, (uint64_t)&type metadata for _ScaleEffect, (uint64_t)&protocol witness table for _ScaleEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_ScaleEffect>, (uint64_t)&type metadata for _ScaleEffect, (uint64_t)&protocol witness table for _ScaleEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedViewList<_RotationEffect>.ListModifier, (uint64_t)&type metadata for _RotationEffect, (uint64_t)&protocol witness table for _RotationEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_RotationEffect>, (uint64_t)&type metadata for _RotationEffect, (uint64_t)&protocol witness table for _RotationEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_FixedSizeLayout>.ListModifier, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t)&protocol witness table for _FixedSizeLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_FixedSizeLayout>, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t)&protocol witness table for _FixedSizeLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_BlendModeEffect>.ListModifier, (uint64_t)&type metadata for _BlendModeEffect, (uint64_t)&protocol witness table for _BlendModeEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_BlendModeEffect>, (uint64_t)&type metadata for _BlendModeEffect, (uint64_t)&protocol witness table for _BlendModeEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_AspectRatioLayout>.ListModifier, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t)&protocol witness table for _AspectRatioLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_AspectRatioLayout>, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t)&protocol witness table for _AspectRatioLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<OpacityRendererEffect>.ListModifier, (uint64_t)&type metadata for OpacityRendererEffect, (uint64_t)&protocol witness table for OpacityRendererEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<OpacityRendererEffect>, (uint64_t)&type metadata for OpacityRendererEffect, (uint64_t)&protocol witness table for OpacityRendererEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_GeometryGroupEffect>.ListModifier, (uint64_t)&type metadata for _GeometryGroupEffect, (uint64_t)&protocol witness table for _GeometryGroupEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedElements<_GeometryGroupEffect>, (uint64_t)&type metadata for _GeometryGroupEffect, (uint64_t)&protocol witness table for _GeometryGroupEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_SafeAreaRegionsIgnoringLayout>.ListModifier, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t)&protocol witness table for _SafeAreaRegionsIgnoringLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_SafeAreaRegionsIgnoringLayout>, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t)&protocol witness table for _SafeAreaRegionsIgnoringLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<ScrapeableAttachmentViewModifier>.ListModifier, (uint64_t)&type metadata for ScrapeableAttachmentViewModifier, (uint64_t)&protocol witness table for ScrapeableAttachmentViewModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<ScrapeableAttachmentViewModifier>, (uint64_t)&type metadata for ScrapeableAttachmentViewModifier, (uint64_t)&protocol witness table for ScrapeableAttachmentViewModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_ForegroundLayerViewModifier>.ListModifier, (uint64_t)&type metadata for _ForegroundLayerViewModifier, (uint64_t)&protocol witness table for _ForegroundLayerViewModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_ForegroundLayerViewModifier>, (uint64_t)&type metadata for _ForegroundLayerViewModifier, (uint64_t)&protocol witness table for _ForegroundLayerViewModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_CompositingGroupEffect>.ListModifier, (uint64_t)&type metadata for _CompositingGroupEffect, (uint64_t)&protocol witness table for _CompositingGroupEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_CompositingGroupEffect>, (uint64_t)&type metadata for _CompositingGroupEffect, (uint64_t)&protocol witness table for _CompositingGroupEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_BlurEffect>.ListModifier, (uint64_t)&type metadata for _BlurEffect, (uint64_t)&protocol witness table for _BlurEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_BlurEffect>, (uint64_t)&type metadata for _BlurEffect, (uint64_t)&protocol witness table for _BlurEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedViewList<ScrollPhaseStateConfigurationModifier>.ListModifier, (uint64_t)&type metadata for ScrollPhaseStateConfigurationModifier, (uint64_t)&protocol witness table for ScrollPhaseStateConfigurationModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<ScrollPhaseStateConfigurationModifier>, (uint64_t)&type metadata for ScrollPhaseStateConfigurationModifier, (uint64_t)&protocol witness table for ScrollPhaseStateConfigurationModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<ResetScrollInputsModifier>.ListModifier, (uint64_t)&type metadata for ResetScrollInputsModifier, (uint64_t)&protocol witness table for ResetScrollInputsModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<ResetScrollInputsModifier>, (uint64_t)&type metadata for ResetScrollInputsModifier, (uint64_t)&protocol witness table for ResetScrollInputsModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_ColorMatrixEffect>.ListModifier, (uint64_t)&type metadata for _ColorMatrixEffect, (uint64_t)&protocol witness table for _ColorMatrixEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_ColorMatrixEffect>, (uint64_t)&type metadata for _ColorMatrixEffect, (uint64_t)&protocol witness table for _ColorMatrixEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_SafeAreaIgnoringLayout>.ListModifier, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, (uint64_t)&protocol witness table for _SafeAreaIgnoringLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_SafeAreaIgnoringLayout>, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, (uint64_t)&protocol witness table for _SafeAreaIgnoringLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<LayoutPriorityLayout>.ListModifier, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t)&protocol witness table for LayoutPriorityLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<LayoutPriorityLayout>, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t)&protocol witness table for LayoutPriorityLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_FlexFrameLayout>.ListModifier, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t)&protocol witness table for _FlexFrameLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_FlexFrameLayout>, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t)&protocol witness table for _FlexFrameLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_FrameLayout>.ListModifier, (uint64_t)&type metadata for _FrameLayout, (uint64_t)&protocol witness table for _FrameLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_FrameLayout>, (uint64_t)&type metadata for _FrameLayout, (uint64_t)&protocol witness table for _FrameLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_OpacityEffect>.ListModifier, (uint64_t)&type metadata for _OpacityEffect, (uint64_t)&protocol witness table for _OpacityEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_OpacityEffect>, (uint64_t)&type metadata for _OpacityEffect, (uint64_t)&protocol witness table for _OpacityEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_PaddingLayout>.ListModifier, (uint64_t)&type metadata for _PaddingLayout, (uint64_t)&protocol witness table for _PaddingLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_PaddingLayout>, (uint64_t)&type metadata for _PaddingLayout, (uint64_t)&protocol witness table for _PaddingLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_AppearanceActionModifier>.ListModifier, (uint64_t)&type metadata for _AppearanceActionModifier, (uint64_t)&protocol witness table for _AppearanceActionModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_AppearanceActionModifier>, (uint64_t)&type metadata for _AppearanceActionModifier, (uint64_t)&protocol witness table for _AppearanceActionModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_ShadowEffect._Resolved>.ListModifier, (uint64_t)&type metadata for _ShadowEffect._Resolved, (uint64_t)&protocol witness table for _ShadowEffect._Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_ShadowEffect._Resolved>, (uint64_t)&type metadata for _ShadowEffect._Resolved, (uint64_t)&protocol witness table for _ShadowEffect._Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<SpacingLayout>.ListModifier, (uint64_t)&type metadata for SpacingLayout, (uint64_t)&protocol witness table for SpacingLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<SpacingLayout>, (uint64_t)&type metadata for SpacingLayout, (uint64_t)&protocol witness table for SpacingLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<MoveTransition.MoveLayout>.ListModifier, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t)&protocol witness table for MoveTransition.MoveLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<MoveTransition.MoveLayout>, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t)&protocol witness table for MoveTransition.MoveLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<ResetDeltaModifier>.ListModifier, (uint64_t)&type metadata for ResetDeltaModifier, (uint64_t)&protocol witness table for ResetDeltaModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<ResetDeltaModifier>, (uint64_t)&type metadata for ResetDeltaModifier, (uint64_t)&protocol witness table for ResetDeltaModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<GraphicsBlendModeEffect>.ListModifier, (uint64_t)&type metadata for GraphicsBlendModeEffect, (uint64_t)&protocol witness table for GraphicsBlendModeEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<GraphicsBlendModeEffect>, (uint64_t)&type metadata for GraphicsBlendModeEffect, (uint64_t)&protocol witness table for GraphicsBlendModeEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<ViewListArchivedAnimation.Effect>.ListModifier, (uint64_t)&type metadata for ViewListArchivedAnimation.Effect, (uint64_t)&protocol witness table for ViewListArchivedAnimation.Effect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<ViewListArchivedAnimation.Effect>, (uint64_t)&type metadata for ViewListArchivedAnimation.Effect, (uint64_t)&protocol witness table for ViewListArchivedAnimation.Effect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>.ListModifier, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&protocol witness table for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&protocol witness table for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<AutomaticPaddingViewModifier>.ListModifier, (uint64_t)&type metadata for AutomaticPaddingViewModifier, (uint64_t)&protocol witness table for AutomaticPaddingViewModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<AutomaticPaddingViewModifier>, (uint64_t)&type metadata for AutomaticPaddingViewModifier, (uint64_t)&protocol witness table for AutomaticPaddingViewModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<PrivacyRedactionViewModifier>.ListModifier, (uint64_t)&type metadata for PrivacyRedactionViewModifier, (uint64_t)&protocol witness table for PrivacyRedactionViewModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<PrivacyRedactionViewModifier>, (uint64_t)&type metadata for PrivacyRedactionViewModifier, (uint64_t)&protocol witness table for PrivacyRedactionViewModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<IgnoresAutomaticPaddingLayout>.ListModifier, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t)&protocol witness table for IgnoresAutomaticPaddingLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<IgnoresAutomaticPaddingLayout>, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t)&protocol witness table for IgnoresAutomaticPaddingLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<VerticalStackOrientationModifier>.ListModifier, (uint64_t)&type metadata for VerticalStackOrientationModifier, (uint64_t)&protocol witness table for VerticalStackOrientationModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<VerticalStackOrientationModifier>, (uint64_t)&type metadata for VerticalStackOrientationModifier, (uint64_t)&protocol witness table for VerticalStackOrientationModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<PreferTextLayoutManagerInputModifier>.ListModifier, (uint64_t)&type metadata for PreferTextLayoutManagerInputModifier, (uint64_t)&protocol witness table for PreferTextLayoutManagerInputModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<PreferTextLayoutManagerInputModifier>, (uint64_t)&type metadata for PreferTextLayoutManagerInputModifier, (uint64_t)&protocol witness table for PreferTextLayoutManagerInputModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<VariableBlurStyle>.ListModifier, (uint64_t)&type metadata for VariableBlurStyle, (uint64_t)&protocol witness table for VariableBlurStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<VariableBlurStyle>, (uint64_t)&type metadata for VariableBlurStyle, (uint64_t)&protocol witness table for VariableBlurStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<_ForegroundStyleModifier2<AngularGradient, Color>>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_ForegroundStyleModifier2<AngularGradient, Color>>.ListModifier, (uint64_t (*)(uint64_t))type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>, (uint64_t)&protocol witness table for _ForegroundStyleModifier2<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<_ForegroundStyleModifier2<AngularGradient, Color>>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_ForegroundStyleModifier2<AngularGradient, Color>>, (uint64_t (*)(uint64_t))type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>, (uint64_t)&protocol witness table for _ForegroundStyleModifier2<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<GraphicsFilter>.ListModifier, (uint64_t)&type metadata for GraphicsFilter, (uint64_t)&protocol witness table for GraphicsFilter, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<GraphicsFilter>, (uint64_t)&type metadata for GraphicsFilter, (uint64_t)&protocol witness table for GraphicsFilter, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_ContrastEffect>.ListModifier, (uint64_t)&type metadata for _ContrastEffect, (uint64_t)&protocol witness table for _ContrastEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_ContrastEffect>, (uint64_t)&type metadata for _ContrastEffect, (uint64_t)&protocol witness table for _ContrastEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_AlignmentLayout>.ListModifier, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t)&protocol witness table for _AlignmentLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_AlignmentLayout>, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t)&protocol witness table for _AlignmentLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_GrayscaleEffect>.ListModifier, (uint64_t)&type metadata for _GrayscaleEffect, (uint64_t)&protocol witness table for _GrayscaleEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_GrayscaleEffect>, (uint64_t)&type metadata for _GrayscaleEffect, (uint64_t)&protocol witness table for _GrayscaleEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<GraphicsBlendMode>.ListModifier, (uint64_t)&type metadata for GraphicsBlendMode, (uint64_t)&protocol witness table for GraphicsBlendMode, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<GraphicsBlendMode>, (uint64_t)&type metadata for GraphicsBlendMode, (uint64_t)&protocol witness table for GraphicsBlendMode, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_BrightnessEffect>.ListModifier, (uint64_t)&type metadata for _BrightnessEffect, (uint64_t)&protocol witness table for _BrightnessEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_BrightnessEffect>, (uint64_t)&type metadata for _BrightnessEffect, (uint64_t)&protocol witness table for _BrightnessEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_Rotation3DEffect>.ListModifier, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t)&protocol witness table for _Rotation3DEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_Rotation3DEffect>, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t)&protocol witness table for _Rotation3DEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_SaturationEffect>.ListModifier, (uint64_t)&type metadata for _SaturationEffect, (uint64_t)&protocol witness table for _SaturationEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_SaturationEffect>, (uint64_t)&type metadata for _SaturationEffect, (uint64_t)&protocol witness table for _SaturationEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_ColorInvertEffect>.ListModifier, (uint64_t)&type metadata for _ColorInvertEffect, (uint64_t)&protocol witness table for _ColorInvertEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_ColorInvertEffect>, (uint64_t)&type metadata for _ColorInvertEffect, (uint64_t)&protocol witness table for _ColorInvertEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_HueRotationEffect>.ListModifier, (uint64_t)&type metadata for _HueRotationEffect, (uint64_t)&protocol witness table for _HueRotationEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_HueRotationEffect>, (uint64_t)&type metadata for _HueRotationEffect, (uint64_t)&protocol witness table for _HueRotationEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_DrawingGroupEffect>.ListModifier, (uint64_t)&type metadata for _DrawingGroupEffect, (uint64_t)&protocol witness table for _DrawingGroupEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_DrawingGroupEffect>, (uint64_t)&type metadata for _DrawingGroupEffect, (uint64_t)&protocol witness table for _DrawingGroupEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_ShaderFilterEffect>.ListModifier, (uint64_t)&type metadata for _ShaderFilterEffect, (uint64_t)&protocol witness table for _ShaderFilterEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_ShaderFilterEffect>, (uint64_t)&type metadata for _ShaderFilterEffect, (uint64_t)&protocol witness table for _ShaderFilterEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<LuminanceCurveEffect>.ListModifier, (uint64_t)&type metadata for LuminanceCurveEffect, (uint64_t)&protocol witness table for LuminanceCurveEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<LuminanceCurveEffect>, (uint64_t)&type metadata for LuminanceCurveEffect, (uint64_t)&protocol witness table for LuminanceCurveEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_ColorMultiplyEffect._Resolved>.ListModifier, (uint64_t)&type metadata for _ColorMultiplyEffect._Resolved, (uint64_t)&protocol witness table for _ColorMultiplyEffect._Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_ColorMultiplyEffect._Resolved>, (uint64_t)&type metadata for _ColorMultiplyEffect._Resolved, (uint64_t)&protocol witness table for _ColorMultiplyEffect._Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<_ForegroundStyleModifier2<AngularGradient, Color>>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<ReferenceDateModifier>.ListModifier, type metadata accessor for ReferenceDateModifier, (uint64_t)&protocol witness table for ReferenceDateModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<_ForegroundStyleModifier2<AngularGradient, Color>>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<ReferenceDateModifier>, type metadata accessor for ReferenceDateModifier, (uint64_t)&protocol witness table for ReferenceDateModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<HitTestBindingModifier>.ListModifier, (uint64_t)&type metadata for HitTestBindingModifier, (uint64_t)&protocol witness table for HitTestBindingModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<HitTestBindingModifier>, (uint64_t)&type metadata for HitTestBindingModifier, (uint64_t)&protocol witness table for HitTestBindingModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_ColorMonochromeEffect._Resolved>.ListModifier, (uint64_t)&type metadata for _ColorMonochromeEffect._Resolved, (uint64_t)&protocol witness table for _ColorMonochromeEffect._Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_ColorMonochromeEffect._Resolved>, (uint64_t)&type metadata for _ColorMonochromeEffect._Resolved, (uint64_t)&protocol witness table for _ColorMonochromeEffect._Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<ContentTransitionEffect>.ListModifier, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_ContentTransitionGroup>.ListModifier, (uint64_t)&type metadata for _ContentTransitionGroup, (uint64_t)&protocol witness table for _ContentTransitionGroup, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_ContentTransitionGroup>, (uint64_t)&type metadata for _ContentTransitionGroup, (uint64_t)&protocol witness table for _ContentTransitionGroup, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_LuminanceToAlphaEffect>.ListModifier, (uint64_t)&type metadata for _LuminanceToAlphaEffect, (uint64_t)&protocol witness table for _LuminanceToAlphaEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_LuminanceToAlphaEffect>, (uint64_t)&type metadata for _LuminanceToAlphaEffect, (uint64_t)&protocol witness table for _LuminanceToAlphaEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_SafeAreaInsetsModifier>.ListModifier, (uint64_t)&type metadata for _SafeAreaInsetsModifier, (uint64_t)&protocol witness table for _SafeAreaInsetsModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_SafeAreaInsetsModifier>, (uint64_t)&type metadata for _SafeAreaInsetsModifier, (uint64_t)&protocol witness table for _SafeAreaInsetsModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_ExtendedBlendModeEffect>.ListModifier, (uint64_t)&type metadata for _ExtendedBlendModeEffect, (uint64_t)&protocol witness table for _ExtendedBlendModeEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_ExtendedBlendModeEffect>, (uint64_t)&type metadata for _ExtendedBlendModeEffect, (uint64_t)&protocol witness table for _ExtendedBlendModeEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_ForegroundColorModifier>.ListModifier, (uint64_t)&type metadata for _ForegroundColorModifier, (uint64_t)&protocol witness table for _ForegroundColorModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_ForegroundColorModifier>, (uint64_t)&type metadata for _ForegroundColorModifier, (uint64_t)&protocol witness table for _ForegroundColorModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_ContentTransitionModifier>.ListModifier, (uint64_t)&type metadata for _ContentTransitionModifier, (uint64_t)&protocol witness table for _ContentTransitionModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_ContentTransitionModifier>, (uint64_t)&type metadata for _ContentTransitionModifier, (uint64_t)&protocol witness table for _ContentTransitionModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_PremultipliedColorMatrixEffect>.ListModifier, (uint64_t)&type metadata for _PremultipliedColorMatrixEffect, (uint64_t)&protocol witness table for _PremultipliedColorMatrixEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_PremultipliedColorMatrixEffect>, (uint64_t)&type metadata for _PremultipliedColorMatrixEffect, (uint64_t)&protocol witness table for _PremultipliedColorMatrixEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_ForegroundLayerColorMatrixEffect>.ListModifier, (uint64_t)&type metadata for _ForegroundLayerColorMatrixEffect, (uint64_t)&protocol witness table for _ForegroundLayerColorMatrixEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_ForegroundLayerColorMatrixEffect>, (uint64_t)&type metadata for _ForegroundLayerColorMatrixEffect, (uint64_t)&protocol witness table for _ForegroundLayerColorMatrixEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_ForegroundLayerLevelViewModifier>.ListModifier, (uint64_t)&type metadata for _ForegroundLayerLevelViewModifier, (uint64_t)&protocol witness table for _ForegroundLayerLevelViewModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_ForegroundLayerLevelViewModifier>, (uint64_t)&type metadata for _ForegroundLayerLevelViewModifier, (uint64_t)&protocol witness table for _ForegroundLayerLevelViewModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_ForegroundLayerLevelColorMatrixEffect>.ListModifier, (uint64_t)&type metadata for _ForegroundLayerLevelColorMatrixEffect, (uint64_t)&protocol witness table for _ForegroundLayerLevelColorMatrixEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_ForegroundLayerLevelColorMatrixEffect>, (uint64_t)&type metadata for _ForegroundLayerLevelColorMatrixEffect, (uint64_t)&protocol witness table for _ForegroundLayerLevelColorMatrixEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<Shader.ResolvedShader>.ListModifier, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t)&protocol witness table for Shader.ResolvedShader, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<ResetDeltaModifier>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<Shader.ResolvedShader>, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t)&protocol witness table for Shader.ResolvedShader, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<_ForegroundStyleModifier2<AngularGradient, Color>>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>.ListModifier, (uint64_t (*)(uint64_t))type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>, (uint64_t)&protocol witness table for _OverlayPreferenceModifier<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<_ForegroundStyleModifier2<AngularGradient, Color>>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>, (uint64_t (*)(uint64_t))type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>, (uint64_t)&protocol witness table for _OverlayPreferenceModifier<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

{
  uint64_t v2;
  long long v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  long long v11;
  long long v12;
  long long v13;
  void v15[5];
  char v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[40];
  long long v23[2];
  char v24;
  long long v25;
  long long v26;
  long long v27;

  long long v3 = a2[1];
  long long v25 = *a2;
  long long v26 = v3;
  long long v27 = a2[2];
  outlined init with copy of _ViewListOutputs.Views(v2, (uint64_t)v23);
  if (v24)
  {
    int v4 = v23[0];
    uint64_t v5 = *((void *)&v23[0] + 1);
    type metadata accessor for ModifiedViewList<_ForegroundStyleModifier2<AngularGradient, Color>>.ListModifier(0, &lazy cache variable for type metadata for ModifiedViewList<_InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>.ListModifier, (uint64_t (*)(uint64_t))type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>, (uint64_t)&protocol witness table for _InsetViewModifier<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedViewList.ListModifier);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    outlined retain of _GraphInputs((uint64_t)&v25);
    *(void *)(v6 + 24) = AGCreateWeakAttribute();
    long long v7 = v26;
    *(_OWORD *)(v6 + 32) = v25;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 64) = v27;
    LODWORD(v17[0]) = v4;
    *((void *)&v17[0] + 1) = v6;
    BYTE8(v18) = 1;
    uint64_t v8 = v17;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v22);
    outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v17);
    *((void *)&v18 + 1) = AGCreateWeakAttribute();
    long long v19 = v25;
    long long v20 = v26;
    long long v21 = v27;
    type metadata accessor for ModifiedViewList<_ForegroundStyleModifier2<AngularGradient, Color>>.ListModifier(0, &lazy cache variable for type metadata for ModifiedElements<_InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, (uint64_t (*)(uint64_t))type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>, (uint64_t)&protocol witness table for _InsetViewModifier<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedElements);
    v15[3] = v9;
    v15[4] = &protocol witness table for ModifiedElements<A>;
    uint64_t v10 = (_OWORD *)swift_allocObject();
    v15[0] = v10;
    long long v11 = v19;
    v10[3] = v18;
    v10[4] = v11;
    long long v12 = v21;
    _OWORD v10[5] = v20;
    void v10[6] = v12;
    long long v13 = v17[1];
    v10[1] = v17[0];
    v10[2] = v13;
    outlined retain of _GraphInputs((uint64_t)&v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    char v16 = 0;
    uint64_t v8 = v15;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v8, v2);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _AnchorTransformModifier<A, B>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ValueActionModifier2<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _ValueActionModifier2._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t static _ValueActionModifier2._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _ValueActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ValueActionModifier2, a7, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

_OWORD *initializeWithCopy for _BackgroundStyleModifier.BackgroundInfo.Value(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 16;
  uint64_t v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  uint64_t v8 = v7 + 55;
  unint64_t v9 = (unint64_t)a1 + v7 + 55;
  unint64_t v10 = ~v7 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = v9 & v10;
  unint64_t v12 = ((unint64_t)a2 + v8) & v10;
  (*(void (**)(unint64_t, unint64_t))(v5 + 16))(v9 & v10, v12);
  uint64_t v13 = *(void *)(v6 + 48) + 7;
  uint64_t v14 = (_OWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  int v15 = (_OWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  long long v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  return a1;
}

uint64_t partial apply for closure #1 in withTransaction<A>(_:_:)(void *a1)
{
  return closure #1 in withTransaction<A>(_:_:)(*(void *)(v1 + 24), *(void (**)(void *))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16), a1);
}

uint64_t protocol witness for Rule.value.getter in conformance SecondaryChild<A, B>@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return SecondaryChild.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), *(void (**)(void, void, void))(a1 + 32), *(void **)(a1 + 40), a2);
}

uint64_t SecondaryChild.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void, void, void)@<X3>, void *a5@<X4>, char *a6@<X8>)
{
  unsigned int v52 = a4;
  int v53 = a5;
  int v8 = a1;
  uint64_t v51 = a6;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v9 = HIDWORD(a1);
  uint64_t v10 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v48 = (char *)&v46 - v15;
  MEMORY[0x270FA5388](v16);
  int32x4_t v50 = (char *)&v46 - v17;
  type metadata accessor for ObservationTracking._AccessList?();
  uint64_t v19 = v18;
  MEMORY[0x270FA5388](v18);
  long long v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  char v24 = (char *)&v46 - v23;
  uint64_t v49 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v25);
  CGFloat v54 = (char *)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  unint64_t v47 = (char *)&v46 - v28;
  uint64_t v56 = a2;
  uint64_t v57 = a3;
  char v58 = v52;
  int v59 = v53;
  int v60 = v8;
  int v61 = v9;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = CurrentAttribute;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  int v53 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v24, 1, 1, v10);
  MEMORY[0x270FA5388](v30);
  *(&v46 - 4) = a3;
  *(&v46 - 3) = (uint64_t)partial apply for closure #1 in SecondaryChild.value.getter;
  *(&v46 - 2) = (uint64_t)&v55;
  unint64_t v31 = type metadata accessor for Error();
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v24, (uint64_t)partial apply for closure #1 in _withObservation<A>(do:), (uint64_t)(&v46 - 6), v19, v31, a3, MEMORY[0x263F8E4E0], (uint64_t)v62);
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v24, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v21, 1, v10) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v21);
  }
  else
  {
    double v32 = v50;
    unsigned int v52 = *(void (**)(void, void, void))(v11 + 32);
    v52(v50, v21, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v48, v32, v10);
    swift_beginAccess();
    double v33 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v33;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      double v33 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v33 + 2) + 1, 1, (unint64_t)v33);
      static ObservationRegistrar.lastestAccessLists = v33;
    }
    unint64_t v36 = *((void *)v33 + 2);
    unint64_t v35 = *((void *)v33 + 3);
    if (v36 >= v35 >> 1)
    {
      double v33 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, (unint64_t)v33);
      static ObservationRegistrar.lastestAccessLists = v33;
    }
    *((void *)v33 + 2) = v36 + 1;
    v52(&v33[((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v36], v48, v10);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v50, v10);
  }
  CGFloat v37 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
  unsigned int v38 = v47;
  v37(v47, v54, a3);
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v24);
  v37(v51, v38, a3);
  uint64_t v39 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v39)
  {
    unsigned int v42 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v41 = v11 + 16;
    unsigned int v40 = v42;
    char v43 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v41 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 64));
    uint64_t v44 = *(void *)(v41 + 56);
    CGFloat v54 = (char *)static ObservationRegistrar.lastestAccessLists;
    swift_bridgeObjectRetain();
    do
    {
      v40(v13, v43, v10);
      installObservationSlow<A>(accessList:attribute:)((uint64_t)v13, v9, a3);
      (*(void (**)(char *, uint64_t))(v41 - 8))(v13, v10);
      v43 += v44;
      --v39;
    }
    while (v39);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v53;
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in static ModifiedContent<>._makeCustomHoverEffect(effect:inputs:body:)(uint64_t a1)
{
  return closure #1 in static ModifiedContent<>._makeCustomHoverEffect(effect:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t closure #1 in static ModifiedContent<>._makeCustomHoverEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v6 = a1 + *(int *)(v5 + 36);
  v10[2] = v5;
  v10[3] = a3;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, a3, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v8);
  return v10[5];
}

uint64_t protocol witness for Rule.value.getter in conformance AnimatedShape<A>.Init@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return AnimatedShape.Init.value.getter(*v2, *(void *)(a1 + 16), a2);
}

uint64_t AnimatedShape.Init.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, Value, a2);
  uint64_t v9 = (char *)AGGraphGetValue();
  char v10 = *v9;
  char v11 = v9[1];
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v7, a2);
  uint64_t result = type metadata accessor for AnimatedShape();
  uint64_t v13 = (unsigned char *)(a3 + *(int *)(result + 36));
  unsigned char *v13 = v10;
  v13[1] = v11;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AnchorGeometryTransformModifier<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t partial apply for closure #1 in static FillShapeView._makeView(view:inputs:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t (*protocol witness for Rule.value.getter in conformance AnchorGeometryTransform<A>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>))(uint64_t a1)
{
  unint64_t v5 = *v2;
  unint64_t v4 = v2[1];
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = AnchorGeometryTransform.value.getter(v5, v4, v6, v7);
  uint64_t v10 = v9;
  uint64_t result = (uint64_t (*)(uint64_t))swift_allocObject();
  *((void *)result + 2) = v6;
  *((void *)result + 3) = v7;
  *((void *)result + 4) = v8;
  *((void *)result + 5) = v10;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ();
  a2[1] = result;
  return result;
}

uint64_t (*AnchorGeometryTransform.value.getter(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  int v6 = a2;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = HIDWORD(a2);
  type metadata accessor for AnchorGeometryTransformModifier();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v11 = *Value;
  uint64_t v10 = Value[1];
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a4;
  *(void *)(v12 + 32) = v11;
  *(void *)(v12 + 40) = v10;
  *(_DWORD *)(v12 + 48) = v7;
  *(_DWORD *)(v12 + 52) = v6;
  *(_DWORD *)(v12 + 56) = v8;
  swift_retain();
  return partial apply for closure #1 in AnchorGeometryTransform.value.getter;
}

uint64_t initializeWithCopy for ScrollPositionBindingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  unint64_t v5 = (_OWORD *)(a1 + 16);
  int v6 = (_OWORD *)(a2 + 16);
  int v7 = *(unsigned __int8 *)(a2 + 73);
  swift_retain();
  swift_retain();
  if (v7)
  {
    long long v8 = v6[1];
    *unint64_t v5 = *v6;
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = v6[2];
    *(_OWORD *)(a1 + 58) = *(_OWORD *)((char *)v6 + 42);
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v9;
    (**(void (***)(uint64_t, _OWORD *))(v9 - 8))(a1 + 16, v6);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_WORD *)(a1 + 72) = *(unsigned __int8 *)(a2 + 72);
  }
  long long v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v10;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return AGCompareValues();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _BackgroundStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _BlendModeEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for static PropertyKey.defaultValue.getter in conformance ArchivedViewInput(_WORD *a1@<X8>)
{
  *a1 = 512;
}

void *initializeWithTake for _EnvironmentKeyWritingModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _AspectRatioLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for static StatefulRule.initialValue.getter in conformance ScrollStateRequestTransform(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t partial apply for closure #1 in static _LayoutRoot._makeView(root:inputs:body:)(uint64_t a1)
{
  return closure #1 in static _LayoutRoot._makeView(root:inputs:body:)(a1, *(void *)(v1 + 16));
}

uint64_t closure #1 in static _LayoutRoot._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2)
{
  void v7[2] = type metadata accessor for _LayoutRoot();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v7, a2, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

uint64_t initializeWithCopy for _ShadowEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance OpacityRendererEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance FontKey(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  BOOL result = (*a1 | *a2) == 0;
  if (v2) {
    BOOL v4 = *a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 96);
    uint64_t v6 = swift_retain();
    char v7 = v5(v6);
    swift_release();
    return v7 & 1;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for VariableBlurEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _PreferenceWritingModifier<A>(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  return static _PreferenceWritingModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t static _PreferenceWritingModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  int v3 = *a1;
  uint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(a2 + 24);
  int v12 = *(_DWORD *)(a2 + 28);
  int v13 = *(_DWORD *)(a2 + 32);
  int v14 = *(_DWORD *)(a2 + 36);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 48);
  int v17 = *(_DWORD *)(a2 + 64);
  uint64_t v18 = *(void *)(a2 + 72);
  char v19 = *(unsigned char *)(a2 + 80);
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v9 = static _SemanticFeature_v2_3.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    int v10 = dyld_program_sdk_at_least();
  }
  else {
    int v10 = static Semantics.forced >= v9;
  }
  type metadata accessor for _PreferenceWritingModifier();
  if (v10
    && (v8 & 0x400) != 0
    && (type metadata accessor for _PreferenceWritingModifier<PreferredColorSchemeKey>(), swift_dynamicCastMetatype())
    && (LODWORD(v21) = v3,
        type metadata accessor for _GraphValue(),
        type metadata accessor for _GraphValue<_PreferenceWritingModifier<PreferredColorSchemeKey>>(),
        (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v21 = v4;
    int v22 = v5;
    uint64_t v23 = v6;
    int v24 = v7;
    int v25 = v12;
    int v26 = v13;
    int v27 = v14;
    uint64_t v28 = v15;
    uint64_t v29 = v16;
    uint64_t v30 = v8;
    int v31 = v17;
    uint64_t v32 = v18;
    char v33 = v19;
    return static _PreferenceWritingModifier<>.makePreviewColorSchemeList(modifier:inputs:body:)(&v34, &v21, a3);
  }
  else
  {
    int v34 = v3;
    uint64_t v21 = v4;
    int v22 = v5;
    uint64_t v23 = v6;
    int v24 = v7;
    int v25 = v12;
    int v26 = v13;
    int v27 = v14;
    uint64_t v28 = v15;
    uint64_t v29 = v16;
    uint64_t v30 = v8;
    int v31 = v17;
    uint64_t v32 = v18;
    char v33 = v19;
    return static ViewModifier.makeMultiViewList(modifier:inputs:body:)(&v34, (uint64_t)&v21, (void (*)(void))a3);
  }
}

uint64_t protocol witness for static TransactionKey._valuesEqual(_:_:) in conformance AnimationFrameIntervalKey(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t result = *(unsigned __int8 *)(a2 + 8);
  if ((v3 & 1) == 0) {
    return (*(double *)a1 == *(double *)a2) & ~result;
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LineLimitModifier(unsigned int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LineLimitModifier(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t *))specialized static EnvironmentModifier._makeInputs(modifier:inputs:));
}

uint64_t protocol witness for Rule.value.getter in conformance ApplyTransitionModifier<A>.Child@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return ApplyTransitionModifier.Child.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t ApplyTransitionModifier.Child.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  unsigned int v52 = a4;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v7 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  int v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  int32x4_t v50 = (char *)&v45 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v51 = (char *)&v45 - v14;
  type metadata accessor for ObservationTracking._AccessList?();
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v45 - v20;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v49 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v53 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v48 = (char *)&v45 - v25;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  int v57 = a1;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    a3 = CurrentAttribute;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  unint64_t v47 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v21, 1, 1, v7);
  MEMORY[0x270FA5388](v27);
  *(&v45 - 4) = AssociatedTypeWitness;
  *(&v45 - 3) = (uint64_t)partial apply for closure #1 in ApplyTransitionModifier.Child.value.getter;
  *(&v45 - 2) = (uint64_t)&v54;
  unint64_t v28 = type metadata accessor for Error();
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v21, (uint64_t)partial apply for closure #1 in _withObservation<A>(do:), (uint64_t)(&v45 - 6), v16, v28, AssociatedTypeWitness, MEMORY[0x263F8E4E0], (uint64_t)v58);
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v21, (uint64_t)v18);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v18, 1, v7) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v18);
  }
  else
  {
    uint64_t v30 = v51;
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v46(v51, v18, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v50, v30, v7);
    swift_beginAccess();
    int v31 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      int v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    unint64_t v34 = *((void *)v31 + 2);
    unint64_t v33 = *((void *)v31 + 3);
    if (v34 >= v33 >> 1)
    {
      int v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    *((void *)v31 + 2) = v34 + 1;
    v46(&v31[((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v34], v50, v7);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v51, v7);
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  unint64_t v35 = v48;
  unint64_t v36 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
  v36(v48, v53, AssociatedTypeWitness);
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v21);
  v36(v52, v35, AssociatedTypeWitness);
  CGFloat v37 = (char *)p_cache[338];
  uint64_t v38 = *((void *)v37 + 2);
  if (v38)
  {
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    uint64_t v39 = v8 + 16;
    unsigned int v40 = v41;
    unsigned int v42 = &v37[(*(unsigned __int8 *)(v39 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 64)];
    uint64_t v43 = *(void *)(v39 + 56);
    int v53 = v37;
    swift_bridgeObjectRetain();
    do
    {
      v40(v10, v42, v7);
      installObservationSlow<A>(accessList:attribute:)((uint64_t)v10, a3, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v39 - 8))(v10, v7);
      v42 += v43;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v47;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _EnvironmentKeyTransformModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for _EnvironmentKeyTransformModifier<A>);
}

uint64_t partial apply for closure #1 in static StrokeShapeView._makeView(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static FillShapeView._makeView(view:inputs:)(a1, closure #1 in static StrokeShapeView._makeView(view:inputs:));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ScaleEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance TimeZoneKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance LocaleKey(a1, a2, a3, a4, MEMORY[0x263F079C8], &lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance CalendarKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance LocaleKey(a1, a2, a3, a4, MEMORY[0x263F07920], &lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
}

void protocol witness for Rule.value.getter in conformance UnaryChildGeometry<A>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnaryChildGeometry.value.getter(*(void *)(v2 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

void UnaryChildGeometry.value.getter(unint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t Value = (double *)AGGraphGetValue();
  double v9 = *Value;
  uint64_t v10 = *((void *)Value + 1);
  uint64_t v11 = *((void *)Value + 2);
  uint64_t v12 = *((void *)Value + 3);
  uint64_t v13 = (unint64_t *)AGGraphGetValue();
  unint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  swift_retain();
  unint64_t v30 = v14;
  unint64_t v31 = v15;
  uint64_t v16 = type metadata accessor for UnaryLayoutEngine();
  v28[2] = a2;
  v28[3] = a3;
  *(double *)&v28[4] = v9;
  v28[5] = v10;
  v28[6] = v11;
  v28[7] = v12;
  LayoutComputer.withMutableEngine<A, B>(type:do:)(v16, (uint64_t)partial apply for closure #1 in UnaryChildGeometry.value.getter, (uint64_t)v28, v16);
  swift_release();
  uint64_t v17 = v32;
  char v18 = v33;
  uint64_t v19 = v34;
  char v20 = v35;
  uint64_t v21 = v36;
  uint64_t v22 = v37;
  uint64_t v23 = v38;
  uint64_t v24 = v39;
  unsigned int CurrentAttribute = AGGraphGetCurrentAttribute();
  int v26 = *MEMORY[0x263F288F8];
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    unint64_t v27 = HIDWORD(a1);
    if (v26 == HIDWORD(a1)) {
      LODWORD(v27) = *MEMORY[0x263F288F8];
    }
    unint64_t v30 = __PAIR64__(v27, CurrentAttribute);
    LODWORD(v31) = v26;
    uint64_t v32 = v17;
    char v33 = v18;
    uint64_t v34 = v19;
    char v35 = v20;
    uint64_t v36 = v21;
    uint64_t v37 = v22;
    uint64_t v38 = v23;
    uint64_t v39 = v24;
    unsigned __int8 v29 = *(unsigned char *)AGGraphGetValue();
    LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v32, &v29, a4, v9);
  }
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _DefaultForegroundStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _DefaultForegroundStyleModifier<A>);
}

uint64_t protocol witness for Rule.value.getter in conformance DelayedPreferenceChild<A, B>@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return DelayedPreferenceChild.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), *(void (**)(void, void, void))(a1 + 32), *(void **)(a1 + 40), a2);
}

uint64_t DelayedPreferenceChild.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void, void, void)@<X3>, void *a5@<X4>, char *a6@<X8>)
{
  unsigned int v52 = a4;
  int v53 = a5;
  int v8 = a1;
  uint64_t v51 = a6;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v9 = HIDWORD(a1);
  uint64_t v10 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v48 = (char *)&v46 - v15;
  MEMORY[0x270FA5388](v16);
  int32x4_t v50 = (char *)&v46 - v17;
  type metadata accessor for ObservationTracking._AccessList?();
  uint64_t v19 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v46 - v23;
  uint64_t v49 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v25);
  char v54 = (char *)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  unint64_t v47 = (char *)&v46 - v28;
  uint64_t v56 = a2;
  uint64_t v57 = a3;
  char v58 = v52;
  uint64_t v59 = v53;
  int v60 = v8;
  int v61 = v9;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = CurrentAttribute;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  int v53 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v24, 1, 1, v10);
  MEMORY[0x270FA5388](v30);
  *(&v46 - 4) = a3;
  *(&v46 - 3) = (uint64_t)partial apply for closure #1 in DelayedPreferenceChild.value.getter;
  *(&v46 - 2) = (uint64_t)&v55;
  unint64_t v31 = type metadata accessor for Error();
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v24, (uint64_t)partial apply for closure #1 in _withObservation<A>(do:), (uint64_t)(&v46 - 6), v19, v31, a3, MEMORY[0x263F8E4E0], (uint64_t)v62);
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v24, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v21, 1, v10) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v21);
  }
  else
  {
    uint64_t v32 = v50;
    unsigned int v52 = *(void (**)(void, void, void))(v11 + 32);
    v52(v50, v21, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v48, v32, v10);
    swift_beginAccess();
    char v33 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v33;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v33 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v33 + 2) + 1, 1, (unint64_t)v33);
      static ObservationRegistrar.lastestAccessLists = v33;
    }
    unint64_t v36 = *((void *)v33 + 2);
    unint64_t v35 = *((void *)v33 + 3);
    if (v36 >= v35 >> 1)
    {
      char v33 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, (unint64_t)v33);
      static ObservationRegistrar.lastestAccessLists = v33;
    }
    *((void *)v33 + 2) = v36 + 1;
    v52(&v33[((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v36], v48, v10);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v50, v10);
  }
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
  uint64_t v38 = v47;
  v37(v47, v54, a3);
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v24);
  v37(v51, v38, a3);
  uint64_t v39 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v39)
  {
    unsigned int v42 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v41 = v11 + 16;
    unsigned int v40 = v42;
    uint64_t v43 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v41 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 64));
    uint64_t v44 = *(void *)(v41 + 56);
    char v54 = (char *)static ObservationRegistrar.lastestAccessLists;
    swift_bridgeObjectRetain();
    do
    {
      v40(v13, v43, v10);
      installObservationSlow<A>(accessList:attribute:)((uint64_t)v13, v9, a3);
      (*(void (**)(char *, uint64_t))(v41 - 8))(v13, v10);
      v43 += v44;
      --v39;
    }
    while (v39);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v53;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Rule.value.getter in conformance _ForegroundStyleModifier2<A, B>.ForegroundStyleEnvironment@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return _ForegroundStyleModifier2.ForegroundStyleEnvironment.value.getter(*v2, a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t protocol witness for Rule.value.getter in conformance ForegroundEnvironment<A>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return ForegroundEnvironment.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t ForegroundEnvironment.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v16[-2] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MaterialView.ChildEnvironment.environment.getter(&v15);
  memset(v16, 0, sizeof(v16));
  char v17 = 4;
  uint64_t v18 = 0;
  char v19 = 5;
  long long v20 = v15;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v23 = 0;
  char v24 = 1;
  __int16 v25 = 0;
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, Value, a2);
  (*(void (**)(void *, uint64_t, uint64_t))(a3 + 32))(v16, a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  uint64_t v11 = *((void *)&v20 + 1);
  *a4 = v20;
  a4[1] = v11;
  uint64_t v12 = v18;
  char v13 = v19;
  swift_retain();
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v12, v13);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _PreferenceTransformModifier<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _GeometryGroupEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _MatchedGeometryEffect<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _AnchorWritingModifier<A, B>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

void type metadata accessor for TypedElement<EmptyKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI12TypedElement33_D64CE6C88E7413721C59A34C0C940F2CLLCyAA8EmptyKeyACLLVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.ResolvedTextProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultAccentColorProviderKey(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for ResolvedTextProvider.Type?, &lazy cache variable for type metadata for ResolvedTextProvider.Type, &lazy cache variable for type metadata for ResolvedTextProvider);
}

uint64_t protocol witness for Rule.value.getter in conformance _ScrollClipEffect<A>.ChildTransform@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _ScrollClipEffect.ChildTransform.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance EventBindingBridgeFactoryInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(a1, a2, a3, a4, (void (*)(void))type metadata accessor for EventBindingBridgeFactory.Type?);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance GestureContainerFactoryInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(a1, a2, a3, a4, (void (*)(void))type metadata accessor for GestureContainerFactory.Type?);
}

void type metadata accessor for EventBindingBridgeFactory.Type?()
{
  if (!lazy cache variable for type metadata for EventBindingBridgeFactory.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for EventBindingBridgeFactory.Type, &lazy cache variable for type metadata for EventBindingBridgeFactory);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EventBindingBridgeFactory.Type?);
    }
  }
}

void type metadata accessor for GestureContainerFactory.Type?()
{
  if (!lazy cache variable for type metadata for GestureContainerFactory.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for GestureContainerFactory.Type, &lazy cache variable for type metadata for GestureContainerFactory);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GestureContainerFactory.Type?);
    }
  }
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance StyleContextWriter<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for StyleContextWriter<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ValueActionModifier<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _ValueActionModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SimultaneousGestureModifier<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t partial apply for closure #1 in static StrokeBorderShapeView._makeView(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static FillShapeView._makeView(view:inputs:)(a1, closure #1 in static StrokeBorderShapeView._makeView(view:inputs:));
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance TypesettingConfigurationKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypesettingConfiguration();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static TypesettingConfigurationKey.defaultValue);
  return _s7SwiftUI24TypesettingConfigurationVWOcTm_0(v3, a1, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _BindingActionModifier<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _BindingActionModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), a6);
}

uint64_t protocol witness for Rule.value.getter in conformance Canvas<A>.ChildEnvironment@<X0>(uint64_t *a1@<X8>)
{
  return Canvas.ChildEnvironment.value.getter(a1);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SpacingLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance StrokeBorderShapeView<A, B, C>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance <> ModifiedContent<A, B>(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ModifiedContent<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), *(void *)(a6 - 8), *(void *)(a6 - 16));
}

uint64_t partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in closure #2 in static ModifiedContent<>._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:));
}

uint64_t static ModifiedContent<>._makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = *a2;
  int v28 = *((_DWORD *)a2 + 2);
  uint64_t v15 = a2[3];
  uint64_t v16 = a2[4];
  uint64_t v26 = a2[5];
  uint64_t v27 = a2[2];
  uint64_t v24 = a2[7];
  uint64_t v25 = a2[6];
  int v23 = *((_DWORD *)a2 + 16);
  uint64_t v22 = a2[9];
  char v21 = *((unsigned char *)a2 + 80);
  int v14 = *a1;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static ModifiedContent<>._makeView(modifier:inputs:body:), a6, v42);
  uint64_t v17 = v42[0];
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a5;
  *(void *)(v18 + 24) = a6;
  *(void *)(v18 + 32) = a7;
  *(void *)(v18 + 40) = a8;
  *(_DWORD *)(v18 + 48) = v14;
  *(void *)(v18 + 56) = a3;
  *(void *)(v18 + 64) = a4;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  int v41 = v17;
  uint64_t v30 = v29;
  int v31 = v28;
  uint64_t v32 = v27;
  uint64_t v33 = v15;
  uint64_t v34 = v16;
  uint64_t v35 = v26;
  uint64_t v36 = v25;
  uint64_t v37 = v24;
  int v38 = v23;
  uint64_t v39 = v22;
  char v40 = v21;
  (*(void (**)(int *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a8 + 32))(&v41, &v30, partial apply for closure #2 in static ModifiedContent<>._makeViewList(modifier:inputs:body:), v18, a6, a8);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v17, a6, a8);
  return swift_release();
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance _ForegroundStyleModifier2<A, B>(int *a1, uint64_t a2, uint64_t *a3)
{
  return static _ForegroundStyleModifier2._makeViewInputs(modifier:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ForegroundStyleModifier2<A, B>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _ForegroundStyleModifier2<A, B>);
}

uint64_t static _ForegroundStyleModifier2.graphInputsSemantics.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for v4 != -1) {
    uint64_t result = swift_once();
  }
  *(_DWORD *)a1 = static Semantics.v4;
  *(unsigned char *)(a1 + 4) = 0;
  return result;
}

uint64_t static _ForegroundStyleModifier2._makeViewInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  int v11 = *a1;
  uint64_t v12 = *(void *)(a2 + 16);
  swift_beginAccess();
  int v13 = *(_DWORD *)(v12 + 16);
  v21[0] = v11;
  v21[1] = v13;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v23 = type metadata accessor for _ForegroundStyleModifier2.ForegroundStyleEnvironment();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<HoverEffectContext>(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v21, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v22, v23, MEMORY[0x263F8E628], v14, MEMORY[0x263F8E658], v15);
  LODWORD(a3) = v25;
  uint64_t v16 = MEMORY[0x263F8EE78];
  unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for Attribute<HoverEffectContext>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + 16) = a3;
  *(void *)(v18 + 24) = v16;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_WORD *)(v18 + 80) = 256;
  *(void *)(v18 + 88) = v17;
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = v18;
  int v20 = *(_DWORD *)(a2 + 32);
  if ((v20 & 0x20) == 0) {
    *(_DWORD *)(a2 + 32) = v20 | 0x20;
  }
  return result;
}

uint64_t type metadata accessor for _ForegroundStyleModifier2.ForegroundStyleEnvironment()
{
  return swift_getGenericMetadata();
}

uint64_t initializeWithCopy for ContentTransition.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 12);
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(void *)a2, v6 | (v5 << 32), v7);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 13) = v7;
  *(_WORD *)(a1 + 14) = *(_WORD *)(a2 + 14);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _SafeAreaRegionsIgnoringLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance TransactionPropertyKey<A>(uint64_t a1)
{
  return static TransactionPropertyKey.defaultValue.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t static TransactionPropertyKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance StyleContextWriter<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for StyleContextWriter<A>);
}

void Stack.init()(void *a1@<X8>)
{
  *a1 = 0;
}

void protocol witness for static PropertyKey.defaultValue.getter in conformance BodyCountInput<A>(void *a1@<X8>)
{
}

void static BodyCountInput.defaultValue.getter(void *a1@<X8>)
{
  type metadata accessor for (_:)();

  Stack.init()(a1);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ContainerValueWritingModifier<A>(_DWORD *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  return static _ContainerValueWritingModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for Rule.value.getter in conformance _ContainerValueWritingModifier<A>.AddTrait@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return _ContainerValueWritingModifier.AddTrait.value.getter(*v2, *(void *)(a1 + 16), a2);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ScrapeableAttachmentViewModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t partial apply for closure #1 in static Canvas._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static Canvas._makeView(view:inputs:)(a1, *(void *)(v1 + 16));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _BackgroundPreferenceModifier<A, B>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance ContentTransition.State(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x8000000000;
  *(unsigned char *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(void *)(a1 + 13) = 0;
  *(void *)(a1 + 20) = 0;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance CustomModifier<A, B>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t partial apply for closure #1 in static CustomModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static CustomModifier._makeView(modifier:inputs:body:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

{
  uint64_t v1;

  return closure #1 in static CustomModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

{
  uint64_t *v1;

  return closure #1 in closure #3 in static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t (*)(void, void *))type metadata accessor for CustomModifier, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

__n128 __swift_memcpy80_4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t closure #1 in static CustomModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8[2] = type metadata accessor for CustomModifier();
  v8[3] = a3;
  uint64_t v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v8, a3, MEMORY[0x263F8E628], v5, MEMORY[0x263F8E658], v6);
  return v8[5];
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _AnimationModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  return static _AnimationModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), a6);
}

uint64_t static _AnimationModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  int v22 = *a1;
  uint64_t v6 = *(void *)a2;
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  unsigned int v10 = *(_DWORD *)(a2 + 24);
  unsigned int v9 = *(_DWORD *)(a2 + 28);
  unsigned int v12 = *(_DWORD *)(a2 + 32);
  unsigned int v11 = *(_DWORD *)(a2 + 36);
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  long long v19 = *(_OWORD *)(a2 + 56);
  uint64_t v20 = *(void *)(a2 + 72);
  int v21 = *(_DWORD *)(a2 + 80);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v15 = specialized find<A>(_:key:)(v6);
  if (v15)
  {
    char v16 = *(unsigned char *)(v15 + 72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    if (v16)
    {
      LODWORD(v27) = v22;
      uint64_t v36 = v6;
      int v37 = v7;
      uint64_t v38 = v8;
      *(void *)&long long v39 = __PAIR64__(v9, v10);
      *((void *)&v39 + 1) = __PAIR64__(v11, v12);
      uint64_t v40 = v14;
      uint64_t v41 = v13;
      long long v42 = v19;
      uint64_t v43 = v20;
      int v44 = v21;
      return static _AnimationModifier.makeArchivedView(modifier:inputs:body:)((uint64_t)&v36, (uint64_t (*)(void, _OWORD *))a3, a4, a5, a6);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  uint64_t v36 = v6;
  int v37 = v7;
  uint64_t v38 = v8;
  *(void *)&long long v39 = __PAIR64__(v9, v10);
  *((void *)&v39 + 1) = __PAIR64__(v11, v12);
  uint64_t v40 = v14;
  uint64_t v41 = v13;
  long long v42 = v19;
  uint64_t v43 = v20;
  int v44 = v21;
  LODWORD(v27) = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _AnimationModifier._makeInputs(modifier:inputs:)((int *)&v27, (uint64_t)&v36, a5);
  uint64_t v27 = v36;
  int v28 = v37;
  uint64_t v29 = v38;
  long long v30 = v39;
  uint64_t v31 = v40;
  uint64_t v32 = v41;
  long long v33 = v42;
  uint64_t v34 = v43;
  int v35 = v44;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v18 = swift_bridgeObjectRetain();
  a3(v18, &v27);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ForegroundLayerViewModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ValueTransactionModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for _ValueTransactionModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _TransactionModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  void v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t partial apply for closure #1 in static RendererVisualEffect._makeVisualEffect(effect:inputs:body:)(uint64_t a1)
{
  return closure #1 in static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(void))type metadata accessor for RendererVisualEffect, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:));
}

uint64_t closure #1 in static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  v11[2] = a4(0);
  v11[3] = a2;
  uint64_t v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a5, (uint64_t)v11, a2, MEMORY[0x263F8E628], v8, MEMORY[0x263F8E658], v9);
  return v11[5];
}

uint64_t partial apply for closure #1 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)(uint64_t a1)
{
  return closure #1 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t closure #1 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v7 = type metadata accessor for CombinedVisualEffect();
  uint64_t v8 = a1 + *(int *)(v7 + 52);
  v12[2] = v7;
  v12[3] = a3;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, a3, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v10);
  return v13;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _PushPopTransactionModifier<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance VisualEffectModifier<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static VisualEffectModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

void type metadata accessor for (key: ObjectIdentifier, value: AnyTrackedValue)()
{
  if (!lazy cache variable for type metadata for (key: ObjectIdentifier, value: AnyTrackedValue))
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: ObjectIdentifier, value: AnyTrackedValue));
    }
  }
}

unint64_t lazy protocol witness table accessor for type BodyInputElement and conformance BodyInputElement()
{
  unint64_t result = lazy protocol witness table cache variable for type BodyInputElement and conformance BodyInputElement;
  if (!lazy protocol witness table cache variable for type BodyInputElement and conformance BodyInputElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BodyInputElement and conformance BodyInputElement);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _CompositingGroupEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OverlayPreferenceModifier<A, B>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t static View<>._makeViewList(view:inputs:)(int *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  int v8 = *(_DWORD *)(a2 + 24);
  int v9 = *(_DWORD *)(a2 + 28);
  int v11 = *(_DWORD *)(a2 + 32);
  int v10 = *(_DWORD *)(a2 + 36);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v18 = *(void *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 48);
  int v17 = *(_DWORD *)(a2 + 64);
  uint64_t v16 = *(void *)(a2 + 72);
  char v15 = *(unsigned char *)(a2 + 80);
  int v33 = *a1;
  uint64_t v20 = v5;
  int v21 = v6;
  uint64_t v22 = v7;
  int v23 = v8;
  int v24 = v9;
  int v25 = v11;
  int v26 = v10;
  uint64_t v27 = v12;
  uint64_t v13 = static Animatable.makeAnimatable(value:inputs:)((unsigned int *)&v33, &v20, a3, a4);
  _GraphValue.init(_:)(v13, &v33);
  uint64_t v20 = v5;
  int v21 = v6;
  uint64_t v22 = v7;
  int v23 = v8;
  int v24 = v9;
  int v25 = v11;
  int v26 = v10;
  uint64_t v27 = v12;
  uint64_t v28 = v19;
  uint64_t v29 = v18;
  int v30 = v17;
  uint64_t v31 = v16;
  char v32 = v15;
  return static View.makeViewList(view:inputs:)(&v33, &v20, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance RoundedRectangle@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  void v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t partial apply for closure #1 in CanvasDisplayList.updateValue()()
{
  uint64_t v1 = *(unsigned char **)(v0 + 40);
  uint64_t result = AGGraphAnyInputsChanged();
  if (result) {
    *uint64_t v1 = 1;
  }
  return result;
}

uint64_t partial apply for closure #1 in makeMask #1 <A>(inputs:) in static _MaskEffect._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in makeMask #1 <A>(inputs:) in static _MaskEffect._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _MaskEffect<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ScrollPhaseStateConfigurationModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetScrollInputsModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance ScrollPrefetchState@<X0>(_DWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static ScrollPrefetchState.defaultValue;
  return result;
}

uint64_t static ViewModifier<>._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v9 = *(void *)a2;
  int v10 = *(_DWORD *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  int v12 = *(_DWORD *)(a2 + 24);
  int v13 = *(_DWORD *)(a2 + 28);
  int v14 = *(_DWORD *)(a2 + 32);
  int v15 = *(_DWORD *)(a2 + 36);
  int v20 = *(_DWORD *)(a2 + 80);
  int v35 = *a1;
  uint64_t v24 = v9;
  int v25 = v10;
  uint64_t v26 = v11;
  int v27 = v12;
  int v28 = v13;
  int v29 = v14;
  int v30 = v15;
  long long v19 = *(_OWORD *)(a2 + 40);
  *(void *)&long long v31 = *(void *)(a2 + 40);
  uint64_t v16 = static Animatable.makeAnimatable(value:inputs:)((unsigned int *)&v35, &v24, a5, a6);
  _GraphValue.init(_:)(v16, &v35);
  uint64_t v24 = v9;
  int v25 = v10;
  uint64_t v26 = v11;
  int v27 = v12;
  int v28 = v13;
  int v29 = v14;
  int v30 = v15;
  long long v17 = *(_OWORD *)(a2 + 56);
  long long v31 = v19;
  long long v32 = v17;
  uint64_t v33 = *(void *)(a2 + 72);
  int v34 = v20;
  return static ViewModifier.makeView(modifier:inputs:body:)(&v35, &v24, a3, a4, a5, a7);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _BlurEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance HoverEffectContextKey(uint64_t a1, uint64_t a2)
{
  return specialized static EnvironmentPropertyKey.valuesEqual(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int16 *)(a1 + 24) | (*(unsigned __int8 *)(a1 + 26) << 16), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned __int16 *)(a2 + 24) | (*(unsigned __int8 *)(a2 + 26) << 16));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _MaskAlignmentEffect<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t partial apply for closure #1 in makeMask #1 <A>(inputs:) in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in makeMask #1 <A>(inputs:) in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #2 in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #2 in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)(a1);
}

uint64_t closure #2 in static _MaskAlignmentEffect._makeView(modifier:inputs:body:)(uint64_t a1)
{
  v5[2] = type metadata accessor for _MaskAlignmentEffect();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_1, (uint64_t)v5, (uint64_t)&type metadata for Alignment, MEMORY[0x263F8E628], v2, MEMORY[0x263F8E658], v3);
  return v5[5];
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ScrollClipEffect<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance RoundedRectangle@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  void v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _TraitWritingModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static _TraitWritingModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(ValueMetadata **)(a4 + 16), a5);
}

uint64_t static _TraitWritingModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, ValueMetadata *a4@<X4>, uint64_t a5@<X8>)
{
  long long v7 = *(_OWORD *)(a2 + 48);
  v15[2] = *(_OWORD *)(a2 + 32);
  v15[3] = v7;
  v15[4] = *(_OWORD *)(a2 + 64);
  int v16 = *(_DWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v8;
  if (a4 == &type metadata for LayoutPriorityTraitKey)
  {
    type metadata accessor for _TraitWritingModifier();
    uint64_t v12 = Attribute.unsafeBitCast<A>(to:)();
    return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v12, (uint64_t)v15, a3, a5);
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 48);
    v13[2] = *(_OWORD *)(a2 + 32);
    v13[3] = v9;
    v13[4] = *(_OWORD *)(a2 + 64);
    int v14 = *(_DWORD *)(a2 + 80);
    long long v10 = *(_OWORD *)(a2 + 16);
    v13[0] = *(_OWORD *)a2;
    v13[1] = v10;
    return ((uint64_t (*)(uint64_t, _OWORD *))a3)(a1, v13);
  }
}

uint64_t partial apply for closure #3 in static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(uint64_t a1)
{
  return closure #2 in static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t closure #2 in static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v9 = type metadata accessor for _BackgroundShapeModifier();
  uint64_t v10 = a1 + *(int *)(v9 + 52);
  v14[2] = v9;
  v14[3] = a3;
  uint64_t v11 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v10, a6, (uint64_t)v14, a3, MEMORY[0x263F8E628], v11, MEMORY[0x263F8E658], v12);
  return v15;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ColorMatrixEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _RotationEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _ViewList_View@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<BackdropView>>(0, (unint64_t *)&lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ViewList_View>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ViewList_View>, (uint64_t)&type metadata for _ViewList_View, (uint64_t)&protocol witness table for _ViewList_View);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(void *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(void *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(void *)(v14 + 64) = v9;
  uint64_t v22 = v2;
  int v23 = v3;
  uint64_t v24 = v4;
  int v25 = v5;
  int v26 = v6;
  int v27 = v7;
  int v28 = v8;
  uint64_t v29 = v9;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  int v32 = v18;
  uint64_t v33 = v17;
  char v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

double protocol witness for static View._makeView(view:inputs:) in conformance Rectangle@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  void v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance IDView<A, B>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, double *a4@<X8>)
{
  return static IDView._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _InsettableBackgroundShapeModifier<A, B>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ScrollPositionBindingModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  uint64_t v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t *, long long *))specialized static ScrollPositionBindingModifier._makeInputs(modifier:inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ValueTransactionModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for _ValueTransactionModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ForegroundStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _ForegroundStyleModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _SafeAreaIgnoringLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v4@<X0>(unsigned char *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v4.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2@<X0>(void *a1@<X2>, unsigned int *a2@<X3>, unsigned char *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  unsigned int v5 = *a2;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    uint64_t result = dyld_program_sdk_at_least();
  }
  else {
    uint64_t result = static Semantics.forced >= v5;
  }
  *a3 = result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _BackdropEffect<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t partial apply for closure #1 in makeBg #1 <A>(inputs:) in static _BackdropEffect._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in makeBg #1 <A>(inputs:) in static _BackdropEffect._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16));
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, void (*a5)(uint64_t *, long long *))
{
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)int v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = v8;
  int v24 = *(_DWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v21 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v22 = v9;
  *(_OWORD *)&unsigned char v22[16] = v7;
  LODWORD(v12) = a1;
  outlined retain of _ViewInputs(a2);
  a5(&v12, &v21);
  uint64_t v12 = v21;
  int v13 = DWORD2(v21);
  uint64_t v14 = *(void *)v22;
  long long v15 = *(_OWORD *)&v22[8];
  uint64_t v16 = *(void *)&v22[24];
  uint64_t v17 = *(void *)v23;
  long long v18 = *(_OWORD *)&v23[8];
  uint64_t v19 = *(void *)&v23[24];
  int v20 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_bridgeObjectRetain();
  a3(v10, &v12);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

ValueMetadata *type metadata accessor for Font.Leading()
{
  return &type metadata for Font.Leading;
}

uint64_t storeEnumTagSinglePayload for _ForegroundColorModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t OptionalAnchorBox.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for UserInterfaceSizeClass()
{
  return &type metadata for UserInterfaceSizeClass;
}

ValueMetadata *type metadata accessor for Color()
{
  return &type metadata for Color;
}

uint64_t type metadata completion function for _OverlayModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

{
  return type metadata completion function for _OverlayModifier();
}

uint64_t key path getter for EnvironmentValues.isEnabled : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.isEnabled : EnvironmentValues(a1, a2);
}

{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  int v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    int v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    unsigned int v5 = swift_retain_n();
    int v4 = specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)&v7, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
  }
  uint64_t result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance _ShapeStyle_Name(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

double ViewOrigin.animatableData.getter()
{
  return *(double *)v0;
}

uint64_t initializeBufferWithCopyOfBuffer for DisplayList.OpacityAnimation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  return a1;
}

ValueMetadata *type metadata accessor for Spacer()
{
  return &type metadata for Spacer;
}

ValueMetadata *type metadata accessor for ColorSchemeContrast()
{
  return &type metadata for ColorSchemeContrast;
}

uint64_t destroy for DynamicLayoutComputer()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata completion function for CodableAttributedString.Range.EncodingWrapper()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RoundedRectangle()
{
  return &type metadata for RoundedRectangle;
}

Swift::Bool __swiftcall Axis.Set.contains(_:)(SwiftUI::Axis a1)
{
  return (v1 >> (a1 & 1)) & 1;
}

uint64_t GraphHost.addPreference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GraphHost.addPreference<A>(_:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))closure #1 in GraphHost.addPreference<A>(_:));
}

uint64_t *AccessibilityNullableOptionSet<>.init(adding:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *result;
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollPosition(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t Axis.rawValue.getter(char a1)
{
  return a1 & 1;
}

void variable initialization expression of TypesettingConfiguration.languageAwareLineHeightRatio(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t protocol witness for static AttributedStringKey.invalidationConditions.getter in conformance AttributeScopes.SwiftUIAttributes.FontAttribute()
{
  return MEMORY[0x270EEF150]();
}

uint64_t protocol witness for static AttributedStringKey.inheritedByAddedText.getter in conformance AttributeScopes.SwiftUIAttributes.FontAttribute()
{
  return MEMORY[0x270EEF140]();
}

uint64_t protocol witness for static AttributedStringKey.runBoundaries.getter in conformance AttributeScopes.SwiftUIAttributes.FontAttribute()
{
  return MEMORY[0x270EEF138]();
}

uint64_t static Edge.Set.all.getter()
{
  return 15;
}

uint64_t getEnumTagSinglePayload for ScrollGeometry(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

ValueMetadata *type metadata accessor for EmptyView()
{
  return &type metadata for EmptyView;
}

ValueMetadata *type metadata accessor for Image()
{
  return &type metadata for Image;
}

void destroy for DisplayList.ViewUpdater.ViewCache.PendingAsyncValue(uint64_t a1)
{
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 16);
}

uint64_t type metadata accessor for Environment()
{
  return __swift_instantiateGenericMetadata();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance EventID(void *a1, void *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

ValueMetadata *type metadata accessor for Text.Measurements()
{
  return &type metadata for Text.Measurements;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DisplayList.Version()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

unint64_t _ViewOutputs.layoutComputer.getter()
{
  LODWORD(v1) = *(_DWORD *)(v0 + 12);
  BOOL v2 = v1 == *MEMORY[0x263F288F8];
  if (v1 == *MEMORY[0x263F288F8]) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = v1;
  }
  return v1 | ((unint64_t)v2 << 32);
}

uint64_t static Update.lock()(uint64_t (*a1)(uint64_t))
{
  uint64_t v1 = a1;
  if (one-time initialization token for _lock != -1)
  {
    swift_once();
    uint64_t v1 = a1;
  }
  uint64_t v2 = static Update._lock;

  return v1(v2);
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance BitVector64(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 & *v2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

uint64_t assignWithCopy for DisplayList(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  return a1;
}

uint64_t LayoutComputer.sizeThatFits(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  char v5 = *((unsigned char *)a1 + 24);
  uint64_t v6 = *v1;
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    uint64_t v8 = v2;
    char v9 = v3;
    uint64_t v10 = v4;
    char v11 = v5;
    return (*(uint64_t (**)(uint64_t *))(*(void *)v6 + 120))(&v8);
  }
  return result;
}

uint64_t specialized StackLayout.UnmanagedImplementation.sizeChildrenGenerallyWithConcreteMajorProposal(in:minorProposalForChild:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9 = *(unsigned __int8 *)(a5 + 17);
  if (*(unsigned char *)(a5 + 17)) {
    char v10 = a4;
  }
  else {
    char v10 = a2;
  }
  if ((v10 & 1) == 0)
  {
    uint64_t v11 = a7;
    uint64_t v13 = a5;
    double v16 = *(double *)(a5 + 24);
    LOBYTE(v81) = a2 & 1;
    char v87 = a4 & 1;
    uint64_t result = StackLayout.UnmanagedImplementation.prioritize(_:proposedSize:)(a6, a7, a1, a2 & 1, a3, a4 & 1, a5, a6, a7);
    if (a6) {
      uint64_t v18 = a6;
    }
    else {
      uint64_t v18 = -8;
    }
    if ((v11 & 0x8000000000000000) == 0)
    {
      if (!v11) {
        return result;
      }
      uint64_t v19 = 0;
      int v20 = (void *)(v18 + 48);
      if (v9) {
        double v21 = *(double *)&a3;
      }
      else {
        double v21 = *(double *)&a1;
      }
      double v22 = v21 - v16;
      int v77 = *MEMORY[0x263F288F8];
      uint64_t v74 = v20;
      uint64_t v75 = a6;
      uint64_t v80 = v13;
      uint64_t v76 = v11;
      while (v19 < v11)
      {
        if ((unsigned __int128)(v19 * (__int128)120) >> 64 != (120 * v19) >> 63) {
          goto LABEL_146;
        }
        uint64_t v23 = v20[15 * v19];
        if (v19 < 0) {
          goto LABEL_147;
        }
        uint64_t v24 = v11;
        if (v19 + 1 != v11)
        {
          uint64_t v24 = v19 + 1;
          while (v24 < v11)
          {
            if ((unsigned __int128)(v24 * (__int128)120) >> 64 != (120 * v24) >> 63) {
              goto LABEL_131;
            }
            if (*(double *)(a6 + 120 * v20[15 * v24]) != *(double *)(a6 + 120 * v23)) {
              goto LABEL_25;
            }
            if (v11 == ++v24)
            {
              uint64_t v24 = v11;
              goto LABEL_25;
            }
          }
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          break;
        }
LABEL_25:
        if (v24 < v19) {
          goto LABEL_144;
        }
        if (v24 > v11) {
          goto LABEL_148;
        }
        double v25 = 0.0;
        if (v23 == *v20)
        {
          if (v24 != v11)
          {
            uint64_t v26 = v24;
            while (v26 < v11)
            {
              if ((unsigned __int128)(v26 * (__int128)120) >> 64 != (120 * v26) >> 63) {
                goto LABEL_134;
              }
              if (v24 < 0) {
                goto LABEL_136;
              }
              uint64_t v27 = a6 + 120 * v20[15 * v26];
              if (*(unsigned char *)(v27 + 16)) {
                goto LABEL_150;
              }
              ++v26;
              double v25 = v25 + *(double *)(v27 + 8);
              if (v11 == v26) {
                goto LABEL_35;
              }
            }
            goto LABEL_132;
          }
LABEL_35:
          double v22 = v22 - v25;
          if (v19 != v24) {
            goto LABEL_45;
          }
        }
        else
        {
          if (v19 != v24)
          {
            uint64_t v28 = v19;
            while (v28 < v24)
            {
              if ((unsigned __int128)(v28 * (__int128)120) >> 64 != (120 * v28) >> 63) {
                goto LABEL_135;
              }
              if (v19 < 0) {
                goto LABEL_137;
              }
              uint64_t v29 = a6 + 120 * v20[15 * v28];
              if (*(unsigned char *)(v29 + 16)) {
                goto LABEL_151;
              }
              ++v28;
              double v25 = v25 + *(double *)(v29 + 8);
              if (v24 == v28) {
                goto LABEL_44;
              }
            }
            goto LABEL_133;
          }
LABEL_44:
          double v22 = v22 + v25;
          if (v19 != v24)
          {
LABEL_45:
            if (v24 <= v19) {
              uint64_t v30 = v19;
            }
            else {
              uint64_t v30 = v24;
            }
            uint64_t v79 = v30;
            while (v79 != v19)
            {
              uint64_t v40 = 15 * v19;
              if ((unsigned __int128)(v19 * (__int128)120) >> 64 != (120 * v19) >> 63) {
                goto LABEL_126;
              }
              uint64_t v41 = v19 + 1;
              if ((v19 | v24 | (v19 + 1)) < 0) {
                goto LABEL_127;
              }
              uint64_t v42 = v24 - v41;
              if (__OFSUB__(v24, v41)) {
                goto LABEL_128;
              }
              BOOL v43 = __OFADD__(v42, 1);
              uint64_t v44 = v42 + 1;
              if (v43) {
                goto LABEL_129;
              }
              unint64_t v45 = v20[v40];
              double v46 = v22 / (double)v44;
              if (v46 <= 0.0) {
                double v46 = 0.0;
              }
              if (*(unsigned char *)(v13 + 17) == 1) {
                double v47 = *(double *)&a8;
              }
              else {
                double v47 = v46;
              }
              if (*(unsigned char *)(v13 + 17) == 1) {
                int v48 = a9 & 1;
              }
              else {
                int v48 = 0;
              }
              if (*(unsigned char *)(v13 + 17) == 1) {
                double v49 = v46;
              }
              else {
                double v49 = *(double *)&a8;
              }
              if (*(unsigned char *)(v13 + 17) == 1) {
                int v50 = 0;
              }
              else {
                int v50 = a9 & 1;
              }
              uint64_t v51 = *(void *)(v13 + 88);
              if (*(unsigned char *)(v13 + 96))
              {
                if ((v45 & 0x8000000000000000) != 0) {
                  goto LABEL_138;
                }
                if (v45 >= *(void *)(v51 + 16)) {
                  goto LABEL_140;
                }
                uint64_t v52 = v51 + 12 * v45;
              }
              else
              {
                if ((v45 & 0x8000000000000000) != 0) {
                  goto LABEL_139;
                }
                if (v45 >= *(void *)(v51 + 16)) {
                  goto LABEL_141;
                }
                uint64_t v52 = v51 + 8 * v45;
              }
              if (*(_DWORD *)(v52 + 32) == v77)
              {
                Inputuint64_t Value = (double *)&static LayoutComputer.defaultValue;
                if (one-time initialization token for defaultValue != -1)
                {
                  swift_once();
                  Inputuint64_t Value = (double *)&static LayoutComputer.defaultValue;
                }
              }
              else
              {
                Inputuint64_t Value = (double *)AGGraphGetInputValue();
              }
              double v55 = *InputValue;
              char v54 = *((void **)InputValue + 1);
              uint64_t v56 = one-time initialization token for lockAssertionsAreEnabled;
              swift_retain();
              if (v56 != -1) {
                swift_once();
              }
              if (lockAssertionsAreEnabled)
              {
                if (one-time initialization token for _lock != -1) {
                  swift_once();
                }
                if (!_MovableLockIsOwner(static Update._lock)) {
                  goto LABEL_153;
                }
              }
              double v81 = v47;
              LOBYTE(v82) = v48;
              double v83 = v49;
              LOBYTE(v84) = v50;
              double v57 = (*(double (**)(double *))(**(void **)&v55 + 120))(&v81);
              double v59 = v58;
              if (v48) {
                double v60 = NAN;
              }
              else {
                double v60 = v47;
              }
              if (v50) {
                double v61 = NAN;
              }
              else {
                double v61 = v49;
              }
              unint64_t v62 = *(void *)v80;
              if (lockAssertionsAreEnabled)
              {
                uint64_t v63 = one-time initialization token for _lock;
                swift_retain();
                double v64 = v54;
                if (v63 != -1) {
                  swift_once();
                }
                if (!_MovableLockIsOwner(static Update._lock)) {
                  goto LABEL_153;
                }
              }
              else
              {
                swift_retain();
                double v64 = v54;
              }
              double v81 = v57;
              double v82 = v59;
              double v83 = v60;
              double v84 = v61;
              *(double *)&uint64_t v65 = COERCE_DOUBLE((*(uint64_t (**)(unint64_t, double *))(**(void **)&v55 + 144))(v62, &v81));
              char v67 = v66;
              swift_release();
              if (v67)
              {
                if (one-time initialization token for _typeCache != -1) {
                  swift_once();
                }
                unsigned __int16 v68 = static AlignmentKey._typeCache;
                unsigned __int8 v69 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
                swift_retain();
                os_unfair_lock_lock(v69);
                uint64_t v70 = v68[4];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                os_unfair_lock_unlock(v69);
                swift_release();
                if (v62 < 2) {
                  goto LABEL_142;
                }
                if (v62 >> 1 > *(void *)(v70 + 16)) {
                  goto LABEL_143;
                }
                uint64_t v71 = v70 + 16 * ((v62 >> 1) - 1);
                uint64_t v72 = *(void *)(v71 + 32);
                uint64_t v73 = *(void *)(v71 + 40);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                double v81 = v55;
                double v82 = *(double *)&v54;
                double v64 = v54;
                double v83 = v57;
                double v84 = v59;
                double v85 = v60;
                double v86 = v61;
                (*(void (**)(double *, uint64_t, uint64_t))(v73 + 8))(&v81, v72, v73);
              }
              else
              {
                double v31 = *(double *)&v65;
              }
              double v32 = INFINITY;
              if ((*(void *)&v31 & 0xFFFFFFFFFFFFFLL) == 0) {
                double v32 = v31;
              }
              if ((~*(void *)&v31 & 0x7FF0000000000000) == 0) {
                double v31 = v32;
              }
              double v33 = -v31;
              uint64_t v13 = v80;
              if (*(unsigned char *)(v80 + 17)) {
                double v34 = v33;
              }
              else {
                double v34 = 0.0;
              }
              if (*(unsigned char *)(v80 + 17)) {
                double v35 = 0.0;
              }
              else {
                double v35 = v33;
              }
              a6 = v75;
              uint64_t v36 = v75 + 120 * v45;
              uint64_t result = swift_release();
              *(double *)(v36 + 56) = v34;
              *(double *)(v36 + 64) = v35;
              *(double *)(v36 + 72) = v55;
              *(void *)(v36 + 80) = v64;
              *(double *)(v36 + 88) = v57;
              *(double *)(v36 + 96) = v59;
              *(double *)(v36 + 104) = v60;
              *(double *)(v36 + 112) = v61;
              if (*(unsigned char *)(v80 + 17)) {
                double v37 = v59;
              }
              else {
                double v37 = v57;
              }
              double v38 = v22 - v37;
              if ((*(void *)&v38 & 0xFFFFFFFFFFFFFLL) != 0) {
                double v39 = v22;
              }
              else {
                double v39 = v38;
              }
              if ((~*(void *)&v38 & 0x7FF0000000000000) != 0) {
                double v22 = v38;
              }
              else {
                double v22 = v39;
              }
              uint64_t v19 = v41;
              uint64_t v11 = v76;
              int v20 = v74;
              if (v24 == v41) {
                goto LABEL_14;
              }
            }
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
            goto LABEL_130;
          }
        }
LABEL_14:
        uint64_t v19 = v24;
        if (v24 == v11) {
          return result;
        }
      }
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
    }
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
  }
  __break(1u);
LABEL_153:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t StackLayout.UnmanagedImplementation.explicitAlignment(_:at:)(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v9 = a2[1];
  long long v44 = *a2;
  long long v45 = v9;
  uint64_t v10 = StackLayout.UnmanagedImplementation.proposalWhenPlacing(in:)(&v44, a3);
  LOBYTE(v44) = v11 & 1;
  StackLayout.UnmanagedImplementation.placeChildren(in:)(v10, v11 & 1, v13, v12 & 1, a3, a4, a5);
  uint64_t v42 = 0;
  char v43 = 1;
  if (!a4 || !a5) {
    return 0;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 120 * a5;
  unint64_t v41 = a1 >> 1;
  uint64_t v40 = (a1 >> 1) - 1;
  double v16 = (double *)(a4 + 112);
  p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  uint64_t v18 = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  while (1)
  {
    double v19 = *(v16 - 7);
    double v20 = *(v16 - 6);
    uint64_t v21 = *((void *)v16 - 5);
    uint64_t v22 = *((void *)v16 - 3);
    uint64_t v23 = *((void *)v16 - 2);
    uint64_t v24 = *((void *)v16 - 1);
    double v25 = *v16;
    uint64_t v26 = p_cache[508];
    swift_retain();
    if (v26 != (void *)-1) {
      swift_once();
    }
    if (*((unsigned char *)v18 + 2984) == 1)
    {
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (!_MovableLockIsOwner(static Update._lock)) {
        break;
      }
    }
    *(void *)&long long v44 = v22;
    *((void *)&v44 + 1) = v23;
    *(void *)&long long v45 = v24;
    *((double *)&v45 + 1) = v25;
    *(double *)&uint64_t v27 = COERCE_DOUBLE((*(uint64_t (**)(unint64_t, long long *))(*(void *)v21 + 144))(a1, &v44));
    if (v28)
    {
      swift_release();
    }
    else
    {
      double v29 = *(double *)&v27;
      if (a1) {
        double v19 = v20;
      }
      unint64_t v30 = a1;
      if (one-time initialization token for _typeCache != -1) {
        swift_once();
      }
      double v31 = static AlignmentKey._typeCache;
      double v32 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
      swift_retain();
      os_unfair_lock_lock(v32);
      uint64_t v33 = v31[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_unfair_lock_unlock(v32);
      swift_release();
      if (v30 < 2)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        break;
      }
      if (v41 > *(void *)(v33 + 16)) {
        goto LABEL_24;
      }
      a1 = v30;
      double v34 = v19 + v29;
      uint64_t v35 = v33 + 16 * v40;
      uint64_t v36 = *(void *)(v35 + 32);
      uint64_t v37 = *(void *)(v35 + 40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, double))(v37 + 16))(v14, &v42, v36, v37, v34);
      swift_release();
      if (__OFADD__(v14++, 1)) {
        goto LABEL_25;
      }
      p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
      uint64_t v18 = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
    }
    v16 += 15;
    v15 -= 120;
    if (!v15) {
      return v42;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t ViewDimensions.subscript.getter(unint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  if (lockAssertionsAreEnabled)
  {
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    if (!_MovableLockIsOwner(static Update._lock)) {
      goto LABEL_16;
    }
  }
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v21 = v7;
  uint64_t v22 = v8;
  (*(void (**)(unint64_t, uint64_t *))(*(void *)v3 + 144))(a1, &v19);
  char v11 = v10;
  uint64_t result = swift_release();
  if ((v11 & 1) == 0) {
    return result;
  }
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  uint64_t v13 = static AlignmentKey._typeCache;
  uint64_t v14 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  swift_retain();
  os_unfair_lock_lock(v14);
  uint64_t v15 = v13[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v14);
  swift_release();
  if (a1 < 2)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (a1 >> 1 > *(void *)(v15 + 16))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v16 = v15 + 16 * ((a1 >> 1) - 1);
  uint64_t v18 = *(void *)(v16 + 32);
  uint64_t v17 = *(void *)(v16 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = v3;
  uint64_t v20 = v4;
  uint64_t v21 = v5;
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v24 = v8;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v17 + 8))(&v19, v18, v17);
}

{
  return ViewDimensions.subscript.getter(a1);
}

uint64_t ViewLayoutEngine.explicitAlignment(_:at:)(unint64_t a1, double *a2, uint64_t a3)
{
  double v6 = *a2;
  double v7 = a2[1];
  double v8 = a2[2];
  double v9 = a2[3];
  uint64_t v10 = v3 + *(int *)(a3 + 52);
  long long v11 = *(_OWORD *)(v10 + 16);
  v37[0] = *(_OWORD *)v10;
  v37[1] = v11;
  v36[0] = v6;
  v36[1] = v7;
  v36[2] = v8;
  v36[3] = v9;
  if (!specialized static ViewSize.== infix(_:_:)((double *)v37, v36))
  {
    *(double *)uint64_t v10 = v6;
    *(double *)(v10 + 8) = v7;
    *(double *)(v10 + 16) = v8;
    *(double *)(v10 + 24) = v9;
    uint64_t v12 = *(int *)(a3 + 56);
    swift_bridgeObjectRelease();
    *(void *)(v3 + v12) = MEMORY[0x263F8EE78];
    uint64_t v13 = v3 + *(int *)(a3 + 60);
    *(void *)uint64_t v13 = 0;
    *(void *)(v13 + 8) = 0;
    *(unsigned char *)(v13 + 16) = 0;
    *(void *)(v13 + 24) = 0;
    *(void *)(v13 + 32) = 0;
    *(unsigned char *)(v13 + 40) = 0;
    *(void *)(v13 + 48) = 0;
    *(void *)(v13 + 56) = 0;
    *(unsigned char *)(v13 + 64) = 0;
  }
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  uint64_t v14 = static AlignmentKey._typeCache;
  uint64_t v15 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  swift_retain();
  os_unfair_lock_lock(v15);
  uint64_t v16 = v14[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v15);
  uint64_t result = swift_release();
  if (a1 < 2)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (a1 >> 1 > *(void *)(v16 + 16))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  long long v35 = *(_OWORD *)(v16 + 16 * ((a1 >> 1) - 1) + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = v3 + *(int *)(a3 + 60);
  uint64_t result = *(void *)(v18 + 32);
  uint64_t v19 = *(void *)(v18 + 48);
  uint64_t v20 = v35;
  if (*(void *)v18 && (void)v35 == *(void *)v18) {
    return *(void *)(v18 + 8);
  }
  uint64_t v21 = *(void *)(v18 + 24);
  if (!v21 || (void)v35 != v21)
  {
    if (v19 && (void)v35 == v19)
    {
      return *(void *)(v18 + 56);
    }
    else
    {
      MEMORY[0x270FA5388](result);
      v28[1] = *(_OWORD *)(a3 + 16);
      double v29 = v6;
      double v30 = v7;
      double v31 = v8;
      double v32 = v9;
      unint64_t v33 = a1;
      long long v34 = v22;
      type metadata accessor for Axis?(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x263F8EF38], MEMORY[0x263F8D8F0]);
      _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)partial apply for closure #1 in ViewLayoutEngine.explicitAlignment(_:at:), (uint64_t)v28, a3, MEMORY[0x263F8E628], v23, MEMORY[0x263F8E658], v24);
      uint64_t result = *(void *)&v37[0];
      char v25 = BYTE8(v37[0]);
      char v26 = *(unsigned char *)(v18 + 40);
      *(_OWORD *)(v18 + 48) = *(_OWORD *)(v18 + 24);
      *(unsigned char *)(v18 + 64) = v26;
      char v27 = *(unsigned char *)(v18 + 16);
      *(_OWORD *)(v18 + 24) = *(_OWORD *)v18;
      *(unsigned char *)(v18 + 40) = v27;
      *(void *)uint64_t v18 = v20;
      *(void *)(v18 + 8) = result;
      *(unsigned char *)(v18 + 16) = v25;
    }
  }
  return result;
}

uint64_t _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x270FA5388]();
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v15(v12, v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t UnaryLayoutEngine.explicitAlignment(_:at:)(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v6 = a2[1];
  long long v21 = *a2;
  long long v22 = v6;
  UnaryLayoutEngine.childPlacement(at:)((uint64_t)&v21, a3, (uint64_t)&v23);
  double v8 = *((double *)&v25 + 1);
  double v7 = v26;
  double v9 = v27;
  double v10 = v28;
  uint64_t v11 = (unsigned int *)(v3 + *(int *)(a3 + 40));
  unsigned int v12 = *v11;
  unsigned int v13 = v11[1];
  unsigned int v14 = v11[2];
  *(void *)&long long v21 = v23;
  BYTE8(v21) = v24;
  *(void *)&long long v22 = *((void *)&v24 + 1);
  BYTE8(v22) = v25;
  LayoutProxy.dimensions(in:)((uint64_t)&v21, (uint64_t)&v23);
  double v15 = *((double *)&v24 + 1);
  *(void *)&long long v21 = __PAIR64__(v13, v12);
  DWORD2(v21) = v14;
  uint64_t v23 = *((void *)&v24 + 1);
  double v20 = *(double *)&v25;
  long long v24 = v25;
  *(double *)&long long v25 = v26;
  double v16 = COERCE_DOUBLE(LayoutProxy.explicitAlignment(_:at:)(a1, (long long *)&v23));
  LOBYTE(v12) = v17;
  swift_release();
  if ((v12 & 1) == 0)
  {
    double v18 = v9 - v8 * v15;
    if (a1) {
      double v18 = v10 - v7 * v20;
    }
    double v16 = v18 + v16;
  }
  return *(void *)&v16;
}

uint64_t LayoutProxy.dimensions(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = *(double *)a1;
  int v5 = *(unsigned __int8 *)(a1 + 8);
  double v6 = *(double *)(a1 + 16);
  int v7 = *(unsigned __int8 *)(a1 + 24);
  if (*(_DWORD *)(v2 + 4) == *MEMORY[0x263F288F8])
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
  }
  else
  {
    Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
  }
  uint64_t v9 = *InputValue;
  uint64_t v10 = InputValue[1];
  uint64_t v11 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v11 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_12;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    double v17 = v4;
    char v18 = v5;
    double v19 = v6;
    char v20 = v7;
    uint64_t result = (*(uint64_t (**)(double *))(*(void *)v9 + 120))(&v17);
    double v15 = v4;
    if (v5) {
      double v15 = NAN;
    }
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v10;
    *(void *)(a2 + 16) = v13;
    *(void *)(a2 + 24) = v14;
    if (v7) {
      double v16 = NAN;
    }
    else {
      double v16 = v6;
    }
    *(double *)(a2 + 32) = v15;
    *(double *)(a2 + 40) = v16;
  }
  return result;
}

uint64_t LayoutEngineBox.sizeThatFits(_:)(uint64_t *a1)
{
  uint64_t v2 = *v1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  char v5 = *((unsigned char *)a1 + 24);
  uint64_t v7 = *a1;
  char v8 = v3;
  uint64_t v9 = v4;
  char v10 = v5;
  return (*(uint64_t (**)(uint64_t *, void))(*(void *)(v2 + 168) + 40))(&v7, *(void *)(v2 + 160));
}

uint64_t UnaryLayoutEngine.childPlacement(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](a1);
  char v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  double v13 = MEMORY[0x270FA5388](v12);
  double v15 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  uint64_t v19 = v16[2];
  uint64_t v20 = v16[3];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v8, v4, a2, v13);
  long long v22 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  unint64_t v107 = v15;
  v22(v15, v8, v10);
  uint64_t v23 = (uint64_t *)(v4 + *(int *)(a2 + 36));
  uint64_t v24 = *v23;
  int v25 = *((_DWORD *)v23 + 2);
  double v26 = (uint64_t *)(v4 + *(int *)(a2 + 40));
  uint64_t v27 = *v26;
  int v83 = *((_DWORD *)v26 + 2);
  double v28 = (uint64_t *)(v4 + *(int *)(a2 + 48));
  uint64_t v106 = *v28;
  uint64_t v105 = v28[1];
  uint64_t v104 = v28[2];
  uint64_t v103 = v28[3];
  uint64_t v102 = v28[4];
  uint64_t v101 = v28[5];
  uint64_t v100 = v28[6];
  uint64_t v99 = v28[7];
  uint64_t v98 = v28[8];
  uint64_t v97 = v28[9];
  uint64_t v96 = v28[10];
  uint64_t v95 = v28[11];
  char v29 = *((unsigned char *)v28 + 96);
  uint64_t v30 = v28[13];
  uint64_t v31 = v28[14];
  uint64_t v32 = v28[15];
  uint64_t v33 = v28[16];
  uint64_t v34 = v28[17];
  uint64_t v35 = v28[18];
  uint64_t v36 = v28[19];
  uint64_t v37 = v28[20];
  uint64_t v38 = v28[21];
  uint64_t v39 = v28[22];
  uint64_t v41 = v28[23];
  uint64_t v40 = v28[24];
  int v42 = *((unsigned __int8 *)v28 + 200);
  long long v81 = *((_OWORD *)v28 + 13);
  long long v80 = *((_OWORD *)v28 + 14);
  long long v79 = *((_OWORD *)v28 + 15);
  long long v78 = *((_OWORD *)v28 + 16);
  long long v77 = *((_OWORD *)v28 + 17);
  long long v76 = *((_OWORD *)v28 + 18);
  char v43 = *((unsigned char *)v28 + 304);
  uint64_t v115 = v17;
  uint64_t v116 = v18;
  uint64_t v117 = v19;
  uint64_t v118 = v20;
  uint64_t v94 = v32;
  uint64_t v93 = v33;
  uint64_t v92 = v34;
  uint64_t v91 = v35;
  uint64_t v90 = v36;
  uint64_t v89 = v37;
  uint64_t v88 = v38;
  uint64_t v87 = v39;
  uint64_t v86 = v41;
  uint64_t v85 = v40;
  int v84 = v42;
  if ((v29 & 1) == 0)
  {
    int v82 = v25;
    uint64_t v44 = v31;
    uint64_t v45 = v10;
    char v46 = v29;
    uint64_t v47 = v30;
    *(void *)&long long v108 = v106;
    *((void *)&v108 + 1) = v105;
    *(void *)&long long v109 = v104;
    *((void *)&v109 + 1) = v103;
    *(void *)&long long v110 = v102;
    *((void *)&v110 + 1) = v101;
    *(void *)&long long v111 = v100;
    *((void *)&v111 + 1) = v99;
    *(void *)&long long v112 = v98;
    *((void *)&v112 + 1) = v97;
    *(void *)&long long v113 = v96;
    *((void *)&v113 + 1) = v95;
    char v114 = 0;
    if (specialized static ViewSize.== infix(_:_:)((double *)&v115, (double *)&v108))
    {
      uint64_t v48 = v110;
      char v49 = BYTE8(v110);
      uint64_t v50 = v111;
      char v51 = BYTE8(v111);
      long long v52 = v112;
      long long v53 = v113;
      uint64_t v10 = v45;
      goto LABEL_12;
    }
    uint64_t v30 = v47;
    char v29 = v46;
    uint64_t v10 = v45;
    uint64_t v31 = v44;
    uint64_t v32 = v94;
    uint64_t v33 = v93;
    uint64_t v34 = v92;
    uint64_t v35 = v91;
    uint64_t v36 = v90;
    uint64_t v37 = v89;
    uint64_t v38 = v88;
    uint64_t v39 = v87;
    uint64_t v41 = v86;
    uint64_t v40 = v85;
    LOBYTE(v42) = v84;
    int v25 = v82;
  }
  if ((v42 & 1) == 0)
  {
    int v82 = v25;
    uint64_t v74 = v11;
    uint64_t v54 = v31;
    uint64_t v55 = v10;
    char v56 = v29;
    *(void *)&long long v108 = v30;
    *((void *)&v108 + 1) = v54;
    *(void *)&long long v109 = v32;
    *((void *)&v109 + 1) = v33;
    *(void *)&long long v110 = v34;
    *((void *)&v110 + 1) = v35;
    *(void *)&long long v111 = v36;
    *((void *)&v111 + 1) = v37;
    *(void *)&long long v112 = v38;
    *((void *)&v112 + 1) = v39;
    *(void *)&long long v113 = v41;
    *((void *)&v113 + 1) = v40;
    char v114 = 0;
    uint64_t v57 = v30;
    if (specialized static ViewSize.== infix(_:_:)((double *)&v115, (double *)&v108))
    {
      uint64_t v48 = v110;
      char v49 = BYTE8(v110);
      uint64_t v50 = v111;
      char v51 = BYTE8(v111);
      long long v52 = v112;
      long long v53 = v113;
      uint64_t v10 = v55;
      uint64_t v11 = v74;
      goto LABEL_12;
    }
    uint64_t v30 = v57;
    char v29 = v56;
    uint64_t v10 = v55;
    uint64_t v31 = v54;
    uint64_t v11 = v74;
    int v25 = v82;
  }
  uint64_t v75 = v30;
  if ((v43 & 1) != 0
    || (long long v108 = v81,
        long long v109 = v80,
        long long v110 = v79,
        long long v111 = v78,
        long long v112 = v77,
        long long v113 = v76,
        char v114 = 0,
        !specialized static ViewSize.== infix(_:_:)((double *)&v115, (double *)&v108)))
  {
    uint64_t v59 = *(void *)(a2 + 24);
    uint64_t v115 = v27;
    LODWORD(v116) = v83;
    *(void *)&long long v108 = v24;
    DWORD2(v108) = v25;
    *(void *)&long long v109 = v17;
    *((void *)&v109 + 1) = v18;
    *(void *)&long long v110 = v19;
    *((void *)&v110 + 1) = v20;
    LOBYTE(v111) = 0;
    double v58 = v107;
    (*(void (**)(uint64_t *, long long *, uint64_t))(v59 + 48))(&v115, &v108, v10);
    *((unsigned char *)v28 + 304) = v84;
    v28[26] = v75;
    v28[27] = v31;
    uint64_t v60 = v93;
    v28[28] = v94;
    v28[29] = v60;
    uint64_t v61 = v91;
    v28[30] = v92;
    v28[31] = v61;
    uint64_t v62 = v89;
    v28[32] = v90;
    v28[33] = v62;
    uint64_t v63 = v87;
    v28[34] = v88;
    v28[35] = v63;
    uint64_t v64 = v85;
    v28[36] = v86;
    v28[37] = v64;
    uint64_t v65 = v105;
    v28[13] = v106;
    v28[14] = v65;
    uint64_t v66 = v103;
    v28[15] = v104;
    v28[16] = v66;
    uint64_t v67 = v101;
    v28[17] = v102;
    v28[18] = v67;
    uint64_t v68 = v99;
    v28[19] = v100;
    v28[20] = v68;
    uint64_t v69 = v97;
    v28[21] = v98;
    v28[22] = v69;
    uint64_t v70 = v95;
    v28[23] = v96;
    v28[24] = v70;
    *((unsigned char *)v28 + 200) = v29;
    v28[4] = *(void *)a3;
    *((unsigned char *)v28 + 40) = *(unsigned char *)(a3 + 8);
    v28[6] = *(void *)(a3 + 16);
    *((unsigned char *)v28 + 56) = *(unsigned char *)(a3 + 24);
    long long v71 = *(_OWORD *)(a3 + 32);
    long long v72 = *(_OWORD *)(a3 + 48);
    *double v28 = v17;
    v28[1] = v18;
    _OWORD v28[2] = v19;
    v28[3] = v20;
    *((_OWORD *)v28 + 4) = v71;
    *((_OWORD *)v28 + 5) = v72;
    *((unsigned char *)v28 + 96) = 0;
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v58, v10);
  }
  uint64_t v48 = v110;
  char v49 = BYTE8(v110);
  uint64_t v50 = v111;
  char v51 = BYTE8(v111);
  long long v52 = v112;
  long long v53 = v113;
LABEL_12:
  *(void *)a3 = v48;
  *(unsigned char *)(a3 + 8) = v49;
  *(void *)(a3 + 16) = v50;
  *(unsigned char *)(a3 + 24) = v51;
  *(_OWORD *)(a3 + 32) = v52;
  *(_OWORD *)(a3 + 48) = v53;
  double v58 = v107;
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v58, v10);
}

BOOL specialized static ViewSize.== infix(_:_:)(double *a1, double *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1]) {
    return 0;
  }
  double v4 = a2[2];
  double v3 = a2[3];
  double v6 = a1[2];
  double v5 = a1[3];
  BOOL v7 = (~*(void *)&v5 & 0x7FF0000000000000) == 0;
  if ((*(void *)&v5 & 0xFFFFFFFFFFFFFLL) == 0) {
    BOOL v7 = 0;
  }
  BOOL v8 = (~*(void *)&v4 & 0x7FF0000000000000) != 0;
  if ((*(void *)&v4 & 0xFFFFFFFFFFFFFLL) == 0) {
    BOOL v8 = 1;
  }
  BOOL v9 = (~*(void *)&v3 & 0x7FF0000000000000) != 0;
  if ((*(void *)&v3 & 0xFFFFFFFFFFFFFLL) == 0) {
    BOOL v9 = 1;
  }
  if ((~*(void *)&v6 & 0x7FF0000000000000) != 0 || (*(void *)&v6 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    if (v6 != v4 || !v8) {
      return 0;
    }
  }
  else if (v8)
  {
    return 0;
  }
  if (!v7) {
    return v5 == v3 && v9;
  }
  return !v9;
}

uint64_t LayoutProxy.explicitAlignment(_:at:)(uint64_t a1, long long *a2)
{
  long long v9 = a2[1];
  long long v10 = *a2;
  if (*(_DWORD *)(v2 + 4) == *MEMORY[0x263F288F8])
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
  }
  else
  {
    Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
  }
  uint64_t v5 = *InputValue;
  uint64_t v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_12;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    v11[0] = v10;
    v11[1] = v9;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v5 + 144))(a1, v11);
    swift_release();
    return v7;
  }
  return result;
}

uint64_t LayoutEngineBox.explicitAlignment(_:at:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *v2;
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  return (*(uint64_t (**)(uint64_t, _OWORD *, void))(*(void *)(v3 + 168) + 64))(a1, v6, *(void *)(v3 + 160));
}

uint64_t protocol witness for LayoutEngine.explicitAlignment(_:at:) in conformance UnaryLayoutEngine<A>(uint64_t a1, long long *a2, uint64_t a3)
{
  return UnaryLayoutEngine.explicitAlignment(_:at:)(a1, a2, a3);
}

double protocol witness for LayoutEngine.sizeThatFits(_:) in conformance UnaryLayoutEngine<A>(uint64_t a1, uint64_t a2)
{
  return UnaryLayoutEngine.sizeThatFits(_:)(a1, a2);
}

double UnaryLayoutEngine.sizeThatFits(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  double v11 = MEMORY[0x270FA5388](v10);
  double v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = *(double *)v14;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 8);
  double v17 = *(double *)(v14 + 16);
  __int16 v18 = *(unsigned __int8 *)(v14 + 24);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v6, v3, a2, v11);
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  long long v76 = v13;
  uint64_t v77 = v8;
  v20(v13, v6, v8);
  uint64_t v21 = (uint64_t *)(v3 + *(int *)(a2 + 36));
  uint64_t v22 = *v21;
  int v23 = *((_DWORD *)v21 + 2);
  uint64_t v24 = (uint64_t *)(v3 + *(int *)(a2 + 40));
  uint64_t v25 = *v24;
  int v26 = *((_DWORD *)v24 + 2);
  uint64_t v27 = v3 + *(int *)(a2 + 44);
  double v28 = v15;
  double v29 = *(double *)v27;
  uint64_t v30 = *(void *)(v27 + 8);
  double v32 = *(double *)(v27 + 16);
  uint64_t v31 = *(void *)(v27 + 24);
  uint64_t v34 = *(void *)(v27 + 32);
  uint64_t v33 = *(void *)(v27 + 40);
  int v35 = *(unsigned __int8 *)(v27 + 48);
  double v36 = *(double *)(v27 + 56);
  uint64_t v37 = *(void *)(v27 + 64);
  double v38 = *(double *)(v27 + 72);
  uint64_t v40 = *(void *)(v27 + 88);
  uint64_t v39 = *(void *)(v27 + 96);
  int v41 = *(unsigned __int8 *)(v27 + 104);
  double v42 = *(double *)(v27 + 144);
  if ((v35 & 1) == 0)
  {
    if (v16)
    {
      if ((v30 & 1) == 0)
      {
        if (*(unsigned char *)(v27 + 64)) {
          char v43 = *(unsigned char *)(v27 + 104);
        }
        else {
          char v43 = 1;
        }
        if (v43) {
          goto LABEL_18;
        }
        goto LABEL_35;
      }
    }
    else if ((v30 & 1) != 0 || v15 != v29)
    {
      goto LABEL_17;
    }
    if (v18)
    {
      if ((v31 & 1) == 0) {
        goto LABEL_17;
      }
LABEL_16:
      double v42 = *(double *)(v27 + 32);
LABEL_43:
      swift_beginAccess();
      uint64_t v59 = (double *)static LayoutTrace.recorder;
      if (static LayoutTrace.recorder)
      {
        swift_beginAccess();
        v59[4] = v15;
        *((void *)v59 + 5) = v16;
        v59[6] = v17;
        *((_WORD *)v59 + 28) = v18 | 0x100;
      }
      uint64_t v51 = v77;
      uint64_t v50 = v76;
      goto LABEL_46;
    }
    if ((v31 & 1) == 0 && v17 == v32) {
      goto LABEL_16;
    }
  }
LABEL_17:
  if (v41) {
    goto LABEL_18;
  }
  if (v16)
  {
    if ((*(unsigned char *)(v27 + 64) & 1) == 0) {
      goto LABEL_18;
    }
  }
  else if ((*(unsigned char *)(v27 + 64) & 1) != 0 || v15 != v36)
  {
    goto LABEL_18;
  }
LABEL_35:
  if (v18)
  {
    if (*(unsigned char *)(v27 + 80))
    {
LABEL_40:
      double v42 = *(double *)(v27 + 88);
      goto LABEL_43;
    }
  }
  else if ((*(unsigned char *)(v27 + 80) & 1) == 0 && v17 == v38)
  {
    goto LABEL_40;
  }
LABEL_18:
  if ((*(unsigned char *)(v27 + 160) & 1) == 0)
  {
    if (v16)
    {
      if ((*(unsigned char *)(v27 + 120) & 1) == 0) {
        goto LABEL_19;
      }
    }
    else if ((*(unsigned char *)(v27 + 120) & 1) != 0 || *(double *)(v27 + 112) != v15)
    {
      goto LABEL_19;
    }
    if (v18)
    {
      if (*(unsigned char *)(v27 + 136)) {
        goto LABEL_43;
      }
    }
    else if ((*(unsigned char *)(v27 + 136) & 1) == 0 && *(double *)(v27 + 128) == v17)
    {
      goto LABEL_43;
    }
  }
LABEL_19:
  uint64_t v63 = *(void *)(v27 + 80);
  int v64 = v41;
  double v65 = v38;
  uint64_t v66 = v37;
  uint64_t v67 = v40;
  double v62 = v36;
  uint64_t v68 = v39;
  int v70 = v35;
  uint64_t v71 = v31;
  double v72 = v32;
  uint64_t v73 = v30;
  double v69 = v29;
  uint64_t v75 = v9;
  uint64_t v44 = v34;
  uint64_t v74 = v33;
  __int16 v45 = v18;
  double v46 = v17;
  double v47 = v28;
  swift_beginAccess();
  uint64_t v48 = (double *)static LayoutTrace.recorder;
  if (static LayoutTrace.recorder)
  {
    swift_beginAccess();
    v48[4] = v47;
    *((void *)v48 + 5) = v16;
    v48[6] = v46;
    *((_WORD *)v48 + 28) = v45;
  }
  uint64_t v49 = *(void *)(a2 + 24);
  double v82 = v47;
  char v83 = v16;
  double v84 = v46;
  char v85 = v45;
  uint64_t v80 = v22;
  int v81 = v23;
  uint64_t v78 = v25;
  int v79 = v26;
  uint64_t v50 = v76;
  uint64_t v51 = v77;
  double v42 = (*(double (**)(double *, uint64_t *, uint64_t *, uint64_t))(v49 + 56))(&v82, &v80, &v78, v77);
  uint64_t v52 = v66;
  *(double *)(v27 + 112) = v62;
  *(void *)(v27 + 120) = v52;
  uint64_t v53 = v63;
  *(double *)(v27 + 128) = v65;
  *(void *)(v27 + 136) = v53;
  uint64_t v54 = v68;
  *(void *)(v27 + 144) = v67;
  *(void *)(v27 + 152) = v54;
  *(unsigned char *)(v27 + 160) = v64;
  uint64_t v55 = v73;
  *(double *)(v27 + 56) = v69;
  *(void *)(v27 + 64) = v55;
  uint64_t v56 = v71;
  *(double *)(v27 + 72) = v72;
  *(void *)(v27 + 80) = v56;
  uint64_t v57 = v74;
  *(void *)(v27 + 88) = v44;
  *(void *)(v27 + 96) = v57;
  *(unsigned char *)(v27 + 104) = v70;
  *(double *)uint64_t v27 = v47;
  *(unsigned char *)(v27 + 8) = v16;
  *(double *)(v27 + 16) = v46;
  *(unsigned char *)(v27 + 24) = v45;
  *(double *)(v27 + 32) = v42;
  *(void *)(v27 + 40) = v58;
  *(unsigned char *)(v27 + 48) = 0;
  uint64_t v9 = v75;
LABEL_46:
  (*(void (**)(char *, uint64_t))(v9 + 8))(v50, v51);
  return v42;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

__n128 __swift_memcpy112_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t protocol witness for LayoutEngine.explicitAlignment(_:at:) in conformance ViewLayoutEngine<A>(unint64_t a1, double *a2, uint64_t a3)
{
  return ViewLayoutEngine.explicitAlignment(_:at:)(a1, a2, a3);
}

double ViewLayoutEngine.sizeThatFits(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  double v42 = *(double *)(a1 + 16);
  double v43 = *(double *)a1;
  __int16 v5 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v6 = v2 + *(int *)(a2 + 40);
  int v31 = *(_DWORD *)v6;
  int v28 = *(unsigned __int8 *)(v2 + *(int *)(a2 + 44));
  uint64_t v7 = v2 + *(int *)(a2 + 48);
  uint64_t v44 = *(void *)(v7 + 8);
  double v40 = *(double *)v7;
  uint64_t v41 = *(void *)(v7 + 24);
  double v34 = *(double *)(v7 + 16);
  double v35 = *(double *)(v7 + 32);
  char v8 = *(unsigned char *)(v7 + 48);
  char v9 = *(unsigned char *)(v7 + 64);
  double v33 = *(double *)(v7 + 72);
  char v26 = *(unsigned char *)(v7 + 80);
  uint64_t v29 = *(void *)(v7 + 80);
  uint64_t v30 = *(void *)(v7 + 64);
  uint64_t v36 = *(void *)(v7 + 40);
  double v37 = *(double *)(v7 + 88);
  uint64_t v38 = *(void *)(v7 + 96);
  double v39 = *(double *)(v7 + 56);
  char v10 = *(unsigned char *)(v7 + 104);
  double v11 = *(double *)(v7 + 112);
  char v27 = *(unsigned char *)(v7 + 120);
  double v12 = *(double *)(v7 + 128);
  char v25 = *(unsigned char *)(v7 + 136);
  double v13 = *(double *)(v7 + 144);
  char v14 = *(unsigned char *)(v7 + 160);
  uint64_t v15 = *(void *)(v6 + 8);
  swift_bridgeObjectRetain();
  char v32 = v8;
  if ((v8 & 1) == 0)
  {
    if (v4)
    {
      if ((v44 & 1) == 0)
      {
        if (v9) {
          char v16 = v10;
        }
        else {
          char v16 = 1;
        }
        uint64_t v17 = v15;
        char v18 = v10;
        if (v16) {
          goto LABEL_18;
        }
        goto LABEL_39;
      }
    }
    else if ((v44 & 1) != 0 || v43 != v40)
    {
      goto LABEL_17;
    }
    if (v5)
    {
      if ((v41 & 1) == 0) {
        goto LABEL_17;
      }
LABEL_16:
      double v13 = v35;
      double v19 = v43;
      goto LABEL_47;
    }
    if ((v41 & 1) == 0 && v42 == v34) {
      goto LABEL_16;
    }
  }
LABEL_17:
  uint64_t v17 = v15;
  char v18 = v10;
  if (v10) {
    goto LABEL_18;
  }
  if (v4)
  {
    if ((v9 & 1) == 0) {
      goto LABEL_18;
    }
  }
  else if ((v9 & 1) != 0 || v43 != v39)
  {
    goto LABEL_18;
  }
LABEL_39:
  if (v5)
  {
    if (v26)
    {
LABEL_44:
      double v13 = v37;
      double v19 = v43;
      goto LABEL_47;
    }
  }
  else if ((v26 & 1) == 0 && v42 == v33)
  {
    goto LABEL_44;
  }
LABEL_18:
  double v19 = v43;
  if ((v14 & 1) == 0)
  {
    if (v4)
    {
      if ((v27 & 1) == 0) {
        goto LABEL_19;
      }
    }
    else if ((v27 & 1) != 0 || v11 != v43)
    {
      goto LABEL_19;
    }
    if (v5)
    {
      if ((v25 & 1) == 0) {
        goto LABEL_19;
      }
    }
    else if ((v25 & 1) != 0 || v12 != v42)
    {
      goto LABEL_19;
    }
LABEL_47:
    swift_beginAccess();
    uint64_t v24 = (double *)static LayoutTrace.recorder;
    if (static LayoutTrace.recorder)
    {
      swift_beginAccess();
      v24[4] = v19;
      *((void *)v24 + 5) = v4;
      v24[6] = v42;
      *((_WORD *)v24 + 28) = v5 | 0x100;
    }
    goto LABEL_25;
  }
LABEL_19:
  swift_beginAccess();
  uint64_t v20 = (double *)static LayoutTrace.recorder;
  if (static LayoutTrace.recorder)
  {
    swift_beginAccess();
    v20[4] = v43;
    *((void *)v20 + 5) = v4;
    v20[6] = v42;
    *((_WORD *)v20 + 28) = v5;
  }
  if (v28) {
    __int16 v21 = 256;
  }
  else {
    __int16 v21 = 0;
  }
  double v13 = closure #1 in ViewLayoutEngine.sizeThatFits(_:)(v2, *(uint64_t *)&v43, v4, *(uint64_t *)&v42, v5, v31, v17, v21, *(void *)(a2 + 16), *(void *)(a2 + 24));
  *(double *)(v7 + 112) = v39;
  *(void *)(v7 + 120) = v30;
  *(double *)(v7 + 128) = v33;
  *(void *)(v7 + 136) = v29;
  *(double *)(v7 + 144) = v37;
  *(void *)(v7 + 152) = v38;
  *(unsigned char *)(v7 + 160) = v18;
  *(double *)(v7 + 56) = v40;
  *(void *)(v7 + 64) = v44;
  *(double *)(v7 + 72) = v34;
  *(void *)(v7 + 80) = v41;
  *(double *)(v7 + 88) = v35;
  *(void *)(v7 + 96) = v36;
  *(unsigned char *)(v7 + 104) = v32;
  *(double *)uint64_t v7 = v43;
  *(unsigned char *)(v7 + 8) = v4;
  *(double *)(v7 + 16) = v42;
  *(unsigned char *)(v7 + 24) = v5;
  *(double *)(v7 + 32) = v13;
  *(void *)(v7 + 40) = v22;
  *(unsigned char *)(v7 + 48) = 0;
LABEL_25:
  swift_bridgeObjectRelease();
  return v13;
}

void type metadata accessor for Axis?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined init with take of CoordinateSpace(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t partial apply for closure #1 in _withObservation<A>(do:)(uint64_t a1, void *a2)
{
  return closure #1 in _withObservation<A>(do:)(a1, *(uint64_t (**)(void))(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 16), a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  unint64_t StatusReg;
  uint64_t v7;
  uint64_t result;

  unint64_t v5 = *(uint64_t (**)(void))(v2 + 24);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = a1;
  __n128 result = v5();
  *(void *)(StatusReg + 848) = v7;
  if (v3) {
    *a2 = v3;
  }
  return result;
}

uint64_t _s7SwiftUI16_withObservation2dox5value_0D00D8TrackingV11_AccessListVSg06accessI0txyKXE_tKlFxSpyAJGKXEfU_TA_0(uint64_t a1, void *a2)
{
  return partial apply for closure #1 in _withObservation<A>(do:)(a1, a2);
}

uint64_t closure #1 in _withObservation<A>(do:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, void *a5)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v8 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = a1;
  uint64_t result = a2();
  *(void *)(StatusReg + 848) = v8;
  if (v5) {
    *a5 = v5;
  }
  return result;
}

double protocol witness for SpatialEventType.radius.getter in conformance MouseEvent()
{
  return 0.0;
}

double protocol witness for static AlignmentID.defaultValue(in:) in conformance VerticalAlignment.Center(uint64_t a1)
{
  return *(double *)(a1 + 24) * 0.5;
}

uint64_t partial apply for closure #1 in ViewLayoutEngine.explicitAlignment(_:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in ViewLayoutEngine.explicitAlignment(_:at:)(a1, *(void *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80), *(void *)(v2 + 16), *(void *)(v2 + 24), a2, *(double *)(v2 + 32), *(double *)(v2 + 40), *(void *)(v2 + 48), *(double *)(v2 + 56));
}

double protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.Center(uint64_t a1)
{
  return *(double *)(a1 + 16) * 0.5;
}

uint64_t partial apply for closure #1 in EnvironmentBox.update(property:phase:)()
{
  return closure #1 in EnvironmentBox.update(property:phase:)();
}

uint64_t closure #1 in EnvironmentBox.update(property:phase:)()
{
  return swift_release();
}

uint64_t StackLayout.UnmanagedImplementation.proposalWhenPlacing(in:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  BOOL v4 = (~a1[2] & 0x7FF0000000000000) == 0 && (a1[2] & 0xFFFFFFFFFFFFFLL) != 0;
  if (v4) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = a1[2];
  }
  if (*(unsigned char *)(a2 + 17)) {
    BOOL v6 = v4;
  }
  else {
    BOOL v6 = (~v3 & 0x7FF0000000000000) == 0 && (v3 & 0xFFFFFFFFFFFFFLL) != 0;
  }
  if (v6)
  {
    if (*(unsigned char *)(a2 + 17)) {
      return *a1;
    }
  }
  return result;
}

uint64_t StackLayout.UnmanagedImplementation.placeChildren(in:)(uint64_t result, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = result;
  if (*(unsigned char *)(a5 + 40))
  {
    if ((a2 & 1) == 0) {
      goto LABEL_10;
    }
  }
  else if ((a2 & 1) != 0 || *(double *)(a5 + 32) != *(double *)&result)
  {
    goto LABEL_10;
  }
  if (*(unsigned char *)(a5 + 56))
  {
    if (a4) {
      return result;
    }
LABEL_10:
    if (!a7) {
      return result;
    }
    goto LABEL_11;
  }
  if (a4) {
    goto LABEL_10;
  }
  if (*(double *)(a5 + 48) != *(double *)&a3 && a7 != 0)
  {
LABEL_11:
    if (*(unsigned char *)(a5 + 17)) {
      uint64_t v12 = result;
    }
    else {
      uint64_t v12 = a3;
    }
    if (*(unsigned char *)(a5 + 17)) {
      char v13 = a2;
    }
    else {
      char v13 = a4;
    }
    char v14 = a2 & 1;
    char v15 = a4 & 1;
    *(double *)&uint64_t result = COERCE_DOUBLE(specialized StackLayout.UnmanagedImplementation.placeChildren1(in:minorProposalForChild:)(result, a2 & 1, a3, a4 & 1, a5, a6, a7, v12, v13 & 1));
    if (*(unsigned char *)(a5 + 98) == 1) {
      *(double *)&uint64_t result = COERCE_DOUBLE(StackLayout.UnmanagedImplementation.resizeAnyChildrenWithTrailingOverflow(in:)(v11, v14, a3, v15, a5, a6, a7));
    }
    *(void *)(a5 + 32) = v11;
    *(unsigned char *)(a5 + 40) = v14;
    *(double *)(a5 + 48) = *(double *)&a3;
    *(unsigned char *)(a5 + 56) = v15;
  }
  return result;
}

double StyledTextLayoutEngine.sizeThatFits(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *((unsigned __int8 *)a1 + 8);
  uint64_t v5 = a1[2];
  unsigned __int8 v6 = *((unsigned char *)a1 + 24);
  if (a3)
  {
    uint64_t v11 = a2;
    uint64_t v7 = *(double (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *))(*(void *)a3 + 104);
    swift_retain();
    swift_retain();
    double v8 = v7(v3, v4, v5, v6, &v11);
    swift_release();
    swift_release();
  }
  else if ((v4 & 1) != 0 {
         || ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0 ? (char v9 = 1) : (char v9 = *((unsigned char *)a1 + 24)),
  }
             (v9 & 1) != 0 || (double v8 = 0.0, (v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)))
  {
    uint64_t v11 = *a1;
    char v12 = v4;
    uint64_t v13 = v5;
    unsigned __int8 v14 = v6;
    return (*(double (**)(uint64_t *))(*(void *)a2 + 224))(&v11);
  }
  return v8;
}

double protocol witness for LayoutEngine.sizeThatFits(_:) in conformance StyledTextLayoutEngine(uint64_t *a1)
{
  return StyledTextLayoutEngine.sizeThatFits(_:)(a1, *v1, v1[1]);
}

double ResolvedStyledText.StringDrawing.sizeThatFits(_:)(uint64_t a1)
{
  double v2 = *(double *)a1;
  int v3 = *(unsigned __int8 *)(a1 + 8);
  double v4 = *(double *)(a1 + 16);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  swift_beginAccess();
  double v6 = v1[21];
  double v7 = v1[22];
  double v9 = v1[23];
  double v8 = v1[24];
  swift_beginAccess();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  if (v5) {
    double v4 = INFINITY;
  }
  if (v3) {
    double v2 = INFINITY;
  }
  uint64_t v10 = static TextDrawingContext.shared;
  swift_retain();
  NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(0, v10, (uint64_t)&v12, v2, v4, v6, v7, v9, v8);
  swift_endAccess();
  swift_release();
  return v12;
}

uint64_t NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D5>)
{
  uint64_t v10 = v9;
  uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)(v10 + 80);
  uint64_t v26 = *(void *)(v25 + 16);
  if (v26)
  {
    uint64_t v27 = v25 + 56;
    while (1)
    {
      char v37 = *(unsigned char *)(v27 + 56);
      if ((a1 & 1) == 0 || (*(unsigned char *)(v27 + 56) & 1) == 0)
      {
        double v29 = *(double *)(v27 - 8);
        double v28 = *(double *)v27;
        double v31 = *(double *)(v27 - 24);
        double v30 = *(double *)(v27 - 16);
        if (v29 >= v31) {
          double v32 = *(double *)(v27 - 24);
        }
        else {
          double v32 = *(double *)(v27 - 8);
        }
        if (v31 <= v29) {
          double v31 = *(double *)(v27 - 8);
        }
        if (v28 >= v30) {
          double v33 = *(double *)(v27 - 16);
        }
        else {
          double v33 = *(double *)v27;
        }
        if (v30 <= v28) {
          double v30 = *(double *)v27;
        }
        BOOL v34 = v32 > a4 || v31 < a4;
        BOOL v35 = v34 || v33 > a5;
        if (!v35 && v30 >= a5) {
          break;
        }
      }
      v27 += 88;
      if (!--v26) {
        goto LABEL_28;
      }
    }
    uint64_t v67 = *(void *)(v27 + 8);
    double v68 = *(double *)(v27 + 16);
    double v70 = *(double *)(v27 + 24);
    double v69 = *(double *)(v27 + 32);
    uint64_t v80 = *(void *)(v27 + 40);
    uint64_t v71 = *(void *)(v27 + 48);
    char v72 = *(unsigned char *)(v27 + 57);
    uint64_t result = swift_beginAccess();
    uint64_t v74 = (double *)static LayoutTrace.recorder;
    if (static LayoutTrace.recorder)
    {
      uint64_t result = swift_beginAccess();
      v74[4] = a4;
      v74[5] = 0.0;
      v74[6] = a5;
      *((_WORD *)v74 + 28) = 256;
    }
    uint64_t v66 = v80;
  }
  else
  {
LABEL_28:
    uint64_t v77 = a2;
    uint64_t v78 = v22;
    uint64_t v80 = v21;
    uint64_t v79 = a3;
    swift_beginAccess();
    uint64_t v38 = (double *)static LayoutTrace.recorder;
    if (static LayoutTrace.recorder)
    {
      swift_beginAccess();
      v38[4] = a4;
      v38[5] = 0.0;
      v38[6] = a5;
      *((_WORD *)v38 + 28) = 0;
    }
    double v76 = a7 + a9;
    double v39 = a4 - (a7 + a9);
    if (v39 < 0.0) {
      double v39 = 0.0;
    }
    double v40 = a6 + a8;
    if (a5 - (a6 + a8) < 0.0) {
      double v41 = 0.0;
    }
    else {
      double v41 = a5 - (a6 + a8);
    }
    double v43 = *(double *)(v10 + 48);
    double v42 = *(double *)(v10 + 56);
    double v44 = v39 + v42;
    uint64_t v45 = *(void *)(v10 + 16);
    char v46 = *(unsigned char *)(v10 + 24);
    uint64_t v47 = *(void *)(v10 + 32);
    char v48 = *(unsigned char *)(v10 + 40);
    char v49 = *(unsigned char *)(v10 + 72);
    char v50 = *(unsigned char *)(v10 + 74);
    id v51 = *(id *)(v10 + 8);
    NSAttributedString.measured(requestedSize:lineLimit:lowerLineLimit:minScaleFactor:bodyHeadOutdent:widthIsFlexible:kitCache:isCollapsible:wantsNumberOfLineFragments:context:)(v45, v46, v47, v48, v49, (uint64_t *)v10, v50, a1 & 1, (uint64_t)&v81, v44, v41, v43, v42, v77);

    uint64_t v52 = *MEMORY[0x263F8E218];
    uint64_t v53 = v78;
    uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 104);
    uint64_t v55 = v80;
    v54(v24, v52, v80);
    double v56 = *(double *)(v10 + 64);
    specialized FloatingPoint.round(_:toMultipleOf:)(v24, v56);
    specialized FloatingPoint.round(_:toMultipleOf:)(v24, v56);
    uint64_t v57 = *(void (**)(char *, uint64_t))(v53 + 8);
    v57(v24, v55);
    double v58 = *(double *)(v10 + 64);
    double v59 = v76 + v81 - *(double *)(v10 + 56);
    double v82 = v40 + v82;
    double v81 = v59;
    double v60 = v85 + a6;
    double v61 = v84 + a6;
    double v84 = v61;
    double v85 = v60;
    v54(v24, *MEMORY[0x263F8E210], v55);
    specialized FloatingPoint.round(_:toMultipleOf:)(v24, v58);
    v57(v24, v55);
    double v85 = v84 - v61 + v85;
    double v86 = v84 - v61;
    v54(v24, v52, v55);
    specialized FloatingPoint.round(_:toMultipleOf:)(v24, v58);
    v57(v24, v55);
    double v29 = v81;
    double v28 = v82;
    uint64_t v67 = v83;
    double v68 = v84;
    double v70 = v85;
    double v69 = v86;
    uint64_t v80 = v87;
    uint64_t v71 = v88;
    char v37 = v89;
    char v72 = v90;
    double v62 = *(void **)(v10 + 80);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62[2] + 1, 1, v62);
      double v62 = (void *)result;
    }
    unint64_t v64 = v62[2];
    unint64_t v63 = v62[3];
    if (v64 >= v63 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v63 > 1), v64 + 1, 1, v62);
      double v62 = (void *)result;
    }
    v62[2] = v64 + 1;
    double v65 = (double *)&v62[11 * v64];
    v65[4] = a4;
    v65[5] = a5;
    v65[6] = v29;
    v65[7] = v28;
    *((void *)v65 + 8) = v67;
    v65[9] = v68;
    v65[10] = v70;
    v65[11] = v69;
    uint64_t v66 = v80;
    *((void *)v65 + 12) = v80;
    *((void *)v65 + 13) = v71;
    *((unsigned char *)v65 + 112) = v37;
    *((unsigned char *)v65 + 113) = v72;
    *(void *)(v10 + 80) = v62;
    a3 = v79;
  }
  *(double *)a3 = v29;
  *(double *)(a3 + 8) = v28;
  *(void *)(a3 + 16) = v67;
  *(double *)(a3 + 24) = v68;
  *(double *)(a3 + 32) = v70;
  *(double *)(a3 + 40) = v69;
  *(void *)(a3 + 48) = v66;
  *(void *)(a3 + 56) = v71;
  *(unsigned char *)(a3 + 64) = v37;
  *(unsigned char *)(a3 + 65) = v72;
  return result;
}

uint64_t protocol witness for LayoutEngine.explicitAlignment(_:at:) in conformance StyledTextLayoutEngine(uint64_t a1, double *a2)
{
  return (*(uint64_t (**)(double, double))(**(void **)v2 + 272))(*a2, a2[1]);
}

uint64_t ResolvedStyledText.StringDrawing.explicitAlignment(_:at:)(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for lastTextBaseline != -1) {
    swift_once();
  }
  if (static VerticalAlignment.lastTextBaseline == a1)
  {
    swift_beginAccess();
    double v8 = *(double *)(v4 + 168);
    double v9 = *(double *)(v4 + 176);
    double v11 = *(double *)(v4 + 184);
    double v10 = *(double *)(v4 + 192);
    swift_beginAccess();
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v12 = static TextDrawingContext.shared;
    swift_retain();
    NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(0, v12, (uint64_t)v34, a2, a3, v8, v9, v11, v10);
    swift_endAccess();
    swift_release();
    return v36;
  }
  else
  {
    if (one-time initialization token for firstTextBaseline != -1) {
      swift_once();
    }
    if (static VerticalAlignment.firstTextBaseline == a1)
    {
      swift_beginAccess();
      double v14 = *(double *)(v4 + 168);
      double v15 = *(double *)(v4 + 176);
      double v17 = *(double *)(v4 + 184);
      double v16 = *(double *)(v4 + 192);
      swift_beginAccess();
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      uint64_t v18 = static TextDrawingContext.shared;
      swift_retain();
      NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(0, v18, (uint64_t)v34, a2, a3, v14, v15, v17, v16);
      swift_endAccess();
      swift_release();
      *(double *)&uint64_t result = v35;
    }
    else
    {
      if (one-time initialization token for _firstTextLineCenter != -1) {
        swift_once();
      }
      if (static VerticalAlignment._firstTextLineCenter == a1)
      {
        swift_beginAccess();
        double v19 = *(double *)(v4 + 168);
        double v20 = *(double *)(v4 + 176);
        double v22 = *(double *)(v4 + 184);
        double v21 = *(double *)(v4 + 192);
        swift_beginAccess();
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        uint64_t v23 = static TextDrawingContext.shared;
        swift_retain();
        NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(0, v23, (uint64_t)v34, a2, a3, v19, v20, v22, v21);
        swift_endAccess();
        swift_release();
        if (*(unsigned char *)(v4 + 344))
        {
          if (*(void *)(v4 + 216))
          {
            NSAttributedString.maxFontMetrics.getter((uint64_t)&v29);
            double v24 = v29;
            long long v25 = v30;
            long long v26 = v31;
            long long v27 = v32;
            uint64_t v28 = v33;
          }
          else
          {
            uint64_t v28 = 0;
            long long v25 = 0uLL;
            double v24 = 0.0;
            long long v26 = 0uLL;
            long long v27 = 0uLL;
          }
          *(double *)(v4 + 280) = v24;
          *(_OWORD *)(v4 + 288) = v25;
          *(_OWORD *)(v4 + 304) = v26;
          *(_OWORD *)(v4 + 320) = v27;
          *(void *)(v4 + 336) = v28;
          *(unsigned char *)(v4 + 344) = 0;
        }
        else
        {
          double v24 = *(double *)(v4 + 280);
        }
        *(double *)&uint64_t result = v35 + v24 * -0.5;
      }
      else
      {
        if (one-time initialization token for leadingText != -1) {
          swift_once();
        }
        if (static HorizontalAlignment.leadingText == a1)
        {
          swift_beginAccess();
          return *(uint64_t *)(v4 + 176);
        }
        else
        {
          *(double *)&uint64_t result = 0.0;
        }
      }
    }
  }
  return result;
}

uint64_t destroy for CombinedKeyframes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 32) - 8);
  double v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (*(void *)(v4 + 56) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t destroy for SimultaneousGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  double v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (*(void *)(v4 + 56) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t destroy for _EnvironmentKeyWritingModifier(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t destroy for CodableAttributedString.Range.EncodingWrapper(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t destroy for _ConditionalContent(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24) - 8;
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(*(void *)v2 + 64);
  if (v4 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  unsigned int v5 = a1[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(a2 + 16) - 8);
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t destroy for MouseEvent()
{
  return swift_release();
}

uint64_t destroy for VStack(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

uint64_t destroy for AccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1)
{
  outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));

  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance _DisplayList_Identity.CodingKeys()
{
  return 0;
}

uint64_t destroy for ZStack(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

uint64_t destroy for _EndedGesture(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_release();
}

void *destroy for _AppearanceActionModifier(void *result)
{
  uint64_t v1 = result;
  if (*result) {
    uint64_t result = (void *)swift_release();
  }
  if (v1[2])
  {
    return (void *)swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in DynamicBody.updateValue()(uint64_t a1)
{
  return closure #1 in closure #1 in DynamicBody.updateValue()(a1, *(void *)(v1 + 48), *(unsigned char **)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t closure #1 in closure #1 in DynamicBody.updateValue()(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v10 = type metadata accessor for DynamicBody();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v17 - v12;
  double v15 = (uint64_t *)(a2 + *(int *)(v14 + 60));
  uint64_t v17 = *v15;
  uint64_t v18 = v15[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  LODWORD(a2) = *(_DWORD *)AGGraphGetValue();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  int v21 = a2;
  uint64_t result = _DynamicPropertyBuffer.update(container:phase:)(a1, &v21);
  if (result) {
    *a3 = 1;
  }
  return result;
}

uint64_t destroy for SystemListStyleMetrics.Sidebar()
{
  swift_release();

  return swift_release();
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t protocol witness for LayoutEngine.explicitAlignment(_:at:) in conformance ResolvedImageLayoutEngine(uint64_t a1, uint64_t a2)
{
  return ResolvedImageLayoutEngine.explicitAlignment(_:at:)(a1, a2);
}

uint64_t ResolvedImageLayoutEngine.explicitAlignment(_:at:)(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(v2 + 96);
  unint64_t v4 = *(double **)(v2 + 144);
  if (v3 != 2 || v4 == 0) {
    goto LABEL_6;
  }
  double v8 = v4[7];
  double v9 = *(double *)(a2 + 8) - v4[2];
  if (one-time initialization token for lastTextBaseline != -1) {
    swift_once();
  }
  double v10 = v9 - v8;
  if (static VerticalAlignment.lastTextBaseline == a1) {
    goto LABEL_13;
  }
  if (one-time initialization token for firstTextBaseline != -1) {
    swift_once();
  }
  if (static VerticalAlignment.firstTextBaseline == a1)
  {
LABEL_13:
    *(double *)&uint64_t result = v10;
    return result;
  }
  if (one-time initialization token for _firstTextLineCenter != -1) {
    swift_once();
  }
  if (static VerticalAlignment._firstTextLineCenter != a1)
  {
LABEL_6:
    *(double *)&uint64_t result = 0.0;
    return result;
  }
  *(double *)&uint64_t result = v10 + v4[3] * -0.5;
  return result;
}

double closure #1 in ViewLayoutEngine.sizeThatFits(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, int a6, uint64_t a7, __int16 a8, uint64_t a9, uint64_t a10)
{
  uint64_t v24 = a2;
  uint64_t v25 = a4;
  uint64_t v16 = *(void *)(a9 - 8);
  double v17 = MEMORY[0x270FA5388](a1);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, a1, a9, v17);
  int v28 = a6;
  uint64_t v29 = a7;
  __int16 v30 = a8 & 0x101;
  type metadata accessor for ViewLayoutEngine();
  uint64_t v20 = *(double (**)(uint64_t))(a10 + 56);
  char v27 = a3 & 1;
  char v26 = a5 & 1;
  double v21 = v20(v24);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, a9);
  return v21;
}

uint64_t partial apply for closure #1 in LayoutEngineBox.mutateEngine<A, B>(as:do:)()
{
  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t StackLayout.UnmanagedImplementation.prioritize(_:proposedSize:)(uint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = a2;
  int v11 = a4 & 1;
  int v12 = *(unsigned __int8 *)(a7 + 17);
  if (v12 == 1) {
    double v13 = *(double *)&a3;
  }
  else {
    double v13 = *(double *)&a5;
  }
  if (v12 == 1)
  {
    uint64_t v14 = (double *)(a7 + 32);
  }
  else
  {
    int v11 = a6 & 1;
    uint64_t v14 = (double *)(a7 + 48);
  }
  if (v12 == 1) {
    double v15 = (unsigned char *)(a7 + 40);
  }
  else {
    double v15 = (unsigned char *)(a7 + 56);
  }
  if (*v15)
  {
    if (!v11) {
      goto LABEL_19;
    }
  }
  else
  {
    if (*v14 != v13) {
      LOBYTE(v11) = 1;
    }
    if (v11) {
      goto LABEL_19;
    }
  }
  BOOL v16 = v12 == 0;
  uint64_t v17 = 32;
  if (!v16) {
    uint64_t v17 = 48;
  }
  if (*(unsigned char *)(a7 + v17 + 8) != 1) {
    return result;
  }
LABEL_19:
  if (!a2) {
    goto LABEL_23;
  }
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t v18 = (unsigned char *)(result + 32);
    uint64_t v19 = a2;
    do
    {
      *((void *)v18 - 3) = 0;
      *(v18 - 16) = 1;
      *((void *)v18 - 1) = 0;
      *uint64_t v18 = 1;
      v18 += 120;
      --v19;
    }
    while (v19);
LABEL_23:
    if (result) {
      uint64_t v20 = result;
    }
    else {
      uint64_t v20 = -8;
    }
    uint64_t v21 = v20 + 8;
    if (result) {
      uint64_t v22 = result + 48;
    }
    else {
      uint64_t v22 = 40;
    }
    v50[0] = (unint64_t *)v22;
    v50[1] = (unint64_t *)a2;
    LOBYTE(v45) = a4 & 1;
    char v49 = a6 & 1;
    if (a9 <= 32) {
      uint64_t result = (uint64_t)specialized BidirectionalCollection<>.insertionSort(by:)(v50, v20, a2, v20 + 8, a2, a7, a8, a9, a3, a4 & 1, a5, a6 & 1);
    }
    else {
      uint64_t result = (uint64_t)slowPath #1 (_:) in StackLayout.UnmanagedImplementation.prioritize(_:proposedSize:)((uint64_t)v50, v20, a2, v20 + 8, a2, a7, a8, a9, a3, a4 & 1, a5, a6 & 1);
    }
    uint64_t v23 = 120 * *(void *)v22;
    if ((unsigned __int128)(*(uint64_t *)v22 * (__int128)120) >> 64 == v23 >> 63)
    {
      if (!v10) {
        return result;
      }
      double v24 = *(double *)(v20 + v23);
      int v39 = *MEMORY[0x263F288F8];
      uint64_t v25 = v10;
      uint64_t v40 = v10;
      while (!__OFSUB__(v25--, 1))
      {
        if (v25 < 0 || v25 >= v10) {
          goto LABEL_69;
        }
        if ((unsigned __int128)(v25 * (__int128)120) >> 64 != (120 * v25) >> 63) {
          goto LABEL_70;
        }
        unint64_t v28 = *(void *)(v22 + 120 * v25);
        uint64_t v29 = 120 * v28;
        if ((unsigned __int128)((uint64_t)v28 * (__int128)120) >> 64 != (uint64_t)(120 * v28) >> 63) {
          goto LABEL_71;
        }
        if (*(double *)(v20 + 120 * v28) == v24) {
          return result;
        }
        uint64_t v30 = v21 + v29;
        if (*(unsigned char *)(v21 + v29 + 8) == 1)
        {
          uint64_t v31 = *(unsigned __int8 *)(a7 + 17);
          if (*(unsigned char *)(a7 + 17)) {
            uint64_t v32 = a3;
          }
          else {
            uint64_t v32 = 0;
          }
          if (*(unsigned char *)(a7 + 17)) {
            uint64_t v33 = 0;
          }
          else {
            uint64_t v33 = a5;
          }
          uint64_t v34 = *(void *)(a7 + 88);
          if (*(unsigned char *)(a7 + 96))
          {
            if ((v28 & 0x8000000000000000) != 0) {
              goto LABEL_72;
            }
            if (v28 >= *(void *)(v34 + 16)) {
              goto LABEL_74;
            }
            uint64_t v35 = v34 + 12 * v28;
          }
          else
          {
            if ((v28 & 0x8000000000000000) != 0) {
              goto LABEL_73;
            }
            if (v28 >= *(void *)(v34 + 16)) {
              goto LABEL_75;
            }
            uint64_t v35 = v34 + 8 * v28;
          }
          if (*(_DWORD *)(v35 + 32) == v39)
          {
            Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
            if (one-time initialization token for defaultValue != -1)
            {
              swift_once();
              Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
            }
          }
          else
          {
            Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
          }
          uint64_t v37 = *InputValue;
          uint64_t v38 = one-time initialization token for lockAssertionsAreEnabled;
          swift_retain();
          if (v38 != -1) {
            swift_once();
          }
          uint64_t v21 = v20 + 8;
          if (lockAssertionsAreEnabled)
          {
            if (one-time initialization token for _lock != -1) {
              swift_once();
            }
            if (!_MovableLockIsOwner(static Update._lock)) {
              goto LABEL_78;
            }
          }
          uint64_t v45 = v32;
          char v46 = v31 & a4;
          uint64_t v47 = v33;
          char v48 = (v31 ^ 1) & a6;
          double v26 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v37 + 128))(&v45, v31);
          uint64_t result = swift_release();
          *(double *)uint64_t v30 = v26;
          *(unsigned char *)(v30 + 8) = 0;
          uint64_t v10 = v40;
        }
        if (!v25) {
          return result;
        }
      }
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
LABEL_78:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in BodyAccessor.makeBody(container:inputs:fields:)@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(a1, *(void *)(v2 + 32), *(void *)(v2 + 40), *(unsigned __int8 *)(v2 + 48) | ((unint64_t)*(unsigned int *)(v2 + 52) << 32), *(_DWORD *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t protocol witness for UnaryLayout.sizeThatFits(in:context:child:) in conformance _PaddingLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return _PaddingLayout.sizeThatFits(in:context:child:)(a1, a2, a3);
}

double protocol witness for UnaryLayout.sizeThatFits(in:context:child:) in conformance _FlexFrameLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _FlexFrameLayout.sizeThatFits(in:context:child:)(a1, a2, a3);
}

double protocol witness for UnaryLayout.sizeThatFits(in:context:child:) in conformance _FrameLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return _FrameLayout.sizeThatFits(in:context:child:)(a1, a2, a3);
}

double protocol witness for LayoutEngine.sizeThatFits(_:) in conformance LayoutComputer.DefaultEngine(uint64_t a1)
{
  double result = *(double *)a1;
  if (*(unsigned char *)(a1 + 8)) {
    return 10.0;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in LayoutComputer.withMutableEngine<A, B>(type:do:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #1 in LayoutComputer.withMutableEngine<A, B>(type:do:)()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t partial apply for closure #1 in StatefulRule<>.update<A>(modify:create:)()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t partial apply for closure #1 in Layout.updateLayoutComputer<A>(rule:layoutContext:children:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  int v2 = *(_DWORD *)(v0 + 64);
  int v3 = *(_DWORD *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 56);
  int v10 = v2;
  int v7 = v3;
  uint64_t v8 = v4;
  uint64_t v5 = type metadata accessor for ViewLayoutEngine();
  return ViewLayoutEngine.update(layout:context:children:)(v1, (uint64_t)&v9, &v7, v5);
}

uint64_t protocol witness for UnaryLayout.placement(of:in:) in conformance _FlexFrameLayout@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  return _FlexFrameLayout.placement(of:in:)(a1, a2, a3);
}

uint64_t partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(uint64_t a1, uint64_t (*a2)(double, double, double, double))
{
  return a2(v2[2], v2[3], v2[4], v2[5]);
}

{
  double *v2;

  return a2(v2[2], v2[3], v2[4], v2[5]);
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance _ZStackLayout(uint64_t a1, char a2, uint64_t a3, char a4, int *a5, uint64_t a6)
{
  return _ZStackLayout.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, a5, a6, *v6, v6[1]);
}

uint64_t partial apply for specialized closure #1 in LayoutComputer.withMutableEngine<A, B>(type:do:)(uint64_t a1)
{
  return specialized closure #1 in LayoutComputer.withMutableEngine<A, B>(type:do:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in LayoutComputer.withMutableEngine<A, B>(type:do:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t protocol witness for UnaryLayout.sizeThatFits(in:context:child:) in conformance _FixedSizeLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4 = *v3;
  int v5 = v3[1];
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 24);
  int v10 = *((_DWORD *)a3 + 2);
  uint64_t v18 = *a3;
  int v19 = v10;
  if (v4) {
    uint64_t v6 = 0;
  }
  char v11 = v4 | v7;
  if (v5) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v8;
  }
  uint64_t v14 = v6;
  char v15 = v11 & 1;
  uint64_t v16 = v12;
  char v17 = (v5 | v9) & 1;
  return LayoutProxy.size(in:)(&v14);
}

uint64_t protocol witness for UnaryLayout.sizeThatFits(in:context:child:) in conformance IgnoresAutomaticPaddingLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)a1;
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 24);
  int v7 = *((_DWORD *)a3 + 2);
  uint64_t v13 = *a3;
  int v14 = v7;
  uint64_t v9 = v3;
  char v10 = v4;
  uint64_t v11 = v5;
  char v12 = v6;
  return LayoutProxy.size(in:)(&v9);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<(CGSize, NSAttributedString.Metrics)>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_SublistTransform_Item>, &lazy cache variable for type metadata for _ViewList_SublistTransform_Item, (uint64_t)&protocol descriptor for _ViewList_SublistTransform_Item);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<PreferencesOutputs.KeyValue>, (uint64_t)&type metadata for PreferencesOutputs.KeyValue);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CachedEnvironment.Item>, (uint64_t)&type metadata for CachedEnvironment.Item);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectIdentifier>, MEMORY[0x263F8D1F0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AlignmentID.Type>, &lazy cache variable for type metadata for AlignmentID.Type, &lazy cache variable for type metadata for AlignmentID);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyViewTrait>, (unint64_t *)&lazy cache variable for type metadata for AnyViewTrait, (uint64_t)&protocol descriptor for AnyViewTrait);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewListOutputs>, (uint64_t)&type metadata for _ViewListOutputs);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<UniqueID>, (uint64_t)&type metadata for UniqueID);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID.Explicit>, (uint64_t)&type metadata for _ViewList_ID.Explicit);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Modifier>, (uint64_t)&type metadata for Text.Modifier);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyTrackedValue>, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue, (uint64_t)&protocol descriptor for AnyTrackedValue);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Unmanaged<GraphHost>>, (uint64_t (*)(uint64_t))type metadata accessor for Unmanaged<GraphHost>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Unmanaged<ViewGraph>>, (uint64_t (*)(uint64_t))type metadata accessor for Unmanaged<ViewGraph>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PreferenceKey.Type>, (unint64_t *)&lazy cache variable for type metadata for PreferenceKey.Type, &lazy cache variable for type metadata for PreferenceKey);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<()>, (uint64_t (*)(uint64_t))type metadata accessor for ());
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<GraphMutation>, &lazy cache variable for type metadata for GraphMutation, (uint64_t)&protocol descriptor for GraphMutation);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<(Int, TypeConformance<ViewDescriptor>)>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<(Int, TypeConformance<StyleContextDescriptor>)>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedGradientVector.Stop>, (uint64_t)&type metadata for ResolvedGradientVector.Stop);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x263F8D6C8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<MatchedGeometryScope.Frame>, (uint64_t)&type metadata for MatchedGeometryScope.Frame);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollStateRequest>, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Unmanaged<DynamicViewList<AnyView>.Item>>, (uint64_t (*)(uint64_t))type metadata accessor for Unmanaged<DynamicViewList<AnyView>.Item>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Effect>, (uint64_t)&type metadata for DisplayList.Effect);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<GraphicsFilter>, (uint64_t)&type metadata for GraphicsFilter);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, (uint64_t)&protocol descriptor for ScrollableCollection);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.AnimatableData>.Fork>, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.AnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>.Entry>, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ShapeStyle_Pack.Effect>, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<AnimatorState<ShaderVectorData>.Fork>, &lazy cache variable for type metadata for AnimatorState<ShaderVectorData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<ShaderVectorData>.Entry>, &lazy cache variable for type metadata for CombinedAnimationState<ShaderVectorData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, &lazy cache variable for type metadata for Scrollable, (uint64_t)&protocol descriptor for Scrollable);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ShaderVectorData.Element>, (uint64_t)&type metadata for ShaderVectorData.Element);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedGradient.Stop>, (uint64_t)&type metadata for ResolvedGradient.Stop);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.ResolvedProperties.Transition>, (uint64_t)&type metadata for Text.ResolvedProperties.Transition);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<(offset: UInt64, size: UInt64)>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UnsafeRawPointer>, MEMORY[0x263F8D3D0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityText>, (uint64_t)&type metadata for AccessibilityText);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<SmallTextEffect>.StyleModifier>, &lazy cache variable for type metadata for Text.Effect.Configuration<SmallTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect, (uint64_t)&type metadata for SmallTextEffect);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<Range<Int>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.GlyphIndex>, (uint64_t)&type metadata for Text.Effect.GlyphIndex);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.PathInterpolator.Glyph>, (uint64_t)&type metadata for Text.Effect.PathInterpolator.Glyph);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Identifier>, (uint64_t)&type metadata for Text.Effect.Identifier);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.CharacterIndex>, (uint64_t)&type metadata for Text.Layout.CharacterIndex);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.VisualOrderCollection.Run>, (uint64_t)&type metadata for Text.Effect.VisualOrderCollection.Run);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.KeyframeSequence.Entry>, (uint64_t)&type metadata for Text.Effect.KeyframeSequence.Entry);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.ClusterIndex>, (uint64_t)&type metadata for Text.Effect.ClusterIndex);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<BigTextEffect>.StyleModifier>, &lazy cache variable for type metadata for Text.Effect.Configuration<BigTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect, (uint64_t)&type metadata for BigTextEffect);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<BloomTextEffect>.StyleModifier>, &lazy cache variable for type metadata for Text.Effect.Configuration<BloomTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect, (uint64_t)&type metadata for BloomTextEffect);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<ShakeVerticalTextEffect>.StyleModifier>, &lazy cache variable for type metadata for Text.Effect.Configuration<ShakeVerticalTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect, (uint64_t)&type metadata for ShakeVerticalTextEffect);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<Text.Effect.Configuration<ShakeHorizontalTextEffect>.StyleModifier>, &lazy cache variable for type metadata for Text.Effect.Configuration<ShakeHorizontalTextEffect>.StyleModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect, (uint64_t)&type metadata for ShakeHorizontalTextEffect);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.StopSegment>, (uint64_t)&type metadata for Text.Effect.StopSegment);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_SymbolEffect.Identified>, (uint64_t)&type metadata for _SymbolEffect.Identified);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityCustomContentEntry>, (uint64_t)&type metadata for AccessibilityCustomContentEntry);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<(String, String)>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<(name: String, value: String)>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<AnimationPath<Double>.Element>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewDebug.Data>, (uint64_t)&type metadata for _ViewDebug.Data);
}

uint64_t partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(uint64_t a1)
{
  return partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(a1, (uint64_t (*)(double, double, double, double))specialized UnaryLayoutEngine.childPlacement(at:));
}

{
  return partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(a1, (uint64_t (*)(double, double, double, double))specialized UnaryLayoutEngine.childPlacement(at:));
}

{
  return partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(a1, (uint64_t (*)(double, double, double, double))specialized UnaryLayoutEngine.childPlacement(at:));
}

{
  return partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(a1, (uint64_t (*)(double, double, double, double))specialized UnaryLayoutEngine.childPlacement(at:));
}

{
  return partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(a1, (uint64_t (*)(double, double, double, double))specialized UnaryLayoutEngine.childPlacement(at:));
}

{
  return partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(a1, (uint64_t (*)(double, double, double, double))specialized UnaryLayoutEngine.childPlacement(at:));
}

{
  return partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(a1, (uint64_t (*)(double, double, double, double))specialized UnaryLayoutEngine.childPlacement(at:));
}

{
  return partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(a1, (uint64_t (*)(double, double, double, double))specialized UnaryLayoutEngine.childPlacement(at:));
}

uint64_t partial apply for specialized closure #1 in UnaryChildGeometry.value.getter@<X0>(uint64_t a1@<X8>)
{
  return specialized UnaryLayoutEngine.childPlacement(at:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

double _FixedSizeLayout.placement(of:in:)@<D0>(uint64_t a1@<X1>, __int16 a2@<W2>, uint64_t a3@<X8>)
{
  double v5 = *(double *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 48);
  long long v22 = *(_OWORD *)(a1 + 24);
  PlacementContext.proposedSize.getter((uint64_t)&v23);
  uint64_t v7 = v23;
  char v8 = v24;
  uint64_t v9 = v25;
  char v10 = v26;
  if (v6)
  {
    Inputuint64_t Value = (double *)AGGraphGetInputValue();
    double v12 = *InputValue;
    double v13 = InputValue[1];
  }
  else
  {
    double v12 = v5;
    double v13 = *(double *)&v22;
  }
  if ((a2 & 0x100) != 0) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v9;
  }
  if (a2) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v7;
  }
  __asm { FMOV            V1.2D, #0.5 }
  *(_OWORD *)(a3 + 32) = _Q1;
  double result = v12 * 0.5;
  *(void *)a3 = v15;
  *(unsigned char *)(a3 + 8) = (a2 | v8) & 1;
  *(void *)(a3 + 16) = v14;
  *(unsigned char *)(a3 + 24) = (v10 | ((unsigned __int16)(a2 & 0x100) >> 8)) & 1;
  *(double *)(a3 + 48) = result;
  *(double *)(a3 + 56) = v13 * 0.5;
  return result;
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance _FixedSizeLayout@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (v2[1]) {
    __int16 v3 = 256;
  }
  else {
    __int16 v3 = 0;
  }
  return _FixedSizeLayout.placement(of:in:)(a1, v3 | *v2, a2);
}

uint64_t closure #1 in _withObservation<A>(do:)partial apply(uint64_t a1, void *a2)
{
  return partial apply for closure #1 in _withObservation<A>(do:)(a1, a2);
}

uint64_t partial apply for closure #1 in ForEachChild.updateValue()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ForEachChild.updateValue()(*(uint64_t **)(v1 + 16), *(void *)(v1 + 24), a1);
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance LayoutPriorityLayout@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return LayoutPriorityLayout.placement(of:in:)(a1, a2);
}

double LayoutPriorityLayout.placement(of:in:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double v3 = *(double *)(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 48);
  long long v19 = *(_OWORD *)(a1 + 24);
  PlacementContext.proposedSize.getter((uint64_t)&v20);
  uint64_t v5 = v20;
  char v6 = v21;
  uint64_t v7 = v22;
  char v8 = v23;
  if (v4)
  {
    Inputuint64_t Value = (double *)AGGraphGetInputValue();
    double v10 = *InputValue;
    double v11 = InputValue[1];
  }
  else
  {
    double v10 = v3;
    double v11 = *(double *)&v19;
  }
  double result = v10 * 0.5;
  *(void *)a2 = v5;
  double v13 = v11 * 0.5;
  *(unsigned char *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v7;
  *(unsigned char *)(a2 + 24) = v8;
  __asm { FMOV            V2.2D, #0.5 }
  *(_OWORD *)(a2 + 32) = _Q2;
  *(double *)(a2 + 48) = result;
  *(double *)(a2 + 56) = v13;
  return result;
}

double CGSize.inset(by:)(double a1, double a2, double a3, double a4, double a5)
{
  double v5 = a5 - (a2 + a4);
  if (v5 < 0.0) {
    return 0.0;
  }
  else {
    return v5;
  }
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance AnyLayout()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t destroy for SubviewsCollectionSlice(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for UnaryLayout.sizeThatFits(in:context:child:) in conformance _AspectRatioLayout(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (*(unsigned char *)(v3 + 9)) {
    __int16 v4 = 256;
  }
  else {
    __int16 v4 = 0;
  }
  return _AspectRatioLayout.sizeThatFits(in:context:child:)(a1, a2, a3, *(void *)v3, v4 | *(unsigned __int8 *)(v3 + 8));
}

uint64_t partial apply for closure #1 in ForEachState.item(at:offset:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ForEachState.item(at:offset:)(*(uint64_t **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t destroy for _ShapeStyle_Pack.Fill(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 80);
  return a3(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), v4);
}

uint64_t destroy for _ShapeStyle_Pack.Fill.AnimatableData(uint64_t a1, uint64_t a2)
{
  return destroy for _ShapeStyle_Pack.Fill(a1, a2, outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
}

uint64_t specialized UnaryLayoutEngine.childPlacement(at:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v6 = v5;
  uint64_t v12 = *(void *)(v5 + 8);
  int v57 = *(_DWORD *)(v5 + 16);
  uint64_t v13 = v5 + 256;
  uint64_t v75 = *(void *)(v5 + 208);
  uint64_t v76 = *(void *)(v5 + 200);
  uint64_t v73 = *(void *)(v5 + 224);
  uint64_t v74 = *(void *)(v5 + 216);
  uint64_t v71 = *(void *)(v5 + 240);
  uint64_t v72 = *(void *)(v5 + 232);
  uint64_t v69 = *(void *)(v5 + 256);
  uint64_t v70 = *(void *)(v5 + 248);
  uint64_t v67 = *(void *)(v5 + 272);
  uint64_t v68 = *(void *)(v5 + 264);
  uint64_t v65 = *(void *)(v5 + 288);
  uint64_t v66 = *(void *)(v5 + 280);
  char v14 = *(unsigned char *)(v5 + 296);
  uint64_t v15 = *(void *)(v5 + 304);
  uint64_t v16 = *(void *)(v5 + 312);
  uint64_t v17 = *(void *)(v5 + 320);
  uint64_t v18 = *(void *)(v5 + 328);
  uint64_t v19 = *(void *)(v5 + 336);
  uint64_t v20 = *(void *)(v5 + 344);
  uint64_t v21 = *(void *)(v5 + 352);
  uint64_t v22 = *(void *)(v5 + 360);
  uint64_t v23 = *(void *)(v5 + 368);
  uint64_t v24 = *(void *)(v5 + 376);
  uint64_t v25 = *(void *)(v5 + 384);
  uint64_t v26 = *(void *)(v5 + 392);
  char v27 = *(unsigned char *)(v5 + 400);
  long long v53 = *(_OWORD *)(v5 + 424);
  long long v54 = *(_OWORD *)(v5 + 408);
  long long v51 = *(_OWORD *)(v5 + 456);
  long long v52 = *(_OWORD *)(v5 + 440);
  long long v49 = *(_OWORD *)(v5 + 488);
  long long v50 = *(_OWORD *)(v5 + 472);
  char v28 = *(unsigned char *)(v5 + 504);
  double v84 = a2;
  double v85 = a3;
  double v86 = a4;
  double v87 = a5;
  uint64_t v63 = v21;
  uint64_t v64 = v20;
  uint64_t v61 = v23;
  uint64_t v62 = v22;
  uint64_t v59 = v25;
  uint64_t v60 = v24;
  uint64_t v58 = v26;
  if ((v14 & 1) == 0)
  {
    char v55 = v27;
    char v29 = v14;
    uint64_t v30 = v19;
    *(void *)&long long v77 = v76;
    *((void *)&v77 + 1) = v75;
    *(void *)&long long v78 = v74;
    *((void *)&v78 + 1) = v73;
    *(void *)&long long v79 = v72;
    *((void *)&v79 + 1) = v71;
    *(void *)&long long v80 = v70;
    *((void *)&v80 + 1) = v69;
    *(void *)&long long v81 = v68;
    *((void *)&v81 + 1) = v67;
    *(void *)&long long v82 = v66;
    *((void *)&v82 + 1) = v65;
    char v83 = 0;
    uint64_t result = specialized static ViewSize.== infix(_:_:)(&v84, (double *)&v77);
    if (result) {
      goto LABEL_9;
    }
    uint64_t v19 = v30;
    char v14 = v29;
    char v27 = v55;
    uint64_t v21 = v63;
    uint64_t v20 = v64;
    uint64_t v23 = v61;
    uint64_t v22 = v62;
    uint64_t v25 = v59;
    uint64_t v24 = v60;
    uint64_t v26 = v58;
  }
  if ((v27 & 1) == 0)
  {
    char v56 = v27;
    char v32 = v14;
    *(void *)&long long v77 = v15;
    *((void *)&v77 + 1) = v16;
    *(void *)&long long v78 = v17;
    *((void *)&v78 + 1) = v18;
    *(void *)&long long v79 = v19;
    *((void *)&v79 + 1) = v20;
    *(void *)&long long v80 = v21;
    *((void *)&v80 + 1) = v22;
    *(void *)&long long v81 = v23;
    *((void *)&v81 + 1) = v24;
    *(void *)&long long v82 = v25;
    *((void *)&v82 + 1) = v26;
    char v83 = 0;
    uint64_t v33 = v19;
    uint64_t result = specialized static ViewSize.== infix(_:_:)(&v84, (double *)&v77);
    if ((result & 1) == 0)
    {
      uint64_t v19 = v33;
      char v14 = v32;
      char v27 = v56;
      goto LABEL_7;
    }
LABEL_9:
    char v34 = BYTE8(v79);
    uint64_t v35 = v80;
    char v36 = BYTE8(v80);
    long long v37 = v81;
    long long v38 = v82;
    *(void *)a1 = v79;
    *(unsigned char *)(a1 + 8) = v34;
    *(void *)(a1 + 16) = v35;
    *(unsigned char *)(a1 + 24) = v36;
    *(_OWORD *)(a1 + 32) = v37;
    *(_OWORD *)(a1 + 48) = v38;
    return result;
  }
LABEL_7:
  uint64_t v48 = v19;
  if ((v28 & 1) == 0)
  {
    long long v77 = v54;
    long long v78 = v53;
    long long v79 = v52;
    long long v80 = v51;
    long long v81 = v50;
    long long v82 = v49;
    char v83 = 0;
    uint64_t result = specialized static ViewSize.== infix(_:_:)(&v84, (double *)&v77);
    if (result) {
      goto LABEL_9;
    }
  }
  *(void *)&long long v77 = v12;
  DWORD2(v77) = v57;
  *(double *)&long long v78 = a2;
  *((double *)&v78 + 1) = a3;
  *(double *)&long long v79 = a4;
  *((double *)&v79 + 1) = a5;
  LOBYTE(v80) = 0;
  uint64_t result = PlacementContext.proposedSize.getter((uint64_t)&v84);
  double v39 = v84;
  char v40 = LOBYTE(v85);
  *(double *)a1 = v84;
  *(unsigned char *)(a1 + 8) = v40;
  double v41 = v86;
  *(double *)(a1 + 16) = v86;
  char v42 = LOBYTE(v87);
  *(unsigned char *)(a1 + 24) = LOBYTE(v87);
  __asm { FMOV            V2.2D, #0.5 }
  *(_OWORD *)(a1 + 32) = _Q2;
  *(double *)(a1 + 48) = a2 * 0.5;
  *(double *)(a1 + 56) = a3 * 0.5;
  *(void *)(v6 + 408) = v15;
  *(void *)(v6 + 416) = v16;
  *(void *)(v6 + 424) = v17;
  *(void *)(v6 + 432) = v18;
  *(void *)(v6 + 440) = v48;
  *(void *)(v6 + 448) = v64;
  *(void *)(v6 + 456) = v63;
  *(void *)(v6 + 464) = v62;
  *(void *)(v6 + 472) = v61;
  *(void *)(v6 + 480) = v60;
  *(void *)(v6 + 488) = v59;
  *(void *)(v6 + 496) = v58;
  *(unsigned char *)(v13 + 248) = v27;
  *(void *)(v6 + 304) = v76;
  *(void *)(v6 + 312) = v75;
  *(void *)(v6 + 320) = v74;
  *(void *)(v6 + 328) = v73;
  *(void *)(v6 + 336) = v72;
  *(void *)(v6 + 344) = v71;
  *(void *)(v6 + 352) = v70;
  *(void *)(v6 + 360) = v69;
  *(void *)(v6 + 368) = v68;
  *(void *)(v6 + 376) = v67;
  *(void *)(v6 + 384) = v66;
  *(void *)(v6 + 392) = v65;
  *(unsigned char *)(v13 + 144) = v14;
  *(double *)(v6 + 232) = v39;
  *(unsigned char *)(v6 + 240) = v40;
  *(double *)(v6 + 248) = v41;
  *(unsigned char *)uint64_t v13 = v42;
  *(double *)(v6 + 200) = a2;
  *(double *)(v6 + 208) = a3;
  *(double *)(v6 + 216) = a4;
  *(double *)(v6 + 224) = a5;
  *(double *)(v6 + 280) = a2 * 0.5;
  *(double *)(v6 + 288) = a3 * 0.5;
  *(_OWORD *)(v13 + 8) = _Q2;
  *(unsigned char *)(v13 + 40) = 0;
  return result;
}

{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  long long v36;
  long long v37;
  char v38;
  double v39;
  char v40;
  double v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  int v58;
  int v59;
  int v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  char v86;
  double v87;
  double v88;
  double v89;
  double v90;

  uint64_t v6 = v5;
  uint64_t v59 = *v5;
  uint64_t v60 = v5[1];
  uint64_t v12 = *(void *)(v5 + 4);
  uint64_t v13 = v5 + 256;
  uint64_t v58 = *((_DWORD *)v5 + 3);
  long long v78 = *((void *)v5 + 26);
  long long v79 = *((void *)v5 + 25);
  uint64_t v76 = *((void *)v5 + 28);
  long long v77 = *((void *)v5 + 27);
  uint64_t v74 = *((void *)v5 + 30);
  uint64_t v75 = *((void *)v5 + 29);
  uint64_t v72 = *((void *)v5 + 32);
  uint64_t v73 = *((void *)v5 + 31);
  uint64_t v70 = *((void *)v5 + 34);
  uint64_t v71 = *((void *)v5 + 33);
  uint64_t v68 = *((void *)v5 + 36);
  uint64_t v69 = *((void *)v5 + 35);
  char v14 = v5[296];
  uint64_t v15 = *((void *)v5 + 38);
  uint64_t v16 = *((void *)v5 + 39);
  uint64_t v17 = *((void *)v5 + 40);
  uint64_t v18 = *((void *)v5 + 41);
  uint64_t v19 = *((void *)v5 + 42);
  uint64_t v20 = *((void *)v5 + 43);
  uint64_t v21 = *((void *)v5 + 44);
  uint64_t v22 = *((void *)v5 + 45);
  uint64_t v23 = *((void *)v5 + 46);
  uint64_t v24 = *((void *)v5 + 47);
  uint64_t v25 = *((void *)v5 + 48);
  uint64_t v26 = *((void *)v5 + 49);
  char v56 = *(_OWORD *)(v5 + 424);
  int v57 = *(_OWORD *)(v5 + 408);
  long long v54 = *(_OWORD *)(v5 + 456);
  char v55 = *(_OWORD *)(v5 + 440);
  long long v52 = *(_OWORD *)(v5 + 488);
  long long v53 = *(_OWORD *)(v5 + 472);
  double v87 = a2;
  uint64_t v88 = a3;
  char v89 = a4;
  char v90 = a5;
  char v27 = v5[400];
  char v28 = v5[504];
  uint64_t v66 = v22;
  uint64_t v67 = v21;
  uint64_t v64 = v24;
  uint64_t v65 = v23;
  uint64_t v62 = v26;
  uint64_t v63 = v25;
  uint64_t v61 = v27;
  if ((v14 & 1) == 0)
  {
    long long v49 = v20;
    char v29 = v14;
    uint64_t v30 = v19;
    *(void *)&long long v80 = v79;
    *((void *)&v80 + 1) = v78;
    *(void *)&long long v81 = v77;
    *((void *)&v81 + 1) = v76;
    *(void *)&long long v82 = v75;
    *((void *)&v82 + 1) = v74;
    *(void *)&char v83 = v73;
    *((void *)&v83 + 1) = v72;
    *(void *)&double v84 = v71;
    *((void *)&v84 + 1) = v70;
    *(void *)&double v85 = v69;
    *((void *)&v85 + 1) = v68;
    double v86 = 0;
    uint64_t result = specialized static ViewSize.== infix(_:_:)(&v87, (double *)&v80);
    if (result) {
      goto LABEL_9;
    }
    uint64_t v19 = v30;
    char v14 = v29;
    uint64_t v20 = v49;
    uint64_t v22 = v66;
    uint64_t v21 = v67;
    uint64_t v24 = v64;
    uint64_t v23 = v65;
    uint64_t v26 = v62;
    uint64_t v25 = v63;
    char v27 = v61;
  }
  if ((v27 & 1) == 0)
  {
    long long v50 = v14;
    *(void *)&long long v80 = v15;
    *((void *)&v80 + 1) = v16;
    *(void *)&long long v81 = v17;
    *((void *)&v81 + 1) = v18;
    *(void *)&long long v82 = v19;
    *((void *)&v82 + 1) = v20;
    *(void *)&char v83 = v21;
    *((void *)&v83 + 1) = v22;
    *(void *)&double v84 = v23;
    *((void *)&v84 + 1) = v24;
    *(void *)&double v85 = v25;
    *((void *)&v85 + 1) = v26;
    double v86 = 0;
    char v32 = v19;
    uint64_t result = specialized static ViewSize.== infix(_:_:)(&v87, (double *)&v80);
    if ((result & 1) == 0)
    {
      uint64_t v19 = v32;
      char v14 = v50;
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v33 = BYTE8(v82);
    char v34 = v83;
    uint64_t v35 = BYTE8(v83);
    char v36 = v84;
    long long v37 = v85;
    *(void *)a1 = v82;
    *(unsigned char *)(a1 + 8) = v33;
    *(void *)(a1 + 16) = v34;
    *(unsigned char *)(a1 + 24) = v35;
    *(_OWORD *)(a1 + 32) = v36;
    *(_OWORD *)(a1 + 48) = v37;
    return result;
  }
LABEL_7:
  long long v51 = v19;
  if ((v28 & 1) == 0)
  {
    long long v80 = v57;
    long long v81 = v56;
    long long v82 = v55;
    char v83 = v54;
    double v84 = v53;
    double v85 = v52;
    double v86 = 0;
    uint64_t result = specialized static ViewSize.== infix(_:_:)(&v87, (double *)&v80);
    if (result) {
      goto LABEL_9;
    }
  }
  *(void *)&long long v80 = v12;
  DWORD2(v80) = v58;
  *(double *)&long long v81 = a2;
  *((double *)&v81 + 1) = a3;
  *(double *)&long long v82 = a4;
  *((double *)&v82 + 1) = a5;
  LOBYTE(v83) = 0;
  uint64_t result = PlacementContext.proposedSize.getter((uint64_t)&v87);
  long long v38 = v59 | LOBYTE(v88);
  double v39 = v87;
  if (v59) {
    double v39 = 0.0;
  }
  char v40 = v60 | LOBYTE(v90);
  double v41 = v89;
  if (v60) {
    double v41 = 0.0;
  }
  *(double *)a1 = v39;
  char v42 = v38 & 1;
  *(unsigned char *)(a1 + 8) = v42;
  *(double *)(a1 + 16) = v41;
  double v43 = v40 & 1;
  *(unsigned char *)(a1 + 24) = v43;
  __asm { FMOV            V2.2D, #0.5 }
  *(_OWORD *)(a1 + 32) = _Q2;
  *(double *)(a1 + 48) = a2 * 0.5;
  *(double *)(a1 + 56) = a3 * 0.5;
  *((void *)v6 + 51) = v15;
  *((void *)v6 + 52) = v16;
  *((void *)v6 + 53) = v17;
  *((void *)v6 + 54) = v18;
  *((void *)v6 + 55) = v51;
  *((void *)v6 + 56) = v20;
  *((void *)v6 + 57) = v67;
  *((void *)v6 + 58) = v66;
  *((void *)v6 + 59) = v65;
  *((void *)v6 + 60) = v64;
  *((void *)v6 + 61) = v63;
  *((void *)v6 + 62) = v62;
  v13[248] = v61;
  *((void *)v6 + 38) = v79;
  *((void *)v6 + 39) = v78;
  *((void *)v6 + 40) = v77;
  *((void *)v6 + 41) = v76;
  *((void *)v6 + 42) = v75;
  *((void *)v6 + 43) = v74;
  *((void *)v6 + 44) = v73;
  *((void *)v6 + 45) = v72;
  *((void *)v6 + 46) = v71;
  *((void *)v6 + 47) = v70;
  *((void *)v6 + 48) = v69;
  *((void *)v6 + 49) = v68;
  v13[144] = v14;
  *((double *)v6 + 29) = v39;
  v6[240] = v42;
  *((double *)v6 + 31) = v41;
  char *v13 = v43;
  *((double *)v6 + 25) = a2;
  *((double *)v6 + 26) = a3;
  *((double *)v6 + 27) = a4;
  *((double *)v6 + 28) = a5;
  *((double *)v6 + 35) = a2 * 0.5;
  *((double *)v6 + 36) = a3 * 0.5;
  *(_OWORD *)(v13 + 8) = _Q2;
  v13[40] = 0;
  return result;
}

{
  uint64_t v5;
  uint64_t v11;
  long long v12;
  long long v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  long long v35;
  long long v36;
  double v37;
  char v38;
  double v39;
  char v40;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  long long v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  char v70;
  double v71;
  double v72;
  double v73;
  double v74;
  _OWORD __dst[32];

  memcpy(__dst, (const void *)v5, 0x1F9uLL);
  double v11 = *(void *)&__dst[13];
  uint64_t v12 = *(_OWORD *)((char *)&__dst[13] + 8);
  uint64_t v13 = *(_OWORD *)((char *)&__dst[14] + 8);
  uint64_t v62 = *(void *)&__dst[16];
  uint64_t v63 = *((void *)&__dst[15] + 1);
  uint64_t v60 = *(void *)&__dst[17];
  uint64_t v61 = *((void *)&__dst[16] + 1);
  uint64_t v59 = *((void *)&__dst[17] + 1);
  int v57 = *((void *)&__dst[12] + 1);
  uint64_t v58 = *(void *)&__dst[18];
  char v14 = BYTE8(__dst[18]);
  uint64_t v71 = a2;
  uint64_t v72 = a3;
  uint64_t v73 = a4;
  uint64_t v74 = a5;
  if ((BYTE8(__dst[18]) & 1) == 0)
  {
    uint64_t v64 = *(_OWORD *)((char *)&__dst[12] + 8);
    uint64_t v65 = *(_OWORD *)((char *)&__dst[13] + 8);
    uint64_t v66 = *(_OWORD *)((char *)&__dst[14] + 8);
    uint64_t v67 = *(_OWORD *)((char *)&__dst[15] + 8);
    uint64_t v68 = *(_OWORD *)((char *)&__dst[16] + 8);
    uint64_t v69 = *(_OWORD *)((char *)&__dst[17] + 8);
    uint64_t v70 = 0;
    uint64_t result = specialized static ViewSize.== infix(_:_:)(&v71, (double *)&v64);
    if (result) {
      goto LABEL_8;
    }
  }
  uint64_t v17 = *((void *)&__dst[19] + 1);
  uint64_t v16 = *(void *)&__dst[19];
  char v56 = *((void *)&__dst[20] + 1);
  long long v54 = v11;
  uint64_t v18 = *((void *)&__dst[21] + 1);
  char v55 = *(void *)&__dst[21];
  uint64_t v20 = *((void *)&__dst[22] + 1);
  uint64_t v19 = *(void *)&__dst[22];
  uint64_t v21 = *((void *)&__dst[23] + 1);
  uint64_t v22 = *((void *)&__dst[24] + 1);
  uint64_t v23 = *(void *)&__dst[24];
  long long v53 = __dst[25];
  long long v51 = *(void *)&__dst[23];
  long long v52 = *(void *)&__dst[20];
  if ((__dst[25] & 1) == 0)
  {
    uint64_t v47 = v14;
    uint64_t v64 = __dst[19];
    uint64_t v65 = __dst[20];
    uint64_t v66 = __dst[21];
    uint64_t v67 = __dst[22];
    uint64_t v68 = __dst[23];
    uint64_t v69 = __dst[24];
    uint64_t v70 = 0;
    char v46 = *((void *)&__dst[21] + 1);
    uint64_t v24 = *((void *)&__dst[19] + 1);
    uint64_t v25 = *(void *)&__dst[19];
    uint64_t v26 = *((void *)&__dst[22] + 1);
    char v27 = *(void *)&__dst[22];
    char v28 = *((void *)&__dst[24] + 1);
    char v29 = *(void *)&__dst[24];
    uint64_t v30 = *((void *)&__dst[23] + 1);
    uint64_t result = specialized static ViewSize.== infix(_:_:)(&v71, (double *)&v64);
    if (result)
    {
LABEL_8:
      char v32 = BYTE8(v66);
      uint64_t v33 = v67;
      char v34 = BYTE8(v67);
      uint64_t v35 = v68;
      char v36 = v69;
      *(void *)a1 = v66;
      *(unsigned char *)(a1 + 8) = v32;
      *(void *)(a1 + 16) = v33;
      *(unsigned char *)(a1 + 24) = v34;
      *(_OWORD *)(a1 + 32) = v35;
      *(_OWORD *)(a1 + 48) = v36;
      return result;
    }
    uint64_t v16 = v25;
    uint64_t v17 = v24;
    uint64_t v18 = v46;
    uint64_t v31 = v28;
    char v14 = v47;
    uint64_t v19 = v27;
    uint64_t v20 = v26;
    uint64_t v21 = v30;
    uint64_t v23 = v29;
    uint64_t v22 = v31;
  }
  uint64_t v48 = v21;
  long long v49 = v19;
  long long v50 = v16;
  if ((BYTE8(__dst[31]) & 1) == 0)
  {
    uint64_t v64 = *(_OWORD *)((char *)&__dst[25] + 8);
    uint64_t v65 = *(_OWORD *)((char *)&__dst[26] + 8);
    uint64_t v66 = *(_OWORD *)((char *)&__dst[27] + 8);
    uint64_t v67 = *(_OWORD *)((char *)&__dst[28] + 8);
    uint64_t v68 = *(_OWORD *)((char *)&__dst[29] + 8);
    uint64_t v69 = *(_OWORD *)((char *)&__dst[30] + 8);
    uint64_t v70 = 0;
    uint64_t result = specialized static ViewSize.== infix(_:_:)(&v71, (double *)&v64);
    if (result) {
      goto LABEL_8;
    }
  }
  *(void *)&uint64_t v64 = *((void *)&__dst[0] + 1);
  DWORD2(v64) = __dst[1];
  *(double *)&uint64_t v65 = a2;
  *((double *)&v65 + 1) = a3;
  *(double *)&uint64_t v66 = a4;
  *((double *)&v66 + 1) = a5;
  LOBYTE(v67) = 0;
  outlined retain of RadialGradient(__dst);
  PlacementContext.proposedSize.getter((uint64_t)&v71);
  long long v37 = v71;
  long long v38 = LOBYTE(v72);
  *(double *)a1 = v71;
  *(unsigned char *)(a1 + 8) = v38;
  double v39 = v73;
  *(double *)(a1 + 16) = v73;
  char v40 = LOBYTE(v74);
  *(unsigned char *)(a1 + 24) = LOBYTE(v74);
  __asm { FMOV            V2.2D, #0.5 }
  *(_OWORD *)(a1 + 32) = _Q2;
  *(double *)(a1 + 48) = a2 * 0.5;
  *(double *)(a1 + 56) = a3 * 0.5;
  *(void *)(v5 + 408) = v50;
  *(void *)(v5 + 416) = v17;
  *(void *)(v5 + 424) = v52;
  *(void *)(v5 + 432) = v56;
  *(void *)(v5 + 440) = v55;
  *(void *)(v5 + 448) = v18;
  *(void *)(v5 + 456) = v49;
  *(void *)(v5 + 464) = v20;
  *(void *)(v5 + 472) = v51;
  *(void *)(v5 + 480) = v48;
  *(void *)(v5 + 488) = v23;
  *(void *)(v5 + 496) = v22;
  *(unsigned char *)(v5 + 504) = v53;
  *(void *)(v5 + 304) = v57;
  *(void *)(v5 + 312) = v54;
  *(_OWORD *)(v5 + 320) = v12;
  *(_OWORD *)(v5 + 336) = v13;
  *(void *)(v5 + 352) = v63;
  *(void *)(v5 + 360) = v62;
  *(void *)(v5 + 368) = v61;
  *(void *)(v5 + 376) = v60;
  *(void *)(v5 + 384) = v59;
  *(void *)(v5 + 392) = v58;
  *(unsigned char *)(v5 + 400) = v14;
  *(double *)(v5 + 232) = v37;
  *(unsigned char *)(v5 + 240) = v38;
  *(double *)(v5 + 248) = v39;
  *(unsigned char *)(v5 + 256) = v40;
  *(void *)(v5 + 264) = 0x3FE0000000000000;
  *(void *)(v5 + 272) = 0x3FE0000000000000;
  *(double *)(v5 + 200) = a2;
  *(double *)(v5 + 208) = a3;
  *(double *)(v5 + 216) = a4;
  *(double *)(v5 + 224) = a5;
  *(double *)(v5 + 280) = a2 * 0.5;
  *(double *)(v5 + 288) = a3 * 0.5;
  *(unsigned char *)(v5 + 296) = 0;
  return outlined release of RadialGradient(__dst);
}

{
  long long *v5;
  long long *v6;
  long long v12;
  unsigned char *v13;
  long long v14;
  long long v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t result;
  char v25;
  uint64_t v26;
  char v27;
  long long v28;
  long long v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  char v33;
  char v34;
  char v35;
  char v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  uint64_t v44;
  long long v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  char v76;
  char v77;
  char v78;
  double v79[4];
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;

  uint64_t v6 = v5;
  uint64_t v12 = v5[5];
  uint64_t v13 = (char *)v5 + 344;
  double v84 = v5[4];
  double v85 = v12;
  double v86 = v5[6];
  char v14 = v5[1];
  long long v80 = *v5;
  long long v81 = v14;
  uint64_t v15 = v5[3];
  long long v82 = v5[2];
  char v83 = v15;
  uint64_t v16 = *((void *)v5 + 14);
  uint64_t v17 = *((_DWORD *)v5 + 30);
  uint64_t v48 = *(void *)((char *)v6 + 124);
  uint64_t v47 = *((_DWORD *)v6 + 33);
  uint64_t v18 = *((void *)v6 + 38);
  uint64_t v19 = *((void *)v6 + 39);
  uint64_t v68 = *((void *)v6 + 41);
  uint64_t v69 = *((void *)v6 + 40);
  uint64_t v66 = *((void *)v6 + 43);
  uint64_t v67 = *((void *)v6 + 42);
  uint64_t v64 = *((void *)v6 + 45);
  uint64_t v65 = *((void *)v6 + 44);
  uint64_t v62 = *((void *)v6 + 47);
  uint64_t v63 = *((void *)v6 + 46);
  uint64_t v20 = *((void *)v6 + 49);
  uint64_t v21 = v13[56];
  uint64_t v60 = *((void *)v6 + 51);
  uint64_t v61 = *((void *)v6 + 48);
  uint64_t v58 = *((void *)v6 + 53);
  uint64_t v59 = *((void *)v6 + 52);
  char v56 = *((void *)v6 + 55);
  int v57 = *((void *)v6 + 54);
  long long v54 = *((void *)v6 + 57);
  char v55 = *((void *)v6 + 56);
  long long v52 = *((void *)v6 + 59);
  long long v53 = *((void *)v6 + 58);
  long long v50 = *((void *)v6 + 61);
  long long v51 = *((void *)v6 + 60);
  long long v49 = *((void *)v6 + 62);
  double v43 = v6[33];
  uint64_t v45 = v6[32];
  double v41 = v6[35];
  char v42 = v6[34];
  double v39 = v6[37];
  char v40 = v6[36];
  v79[0] = a2;
  v79[1] = a3;
  v79[2] = a4;
  v79[3] = a5;
  uint64_t v22 = v13[160];
  uint64_t v23 = *((unsigned char *)v6 + 608);
  if ((v21 & 1) == 0)
  {
    *(void *)&uint64_t v70 = v18;
    *((void *)&v70 + 1) = v19;
    *(void *)&uint64_t v71 = v69;
    *((void *)&v71 + 1) = v68;
    *(void *)&uint64_t v72 = v67;
    *((void *)&v72 + 1) = v66;
    *(void *)&uint64_t v73 = v65;
    *((void *)&v73 + 1) = v64;
    *(void *)&uint64_t v74 = v63;
    *((void *)&v74 + 1) = v62;
    *(void *)&uint64_t v75 = v61;
    *((void *)&v75 + 1) = v20;
    uint64_t v76 = 0;
    uint64_t result = specialized static ViewSize.== infix(_:_:)(v79, (double *)&v70);
    if (result) {
      goto LABEL_7;
    }
  }
  if ((v22 & 1) == 0)
  {
    *(void *)&uint64_t v70 = v60;
    *((void *)&v70 + 1) = v59;
    *(void *)&uint64_t v71 = v58;
    *((void *)&v71 + 1) = v57;
    *(void *)&uint64_t v72 = v56;
    *((void *)&v72 + 1) = v55;
    *(void *)&uint64_t v73 = v54;
    *((void *)&v73 + 1) = v53;
    *(void *)&uint64_t v74 = v52;
    *((void *)&v74 + 1) = v51;
    *(void *)&uint64_t v75 = v50;
    *((void *)&v75 + 1) = v49;
    uint64_t v76 = 0;
    uint64_t result = specialized static ViewSize.== infix(_:_:)(v79, (double *)&v70);
    if (result) {
      goto LABEL_7;
    }
  }
  if ((v23 & 1) == 0)
  {
    uint64_t v70 = v45;
    uint64_t v71 = v43;
    uint64_t v72 = v42;
    uint64_t v73 = v41;
    uint64_t v74 = v40;
    uint64_t v75 = v39;
    uint64_t v76 = 0;
    uint64_t result = specialized static ViewSize.== infix(_:_:)(v79, (double *)&v70);
    if (result)
    {
LABEL_7:
      uint64_t v25 = BYTE8(v72);
      uint64_t v26 = v73;
      char v27 = BYTE8(v73);
      char v28 = v74;
      char v29 = v75;
      *(void *)a1 = v72;
      *(unsigned char *)(a1 + 8) = v25;
      *(void *)(a1 + 16) = v26;
      *(unsigned char *)(a1 + 24) = v27;
      *(_OWORD *)(a1 + 32) = v28;
      *(_OWORD *)(a1 + 48) = v29;
      return result;
    }
  }
  double v44 = v19;
  char v46 = v18;
  *(void *)&uint64_t v70 = v16;
  DWORD2(v70) = v17;
  *(double *)&uint64_t v71 = a2;
  *((double *)&v71 + 1) = a3;
  *(double *)&uint64_t v72 = a4;
  *((double *)&v72 + 1) = a5;
  LOBYTE(v73) = 0;
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  uint64_t v30 = *(void *)&a2;
  uint64_t v31 = *(void *)&a3;
  char v32 = static _SemanticFeature_v5.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v32) {
      goto LABEL_14;
    }
LABEL_16:
    uint64_t v30 = proposedDimension #1 (_:min:ideal:max:) in _FlexFrameLayout.childPlacementProposal(of:context:)(0, v80, SBYTE8(v80), v81, SBYTE8(v81), v82, SBYTE8(v82), (uint64_t)&v70);
    uint64_t v33 = v35 & 1;
    uint64_t v31 = proposedDimension #1 (_:min:ideal:max:) in _FlexFrameLayout.childPlacementProposal(of:context:)(1, v83, SBYTE8(v83), v84, SBYTE8(v84), v85, SBYTE8(v85), (uint64_t)&v70);
    char v34 = v36 & 1;
    goto LABEL_17;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_16;
  }
LABEL_14:
  uint64_t v33 = 0;
  char v34 = 0;
LABEL_17:
  long long v78 = v33;
  long long v77 = v34;
  uint64_t result = specialized FrameLayoutCommon.commonPlacement(of:in:childProposal:)(v48, v47, (uint64_t)&v70, v30, v33, v31, v34, a1);
  *((unsigned char *)v6 + 608) = v22;
  *((void *)v6 + 64) = v60;
  *((void *)v6 + 65) = v59;
  *((void *)v6 + 66) = v58;
  *((void *)v6 + 67) = v57;
  *((void *)v6 + 68) = v56;
  *((void *)v6 + 69) = v55;
  *((void *)v6 + 70) = v54;
  *((void *)v6 + 71) = v53;
  *((void *)v6 + 72) = v52;
  *((void *)v6 + 73) = v51;
  *((void *)v6 + 74) = v50;
  *((void *)v6 + 75) = v49;
  *((void *)v6 + 51) = v46;
  *((void *)v6 + 52) = v44;
  *((void *)v6 + 53) = v69;
  *((void *)v6 + 54) = v68;
  *((void *)v6 + 55) = v67;
  *((void *)v6 + 56) = v66;
  *((void *)v6 + 57) = v65;
  *((void *)v6 + 58) = v64;
  *((void *)v6 + 59) = v63;
  *((void *)v6 + 60) = v62;
  *((void *)v6 + 61) = v61;
  *((void *)v6 + 62) = v20;
  v13[160] = v21;
  *((void *)v6 + 42) = *(void *)a1;
  char *v13 = *(unsigned char *)(a1 + 8);
  *((void *)v6 + 44) = *(void *)(a1 + 16);
  v13[16] = *(unsigned char *)(a1 + 24);
  long long v37 = *(_OWORD *)(a1 + 32);
  long long v38 = *(_OWORD *)(a1 + 48);
  *((double *)v6 + 38) = a2;
  *((double *)v6 + 39) = a3;
  *((double *)v6 + 40) = a4;
  *((double *)v6 + 41) = a5;
  v6[23] = v37;
  v6[24] = v38;
  v13[56] = 0;
  return result;
}

{
  long long *v5;
  long long *v6;
  long long v12;
  unsigned char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  long long v39;
  long long v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  long long v45;
  long long v46;
  uint64_t v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  long long v78;
  long long v79;
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  char v84;
  long long v85;
  long long v86;
  long long v87;
  char v88;
  unsigned char v89[8];
  char v90;
  uint64_t v91;
  char v92;
  long long v93;
  _OWORD v94[3];

  uint64_t v6 = v5;
  uint64_t v12 = v5[1];
  uint64_t v13 = (char *)v5 + 280;
  uint64_t v93 = *v5;
  v94[0] = v12;
  v94[1] = v5[2];
  char v14 = *((void *)v5 + 6);
  char v56 = *((_DWORD *)v5 + 14);
  uint64_t v58 = *(void *)((char *)v5 + 60);
  int v57 = *((_DWORD *)v5 + 17);
  uint64_t v66 = *((void *)v5 + 31);
  uint64_t v67 = *((void *)v5 + 30);
  uint64_t v76 = *((void *)v5 + 33);
  long long v77 = *((void *)v5 + 32);
  uint64_t v74 = *((void *)v5 + 35);
  uint64_t v75 = *((void *)v5 + 34);
  uint64_t v72 = *((void *)v5 + 37);
  uint64_t v73 = *((void *)v5 + 36);
  uint64_t v70 = *((void *)v5 + 39);
  uint64_t v71 = *((void *)v5 + 38);
  uint64_t v68 = *((void *)v5 + 41);
  uint64_t v69 = *((void *)v5 + 40);
  uint64_t v15 = *((unsigned char *)v5 + 336);
  uint64_t v16 = *((void *)v5 + 43);
  uint64_t v65 = *((void *)v5 + 44);
  uint64_t v17 = *((void *)v5 + 45);
  uint64_t v19 = *((void *)v6 + 46);
  uint64_t v18 = *((void *)v6 + 47);
  uint64_t v20 = *((void *)v6 + 48);
  uint64_t v21 = *((void *)v6 + 49);
  uint64_t v22 = *((void *)v6 + 50);
  uint64_t v23 = *((void *)v6 + 51);
  uint64_t v24 = *((void *)v6 + 52);
  uint64_t v25 = *((void *)v6 + 53);
  uint64_t v26 = *((void *)v6 + 54);
  long long v52 = v6[29];
  long long v53 = v6[28];
  long long v50 = v6[31];
  long long v51 = v6[30];
  uint64_t v48 = v6[33];
  long long v49 = v6[32];
  *(double *)&double v85 = a2;
  *((double *)&v85 + 1) = a3;
  *(double *)&double v86 = a4;
  *((double *)&v86 + 1) = a5;
  char v27 = v13[160];
  char v28 = *((unsigned char *)v6 + 544);
  uint64_t v59 = v15;
  uint64_t v60 = v27;
  uint64_t v63 = v24;
  uint64_t v64 = v22;
  uint64_t v61 = v25;
  uint64_t v62 = v26;
  if ((v15 & 1) == 0)
  {
    long long v54 = v23;
    char v29 = v16;
    *(void *)&long long v78 = v67;
    *((void *)&v78 + 1) = v66;
    *(void *)&long long v79 = v77;
    *((void *)&v79 + 1) = v76;
    *(void *)&long long v80 = v75;
    *((void *)&v80 + 1) = v74;
    *(void *)&long long v81 = v73;
    *((void *)&v81 + 1) = v72;
    *(void *)&long long v82 = v71;
    *((void *)&v82 + 1) = v70;
    *(void *)&char v83 = v69;
    *((void *)&v83 + 1) = v68;
    double v84 = 0;
    uint64_t result = specialized static ViewSize.== infix(_:_:)((double *)&v85, (double *)&v78);
    if (result) {
      goto LABEL_9;
    }
    uint64_t v16 = v29;
    uint64_t v23 = v54;
    uint64_t v24 = v63;
    uint64_t v22 = v64;
    uint64_t v25 = v61;
    uint64_t v26 = v62;
    char v27 = v60;
  }
  if ((v27 & 1) == 0)
  {
    *(void *)&long long v78 = v16;
    *((void *)&v78 + 1) = v65;
    *(void *)&long long v79 = v17;
    *((void *)&v79 + 1) = v19;
    *(void *)&long long v80 = v18;
    *((void *)&v80 + 1) = v20;
    *(void *)&long long v81 = v21;
    *((void *)&v81 + 1) = v22;
    *(void *)&long long v82 = v23;
    *((void *)&v82 + 1) = v24;
    *(void *)&char v83 = v25;
    *((void *)&v83 + 1) = v26;
    double v84 = 0;
    char v55 = v21;
    uint64_t v31 = v20;
    char v32 = v18;
    uint64_t v33 = v19;
    char v34 = v17;
    uint64_t v35 = v16;
    uint64_t result = specialized static ViewSize.== infix(_:_:)((double *)&v85, (double *)&v78);
    if ((result & 1) == 0)
    {
      uint64_t v16 = v35;
      uint64_t v17 = v34;
      uint64_t v19 = v33;
      uint64_t v18 = v32;
      uint64_t v20 = v31;
      uint64_t v21 = v55;
      goto LABEL_7;
    }
LABEL_9:
    char v36 = BYTE8(v80);
    long long v37 = v81;
    long long v38 = BYTE8(v81);
    double v39 = v82;
    char v40 = v83;
    *(void *)a1 = v80;
    *(unsigned char *)(a1 + 8) = v36;
    *(void *)(a1 + 16) = v37;
    *(unsigned char *)(a1 + 24) = v38;
    *(_OWORD *)(a1 + 32) = v39;
    *(_OWORD *)(a1 + 48) = v40;
    return result;
  }
LABEL_7:
  uint64_t v47 = v16;
  if ((v28 & 1) == 0)
  {
    long long v78 = v53;
    long long v79 = v52;
    long long v80 = v51;
    long long v81 = v50;
    long long v82 = v49;
    char v83 = v48;
    double v84 = 0;
    uint64_t result = specialized static ViewSize.== infix(_:_:)((double *)&v85, (double *)&v78);
    if (result) {
      goto LABEL_9;
    }
  }
  *(void *)&long long v78 = v14;
  DWORD2(v78) = v56;
  *(double *)&long long v79 = a2;
  *((double *)&v79 + 1) = a3;
  *(double *)&long long v80 = a4;
  *((double *)&v80 + 1) = a5;
  LOBYTE(v81) = 0;
  double v85 = v78;
  double v86 = v79;
  double v87 = v80;
  uint64_t v88 = 0;
  PlacementContext.proposedSize.getter((uint64_t)v89);
  if (BYTE8(v93)) {
    double v41 = (uint64_t *)v89;
  }
  else {
    double v41 = (uint64_t *)&v93;
  }
  char v42 = *v41;
  double v43 = (uint64_t *)v94;
  if (BYTE8(v94[0])) {
    double v43 = &v91;
  }
  double v44 = *v43;
  LOBYTE(v85) = BYTE8(v93) & v90;
  v89[0] = BYTE8(v94[0]) & v92;
  uint64_t result = specialized FrameLayoutCommon.commonPlacement(of:in:childProposal:)(v58, v57, (uint64_t)&v78, v42, BYTE8(v93) & v90, v44, BYTE8(v94[0]) & v92, a1);
  *((unsigned char *)v6 + 544) = v60;
  *((void *)v6 + 56) = v47;
  *((void *)v6 + 57) = v65;
  *((void *)v6 + 58) = v17;
  *((void *)v6 + 59) = v19;
  *((void *)v6 + 60) = v18;
  *((void *)v6 + 61) = v20;
  *((void *)v6 + 62) = v21;
  *((void *)v6 + 63) = v64;
  *((void *)v6 + 64) = v23;
  *((void *)v6 + 65) = v63;
  *((void *)v6 + 66) = v61;
  *((void *)v6 + 67) = v62;
  *((void *)v6 + 43) = v67;
  *((void *)v6 + 44) = v66;
  *((void *)v6 + 45) = v77;
  *((void *)v6 + 46) = v76;
  *((void *)v6 + 47) = v75;
  *((void *)v6 + 48) = v74;
  *((void *)v6 + 49) = v73;
  *((void *)v6 + 50) = v72;
  *((void *)v6 + 51) = v71;
  *((void *)v6 + 52) = v70;
  *((void *)v6 + 53) = v69;
  *((void *)v6 + 54) = v68;
  v13[160] = v59;
  *((void *)v6 + 34) = *(void *)a1;
  char *v13 = *(unsigned char *)(a1 + 8);
  *((void *)v6 + 36) = *(void *)(a1 + 16);
  v13[16] = *(unsigned char *)(a1 + 24);
  uint64_t v45 = *(_OWORD *)(a1 + 32);
  char v46 = *(_OWORD *)(a1 + 48);
  *((double *)v6 + 30) = a2;
  *((double *)v6 + 31) = a3;
  *((double *)v6 + 32) = a4;
  *((double *)v6 + 33) = a5;
  v6[19] = v45;
  v6[20] = v46;
  v13[56] = 0;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t result;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  long long v37;
  long long v38;
  double v39;
  char v40;
  double v41;
  char v42;
  uint64_t v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  char v55;
  char v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  long long v81;
  long long v82;
  char v83;
  double v84;
  double v85;
  double v86;
  double v87;

  uint64_t v6 = v5;
  uint64_t v12 = *(void *)(v5 + 4);
  int v57 = *(_DWORD *)(v5 + 12);
  uint64_t v13 = v5 + 256;
  uint64_t v75 = *(void *)(v5 + 208);
  uint64_t v76 = *(void *)(v5 + 200);
  uint64_t v73 = *(void *)(v5 + 224);
  uint64_t v74 = *(void *)(v5 + 216);
  uint64_t v71 = *(void *)(v5 + 240);
  uint64_t v72 = *(void *)(v5 + 232);
  uint64_t v69 = *(void *)(v5 + 256);
  uint64_t v70 = *(void *)(v5 + 248);
  uint64_t v67 = *(void *)(v5 + 272);
  uint64_t v68 = *(void *)(v5 + 264);
  uint64_t v65 = *(void *)(v5 + 288);
  uint64_t v66 = *(void *)(v5 + 280);
  char v14 = *(unsigned char *)(v5 + 296);
  uint64_t v15 = *(void *)(v5 + 304);
  uint64_t v16 = *(void *)(v5 + 312);
  uint64_t v17 = *(void *)(v5 + 320);
  uint64_t v18 = *(void *)(v5 + 328);
  uint64_t v19 = *(void *)(v5 + 336);
  uint64_t v20 = *(void *)(v5 + 344);
  uint64_t v21 = *(void *)(v5 + 352);
  uint64_t v22 = *(void *)(v5 + 360);
  uint64_t v23 = *(void *)(v5 + 368);
  uint64_t v24 = *(void *)(v5 + 376);
  uint64_t v25 = *(void *)(v5 + 384);
  uint64_t v26 = *(void *)(v5 + 392);
  char v27 = *(unsigned char *)(v5 + 400);
  long long v53 = *(_OWORD *)(v5 + 424);
  long long v54 = *(_OWORD *)(v5 + 408);
  long long v51 = *(_OWORD *)(v5 + 456);
  long long v52 = *(_OWORD *)(v5 + 440);
  long long v49 = *(_OWORD *)(v5 + 488);
  long long v50 = *(_OWORD *)(v5 + 472);
  char v28 = *(unsigned char *)(v5 + 504);
  double v84 = a2;
  double v85 = a3;
  double v86 = a4;
  double v87 = a5;
  uint64_t v63 = v21;
  uint64_t v64 = v20;
  uint64_t v61 = v23;
  uint64_t v62 = v22;
  uint64_t v59 = v25;
  uint64_t v60 = v24;
  uint64_t v58 = v26;
  if ((v14 & 1) == 0)
  {
    char v55 = v27;
    char v29 = v14;
    uint64_t v30 = v19;
    *(void *)&long long v77 = v76;
    *((void *)&v77 + 1) = v75;
    *(void *)&long long v78 = v74;
    *((void *)&v78 + 1) = v73;
    *(void *)&long long v79 = v72;
    *((void *)&v79 + 1) = v71;
    *(void *)&long long v80 = v70;
    *((void *)&v80 + 1) = v69;
    *(void *)&long long v81 = v68;
    *((void *)&v81 + 1) = v67;
    *(void *)&long long v82 = v66;
    *((void *)&v82 + 1) = v65;
    char v83 = 0;
    uint64_t result = specialized static ViewSize.== infix(_:_:)(&v84, (double *)&v77);
    if (result) {
      goto LABEL_9;
    }
    uint64_t v19 = v30;
    char v14 = v29;
    char v27 = v55;
    uint64_t v21 = v63;
    uint64_t v20 = v64;
    uint64_t v23 = v61;
    uint64_t v22 = v62;
    uint64_t v25 = v59;
    uint64_t v24 = v60;
    uint64_t v26 = v58;
  }
  if ((v27 & 1) == 0)
  {
    char v56 = v27;
    char v32 = v14;
    *(void *)&long long v77 = v15;
    *((void *)&v77 + 1) = v16;
    *(void *)&long long v78 = v17;
    *((void *)&v78 + 1) = v18;
    *(void *)&long long v79 = v19;
    *((void *)&v79 + 1) = v20;
    *(void *)&long long v80 = v21;
    *((void *)&v80 + 1) = v22;
    *(void *)&long long v81 = v23;
    *((void *)&v81 + 1) = v24;
    *(void *)&long long v82 = v25;
    *((void *)&v82 + 1) = v26;
    char v83 = 0;
    uint64_t v33 = v19;
    uint64_t result = specialized static ViewSize.== infix(_:_:)(&v84, (double *)&v77);
    if ((result & 1) == 0)
    {
      uint64_t v19 = v33;
      char v14 = v32;
      char v27 = v56;
      goto LABEL_7;
    }
LABEL_9:
    char v34 = BYTE8(v79);
    uint64_t v35 = v80;
    char v36 = BYTE8(v80);
    long long v37 = v81;
    long long v38 = v82;
    *(void *)a1 = v79;
    *(unsigned char *)(a1 + 8) = v34;
    *(void *)(a1 + 16) = v35;
    *(unsigned char *)(a1 + 24) = v36;
    *(_OWORD *)(a1 + 32) = v37;
    *(_OWORD *)(a1 + 48) = v38;
    return result;
  }
LABEL_7:
  uint64_t v48 = v19;
  if ((v28 & 1) == 0)
  {
    long long v77 = v54;
    long long v78 = v53;
    long long v79 = v52;
    long long v80 = v51;
    long long v81 = v50;
    long long v82 = v49;
    char v83 = 0;
    uint64_t result = specialized static ViewSize.== infix(_:_:)(&v84, (double *)&v77);
    if (result) {
      goto LABEL_9;
    }
  }
  *(void *)&long long v77 = v12;
  DWORD2(v77) = v57;
  *(double *)&long long v78 = a2;
  *((double *)&v78 + 1) = a3;
  *(double *)&long long v79 = a4;
  *((double *)&v79 + 1) = a5;
  LOBYTE(v80) = 0;
  uint64_t result = PlacementContext.proposedSize.getter((uint64_t)&v84);
  double v39 = v84;
  char v40 = LOBYTE(v85);
  *(double *)a1 = v84;
  *(unsigned char *)(a1 + 8) = v40;
  double v41 = v86;
  *(double *)(a1 + 16) = v86;
  char v42 = LOBYTE(v87);
  *(unsigned char *)(a1 + 24) = LOBYTE(v87);
  __asm { FMOV            V2.2D, #0.5 }
  *(_OWORD *)(a1 + 32) = _Q2;
  *(double *)(a1 + 48) = a2 * 0.5;
  *(double *)(a1 + 56) = a3 * 0.5;
  *(void *)(v6 + 408) = v15;
  *(void *)(v6 + 416) = v16;
  *(void *)(v6 + 424) = v17;
  *(void *)(v6 + 432) = v18;
  *(void *)(v6 + 440) = v48;
  *(void *)(v6 + 448) = v64;
  *(void *)(v6 + 456) = v63;
  *(void *)(v6 + 464) = v62;
  *(void *)(v6 + 472) = v61;
  *(void *)(v6 + 480) = v60;
  *(void *)(v6 + 488) = v59;
  *(void *)(v6 + 496) = v58;
  *(unsigned char *)(v13 + 248) = v27;
  *(void *)(v6 + 304) = v76;
  *(void *)(v6 + 312) = v75;
  *(void *)(v6 + 320) = v74;
  *(void *)(v6 + 328) = v73;
  *(void *)(v6 + 336) = v72;
  *(void *)(v6 + 344) = v71;
  *(void *)(v6 + 352) = v70;
  *(void *)(v6 + 360) = v69;
  *(void *)(v6 + 368) = v68;
  *(void *)(v6 + 376) = v67;
  *(void *)(v6 + 384) = v66;
  *(void *)(v6 + 392) = v65;
  *(unsigned char *)(v13 + 144) = v14;
  *(double *)(v6 + 232) = v39;
  *(unsigned char *)(v6 + 240) = v40;
  *(double *)(v6 + 248) = v41;
  *(unsigned char *)uint64_t v13 = v42;
  *(double *)(v6 + 200) = a2;
  *(double *)(v6 + 208) = a3;
  *(double *)(v6 + 216) = a4;
  *(double *)(v6 + 224) = a5;
  *(double *)(v6 + 280) = a2 * 0.5;
  *(double *)(v6 + 288) = a3 * 0.5;
  *(_OWORD *)(v13 + 8) = _Q2;
  *(unsigned char *)(v13 + 40) = 0;
  return result;
}

{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  uint64_t result;
  char v21;
  uint64_t v22;
  char v23;
  long long v24;
  long long v25;
  double v26;
  double v27;
  double v28;
  unsigned __int8 v29;
  double v30;
  unsigned __int8 v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  uint64_t v38;
  long long v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  long long v63;
  long long v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  char v69;
  double v70;
  double v71;
  double v72;
  double v73;

  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  uint64_t v13 = *(void *)(v6 + 4);
  double v41 = *((_DWORD *)v6 + 3);
  char v14 = *((void *)v6 + 25);
  uint64_t v15 = *((void *)v6 + 26);
  uint64_t v61 = *((void *)v6 + 28);
  uint64_t v62 = *((void *)v6 + 27);
  uint64_t v59 = *((void *)v6 + 30);
  uint64_t v60 = *((void *)v6 + 29);
  int v57 = *((void *)v6 + 32);
  uint64_t v58 = *((void *)v6 + 31);
  char v55 = *((void *)v6 + 34);
  char v56 = *((void *)v6 + 33);
  long long v53 = *((void *)v6 + 36);
  long long v54 = *((void *)v6 + 35);
  uint64_t v16 = v6[296];
  long long v51 = *((void *)v6 + 39);
  long long v52 = *((void *)v6 + 38);
  uint64_t v17 = *((void *)v6 + 41);
  long long v49 = *((void *)v6 + 43);
  long long v50 = *((void *)v6 + 42);
  uint64_t v47 = *((void *)v6 + 45);
  uint64_t v48 = *((void *)v6 + 44);
  uint64_t v45 = *((void *)v6 + 47);
  char v46 = *((void *)v6 + 46);
  double v44 = *((void *)v6 + 48);
  char v42 = *((void *)v6 + 40);
  double v43 = *((void *)v6 + 49);
  uint64_t v18 = v6[400];
  long long v37 = *(_OWORD *)(v6 + 424);
  double v39 = *(_OWORD *)(v6 + 408);
  uint64_t v35 = *(_OWORD *)(v6 + 456);
  char v36 = *(_OWORD *)(v6 + 440);
  uint64_t v33 = *(_OWORD *)(v6 + 488);
  char v34 = *(_OWORD *)(v6 + 472);
  uint64_t v70 = a2;
  uint64_t v71 = a3;
  uint64_t v72 = a4;
  uint64_t v73 = a5;
  uint64_t v19 = v6[504];
  if ((v16 & 1) == 0)
  {
    *(void *)&uint64_t v63 = v14;
    *((void *)&v63 + 1) = v15;
    *(void *)&uint64_t v64 = v62;
    *((void *)&v64 + 1) = v61;
    *(void *)&uint64_t v65 = v60;
    *((void *)&v65 + 1) = v59;
    *(void *)&uint64_t v66 = v58;
    *((void *)&v66 + 1) = v57;
    *(void *)&uint64_t v67 = v56;
    *((void *)&v67 + 1) = v55;
    *(void *)&uint64_t v68 = v54;
    *((void *)&v68 + 1) = v53;
    uint64_t v69 = 0;
    uint64_t result = specialized static ViewSize.== infix(_:_:)(&v70, (double *)&v63);
    if (result) {
      goto LABEL_7;
    }
  }
  if ((v18 & 1) == 0)
  {
    *(void *)&uint64_t v63 = v52;
    *((void *)&v63 + 1) = v51;
    *(void *)&uint64_t v64 = v42;
    *((void *)&v64 + 1) = v17;
    *(void *)&uint64_t v65 = v50;
    *((void *)&v65 + 1) = v49;
    *(void *)&uint64_t v66 = v48;
    *((void *)&v66 + 1) = v47;
    *(void *)&uint64_t v67 = v46;
    *((void *)&v67 + 1) = v45;
    *(void *)&uint64_t v68 = v44;
    *((void *)&v68 + 1) = v43;
    uint64_t v69 = 0;
    uint64_t result = specialized static ViewSize.== infix(_:_:)(&v70, (double *)&v63);
    if (result) {
      goto LABEL_7;
    }
  }
  if (v19) {
    goto LABEL_18;
  }
  uint64_t v63 = v39;
  uint64_t v64 = v37;
  uint64_t v65 = v36;
  uint64_t v66 = v35;
  uint64_t v67 = v34;
  uint64_t v68 = v33;
  uint64_t v69 = 0;
  uint64_t result = specialized static ViewSize.== infix(_:_:)(&v70, (double *)&v63);
  if ((result & 1) == 0)
  {
LABEL_18:
    uint64_t v26 = 0.0;
    long long v38 = v15;
    char v40 = v14;
    char v27 = 0.0;
    switch(v12)
    {
      case 1:
        char v27 = -a2;
        break;
      case 2:
        uint64_t v26 = a3;
        break;
      case 3:
        char v27 = a2;
        break;
      case 4:
        break;
      default:
        uint64_t v26 = -a3;
        break;
    }
    *(void *)&uint64_t v63 = v13;
    DWORD2(v63) = v41;
    *(double *)&uint64_t v64 = a2;
    *((double *)&v64 + 1) = a3;
    *(double *)&uint64_t v65 = a4;
    *((double *)&v65 + 1) = a5;
    LOBYTE(v66) = 0;
    uint64_t result = PlacementContext.proposedSize.getter((uint64_t)&v70);
    char v28 = v70;
    char v29 = LOBYTE(v71);
    uint64_t v30 = v72;
    uint64_t v31 = LOBYTE(v73);
    if (one-time initialization token for topLeading != -1) {
      uint64_t result = swift_once();
    }
    *((void *)v6 + 53) = v42;
    *((void *)v6 + 54) = v17;
    char v32 = static UnitPoint.topLeading;
    *(double *)a1 = v28;
    *(unsigned char *)(a1 + 8) = v29;
    *(double *)(a1 + 16) = v30;
    *(unsigned char *)(a1 + 24) = v31;
    *(_OWORD *)(a1 + 32) = v32;
    *(double *)(a1 + 48) = v27;
    *(double *)(a1 + 56) = v26;
    *((void *)v6 + 51) = v52;
    *((void *)v6 + 52) = v51;
    *((void *)v6 + 55) = v50;
    *((void *)v6 + 56) = v49;
    *((void *)v6 + 57) = v48;
    *((void *)v6 + 58) = v47;
    *((void *)v6 + 59) = v46;
    *((void *)v6 + 60) = v45;
    *((void *)v6 + 61) = v44;
    *((void *)v6 + 62) = v43;
    v6[504] = v18;
    *((void *)v6 + 38) = v40;
    *((void *)v6 + 39) = v38;
    *((void *)v6 + 40) = v62;
    *((void *)v6 + 41) = v61;
    *((void *)v6 + 42) = v60;
    *((void *)v6 + 43) = v59;
    *((void *)v6 + 44) = v58;
    *((void *)v6 + 45) = v57;
    *((void *)v6 + 46) = v56;
    *((void *)v6 + 47) = v55;
    *((void *)v6 + 48) = v54;
    *((void *)v6 + 49) = v53;
    v6[400] = v16;
    *((double *)v6 + 25) = a2;
    *((double *)v6 + 26) = a3;
    *((double *)v6 + 27) = a4;
    *((double *)v6 + 28) = a5;
    *((double *)v6 + 29) = v28;
    v6[240] = v29;
    *((double *)v6 + 31) = v30;
    v6[256] = v31;
    *(_OWORD *)(v6 + 264) = v32;
    *((double *)v6 + 35) = v27;
    *((double *)v6 + 36) = v26;
    v6[296] = 0;
  }
  else
  {
LABEL_7:
    uint64_t v21 = BYTE8(v65);
    uint64_t v22 = v66;
    uint64_t v23 = BYTE8(v66);
    uint64_t v24 = v67;
    uint64_t v25 = v68;
    *(void *)a1 = v65;
    *(unsigned char *)(a1 + 8) = v21;
    *(void *)(a1 + 16) = v22;
    *(unsigned char *)(a1 + 24) = v23;
    *(_OWORD *)(a1 + 32) = v24;
    *(_OWORD *)(a1 + 48) = v25;
  }
  return result;
}

uint64_t partial apply for closure #2 in StateObject.Box.update(property:phase:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  char v4 = *(uint64_t **)(v2 + 32);
  int v5 = *(_DWORD *)(v2 + 40);
  uint64_t v6 = *(unsigned char **)(v2 + 48);
  uint64_t v9 = *v4;
  uint64_t v10 = v4[1];
  int v8 = v5;
  uint64_t result = _DynamicPropertyBuffer.update(container:phase:)(a1, &v8);
  *a2 = (result | *v6) & 1;
  return result;
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance _AspectRatioLayout@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(v3 + 9)) {
    __int16 v4 = 256;
  }
  else {
    __int16 v4 = 0;
  }
  return _AspectRatioLayout.placement(of:in:)(a1, a2, *(void *)v3, v4 | *(unsigned __int8 *)(v3 + 8), a3);
}

uint64_t partial apply for closure #1 in StatefulRule<>.update<A>(to:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v3);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);

  return v5(a1, v4, v3);
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance GeometryReaderLayout(uint64_t a1, char a2)
{
  double result = *(double *)&a1;
  if (a2) {
    return 0.0;
  }
  return result;
}

void partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(uint64_t a1@<X8>)
{
  specialized UnaryLayoutEngine.childPlacement(at:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

void specialized UnaryLayoutEngine.childPlacement(at:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  int v46 = *(unsigned __int8 *)(v5 + 9);
  __int16 v47 = *(unsigned __int8 *)(v5 + 8);
  uint64_t v52 = *(void *)(v5 + 12);
  int v51 = *(_DWORD *)(v5 + 20);
  uint64_t v49 = *(void *)(v5 + 24);
  uint64_t v50 = *(void *)v5;
  int v48 = *(_DWORD *)(v5 + 32);
  uint64_t v70 = *(void *)(v5 + 216);
  uint64_t v71 = *(void *)(v5 + 208);
  uint64_t v68 = *(void *)(v5 + 232);
  uint64_t v69 = *(void *)(v5 + 224);
  uint64_t v66 = *(void *)(v5 + 248);
  uint64_t v67 = *(void *)(v5 + 240);
  uint64_t v64 = *(void *)(v5 + 264);
  uint64_t v65 = *(void *)(v5 + 256);
  uint64_t v62 = *(void *)(v5 + 280);
  uint64_t v63 = *(void *)(v5 + 272);
  uint64_t v60 = *(void *)(v5 + 296);
  uint64_t v61 = *(void *)(v5 + 288);
  char v11 = *(unsigned char *)(v5 + 304);
  uint64_t v12 = *(void *)(v5 + 312);
  uint64_t v13 = *(void *)(v5 + 320);
  uint64_t v14 = *(void *)(v5 + 328);
  uint64_t v15 = *(void *)(v5 + 336);
  uint64_t v16 = *(void *)(v5 + 344);
  uint64_t v17 = *(void *)(v5 + 352);
  uint64_t v18 = *(void *)(v5 + 360);
  uint64_t v19 = *(void *)(v5 + 368);
  long long v44 = *(_OWORD *)(v5 + 432);
  long long v45 = *(_OWORD *)(v5 + 416);
  long long v42 = *(_OWORD *)(v5 + 464);
  long long v43 = *(_OWORD *)(v5 + 448);
  long long v40 = *(_OWORD *)(v5 + 496);
  long long v41 = *(_OWORD *)(v5 + 480);
  v79[0] = a2;
  v79[1] = a3;
  v79[2] = a4;
  v79[3] = a5;
  uint64_t v21 = *(void *)(v5 + 376);
  uint64_t v20 = *(void *)(v5 + 384);
  uint64_t v23 = *(void *)(v5 + 392);
  uint64_t v22 = *(void *)(v5 + 400);
  char v24 = *(unsigned char *)(v5 + 408);
  char v25 = *(unsigned char *)(v5 + 512);
  uint64_t v58 = v19;
  uint64_t v59 = v18;
  char v57 = v24;
  uint64_t v55 = v23;
  uint64_t v56 = v22;
  uint64_t v53 = v21;
  uint64_t v54 = v20;
  if ((v11 & 1) == 0)
  {
    uint64_t v37 = v17;
    char v26 = v11;
    uint64_t v27 = v16;
    *(void *)&long long v72 = v71;
    *((void *)&v72 + 1) = v70;
    *(void *)&long long v73 = v69;
    *((void *)&v73 + 1) = v68;
    *(void *)&long long v74 = v67;
    *((void *)&v74 + 1) = v66;
    *(void *)&long long v75 = v65;
    *((void *)&v75 + 1) = v64;
    *(void *)&long long v76 = v63;
    *((void *)&v76 + 1) = v62;
    *(void *)&long long v77 = v61;
    *((void *)&v77 + 1) = v60;
    char v78 = 0;
    if (specialized static ViewSize.== infix(_:_:)(v79, (double *)&v72)) {
      goto LABEL_9;
    }
    uint64_t v16 = v27;
    char v11 = v26;
    uint64_t v17 = v37;
    uint64_t v19 = v58;
    uint64_t v18 = v59;
    char v24 = v57;
    uint64_t v23 = v55;
    uint64_t v22 = v56;
    uint64_t v21 = v53;
    uint64_t v20 = v54;
  }
  if ((v24 & 1) == 0)
  {
    char v38 = v11;
    *(void *)&long long v72 = v12;
    *((void *)&v72 + 1) = v13;
    *(void *)&long long v73 = v14;
    *((void *)&v73 + 1) = v15;
    *(void *)&long long v74 = v16;
    *((void *)&v74 + 1) = v17;
    *(void *)&long long v75 = v18;
    *((void *)&v75 + 1) = v19;
    *(void *)&long long v76 = v21;
    *((void *)&v76 + 1) = v20;
    *(void *)&long long v77 = v23;
    *((void *)&v77 + 1) = v22;
    char v78 = 0;
    uint64_t v28 = v16;
    if (!specialized static ViewSize.== infix(_:_:)(v79, (double *)&v72))
    {
      uint64_t v16 = v28;
      char v11 = v38;
      goto LABEL_7;
    }
LABEL_9:
    char v29 = BYTE8(v74);
    uint64_t v30 = v75;
    char v31 = BYTE8(v75);
    long long v32 = v76;
    long long v33 = v77;
    *(void *)a1 = v74;
    *(unsigned char *)(a1 + 8) = v29;
    *(void *)(a1 + 16) = v30;
    *(unsigned char *)(a1 + 24) = v31;
    *(_OWORD *)(a1 + 32) = v32;
    *(_OWORD *)(a1 + 48) = v33;
    return;
  }
LABEL_7:
  uint64_t v39 = v16;
  if ((v25 & 1) == 0)
  {
    long long v72 = v45;
    long long v73 = v44;
    long long v74 = v43;
    long long v75 = v42;
    long long v76 = v41;
    long long v77 = v40;
    char v78 = 0;
    if (specialized static ViewSize.== infix(_:_:)(v79, (double *)&v72)) {
      goto LABEL_9;
    }
  }
  if (v46) {
    __int16 v34 = 256;
  }
  else {
    __int16 v34 = 0;
  }
  specialized closure #1 in UnaryLayoutEngine.childPlacement(at:)(v50, v34 | v47, v49, v48, v52, v51, a1, a2, a3, a4, a5);
  *(void *)(v5 + 416) = v12;
  *(void *)(v5 + 424) = v13;
  *(void *)(v5 + 432) = v14;
  *(void *)(v5 + 440) = v15;
  *(void *)(v5 + 448) = v39;
  *(void *)(v5 + 456) = v17;
  *(void *)(v5 + 464) = v59;
  *(void *)(v5 + 472) = v58;
  *(void *)(v5 + 480) = v53;
  *(void *)(v5 + 488) = v54;
  *(void *)(v5 + 496) = v55;
  *(void *)(v5 + 504) = v56;
  *(unsigned char *)(v5 + 512) = v57;
  *(void *)(v5 + 312) = v71;
  *(void *)(v5 + 320) = v70;
  *(void *)(v5 + 328) = v69;
  *(void *)(v5 + 336) = v68;
  *(void *)(v5 + 344) = v67;
  *(void *)(v5 + 352) = v66;
  *(void *)(v5 + 360) = v65;
  *(void *)(v5 + 368) = v64;
  *(void *)(v5 + 376) = v63;
  *(void *)(v5 + 384) = v62;
  *(void *)(v5 + 392) = v61;
  *(void *)(v5 + 400) = v60;
  *(unsigned char *)(v5 + 408) = v11;
  *(void *)(v5 + 240) = *(void *)a1;
  *(unsigned char *)(v5 + 248) = *(unsigned char *)(a1 + 8);
  *(void *)(v5 + 256) = *(void *)(a1 + 16);
  *(unsigned char *)(v5 + 264) = *(unsigned char *)(a1 + 24);
  long long v35 = *(_OWORD *)(a1 + 32);
  long long v36 = *(_OWORD *)(a1 + 48);
  *(double *)(v5 + 208) = a2;
  *(double *)(v5 + 216) = a3;
  *(double *)(v5 + 224) = a4;
  *(double *)(v5 + 232) = a5;
  *(_OWORD *)(v5 + 272) = v35;
  *(_OWORD *)(v5 + 288) = v36;
  *(unsigned char *)(v5 + 304) = 0;
}

{
  long long *v5;
  long long *v6;
  long long v12;
  unsigned char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  char v59;
  char v60;
  int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  char v86;
  double v87[4];
  long long v88;
  _OWORD v89[3];

  uint64_t v6 = v5;
  uint64_t v12 = v5[1];
  uint64_t v13 = (char *)v5 + 280;
  uint64_t v88 = *v5;
  v89[0] = v12;
  *(_OWORD *)((char *)v89 + 9) = *(long long *)((char *)v5 + 25);
  uint64_t v14 = *(void *)((char *)v5 + 44);
  uint64_t v61 = *((_DWORD *)v5 + 13);
  uint64_t v70 = *((void *)v5 + 31);
  uint64_t v71 = *((void *)v5 + 30);
  uint64_t v68 = *((void *)v5 + 33);
  uint64_t v69 = *((void *)v5 + 32);
  char v78 = *((void *)v5 + 35);
  long long v79 = *((void *)v5 + 34);
  long long v76 = *((void *)v5 + 37);
  long long v77 = *((void *)v5 + 36);
  long long v74 = *((void *)v5 + 39);
  long long v75 = *((void *)v5 + 38);
  long long v72 = *((void *)v5 + 41);
  long long v73 = *((void *)v5 + 40);
  uint64_t v15 = *((unsigned char *)v5 + 336);
  uint64_t v16 = *((void *)v5 + 43);
  uint64_t v17 = *((void *)v5 + 44);
  uint64_t v19 = *((void *)v5 + 45);
  uint64_t v18 = *((void *)v5 + 46);
  uint64_t v20 = *((void *)v5 + 47);
  uint64_t v21 = *((void *)v5 + 48);
  uint64_t v23 = *((void *)v5 + 49);
  uint64_t v22 = *((void *)v5 + 50);
  char v24 = *((void *)v5 + 51);
  char v25 = *((void *)v6 + 52);
  char v26 = *((void *)v6 + 53);
  uint64_t v27 = *((void *)v6 + 54);
  uint64_t v28 = v13[160];
  char v57 = v6[29];
  uint64_t v58 = v6[28];
  uint64_t v55 = v6[31];
  uint64_t v56 = v6[30];
  uint64_t v53 = v6[33];
  uint64_t v54 = v6[32];
  char v29 = *((unsigned char *)v6 + 544);
  v87[0] = a2;
  v87[1] = a3;
  v87[2] = a4;
  v87[3] = a5;
  uint64_t v66 = v22;
  uint64_t v67 = v23;
  uint64_t v64 = v26;
  uint64_t v65 = v25;
  uint64_t v63 = v27;
  uint64_t v62 = v28;
  if ((v15 & 1) == 0)
  {
    uint64_t v59 = v29;
    uint64_t v49 = v21;
    uint64_t v30 = v20;
    char v31 = v18;
    long long v32 = v19;
    long long v33 = v17;
    __int16 v34 = v15;
    long long v35 = v16;
    *(void *)&long long v80 = v71;
    *((void *)&v80 + 1) = v70;
    *(void *)&long long v81 = v69;
    *((void *)&v81 + 1) = v68;
    *(void *)&long long v82 = v79;
    *((void *)&v82 + 1) = v78;
    *(void *)&char v83 = v77;
    *((void *)&v83 + 1) = v76;
    *(void *)&double v84 = v75;
    *((void *)&v84 + 1) = v74;
    *(void *)&double v85 = v73;
    *((void *)&v85 + 1) = v72;
    double v86 = 0;
    if (specialized static ViewSize.== infix(_:_:)(v87, (double *)&v80)) {
      goto LABEL_9;
    }
    uint64_t v16 = v35;
    uint64_t v15 = v34;
    uint64_t v17 = v33;
    uint64_t v19 = v32;
    uint64_t v18 = v31;
    uint64_t v20 = v30;
    uint64_t v21 = v49;
    uint64_t v22 = v66;
    uint64_t v23 = v67;
    char v26 = v64;
    char v25 = v65;
    uint64_t v27 = v63;
    uint64_t v28 = v62;
    char v29 = v59;
  }
  if ((v28 & 1) == 0)
  {
    uint64_t v60 = v29;
    uint64_t v50 = v15;
    *(void *)&long long v80 = v16;
    *((void *)&v80 + 1) = v17;
    *(void *)&long long v81 = v19;
    *((void *)&v81 + 1) = v18;
    *(void *)&long long v82 = v20;
    *((void *)&v82 + 1) = v21;
    *(void *)&char v83 = v23;
    *((void *)&v83 + 1) = v22;
    *(void *)&double v84 = v24;
    *((void *)&v84 + 1) = v25;
    *(void *)&double v85 = v26;
    *((void *)&v85 + 1) = v27;
    double v86 = 0;
    long long v36 = v16;
    uint64_t v37 = v21;
    char v38 = v20;
    uint64_t v39 = v18;
    long long v40 = v19;
    long long v41 = v17;
    if (!specialized static ViewSize.== infix(_:_:)(v87, (double *)&v80))
    {
      uint64_t v16 = v36;
      uint64_t v15 = v50;
      uint64_t v17 = v41;
      uint64_t v19 = v40;
      uint64_t v18 = v39;
      uint64_t v20 = v38;
      uint64_t v21 = v37;
      char v29 = v60;
      goto LABEL_7;
    }
LABEL_9:
    long long v42 = BYTE8(v82);
    long long v43 = v83;
    long long v44 = BYTE8(v83);
    long long v45 = v84;
    int v46 = v85;
    *(void *)a1 = v82;
    *(unsigned char *)(a1 + 8) = v42;
    *(void *)(a1 + 16) = v43;
    *(unsigned char *)(a1 + 24) = v44;
    *(_OWORD *)(a1 + 32) = v45;
    *(_OWORD *)(a1 + 48) = v46;
    return;
  }
LABEL_7:
  int v51 = v17;
  uint64_t v52 = v16;
  if ((v29 & 1) == 0)
  {
    long long v80 = v58;
    long long v81 = v57;
    long long v82 = v56;
    char v83 = v55;
    double v84 = v54;
    double v85 = v53;
    double v86 = 0;
    if (specialized static ViewSize.== infix(_:_:)(v87, (double *)&v80)) {
      goto LABEL_9;
    }
  }
  *(void *)&long long v80 = v14;
  DWORD2(v80) = v61;
  *(double *)&long long v81 = a2;
  *((double *)&v81 + 1) = a3;
  *(double *)&long long v82 = a4;
  *((double *)&v82 + 1) = a5;
  LOBYTE(v83) = 0;
  _PaddingLayout.placement(of:in:)((int *)&v80, a1);
  *((unsigned char *)v6 + 544) = v62;
  *((void *)v6 + 56) = v52;
  *((void *)v6 + 57) = v51;
  *((void *)v6 + 58) = v19;
  *((void *)v6 + 59) = v18;
  *((void *)v6 + 60) = v20;
  *((void *)v6 + 61) = v21;
  *((void *)v6 + 62) = v67;
  *((void *)v6 + 63) = v66;
  *((void *)v6 + 64) = v24;
  *((void *)v6 + 65) = v65;
  *((void *)v6 + 66) = v64;
  *((void *)v6 + 67) = v63;
  *((void *)v6 + 43) = v71;
  *((void *)v6 + 44) = v70;
  *((void *)v6 + 45) = v69;
  *((void *)v6 + 46) = v68;
  *((void *)v6 + 47) = v79;
  *((void *)v6 + 48) = v78;
  *((void *)v6 + 49) = v77;
  *((void *)v6 + 50) = v76;
  *((void *)v6 + 51) = v75;
  *((void *)v6 + 52) = v74;
  *((void *)v6 + 53) = v73;
  *((void *)v6 + 54) = v72;
  v13[160] = v15;
  *((void *)v6 + 34) = *(void *)a1;
  char *v13 = *(unsigned char *)(a1 + 8);
  *((void *)v6 + 36) = *(void *)(a1 + 16);
  v13[16] = *(unsigned char *)(a1 + 24);
  __int16 v47 = *(_OWORD *)(a1 + 32);
  int v48 = *(_OWORD *)(a1 + 48);
  *((double *)v6 + 30) = a2;
  *((double *)v6 + 31) = a3;
  *((double *)v6 + 32) = a4;
  *((double *)v6 + 33) = a5;
  v6[19] = v47;
  v6[20] = v48;
  v13[56] = 0;
}

{
  unsigned __int8 *v5;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  char v25;
  uint64_t v26;
  char v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  unsigned __int8 v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  long long v64;
  char v65;
  double v66[5];

  uint64_t v39 = *v5;
  char v38 = v5[1];
  char v57 = *((void *)v5 + 26);
  uint64_t v58 = *((void *)v5 + 25);
  uint64_t v55 = *((void *)v5 + 28);
  uint64_t v56 = *((void *)v5 + 27);
  uint64_t v53 = *((void *)v5 + 30);
  uint64_t v54 = *((void *)v5 + 29);
  int v51 = *((void *)v5 + 32);
  uint64_t v52 = *((void *)v5 + 31);
  uint64_t v49 = *((void *)v5 + 34);
  uint64_t v50 = *((void *)v5 + 33);
  __int16 v47 = *((void *)v5 + 36);
  int v48 = *((void *)v5 + 35);
  char v11 = v5[296];
  uint64_t v12 = *((void *)v5 + 38);
  uint64_t v13 = *((void *)v5 + 39);
  uint64_t v14 = *((void *)v5 + 40);
  uint64_t v15 = *((void *)v5 + 41);
  uint64_t v17 = *((void *)v5 + 42);
  uint64_t v16 = *((void *)v5 + 43);
  int v46 = *((void *)v5 + 44);
  uint64_t v18 = *((void *)v5 + 45);
  uint64_t v19 = *((void *)v5 + 46);
  long long v35 = *(_OWORD *)(v5 + 424);
  long long v36 = *(_OWORD *)(v5 + 408);
  long long v33 = *(_OWORD *)(v5 + 456);
  __int16 v34 = *(_OWORD *)(v5 + 440);
  char v31 = *(_OWORD *)(v5 + 488);
  long long v32 = *(_OWORD *)(v5 + 472);
  v66[0] = a2;
  v66[1] = a3;
  v66[2] = a4;
  v66[3] = a5;
  uint64_t v21 = *((void *)v5 + 47);
  uint64_t v20 = *((void *)v5 + 48);
  uint64_t v22 = *((void *)v5 + 49);
  uint64_t v23 = v5[400];
  char v24 = v5[504];
  uint64_t v37 = v11;
  long long v44 = v18;
  long long v45 = v16;
  long long v42 = v20;
  long long v43 = v22;
  long long v40 = v19;
  long long v41 = v21;
  if ((v11 & 1) == 0)
  {
    *(void *)&uint64_t v59 = v58;
    *((void *)&v59 + 1) = v57;
    *(void *)&uint64_t v60 = v56;
    *((void *)&v60 + 1) = v55;
    *(void *)&uint64_t v61 = v54;
    *((void *)&v61 + 1) = v53;
    *(void *)&uint64_t v62 = v52;
    *((void *)&v62 + 1) = v51;
    *(void *)&uint64_t v63 = v50;
    *((void *)&v63 + 1) = v49;
    *(void *)&uint64_t v64 = v48;
    *((void *)&v64 + 1) = v47;
    uint64_t v65 = 0;
    if (specialized static ViewSize.== infix(_:_:)(v66, (double *)&v59))
    {
LABEL_8:
      char v25 = BYTE8(v61);
      char v26 = v62;
      uint64_t v27 = BYTE8(v62);
      uint64_t v28 = v63;
      char v29 = v64;
      *(void *)a1 = v61;
      *(unsigned char *)(a1 + 8) = v25;
      *(void *)(a1 + 16) = v26;
      *(unsigned char *)(a1 + 24) = v27;
      *(_OWORD *)(a1 + 32) = v28;
      *(_OWORD *)(a1 + 48) = v29;
      return;
    }
    uint64_t v18 = v44;
    uint64_t v16 = v45;
    uint64_t v20 = v42;
    uint64_t v22 = v43;
    uint64_t v19 = v40;
    uint64_t v21 = v41;
  }
  if ((v23 & 1) == 0)
  {
    *(void *)&uint64_t v59 = v12;
    *((void *)&v59 + 1) = v13;
    *(void *)&uint64_t v60 = v14;
    *((void *)&v60 + 1) = v15;
    *(void *)&uint64_t v61 = v17;
    *((void *)&v61 + 1) = v16;
    *(void *)&uint64_t v62 = v46;
    *((void *)&v62 + 1) = v18;
    *(void *)&uint64_t v63 = v19;
    *((void *)&v63 + 1) = v21;
    *(void *)&uint64_t v64 = v20;
    *((void *)&v64 + 1) = v22;
    uint64_t v65 = 0;
    if (specialized static ViewSize.== infix(_:_:)(v66, (double *)&v59)) {
      goto LABEL_8;
    }
  }
  if ((v24 & 1) == 0)
  {
    uint64_t v59 = v36;
    uint64_t v60 = v35;
    uint64_t v61 = v34;
    uint64_t v62 = v33;
    uint64_t v63 = v32;
    uint64_t v64 = v31;
    uint64_t v65 = 0;
    if (specialized static ViewSize.== infix(_:_:)(v66, (double *)&v59)) {
      goto LABEL_8;
    }
  }
  specialized closure #1 in UnaryLayoutEngine.childPlacement(at:)(v39 | (v38 << 8), a1, a2, a3);
  *((void *)v5 + 51) = v12;
  *((void *)v5 + 52) = v13;
  *((void *)v5 + 53) = v14;
  *((void *)v5 + 54) = v15;
  *((void *)v5 + 55) = v17;
  *((void *)v5 + 56) = v45;
  *((void *)v5 + 57) = v46;
  *((void *)v5 + 58) = v44;
  *((void *)v5 + 59) = v40;
  *((void *)v5 + 60) = v41;
  *((void *)v5 + 61) = v42;
  *((void *)v5 + 62) = v43;
  v5[504] = v23;
  *((void *)v5 + 38) = v58;
  *((void *)v5 + 39) = v57;
  *((void *)v5 + 40) = v56;
  *((void *)v5 + 41) = v55;
  *((void *)v5 + 42) = v54;
  *((void *)v5 + 43) = v53;
  *((void *)v5 + 44) = v52;
  *((void *)v5 + 45) = v51;
  *((void *)v5 + 46) = v50;
  *((void *)v5 + 47) = v49;
  *((void *)v5 + 48) = v48;
  *((void *)v5 + 49) = v47;
  v5[400] = v37;
  *((void *)v5 + 29) = *(void *)a1;
  v5[240] = *(unsigned char *)(a1 + 8);
  *((void *)v5 + 31) = *(void *)(a1 + 16);
  *((double *)v5 + 25) = a2;
  *((double *)v5 + 26) = a3;
  *((double *)v5 + 27) = a4;
  *((double *)v5 + 28) = a5;
  v5[256] = *(unsigned char *)(a1 + 24);
  uint64_t v30 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v5 + 264) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v5 + 280) = v30;
  v5[296] = 0;
}

uint64_t partial apply for closure #1 in SecondaryChild.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in SecondaryChild.value.getter(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t destroy for TextSuffixModifier(uint64_t *a1)
{
  return outlined consume of Text.Suffix.Storage(*a1, a1[1], a1[2]);
}

unint64_t destroy for ScrapeableAttachmentViewModifier(unint64_t *a1)
{
  unint64_t result = *a1;
  if ((~result & 0xF000000000000007) != 0) {
    return outlined consume of ScrapeableContent.Content(result);
  }
  return result;
}

uint64_t partial apply for closure #1 in ApplyTransitionModifier.Child.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ApplyTransitionModifier.Child.value.getter(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t closure #1 in ApplyTransitionModifier.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void v7[2] = a1;
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for ApplyTransitionModifier();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return Attribute.syncMainIfReferences<A>(do:)((void (*)(void))partial apply for closure #1 in closure #1 in ApplyTransitionModifier.Child.value.getter, (uint64_t)v7, v4, AssociatedTypeWitness, a3);
}

uint64_t partial apply for closure #1 in UnaryChildGeometry.value.getter@<X0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 48);
  v6[0] = *(_OWORD *)(v1 + 32);
  v6[1] = v3;
  uint64_t v4 = type metadata accessor for UnaryLayoutEngine();
  return UnaryLayoutEngine.childPlacement(at:)((uint64_t)v6, v4, a1);
}

uint64_t partial apply for closure #1 in DelayedPreferenceChild.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in DelayedPreferenceChild.value.getter(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

double static AlignmentID._combineExplicit(childValue:_:into:)(uint64_t a1, uint64_t a2, double a3)
{
  if (!a1) {
    goto LABEL_4;
  }
  if (*(unsigned char *)(a2 + 8))
  {
    __break(1u);
LABEL_4:
    *(double *)a2 = a3;
  }
  double result = (*(double *)a2 * (double)a1 + a3) / ((double)a1 + 1.0);
  *(double *)a2 = result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

{
  return static AlignmentID._combineExplicit(childValue:_:into:)(a1, a2, a3);
}

uint64_t partial apply for closure #2 in AnimatorAttribute.updateValue()@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in AnimatorAttribute.updateValue()(v1[8], v1[2], v1[3], v1[4], v1[5], v1[6], a1);
}

uint64_t closure #2 in AnimatorAttribute.updateValue()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  type metadata accessor for AnimatorAttribute();
  v16[2] = a2;
  void v16[3] = a3;
  v16[4] = a4;
  v16[5] = a5;
  v16[6] = a6;
  v16[7] = a1;
  v16[9] = a2;
  v16[10] = a3;
  v16[11] = a4;
  v16[12] = a5;
  v16[13] = a6;
  uint64_t v14 = type metadata accessor for KeyframeAnimator();
  return Attribute.syncMainIfReferences<A>(do:)((void (*)(void))partial apply for closure #1 in closure #2 in AnimatorAttribute.updateValue(), (uint64_t)v16, v14, a4, a7);
}

uint64_t ResolvedStyledText.TextLayoutManager.explicitAlignment(_:at:)(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = v3;
  swift_beginAccess();
  if (*(unsigned char *)(v4 + 97))
  {
LABEL_2:
    *(double *)&uint64_t result = 0.0;
    return result;
  }
  if (one-time initialization token for lastTextBaseline != -1) {
    swift_once();
  }
  if (static VerticalAlignment.lastTextBaseline == a1)
  {
    if (*(unsigned char *)(v4 + 97)) {
      double v9 = a2;
    }
    else {
      double v9 = a3;
    }
    if (*(unsigned char *)(v4 + 97)) {
      double v10 = a3;
    }
    else {
      double v10 = a2;
    }
    specialized ResolvedStyledText.TextLayoutManager.metrics(in:layoutMargins:)(*(unsigned __int8 *)(v4 + 97) ^ 1, (uint64_t)v25, v10, v9);
    return v27;
  }
  else
  {
    if (one-time initialization token for firstTextBaseline != -1) {
      swift_once();
    }
    if (static VerticalAlignment.firstTextBaseline == a1)
    {
      if (*(unsigned char *)(v4 + 97)) {
        double v11 = a2;
      }
      else {
        double v11 = a3;
      }
      if (*(unsigned char *)(v4 + 97)) {
        double v12 = a3;
      }
      else {
        double v12 = a2;
      }
      specialized ResolvedStyledText.TextLayoutManager.metrics(in:layoutMargins:)(*(unsigned __int8 *)(v4 + 97) ^ 1, (uint64_t)v25, v12, v11);
      *(double *)&uint64_t result = v26;
    }
    else
    {
      if (one-time initialization token for _firstTextLineCenter != -1) {
        swift_once();
      }
      if (static VerticalAlignment._firstTextLineCenter == a1)
      {
        if (*(unsigned char *)(v4 + 97)) {
          double v13 = a2;
        }
        else {
          double v13 = a3;
        }
        if (*(unsigned char *)(v4 + 97)) {
          double v14 = a3;
        }
        else {
          double v14 = a2;
        }
        specialized ResolvedStyledText.TextLayoutManager.metrics(in:layoutMargins:)(*(unsigned __int8 *)(v4 + 97) ^ 1, (uint64_t)v25, v14, v13);
        if (*(unsigned char *)(v4 + 344))
        {
          if (*(void *)(v4 + 216))
          {
            NSAttributedString.maxFontMetrics.getter((uint64_t)&v20);
            double v15 = v20;
            long long v16 = v21;
            long long v17 = v22;
            long long v18 = v23;
            uint64_t v19 = v24;
          }
          else
          {
            uint64_t v19 = 0;
            long long v16 = 0uLL;
            double v15 = 0.0;
            long long v17 = 0uLL;
            long long v18 = 0uLL;
          }
          *(double *)(v4 + 280) = v15;
          *(_OWORD *)(v4 + 288) = v16;
          *(_OWORD *)(v4 + 304) = v17;
          *(_OWORD *)(v4 + 320) = v18;
          *(void *)(v4 + 336) = v19;
          *(unsigned char *)(v4 + 344) = 0;
        }
        else
        {
          double v15 = *(double *)(v4 + 280);
        }
        *(double *)&uint64_t result = v26 + v15 * -0.5;
      }
      else
      {
        if (one-time initialization token for leadingText != -1) {
          swift_once();
        }
        if (static HorizontalAlignment.leadingText != a1) {
          goto LABEL_2;
        }
        swift_beginAccess();
        return *(uint64_t *)(v4 + 176);
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for _ValueActionModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()()
{
  uint64_t HasDeadlinePassed = AGGraphHasDeadlinePassed();
  if (HasDeadlinePassed) {
    AGGraphCancelUpdate();
  }
  return HasDeadlinePassed;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance LayoutProxyCollection()
{
  return *(void *)(*(void *)(v0 + 8) + 16);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConcatenatedCollectionIndex<A, B>(uint64_t a1, uint64_t a2)
{
  return static ConcatenatedCollectionIndex.== infix(_:_:)(a1, a2);
}

void *keypath_get_96Tm@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X3>, unsigned char *a2@<X8>)
{
  uint64_t result = a1(&v4);
  *a2 = v4;
  return result;
}

uint64_t EnvironmentValues.horizontalSizeClass.getter(void (*a1)(uint64_t), void (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    a1(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    a2(v6, &v8);
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.horizontalSizeClass.getter()
{
  return EnvironmentValues.horizontalSizeClass.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.verticalSizeClass.getter()
{
  return EnvironmentValues.horizontalSizeClass.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextScaleKey>, (uint64_t)&type metadata for TextScaleKey, (uint64_t)&protocol witness table for TextScaleKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  Swift::Int v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result) {
    uint64_t v6 = *(unsigned char *)(result + 72);
  }
  else {
    uint64_t v6 = 3;
  }
  *a2 = v6;
  return result;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>, (uint64_t)&type metadata for TextCaseKey, (uint64_t)&protocol witness table for TextCaseKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TintAdjustmentModeKey>, (uint64_t)&type metadata for TintAdjustmentModeKey, (uint64_t)&protocol witness table for TintAdjustmentModeKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  Swift::Int v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>, (uint64_t)&type metadata for SymbolRenderingModeKey, (uint64_t)&protocol witness table for SymbolRenderingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result) {
    uint64_t v6 = *(unsigned char *)(result + 72);
  }
  else {
    uint64_t v6 = 8;
  }
  *a2 = v6;
  return result;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  Swift::Int v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result) {
    uint64_t v6 = *(unsigned char *)(result + 72);
  }
  else {
    uint64_t v6 = 1;
  }
  *a2 = v6;
  return result;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>, (uint64_t)&type metadata for ExplicitPreferredColorSchemeKey, (uint64_t)&protocol witness table for ExplicitPreferredColorSchemeKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>, (uint64_t)&type metadata for TruncationModeKey, (uint64_t)&protocol witness table for TruncationModeKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  Swift::Int v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>, (uint64_t)&type metadata for ContainerBackgroundKind.Key, (uint64_t)&protocol witness table for ContainerBackgroundKind.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result) {
    uint64_t v6 = *(unsigned char *)(result + 72);
  }
  else {
    uint64_t v6 = 6;
  }
  *a2 = v6;
  return result;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  Swift::Int v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>, (uint64_t)&type metadata for SystemAccentValueKey, (uint64_t)&protocol witness table for SystemAccentValueKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result) {
    uint64_t v6 = *(unsigned char *)(result + 72);
  }
  else {
    uint64_t v6 = 10;
  }
  *a2 = v6;
  return result;
}

{
  Swift::Int v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>, (uint64_t)&type metadata for ControlSizeKey, (uint64_t)&protocol witness table for ControlSizeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result) {
    uint64_t v6 = *(unsigned char *)(result + 72);
  }
  else {
    uint64_t v6 = 5;
  }
  *a2 = v6;
  return result;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTextFieldTruncationMode>, (uint64_t)&type metadata for DefaultTextFieldTruncationMode, (uint64_t)&protocol witness table for DefaultTextFieldTruncationMode, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t (*a5)(uint64_t)@<X5>, char *a6@<X8>)
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v9);
  uint64_t result = a5(a1);
  if (result) {
    char v11 = *(unsigned char *)(result + 72);
  }
  else {
    char v11 = 2;
  }
  *a6 = v11;
  return result;
}

{
  Swift::Int v9;
  uint64_t result;
  char v11;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v9);
  uint64_t result = a5(a1);
  if (result) {
    char v11 = *(unsigned char *)(result + 72);
  }
  else {
    char v11 = 1;
  }
  *a6 = v11;
  return result;
}

{
  Swift::Int v9;
  uint64_t result;
  char v11;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v9);
  uint64_t result = a5(a1);
  if (result) {
    char v11 = *(unsigned char *)(result + 72);
  }
  else {
    char v11 = 3;
  }
  *a6 = v11;
  return result;
}

uint64_t specialized find1<A>(_:key:filter:)(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>, (uint64_t)&type metadata for TextCaseKey, (uint64_t)&protocol witness table for TextCaseKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LineLimitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LowerLineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LowerLineLimitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BodyHeadOutdentKey>, (uint64_t)&type metadata for BodyHeadOutdentKey, (uint64_t)&protocol witness table for BodyHeadOutdentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextAlignmentKey>, (uint64_t)&type metadata for TextAlignmentKey, (uint64_t)&protocol witness table for TextAlignmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundMaterialKey>, (uint64_t)&type metadata for BackgroundMaterialKey, (uint64_t)&protocol witness table for BackgroundMaterialKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPixelLengthKey>, (uint64_t)&type metadata for DefaultPixelLengthKey, (uint64_t)&protocol witness table for DefaultPixelLengthKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayScaleKey>, (uint64_t)&type metadata for DisplayScaleKey, (uint64_t)&protocol witness table for DisplayScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumScaleFactorKey>, (uint64_t)&type metadata for MinimumScaleFactorKey, (uint64_t)&protocol witness table for MinimumScaleFactorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationFactorKey>, (uint64_t)&type metadata for HyphenationFactorKey, (uint64_t)&protocol witness table for HyphenationFactorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>, (uint64_t)&type metadata for TruncationModeKey, (uint64_t)&protocol witness table for TruncationModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSizingKey>, (uint64_t)&type metadata for TextSizingKey, (uint64_t)&protocol witness table for TextSizingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationDisabledKey>, (uint64_t)&type metadata for HyphenationDisabledKey, (uint64_t)&protocol witness table for HyphenationDisabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineHeightMultipleKey>, (uint64_t)&type metadata for LineHeightMultipleKey, (uint64_t)&protocol witness table for LineHeightMultipleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumLineHeightKey>, (uint64_t)&type metadata for MinimumLineHeightKey, (uint64_t)&protocol witness table for MinimumLineHeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaximumLineHeightKey>, (uint64_t)&type metadata for MaximumLineHeightKey, (uint64_t)&protocol witness table for MaximumLineHeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineSpacingKey>, (uint64_t)&type metadata for LineSpacingKey, (uint64_t)&protocol witness table for LineSpacingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for ReusableInputs) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for ImplicitRootType) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for ArchivedViewInput) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>, (uint64_t)&type metadata for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t)&protocol witness table for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for DynamicStackOrientation) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for PreferTextLayoutManagerInput) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for VariantThatFitsFlag) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for TextAllowsSelection) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for TextRendererInput) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.HasWidgetMetadataKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.SavedTransactionKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for DisplayList.Options) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _ViewInputs.ScrapeableParentID) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ScrollTargetRoleKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.RemovePreferenceInput) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for WithinAccessibilityRotor) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ScrollableKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>, (uint64_t)&type metadata for RedactionReasonsKey, (uint64_t)&protocol witness table for RedactionReasonsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontDefinitionKey>, (uint64_t)&type metadata for FontDefinitionKey, (uint64_t)&protocol witness table for FontDefinitionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SensitiveContentKey>, (uint64_t)&type metadata for SensitiveContentKey, (uint64_t)&protocol witness table for SensitiveContentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for StyleContextInput) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for InterfaceIdiomInput) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for TransactionPropertyKey<TracksVelocityKey>, (uint64_t)&type metadata for TracksVelocityKey, (uint64_t)&protocol witness table for TracksVelocityKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerShapeKey>, (uint64_t)&type metadata for ContainerShapeKey, (uint64_t)&protocol witness table for ContainerShapeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ForegroundStyleKey>, (uint64_t)&type metadata for ForegroundStyleKey, (uint64_t)&protocol witness table for ForegroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultForegroundStyleKey>, (uint64_t)&type metadata for DefaultForegroundStyleKey, (uint64_t)&protocol witness table for DefaultForegroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorDefinitionKey>, (uint64_t)&type metadata for SystemColorDefinitionKey, (uint64_t)&protocol witness table for SystemColorDefinitionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for ViewListOptionsInput) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontKey>, (uint64_t)&type metadata for FontKey, (uint64_t)&protocol witness table for FontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultFontKey>, (uint64_t)&type metadata for DefaultFontKey, (uint64_t)&protocol witness table for DefaultFontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TintKey>, (uint64_t)&type metadata for TintKey, (uint64_t)&protocol witness table for TintKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolFontKey>, (uint64_t)&type metadata for SymbolFontKey, (uint64_t)&protocol witness table for SymbolFontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccentColorKey>, (uint64_t)&type metadata for AccentColorKey, (uint64_t)&protocol witness table for AccentColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundStyleKey>, (uint64_t)&type metadata for BackgroundStyleKey, (uint64_t)&protocol witness table for BackgroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextScaleKey>, (uint64_t)&type metadata for TextScaleKey, (uint64_t)&protocol witness table for TextScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultBaselineOffsetKey>, (uint64_t)&type metadata for DefaultBaselineOffsetKey, (uint64_t)&protocol witness table for DefaultBaselineOffsetKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTrackingKey>, (uint64_t)&type metadata for DefaultTrackingKey, (uint64_t)&protocol witness table for DefaultTrackingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultKerningKey>, (uint64_t)&type metadata for DefaultKerningKey, (uint64_t)&protocol witness table for DefaultKerningKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContentTransition.State>, (uint64_t)&type metadata for ContentTransition.State, (uint64_t)&protocol witness table for ContentTransition.State, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesContentTransitionsKey>, (uint64_t)&type metadata for DisablesContentTransitionsKey, (uint64_t)&protocol witness table for DisablesContentTransitionsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityEnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>, (uint64_t)&type metadata for EnvironmentValues.DisableLinkColorKey, (uint64_t)&protocol witness table for EnvironmentValues.DisableLinkColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnderlineStyleKey>, (uint64_t)&type metadata for UnderlineStyleKey, (uint64_t)&protocol witness table for UnderlineStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<StrikethroughStyleKey>, (uint64_t)&type metadata for StrikethroughStyleKey, (uint64_t)&protocol witness table for StrikethroughStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for StyleableViewContextInput) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>, (uint64_t)&type metadata for EnvironmentValues.StringResolutionDate, (uint64_t)&protocol witness table for EnvironmentValues.StringResolutionDate, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ParagraphTypesettingKey>, (uint64_t)&type metadata for ParagraphTypesettingKey, (uint64_t)&protocol witness table for ParagraphTypesettingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsTighteningKey>, (uint64_t)&type metadata for AllowsTighteningKey, (uint64_t)&protocol witness table for AllowsTighteningKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for ViewListShouldParentToPlaceholderSubgraph) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ImageRepresentationKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvedTextProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvedTextProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>, (uint64_t)&type metadata for AccessibilityReduceTransparencyKey, (uint64_t)&protocol witness table for AccessibilityReduceTransparencyKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>, (uint64_t)&type metadata for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSuffixKey>, (uint64_t)&type metadata for TextSuffixKey, (uint64_t)&protocol witness table for TextSuffixKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollContentAdjustmentBehaviorKey>, (uint64_t)&type metadata for Transaction.ScrollContentAdjustmentBehaviorKey, (uint64_t)&protocol witness table for Transaction.ScrollContentAdjustmentBehaviorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.OpacityAccessibilityProviderKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ContentScrollPositionKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ContentScrollPositionAnchorKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ScrollPositionKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.TextAccessibilityProviderKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LocaleKey>, (uint64_t)&type metadata for LocaleKey, (uint64_t)&protocol witness table for LocaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.TextAlwaysOnProviderKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TintAdjustmentModeKey>, (uint64_t)&type metadata for TintAdjustmentModeKey, (uint64_t)&protocol witness table for TintAdjustmentModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AppearsActiveKey>, (uint64_t)&type metadata for AppearsActiveKey, (uint64_t)&protocol witness table for AppearsActiveKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AvoidsOrphansKey>, (uint64_t)&type metadata for AvoidsOrphansKey, (uint64_t)&protocol witness table for AvoidsOrphansKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.GestureAccessibilityProviderKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>, (uint64_t)&type metadata for SymbolRenderingModeKey, (uint64_t)&protocol witness table for SymbolRenderingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>, (uint64_t)&type metadata for HoverEffectContextKey, (uint64_t)&protocol witness table for HoverEffectContextKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.SpacerRepresentationKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedLuminanceKey>, (uint64_t)&type metadata for ReducedLuminanceKey, (uint64_t)&protocol witness table for ReducedLuminanceKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultSymbolFontKey>, (uint64_t)&type metadata for DefaultSymbolFontKey, (uint64_t)&protocol witness table for DefaultSymbolFontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorSchemeKey>, (uint64_t)&type metadata for SystemColorSchemeKey, (uint64_t)&protocol witness table for SystemColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>, (uint64_t)&type metadata for BackgroundProminence.Key, (uint64_t)&protocol witness table for BackgroundProminence.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.TextRepresentationKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>, (uint64_t)&type metadata for EnvironmentValues.SymbolEffectsKey, (uint64_t)&protocol witness table for EnvironmentValues.SymbolEffectsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>, (uint64_t)&type metadata for ControlSizeKey, (uint64_t)&protocol witness table for ControlSizeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderProminenceKey>, (uint64_t)&type metadata for HeaderProminenceKey, (uint64_t)&protocol witness table for HeaderProminenceKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FallbackFontProviderKey>, (uint64_t)&type metadata for FallbackFontProviderKey, (uint64_t)&protocol witness table for FallbackFontProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ImageAccessibilityProviderKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for UsingGraphicsRenderer) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.NamedImageRepresentationKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for Image.Style) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesAnimationsKey>, (uint64_t)&type metadata for DisablesAnimationsKey, (uint64_t)&protocol witness table for DisablesAnimationsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationListenerKey>, (uint64_t)&type metadata for Transaction.AnimationListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationListenerKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationLogicalListenerKey>, (uint64_t)&type metadata for Transaction.AnimationLogicalListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationLogicalListenerKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationFrameIntervalKey>, (uint64_t)&type metadata for AnimationFrameIntervalKey, (uint64_t)&protocol witness table for AnimationFrameIntervalKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.LayoutAccessibilityProviderKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TimeZoneKey>, (uint64_t)&type metadata for TimeZoneKey, (uint64_t)&protocol witness table for TimeZoneKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<CalendarKey>, (uint64_t)&type metadata for CalendarKey, (uint64_t)&protocol witness table for CalendarKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontModifiersKey>, (uint64_t)&type metadata for FontModifiersKey, (uint64_t)&protocol witness table for FontModifiersKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for TransactionPropertyKey<FromScrollViewKey>, (uint64_t)&type metadata for FromScrollViewKey, (uint64_t)&protocol witness table for FromScrollViewKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenURLActionKey>, (uint64_t)&type metadata for OpenURLActionKey, (uint64_t)&protocol witness table for OpenURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenSensitiveURLActionKey>, (uint64_t)&type metadata for OpenSensitiveURLActionKey, (uint64_t)&protocol witness table for OpenSensitiveURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HasSystemOpenURLActionKey>, (uint64_t)&type metadata for HasSystemOpenURLActionKey, (uint64_t)&protocol witness table for HasSystemOpenURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>, (uint64_t)&type metadata for EnvironmentValues.ScrollAnchorsKey, (uint64_t)&protocol witness table for EnvironmentValues.ScrollAnchorsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for ForEachEvictionInput) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey>, (uint64_t)&type metadata for Transaction.IsScrollStateValueUpdateKey, (uint64_t)&protocol witness table for Transaction.IsScrollStateValueUpdateKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ScrollPositionAnchorKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ScrollStateRequestKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.ScrollPhaseStateKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for ReferenceDateInput) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.Key>, (uint64_t)&type metadata for EnvironmentValues.Key, (uint64_t)&protocol witness table for EnvironmentValues.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>, (uint64_t)&type metadata for Transaction.DisabledPageScrollAnimationKey, (uint64_t)&protocol witness table for Transaction.DisabledPageScrollAnimationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPaddingKey>, (uint64_t)&type metadata for DefaultPaddingKey, (uint64_t)&protocol witness table for DefaultPaddingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationReasonKey>, (uint64_t)&type metadata for AnimationReasonKey, (uint64_t)&protocol witness table for AnimationReasonKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _GraphInputs.TextSelectionRepresentationKey) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for _DisplayList_StableIdentityScope) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for TextSelectionForbidden) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_textShape>, (uint64_t)&type metadata for EnvironmentValues.__Key_textShape, (uint64_t)&protocol witness table for EnvironmentValues.__Key_textShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsVibrantBlendingKey>, (uint64_t)&type metadata for AllowsVibrantBlendingKey, (uint64_t)&protocol witness table for AllowsVibrantBlendingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UnredactSymbolImage>, (uint64_t)&type metadata for UnredactSymbolImage, (uint64_t)&protocol witness table for UnredactSymbolImage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>, (uint64_t)&type metadata for ContainerBackgroundKind.Key, (uint64_t)&protocol witness table for ContainerBackgroundKind.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaterialActiveAppearance.Key>, (uint64_t)&type metadata for MaterialActiveAppearance.Key, (uint64_t)&protocol witness table for MaterialActiveAppearance.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>, (uint64_t)&type metadata for SymbolsGrowToFitBackgroundKey, (uint64_t)&protocol witness table for SymbolsGrowToFitBackgroundKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>, (uint64_t)&type metadata for SymbolBackgroundCornerRadiusKey, (uint64_t)&protocol witness table for SymbolBackgroundCornerRadiusKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<VibrantColorStyleKey>, (uint64_t)&type metadata for VibrantColorStyleKey, (uint64_t)&protocol witness table for VibrantColorStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TypesettingConfigurationKey>, (uint64_t)&type metadata for TypesettingConfigurationKey, (uint64_t)&protocol witness table for TypesettingConfigurationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollTargetAnchorKey>, (uint64_t)&type metadata for Transaction.ScrollTargetAnchorKey, (uint64_t)&protocol witness table for Transaction.ScrollTargetAnchorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility>, (uint64_t)&type metadata for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t)&protocol witness table for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey>, (uint64_t)&type metadata for Transaction.ScrollPreservesVelocityKey, (uint64_t)&protocol witness table for Transaction.ScrollPreservesVelocityKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>, (uint64_t)&type metadata for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>, (uint64_t)&type metadata for SystemAccentValueKey, (uint64_t)&protocol witness table for SystemAccentValueKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>, (uint64_t)&type metadata for EnvironmentValues.ContentShapesKey, (uint64_t)&protocol witness table for EnvironmentValues.ContentShapesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey>, (uint64_t)&type metadata for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t)&protocol witness table for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for EventBindingBridgeFactoryInput) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      while ((a2 & ~*(void *)(v3 + 56)) != 0)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      if (*(ValueMetadata **)(v3 + 16) == &type metadata for GestureContainerFactoryInput) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 32);
      if (!v3) {
        return 0;
      }
    }
    return v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for TransactionPropertyKey<ContinuousKey>, (uint64_t)&type metadata for ContinuousKey, (uint64_t)&protocol witness table for ContinuousKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTextFieldTruncationMode>, (uint64_t)&type metadata for DefaultTextFieldTruncationMode, (uint64_t)&protocol witness table for DefaultTextFieldTruncationMode, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsFocused, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsMain, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsActive, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsActive, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsFocused, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    uint64_t v3 = (void *)result;
    while (1)
    {
      while ((a2 & ~v3[7]) != 0)
      {
        uint64_t v3 = (void *)v3[5];
        if (!v3) {
          return 0;
        }
      }
      uint64_t v4 = v3[3];
      if (v4)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v4, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v5 = v3[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsMain, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v5 == v6) {
        break;
      }
      uint64_t v3 = (void *)v3[4];
      if (!v3) {
        return 0;
      }
    }
    return (uint64_t)v3;
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter(uint64_t a1)
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityInvertColorsKey>, (uint64_t)&type metadata for AccessibilityInvertColorsKey, (uint64_t)&protocol witness table for AccessibilityInvertColorsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t v5;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextAlignmentKey>, (uint64_t)&type metadata for TextAlignmentKey, (uint64_t)&protocol witness table for TextAlignmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v5);
  if (v3) {
    return *(unsigned __int8 *)(v3 + 72);
  }
  else {
    return 3;
  }
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationDisabledKey>, (uint64_t)&type metadata for HyphenationDisabledKey, (uint64_t)&protocol witness table for HyphenationDisabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>, (uint64_t)&type metadata for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t)&protocol witness table for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  uint64_t v2;
  int *v3;
  uint64_t v5;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.ScrollTargetRoleKey);
  Swift::Int v2 = specialized find1<A>(_:key:filter:)(a1, v5);
  if (v2)
  {
    uint64_t v3 = (int *)(v2 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v3 = &static _GraphInputs.ScrollTargetRoleKey.defaultValue;
  }
  return *v3;
}

{
  uint64_t result;
  uint64_t v3;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.RemovePreferenceInput);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v3);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for WithinAccessibilityRotor);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v3);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  uint64_t v2;
  int *v3;
  uint64_t v5;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.ScrollableKey);
  Swift::Int v2 = specialized find1<A>(_:key:filter:)(a1, v5);
  if (v2)
  {
    uint64_t v3 = (int *)(v2 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v3 = &static _GraphInputs.ScrollableKey.defaultValue;
  }
  return *v3;
}

{
  Swift::Int v2;
  uint64_t v3;
  long long *v4;
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontDefinitionKey>, (uint64_t)&type metadata for FontDefinitionKey, (uint64_t)&protocol witness table for FontDefinitionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    uint64_t v4 = (long long *)(v3 + 72);
  }
  else
  {
    uint64_t v4 = &static FontDefinitionKey.defaultValue;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  return *(void *)v4;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SensitiveContentKey>, (uint64_t)&type metadata for SensitiveContentKey, (uint64_t)&protocol witness table for SensitiveContentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<TracksVelocityKey>, (uint64_t)&type metadata for TracksVelocityKey, (uint64_t)&protocol witness table for TracksVelocityKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityEnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>, (uint64_t)&type metadata for EnvironmentValues.DisableLinkColorKey, (uint64_t)&protocol witness table for EnvironmentValues.DisableLinkColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for StyleableViewContextInput);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v3);
  if (result) {
    return *(void *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsTighteningKey>, (uint64_t)&type metadata for AllowsTighteningKey, (uint64_t)&protocol witness table for AllowsTighteningKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for ViewListShouldParentToPlaceholderSubgraph);
  Swift::Int v2 = specialized find1<A>(_:key:filter:)(a1, v4);
  if (v2) {
    return *(unsigned __int8 *)(v2 + 72);
  }
  else {
    return 1;
  }
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityButtonShapesKey>, (uint64_t)&type metadata for AccessibilityButtonShapesKey, (uint64_t)&protocol witness table for AccessibilityButtonShapesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>, (uint64_t)&type metadata for AccessibilityDifferentiateWithoutColorKey, (uint64_t)&protocol witness table for AccessibilityDifferentiateWithoutColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  uint64_t v2;
  long long *v3;
  uint64_t v5;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.OpacityAccessibilityProviderKey);
  Swift::Int v2 = specialized find1<A>(_:key:filter:)(a1, v5);
  if (v2)
  {
    uint64_t v3 = (long long *)(v2 + 72);
  }
  else
  {
    uint64_t v3 = &static _GraphInputs.OpacityAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  return *(void *)v3;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedLuminanceKey>, (uint64_t)&type metadata for ReducedLuminanceKey, (uint64_t)&protocol witness table for ReducedLuminanceKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>, (uint64_t)&type metadata for EnvironmentValues.SymbolEffectsKey, (uint64_t)&protocol witness table for EnvironmentValues.SymbolEffectsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v4 = &static EnvironmentValues.SymbolEffectsKey.defaultValue;
  }
  return *v4;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesAnimationsKey>, (uint64_t)&type metadata for DisablesAnimationsKey, (uint64_t)&protocol witness table for DisablesAnimationsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontModifiersKey>, (uint64_t)&type metadata for FontModifiersKey, (uint64_t)&protocol witness table for FontModifiersKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v4 = &static FontModifiersKey.defaultValue;
  }
  return *v4;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<FromScrollViewKey>, (uint64_t)&type metadata for FromScrollViewKey, (uint64_t)&protocol witness table for FromScrollViewKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HasSystemOpenURLActionKey>, (uint64_t)&type metadata for HasSystemOpenURLActionKey, (uint64_t)&protocol witness table for HasSystemOpenURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>, (uint64_t)&type metadata for AccessibilityReduceTransparencyKey, (uint64_t)&protocol witness table for AccessibilityReduceTransparencyKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey>, (uint64_t)&type metadata for Transaction.IsScrollStateValueUpdateKey, (uint64_t)&protocol witness table for Transaction.IsScrollStateValueUpdateKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsVisionEnabledKey>, (uint64_t)&type metadata for IsVisionEnabledKey, (uint64_t)&protocol witness table for IsVisionEnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlacementTintKey>, (uint64_t)&type metadata for PlacementTintKey, (uint64_t)&protocol witness table for PlacementTintKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v4 = &static PlacementTintKey.defaultValue;
  }
  return *v4;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UnredactSymbolImage>, (uint64_t)&type metadata for UnredactSymbolImage, (uint64_t)&protocol witness table for UnredactSymbolImage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>, (uint64_t)&type metadata for SymbolsGrowToFitBackgroundKey, (uint64_t)&protocol witness table for SymbolsGrowToFitBackgroundKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollTargetAnchorKey>, (uint64_t)&type metadata for Transaction.ScrollTargetAnchorKey, (uint64_t)&protocol witness table for Transaction.ScrollTargetAnchorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(void *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>, (uint64_t)&type metadata for Transaction.DisabledPageScrollAnimationKey, (uint64_t)&protocol witness table for Transaction.DisabledPageScrollAnimationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t v5;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility>, (uint64_t)&type metadata for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t)&protocol witness table for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v5);
  if (v3) {
    return *(unsigned __int8 *)(v3 + 72);
  }
  else {
    return 1;
  }
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey>, (uint64_t)&type metadata for Transaction.ScrollPreservesVelocityKey, (uint64_t)&protocol witness table for Transaction.ScrollPreservesVelocityKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  uint64_t v2;
  long long *v3;
  uint64_t v5;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.LayoutAccessibilityProviderKey);
  Swift::Int v2 = specialized find1<A>(_:key:filter:)(a1, v5);
  if (v2)
  {
    uint64_t v3 = (long long *)(v2 + 72);
  }
  else
  {
    uint64_t v3 = &static _GraphInputs.LayoutAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  return *(void *)v3;
}

{
  uint64_t result;
  uint64_t v3;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for EventBindingBridgeFactoryInput);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v3);
  if (result) {
    return *(void *)(result + 72);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;

  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for GestureContainerFactoryInput);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v3);
  if (result) {
    return *(void *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t v5;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v5);
  if (v3) {
    return *(unsigned int *)(v3 + 72);
  }
  else {
    return 3;
  }
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<ContinuousKey>, (uint64_t)&type metadata for ContinuousKey, (uint64_t)&protocol witness table for ContinuousKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsMain, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InTouchBarKey>, (uint64_t)&type metadata for InTouchBarKey, (uint64_t)&protocol witness table for InTouchBarKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceMotionKey>, (uint64_t)&type metadata for AccessibilityReduceMotionKey, (uint64_t)&protocol witness table for AccessibilityReduceMotionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>, (uint64_t)&type metadata for AccessibilityDimFlashingLightsKey, (uint64_t)&protocol witness table for AccessibilityDimFlashingLightsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>, (uint64_t)&type metadata for AccessibilityPlayAnimatedImagesKey, (uint64_t)&protocol witness table for AccessibilityPlayAnimatedImagesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityOnOffLabelsKey>, (uint64_t)&type metadata for AccessibilityOnOffLabelsKey, (uint64_t)&protocol witness table for AccessibilityOnOffLabelsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v4);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v4 = &static EnvironmentValues.CUIAssetMatchTypesKey.defaultValue;
  }
  return *v4;
}

uint64_t specialized find1<A>(_:key:filter:)(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), unint64_t *a4, uint64_t a5, uint64_t a6)
{
  if (result)
  {
    char v11 = (void *)result;
    while (1)
    {
      while ((a2 & ~v11[7]) != 0)
      {
        char v11 = (void *)v11[5];
        if (!v11) {
          return 0;
        }
      }
      uint64_t v12 = v11[3];
      if (v12)
      {
        uint64_t result = a3(v12, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v13 = v11[2];
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      if (v13 == v14) {
        break;
      }
      char v11 = (void *)v11[4];
      if (!v11) {
        return 0;
      }
    }
    return (uint64_t)v11;
  }
  return result;
}

uint64_t specialized find1<A>(_:key:filter:)(uint64_t a1, uint64_t a2)
{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityInvertColorsKey>, (uint64_t)&type metadata for AccessibilityInvertColorsKey, (uint64_t)&protocol witness table for AccessibilityInvertColorsKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<DividerThicknessKey>, (uint64_t)&type metadata for DividerThicknessKey, (uint64_t)&protocol witness table for DividerThicknessKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityButtonShapesKey>, (uint64_t)&type metadata for AccessibilityButtonShapesKey, (uint64_t)&protocol witness table for AccessibilityButtonShapesKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>, (uint64_t)&type metadata for AccessibilityDifferentiateWithoutColorKey, (uint64_t)&protocol witness table for AccessibilityDifferentiateWithoutColorKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceMotionKey>, (uint64_t)&type metadata for AccessibilityReduceMotionKey, (uint64_t)&protocol witness table for AccessibilityReduceMotionKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>, (uint64_t)&type metadata for EnvironmentValues.PreferenceBridgeKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferenceBridgeKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>, (uint64_t)&type metadata for AccessibilityDimFlashingLightsKey, (uint64_t)&protocol witness table for AccessibilityDimFlashingLightsKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>, (uint64_t)&type metadata for AccessibilityPlayAnimatedImagesKey, (uint64_t)&protocol witness table for AccessibilityPlayAnimatedImagesKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityOnOffLabelsKey>, (uint64_t)&type metadata for AccessibilityOnOffLabelsKey, (uint64_t)&protocol witness table for AccessibilityOnOffLabelsKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayCornerRadiusKey>, (uint64_t)&type metadata for DisplayCornerRadiusKey, (uint64_t)&protocol witness table for DisplayCornerRadiusKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), (uint64_t (*)(void))type metadata accessor for MatchedGeometryScope);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>, (uint64_t)&type metadata for ExplicitPreferredColorSchemeKey, (uint64_t)&protocol witness table for ExplicitPreferredColorSchemeKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<IsVisionEnabledKey>, (uint64_t)&type metadata for IsVisionEnabledKey, (uint64_t)&protocol witness table for IsVisionEnabledKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<PlacementTintKey>, (uint64_t)&type metadata for PlacementTintKey, (uint64_t)&protocol witness table for PlacementTintKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), (uint64_t (*)(void))type metadata accessor for BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for EnvironmentPropertyKey<InTouchBarKey>, (uint64_t)&type metadata for InTouchBarKey, (uint64_t)&protocol witness table for InTouchBarKey);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), (uint64_t (*)(void))type metadata accessor for BodyCountInput<_ViewModifier_Content<SafeAreaPaddingModifier>>);
}

{
  return specialized find1<A>(_:key:filter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized find1<A>(_:key:filter:), (uint64_t (*)(void))type metadata accessor for BodyInput<_ViewModifier_Content<SafeAreaPaddingModifier>>);
}

uint64_t TextLayoutProperties.init(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[1];
  uint64_t v62 = *a1;
  uint64_t v3 = v62;
  uint64_t v63 = v4;
  EnvironmentValues.truncationMode.getter((char *)&v61);
  char v60 = v61;
  uint64_t v62 = v3;
  uint64_t v63 = v4;
  uint64_t v59 = EnvironmentValues.lineLimit.getter();
  char v58 = v5;
  uint64_t v62 = v3;
  uint64_t v63 = v4;
  uint64_t v57 = EnvironmentValues.lowerLineLimit.getter();
  char v56 = v6;
  uint64_t v62 = v3;
  uint64_t v63 = v4;
  EnvironmentValues.pixelLength.getter();
  uint64_t v8 = v7;
  if (v4)
  {
    swift_retain_n();
    swift_retain_n();
    double v9 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    double v10 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    double v11 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    double v12 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    double v13 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    double v14 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    char v55 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    double v15 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    char v54 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v62);
    swift_release_n();
    swift_release_n();
    char v53 = v62;
  }
  else
  {
    uint64_t v16 = swift_retain_n();
    double v9 = specialized closure #1 in PropertyList.subscript.getter(v16);
    swift_release_n();
    uint64_t v17 = swift_retain_n();
    double v10 = specialized closure #1 in PropertyList.subscript.getter(v17);
    swift_release_n();
    uint64_t v18 = swift_retain_n();
    double v11 = specialized closure #1 in PropertyList.subscript.getter(v18);
    swift_release_n();
    uint64_t v19 = swift_retain_n();
    double v12 = specialized closure #1 in PropertyList.subscript.getter(v19);
    swift_release_n();
    uint64_t v20 = swift_retain_n();
    double v13 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release_n();
    uint64_t v21 = swift_retain_n();
    double v14 = specialized closure #1 in PropertyList.subscript.getter(v21);
    swift_release_n();
    uint64_t v22 = swift_retain_n();
    char v55 = specialized closure #1 in PropertyList.subscript.getter(v22);
    swift_release_n();
    uint64_t v23 = swift_retain_n();
    double v15 = specialized closure #1 in PropertyList.subscript.getter(v23);
    swift_release_n();
    uint64_t v24 = swift_retain_n();
    char v54 = specialized closure #1 in PropertyList.subscript.getter(v24);
    swift_release_n();
    uint64_t v25 = swift_retain_n();
    uint64_t v26 = specialized find<A>(_:key:)(v25);
    if (v26) {
      char v53 = *(unsigned char *)(v26 + 72);
    }
    else {
      char v53 = 0;
    }
    swift_release_n();
  }
  uint64_t v62 = v3;
  uint64_t v63 = v4;
  EnvironmentValues.contentTransitionStyle.getter(&v61);
  char v52 = v61;
  if (v4)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (char *)&v61);
    swift_release_n();
    swift_release_n();
    char v27 = v61;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v62);
    swift_release_n();
    swift_release_n();
    char v28 = v62;
    uint64_t v29 = v63;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v62);
    swift_release_n();
    swift_release_n();
    uint64_t v31 = v62;
    uint64_t v30 = v63;
    uint64_t v32 = v64;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (__int16 *)&v61);
    swift_release_n();
    uint64_t result = swift_release_n();
    __int16 v34 = v61;
  }
  else
  {
    type metadata accessor for InterfaceIdiomBox<PhoneInterfaceIdiom>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v35);
    uint64_t v36 = v62;
    uint64_t v37 = swift_retain_n();
    uint64_t v38 = specialized find1<A>(_:key:filter:)(v37, v36);
    if (v38) {
      char v27 = *(unsigned char *)(v38 + 72);
    }
    else {
      char v27 = 0;
    }
    uint64_t v31 = 2;
    swift_release_n();
    uint64_t v39 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v39, (uint64_t)&v62);
    swift_release_n();
    char v28 = v62;
    uint64_t v29 = v63;
    type metadata accessor for InterfaceIdiomBox<PhoneInterfaceIdiom>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_textShape>, (uint64_t)&type metadata for EnvironmentValues.__Key_textShape, (uint64_t)&protocol witness table for EnvironmentValues.__Key_textShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v40);
    uint64_t v41 = v61;
    uint64_t v42 = swift_retain_n();
    long long v43 = (void *)specialized find1<A>(_:key:filter:)(v42, v41);
    if (v43)
    {
      uint64_t v31 = v43[9];
      uint64_t v30 = v43[10];
      uint64_t v32 = v43[11];
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v32 = 0;
    }
    __int16 v34 = 2;
    swift_release_n();
    type metadata accessor for InterfaceIdiomBox<PhoneInterfaceIdiom>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v44);
    uint64_t v45 = v62;
    uint64_t v46 = swift_retain_n();
    uint64_t v47 = specialized find1<A>(_:key:filter:)(v46, v45);
    if (v47) {
      __int16 v34 = *(_WORD *)(v47 + 72);
    }
    uint64_t result = swift_release_n();
  }
  if (v34 == 2) {
    char v48 = 0;
  }
  else {
    char v48 = HIBYTE(v34) & 1;
  }
  if (v54 == 3) {
    char v49 = 0;
  }
  else {
    char v49 = v54;
  }
  uint64_t v50 = v57 & ~(v57 >> 63);
  if (v56) {
    uint64_t v50 = v57;
  }
  if (v59 <= 1) {
    uint64_t v51 = 1;
  }
  else {
    uint64_t v51 = v59;
  }
  LOBYTE(v62) = v58 & 1;
  if (v58) {
    uint64_t v51 = v59;
  }
  *(void *)a2 = v51;
  *(unsigned char *)(a2 + 8) = v58 & 1;
  *(void *)(a2 + 16) = v50;
  *(unsigned char *)(a2 + 24) = v56 & 1;
  *(unsigned char *)(a2 + 25) = v60;
  *(unsigned char *)(a2 + 26) = v49;
  *(unsigned char *)(a2 + 27) = v53;
  *(unsigned char *)(a2 + 28) = v52;
  *(double *)(a2 + 32) = v9;
  *(double *)(a2 + 40) = v10;
  *(double *)(a2 + 48) = v11;
  *(double *)(a2 + 56) = v12;
  *(double *)(a2 + 64) = v13;
  *(double *)(a2 + 72) = v14;
  *(unsigned char *)(a2 + 80) = v55 & 1;
  *(unsigned char *)(a2 + 81) = v27;
  *(double *)(a2 + 88) = v15;
  *(void *)(a2 + 96) = v8;
  *(unsigned char *)(a2 + 104) = v28;
  *(void *)(a2 + 112) = v29;
  *(void *)(a2 + 120) = v31;
  *(void *)(a2 + 128) = v30;
  *(void *)(a2 + 136) = v32;
  *(unsigned char *)(a2 + 144) = v48;
  return result;
}

uint64_t EnvironmentValues.lineLimit.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = a1(v3);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    uint64_t v8 = a2(v7);
    if (v8) {
      uint64_t v5 = *(void *)(v8 + 72);
    }
    else {
      uint64_t v5 = 0;
    }
    swift_release_n();
  }
  return v5;
}

uint64_t specialized find<A>(_:key:)(uint64_t a1)
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LineLimitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);

  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;
  uint64_t vars8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundMaterialKey>, (uint64_t)&type metadata for BackgroundMaterialKey, (uint64_t)&protocol witness table for BackgroundMaterialKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);

  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;
  uint64_t vars8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);

  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;
  uint64_t vars8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LowerLineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LowerLineLimitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);

  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  unint64_t v2 = ((unint64_t)&type metadata for ReusableInputs >> 4) & 0x3F;
  uint64_t v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = __OFADD__(v2, 64);
  unint64_t v2 = 1uLL >> -(char)((unint64_t)&type metadata for ReusableInputs >> 4);
  if (!v4) {
    unint64_t v2 = 1 << ((unint64_t)&type metadata for ReusableInputs >> 4);
  }
  uint64_t v3 = (unsigned __int16)&type metadata for ReusableInputs >> 10;
  if (v3 > 0x40)
  {
    uint64_t v3 = 0;
    goto LABEL_11;
  }
  unint64_t v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = 1 << ((unint64_t)&type metadata for ReusableInputs >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for ReusableInputs >> 10) >= 0x40uLL) {
    uint64_t v5 = 0;
  }
  uint64_t v4 = __OFADD__(v3, 64);
  uint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for ReusableInputs >> 10);
  if (!v4) {
    uint64_t v3 = v5;
  }
LABEL_11:
  unint64_t v1 = ((unint64_t)&type metadata for ReusableInputs >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    char v6 = 1 << (&type metadata for ReusableInputs >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  char v6 = 1uLL >> -(char)(&type metadata for ReusableInputs >> 16);
  if (v1 <= -64) {
    char v6 = 0;
  }
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  unint64_t v2 = ((unint64_t)&type metadata for ArchivedViewInput >> 4) & 0x3F;
  uint64_t v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = __OFADD__(v2, 64);
  unint64_t v2 = 1uLL >> -(char)((unint64_t)&type metadata for ArchivedViewInput >> 4);
  if (!v4) {
    unint64_t v2 = 1 << ((unint64_t)&type metadata for ArchivedViewInput >> 4);
  }
  uint64_t v3 = (unsigned __int16)&type metadata for ArchivedViewInput >> 10;
  if (v3 > 0x40)
  {
    uint64_t v3 = 0;
    goto LABEL_11;
  }
  unint64_t v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = 1 << ((unint64_t)&type metadata for ArchivedViewInput >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for ArchivedViewInput >> 10) >= 0x40uLL) {
    uint64_t v5 = 0;
  }
  uint64_t v4 = __OFADD__(v3, 64);
  uint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for ArchivedViewInput >> 10);
  if (!v4) {
    uint64_t v3 = v5;
  }
LABEL_11:
  unint64_t v1 = ((unint64_t)&type metadata for ArchivedViewInput >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    char v6 = 1 << (&type metadata for ArchivedViewInput >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  char v6 = 1uLL >> -(char)(&type metadata for ArchivedViewInput >> 16);
  if (v1 <= -64) {
    char v6 = 0;
  }
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  unint64_t v2 = ((unint64_t)&type metadata for PreferTextLayoutManagerInput >> 4) & 0x3F;
  uint64_t v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = __OFADD__(v2, 64);
  unint64_t v2 = 1uLL >> -(char)((unint64_t)&type metadata for PreferTextLayoutManagerInput >> 4);
  if (!v4) {
    unint64_t v2 = 1 << ((unint64_t)&type metadata for PreferTextLayoutManagerInput >> 4);
  }
  uint64_t v3 = (unsigned __int16)&type metadata for PreferTextLayoutManagerInput >> 10;
  if (v3 > 0x40)
  {
    uint64_t v3 = 0;
    goto LABEL_11;
  }
  unint64_t v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = 1 << ((unint64_t)&type metadata for PreferTextLayoutManagerInput >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for PreferTextLayoutManagerInput >> 10) >= 0x40uLL) {
    uint64_t v5 = 0;
  }
  uint64_t v4 = __OFADD__(v3, 64);
  uint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for PreferTextLayoutManagerInput >> 10);
  if (!v4) {
    uint64_t v3 = v5;
  }
LABEL_11:
  unint64_t v1 = ((unint64_t)&type metadata for PreferTextLayoutManagerInput >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    char v6 = 1 << (&type metadata for PreferTextLayoutManagerInput >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  char v6 = 1uLL >> -(char)(&type metadata for PreferTextLayoutManagerInput >> 16);
  if (v1 <= -64) {
    char v6 = 0;
  }
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  unint64_t v2 = ((unint64_t)&type metadata for VariantThatFitsFlag >> 4) & 0x3F;
  uint64_t v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = __OFADD__(v2, 64);
  unint64_t v2 = 1uLL >> -(char)((unint64_t)&type metadata for VariantThatFitsFlag >> 4);
  if (!v4) {
    unint64_t v2 = 1 << ((unint64_t)&type metadata for VariantThatFitsFlag >> 4);
  }
  uint64_t v3 = (unsigned __int16)&type metadata for VariantThatFitsFlag >> 10;
  if (v3 > 0x40)
  {
    uint64_t v3 = 0;
    goto LABEL_11;
  }
  unint64_t v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = 1 << ((unint64_t)&type metadata for VariantThatFitsFlag >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for VariantThatFitsFlag >> 10) >= 0x40uLL) {
    uint64_t v5 = 0;
  }
  uint64_t v4 = __OFADD__(v3, 64);
  uint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for VariantThatFitsFlag >> 10);
  if (!v4) {
    uint64_t v3 = v5;
  }
LABEL_11:
  unint64_t v1 = ((unint64_t)&type metadata for VariantThatFitsFlag >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    char v6 = 1 << (&type metadata for VariantThatFitsFlag >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  char v6 = 1uLL >> -(char)(&type metadata for VariantThatFitsFlag >> 16);
  if (v1 <= -64) {
    char v6 = 0;
  }
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  unint64_t v2 = ((unint64_t)&type metadata for TextAllowsSelection >> 4) & 0x3F;
  uint64_t v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = __OFADD__(v2, 64);
  unint64_t v2 = 1uLL >> -(char)((unint64_t)&type metadata for TextAllowsSelection >> 4);
  if (!v4) {
    unint64_t v2 = 1 << ((unint64_t)&type metadata for TextAllowsSelection >> 4);
  }
  uint64_t v3 = (unsigned __int16)&type metadata for TextAllowsSelection >> 10;
  if (v3 > 0x40)
  {
    uint64_t v3 = 0;
    goto LABEL_11;
  }
  unint64_t v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = 1 << ((unint64_t)&type metadata for TextAllowsSelection >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for TextAllowsSelection >> 10) >= 0x40uLL) {
    uint64_t v5 = 0;
  }
  uint64_t v4 = __OFADD__(v3, 64);
  uint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for TextAllowsSelection >> 10);
  if (!v4) {
    uint64_t v3 = v5;
  }
LABEL_11:
  unint64_t v1 = ((unint64_t)&type metadata for TextAllowsSelection >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    char v6 = 1 << (&type metadata for TextAllowsSelection >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  char v6 = 1uLL >> -(char)(&type metadata for TextAllowsSelection >> 16);
  if (v1 <= -64) {
    char v6 = 0;
  }
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  unint64_t v2 = ((unint64_t)&type metadata for TextRendererInput >> 4) & 0x3F;
  uint64_t v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = __OFADD__(v2, 64);
  unint64_t v2 = 1uLL >> -(char)((unint64_t)&type metadata for TextRendererInput >> 4);
  if (!v4) {
    unint64_t v2 = 1 << ((unint64_t)&type metadata for TextRendererInput >> 4);
  }
  uint64_t v3 = (unsigned __int16)&type metadata for TextRendererInput >> 10;
  if (v3 > 0x40)
  {
    uint64_t v3 = 0;
    goto LABEL_11;
  }
  unint64_t v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = 1 << ((unint64_t)&type metadata for TextRendererInput >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for TextRendererInput >> 10) >= 0x40uLL) {
    uint64_t v5 = 0;
  }
  uint64_t v4 = __OFADD__(v3, 64);
  uint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for TextRendererInput >> 10);
  if (!v4) {
    uint64_t v3 = v5;
  }
LABEL_11:
  unint64_t v1 = ((unint64_t)&type metadata for TextRendererInput >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    char v6 = 1 << (&type metadata for TextRendererInput >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  char v6 = 1uLL >> -(char)(&type metadata for TextRendererInput >> 16);
  if (v1 <= -64) {
    char v6 = 0;
  }
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  unint64_t v2 = ((unint64_t)&type metadata for DisplayList.Options >> 4) & 0x3F;
  uint64_t v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = __OFADD__(v2, 64);
  unint64_t v2 = 1uLL >> -(char)((unint64_t)&type metadata for DisplayList.Options >> 4);
  if (!v4) {
    unint64_t v2 = 1 << ((unint64_t)&type metadata for DisplayList.Options >> 4);
  }
  uint64_t v3 = (unsigned __int16)&type metadata for DisplayList.Options >> 10;
  if (v3 > 0x40)
  {
    uint64_t v3 = 0;
    goto LABEL_11;
  }
  unint64_t v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = 1 << ((unint64_t)&type metadata for DisplayList.Options >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for DisplayList.Options >> 10) >= 0x40uLL) {
    uint64_t v5 = 0;
  }
  uint64_t v4 = __OFADD__(v3, 64);
  uint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for DisplayList.Options >> 10);
  if (!v4) {
    uint64_t v3 = v5;
  }
LABEL_11:
  unint64_t v1 = ((unint64_t)&type metadata for DisplayList.Options >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    char v6 = 1 << (&type metadata for DisplayList.Options >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  char v6 = 1uLL >> -(char)(&type metadata for DisplayList.Options >> 16);
  if (v1 <= -64) {
    char v6 = 0;
  }
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  unint64_t v2 = ((unint64_t)&type metadata for StyleContextInput >> 4) & 0x3F;
  uint64_t v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = __OFADD__(v2, 64);
  unint64_t v2 = 1uLL >> -(char)((unint64_t)&type metadata for StyleContextInput >> 4);
  if (!v4) {
    unint64_t v2 = 1 << ((unint64_t)&type metadata for StyleContextInput >> 4);
  }
  uint64_t v3 = (unsigned __int16)&type metadata for StyleContextInput >> 10;
  if (v3 > 0x40)
  {
    uint64_t v3 = 0;
    goto LABEL_11;
  }
  unint64_t v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = 1 << ((unint64_t)&type metadata for StyleContextInput >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for StyleContextInput >> 10) >= 0x40uLL) {
    uint64_t v5 = 0;
  }
  uint64_t v4 = __OFADD__(v3, 64);
  uint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for StyleContextInput >> 10);
  if (!v4) {
    uint64_t v3 = v5;
  }
LABEL_11:
  unint64_t v1 = ((unint64_t)&type metadata for StyleContextInput >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    char v6 = 1 << (&type metadata for StyleContextInput >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  char v6 = 1uLL >> -(char)(&type metadata for StyleContextInput >> 16);
  if (v1 <= -64) {
    char v6 = 0;
  }
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  unint64_t v2 = ((unint64_t)&type metadata for InterfaceIdiomInput >> 4) & 0x3F;
  uint64_t v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = __OFADD__(v2, 64);
  unint64_t v2 = 1uLL >> -(char)((unint64_t)&type metadata for InterfaceIdiomInput >> 4);
  if (!v4) {
    unint64_t v2 = 1 << ((unint64_t)&type metadata for InterfaceIdiomInput >> 4);
  }
  uint64_t v3 = (unsigned __int16)&type metadata for InterfaceIdiomInput >> 10;
  if (v3 > 0x40)
  {
    uint64_t v3 = 0;
    goto LABEL_11;
  }
  unint64_t v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = 1 << ((unint64_t)&type metadata for InterfaceIdiomInput >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for InterfaceIdiomInput >> 10) >= 0x40uLL) {
    uint64_t v5 = 0;
  }
  uint64_t v4 = __OFADD__(v3, 64);
  uint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for InterfaceIdiomInput >> 10);
  if (!v4) {
    uint64_t v3 = v5;
  }
LABEL_11:
  unint64_t v1 = ((unint64_t)&type metadata for InterfaceIdiomInput >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    char v6 = 1 << (&type metadata for InterfaceIdiomInput >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  char v6 = 1uLL >> -(char)(&type metadata for InterfaceIdiomInput >> 16);
  if (v1 <= -64) {
    char v6 = 0;
  }
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  unint64_t v2;
  uint64_t vars8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);

  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;
  uint64_t vars8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerShapeKey>, (uint64_t)&type metadata for ContainerShapeKey, (uint64_t)&protocol witness table for ContainerShapeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);

  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;
  uint64_t vars8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ForegroundStyleKey>, (uint64_t)&type metadata for ForegroundStyleKey, (uint64_t)&protocol witness table for ForegroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);

  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;
  uint64_t vars8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultForegroundStyleKey>, (uint64_t)&type metadata for DefaultForegroundStyleKey, (uint64_t)&protocol witness table for DefaultForegroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);

  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;
  uint64_t vars8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorDefinitionKey>, (uint64_t)&type metadata for SystemColorDefinitionKey, (uint64_t)&protocol witness table for SystemColorDefinitionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);

  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  unint64_t v2 = ((unint64_t)&type metadata for ViewListOptionsInput >> 4) & 0x3F;
  uint64_t v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = __OFADD__(v2, 64);
  unint64_t v2 = 1uLL >> -(char)((unint64_t)&type metadata for ViewListOptionsInput >> 4);
  if (!v4) {
    unint64_t v2 = 1 << ((unint64_t)&type metadata for ViewListOptionsInput >> 4);
  }
  uint64_t v3 = (unsigned __int16)&type metadata for ViewListOptionsInput >> 10;
  if (v3 > 0x40)
  {
    uint64_t v3 = 0;
    goto LABEL_11;
  }
  unint64_t v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = 1 << ((unint64_t)&type metadata for ViewListOptionsInput >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for ViewListOptionsInput >> 10) >= 0x40uLL) {
    uint64_t v5 = 0;
  }
  uint64_t v4 = __OFADD__(v3, 64);
  uint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for ViewListOptionsInput >> 10);
  if (!v4) {
    uint64_t v3 = v5;
  }
LABEL_11:
  unint64_t v1 = ((unint64_t)&type metadata for ViewListOptionsInput >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    char v6 = 1 << (&type metadata for ViewListOptionsInput >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  char v6 = 1uLL >> -(char)(&type metadata for ViewListOptionsInput >> 16);
  if (v1 <= -64) {
    char v6 = 0;
  }
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  unint64_t v2;
  uint64_t vars8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContentTransition.State>, (uint64_t)&type metadata for ContentTransition.State, (uint64_t)&protocol witness table for ContentTransition.State, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);

  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;
  uint64_t vars8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesContentTransitionsKey>, (uint64_t)&type metadata for DisablesContentTransitionsKey, (uint64_t)&protocol witness table for DisablesContentTransitionsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);

  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;
  uint64_t vars8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSuffixKey>, (uint64_t)&type metadata for TextSuffixKey, (uint64_t)&protocol witness table for TextSuffixKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);

  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  unint64_t v2 = ((unint64_t)&type metadata for DynamicStackOrientation >> 4) & 0x3F;
  uint64_t v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = __OFADD__(v2, 64);
  unint64_t v2 = 1uLL >> -(char)((unint64_t)&type metadata for DynamicStackOrientation >> 4);
  if (!v4) {
    unint64_t v2 = 1 << ((unint64_t)&type metadata for DynamicStackOrientation >> 4);
  }
  uint64_t v3 = (unsigned __int16)&type metadata for DynamicStackOrientation >> 10;
  if (v3 > 0x40)
  {
    uint64_t v3 = 0;
    goto LABEL_11;
  }
  unint64_t v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = 1 << ((unint64_t)&type metadata for DynamicStackOrientation >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for DynamicStackOrientation >> 10) >= 0x40uLL) {
    uint64_t v5 = 0;
  }
  uint64_t v4 = __OFADD__(v3, 64);
  uint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for DynamicStackOrientation >> 10);
  if (!v4) {
    uint64_t v3 = v5;
  }
LABEL_11:
  unint64_t v1 = ((unint64_t)&type metadata for DynamicStackOrientation >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    char v6 = 1 << (&type metadata for DynamicStackOrientation >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  char v6 = 1uLL >> -(char)(&type metadata for DynamicStackOrientation >> 16);
  if (v1 <= -64) {
    char v6 = 0;
  }
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  unint64_t v2 = ((unint64_t)&type metadata for UsingGraphicsRenderer >> 4) & 0x3F;
  uint64_t v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = __OFADD__(v2, 64);
  unint64_t v2 = 1uLL >> -(char)((unint64_t)&type metadata for UsingGraphicsRenderer >> 4);
  if (!v4) {
    unint64_t v2 = 1 << ((unint64_t)&type metadata for UsingGraphicsRenderer >> 4);
  }
  uint64_t v3 = (unsigned __int16)&type metadata for UsingGraphicsRenderer >> 10;
  if (v3 > 0x40)
  {
    uint64_t v3 = 0;
    goto LABEL_11;
  }
  unint64_t v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = 1 << ((unint64_t)&type metadata for UsingGraphicsRenderer >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for UsingGraphicsRenderer >> 10) >= 0x40uLL) {
    uint64_t v5 = 0;
  }
  uint64_t v4 = __OFADD__(v3, 64);
  uint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for UsingGraphicsRenderer >> 10);
  if (!v4) {
    uint64_t v3 = v5;
  }
LABEL_11:
  unint64_t v1 = ((unint64_t)&type metadata for UsingGraphicsRenderer >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    char v6 = 1 << (&type metadata for UsingGraphicsRenderer >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  char v6 = 1uLL >> -(char)(&type metadata for UsingGraphicsRenderer >> 16);
  if (v1 <= -64) {
    char v6 = 0;
  }
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  unint64_t v2 = ((unint64_t)&type metadata for Image.Style >> 4) & 0x3F;
  uint64_t v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = __OFADD__(v2, 64);
  unint64_t v2 = 1uLL >> -(char)((unint64_t)&type metadata for Image.Style >> 4);
  if (!v4) {
    unint64_t v2 = 1 << ((unint64_t)&type metadata for Image.Style >> 4);
  }
  uint64_t v3 = (unsigned __int16)&type metadata for Image.Style >> 10;
  if (v3 > 0x40)
  {
    uint64_t v3 = 0;
    goto LABEL_11;
  }
  unint64_t v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = 1 << ((unint64_t)&type metadata for Image.Style >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for Image.Style >> 10) >= 0x40uLL) {
    uint64_t v5 = 0;
  }
  uint64_t v4 = __OFADD__(v3, 64);
  uint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for Image.Style >> 10);
  if (!v4) {
    uint64_t v3 = v5;
  }
LABEL_11:
  unint64_t v1 = ((unint64_t)&type metadata for Image.Style >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    char v6 = 1 << (&type metadata for Image.Style >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  char v6 = 1uLL >> -(char)(&type metadata for Image.Style >> 16);
  if (v1 <= -64) {
    char v6 = 0;
  }
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  unint64_t v2;
  uint64_t vars8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationListenerKey>, (uint64_t)&type metadata for Transaction.AnimationListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationListenerKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);

  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;
  uint64_t vars8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationLogicalListenerKey>, (uint64_t)&type metadata for Transaction.AnimationLogicalListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationLogicalListenerKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);

  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  unint64_t v2;
  uint64_t vars8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationFrameIntervalKey>, (uint64_t)&type metadata for AnimationFrameIntervalKey, (uint64_t)&protocol witness table for AnimationFrameIntervalKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);

  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  return specialized find<A>(_:key:)(a1, (uint64_t (*)(void))type metadata accessor for MatchedGeometryScope, specialized find1<A>(_:key:filter:));
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  unint64_t v2 = ((unint64_t)&type metadata for ForEachEvictionInput >> 4) & 0x3F;
  uint64_t v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = __OFADD__(v2, 64);
  unint64_t v2 = 1uLL >> -(char)((unint64_t)&type metadata for ForEachEvictionInput >> 4);
  if (!v4) {
    unint64_t v2 = 1 << ((unint64_t)&type metadata for ForEachEvictionInput >> 4);
  }
  uint64_t v3 = (unsigned __int16)&type metadata for ForEachEvictionInput >> 10;
  if (v3 > 0x40)
  {
    uint64_t v3 = 0;
    goto LABEL_11;
  }
  unint64_t v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = 1 << ((unint64_t)&type metadata for ForEachEvictionInput >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for ForEachEvictionInput >> 10) >= 0x40uLL) {
    uint64_t v5 = 0;
  }
  uint64_t v4 = __OFADD__(v3, 64);
  uint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for ForEachEvictionInput >> 10);
  if (!v4) {
    uint64_t v3 = v5;
  }
LABEL_11:
  unint64_t v1 = ((unint64_t)&type metadata for ForEachEvictionInput >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    char v6 = 1 << (&type metadata for ForEachEvictionInput >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  char v6 = 1uLL >> -(char)(&type metadata for ForEachEvictionInput >> 16);
  if (v1 <= -64) {
    char v6 = 0;
  }
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  unint64_t v2 = ((unint64_t)&type metadata for ReferenceDateInput >> 4) & 0x3F;
  uint64_t v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = __OFADD__(v2, 64);
  unint64_t v2 = 1uLL >> -(char)((unint64_t)&type metadata for ReferenceDateInput >> 4);
  if (!v4) {
    unint64_t v2 = 1 << ((unint64_t)&type metadata for ReferenceDateInput >> 4);
  }
  uint64_t v3 = (unsigned __int16)&type metadata for ReferenceDateInput >> 10;
  if (v3 > 0x40)
  {
    uint64_t v3 = 0;
    goto LABEL_11;
  }
  unint64_t v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = 1 << ((unint64_t)&type metadata for ReferenceDateInput >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for ReferenceDateInput >> 10) >= 0x40uLL) {
    uint64_t v5 = 0;
  }
  uint64_t v4 = __OFADD__(v3, 64);
  uint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for ReferenceDateInput >> 10);
  if (!v4) {
    uint64_t v3 = v5;
  }
LABEL_11:
  unint64_t v1 = ((unint64_t)&type metadata for ReferenceDateInput >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    char v6 = 1 << (&type metadata for ReferenceDateInput >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  char v6 = 1uLL >> -(char)(&type metadata for ReferenceDateInput >> 16);
  if (v1 <= -64) {
    char v6 = 0;
  }
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  unint64_t v2;
  uint64_t vars8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationReasonKey>, (uint64_t)&type metadata for AnimationReasonKey, (uint64_t)&protocol witness table for AnimationReasonKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);

  return specialized find1<A>(_:key:filter:)(a1, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)));
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  unint64_t v2 = ((unint64_t)&type metadata for _DisplayList_StableIdentityScope >> 4) & 0x3F;
  uint64_t v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = __OFADD__(v2, 64);
  unint64_t v2 = 1uLL >> -(char)((unint64_t)&type metadata for _DisplayList_StableIdentityScope >> 4);
  if (!v4) {
    unint64_t v2 = 1 << ((unint64_t)&type metadata for _DisplayList_StableIdentityScope >> 4);
  }
  uint64_t v3 = (unsigned __int16)&type metadata for _DisplayList_StableIdentityScope >> 10;
  if (v3 > 0x40)
  {
    uint64_t v3 = 0;
    goto LABEL_11;
  }
  unint64_t v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = 1 << ((unint64_t)&type metadata for _DisplayList_StableIdentityScope >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _DisplayList_StableIdentityScope >> 10) >= 0x40uLL) {
    uint64_t v5 = 0;
  }
  uint64_t v4 = __OFADD__(v3, 64);
  uint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _DisplayList_StableIdentityScope >> 10);
  if (!v4) {
    uint64_t v3 = v5;
  }
LABEL_11:
  unint64_t v1 = ((unint64_t)&type metadata for _DisplayList_StableIdentityScope >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    char v6 = 1 << (&type metadata for _DisplayList_StableIdentityScope >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  char v6 = 1uLL >> -(char)(&type metadata for _DisplayList_StableIdentityScope >> 16);
  if (v1 <= -64) {
    char v6 = 0;
  }
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  unint64_t v2 = ((unint64_t)&type metadata for TextSelectionForbidden >> 4) & 0x3F;
  uint64_t v3 = 63;
  if (__OFSUB__(v2, 64))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = __OFADD__(v2, 64);
  unint64_t v2 = 1uLL >> -(char)((unint64_t)&type metadata for TextSelectionForbidden >> 4);
  if (!v4) {
    unint64_t v2 = 1 << ((unint64_t)&type metadata for TextSelectionForbidden >> 4);
  }
  uint64_t v3 = (unsigned __int16)&type metadata for TextSelectionForbidden >> 10;
  if (v3 > 0x40)
  {
    uint64_t v3 = 0;
    goto LABEL_11;
  }
  unint64_t v1 = 63;
  if (__OFSUB__(v3, 64))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = 1 << ((unint64_t)&type metadata for TextSelectionForbidden >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for TextSelectionForbidden >> 10) >= 0x40uLL) {
    uint64_t v5 = 0;
  }
  uint64_t v4 = __OFADD__(v3, 64);
  uint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for TextSelectionForbidden >> 10);
  if (!v4) {
    uint64_t v3 = v5;
  }
LABEL_11:
  unint64_t v1 = ((unint64_t)&type metadata for TextSelectionForbidden >> 16) & 0x3F;
  if (!__OFSUB__(v1, 64))
  {
    char v6 = 1 << (&type metadata for TextSelectionForbidden >> 16);
    return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
  }
LABEL_16:
  __break(1u);
  char v6 = 1uLL >> -(char)(&type metadata for TextSelectionForbidden >> 16);
  if (v1 <= -64) {
    char v6 = 0;
  }
  return specialized find1<A>(_:key:filter:)(a1, v3 | v2 | v6);
}

{
  return specialized find<A>(_:key:)(a1, (uint64_t (*)(void))type metadata accessor for BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>, specialized find1<A>(_:key:filter:));
}

void type metadata accessor for InterfaceIdiomBox<PhoneInterfaceIdiom>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for InterfaceIdiomBox();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA05PhonecD0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

double specialized closure #1 in PropertyList.subscript.getter(uint64_t a1)
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BodyHeadOutdentKey>, (uint64_t)&type metadata for BodyHeadOutdentKey, (uint64_t)&protocol witness table for BodyHeadOutdentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v4 = &static BodyHeadOutdentKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayScaleKey>, (uint64_t)&type metadata for DisplayScaleKey, (uint64_t)&protocol witness table for DisplayScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v4 = &static DisplayScaleKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumScaleFactorKey>, (uint64_t)&type metadata for MinimumScaleFactorKey, (uint64_t)&protocol witness table for MinimumScaleFactorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v4 = &static MinimumScaleFactorKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationFactorKey>, (uint64_t)&type metadata for HyphenationFactorKey, (uint64_t)&protocol witness table for HyphenationFactorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v4 = &static HyphenationFactorKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineHeightMultipleKey>, (uint64_t)&type metadata for LineHeightMultipleKey, (uint64_t)&protocol witness table for LineHeightMultipleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v4 = &static LineHeightMultipleKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumLineHeightKey>, (uint64_t)&type metadata for MinimumLineHeightKey, (uint64_t)&protocol witness table for MinimumLineHeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v4 = &static MinimumLineHeightKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaximumLineHeightKey>, (uint64_t)&type metadata for MaximumLineHeightKey, (uint64_t)&protocol witness table for MaximumLineHeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v4 = &static MaximumLineHeightKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineSpacingKey>, (uint64_t)&type metadata for LineSpacingKey, (uint64_t)&protocol witness table for LineSpacingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v4 = &static LineSpacingKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultBaselineOffsetKey>, (uint64_t)&type metadata for DefaultBaselineOffsetKey, (uint64_t)&protocol witness table for DefaultBaselineOffsetKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v4 = &static DefaultBaselineOffsetKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTrackingKey>, (uint64_t)&type metadata for DefaultTrackingKey, (uint64_t)&protocol witness table for DefaultTrackingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v4 = &static DefaultTrackingKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultKerningKey>, (uint64_t)&type metadata for DefaultKerningKey, (uint64_t)&protocol witness table for DefaultKerningKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v4 = &static DefaultKerningKey.defaultValue;
  }
  return *(double *)v4;
}

{
  Swift::Int v2;
  uint64_t v3;
  long long *v4;
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPaddingKey>, (uint64_t)&type metadata for DefaultPaddingKey, (uint64_t)&protocol witness table for DefaultPaddingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v2);
  uint64_t v3 = specialized find1<A>(_:key:filter:)(a1, v6);
  if (v3)
  {
    uint64_t v4 = (long long *)(v3 + 72);
  }
  else
  {
    uint64_t v4 = &static DefaultPaddingKey.defaultValue;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  return *(double *)v4;
}

uint64_t EnvironmentValues.lineLimit.getter()
{
  return EnvironmentValues.lineLimit.getter(specialized PropertyList.Tracker.value<A>(_:for:), specialized find<A>(_:key:));
}

uint64_t static CUIDesignLibraryCacheKey.Props.value(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v29);
    swift_release_n();
    swift_release_n();
    char v4 = v29;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v29);
    swift_release_n();
    swift_release_n();
    char v5 = v29;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v28);
    swift_release_n();
    swift_release_n();
    char v6 = v28;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v26);
    swift_release_n();
    swift_release_n();
    char v7 = ~(_BYTE)v27;
    uint64_t result = outlined consume of Material?(v26, v27);
    if (v7)
    {
      swift_retain_n();
      swift_retain_n();
      char v9 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
      swift_release_n();
      goto LABEL_19;
    }
LABEL_17:
    uint64_t v23 = 0;
    goto LABEL_23;
  }
  type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>);
  BloomFilter.init(hashValue:)(v10);
  uint64_t v11 = swift_retain_n();
  uint64_t v12 = specialized find1<A>(_:key:filter:)(v11, v26);
  if (v12) {
    char v4 = *(unsigned char *)(v12 + 72);
  }
  else {
    char v4 = 0;
  }
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>);
  BloomFilter.init(hashValue:)(v13);
  uint64_t v14 = swift_retain_n();
  uint64_t v15 = specialized find1<A>(_:key:filter:)(v14, v26);
  if (v15) {
    char v5 = *(unsigned char *)(v15 + 72);
  }
  else {
    char v5 = 0;
  }
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>);
  BloomFilter.init(hashValue:)(v16);
  uint64_t v17 = swift_retain_n();
  uint64_t v18 = specialized find1<A>(_:key:filter:)(v17, v26);
  if (v18) {
    char v6 = *(unsigned char *)(v18 + 72);
  }
  else {
    char v6 = 0;
  }
  swift_release_n();
  uint64_t v19 = swift_retain_n();
  uint64_t v20 = specialized find<A>(_:key:)(v19);
  if (v20)
  {
    uint64_t v22 = *(void *)(v20 + 72);
    uint64_t v21 = *(void *)(v20 + 80);
    outlined copy of Material?(v22, v21);
  }
  else
  {
    uint64_t v22 = 0;
    LOBYTE(v21) = -1;
  }
  swift_release_n();
  uint64_t result = outlined consume of Material?(v22, v21);
  if ((_BYTE)v21 == 0xFF) {
    goto LABEL_17;
  }
  uint64_t v24 = swift_retain_n();
  char v9 = specialized closure #1 in PropertyList.subscript.getter(v24, (uint64_t)v25);
LABEL_19:
  uint64_t result = swift_release_n();
  if (v9 == 2)
  {
    uint64_t v23 = 1;
  }
  else
  {
    uint64_t v23 = 1;
    if ((v9 & 1) == 0) {
      uint64_t v23 = 2;
    }
  }
LABEL_23:
  *(unsigned char *)a2 = v4;
  *(unsigned char *)(a2 + 1) = v5;
  *(unsigned char *)(a2 + 2) = v6;
  *(void *)(a2 + 8) = v23;
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for EnvironmentPropertyKey();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void _s7SwiftUI22EnvironmentPropertyKeyVyAA011ColorSchemeE033_0E72AB1FBE33AED1E73FF06F3DA3A071LLVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>, (uint64_t)&type metadata for BackgroundProminence.Key, (uint64_t)&protocol witness table for BackgroundProminence.Key, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ParagraphTypesettingKey>, (uint64_t)&type metadata for ParagraphTypesettingKey, (uint64_t)&protocol witness table for ParagraphTypesettingKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  Swift::Int v4;
  uint64_t result;
  char v6;
  char v7;
  uint64_t v8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v8);
  if (result)
  {
    unint64_t v6 = *(unsigned char *)(result + 72);
    uint64_t v7 = *(unsigned char *)(result + 73);
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = 3;
  }
  *a2 = v6;
  a2[1] = v7;
  return result;
}

{
  Swift::Int v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollContentAdjustmentBehaviorKey>, (uint64_t)&type metadata for Transaction.ScrollContentAdjustmentBehaviorKey, (uint64_t)&protocol witness table for Transaction.ScrollContentAdjustmentBehaviorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result) {
    unint64_t v6 = *(unsigned char *)(result + 72);
  }
  else {
    unint64_t v6 = 0;
  }
  *a2 = v6;
  return result;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderProminenceKey>, (uint64_t)&type metadata for HeaderProminenceKey, (uint64_t)&protocol witness table for HeaderProminenceKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  Swift::Int v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaterialActiveAppearance.Key>, (uint64_t)&type metadata for MaterialActiveAppearance.Key, (uint64_t)&protocol witness table for MaterialActiveAppearance.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result) {
    unint64_t v6 = *(unsigned char *)(result + 72);
  }
  else {
    unint64_t v6 = 0;
  }
  *a2 = v6;
  return result;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorSchemeKey>, (uint64_t)&type metadata for SystemColorSchemeKey, (uint64_t)&protocol witness table for SystemColorSchemeKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t (*a5)(uint64_t)@<X5>, unsigned char *a6@<X8>)
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v9);
  uint64_t result = a5(a1);
  if (result) {
    char v11 = *(unsigned char *)(result + 72);
  }
  else {
    char v11 = 0;
  }
  *a6 = v11;
  return result;
}

{
  Swift::Int v9;
  uint64_t result;
  char v11;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v9);
  uint64_t result = a5(a1);
  if (result) {
    char v11 = *(unsigned char *)(result + 72);
  }
  else {
    char v11 = 0;
  }
  *a6 = v11;
  return result;
}

uint64_t EnvironmentValues.sizeCategory.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v10);
    swift_release_n();
    uint64_t result = swift_release_n();
    char v5 = v10;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DynamicTypeSizeKey>();
    BloomFilter.init(hashValue:)(v6);
    uint64_t v7 = swift_retain_n();
    uint64_t v8 = specialized find1<A>(_:key:filter:)(v7, v9);
    if (v8) {
      char v5 = *(unsigned char *)(v8 + 72);
    }
    else {
      char v5 = 3;
    }
    uint64_t result = swift_release_n();
  }
  *a1 = v5;
  return result;
}

uint64_t key path getter for EnvironmentValues.pixelLength : EnvironmentValues@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.pixelLength.getter();
  *a1 = v3;
  return result;
}

uint64_t EnvironmentValues.pixelLength.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    char v3 = v2;
    swift_release_n();
    uint64_t result = swift_release_n();
    if (v3)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v1);
      swift_release_n();
      return swift_release_n();
    }
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)v9);
    char v7 = v6;
    uint64_t result = swift_release_n();
    if (v7)
    {
      uint64_t v8 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v8);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPixelLengthKey>, (uint64_t)&type metadata for DefaultPixelLengthKey, (uint64_t)&protocol witness table for DefaultPixelLengthKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccentColorKey>, (uint64_t)&type metadata for AccentColorKey, (uint64_t)&protocol witness table for AccentColorKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultFontKey>, (uint64_t)&type metadata for DefaultFontKey, (uint64_t)&protocol witness table for DefaultFontKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TintKey>, (uint64_t)&type metadata for TintKey, (uint64_t)&protocol witness table for TintKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontKey>, (uint64_t)&type metadata for FontKey, (uint64_t)&protocol witness table for FontKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolFontKey>, (uint64_t)&type metadata for SymbolFontKey, (uint64_t)&protocol witness table for SymbolFontKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultSymbolFontKey>, (uint64_t)&type metadata for DefaultSymbolFontKey, (uint64_t)&protocol witness table for DefaultSymbolFontKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundStyleKey>, (uint64_t)&type metadata for BackgroundStyleKey, (uint64_t)&protocol witness table for BackgroundStyleKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AvoidsOrphansKey>, (uint64_t)&type metadata for AvoidsOrphansKey, (uint64_t)&protocol witness table for AvoidsOrphansKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:)) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>, (uint64_t)&type metadata for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:)) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AppearsActiveKey>, (uint64_t)&type metadata for AppearsActiveKey, (uint64_t)&protocol witness table for AppearsActiveKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:)) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DividerThicknessKey>, (uint64_t)&type metadata for DividerThicknessKey, (uint64_t)&protocol witness table for DividerThicknessKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvedTextProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvedTextProviderKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsVibrantBlendingKey>, (uint64_t)&type metadata for AllowsVibrantBlendingKey, (uint64_t)&protocol witness table for AllowsVibrantBlendingKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>, (uint64_t)&type metadata for SymbolBackgroundCornerRadiusKey, (uint64_t)&protocol witness table for SymbolBackgroundCornerRadiusKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<VibrantColorStyleKey>, (uint64_t)&type metadata for VibrantColorStyleKey, (uint64_t)&protocol witness table for VibrantColorStyleKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>, (uint64_t)&type metadata for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey>, (uint64_t)&type metadata for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t)&protocol witness table for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:)) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsFocused, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:)) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsActive, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsActive, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:)) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsFocused, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:)) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsMain, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:)) & 1;
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayCornerRadiusKey>, (uint64_t)&type metadata for DisplayCornerRadiusKey, (uint64_t)&protocol witness table for DisplayCornerRadiusKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
}

uint64_t specialized closure #1 in PropertyList.subscript.getter(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v8);
  uint64_t result = a6(a1);
  if (result) {
    return *(void *)(result + 72);
  }
  return result;
}

{
  Swift::Int v8;
  uint64_t result;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v8);
  uint64_t result = a6(a1);
  if (result) {
    return swift_retain();
  }
  return result;
}

{
  Swift::Int v8;
  uint64_t result;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v8);
  uint64_t result = a6(a1);
  if (result) {
    return *(void *)(result + 72);
  }
  return result;
}

{
  Swift::Int v8;
  uint64_t v9;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v8);
  uint64_t v9 = a6(a1);
  if (v9) {
    return *(unsigned __int8 *)(v9 + 72);
  }
  else {
    return 1;
  }
}

{
  Swift::Int v8;
  uint64_t result;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v8);
  uint64_t result = a6(a1);
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

{
  Swift::Int v8;
  uint64_t result;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v8);
  uint64_t result = a6(a1);
  if (result) {
    return *(void *)(result + 72);
  }
  return result;
}

{
  Swift::Int v8;
  uint64_t v9;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v8);
  uint64_t v9 = a6(a1);
  if (v9) {
    return *(unsigned __int8 *)(v9 + 72);
  }
  else {
    return 2;
  }
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t specialized EnvironmentValues.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.value<A>(_:for:)(a1, a3);
    swift_release();
  }
  else
  {
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized find<A>(_:key:)(v5);
    if (v6) {
      *a3 = *(unsigned char *)(v6 + 72);
    }
    else {
      *a3 = 0;
    }
  }

  return swift_release();
}

void type metadata accessor for LeafLayoutComputer<Image.Resolved>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for EnvironmentPropertyKey<DynamicTypeSizeKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>);
    }
  }
}

uint64_t outlined consume of Material?(uint64_t a1, unsigned __int8 a2)
{
  if (a2 != 0xFF) {
    return outlined consume of Material.ID(a1, a2);
  }
  return a1;
}

uint64_t EnvironmentValues.subscript.setter(uint64_t a1)
{
  EnvironmentValues.setValue<A>(_:for:)();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

{
  uint64_t vars8;

  specialized EnvironmentValues.subscript.setter(a1);

  return swift_unknownObjectRelease();
}

{
  uint64_t vars8;

  specialized EnvironmentValues.subscript.setter(a1);

  return swift_unknownObjectRelease();
}

{
  uint64_t vars8;

  specialized EnvironmentValues.subscript.setter(a1);

  return swift_unknownObjectRelease();
}

{
  uint64_t vars8;

  specialized EnvironmentValues.subscript.setter(a1);

  return swift_unknownObjectRelease();
}

{
  uint64_t vars8;

  specialized EnvironmentValues.subscript.setter(a1);

  return swift_unknownObjectRelease();
}

uint64_t EnvironmentValues._set<A>(_:for:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  Swift::Int v4 = type metadata accessor for EnvironmentPropertyKey();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  specialized PropertyList.subscript.setter(a1, v4, v4, WitnessTable);
  if (v1[1])
  {
    uint64_t v6 = *v1;
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v3, v6, v4);
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t EnvironmentValues.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EnvironmentValues.getValue<A>(for:)(a1, a2, a3);
}

{
  return EnvironmentValues.subscript.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for DerivedEnvironmentPropertyKey, (uint64_t)&protocol conformance descriptor for DerivedEnvironmentPropertyKey<A>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))PropertyList.Tracker.derivedValue<A>(_:for:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))PropertyList.subscript.getter);
}

{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17[16];

  Swift::Int v8 = *v3;
  uint64_t v7 = v3[1];
  if (v7)
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v9 = specialized PropertyList.Tracker.value<A>(_:for:)(v8);
    char v11 = v10;
    swift_release_n();
    swift_release_n();
    if (v9)
    {
LABEL_3:
      uint64_t v15 = v8;
      Swift::Int v16 = v7;
      return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, void, uint64_t, uint64_t))(v11 + 8))(a1, &v15, a2, *(void *)(a3 + 8), v9, v11);
    }
  }
  else
  {
    Swift::Int v13 = swift_retain_n();
    uint64_t v9 = specialized closure #1 in PropertyList.subscript.getter(v13, (uint64_t)v17);
    char v11 = v14;
    swift_release_n();
    if (v9) {
      goto LABEL_3;
    }
  }
  uint64_t v15 = v8;
  Swift::Int v16 = v7;
  return EnvironmentValues.getValue<A>(for:)(a1, a2, *(void *)(a3 + 8));
}

uint64_t EnvironmentValues.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = *v7;
  if (v7[1])
  {
    uint64_t v10 = a4(0);
    swift_retain();
    swift_retain();
    uint64_t WitnessTable = swift_getWitnessTable();
    a6(v8, v10, v10, WitnessTable);
    swift_release();
  }
  else
  {
    uint64_t v13 = a4(0);
    swift_retain();
    uint64_t v14 = swift_getWitnessTable();
    a7(v13, v8, v13, v14);
  }

  return swift_release();
}

uint64_t type metadata accessor for EnvironmentPropertyKey()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t EnvironmentValues.getValue<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EnvironmentValues.subscript.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for EnvironmentPropertyKey, (uint64_t)&protocol conformance descriptor for EnvironmentPropertyKey<A>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))PropertyList.subscript.getter);
}

uint64_t PropertyList.Tracker.value<A>(_:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v13 = *(void *)(v4 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 16));
  uint64_t v14 = *(void *)(v13 + 24);
  if (!a1)
  {
    if (!v14) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v13 + 56) = 1;
    PropertyList.subscript.getter(a2, a1, a2, a3);
    goto LABEL_9;
  }
  if (v14 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v25 = a4;
  uint64_t v15 = *(void *)(v13 + 32);
  if (*(void *)(v15 + 16) && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v17 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v15 + 56) + 40 * v16, (uint64_t)v26);
    outlined init with take of ScrollStateRequest(v26, (uint64_t)v27);
    uint64_t v18 = v28;
    uint64_t v19 = v29;
    __swift_project_boxed_opaque_existential_1(v27, v28);
    ((void (*)(uint64_t, uint64_t, _UNKNOWN **))v19[1])(AssociatedTypeWitness, v18, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  else
  {
    uint64_t v20 = v25;
    PropertyList.subscript.getter(a2, a1, a2, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v20, AssociatedTypeWitness);
    uint64_t v28 = type metadata accessor for TrackedValue();
    char v29 = &protocol witness table for TrackedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
    uint64_t v22 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(boxed_opaque_existential_1, v12, v22);
    specialized Dictionary.subscript.setter((uint64_t)v27, a2);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 16));
  return swift_release();
}

uint64_t EnvironmentValues.truncationMode.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (char *)&v11);
    swift_release_n();
    uint64_t result = swift_release_n();
    int v5 = v11;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>);
    BloomFilter.init(hashValue:)(v6);
    uint64_t v7 = swift_retain_n();
    uint64_t v8 = specialized find1<A>(_:key:filter:)(v7, v10);
    if (v8) {
      int v5 = *(unsigned __int8 *)(v8 + 72);
    }
    else {
      int v5 = 3;
    }
    uint64_t result = swift_release_n();
  }
  if (v5 == 3) {
    char v9 = 1;
  }
  else {
    char v9 = v5;
  }
  *a1 = v9;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSizingKey>, (uint64_t)&type metadata for TextSizingKey, (uint64_t)&protocol witness table for TextSizingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t v5 = specialized find1<A>(_:key:filter:)(a1, v10);
  if (v5)
  {
    Swift::Int v6 = (char *)(v5 + 72);
    uint64_t v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    Swift::Int v6 = &static TextSizingKey.defaultValue;
    uint64_t v7 = &qword_26B0F0C60;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v8 = *v7;
  *(unsigned char *)a2 = *v6;
  *(void *)(a2 + 8) = v8;
  return swift_bridgeObjectRetain();
}

{
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>, (uint64_t)&type metadata for EnvironmentValues.StringResolutionDate, (uint64_t)&protocol witness table for EnvironmentValues.StringResolutionDate, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t v5 = specialized find1<A>(_:key:filter:)(a1, v9);
  if (v5)
  {
    Swift::Int v6 = v5 + *(void *)(*(void *)v5 + 248);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    type metadata accessor for BodyCountInput<_ViewModifier_Content<SafeAreaPaddingModifier>>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    Swift::Int v6 = __swift_project_value_buffer(v7, (uint64_t)static EnvironmentValues.StringResolutionDate.defaultValue);
  }
  return _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0(v6, a2, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
}

{
  Swift::Int v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>, (uint64_t)&type metadata for EnvironmentValues.PreferenceBridgeKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferenceBridgeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t v5 = specialized find1<A>(_:key:filter:)(a1, v8);
  if (v5)
  {
    Swift::Int v6 = (void *)(v5 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    Swift::Int v6 = &static EnvironmentValues.PreferenceBridgeKey.defaultValue;
  }
  return outlined init with copy of EnvironmentValues.PreferenceBridgeKey.Value((uint64_t)v6, a2);
}

{
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LocaleKey>, (uint64_t)&type metadata for LocaleKey, (uint64_t)&protocol witness table for LocaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t v5 = specialized find1<A>(_:key:filter:)(a1, v11);
  if (v5)
  {
    Swift::Int v6 = v5 + *(void *)(*(void *)v5 + 248);
    uint64_t v7 = type metadata accessor for Locale();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, v6, v7);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    char v9 = type metadata accessor for Locale();
    uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static LocaleKey.defaultValue);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(a2, v10, v9);
  }
}

{
  Swift::Int v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FallbackFontProviderKey>, (uint64_t)&type metadata for FallbackFontProviderKey, (uint64_t)&protocol witness table for FallbackFontProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t v5 = specialized find1<A>(_:key:filter:)(a1, v8);
  if (v5)
  {
    Swift::Int v6 = (void *)(v5 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    Swift::Int v6 = &static FallbackFontProviderKey.defaultValue;
  }
  return outlined init with copy of AnyTrackedValue((uint64_t)v6, a2);
}

{
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<CalendarKey>, (uint64_t)&type metadata for CalendarKey, (uint64_t)&protocol witness table for CalendarKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t v5 = specialized find1<A>(_:key:filter:)(a1, v11);
  if (v5)
  {
    Swift::Int v6 = v5 + *(void *)(*(void *)v5 + 248);
    uint64_t v7 = type metadata accessor for Calendar();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, v6, v7);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    char v9 = type metadata accessor for Calendar();
    uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static CalendarKey.defaultValue);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(a2, v10, v9);
  }
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenURLActionKey>, (uint64_t)&type metadata for OpenURLActionKey, (uint64_t)&protocol witness table for OpenURLActionKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenSensitiveURLActionKey>, (uint64_t)&type metadata for OpenSensitiveURLActionKey, (uint64_t)&protocol witness table for OpenSensitiveURLActionKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  Swift::Int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>, (uint64_t)&type metadata for EnvironmentValues.ScrollAnchorsKey, (uint64_t)&protocol witness table for EnvironmentValues.ScrollAnchorsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t v5 = specialized find1<A>(_:key:filter:)(a1, v14);
  if (v5)
  {
    Swift::Int v6 = (uint64_t *)(v5 + 72);
    uint64_t v7 = (uint64_t *)(v5 + 80);
    uint64_t v8 = (uint64_t *)(v5 + 88);
    char v9 = (char *)(v5 + 96);
  }
  else
  {
    Swift::Int v6 = &static EnvironmentValues.ScrollAnchorsKey.defaultValue;
    uint64_t v8 = &qword_26B0E3CE8;
    uint64_t v7 = &qword_26B0E3CE0;
    char v9 = &byte_26B0E3CF0;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v10 = *v8;
  unsigned __int8 v11 = *v7;
  uint64_t v12 = *v9;
  *(void *)a2 = *v6;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v10;
  *(unsigned char *)(a2 + 24) = v12;
  return swift_bridgeObjectRetain();
}

{
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.Key>, (uint64_t)&type metadata for EnvironmentValues.Key, (uint64_t)&protocol witness table for EnvironmentValues.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t v5 = specialized find1<A>(_:key:filter:)(a1, v9);
  if (v5)
  {
    Swift::Int v6 = v5 + *(void *)(*(void *)v5 + 248);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for EnvironmentValues.CapitalizationContext();
    Swift::Int v6 = __swift_project_value_buffer(v7, (uint64_t)static EnvironmentValues.Key.defaultValue);
  }
  return outlined init with copy of EnvironmentValues.CapitalizationContext(v6, a2, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
}

{
  Swift::Int v4;
  uint64_t result;
  long long v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_textShape>, (uint64_t)&type metadata for EnvironmentValues.__Key_textShape, (uint64_t)&protocol witness table for EnvironmentValues.__Key_textShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v8);
  if (result)
  {
    Swift::Int v6 = *(_OWORD *)(result + 72);
    uint64_t v7 = *(void *)(result + 88);
  }
  else
  {
    uint64_t v7 = 0;
    Swift::Int v6 = xmmword_2461BAA80;
  }
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v7;
  return result;
}

{
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TypesettingConfigurationKey>, (uint64_t)&type metadata for TypesettingConfigurationKey, (uint64_t)&protocol witness table for TypesettingConfigurationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t v5 = specialized find1<A>(_:key:filter:)(a1, v9);
  if (v5)
  {
    Swift::Int v6 = v5 + *(void *)(*(void *)v5 + 248);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for TypesettingConfiguration();
    Swift::Int v6 = __swift_project_value_buffer(v7, (uint64_t)static TypesettingConfigurationKey.defaultValue);
  }
  return outlined init with copy of EnvironmentValues.CapitalizationContext(v6, a2, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
}

{
  Swift::Int v4;
  uint64_t v5;
  long long *v6;
  uint64_t v8;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t v5 = specialized find1<A>(_:key:filter:)(a1, v8);
  if (v5)
  {
    Swift::Int v6 = (long long *)(v5 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    Swift::Int v6 = &static EnvironmentValues.AccessibilityTextAttributeResolverKey.defaultValue;
  }
  return _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0((uint64_t)v6, a2, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
}

{
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TimeZoneKey>, (uint64_t)&type metadata for TimeZoneKey, (uint64_t)&protocol witness table for TimeZoneKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t v5 = specialized find1<A>(_:key:filter:)(a1, v11);
  if (v5)
  {
    Swift::Int v6 = v5 + *(void *)(*(void *)v5 + 248);
    uint64_t v7 = type metadata accessor for TimeZone();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, v6, v7);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    char v9 = type metadata accessor for TimeZone();
    uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static TimeZoneKey.defaultValue);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(a2, v10, v9);
  }
}

{
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t v5 = specialized find1<A>(_:key:filter:)(a1, v9);
  if (v5)
  {
    Swift::Int v6 = v5 + *(void *)(*(void *)v5 + 248);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    type metadata accessor for BodyCountInput<_ViewModifier_Content<SafeAreaPaddingModifier>>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    Swift::Int v6 = __swift_project_value_buffer(v7, (uint64_t)static EnvironmentValues.ResolvableStringReferenceDateKey.defaultValue);
  }
  return _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0(v6, a2, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
}

{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;

  uint64_t result = specialized find<A>(_:key:)(a1);
  if (result)
  {
    Swift::Int v4 = *(void *)(result + 96);
    uint64_t v5 = *(_DWORD *)(result + 112);
    Swift::Int v6 = *(void *)(result + 116);
    uint64_t v7 = *(_DWORD *)(result + 124);
    uint64_t v8 = *(unsigned char *)(result + 128);
    *(_OWORD *)a2 = *(_OWORD *)(result + 72);
    *(void *)(a2 + 16) = *(void *)(result + 88);
    *(void *)(a2 + 24) = v4;
    *(void *)(a2 + 32) = *(void *)(result + 104);
    *(_DWORD *)(a2 + 40) = v5;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)a2 = &type metadata for DefaultContainerShapeType;
    *(void *)(a2 + 8) = &protocol witness table for DefaultContainerShapeType;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 40) = 0;
    Swift::Int v6 = 0;
  }
  *(void *)(a2 + 44) = v6;
  *(_DWORD *)(a2 + 52) = v7;
  *(unsigned char *)(a2 + 56) = v8;
  return result;
}

{
  Swift::Int v4;
  uint64_t result;
  long long v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>, (uint64_t)&type metadata for HoverEffectContextKey, (uint64_t)&protocol witness table for HoverEffectContextKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v9);
  if (result)
  {
    Swift::Int v6 = *(_OWORD *)(result + 72);
    uint64_t v7 = *(void *)(result + 88);
    uint64_t v8 = *(unsigned __int16 *)(result + 96) | (*(unsigned __int8 *)(result + 98) << 16);
  }
  else
  {
    uint64_t v7 = 0;
    Swift::Int v6 = 0uLL;
    uint64_t v8 = 2;
  }
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v7;
  *(_WORD *)(a2 + 24) = v8;
  *(unsigned char *)(a2 + 26) = BYTE2(v8);
  return result;
}

uint64_t EnvironmentValues.lowerLineLimit.getter()
{
  return EnvironmentValues.lineLimit.getter(specialized PropertyList.Tracker.value<A>(_:for:), specialized find<A>(_:key:));
}

uint64_t type metadata accessor for TrackedValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized PropertyList.Tracker.value<A>(_:for:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for UserInterfaceSizeClass?, (uint64_t)&type metadata for UserInterfaceSizeClass, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for UserInterfaceSizeClass?, (uint64_t)&type metadata for UserInterfaceSizeClass, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextScaleKey>, (uint64_t)&type metadata for TextScaleKey, (uint64_t)&protocol witness table for TextScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, (unint64_t *)&lazy cache variable for type metadata for Text.Scale?, (uint64_t)&type metadata for Text.Scale, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextScaleKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for DynamicTypeSize, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DynamicTypeSizeKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for DisplayGamut, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DisplayGamutKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>, (uint64_t)&type metadata for TextCaseKey, (uint64_t)&protocol witness table for TextCaseKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, (unint64_t *)&lazy cache variable for type metadata for Text.Case?, (uint64_t)&type metadata for Text.Case, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextCaseKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for ColorScheme, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<ColorSchemeKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for ColorSchemeContrast, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<ColorSchemeContrastKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for Image.Scale, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<ImageScaleKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for BackgroundContext, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundContextKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ParagraphTypesettingKey>, (uint64_t)&type metadata for ParagraphTypesettingKey, (uint64_t)&protocol witness table for ParagraphTypesettingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for ParagraphTypesetting, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<ParagraphTypesettingKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TintAdjustmentModeKey>, (uint64_t)&type metadata for TintAdjustmentModeKey, (uint64_t)&protocol witness table for TintAdjustmentModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, (unint64_t *)&lazy cache variable for type metadata for TintAdjustmentMode?, (uint64_t)&type metadata for TintAdjustmentMode, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TintAdjustmentModeKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>, (uint64_t)&type metadata for SymbolRenderingModeKey, (uint64_t)&protocol witness table for SymbolRenderingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, (unint64_t *)&lazy cache variable for type metadata for SymbolRenderingMode?, (uint64_t)&type metadata for SymbolRenderingMode, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolRenderingModeKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, (unint64_t *)&lazy cache variable for type metadata for LegibilityWeight?, (uint64_t)&type metadata for LegibilityWeight, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<LegibilityWeightKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for Image.TemplateRenderingMode, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultRenderingModeKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for WatchDisplayVariant, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>, (uint64_t)&type metadata for TruncationModeKey, (uint64_t)&protocol witness table for TruncationModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for Text.TruncationMode?, (uint64_t)&type metadata for Text.TruncationMode, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TruncationModeKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for Text.WritingMode, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<WritingModeKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>, (uint64_t)&type metadata for ContainerBackgroundKind.Key, (uint64_t)&protocol witness table for ContainerBackgroundKind.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for ContainerBackgroundKind?, (uint64_t)&type metadata for ContainerBackgroundKind, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<ContainerBackgroundKind.Key>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for Image.DynamicRange?, (uint64_t)&type metadata for Image.DynamicRange, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for Image.DynamicRange?, (uint64_t)&type metadata for Image.DynamicRange, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>, (uint64_t)&type metadata for BackgroundProminence.Key, (uint64_t)&protocol witness table for BackgroundProminence.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for BackgroundProminence, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundProminence.Key>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for AccessibilityAnnouncementPriority?, (uint64_t)&type metadata for AccessibilityAnnouncementPriority, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>, (uint64_t)&type metadata for SystemAccentValueKey, (uint64_t)&protocol witness table for SystemAccentValueKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for SystemAccentValue?, (uint64_t)&type metadata for SystemAccentValue, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<SystemAccentValueKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>, (uint64_t)&type metadata for ControlSizeKey, (uint64_t)&protocol witness table for ControlSizeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for ControlSize?, (uint64_t)&type metadata for ControlSize, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<ControlSizeKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaterialActiveAppearance.Key>, (uint64_t)&type metadata for MaterialActiveAppearance.Key, (uint64_t)&protocol witness table for MaterialActiveAppearance.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for MaterialActiveAppearance, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<MaterialActiveAppearance.Key>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTextFieldTruncationMode>, (uint64_t)&type metadata for DefaultTextFieldTruncationMode, (uint64_t)&protocol witness table for DefaultTextFieldTruncationMode, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for Text.TruncationMode?, (uint64_t)&type metadata for Text.TruncationMode, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultTextFieldTruncationMode>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorSchemeKey>, (uint64_t)&type metadata for SystemColorSchemeKey, (uint64_t)&protocol witness table for SystemColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for ColorScheme, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<SystemColorSchemeKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderProminenceKey>, (uint64_t)&type metadata for HeaderProminenceKey, (uint64_t)&protocol witness table for HeaderProminenceKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for Prominence, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<HeaderProminenceKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>, (uint64_t)&type metadata for ExplicitPreferredColorSchemeKey, (uint64_t)&protocol witness table for ExplicitPreferredColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for ColorScheme?, (uint64_t)&type metadata for ColorScheme, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    char v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>>();
    uint64_t v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>>);
    }
  }
}

uint64_t type metadata accessor for DynamicContainer._ItemInfo()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SpacerLayoutComputer.Engine()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AnyStaticFontModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance NSTextLayoutManagerSegmentCategory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

void *__swift_memcpy13_4(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *uint64_t result = v2;
  return result;
}

uint64_t static AGAttributeFlags.scrapeable.getter()
{
  return 8;
}

ValueMetadata *type metadata accessor for LayoutPriorityTraitKey()
{
  return &type metadata for LayoutPriorityTraitKey;
}

ValueMetadata *type metadata accessor for _FrameLayout()
{
  return &type metadata for _FrameLayout;
}

uint64_t static HorizontalAlignment.center.getter(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(void *)a2;
}

uint64_t type metadata completion function for GradientBox()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

double ScrollGeometry.visibleRect.getter()
{
  return *(double *)(v0 + 80);
}

uint64_t closure #1 in ViewTransform.UnsafeBuffer.forEach(inverted:stop:_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, uint64_t a6, uint64_t a7)
{
  if (HIDWORD(a4))
  {
    if (!a3)
    {
LABEL_21:
      __break(1u);
      return result;
    }
    uint64_t v11 = 0;
    int v12 = 0;
    int v13 = HIDWORD(a4) - 1;
    while (1)
    {
      uint64_t v14 = a3 + v12;
      if (v13 == v11) {
        int v12 = 0;
      }
      else {
        v12 += *(_DWORD *)(v14 + 8);
      }
      if (__OFADD__(v11, 1)) {
        break;
      }
      *(void *)(result + 8 * v11) = v14;
      uint64_t v15 = v11 + 1;
      if (v13 == v11++)
      {
        uint64_t v11 = v15;
        if (!v12) {
          goto LABEL_11;
        }
      }
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_11:
  if (a2 < 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (a2)
  {
    uint64_t v17 = result - 8;
    uint64_t v18 = a2;
    while (v18 <= a2)
    {
      uint64_t v19 = **(void **)(v17 + 8 * v18);
      uint64_t v20 = *(void *)(v17 + 8 * v18);
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, unsigned char *, uint64_t, uint64_t))(v19 + 112))(&v20, 1, a5, a6, a7);
      if (!--v18 || *a5) {
        return result;
      }
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  return result;
}

uint64_t static ViewTransform.UnsafeBuffer._VTable.forEach(elt:inverted:stop:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(v5 + 136);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](a1);
  int v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = *v14;
  uint64_t v15 = _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 144) + 16))(a2, a3, a4, a5, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t _DynamicPropertyBuffer.update(container:phase:)(uint64_t result, int *a2)
{
  int v3 = *((_DWORD *)v2 + 3);
  if (!v3)
  {
    char v7 = 0;
    return v7 & 1;
  }
  uint64_t v4 = *v2;
  if (*v2)
  {
    uint64_t v5 = result;
    int v6 = 0;
    char v7 = 0;
    int v8 = *a2;
    int v9 = v3 - 1;
    do
    {
      uint64_t v15 = (uint64_t *)(v4 + v6);
      if (v9) {
        v6 += *((_DWORD *)v15 + 2);
      }
      else {
        int v6 = 0;
      }
      int v10 = v9 | v6;
      uint64_t v11 = v5 + (*((_DWORD *)v15 + 3) & 0x7FFFFFFF);
      uint64_t v12 = *v15;
      uint64_t v17 = v15;
      int v16 = v8;
      char v13 = (*(uint64_t (**)(uint64_t **, uint64_t, int *))(v12 + 120))(&v17, v11, &v16);
      if (v13) {
        unsigned int v14 = 0x80000000;
      }
      else {
        unsigned int v14 = 0;
      }
      *((_DWORD *)v15 + 3) = v14 & 0x80000000 | *((_DWORD *)v15 + 3) & 0x7FFFFFFF;
      v7 |= v13;
      --v9;
    }
    while (v10);
    return v7 & 1;
  }
  __break(1u);
  return result;
}

uint64_t static BoxVTable.update(elt:property:phase:)(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v40 = *(void *)(v7 - 8);
  uint64_t v41 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v42 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + 136);
  uint64_t v9 = *(void *)(v3 + 144);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unsigned int v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v36 - v16;
  uint64_t v18 = *a1;
  LODWORD(a3) = *a3;
  v44[0] = v18;
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  LODWORD(v44[0]) = a3;
  LODWORD(v3) = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v9 + 40))(a2, v44, v10, v9);
  if (v3)
  {
    uint64_t v38 = v18;
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v19(v17, a2, AssociatedTypeWitness);
    int v20 = static os_signpost_type_t.event.getter();
    v19(v14, (uint64_t)v17, AssociatedTypeWitness);
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled()) {
      goto LABEL_7;
    }
    int v39 = v3;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    char v21 = OS_os_log.signpostsEnabled.getter();
    LOBYTE(v3) = v39;
    if (v21)
    {
      static OSSignpostID.exclusive.getter();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v22 = swift_allocObject();
      int v37 = v20;
      uint64_t v23 = (void *)v22;
      *(_OWORD *)(v22 + 16) = xmmword_2461BE2B0;
      uint64_t v45 = AssociatedTypeWitness;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v44);
      v19((char *)boxed_opaque_existential_1, (uint64_t)v14, AssociatedTypeWitness);
      __swift_project_boxed_opaque_existential_1(v44, v45);
      uint64_t DynamicType = swift_getDynamicType();
      type metadata accessor for Any.Type();
      uint64_t v36 = String.init<A>(describing:)();
      uint64_t v3 = v25;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
      uint64_t v26 = MEMORY[0x263F8D310];
      v23[7] = MEMORY[0x263F8D310];
      unint64_t v27 = lazy protocol witness table accessor for type String and conformance String();
      v23[4] = v36;
      v23[5] = v3;
      uint64_t v28 = MEMORY[0x263F8DA20];
      v23[12] = MEMORY[0x263F8D9D0];
      v23[13] = v28;
      uint64_t v29 = v38;
      char v23[8] = v27;
      v23[9] = v29;
      swift_getAssociatedConformanceWitness();
      uint64_t v30 = DynamicProperty.linkValueDescription.getter(AssociatedTypeWitness);
      LOBYTE(v3) = v39;
      v23[17] = v26;
      v23[18] = v27;
      v23[14] = v30;
      v23[15] = v31;
      uint64_t v32 = v42;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v41);
      long long v33 = *(void (**)(char *, uint64_t))(v12 + 8);
      v33(v14, AssociatedTypeWitness);
      v33(v17, AssociatedTypeWitness);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_7:
      __int16 v34 = *(void (**)(char *, uint64_t))(v12 + 8);
      v34(v14, AssociatedTypeWitness);
      v34(v17, AssociatedTypeWitness);
    }
  }
  return v3 & 1;
}

uint64_t _UnsafeHeterogeneousBuffer_Element.body<A>(as:)()
{
  return *v0 + 16;
}

uint64_t EnvironmentBox.update(property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  uint64_t v116 = a3;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v110 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unint64_t v107 = (char *)&v91 - v10;
  long long v109 = (uint64_t *)type metadata accessor for ObservationTracking._AccessList();
  unint64_t v111 = *(v109 - 1);
  MEMORY[0x270FA5388](v109);
  uint64_t v103 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v104 = (char *)&v91 - v13;
  type metadata accessor for ObservationTracking._AccessList?();
  uint64_t v101 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v91 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v105 = (char *)&v91 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v112 = (uint64_t)&v91 - v23;
  uint64_t v115 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v99 = (char *)&v91 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  long long v113 = (char *)&v91 - v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v102 = (char *)&v91 - v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v106 = (char *)&v91 - v31;
  uint64_t v32 = type metadata accessor for Environment.Content();
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  long long v108 = (char *)&v91 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v36 = MEMORY[0x270FA5388](v35);
  uint64_t v38 = (uint64_t *)((char *)&v91 - v37);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v33 + 16))((char *)&v91 - v37, a1, v32, v36);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v33 + 8))(v38, v32);
    return 0;
  }
  uint64_t v96 = v33;
  uint64_t v95 = v32;
  uint64_t v100 = v6;
  uint64_t v97 = v8;
  uint64_t v98 = a1;
  uint64_t v40 = *v38;
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v42 = Value[1];
  v119[0] = *Value;
  v119[1] = v42;
  uint64_t v44 = v43 & 1;
  unsigned __int8 v120 = v43 & 1;
  uint64_t v114 = v3;
  uint64_t v45 = *(void *)(v3 + 8);
  v118[0] = v40;
  uint64_t v94 = v40;
  if (!v45)
  {
    swift_retain();
    swift_retain();
    goto LABEL_9;
  }
  uint64_t v117 = v45;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_retain_n();
  swift_retain();
  char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  uint64_t v47 = swift_release();
  if ((v46 & 1) == 0)
  {
LABEL_9:
    unsigned __int8 v120 = 1;
    swift_retain();
    uint64_t v47 = swift_release();
    *(void *)(v114 + 8) = v40;
    uint64_t v50 = v115;
    uint64_t v51 = v109;
    goto LABEL_10;
  }
  uint64_t v48 = v100;
  uint64_t v49 = v114;
  uint64_t v50 = v115;
  uint64_t v51 = v109;
  if (!v44 && (*(unsigned char *)(v114 + *(int *)(v116 + 36)) & 1) == 0)
  {
    char v52 = *(void (**)(char *, uint64_t, uint64_t))(v110 + 16);
    goto LABEL_25;
  }
LABEL_10:
  long long v109 = &v91;
  double v53 = MEMORY[0x270FA5388](v47);
  *(&v91 - 2) = (uint64_t)v119;
  *(&v91 - 1) = v54;
  unint64_t v55 = v111;
  uint64_t v56 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t *, double))(v111 + 56))(v19, 1, 1, v51, v53);
  MEMORY[0x270FA5388](v56);
  *(&v91 - 4) = v5;
  *(&v91 - 3) = (uint64_t)partial apply for closure #1 in EnvironmentBox.update(property:phase:);
  *(&v91 - 2) = (uint64_t)(&v91 - 4);
  unint64_t v57 = type metadata accessor for Error();
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v19, (uint64_t)partial apply for closure #1 in _withObservation<A>(do:), (uint64_t)(&v91 - 6), (uint64_t)v101, v57, v5, MEMORY[0x263F8E4E0], (uint64_t)v118);
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v19, (uint64_t)v16);
  uint64_t v101 = *(uint64_t (**)(char *, uint64_t, uint64_t *))(v55 + 48);
  int v58 = v101(v16, 1, v51);
  uint64_t v93 = 0;
  if (v58 == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v16);
  }
  else
  {
    uint64_t v59 = v104;
    uint64_t v92 = *(void (**)(char *, char *, uint64_t *))(v55 + 32);
    v92(v104, v16, v51);
    if (one-time initialization token for lastestAccessLists != -1) {
      swift_once();
    }
    (*(void (**)(char *, char *, uint64_t *))(v55 + 16))(v103, v59, v51);
    swift_beginAccess();
    char v60 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v60;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v60 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v60 + 2) + 1, 1, (unint64_t)v60);
      static ObservationRegistrar.lastestAccessLists = v60;
    }
    unint64_t v63 = *((void *)v60 + 2);
    unint64_t v62 = *((void *)v60 + 3);
    if (v63 >= v62 >> 1)
    {
      char v60 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1, (unint64_t)v60);
      static ObservationRegistrar.lastestAccessLists = v60;
    }
    *((void *)v60 + 2) = v63 + 1;
    unint64_t v64 = v111;
    v92(&v60[((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80))+ *(void *)(v111 + 72) * v63], v103, v51);
    swift_endAccess();
    (*(void (**)(char *, uint64_t *))(v64 + 8))(v104, v51);
  }
  uint64_t v65 = v112;
  uint64_t v66 = (uint64_t)v105;
  uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
  uint64_t v68 = v102;
  v67(v102, v113, v5);
  outlined init with take of ObservationTracking._AccessList?((uint64_t)v19, v66);
  uint64_t v69 = v106;
  v67(v106, v68, v5);
  outlined init with take of ObservationTracking._AccessList?(v66, v65);
  BOOL v70 = v101((char *)v65, 1, v51) != 1;
  uint64_t v71 = v116;
  uint64_t v72 = v114;
  *(unsigned char *)(v114 + *(int *)(v116 + 36)) = v70;
  long long v73 = (char *)(v72 + *(int *)(v71 + 32));
  uint64_t v74 = v110;
  long long v75 = *(char **)(v110 + 16);
  unint64_t v111 = (v110 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  long long v76 = v107;
  uint64_t v48 = v100;
  long long v113 = v75;
  ((void (*)(char *, char *, uint64_t))v75)(v107, v73, v100);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v76, 1, v5) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v65);
    long long v77 = v76;
    char v78 = *(void (**)(char *, uint64_t))(v74 + 8);
    v78(v77, v48);
  }
  else
  {
    uint64_t v79 = (uint64_t)v99;
    uint64_t v80 = ((uint64_t (*)(char *, char *, uint64_t))v67)(v99, v76, v5);
    MEMORY[0x270FA5388](v80);
    *(&v91 - 4) = v5;
    *(&v91 - 3) = (uint64_t)v69;
    *((_DWORD *)&v91 - 4) = 3;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v79, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)(&v91 - 6), v5, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v81);
    int v82 = LOBYTE(v118[0]);
    char v83 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v83(v79, v5);
    if (v82 == 1)
    {
      v83((uint64_t)v69, v5);
      outlined destroy of ObservationTracking._AccessList?(v112);
      unsigned __int8 v120 = 0;
      uint64_t v49 = v114;
      uint64_t v50 = v115;
      uint64_t v48 = v100;
      char v52 = (void (*)(char *, uint64_t, uint64_t))v113;
      goto LABEL_25;
    }
    outlined destroy of ObservationTracking._AccessList?(v112);
    char v78 = *(void (**)(char *, uint64_t))(v110 + 8);
    uint64_t v48 = v100;
  }
  char v52 = (void (*)(char *, uint64_t, uint64_t))v113;
  v78(v73, v48);
  v67(v73, v69, v5);
  uint64_t v50 = v115;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v115 + 56))(v73, 0, 1, v5);
  uint64_t v49 = v114;
LABEL_25:
  double v84 = v97;
  v52(v97, v49 + *(int *)(v116 + 32), v48);
  int v85 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48))(v84, 1, v5);
  uint64_t v86 = v98;
  uint64_t v87 = v96;
  if (v85 != 1)
  {
    swift_release();
    uint64_t v88 = v108;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v108, v84, v5);
    uint64_t v89 = v95;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, char *, uint64_t))(v87 + 40))(v86, v88, v89);
    uint64_t v39 = v120;
    swift_release();
    swift_release();
    return v39;
  }
  __break(1u);
  uint64_t result = outlined destroy of ObservationTracking._AccessList?(v87);
  __break(1u);
  return result;
}

uint64_t outlined destroy of ObservationTracking._AccessList?(uint64_t a1)
{
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for ObservationTracking._AccessList?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s11Observation0A8TrackingV11_AccessListVSgMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s11Observation0A8TrackingV11_AccessListVSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s11Observation0A8TrackingV11_AccessListVSgMaTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for LayoutDirection(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t outlined init with take of ObservationTracking._AccessList?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ObservationTracking._AccessList?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ObservationTracking._AccessList?()
{
  if (!lazy cache variable for type metadata for ObservationTracking._AccessList?)
  {
    type metadata accessor for ObservationTracking._AccessList();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?);
    }
  }
}

uint64_t outlined init with copy of ObservationTracking._AccessList?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ObservationTracking._AccessList?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *initializeWithCopy for Environment.Content(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v10 = 1;
  }
  else
  {
    *a1 = *(void *)a2;
    swift_retain();
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

uint64_t type metadata accessor for Environment.Content()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t type metadata accessor for Error()
{
  unint64_t result = lazy cache variable for type metadata for Error;
  if (!lazy cache variable for type metadata for Error)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Error);
  }
  return result;
}

unsigned __int8 *assignWithTake for Environment.Content(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    else {
      swift_release();
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 1;
    }
    else
    {
      char v18 = 0;
      *(void *)a1 = *(void *)a2;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t static PropertyKey.valuesEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = a2;
  int v9 = 3;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)&v6, AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v4);
  return v10;
}

uint64_t closure #1 in compareValues<A>(_:_:options:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[2] = a4;
  v9[3] = a1;
  int v10 = a3;
  return _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a2, (uint64_t)partial apply for closure #1 in closure #1 in compareValues<A>(_:_:options:), (uint64_t)v9, a4, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], a8);
}

uint64_t _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x270FA5388]();
  unsigned int v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v15(v12, v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t partial apply for closure #1 in compareValues<A>(_:_:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return closure #1 in compareValues<A>(_:_:options:)(a1, *(void *)(v8 + 24), *(_DWORD *)(v8 + 32), *(void *)(v8 + 16), a2, a6, a7, a8);
}

uint64_t _s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(v8 + 24);
  int v10 = *(_DWORD *)(v8 + 32);
  uint64_t v13 = *(void *)(v8 + 16);
  uint64_t v14 = a1;
  int v15 = v10;
  return _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9, (uint64_t)partial apply for closure #1 in closure #1 in compareValues<A>(_:_:options:), (uint64_t)&v12, v13, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], a8);
}

uint64_t partial apply for closure #1 in closure #1 in compareValues<A>(_:_:options:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AGCompareValues();
  *a1 = result;
  return result;
}

uint64_t closure #1 in Attribute.init<A>(_:)@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  uint64_t result;

  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_0@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_2@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_3@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_5@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_6@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_7@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_8@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_9@<X0>(_DWORD *a1@<X8>)
{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_10@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_11@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_12@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_13@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_14@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase()
{
  return 0;
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_0@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_1@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_3@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_4@<X0>(_DWORD *a1@<X8>)
{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_5@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_6@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_8@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_10@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_11(uint64_t a1, uint64_t a2)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_12@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t destroy for Environment(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 8) {
    unint64_t v2 = 8;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
  else {
    return swift_release();
  }
}

void *initializeWithCopy for Environment(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v10 = 1;
  }
  else
  {
    *a1 = *(void *)a2;
    swift_retain();
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for _BlendModeEffect(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEC) {
    goto LABEL_17;
  }
  if (a2 + 20 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 20) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 20;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 20;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 20;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x15;
  int v8 = v6 - 21;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 __swift_memcpy16_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t partial apply for closure #1 in StatefulRule.value.setter()
{
  return closure #1 in StatefulRule.value.setter();
}

uint64_t closure #1 in StatefulRule.value.setter()
{
  return AGGraphSetOutputValue();
}

uint64_t getEnumTagSinglePayload for AnyAccessibilityValueType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

__n128 __swift_memcpy113_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t protocol witness for ViewTransformElement.forEach(inverted:stop:_:) in conformance CoordinateSpaceIDElement(uint64_t a1, uint64_t a2, void (*a3)(void *))
{
  v5[0] = *v3;
  char v6 = 1;
  char v7 = 3;
  a3(v5);
  return outlined destroy of ViewTransform.Item((uint64_t)v5);
}

uint64_t protocol witness for ViewTransformElement.forEach(inverted:stop:_:) in conformance ViewTransform.ScrollGeometryItem(uint64_t a1, uint64_t a2, void (*a3)(_OWORD *))
{
  char v4 = *(unsigned char *)(v3 + 112);
  long long v5 = *(_OWORD *)(v3 + 16);
  v9[0] = *(_OWORD *)v3;
  v9[1] = v5;
  long long v6 = *(_OWORD *)(v3 + 48);
  v9[2] = *(_OWORD *)(v3 + 32);
  v9[3] = v6;
  long long v7 = *(_OWORD *)(v3 + 80);
  void v9[4] = *(_OWORD *)(v3 + 64);
  v9[5] = v7;
  v9[6] = *(_OWORD *)(v3 + 96);
  char v10 = v4;
  char v11 = 5;
  a3(v9);
  return outlined destroy of ViewTransform.Item((uint64_t)v9);
}

uint64_t protocol witness for ViewTransformElement.forEach(inverted:stop:_:) in conformance SizedSpaceIDElement(uint64_t a1, uint64_t a2, void (*a3)(void *))
{
  v5[0] = *(void *)v3;
  char v6 = 1;
  long long v7 = *(_OWORD *)(v3 + 8);
  char v8 = 4;
  a3(v5);
  return outlined destroy of ViewTransform.Item((uint64_t)v5);
}

uint64_t outlined destroy of ViewTransform.Item(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ViewTransform.Item(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 113);
  if (v1 >= 6) {
    unsigned int v1 = *(_DWORD *)a1 + 6;
  }
  switch(v1)
  {
    case 3u:
      unsigned int v2 = *(unsigned __int8 *)(a1 + 40);
      if (v2 >= 2) {
        unsigned int v2 = *(_DWORD *)a1 + 2;
      }
      if (v2 != 1) {
        goto LABEL_10;
      }
      break;
    case 4u:
      if ((*(unsigned char *)(a1 + 40) & 1) == 0) {
LABEL_10:
      }
        a1 = __swift_destroy_boxed_opaque_existential_1(a1);
      break;
    default:
      return a1;
  }
  return a1;
}

uint64_t partial apply for closure #1 in ViewTransform.convert(_:_:)(uint64_t a1, unsigned char *a2)
{
  return closure #1 in ViewTransform.convert(_:_:)(a1, a2, *(void *)(v2 + 16), *(unsigned char **)(v2 + 24), *(uint64_t (**)(uint64_t))(v2 + 32));
}

void ViewTransform.Item.apply(to:allowUnclipped:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  outlined init with copy of ViewTransform.Item(v3, (uint64_t)&v29);
  switch(v37)
  {
    case 1:
      float64_t b = v29.f64[1];
      float64_t a = v29.f64[0];
      CGFloat d = *((double *)&v30 + 1);
      CGFloat c = *(double *)&v30;
      tCGFloat y = *((double *)&v31 + 1);
      tCGFloat x = *(double *)&v31;
      if ((v29.f64[1] != 0.0 || *(double *)&v30 != 0.0) && (v29.f64[0] != 0.0 || *((double *)&v30 + 1) != 0.0)) {
        goto LABEL_12;
      }
      if ((*(unsigned char *)(a1 + 112) & 1) == 0)
      {
        double v25 = *(double *)(a1 + 96);
        double v26 = *(double *)(a1 + 104);
        double v22 = *(double *)(a1 + 80);
        double v23 = *(double *)(a1 + 88);
        CGSize v24 = *(CGSize *)(a1 + 64);
        double v16 = *(double *)a1;
        double v15 = *(double *)(a1 + 8);
        if ((_BYTE)v32)
        {
          *(float64x2_t *)&v28.float64_t a = v29;
          *(_OWORD *)&v28.CGFloat c = v30;
          *(_OWORD *)&v28.tCGFloat x = v31;
          CGAffineTransformInvert(&v27, &v28);
          float64_t a = v27.a;
          float64_t b = v27.b;
          CGFloat c = v27.c;
          CGFloat d = v27.d;
          tCGFloat x = v27.tx;
          tCGFloat y = v27.ty;
        }
        v28.float64_t a = a;
        v28.float64_t b = b;
        v28.CGFloat c = c;
        v28.CGFloat d = d;
        v28.tCGFloat x = tx;
        v28.tCGFloat y = ty;
        v38.CGFloat x = v16;
        v38.CGFloat y = v15;
        CGPoint v17 = CGPointApplyAffineTransform(v38, &v28);
        v28.float64_t a = a;
        v28.float64_t b = b;
        v28.CGFloat c = c;
        v28.CGFloat d = d;
        v28.tCGFloat x = tx;
        v28.tCGFloat y = ty;
        CGSize v18 = CGSizeApplyAffineTransform(v24, &v28);
        *(CGPoint *)a1 = v17;
        *(CGSize *)(a1 + 64) = v18;
        *(double *)(a1 + 80) = v22 + v17.x - v16;
        *(double *)(a1 + 88) = v23 + v17.y - v15;
        *(double *)(a1 + 96) = v25 + v18.width - v24.width;
        *(double *)(a1 + 104) = v26 + v18.height - v24.height;
        goto LABEL_18;
      }
      break;
    case 2:
LABEL_12:
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(unsigned char *)(a1 + 112) = 1;
      break;
    case 3:
      outlined destroy of ViewTransform.Item((uint64_t)&v29);
      break;
    case 4:
      outlined destroy of CoordinateSpace.Name((uint64_t)&v29);
      break;
    case 5:
      if (v36 & 1) != 0 || (a2)
      {
        long long v19 = v30;
        *(float64x2_t *)a1 = v29;
        *(_OWORD *)(a1 + 16) = v19;
        long long v20 = v32;
        *(_OWORD *)(a1 + 32) = v31;
        *(_OWORD *)(a1 + 48) = v20;
        long long v21 = v34;
        *(_OWORD *)(a1 + 64) = v33;
        *(_OWORD *)(a1 + 80) = v21;
        *(_OWORD *)(a1 + 96) = v35;
        goto LABEL_18;
      }
      break;
    default:
      if ((*(unsigned char *)(a1 + 112) & 1) == 0)
      {
        float64x2_t v6 = vaddq_f64(*(float64x2_t *)a1, v29);
        v7.f64[0] = v6.f64[0];
        v7.f64[1] = *(float64_t *)(a1 + 8);
        float64x2_t v8 = vaddq_f64(vsubq_f64(v6, v7), vaddq_f64(*(float64x2_t *)(a1 + 80), vsubq_f64(v7, *(float64x2_t *)a1)));
        *(float64x2_t *)a1 = v6;
        *(float64x2_t *)(a1 + 80) = v8;
LABEL_18:
        *(unsigned char *)(a1 + 112) = 0;
      }
      break;
  }
}

void closure #1 in CGRect.convertAndClipToScrollView(to:transform:)(uint64_t a1, CGRect *a2, BOOL *a3)
{
  outlined init with copy of ViewTransform.Item(a1, (uint64_t)&v29);
  switch(v35)
  {
    case 1:
      float64x2_t v5 = v29;
      long long v6 = v30;
      tCGFloat y = *((double *)&v31 + 1);
      tdouble x = *(double *)&v31;
      double x = a2->origin.x;
      CGFloat y = a2->origin.y;
      CGFloat width = a2->size.width;
      CGFloat height = a2->size.height;
      if (v32 == 1)
      {
        *(float64x2_t *)&v36.float64_t a = v29;
        *(_OWORD *)&v36.CGFloat c = v30;
        *(_OWORD *)&v36.tdouble x = v31;
        CGAffineTransformInvert(&v28, &v36);
        float64_t a = v28.a;
        float64_t b = v28.b;
        CGFloat c = v28.c;
        CGFloat d = v28.d;
        tdouble x = v28.tx;
        tCGFloat y = v28.ty;
      }
      else
      {
        float64_t b = v29.f64[1];
        float64_t a = v29.f64[0];
        CGFloat d = *((double *)&v30 + 1);
        CGFloat c = *(double *)&v30;
      }
      v36.float64_t a = a;
      v36.float64_t b = b;
      v36.CGFloat c = c;
      v36.CGFloat d = d;
      v36.tdouble x = tx;
      v36.tCGFloat y = ty;
      v41.origin.double x = x;
      v41.origin.CGFloat y = y;
      v41.size.CGFloat width = width;
      v41.size.CGFloat height = height;
      *a2 = CGRectApplyAffineTransform(v41, &v36);
      if (*a3) {
        goto LABEL_15;
      }
      if (v5.f64[1] != 0.0 || *(double *)&v6 != 0.0)
      {
        if (v5.f64[0] != 0.0) {
          goto LABEL_15;
        }
        BOOL v27 = *((double *)&v6 + 1) != 0.0;
        goto LABEL_16;
      }
      *a3 = 0;
      break;
    case 2:
      *(_OWORD *)&v36.tdouble x = v31;
      long long v37 = v32;
      CGFloat v38 = v33;
      *(float64x2_t *)&v36.float64_t a = v29;
      *(_OWORD *)&v36.CGFloat c = v30;
      char v17 = LOBYTE(v34);
      double v18 = a2->origin.x;
      double v19 = a2->origin.y;
      double v21 = a2->size.width;
      double v20 = a2->size.height;
      v39.origin.double x = a2->origin.x;
      v39.origin.CGFloat y = v19;
      v39.size.CGFloat width = v21;
      v39.size.CGFloat height = v20;
      if (!CGRectIsNull(v39))
      {
        v40.origin.double x = v18;
        v40.origin.CGFloat y = v19;
        v40.size.CGFloat width = v21;
        v40.size.CGFloat height = v20;
        if (!CGRectIsInfinite(v40))
        {
          type metadata accessor for _ContiguousArrayStorage<CGPoint>();
          initeCGFloat d = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_2461C6AA0;
          *(double *)(inited + 32) = v18;
          *(double *)(inited + 40) = v19;
          *(double *)(inited + 48) = v18 + v21;
          *(double *)(inited + 56) = v19;
          *(double *)(inited + 64) = v18 + v21;
          *(double *)(inited + 72) = v19 + v20;
          *(double *)(inited + 80) = v18;
          *(double *)(inited + 88) = v19 + v20;
          *(void *)&v28.float64_t a = inited;
          specialized MutableCollection<>._apply(_:inverse:)((uint64_t)&v36, v17);
          if (*(void *)(*(void *)&v28.a + 16) < 4uLL)
          {
            __break(1u);
            return;
          }
          specialized CGRect.init(cornerPoints:)(*(uint64_t *)&v28.a, *(void *)&v28.a + 32, 0, 9uLL);
          double v18 = v23;
          double v19 = v24;
          double v21 = v25;
          double v20 = v26;
        }
      }
      a2->origin.double x = v18;
      a2->origin.CGFloat y = v19;
      a2->size.CGFloat width = v21;
      a2->size.CGFloat height = v20;
LABEL_15:
      BOOL v27 = 1;
LABEL_16:
      *a3 = v27;
      break;
    case 3:
      outlined destroy of ViewTransform.Item((uint64_t)&v29);
      break;
    case 4:
      outlined destroy of CoordinateSpace.Name((uint64_t)&v29);
      break;
    case 5:
      v42.size.CGFloat width = v33;
      v42.size.CGFloat height = v34;
      v42.origin.double x = 0.0;
      v42.origin.CGFloat y = 0.0;
      *a2 = CGRectIntersection(*a2, v42);
      break;
    default:
      a2->origin = (CGPoint)vaddq_f64(v29, (float64x2_t)a2->origin);
      break;
  }
}

uint64_t closure #1 in ViewTransform.convert(_:_:)(uint64_t a1, unsigned char *a2, uint64_t a3, unsigned char *a4, uint64_t (*a5)(uint64_t))
{
  outlined init with copy of ViewTransform.Item(a1, (uint64_t)v20);
  if (v24 - 3 > 1)
  {
    uint64_t result = outlined destroy of ViewTransform.Item((uint64_t)v20);
  }
  else
  {
    outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(v20, v25);
    outlined init with copy of CoordinateSpace.Name((uint64_t)v25, (uint64_t)v20);
    if (v22)
    {
      *(void *)&v15[0] = *(void *)&v20[0];
      char v10 = 1;
    }
    else
    {
      char v10 = 0;
      v15[0] = v20[0];
      v15[1] = v20[1];
      uint64_t v16 = v21;
    }
    char v17 = v10;
    outlined init with take of CoordinateSpace((uint64_t)v15, (uint64_t)v20);
    outlined destroy of CoordinateSpace.Name((uint64_t)v25);
    outlined init with take of CoordinateSpace((uint64_t)v20, (uint64_t)v19);
    outlined init with copy of ViewTransform.Conversion(a3, (uint64_t)v20);
    switch(v23)
    {
      case 1:
      case 3:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v20, (uint64_t)v15);
        char v13 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v19, (uint64_t)v15);
        outlined destroy of CoordinateSpace((uint64_t)v19);
        outlined destroy of CoordinateSpace((uint64_t)v15);
        if ((v13 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_10;
      case 4:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v20, (uint64_t)v15);
        if (specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v19, (uint64_t)v18))
        {
          outlined destroy of CoordinateSpace((uint64_t)v19);
          outlined destroy of CoordinateSpace((uint64_t)v18);
          outlined destroy of CoordinateSpace((uint64_t)v15);
LABEL_13:
          uint64_t result = outlined destroy of ViewTransform.Conversion((uint64_t)v20);
          *a2 = 1;
          return result;
        }
        char v14 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v19, (uint64_t)v15);
        outlined destroy of CoordinateSpace((uint64_t)v19);
        outlined destroy of CoordinateSpace((uint64_t)v15);
        outlined destroy of CoordinateSpace((uint64_t)v18);
        if (v14)
        {
LABEL_10:
          uint64_t result = outlined destroy of ViewTransform.Conversion((uint64_t)v20);
          *a4 = 1;
        }
        else
        {
LABEL_15:
          uint64_t result = outlined destroy of ViewTransform.Conversion((uint64_t)v20);
        }
        break;
      default:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v20, (uint64_t)v15);
        char v12 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v19, (uint64_t)v15);
        outlined destroy of CoordinateSpace((uint64_t)v19);
        outlined destroy of CoordinateSpace((uint64_t)v15);
        if ((v12 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_13;
    }
  }
  if (*a4 == 1) {
    return a5(a1);
  }
  return result;
}

uint64_t outlined init with copy of ViewTransform.Item(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for ViewTransform.Item(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 113);
  if (v4 >= 6) {
    unsigned int v4 = *(_DWORD *)a2 + 6;
  }
  switch(v4)
  {
    case 1u:
      long long v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      char v5 = 1;
      break;
    case 2u:
      long long v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      char v5 = 2;
      break;
    case 3u:
      unsigned int v10 = *(unsigned __int8 *)(a2 + 40);
      if (v10 >= 2) {
        unsigned int v10 = *(_DWORD *)a2 + 2;
      }
      if (v10 == 1)
      {
        *(void *)a1 = *(void *)a2;
        char v11 = 1;
      }
      else
      {
        long long v16 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v16;
        (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1, a2);
        char v11 = 0;
      }
      *(unsigned char *)(a1 + 40) = v11;
      char v5 = 3;
      break;
    case 4u:
      if (*(unsigned char *)(a2 + 40))
      {
        long long v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        long long v15 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v15;
        (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1, a2);
        *(unsigned char *)(a1 + 40) = 0;
      }
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      char v5 = 4;
      break;
    case 5u:
      long long v12 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v12;
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
      long long v13 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v13;
      long long v14 = *(_OWORD *)(a2 + 48);
      char v5 = 5;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v14;
      break;
    default:
      char v5 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      break;
  }
  *(unsigned char *)(a1 + 113) = v5;
  return a1;
}

uint64_t outlined init with copy of ViewTransform.Conversion(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for ViewTransform.Conversion(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 89);
  if (v4 >= 5) {
    unsigned int v4 = *(_DWORD *)a2 + 5;
  }
  switch(v4)
  {
    case 1u:
      unsigned int v8 = *(unsigned __int8 *)(a2 + 40);
      if (v8 >= 2) {
        unsigned int v8 = *(_DWORD *)a2 + 2;
      }
      if (v8 == 1)
      {
        *(void *)a1 = *(void *)a2;
        char v7 = 1;
        *(unsigned char *)(a1 + 40) = 1;
      }
      else
      {
        if (v8)
        {
          long long v21 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v21;
          *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        }
        else
        {
          long long v9 = *(_OWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 24) = v9;
          (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1, a2);
          *(unsigned char *)(a1 + 40) = 0;
        }
        char v7 = 1;
      }
      break;
    case 2u:
      unsigned int v10 = *(unsigned __int8 *)(a2 + 40);
      if (v10 >= 2) {
        unsigned int v10 = *(_DWORD *)a2 + 2;
      }
      if (v10 == 1)
      {
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 40) = 1;
        char v7 = 2;
      }
      else
      {
        if (v10)
        {
          long long v22 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v22;
          *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        }
        else
        {
          long long v11 = *(_OWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 24) = v11;
          (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1, a2);
          *(unsigned char *)(a1 + 40) = 0;
        }
        char v7 = 2;
      }
      break;
    case 3u:
      unsigned int v12 = *(unsigned __int8 *)(a2 + 40);
      if (v12 >= 2) {
        unsigned int v12 = *(_DWORD *)a2 + 2;
      }
      if (v12 == 1)
      {
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 40) = 1;
      }
      else if (v12)
      {
        long long v23 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v23;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        long long v13 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v13;
        (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1, a2);
        *(unsigned char *)(a1 + 40) = 0;
      }
      char v7 = 3;
      break;
    case 4u:
      if (*(unsigned char *)(a2 + 40))
      {
        long long v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v14;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        long long v15 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v15;
        (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1, a2);
        *(unsigned char *)(a1 + 40) = 0;
      }
      long long v16 = (_OWORD *)(a1 + 48);
      char v17 = (_OWORD *)(a2 + 48);
      if (*(unsigned char *)(a2 + 88))
      {
        long long v18 = *(_OWORD *)(a2 + 64);
        *long long v16 = *v17;
        *(_OWORD *)(a1 + 64) = v18;
        *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      }
      else
      {
        long long v19 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 72) = v19;
        (**(void (***)(_OWORD *, _OWORD *))(v19 - 8))(v16, v17);
        *(unsigned char *)(a1 + 88) = 0;
      }
      char v7 = 4;
      break;
    default:
      unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
      if (v5 >= 2) {
        unsigned int v5 = *(_DWORD *)a2 + 2;
      }
      if (v5 == 1)
      {
        char v7 = 0;
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 40) = 1;
      }
      else if (v5)
      {
        char v7 = 0;
        long long v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        long long v6 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v6;
        (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
        char v7 = 0;
        *(unsigned char *)(a1 + 40) = 0;
      }
      break;
  }
  *(unsigned char *)(a1 + 89) = v7;
  return a1;
}

uint64_t outlined destroy of CoordinateSpace(uint64_t a1)
{
  return a1;
}

uint64_t destroy for CoordinateSpace(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (!v1) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t outlined destroy of CoordinateSpace.Name(uint64_t a1)
{
  return a1;
}

uint64_t destroy for CoordinateSpace.Name(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 != 1) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t outlined destroy of ViewTransform.Conversion(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ViewTransform.Conversion(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int8 *)(result + 89);
  if (v2 >= 5) {
    unsigned int v2 = *(_DWORD *)result + 5;
  }
  if (v2 == 4)
  {
    if (*(unsigned char *)(result + 40))
    {
      if (*(unsigned char *)(result + 88)) {
        return result;
      }
    }
    else
    {
      uint64_t result = __swift_destroy_boxed_opaque_existential_1(result);
      if (*(unsigned char *)(v1 + 88)) {
        return result;
      }
    }
    v1 += 48;
    goto LABEL_13;
  }
  unsigned int v3 = *(unsigned __int8 *)(result + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)result + 2;
  }
  if (!v3)
  {
LABEL_13:
    return __swift_destroy_boxed_opaque_existential_1(v1);
  }
  return result;
}

uint64_t outlined init with copy of CoordinateSpace.Name(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for CoordinateSpace.Name(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    *(void *)a1 = *(void *)a2;
    char v4 = 1;
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    char v4 = 0;
  }
  *(unsigned char *)(a1 + 40) = v4;
  return a1;
}

_OWORD *outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(long long *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t specialized static CoordinateSpace.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of CoordinateSpace(a1, (uint64_t)v13);
  outlined init with copy of CoordinateSpace(a2, (uint64_t)v15);
  if (!v14)
  {
    outlined init with copy of CoordinateSpace((uint64_t)v13, (uint64_t)v11);
    if (!v16)
    {
      v9[0] = v11[0];
      v9[1] = v11[1];
      uint64_t v10 = v12;
      v7[0] = *(_OWORD *)v15;
      v7[1] = *(_OWORD *)&v15[16];
      uint64_t v8 = *(void *)&v15[32];
      char v3 = MEMORY[0x24C523BA0](v9, v7);
      outlined destroy of AnyHashable((uint64_t)v7);
      outlined destroy of AnyHashable((uint64_t)v9);
      goto LABEL_13;
    }
    outlined destroy of AnyHashable((uint64_t)v11);
    goto LABEL_16;
  }
  if (v14 != 1)
  {
    if (v13[3] | v13[4] | v13[0] | v13[2] | v13[1])
    {
      if (v16 != 2) {
        goto LABEL_16;
      }
      if (*(void *)v15 != 1) {
        goto LABEL_16;
      }
      int8x16_t v4 = vorrq_s8(*(int8x16_t *)&v15[8], *(int8x16_t *)&v15[24]);
      if (vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL))) {
        goto LABEL_16;
      }
    }
    else
    {
      if (v16 != 2) {
        goto LABEL_16;
      }
      int8x16_t v5 = vorrq_s8(*(int8x16_t *)&v15[8], *(int8x16_t *)&v15[24]);
      if (*(void *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | *(void *)v15) {
        goto LABEL_16;
      }
    }
    outlined destroy of CoordinateSpace((uint64_t)v13);
    char v3 = 1;
    return v3 & 1;
  }
  outlined init with copy of CoordinateSpace((uint64_t)v13, (uint64_t)v11);
  if (v16 != 1)
  {
LABEL_16:
    outlined destroy of (CoordinateSpace, CoordinateSpace)((uint64_t)v13, &lazy cache variable for type metadata for (CoordinateSpace, CoordinateSpace));
    char v3 = 0;
    return v3 & 1;
  }
  char v3 = *(void *)&v11[0] == *(void *)v15;
LABEL_13:
  outlined destroy of CoordinateSpace((uint64_t)v13);
  return v3 & 1;
}

uint64_t outlined init with copy of CoordinateSpace(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for CoordinateSpace(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

void closure #1 in CGRect.convertAndClipToScrollView(to:transform:)partial apply(uint64_t a1)
{
  closure #1 in CGRect.convertAndClipToScrollView(to:transform:)(a1, *(CGRect **)(v1 + 16), *(BOOL **)(v1 + 24));
}

uint64_t outlined destroy of (CoordinateSpace, CoordinateSpace)(uint64_t a1, unint64_t *a2)
{
  type metadata accessor for (CGFloat, CGFloat)(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for (CGFloat, CGFloat)(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void partial apply for closure #1 in ViewTransform.nearestScrollGeometry.getter()
{
  ViewTransform.Item.apply(to:allowUnclipped:)(*(void *)(v0 + 16), 1);
}

void *initializeWithCopy for Binding(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  long long v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *long long v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  unint64_t v11 = (v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  swift_retain();
  swift_retain();
  v8(v10, v11, v7);
  return a1;
}

uint64_t StatePropertyBox.update(property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v34 - v11;
  MEMORY[0x270FA5388](v13);
  long long v15 = (char *)&v34 - v14;
  uint64_t v16 = v3[1];
  char v17 = v16 == 0;
  if (!v16)
  {
    int v35 = 1;
    if (*(void *)(a1 + *(int *)(type metadata accessor for State() + 28))
      && (type metadata accessor for StoredLocation(), (uint64_t v18 = swift_dynamicCastClass()) != 0))
    {
      v3[1] = v18;
      swift_retain();
    }
    else
    {
      long long v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v19(v15, a1, v6);
      v19(v12, (uint64_t)v15, v6);
      if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
      {
        id v20 = (id)AGSubgraphGetCurrent();
        if (!v20)
        {
LABEL_19:
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        long long v21 = v20;
        id v22 = (id)AGSubgraphGetGraph();
      }
      else
      {
        id v22 = (id)AGGraphGetAttributeGraph();
      }
      id v34 = v22;
      uint64_t Context = AGGraphGetContext();
      if (!Context)
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      uint64_t v24 = Context;
      type metadata accessor for StoredLocation();
      swift_retain();

      uint64_t v25 = specialized StoredLocation.__allocating_init(initialValue:host:signal:)((uint64_t)v12, v24, *v4);
      swift_release();
      double v26 = v12;
      BOOL v27 = *(void (**)(char *, uint64_t))(v7 + 8);
      v27(v26, v6);
      v27(v15, v6);
      swift_release();
      v4[1] = v25;
    }
    char v17 = v35;
  }
  Weakuint64_t Value = AGGraphGetWeakValue();
  char v30 = v29;
  StoredLocationBase.updateValue.getter((uint64_t)v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(a1, v9, v6);
  uint64_t v31 = v4[1];
  if (!v31)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v32 = *(int *)(type metadata accessor for State() + 28);
  swift_retain();
  swift_release();
  *(void *)(a1 + v32) = v31;
  if (WeakValue)
  {
    if (v30) {
      char v17 = (v16 == 0) | StoredLocationBase.wasRead.getter();
    }
  }
  return v17 & 1;
}

uint64_t type metadata accessor for State()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t StoredLocationBase.updateValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  StoredLocationBase.$data.getter(&v10);
  unint64_t v4 = v10;
  uint64_t v5 = v10 + 4;
  uint64_t v6 = *(void *)(v3 + 168);
  uint64_t v7 = *(void *)(type metadata accessor for StoredLocationBase.Data() - 8);
  uint64_t v8 = (uint64_t)v4 + ((*(unsigned __int8 *)(v7 + 80) + 20) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  swift_retain();
  os_unfair_lock_lock(v5);
  closure #1 in StoredLocationBase.updateValue.getter(v8, v6, a1);
  $defer #1 <A>() in AtomicBox.wrappedValue.modify(v5);
  return swift_release_n();
}

uint64_t StoredLocationBase.$data.getter@<X0>(void *a1@<X8>)
{
  return AtomicBox.projectedValue.getter(a1);
}

uint64_t type metadata accessor for StoredLocationBase.Data()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AtomicBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AtomicBox.projectedValue.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t closure #1 in StoredLocationBase.updateValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v12 - v8;
  v12[1] = *(void *)(a1 + *(int *)(type metadata accessor for StoredLocationBase.Data() + 28));
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.first.getter();
  uint64_t v10 = *(void *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, a2) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v9, a2);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a3, a1, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t destroy for Binding(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 15;
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = ((v3 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t getEnumTagSinglePayload for SystemHoverEffect.Style(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

void partial apply for closure #1 in ViewTransform.containingScrollGeometry.getter()
{
  ViewTransform.Item.apply(to:allowUnclipped:)(*(void *)(v0 + 16), 0);
}

uint64_t destroy for AnyTransition.RemovalVisitor(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_release();
}

uint64_t initializeWithCopy for AnyTransition.RemovalVisitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t getEnumTagSinglePayload for CGRect(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

unint64_t partial apply for closure #1 in _ConditionalContent<>.childInfo(metadata:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return closure #1 in _ConditionalContent<>.childInfo(metadata:)(a1, a2);
}

unint64_t partial apply for closure #1 in UnwrapConditional.updateValue()(uint64_t a1)
{
  return closure #1 in UnwrapConditional.updateValue()(a1, v1[6], v1[2], v1[3], v1[4], v1[5]);
}

unint64_t closure #1 in UnwrapConditional.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7 = *(void *)(a2 + 8);
  v9[6] = a2;
  unint64_t v10 = v7;
  long long v11 = *(_OWORD *)(a2 + 16);
  _OWORD v9[2] = a3;
  v9[3] = a4;
  void v9[4] = a5;
  v9[5] = a6;
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v7);
  type metadata accessor for ConditionalTypeDescriptor();
  ConditionalTypeDescriptor.project(at:baseIndex:_:)(a1, 0, (uint64_t (*)(uint64_t, unint64_t *, uint64_t))partial apply for closure #1 in closure #1 in UnwrapConditional.updateValue(), (uint64_t)v9);
  return outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v10);
}

uint64_t EmbeddedDynamicPropertyBox.update(property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t type metadata accessor for StoredLocation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static EnumVTable.update(elt:property:phase:)()
{
  return 0;
}

uint64_t type metadata accessor for GraphHost()
{
  return self;
}

unint64_t partial apply for closure #1 in Optional<A>.childInfo(metadata:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return closure #1 in Optional<A>.childInfo(metadata:)(a1, a2);
}

unint64_t closure #1 in Optional<A>.childInfo(metadata:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = (uint64_t)(a2 + 1);
  type metadata accessor for ConditionalMetadata<ViewDescriptor>();
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for Optional();
  unint64_t result = ConditionalMetadata.childInfo<A>(ptr:emptyType:)(v4, a1, (unint64_t)&type metadata for EmptyView, v6, v7);
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in Optional<A>.makeChildViewList(metadata:view:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 48);
  uint64_t v6 = *(void *)(v2 + 56);
  int v7 = *(_DWORD *)(v2 + 64);
  uint64_t v8 = *(void *)(v2 + 72);
  long long v15 = *(_OWORD *)(v2 + 32);
  uint64_t v16 = v5;
  uint64_t v17 = v6;
  long long v9 = *(_OWORD *)(v8 + 48);
  v13[2] = *(_OWORD *)(v8 + 32);
  v13[3] = v9;
  v13[4] = *(_OWORD *)(v8 + 64);
  char v14 = *(unsigned char *)(v8 + 80);
  long long v10 = *(_OWORD *)(v8 + 16);
  v13[0] = *(_OWORD *)v8;
  v13[1] = v10;
  uint64_t v11 = type metadata accessor for Optional();
  return ConditionalMetadata<>.makeViewList<A>(ptr:view:inputs:)(a1, v7, (uint64_t *)v13, v11, a2);
}

uint64_t partial apply for closure #1 in Attribute.init(value:)(uint64_t a1)
{
  return closure #1 in Attribute.init(value:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in Attribute.init(value:)@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in closure #1 in Attribute.init(value:)(a1);
}

uint64_t closure #1 in closure #1 in Attribute.init(value:)@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for External();
  swift_getWitnessTable();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

uint64_t closure #1 in Attribute.init(value:)(uint64_t a1, uint64_t a2)
{
  v6[5] = *MEMORY[0x263EF8340];
  _OWORD v6[2] = a2;
  v6[3] = a1;
  uint64_t v2 = type metadata accessor for External();
  uint64_t v3 = type metadata accessor for Attribute();
  return _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)partial apply for closure #1 in closure #1 in Attribute.init(value:), (uint64_t)v6, v2, MEMORY[0x263F8E628], v3, MEMORY[0x263F8E658], v4);
}

BOOL protocol witness for DynamicPropertyBox.update(property:phase:) in conformance Namespace.Box(uint64_t *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  if (!*v1)
  {
    uint64_t v4 = AGMakeUniqueID();
    *uint64_t v1 = v4;
  }
  *a1 = v4;
  return v3 == 0;
}

uint64_t ObservedObjectPropertyBox.update(property:phase:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v7 = (char *)&v17 - v6;
  uint64_t v8 = a1[1];
  if (one-time initialization token for v6 != -1) {
    swift_once();
  }
  unsigned int v9 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if (static Semantics.forced < v9)
  {
LABEL_7:
    BOOL v10 = AssociatedTypeWitness != type metadata accessor for ObservableObjectPublisher();
    uint64_t v11 = v1[3];
    if (!v11) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  BOOL v10 = 0;
  uint64_t v11 = v1[3];
  if (!v11)
  {
LABEL_13:
    uint64_t v17 = *v1;
    swift_retain();
    dispatch thunk of ObservableObject.objectWillChange.getter();
    swift_getAssociatedConformanceWitness();
    uint64_t v12 = type metadata accessor for AttributeInvalidatingSubscriber();
    uint64_t WitnessTable = swift_getWitnessTable();
    swift_getWitnessTable();
    SubscriptionLifetime.subscribe<A>(subscriber:to:)((uint64_t)&v17, (uint64_t)v7, v12, WitnessTable);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
    swift_release();
    goto LABEL_14;
  }
LABEL_11:
  if (v8 != v11 || SubscriptionLifetime.isUninitialized.getter() || v10) {
    goto LABEL_13;
  }
LABEL_14:
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v2[3] = v8;
  BOOL v14 = AGGraphGetWeakValue() != 0;
  uint64_t result = v14 & v15;
  if (result == 1) {
    ++v2[2];
  }
  *a1 = v2[2];
  return result;
}

uint64_t destroy for ObservedObject()
{
  return swift_unknownObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for ObservedObject(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRetain();
  return a1;
}

void closure #1 in SafeAreaInsets.adjust(_:regions:to:)partial apply(uint64_t a1)
{
  closure #1 in SafeAreaInsets.adjust(_:regions:to:)(a1, *(void *)(v1 + 16), *(double *)(v1 + 48), *(double *)(v1 + 56), *(double *)(v1 + 64), *(double *)(v1 + 72), *(double *)(v1 + 80), *(double *)(v1 + 88), *(double *)(v1 + 96), *(double *)(v1 + 104), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(unsigned char **)(v1 + 112));
}

uint64_t destroy for EquatableOptionalObject()
{
  return swift_unknownObjectRelease();
}

uint64_t closure #1 in compareValues<A>(_:_:options:)partial apply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return partial apply for closure #1 in compareValues<A>(_:_:options:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t protocol witness for ViewTransformElement.forEach(inverted:stop:_:) in conformance TranslationElement(unsigned int a1, uint64_t a2, void (*a3)(_OWORD *))
{
  int32x2_t v4 = vdup_n_s32(a1);
  v5.i64[0] = v4.u32[0];
  v5.i64[1] = v4.u32[1];
  v7[0] = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v5, 0x3FuLL)), (int8x16_t)vnegq_f64(*v3), *(int8x16_t *)v3);
  char v8 = 0;
  a3(v7);
  return outlined destroy of ViewTransform.Item((uint64_t)v7);
}

uint64_t initializeBufferWithCopyOfBuffer for StateObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of StateObject<A>.Storage<A>(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t outlined copy of StateObject<A>.Storage<A>(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_unknownObjectRetain();
  }
  else {
    return swift_retain();
  }
}

uint64_t destroy for StateObject.Storage(uint64_t a1)
{
  return outlined consume of StateObject<A>.Storage<A>(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

void *initializeBufferWithCopyOfBuffer for EnvironmentObject(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t partial apply for closure #1 in Attribute.init(type:)@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init(type:)(a1);
}

uint64_t closure #1 in Attribute.init(type:)@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for External();
  swift_getWitnessTable();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v9 = type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  return a3(a1, v9, v8, v7, a2);
}

uint64_t Text.Measurements.Box.update(property:phase:)(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  swift_retain();
  swift_release();
  *a1 = v3;
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v5 = Value[1];
  v8[0] = *Value;
  v8[1] = v5;
  swift_retain();
  swift_retain();
  char v6 = TextSizeCache.update(environment:)(v8);
  swift_release();
  swift_release();
  return v6 & 1;
}

uint64_t TextSizeCache.update(environment:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  swift_retain();
  swift_retain();
  char v4 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v3);
  swift_release();
  uint64_t v23 = v3;
  swift_release();
  char v22 = v4;
  uint64_t v24 = v1;
  if (v4)
  {
    swift_retain();
    PropertyList.Tracker.reset()();
    swift_release();
    swift_beginAccess();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *(void *)(v1 + 32);
    if (isUniquelyReferenced_nonNull_native)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v6 + 16));
    }
    else
    {
      *(void *)(v1 + 32) = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v6 + 24) >> 1);
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    goto LABEL_20;
  }
  uint64_t v7 = v1 + 32;
  swift_beginAccess();
  uint64_t v8 = *(void *)(*(void *)(v2 + 32) + 16);
  if (!v8)
  {
LABEL_20:
    *(void *)(v24 + 16) = v23;
    swift_retain();
    swift_release();
    return v22 & 1;
  }
  uint64_t v9 = -v8;
  uint64_t v10 = 88 * v8 - 56;
  while (v8 <= *(void *)(*(void *)v7 + 16))
  {
    if (*(unsigned char *)(*(void *)v7 + v10 + 80))
    {
      swift_beginAccess();
      uint64_t v12 = *(void **)v7;
      char v13 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v7 = v12;
      if ((v13 & 1) == 0)
      {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew()(v12);
        *(void *)uint64_t v7 = v12;
      }
      if (v8 > v12[2]) {
        goto LABEL_22;
      }
      *((unsigned char *)v12 + v10 + 80) = 0;
      swift_endAccess();
    }
    else
    {
      swift_beginAccess();
      BOOL v14 = *(void **)v7;
      char v15 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v7 = v14;
      if ((v15 & 1) == 0)
      {
        BOOL v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
        *(void *)uint64_t v7 = v14;
      }
      uint64_t v16 = v14[2];
      if (v8 > v16) {
        goto LABEL_23;
      }
      if (v9 + v16 < 0) {
        goto LABEL_24;
      }
      uint64_t v17 = v16 - 1;
      char v18 = *((unsigned char *)v14 + v10 + 16);
      uint64_t v20 = *(void *)((char *)v14 + v10);
      uint64_t v19 = *(void *)((char *)v14 + v10 + 8);
      memmove((char *)v14 + v10, (char *)v14 + v10 + 88, 88 * (v9 + v16));
      v14[2] = v17;
      *(void *)uint64_t v7 = v14;
      swift_endAccess();
      outlined consume of Text.Storage(v20, v19, v18);
      swift_bridgeObjectRelease();
    }
    v10 -= 88;
    --v8;
    if (__CFADD__(v9++, 1)) {
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for PathDrawingStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t partial apply for closure #1 in GeometryProxy.asCurrent<A>(do:)(uint64_t a1, void *a2)
{
  uint64_t v5 = *(uint64_t (**)(void *))(v2 + 24);
  uint64_t v6 = _setThreadGeometryProxyData();
  uint64_t result = v5(v6);
  if (v3) {
    *a2 = v3;
  }
  return result;
}

uint64_t type metadata accessor for WeakUncheckedSendable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for ViewTransformElement.forEach(inverted:stop:_:) in conformance AffineTransformElement(char a1, uint64_t a2, void (*a3)(_OWORD *))
{
  char v4 = *(unsigned char *)(v3 + 48) ^ a1;
  long long v5 = *(_OWORD *)(v3 + 16);
  v7[0] = *(_OWORD *)v3;
  v7[1] = v5;
  _OWORD v7[2] = *(_OWORD *)(v3 + 32);
  char v8 = v4 & 1;
  char v9 = 1;
  a3(v7);
  return outlined destroy of ViewTransform.Item((uint64_t)v7);
}

void type metadata accessor for (Spacing.Key, Spacing.Value)()
{
  if (!lazy cache variable for type metadata for (Spacing.Key, Spacing.Value))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Spacing.Key, Spacing.Value));
    }
  }
}

CGPoint __swiftcall _Placement.frameOrigin(childSize:)(CGSize childSize)
{
  double v2 = v1[6] - v1[4] * childSize.width;
  double v3 = v1[7] - v1[5] * childSize.height;
  result.CGFloat y = v3;
  result.double x = v2;
  return result;
}

void ViewGraphRenderContext.contentsScale.setter(double a1)
{
  *uint64_t v1 = a1;
}

BOOL static Namespace.ID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance StaticBody<A, B>(uint64_t *a1)
{
  return static StaticBody.flags.getter(a1[2], a1[3], a1[4], a1[5]);
}

uint64_t destroy for Text.Modifier(uint64_t a1)
{
  return outlined consume of Text.Modifier(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t getEnumTagSinglePayload for _ViewListOutputs(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t type metadata instantiation function for ShapeStyledDisplayList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 72);
}

ValueMetadata *type metadata accessor for _AppearanceActionModifier()
{
  return &type metadata for _AppearanceActionModifier;
}

void partial apply for closure #1 in static EnumVTable.update(elt:property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in static EnumVTable.update(elt:property:phase:)(a1, a2, a3, *(uint64_t **)(v3 + 16), *(unsigned char **)(v3 + 24), *(_DWORD *)(v3 + 32));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EnvironmentFetch<A>(uint64_t a1, uint64_t a2)
{
  return static EnvironmentFetch.== infix(_:_:)(*(_DWORD *)a1, *(void *)(a1 + 8), *(_DWORD *)a2, *(void *)(a2 + 8));
}

ValueMetadata *type metadata accessor for Rectangle()
{
  return &type metadata for Rectangle;
}

uint64_t key path getter for EnvironmentValues.layoutDirection : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  swift_retain();
  uint64_t v4 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v4, v3, &v6);
  swift_release();
  uint64_t result = swift_release();
  *a2 = v6;
  return result;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance _ShapeStyle_Name(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

uint64_t getEnumTag for Environment.Content(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = 8;
  if (*(void *)(v2 + 64) > 8uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 2;
        LODWORD(v4) = v7 + 2;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

uint64_t getEnumTagSinglePayload for EventPhase(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

__n128 __swift_memcpy17_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t LayoutEngine.explicitAlignment(_:at:)()
{
  return 0;
}

uint64_t _ViewInputs.transaction.getter()
{
  return *(unsigned int *)(v0 + 28);
}

ValueMetadata *type metadata accessor for Font()
{
  return &type metadata for Font;
}

uint64_t getEnumTag for _ConditionalContent.Storage(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

BOOL specialized static DisplayList.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a1 + 16);
  if (v4 != *(void *)(*a2 + 16)) {
    return 0;
  }
  if (v4) {
    BOOL v5 = v2 == v3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    int v6 = (_DWORD *)(v3 + 100);
    for (uint64_t i = (_DWORD *)(v2 + 100); *i == *v6 && *(void *)(i - 9) == *(void *)(v6 - 9); i += 18)
    {
      v6 += 18;
      if (!--v4) {
        return *((unsigned __int16 *)a1 + 4) == *((unsigned __int16 *)a2 + 4)
      }
            && *((unsigned __int8 *)a1 + 10) == *((unsigned __int8 *)a2 + 10);
    }
    return 0;
  }
  return *((unsigned __int16 *)a1 + 4) == *((unsigned __int16 *)a2 + 4)
      && *((unsigned __int8 *)a1 + 10) == *((unsigned __int8 *)a2 + 10);
}

double static AccessibilityProperties.TraitsKey.defaultValue.getter@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static AccessibilityProperties.TraitsKey.defaultValue;
  *a1 = static AccessibilityProperties.TraitsKey.defaultValue;
  return result;
}

ValueMetadata *type metadata accessor for DynamicTypeSize()
{
  return &type metadata for DynamicTypeSize;
}

uint64_t static CoreTesting.needsRender.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static CoreTesting.needsRender = a1;
  return result;
}

uint64_t static Alignment.center.getter()
{
  return static Alignment.center.getter(&one-time initialization token for center, (uint64_t)&static Alignment.center);
}

BOOL specialized static ResolvedGradient.ColorSpace.InterpolatableColor.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

double ViewDimensions.height.getter()
{
  return *(double *)(v0 + 24);
}

uint64_t PreferenceKeys.endIndex.getter()
{
  return *(void *)(*(void *)v0 + 16);
}

uint64_t associated type witness table accessor for TimelineSchedule.Entries : Sequence in ExplicitTimelineSchedule<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

void destructiveInjectEnumTag for Environment.Content(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    size_t v4 = 8;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t static AGAttributeFlags.transactional.getter()
{
  return 1;
}

double EdgeInsets.vertical.getter(double a1, double a2, double a3)
{
  return a1 + a3;
}

uint64_t storeEnumTagSinglePayload for ScrollGeometry(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 112) = v3;
  return result;
}

double ViewDimensions.width.getter()
{
  return *(double *)(v0 + 16);
}

uint64_t partial apply for closure #1 in GraphHost.init(data:)()
{
  return closure #1 in GraphHost.init(data:)();
}

uint64_t static TypesettingLanguage.automatic.getter@<X0>(uint64_t a1@<X8>)
{
  return static TypesettingLanguage.automatic.getter(&one-time initialization token for automatic, (uint64_t)static TypesettingLanguage.automatic, a1);
}

BOOL PreferencesInputs.contains<A>(_:includeHostPreferences:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(*v4 + 16);
  if (v6)
  {
    int v7 = (void *)(v5 + 32);
    uint64_t v8 = *(void *)(*v4 + 16);
    while (*v7 != a3)
    {
      v7 += 2;
      if (!--v8) {
        goto LABEL_5;
      }
    }
    return 1;
  }
  else
  {
LABEL_5:
    if (a2)
    {
      char v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
      BOOL result = 0;
      if (v6 && (v9 & 1) != 0)
      {
        uint64_t v11 = (ValueMetadata **)(v5 + 32);
        uint64_t v12 = v6 - 1;
        do
        {
          char v13 = *v11;
          v11 += 2;
          BOOL result = v13 == &type metadata for HostPreferencesKey;
        }
        while (v13 != &type metadata for HostPreferencesKey && v12-- != 0);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance LayoutProxyCollection(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)(v1 + 8) + 16);
}

void *static CoordinateSpace.scrollView.getter@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (*result != -1) {
    BOOL result = (void *)swift_once();
  }
  *(void *)a3 = *a2;
  *(unsigned char *)(a3 + 40) = 1;
  return result;
}

uint64_t type metadata accessor for Bindable()
{
  return __swift_instantiateGenericMetadata();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef();
}

{
  Hasher.init(_seed:)();
  swift_getWitnessTable();
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

ValueMetadata *type metadata accessor for GraphicsContext.Shading()
{
  return &type metadata for GraphicsContext.Shading;
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_release();
  if (*(unsigned char *)(v0 + 89))
  {
    if (*(unsigned char *)(v0 + 169)) {
      goto LABEL_3;
    }
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
    if (*(unsigned char *)(v0 + 169)) {
      goto LABEL_3;
    }
  }
  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
LABEL_3:

  return swift_deallocObject();
}

uint64_t objectdestroyTm_0()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_1()
{
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(*(void *)(v0 + 24));
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(*(void *)(v0 + 48));

  return swift_deallocObject();
}

uint64_t objectdestroyTm_2()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_3()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_4()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_5()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t objectdestroyTm_6()
{
  uint64_t v1 = *(void *)(type metadata accessor for ResolvableStringResolutionContext() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);

  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_7()
{
  uint64_t v1 = (int *)(type metadata accessor for SystemFormatStyle.DateOffset() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  uint64_t v3 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  uint64_t v4 = v2 + v1[9];
  uint64_t v5 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = v2 + v1[11];
  uint64_t v7 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v2 + v1[12];
  uint64_t v9 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);

  return swift_deallocObject();
}

uint64_t objectdestroyTm_8()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_9(uint64_t (*a1)(void, uint64_t *))
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v10 = v2;
  long long v9 = *(_OWORD *)(v1 + 24);
  long long v11 = v9;
  uint64_t v12 = v3;
  uint64_t v4 = a1(0, &v10);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = v1 + v5;
  type metadata accessor for TimeDataFormatting.EntriesState();
  if (swift_getEnumCaseMultiPayload() <= 1)
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v1 + v5, v7);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v6 + *(int *)(v4 + 52), v2);
  (*(void (**)(uint64_t))(*(void *)(v9 - 8) + 8))(v6 + *(int *)(v4 + 56));
  return swift_deallocObject();
}

uint64_t objectdestroyTm_10()
{
  return swift_deallocObject();
}

uint64_t objectdestroyTm_11()
{
  uint64_t v1 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t objectdestroyTm_12()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = (int *)(type metadata accessor for AppearanceAnimationView.NormalBody() - 8);
  uint64_t v4 = v0
     + ((*(unsigned __int8 *)(*(void *)v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v3 + 80));
  swift_release();
  uint64_t v5 = v4 + v3[15];
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v5, v2);
  uint64_t v6 = type metadata accessor for AppearanceAnimationView();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
  v7(v5 + *(int *)(v6 + 52), v1);
  v7(v5 + *(int *)(v6 + 56), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for PlatformNamedImageRepresentableContext(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for ContentSizeCategory()
{
  return &type metadata for ContentSizeCategory;
}

uint64_t (*IndirectAttributeMap.map.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t static StaticBody.flags.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a2, a4);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ResetDeltaModifier.ChildPhase()
{
  return 8;
}

uint64_t destroy for Text.ResolvedProperties.Transition(uint64_t a1)
{
  return outlined consume of ContentTransition.Storage(*(void *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32), *(unsigned char *)(a1 + 13));
}

unint64_t partial apply for closure #1 in MultiPreferenceCombinerVisitor.visit<A>(key:)@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = PreferencesOutputs.subscript.getter(*(void *)(v1 + 16), *(void *)(v1 + 16), *(void *)(v1 + 24));
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t specialized static DynamicContainer.makeContainer<A>(adaptor:inputs:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  uint64_t v6 = a4;
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v51 = a1;
  uint64_t v81 = *MEMORY[0x263EF8340];
  uint64_t v47 = *(void *)a5;
  int v46 = *(_DWORD *)(a5 + 8);
  uint64_t v45 = *(void *)(a5 + 16);
  long long v9 = *(_OWORD *)(a5 + 24);
  long long v49 = *(_OWORD *)(a5 + 40);
  long long v50 = v9;
  long long v48 = *(_OWORD *)(a5 + 56);
  uint64_t v10 = *(void *)(a5 + 72);
  uint64_t v11 = MEMORY[0x263F8EE78];
  int v44 = *(_DWORD *)(a5 + 80);
  uint64_t v54 = MEMORY[0x263F8EE78];
  unsigned int v12 = *MEMORY[0x263F288F8];
  unsigned int v55 = 0;
  unsigned int v56 = v12;
  uint64_t v13 = *(void *)(a5 + 48);
  uint64_t v57 = v13;
  int v58 = *(_DWORD *)(a5 + 56);
  if (*(void *)(v13 + 16))
  {
    uint64_t v40 = a2;
    uint64_t v41 = a3;
    uint64_t v42 = a4;
    uint64_t v43 = a5;
    outlined retain of LinearGradient((uint64_t)&v57);
    unint64_t v14 = 0;
    unint64_t v15 = *(void *)(v13 + 16);
    uint64_t v16 = (uint64_t *)(v13 + 40);
    uint64_t v52 = v13;
    while (v14 < v15)
    {
      ++v14;
      uint64_t v17 = (ValueMetadata *)*(v16 - 1);
      uint64_t v18 = *v16;
      uint64_t v19 = DynamicPreferenceCombiner.init()();
      double v53 = &v40;
      LODWORD(v71) = v19;
      MEMORY[0x270FA5388](v19);
      *(&v40 - 4) = swift_getAssociatedTypeWitness();
      uint64_t v20 = type metadata accessor for DynamicPreferenceCombiner();
      *(&v40 - 3) = v20;
      *(&v40 - 2) = swift_getWitnessTable();
      uint64_t v21 = type metadata accessor for Attribute();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v71, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)(&v40 - 6), v20, MEMORY[0x263F8E628], v21, MEMORY[0x263F8E658], v22);
      unint64_t v23 = v59;
      swift_beginAccess();
      LOBYTE(v59) = 0;
      _ViewOutputs.subscript.setter(v23, v17, (uint64_t)v17, v18);
      uint64_t v24 = v52;
      swift_endAccess();
      unint64_t v15 = *(void *)(v24 + 16);
      v16 += 2;
      if (v14 == v15)
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = v42;
        uint64_t v5 = v43;
        uint64_t v11 = MEMORY[0x263F8EE78];
        uint64_t v8 = v40;
        uint64_t v7 = v41;
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
  }
LABEL_6:
  type metadata accessor for [ViewGeometry](0, (unint64_t *)&lazy cache variable for type metadata for External<()>, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  int v25 = Attribute.init<A>(body:value:flags:update:)();
  swift_beginAccess();
  uint64_t v26 = v54;
  unsigned int v27 = v55;
  unsigned int v28 = v56;
  id v29 = (id)AGSubgraphGetCurrent();
  if (!v29) {
    goto LABEL_13;
  }
  LODWORD(v71) = v25;
  *((void *)&v71 + 1) = v8;
  *(void *)&long long v72 = v7;
  *((void *)&v72 + 1) = v6;
  *(void *)&long long v73 = v47;
  DWORD2(v73) = v46;
  *(void *)&v74[0] = v45;
  *(_OWORD *)((char *)v74 + 8) = v50;
  *(_OWORD *)((char *)&v74[1] + 8) = v49;
  *(_OWORD *)((char *)&v74[2] + 8) = v48;
  *((void *)&v74[3] + 1) = v10;
  LODWORD(v75) = v44;
  *((void *)&v75 + 1) = v26;
  *(void *)&long long v76 = __PAIR64__(v28, v27);
  *((void *)&v76 + 1) = v29;
  *(void *)&long long v77 = v11;
  *((void *)&v77 + 1) = MEMORY[0x263F8EE80];
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  *(void *)&v80[0] = 0;
  BYTE8(v80[0]) = 1;
  *(_OWORD *)((char *)v80 + 12) = xmmword_2461E1C60;
  BYTE12(v80[1]) = 0;
  long long v69 = 0u;
  v70[0] = v80[0];
  *(_OWORD *)((char *)v70 + 13) = *(_OWORD *)((char *)v80 + 13);
  long long v65 = v74[3];
  long long v66 = v75;
  long long v67 = v76;
  long long v68 = v77;
  long long v61 = v73;
  long long v62 = v74[0];
  long long v63 = v74[1];
  long long v64 = v74[2];
  long long v59 = v71;
  long long v60 = v72;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  swift_retain();
  outlined retain of _ViewInputs(v5);
  type metadata accessor for _TraitWritingModifier<ZIndexTraitKey>(0, &lazy cache variable for type metadata for DynamicContainerInfo<DynamicLayoutViewAdaptor>, (uint64_t)&type metadata for DynamicLayoutViewAdaptor, (uint64_t)&protocol witness table for DynamicLayoutViewAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DynamicContainerInfo);
  lazy protocol witness table accessor for type DynamicContainerInfo<DynamicLayoutViewAdaptor> and conformance DynamicContainerInfo<A>();
  swift_bridgeObjectRetain();
  uint64_t v30 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of DynamicContainerInfo<DynamicLayoutViewAdaptor>((uint64_t)&v71);
  AGGraphAddInput();
  AGGraphSetFlags();
  uint64_t v31 = *(void *)(v26 + 16);
  if (v31)
  {
    uint64_t v32 = swift_bridgeObjectRetain();
    uint64_t v33 = v26 + 48;
    do
    {
      v33 += 24;
      MEMORY[0x270FA5388](v32);
      *(&v40 - 4) = v34;
      *(&v40 - 3) = v35;
      *((_DWORD *)&v40 - 4) = v30;
      uint64_t v36 = type metadata accessor for DynamicPreferenceCombiner();
      MEMORY[0x270FA5388](v36);
      *(&v40 - 4) = v37;
      *(&v40 - 3) = (uint64_t)_s7SwiftUI16DynamicContainerV04makeD07adaptor6inputs14AttributeGraph0H0VyAC4InfoVG_AA12_ViewOutputsVtx_AA01_K6InputsVtAA0cD7AdaptorRzlFZyAA13PreferenceKey_pXp_So11AGAttributeatXEfU_7projectL_3keyyqd__m_tAaQRzAaRRd__r__lFyAA0cO8Combiner33_E7D4CD2D59FB8C77D6C7E9C534464C17LLVyqd__GzXEfU_TA_0;
      *(&v40 - 2) = (uint64_t)(&v40 - 6);
      uint64_t v32 = AGGraphMutateAttribute();
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
  }
  CGFloat v38 = v51;
  *uint64_t v51 = v26;
  *((_DWORD *)v38 + 2) = v27;
  *((_DWORD *)v38 + 3) = v28;
  return v30;
}

uint64_t type metadata accessor for DynamicPreferenceCombiner()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _ViewOutputs.subscript.setter(unint64_t a1, ValueMetadata *a2, uint64_t a3, uint64_t a4)
{
  return PreferencesOutputs.subscript.setter(a1 | ((HIDWORD(a1) & 1) << 32), a2, a3, a4);
}

uint64_t DynamicPreferenceCombiner.init()()
{
  return *MEMORY[0x263F288F8];
}

uint64_t closure #1 in ForEachState.applyNodes(from:style:list:transform:to:)(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t **, unint64_t *, uint64_t), uint64_t a7)
{
  double v84 = a6;
  uint64_t v85 = a7;
  uint64_t v87 = a1;
  long long v9 = (void *)*a3;
  uint64_t v10 = (void *)*a3;
  uint64_t v82 = a5;
  char v83 = v10;
  uint64_t v11 = v9[15];
  v77.n128_u64[0] = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](a1);
  long long v76 = (char *)&v73 - v12;
  unint64_t v86 = *v13;
  uint64_t v15 = v14 + *(void *)(*(void *)v14 + 160);
  swift_beginAccess();
  unint64_t v16 = v9[14];
  uint64_t v17 = v9[16];
  uint64_t v18 = v9[17];
  uint64_t v19 = v9[18];
  uint64_t v88 = v11;
  unint64_t v89 = v16;
  uint64_t v90 = v11;
  uint64_t v91 = v17;
  uint64_t v92 = v18;
  uint64_t v93 = v19;
  uint64_t v20 = type metadata accessor for ForEach();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v15, 1, v20);
  if (result == 1)
  {
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  unint64_t v80 = *(void *)(v15 + *(int *)(v20 + 64));
  uint64_t v81 = v19;
  unint64_t v89 = v16;
  uint64_t v90 = v88;
  uint64_t v91 = v17;
  uint64_t v92 = v18;
  uint64_t v93 = v19;
  type metadata accessor for ForEach.IDGenerator();
  uint64_t result = outlined init with copy of _ViewListOutputs.Views((uint64_t)a3 + *(void *)(*a3 + 176), (uint64_t)v113);
  uint64_t v78 = v18;
  uint64_t v79 = v17;
  if (v114)
  {
    if (*(unsigned char *)(a4 + 124) != 1)
    {
      unint64_t v22 = v16;
      uint64_t v23 = LODWORD(v113[0]);
      uint64_t v24 = *((void *)&v113[0] + 1);
      type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
      Inputuint64_t Value = AGGraphGetInputValue();
      outlined init with copy of AnyTrackedValue(InputValue, (uint64_t)v100);
      uint64_t v26 = v83;
      if (v24)
      {
        unsigned int v27 = *(void (**)(void *))(*(void *)v24 + 80);
        swift_retain();
        v27(v100);
        swift_release();
      }
      uint64_t v28 = a4 + *(void *)(*(void *)a4 + 168);
      BOOL v29 = (*(unsigned char *)(v28 + 9) & 1) == 0 && (*(unsigned char *)(v28 + 8) & 1) == 0 && *(void *)v28 == 1;
      uint64_t v45 = v81;
      unint64_t v107 = a3;
      char v108 = 1;
      BOOL v109 = v29;
      BOOL v110 = v80 == 0;
      uint64_t v46 = v26[19];
      swift_retain();
      unint64_t v89 = v22;
      uint64_t v90 = v88;
      uint64_t v91 = v79;
      uint64_t v92 = v78;
      uint64_t v93 = v45;
      uint64_t v94 = v46;
      uint64_t v47 = type metadata accessor for ForEachState.Transform();
      uint64_t v48 = v82;
      _ViewList_SublistTransform.push<A>(_:)((uint64_t)&v107, v47, (uint64_t)&protocol witness table for ForEachState<A, B, C>.Transform);
      swift_release();
      uint64_t v49 = (uint64_t)v101;
      uint64_t v50 = v102[0];
      __swift_project_boxed_opaque_existential_1(v100, (uint64_t)v101);
      unint64_t v89 = v86;
      uint64_t v51 = *(uint64_t (**)(void *, unint64_t *, uint64_t, uint64_t, uint64_t (*)(void, void, void, void), uint64_t, uint64_t, uint64_t))(v50 + 48);
      LOBYTE(v107) = 0;
      char v53 = v51(v87, &v89, v23, v48, (uint64_t (*)(void, void, void, void))v84, v85, v49, v50);
      _ViewList_SublistTransform.pop()();
      swift_release();
      uint64_t v52 = (uint64_t **)v100;
LABEL_50:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
      return v53 & 1;
    }
    goto LABEL_55;
  }
  unint64_t v75 = v16;
  outlined init with take of ScrollStateRequest(v113, (uint64_t)&v107);
  uint64_t v31 = v111;
  unint64_t v30 = v112;
  uint64_t v32 = __swift_project_boxed_opaque_existential_1(&v107, v111);
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(v30 + 8))(v31, v30);
  uint64_t v33 = result;
  uint64_t v34 = result;
  if (v86)
  {
    uint64_t v34 = result * (v86 >> 1);
    int64_t v35 = (unsigned __int128)(result * (__int128)(v86 >> 1)) >> 64;
    if (v35 != v34 >> 63)
    {
      __break(1u);
LABEL_53:
      int64_t v73 = v35;
      long long v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)((unint64_t)v34 > 1), v35, 1, v32);
      int64_t v35 = v73;
      uint64_t v32 = v72;
LABEL_41:
      v32[2] = v35;
      long long v62 = &v32[3 * v30];
      long long v63 = v76;
      v62[4] = v19;
      v62[5] = v63;
      *((_DWORD *)v62 + 12) = v77.n128_u32[0];
      *((unsigned char *)v62 + 52) = v74;
      swift_release();
      uint64_t v106 = v32;
      __n128 v77 = 0u;
      goto LABEL_42;
    }
  }
  BOOL v36 = __OFSUB__(*v87, v34);
  uint64_t v37 = *v87 - v34;
  if (v37 < 0 == v36)
  {
    *uint64_t v87 = v37;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
    char v53 = 1;
    return v53 & 1;
  }
  uint64_t v17 = MEMORY[0x263F8EE78];
  unint64_t v105 = 0;
  uint64_t v106 = (void *)MEMORY[0x263F8EE78];
  uint64_t v38 = *a3;
  uint64_t v39 = *a3;
  unint64_t v16 = v80;
  if (v80)
  {
    uint64_t v41 = (uint64_t)v76;
    unint64_t v40 = v77.n128_u64[0];
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v77.n128_u64[0] + 16))(v76, (uint64_t)a3 + *(void *)(v38 + 160), v88);
    uint64_t v18 = v81;
    if (*(unsigned char *)(a4 + 124))
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    uint64_t v42 = a4 + *(void *)(*(void *)a4 + 168);
    char v43 = (*(unsigned char *)(v42 + 9) & 1) == 0 && (*(unsigned char *)(v42 + 8) & 1) == 0 && *(void *)v42 == 1;
    uint64_t v58 = v88;
    _ViewList_ID.bind<A>(explicitID:owner:isUnary:reuseID:)(v41, *(_DWORD *)(a4 + 120), v43, *(uint64_t *)((char *)a3 + *(void *)(*a3 + 168)));
    __n128 v59 = ((__n128 (*)(uint64_t, uint64_t))*(void *)(v40 + 8))(v41, v58);
    v59.n128_u64[0] = v105;
    __n128 v77 = v59;
    uint64_t v32 = v106;
    uint64_t v17 = MEMORY[0x263F8EE78];
LABEL_42:
    uint64_t v64 = *v87;
    outlined init with copy of AnyTrackedValue((uint64_t)&v107, (uint64_t)v102);
    BOOL v65 = 0;
    v100[0] = v64;
    v100[1] = v33;
    v100[2] = v77.n128_u64[0];
    uint64_t v101 = v32;
    v102[5] = v17;
    int v103 = 0;
    char v104 = 1;
    uint64_t v66 = a4 + *(void *)(*(void *)a4 + 168);
    if ((*(unsigned char *)(v66 + 9) & 1) == 0) {
      BOOL v65 = (*(unsigned char *)(v66 + 8) & 1) == 0 && *(void *)v66 == 1;
    }
    uint64_t v96 = a3;
    char v97 = 0;
    BOOL v98 = v65;
    BOOL v99 = v16 == 0;
    uint64_t v68 = v83[19];
    swift_retain();
    unint64_t v89 = v75;
    uint64_t v90 = v88;
    uint64_t v91 = v79;
    uint64_t v92 = v78;
    uint64_t v93 = v18;
    uint64_t v94 = v68;
    uint64_t v69 = type metadata accessor for ForEachState.Transform();
    uint64_t v70 = v82;
    _ViewList_SublistTransform.push<A>(_:)((uint64_t)&v96, v69, (uint64_t)&protocol witness table for ForEachState<A, B, C>.Transform);
    swift_release();
    uint64_t v96 = (uint64_t *)v86;
    outlined init with copy of _ViewList_Sublist((uint64_t)v100, (uint64_t)&v89);
    char v95 = 1;
    long long v71 = v87;
    char v53 = v84(v87, &v96, &v89, v70);
    outlined destroy of _ViewList_Node((uint64_t)&v89);
    _ViewList_SublistTransform.pop()();
    *long long v71 = 0;
    outlined destroy of _ViewList_Sublist((uint64_t)v100);
    uint64_t v52 = &v107;
    goto LABEL_50;
  }
  uint64_t v18 = v81;
  if ((*(unsigned char *)(a4 + 124) & 1) == 0)
  {
    uint64_t v54 = *(uint64_t *)((char *)a3 + *(void *)(v38 + 200));
    unsigned __int32 v55 = *(_DWORD *)(a4 + 120);
    uint64_t v56 = a4 + *(void *)(*(void *)a4 + 168);
    if (*(unsigned char *)(v56 + 9))
    {
      BOOL v74 = 0;
    }
    else
    {
      BOOL v61 = (*(unsigned char *)(v56 + 8) & 1) == 0 && *(void *)v56 == 1;
      BOOL v74 = v61;
    }
    long long v76 = *(char **)((char *)a3 + *(void *)(v39 + 168));
    type metadata accessor for _AnyHashableBox<Pair<Int, AGAttribute>>();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v54;
    v77.n128_u32[0] = v55;
    *(_DWORD *)(v19 + 24) = v55;
    swift_retain();
    uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v30 = v32[2];
    uint64_t v34 = v32[3];
    int64_t v35 = v30 + 1;
    if (v30 < (unint64_t)v34 >> 1) {
      goto LABEL_41;
    }
    goto LABEL_53;
  }
LABEL_57:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ScrollStateRequest(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t DynamicViewList.WrappedList.applyNodes(from:style:list:transform:to:)(uint64_t a1, uint64_t *a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v13 = *a2;
  uint64_t v18 = v6[5];
  uint64_t v14 = type metadata accessor for DynamicViewList.Transform();
  swift_retain();
  _ViewList_SublistTransform.push<A>(_:)((uint64_t)&v18, v14, (uint64_t)&protocol witness table for DynamicViewList<A>.Transform);
  swift_release();
  uint64_t v15 = v7[3];
  uint64_t v16 = v7[4];
  __swift_project_boxed_opaque_existential_1(v7, v15);
  uint64_t v18 = v13;
  LOBYTE(v14) = (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 48))(a1, &v18, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6, v15, v16);
  $defer #1 () in SubgraphList.applyNodes(from:style:list:transform:to:)(a4);
  return v14 & 1;
}

uint64_t ModifiedViewList.applyNodes(from:style:list:transform:to:)(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = (void *)v6;
  uint64_t v12 = *a2;
  uint64_t v13 = *(void *)(v6 + 48);
  int v14 = *(_DWORD *)(v6 + 56);
  uint64_t v15 = *(void *)(v6 + 64);
  uint64_t v16 = *(void *)(v6 + 88);
  v22[0] = *(void *)(v6 + 40);
  v22[1] = v13;
  int v23 = v14;
  uint64_t v24 = v15;
  long long v25 = *(_OWORD *)(v6 + 72);
  uint64_t v26 = v16;
  uint64_t v17 = type metadata accessor for ModifiedViewList.Transform();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewList_SublistTransform.push<A>(_:)((uint64_t)v22, v17, (uint64_t)&protocol witness table for ModifiedViewList<A>.Transform);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v18 = v7[3];
  uint64_t v19 = v7[4];
  __swift_project_boxed_opaque_existential_1(v7, v18);
  v22[0] = v12;
  LOBYTE(v12) = (*(uint64_t (**)(uint64_t, void *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 48))(a1, v22, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6, v18, v19);
  _ViewList_SublistTransform.pop()();
  return v12 & 1;
}

uint64_t _ViewList_SublistTransform.push<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  long long v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v20 - v12;
  int v14 = *(void (**)(char *, double))(v7 + 16);
  v14((char *)&v20 - v12, v11);
  uint64_t v15 = (void *)*v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v4 = (uint64_t)v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    *uint64_t v4 = (uint64_t)v15;
  }
  unint64_t v18 = v15[2];
  unint64_t v17 = v15[3];
  if (v18 >= v17 >> 1) {
    *uint64_t v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v15);
  }
  ((void (*)(char *, char *, uint64_t))v14)(v9, v13, a2);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, (uint64_t)v9, v4, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, a2);
}

uint64_t initializeWithCopy for ModifiedViewList.Transform(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ModifiedViewList.Transform()
{
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of ScrollStateRequest(&v12, v10 + 40 * a1 + 32);
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

Swift::Void __swiftcall _ViewList_SublistTransform.pop()()
{
  uint64_t v1 = *(void **)v0;
  if (!*(void *)(*(void *)v0 + 16))
  {
    __break(1u);
LABEL_6:
    uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    uint64_t v2 = v1[2];
    if (v2) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v2 = v1[2];
  if (v2)
  {
LABEL_4:
    uint64_t v3 = v2 - 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v1[5 * v2 - 1]);
    v1[2] = v3;
    *(void *)uint64_t v0 = v1;
    return;
  }
LABEL_7:
  __break(1u);
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t type metadata accessor for ModifiedViewList.Transform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance ModifiedViewList<A>(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return ModifiedViewList.applyNodes(from:style:list:transform:to:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6);
}

uint64_t initializeBufferWithCopyOfBuffer for ForEachState.Transform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  swift_retain();
  return a1;
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance BaseViewList(void *a1, unint64_t *a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void *, unint64_t *, unsigned char *, uint64_t))
{
  return BaseViewList.applyNodes(from:style:list:transform:to:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5);
}

uint64_t BaseViewList.applyNodes(from:style:list:transform:to:)(void *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void *, unint64_t *, unsigned char *, uint64_t))
{
  uint64_t v6 = (uint64_t)v5;
  unint64_t v11 = *a2;
  uint64_t v12 = v5[3];
  uint64_t v13 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v12);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  uint64_t v15 = result;
  uint64_t v16 = result;
  if (v11)
  {
    uint64_t v16 = result * (v11 >> 1);
    if ((unsigned __int128)(result * (__int128)(v11 >> 1)) >> 64 != v16 >> 63)
    {
      __break(1u);
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
  }
  uint64_t v17 = *a1;
  BOOL v18 = __OFSUB__(*a1, v16);
  uint64_t v19 = *a1 - v16;
  if (v19 < 0 == v18)
  {
    *a1 = v19;
    char v22 = 1;
    return v22 & 1;
  }
  uint64_t v20 = *(void *)(v6 + 40);
  if (v20 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_10;
  }
  if (v20 <= 0x7FFFFFFF)
  {
    outlined init with copy of AnyTrackedValue(v6, (uint64_t)v29);
    uint64_t v21 = *(void *)(v6 + 64);
    v25[0] = v17;
    v25[1] = v15;
    int v26 = 0;
    int v27 = v20;
    uint64_t v28 = MEMORY[0x263F8EE78];
    v29[5] = v21;
    int v30 = a3;
    char v31 = BYTE4(a3) & 1;
    unint64_t v24 = v11;
    outlined init with copy of _ViewList_Sublist((uint64_t)v25, (uint64_t)v23);
    v23[85] = 1;
    swift_bridgeObjectRetain();
    char v22 = a5(a1, &v24, v23, a4);
    outlined destroy of _ViewList_Node((uint64_t)v23);
    outlined destroy of _ViewList_Sublist((uint64_t)v25);
    *a1 = 0;
    return v22 & 1;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _DisplayList_Identity.CodingKeys()
{
  return 1;
}

uint64_t outlined destroy of _ViewList_Sublist(uint64_t a1)
{
  return a1;
}

uint64_t destroy for _ViewList_Sublist(uint64_t a1)
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);

  return swift_bridgeObjectRelease();
}

uint64_t outlined destroy of _ViewList_Node(uint64_t a1)
{
  return a1;
}

uint64_t destroy for _ViewList_Node(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 85);
  if (v2 >= 4) {
    unsigned int v2 = *(_DWORD *)a1 + 4;
  }
  switch(v2)
  {
    case 1u:
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
      goto LABEL_9;
    case 2u:
      goto LABEL_9;
    case 3u:
      swift_bridgeObjectRelease();
LABEL_9:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
      break;
  }
  return result;
}

uint64_t outlined init with copy of _ViewList_Sublist(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for _ViewList_Sublist(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = a2 + 32;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(a1 + 32, v4, v6);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t $defer #1 () in SubgraphList.applyNodes(from:style:list:transform:to:)(void *a1)
{
  unsigned int v2 = (void *)*a1;
  if (!*(void *)(*a1 + 16))
  {
    __break(1u);
LABEL_6:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    unsigned int v2 = (void *)result;
    uint64_t v4 = *(void *)(result + 16);
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t v1 = a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v4 = v2[2];
  if (v4)
  {
LABEL_4:
    uint64_t v5 = v4 - 1;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v2[5 * v4 - 1]);
    v2[2] = v5;
    *uint64_t v1 = v2;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DynamicViewList.Transform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance DynamicViewList<A>.WrappedList(uint64_t a1, uint64_t *a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  return DynamicViewList.WrappedList.applyNodes(from:style:list:transform:to:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6);
}

uint64_t partial apply for closure #1 in _ViewList_Node.applySublists(from:style:transform:to:)(uint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(uint64_t (**)(long long *))(v4 + 16);
  uint64_t v7 = *(void *)(v4 + 24);
  unint64_t v9 = *a2;
  return _ViewList_Node.applySublists(from:style:transform:to:)(a1, &v9, a4, v6, v7) & 1;
}

uint64_t CachedEnvironment.attribute<A>(keyPath:)(void *a1)
{
  unsigned int v2 = v1;
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  uint64_t v5 = *((void *)v1 + 1);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = (void *)type metadata accessor for AnyKeyPath();
    uint64_t v8 = *(void *)(v5 + 32);
    uint64_t OffsetAttribute2 = *(unsigned int *)(v5 + 40);
    swift_retain_n();
    swift_bridgeObjectRetain();
    char v10 = MEMORY[0x24C523A30](v8, a1);
    swift_release();
    if (v10)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_release();
      return OffsetAttribute2;
    }
    uint64_t v27 = v4;
    swift_release();
    if (v6 != 1)
    {
      unint64_t v11 = (unsigned int *)(v5 + 56);
      unint64_t v12 = 1;
      while (v12 < *(void *)(v5 + 16))
      {
        uint64_t OffsetAttribute2 = *v11;
        uint64_t v13 = swift_retain_n();
        char v14 = MEMORY[0x24C523A30](v13, a1);
        swift_release();
        if (v14) {
          goto LABEL_3;
        }
        swift_release();
        ++v12;
        v11 += 4;
        if (v6 == v12) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_19;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v4 = v27;
  }
  int v15 = *v2;
  uint64_t v16 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v17)
  {
    int v29 = v15;
    int v30 = a1;
    MEMORY[0x270FA5388](v16);
    v24[2] = *(void *)(*MEMORY[0x263F8EA20] + v4 + 8);
    uint64_t v25 = type metadata accessor for Focus();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v18 = type metadata accessor for Attribute();
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v29, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v24, v25, MEMORY[0x263F8E628], v18, MEMORY[0x263F8E658], v19);
    swift_release();
    uint64_t OffsetAttribute2 = v28;
  }
  else
  {
    uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  }
  uint64_t v7 = (void *)*((void *)v2 + 1);
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_19:
  }
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  unint64_t v21 = v7[2];
  unint64_t v20 = v7[3];
  if (v21 >= v20 >> 1) {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v7);
  }
  _OWORD v7[2] = v21 + 1;
  char v22 = &v7[2 * v21];
  v22[4] = a1;
  *((_DWORD *)v22 + 10) = OffsetAttribute2;
  *((void *)v2 + 1) = v7;
  return OffsetAttribute2;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, unint64_t *a5, uint64_t a6)
{
  char v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v9 = a2;
    goto LABEL_8;
  }
  unint64_t v8 = a4[3];
  uint64_t v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v9 + 0x4000000000000000 >= 0)
  {
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v9 = a2;
    }
LABEL_8:
    uint64_t v10 = a4[2];
    if (v9 <= v10) {
      uint64_t v11 = a4[2];
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, a5, a6, MEMORY[0x263F8E0F8]);
      unint64_t v12 = (void *)swift_allocObject();
      int64_t v13 = _swift_stdlib_malloc_size(v12);
      uint64_t v14 = v13 - 32;
      if (v13 < 32) {
        uint64_t v14 = v13 - 17;
      }
      void v12[2] = v10;
      v12[3] = 2 * (v14 >> 4);
      int v15 = v12 + 4;
      if (v7) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v12 = (void *)MEMORY[0x263F8EE78];
      int v15 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[2 * v10 + 4]) {
          memmove(v15, a4 + 4, 16 * v10);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (unint64_t)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  void *v14;

  char v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v9 = a2;
    goto LABEL_8;
  }
  unint64_t v8 = a4[3];
  uint64_t v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v9 + 0x4000000000000000 >= 0)
  {
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v9 = a2;
    }
LABEL_8:
    uint64_t v10 = a4[2];
    if (v9 <= v10) {
      uint64_t v11 = a4[2];
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, a5, a6, MEMORY[0x263F8E0F8]);
      unint64_t v12 = (void *)swift_allocObject();
      int64_t v13 = _swift_stdlib_malloc_size(v12);
      void v12[2] = v10;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 24);
      uint64_t v14 = v12 + 4;
      if (v7)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[3 * v10 + 4]) {
          memmove(v14, a4 + 4, 24 * v10);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v12 = (void *)MEMORY[0x263F8EE78];
      uint64_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (unint64_t)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  void *v14;

  char v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v9 = a2;
    goto LABEL_8;
  }
  unint64_t v8 = a4[3];
  uint64_t v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v9 + 0x4000000000000000 >= 0)
  {
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v9 = a2;
    }
LABEL_8:
    uint64_t v10 = a4[2];
    if (v9 <= v10) {
      uint64_t v11 = a4[2];
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, a5, a6, MEMORY[0x263F8E0F8]);
      unint64_t v12 = (void *)swift_allocObject();
      int64_t v13 = _swift_stdlib_malloc_size(v12);
      void v12[2] = v10;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 24);
      uint64_t v14 = v12 + 4;
      if (v7)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[3 * v10 + 4]) {
          memmove(v14, a4 + 4, 24 * v10);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v12 = (void *)MEMORY[0x263F8EE78];
      uint64_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (char *)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  void *v14;

  char v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v9 = a2;
    goto LABEL_8;
  }
  unint64_t v8 = a4[3];
  uint64_t v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v9 + 0x4000000000000000 >= 0)
  {
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v9 = a2;
    }
LABEL_8:
    uint64_t v10 = a4[2];
    if (v9 <= v10) {
      uint64_t v11 = a4[2];
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, a5, a6, MEMORY[0x263F8E0F8]);
      unint64_t v12 = (void *)swift_allocObject();
      int64_t v13 = _swift_stdlib_malloc_size(v12);
      void v12[2] = v10;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 72);
      uint64_t v14 = v12 + 4;
      if (v7)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[9 * v10 + 4]) {
          memmove(v14, a4 + 4, 72 * v10);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v12 = (void *)MEMORY[0x263F8EE78];
      uint64_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (unint64_t)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int64_t v13;
  uint64_t v14;
  void *v15;

  char v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v9 = a2;
    goto LABEL_8;
  }
  unint64_t v8 = a4[3];
  uint64_t v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v9 + 0x4000000000000000 >= 0)
  {
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v9 = a2;
    }
LABEL_8:
    uint64_t v10 = a4[2];
    if (v9 <= v10) {
      uint64_t v11 = a4[2];
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, a5, a6, MEMORY[0x263F8E0F8]);
      unint64_t v12 = (void *)swift_allocObject();
      int64_t v13 = _swift_stdlib_malloc_size(v12);
      uint64_t v14 = v13 - 32;
      if (v13 < 32) {
        uint64_t v14 = v13 - 25;
      }
      void v12[2] = v10;
      v12[3] = 2 * (v14 >> 3);
      int v15 = v12 + 4;
      if (v7) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v12 = (void *)MEMORY[0x263F8EE78];
      int v15 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[v10 + 4]) {
          memmove(v15, a4 + 4, 8 * v10);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  void *v14;

  char v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v9 = a2;
    goto LABEL_8;
  }
  unint64_t v8 = a4[3];
  uint64_t v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v9 + 0x4000000000000000 >= 0)
  {
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v9 = a2;
    }
LABEL_8:
    uint64_t v10 = a4[2];
    if (v9 <= v10) {
      uint64_t v11 = a4[2];
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, a5, a6, MEMORY[0x263F8E0F8]);
      unint64_t v12 = (void *)swift_allocObject();
      int64_t v13 = _swift_stdlib_malloc_size(v12);
      void v12[2] = v10;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 48);
      uint64_t v14 = v12 + 4;
      if (v7)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[6 * v10 + 4]) {
          memmove(v14, a4 + 4, 48 * v10);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v12 = (void *)MEMORY[0x263F8EE78];
      uint64_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (char *)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int64_t v13;
  uint64_t v14;
  void *v15;

  char v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v9 = a2;
    goto LABEL_8;
  }
  unint64_t v8 = a4[3];
  uint64_t v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v9 + 0x4000000000000000 >= 0)
  {
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v9 = a2;
    }
LABEL_8:
    uint64_t v10 = a4[2];
    if (v9 <= v10) {
      uint64_t v11 = a4[2];
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, a5, a6, MEMORY[0x263F8E0F8]);
      unint64_t v12 = (void *)swift_allocObject();
      int64_t v13 = _swift_stdlib_malloc_size(v12);
      uint64_t v14 = v13 - 32;
      if (v13 < 32) {
        uint64_t v14 = v13 + 31;
      }
      void v12[2] = v10;
      v12[3] = 2 * (v14 >> 6);
      int v15 = v12 + 4;
      if (v7) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v12 = (void *)MEMORY[0x263F8EE78];
      int v15 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[8 * v10 + 4]) {
          memmove(v15, a4 + 4, v10 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (unint64_t)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  void *v14;

  char v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v9 = a2;
    goto LABEL_8;
  }
  unint64_t v8 = a4[3];
  uint64_t v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v9 + 0x4000000000000000 >= 0)
  {
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v9 = a2;
    }
LABEL_8:
    uint64_t v10 = a4[2];
    if (v9 <= v10) {
      uint64_t v11 = a4[2];
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, a5, a6, MEMORY[0x263F8E0F8]);
      unint64_t v12 = (void *)swift_allocObject();
      int64_t v13 = _swift_stdlib_malloc_size(v12);
      void v12[2] = v10;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 120);
      uint64_t v14 = v12 + 4;
      if (v7)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[15 * v10 + 4]) {
          memmove(v14, a4 + 4, 120 * v10);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v12 = (void *)MEMORY[0x263F8EE78];
      uint64_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (unint64_t)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int64_t v13;
  uint64_t v14;
  void *v15;

  char v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v9 = a2;
    goto LABEL_8;
  }
  unint64_t v8 = a4[3];
  uint64_t v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v9 + 0x4000000000000000 >= 0)
  {
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v9 = a2;
    }
LABEL_8:
    uint64_t v10 = a4[2];
    if (v9 <= v10) {
      uint64_t v11 = a4[2];
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, a5, a6, MEMORY[0x263F8E0F8]);
      unint64_t v12 = (void *)swift_allocObject();
      int64_t v13 = _swift_stdlib_malloc_size(v12);
      uint64_t v14 = v13 - 32;
      if (v13 < 32) {
        uint64_t v14 = v13 - 17;
      }
      void v12[2] = v10;
      v12[3] = 2 * (v14 >> 4);
      int v15 = v12 + 4;
      if (v7) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v12 = (void *)MEMORY[0x263F8EE78];
      int v15 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[2 * v10 + 4]) {
          memmove(v15, a4 + 4, 16 * v10);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v10, (unint64_t)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t PairwisePreferenceCombinerVisitor.visit<A>(key:)(uint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unint64_t v6 = *(void *)(v3 + 16);
  int v7 = *(_DWORD *)(v3 + 24);
  swift_bridgeObjectRetain();
  unint64_t v8 = PreferencesOutputs.subscript.getter((uint64_t)a2, (uint64_t)a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v19 = v6;
  int v20 = v7;
  unint64_t v9 = PreferencesOutputs.subscript.getter((uint64_t)a2, (uint64_t)a2, a3);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v8 & 0x100000000) != 0)
  {
    if ((v9 & 0x100000000) != 0) {
      return result;
    }
    LOBYTE(v19) = 0;
    uint64_t v14 = v9;
    goto LABEL_7;
  }
  if ((v9 & 0x100000000) != 0)
  {
    LOBYTE(v19) = 0;
    uint64_t v14 = v8;
LABEL_7:
    uint64_t v13 = v14;
    return PreferencesOutputs.subscript.setter(v13, a2, (uint64_t)a2, a3);
  }
  unint64_t v19 = __PAIR64__(v9, v8);
  MEMORY[0x270FA5388](result);
  _OWORD v15[2] = swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for PairPreferenceCombiner();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v19, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v15, v16, MEMORY[0x263F8E628], v11, MEMORY[0x263F8E658], v12);
  LOBYTE(v19) = 0;
  uint64_t v13 = v18;
  return PreferencesOutputs.subscript.setter(v13, a2, (uint64_t)a2, a3);
}

uint64_t DynamicPreferenceCombiner.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v47 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v39 = (char *)v34 - v8;
  uint64_t result = DynamicPreferenceCombiner.info.getter(a1, (uint64_t)&v50);
  uint64_t v10 = v50;
  if (!v50) {
    goto LABEL_53;
  }
  unint64_t v11 = v51;
  uint64_t v12 = v52;
  uint64_t v13 = v54;
  uint64_t v43 = v53;
  uint64_t v14 = v50 & 0xFFFFFFFFFFFFFF8;
  v34[3] = v55;
  uint64_t v42 = v7;
  if (v50 >> 62) {
    goto LABEL_48;
  }
  uint64_t v15 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v16 = v15 - v54;
  if (__OFSUB__(v15, v54)) {
    goto LABEL_50;
  }
LABEL_4:
  uint64_t v45 = v14;
  uint64_t v17 = v16 - v43;
  if (__OFSUB__(v16, v43))
  {
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    return result;
  }
  v34[2] = v11;
  uint64_t v18 = v10;
  if (v16 == v17) {
    int v19 = 0;
  }
  else {
    int v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  int v49 = v19;
  if (v19) {
    uint64_t v10 = v16;
  }
  else {
    uint64_t v10 = v17;
  }
  if (v10 < 0) {
    goto LABEL_52;
  }
  if (v10)
  {
    unint64_t v20 = 0;
    uint64_t v21 = v18;
    unint64_t v11 = v18 & 0xC000000000000001;
    v34[1] = v13;
    uint64_t v46 = v15 - (v13 + v43);
    uint64_t v48 = v21;
    uint64_t v44 = v21 + 32;
    uint64_t v38 = a3 + 24;
    uint64_t v37 = (void (**)(char *, uint64_t, uint64_t))(v42 + 16);
    BOOL v36 = (void (**)(uint64_t, uint64_t))(v42 + 8);
    int64_t v35 = (void (**)(uint64_t, char *, uint64_t))(v42 + 32);
    uint64_t v41 = v12 + 32 - 4 * (v13 + v43) + 4 * v15;
    uint64_t v42 = v12 + 32;
    uint64_t v14 = v10 - 1;
    uint64_t v13 = 1;
    while (1)
    {
      if (v12)
      {
        if (v49)
        {
          if ((uint64_t)(v46 + v20) < 0) {
            goto LABEL_45;
          }
          if (v46 + v20 >= *(void *)(v12 + 16)) {
            goto LABEL_47;
          }
          uint64_t v26 = v41;
        }
        else
        {
          if (v20 >= *(void *)(v12 + 16)) {
            goto LABEL_46;
          }
          uint64_t v26 = v42;
        }
        unint64_t v27 = *(unsigned int *)(v26 + 4 * v20);
        if (v11)
        {
LABEL_27:
          uint64_t v28 = MEMORY[0x24C523D60](v27, v48);
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v27 = v20;
        if (v49)
        {
          if ((uint64_t)v20 < v43) {
            unint64_t v27 = v46 + v20;
          }
          else {
            unint64_t v27 = v20 - v43;
          }
        }
        if (v11) {
          goto LABEL_27;
        }
      }
      if ((v27 & 0x8000000000000000) != 0) {
        goto LABEL_43;
      }
      if (v27 >= *(void *)(v45 + 16)) {
        goto LABEL_44;
      }
      uint64_t v28 = *(void *)(v44 + 8 * v27);
      swift_retain();
LABEL_34:
      unint64_t v29 = *(void *)(v28 + 32);
      swift_bridgeObjectRetain();
      unint64_t v30 = *(void *)(v28 + 40);
      swift_release();
      unint64_t v50 = v29;
      unint64_t v51 = v30;
      uint64_t v31 = _ViewOutputs.subscript.getter(a2, a2, a3);
      uint64_t v32 = swift_bridgeObjectRelease();
      if ((v31 & 0x100000000) == 0)
      {
        if ((v13 & 1) == 0)
        {
          double v33 = MEMORY[0x270FA5388](v32);
          v34[-4] = a2;
          v34[-3] = a3;
          LODWORD(v34[-2]) = v31;
          (*(void (**)(uint64_t, uint64_t (*)@<X0>(uint64_t@<X8>), double))(a3 + 24))(v47, partial apply for closure #1 in DynamicPreferenceCombiner.value.getter, v33);
          if (v14 == v20) {
            return outlined consume of DynamicContainer.Info?(v48);
          }
          uint64_t v13 = 0;
          goto LABEL_16;
        }
        uint64_t v22 = AssociatedTypeWitness;
        uint64_t Value = AGGraphGetValue();
        unint64_t v24 = v39;
        (*v37)(v39, Value, v22);
        uint64_t v25 = v47;
        (*v36)(v47, v22);
        (*v35)(v25, v24, v22);
        uint64_t v13 = 0;
      }
      if (v14 == v20) {
        return outlined consume of DynamicContainer.Info?(v48);
      }
LABEL_16:
      if (v10 == ++v20)
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        swift_bridgeObjectRetain();
        uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v16 = v15 - v13;
        if (!__OFSUB__(v15, v13)) {
          goto LABEL_4;
        }
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
    }
  }

  return outlined consume of DynamicContainer.Info?(v18);
}

uint64_t PreferencesOutputs.subscript.setter(uint64_t a1, ValueMetadata *a2, uint64_t a3, uint64_t a4)
{
  int v10 = a1;
  char v11 = BYTE4(a1) & 1;
  _OWORD v9[2] = a3;
  v9[3] = a4;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Attribute();
  type metadata accessor for Optional();
  type metadata accessor for AGAttribute(0);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))protocol witness for OptionSet.init(rawValue:) in conformance CTRunStatus, (uint64_t)v9, MEMORY[0x263F8E628], v6, v7, (uint64_t)&v12);
  LOBYTE(v10) = v13;
  return PreferencesOutputs.subscript.setter(v12 | ((unint64_t)v13 << 32), a2, a4);
}

void type metadata accessor for MutableBox<CachedEnvironment>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_3(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_5(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_6(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_7(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t PreferencesOutputs.subscript.setter(uint64_t result, ValueMetadata *a2, uint64_t a3)
{
  int v4 = result;
  if (a2 == &type metadata for DisplayList.Key)
  {
    int v5 = *((_DWORD *)v3 + 2);
    if ((v5 & 0x100) == 0) {
      *((_DWORD *)v3 + 2) = v5 | 0x100;
    }
  }
  uint64_t v6 = (void *)*v3;
  uint64_t v7 = *(void *)(*v3 + 16);
  if (v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    while ((ValueMetadata *)v6[v8 + 4] != a2)
    {
      ++v9;
      v8 += 3;
      if (v7 == v9) {
        goto LABEL_8;
      }
    }
    if ((result & 0x100000000) != 0)
    {
      return specialized Array.remove(at:)(v9);
    }
    else
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
        uint64_t v6 = (void *)result;
      }
      if (v9 >= v6[2])
      {
        __break(1u);
      }
      else
      {
        LODWORD(v6[v8 + 6]) = v4;
        *uint64_t v3 = (uint64_t)v6;
      }
    }
  }
  else
  {
LABEL_8:
    if ((result & 0x100000000) == 0)
    {
      int v10 = result;
      return closure #1 in PreferencesOutputs.subscript.setter(&v10, v3, (uint64_t)a2, a3);
    }
  }
  return result;
}

uint64_t _ViewOutputs.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = PreferencesOutputs.subscript.getter(a1, a2, a3);
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

unint64_t PreferencesOutputs.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6)
  {
    uint64_t v7 = (_DWORD *)(*(void *)v3 + 48);
    while (*((void *)v7 - 2) != a1)
    {
      v7 += 6;
      if (!--v6) {
        goto LABEL_5;
      }
    }
    char v9 = 0;
    int v8 = *v7;
  }
  else
  {
LABEL_5:
    int v8 = 0;
    char v9 = 1;
  }
  int v14 = v8;
  char v15 = v9;
  MEMORY[0x270FA5388](a1);
  v13[2] = a2;
  v13[3] = a3;
  type metadata accessor for AGAttribute?();
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Attribute();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))protocol witness for OptionSet.init(rawValue:) in conformance CTRunStatus, (uint64_t)v13, MEMORY[0x263F8E628], v10, v11, (uint64_t)&v16);
  return v16 | ((unint64_t)v17 << 32);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  unint64_t v27 = a1;
  uint64_t v24 = *(void *)(a3 - 8);
  uint64_t v10 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  unsigned int v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v10);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  unint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v12, a3);
    }
    uint64_t v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a6, v22, 1);
}

_DWORD *protocol witness for OptionSet.init(rawValue:) in conformance CTRunStatus@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void type metadata accessor for AGAttribute?()
{
  if (!lazy cache variable for type metadata for AGAttribute?)
  {
    type metadata accessor for AGAttribute(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AGAttribute?);
    }
  }
}

uint64_t getEnumTagSinglePayload for Binding(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      uint64_t v15 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v6 + 8) & ~v6);
      }
      unint64_t v16 = *v15;
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void type metadata accessor for AGAttribute(uint64_t a1)
{
}

uint64_t closure #1 in PreferencesOutputs.subscript.setter(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v7 = *a1;
  int v8 = (void *)*a2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a2 = (uint64_t)v8;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    int v8 = (void *)result;
    *a2 = result;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    int v8 = (void *)result;
  }
  uint64_t v8[2] = v11 + 1;
  unsigned int v12 = &v8[3 * v11];
  v12[4] = a3;
  v12[5] = a4;
  *((_DWORD *)v12 + 12) = v7;
  *a2 = (uint64_t)v8;
  return result;
}

uint64_t outlined consume of DynamicContainer.Info?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t DynamicPreferenceCombiner.info.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*MEMORY[0x263F288F8] == result)
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v4 = *(void *)(Value + 8);
    uint64_t v5 = *(void *)(Value + 32);
    char v6 = *(unsigned char *)(Value + 40);
    int v7 = *(_DWORD *)(Value + 44);
    *(void *)a2 = *(void *)Value;
    *(void *)(a2 + 8) = v4;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(Value + 16);
    *(void *)(a2 + 32) = v5;
    *(unsigned char *)(a2 + 40) = v6;
    *(_DWORD *)(a2 + 44) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void storeEnumTagSinglePayload for PreferenceValues.Value(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            unint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) != 0xFFFFFFFC)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for _EnvironmentKeyWritingModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, unint64_t *a5, unint64_t *a6, uint64_t a7)
{
  char v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v11 = a2;
    goto LABEL_8;
  }
  unint64_t v10 = a4[3];
  uint64_t v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v11 + 0x4000000000000000 >= 0)
  {
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v11 = a2;
    }
LABEL_8:
    uint64_t v12 = a4[2];
    if (v11 <= v12) {
      uint64_t v13 = a4[2];
    }
    else {
      uint64_t v13 = v11;
    }
    if (v13)
    {
      type metadata accessor for _ContiguousArrayStorage<Scrollable>(0, a5, a6, a7, MEMORY[0x263F8E0F8]);
      int v14 = (void *)swift_allocObject();
      size_t v15 = _swift_stdlib_malloc_size(v14);
      v14[2] = v12;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
      unint64_t v16 = v14 + 4;
      if (v9)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[5 * v12 + 4]) {
          memmove(v16, a4 + 4, 40 * v12);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int v14 = (void *)MEMORY[0x263F8EE78];
      unint64_t v16 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v12, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v14;
  }
  __break(1u);
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Scrollable>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for PreferenceKey(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      type metadata accessor for PreferenceKey(0, a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PreferenceKey(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void storeEnumTagSinglePayload for Binding(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 >= a2)
  {
    switch(v13)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_42:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          uint64_t v18 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
          if ((v7 & 0x80000000) != 0)
          {
            unint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
            v20(((unint64_t)v18 + v9 + 8) & ~v9);
          }
          else
          {
            if ((a2 & 0x80000000) != 0) {
              uint64_t v19 = a2 ^ 0x80000000;
            }
            else {
              uint64_t v19 = a2 - 1;
            }
            *uint64_t v18 = v19;
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t __swift_memcpy11_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a2 + 7);
  *(void *)uint64_t result = v2;
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 24 * a1 + 32);
    size_t v6 = 24 * v4;
    unsigned int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    unsigned int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    unsigned int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 88 * a1 + 32);
    size_t v6 = 88 * v4;
    unsigned int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    unsigned int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 48 * a1 + 32);
    size_t v6 = 48 * v4;
    unsigned int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    unsigned int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 28 * a1 + 32);
    size_t v6 = 28 * v4;
    unsigned int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 56 * a1 + 32);
    size_t v6 = 56 * v4;
    unsigned int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + (a1 << 7) + 32);
    size_t v6 = v4 << 7;
    unsigned int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 40 * a1 + 32);
    size_t v6 = 40 * v4;
    unsigned int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 20 * a1 + 32);
    size_t v6 = 20 * v4;
    unsigned int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 36 * a1 + 32);
    size_t v6 = 36 * v4;
    unsigned int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 2 * a1 + 32);
    size_t v6 = 2 * v4;
    unsigned int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + (a1 << 6) + 32);
    size_t v6 = v4 << 6;
    unsigned int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 88 * a1 + 32);
    size_t v6 = &__dst[88 * v4];
    if (v5 >= v6 || &v5[88 * v4] <= __dst)
    {
      memcpy(__dst, v5, 88 * v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 96 * a1 + 32);
    size_t v6 = 96 * v4;
    unsigned int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 120 * a1 + 32;
    unint64_t v6 = a3 + 120 * v4;
    if (v5 >= v6 || v5 + 120 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 96 * a1 + 32;
    unint64_t v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 120 * a1 + 32;
    unint64_t v6 = a3 + 120 * v4;
    if (v5 >= v6 || v5 + 120 * v4 <= a3)
    {
      type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(0, (unint64_t *)&lazy cache variable for type metadata for (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 112 * a1 + 32;
    unint64_t v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      type metadata accessor for ()();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 224 * a1 + 32;
    unint64_t v6 = a3 + 224 * v4;
    if (v5 >= v6 || v5 + 224 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 136 * a1 + 32;
    unint64_t v6 = a3 + 136 * v4;
    if (v5 >= v6 || v5 + 136 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 88 * a1 + 32;
    unint64_t v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 120 * a1 + 32;
    unint64_t v6 = a3 + 120 * v4;
    if (v5 >= v6 || v5 + 120 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      type metadata accessor for (Int, RBDisplayListContents)();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 112 * a1 + 32;
    unint64_t v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      type metadata accessor for (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>)();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      type metadata accessor for (CGSize, NSAttributedString.Metrics)(0, (unint64_t *)&lazy cache variable for type metadata for (AGSubgraphRef, Int), type metadata accessor for AGSubgraphRef);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<CGFloat, CGFloat>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Fork();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(0, &lazy cache variable for type metadata for AnimatorState<ResolvedGradientVector>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Fork();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 7) + 32;
    unint64_t v6 = a3 + (v4 << 7);
    if (v5 >= v6 || v5 + (v4 << 7) <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 112 * a1 + 32;
    unint64_t v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(0, &lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.Fill.AnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(0, &lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 80 * a1 + 32;
    unint64_t v6 = a3 + 80 * v4;
    if (v5 >= v6 || v5 + 80 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Fork();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_AnyAnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 112 * a1 + 32;
    unint64_t v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 160 * a1 + 32;
    unint64_t v6 = a3 + 160 * v4;
    if (v5 >= v6 || v5 + 160 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<Double>.Entry(0, &lazy cache variable for type metadata for CombinedAnimationState<Double>.Entry, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>.Item(0, &lazy cache variable for type metadata for ObjectCache<Font.Resolved, CTFontRef>.Item, type metadata accessor for CTFontRef, (void (*)(void))lazy protocol witness table accessor for type Font.Resolved and conformance Font.Resolved);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 96 * a1 + 32;
    unint64_t v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 144 * a1 + 32;
    unint64_t v6 = a3 + 144 * v4;
    if (v5 >= v6 || v5 + 144 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(0, (unint64_t *)&lazy cache variable for type metadata for (name: String, value: String));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      type metadata accessor for (views: _ViewList_ID_Views, endOffset: Int)();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 88 * a1 + 32;
    unint64_t v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 96 * a1 + 32;
    unint64_t v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 104 * a1 + 32;
    unint64_t v6 = a3 + 104 * v4;
    if (v5 >= v6 || v5 + 104 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      type metadata accessor for (Path, FillStyle)(0, (unint64_t *)&lazy cache variable for type metadata for (ScrapeableContent, Int));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 112 * a1 + 32;
    unint64_t v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 216 * a1 + 32;
    unint64_t v6 = a3 + 216 * v4;
    if (v5 >= v6 || v5 + 216 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 208 * a1 + 32;
    unint64_t v6 = a3 + 208 * v4;
    if (v5 >= v6 || v5 + 208 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ResolvedKeyframes<Double>.Track, MEMORY[0x263F8D538], (uint64_t (*)(void, uint64_t))type metadata accessor for _ResolvedKeyframes.Track);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 88 * a1 + 32;
    unint64_t v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<Double>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<Double>.Fork, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(0, &lazy cache variable for type metadata for AnimatorState<CGFloat>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 88 * a1 + 32;
    unint64_t v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 80 * a1 + 32;
    unint64_t v6 = a3 + 80 * v4;
    if (v5 >= v6 || v5 + 80 * v4 <= a3)
    {
      type metadata accessor for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<CGFloat>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Entry();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(0, &lazy cache variable for type metadata for CombinedAnimationState<ResolvedGradientVector>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Entry();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 112 * a1 + 32;
    unint64_t v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 96 * a1 + 32;
    unint64_t v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Entry();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Entry(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<_AnyAnimatableData>.Entry, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState.Entry);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      type metadata accessor for (Path, FillStyle)(0, &lazy cache variable for type metadata for (ContentShapeKinds, AnyShape));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 120 * a1 + 32;
    unint64_t v6 = a3 + 120 * v4;
    if (v5 >= v6 || v5 + 120 * v4 <= a3)
    {
      type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(0, &lazy cache variable for type metadata for (offset: Int, element: _ShapeStyle_Pack.Style));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      type metadata accessor for (range: _NSRange, attributes: [NSAttributedStringKey : Any])();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      type metadata accessor for (Path, FillStyle)(0, (unint64_t *)&lazy cache variable for type metadata for (String, String));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 144 * a1 + 32;
    unint64_t v6 = a3 + 144 * v4;
    if (v5 >= v6 || v5 + 144 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 7) + 32;
    unint64_t v6 = a3 + (v4 << 7);
    if (v5 >= v6 || v5 + (v4 << 7) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      type metadata accessor for PreferenceKey(0, &lazy cache variable for type metadata for ViewRendererHost);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for _ValueActionModifier(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = *(void *)((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        uint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance DisplayList.Key@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  __int16 v2 = word_26B0F1B78;
  char v3 = byte_26B0F1B7A;
  *(void *)a1 = static DisplayList.Key.defaultValue;
  *(_WORD *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 10) = v3;

  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for PairPreferenceCombiner()
{
  return __swift_instantiateGenericMetadata();
}

void protocol witness for static AdditiveArithmetic.zero.getter in conformance _ShapeStyle_Pack.AnimatableData(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t type metadata accessor for ForEachState.Transform()
{
  return swift_getGenericMetadata();
}

uint64_t outlined retain of LinearGradient(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in implicit closure #1 in DynamicViewList.Item.matches(type:id:)@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in implicit closure #1 in DynamicViewList.Item.matches(type:id:)(a1);
}

uint64_t closure #1 in implicit closure #1 in DynamicViewList.Item.matches(type:id:)@<X0>(unsigned char *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

void type metadata accessor for _TraitWritingModifier<ZIndexTraitKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined release of DynamicContainerInfo<DynamicLayoutViewAdaptor>(uint64_t a1)
{
  __int16 v2 = *(void **)(a1 + 136);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type DynamicContainerInfo<DynamicLayoutViewAdaptor> and conformance DynamicContainerInfo<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DynamicContainerInfo<DynamicLayoutViewAdaptor> and conformance DynamicContainerInfo<A>;
  if (!lazy protocol witness table cache variable for type DynamicContainerInfo<DynamicLayoutViewAdaptor> and conformance DynamicContainerInfo<A>)
  {
    type metadata accessor for _TraitWritingModifier<ZIndexTraitKey>(255, &lazy cache variable for type metadata for DynamicContainerInfo<DynamicLayoutViewAdaptor>, (uint64_t)&type metadata for DynamicLayoutViewAdaptor, (uint64_t)&protocol witness table for DynamicLayoutViewAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DynamicContainerInfo);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicContainerInfo<DynamicLayoutViewAdaptor> and conformance DynamicContainerInfo<A>);
  }
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<PreferencesOutputs.KeyValue>, (uint64_t)&type metadata for PreferencesOutputs.KeyValue);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_SublistTransform_Item>, &lazy cache variable for type metadata for _ViewList_SublistTransform_Item, (uint64_t)&protocol descriptor for _ViewList_SublistTransform_Item);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyViewTrait>, (unint64_t *)&lazy cache variable for type metadata for AnyViewTrait, (uint64_t)&protocol descriptor for AnyViewTrait);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PreferenceKey.Type>, (unint64_t *)&lazy cache variable for type metadata for PreferenceKey.Type, &lazy cache variable for type metadata for PreferenceKey);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<Unmanaged<ViewGraph>>, (uint64_t (*)(uint64_t))type metadata accessor for Unmanaged<ViewGraph>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<GraphicsFilter>, (uint64_t)&type metadata for GraphicsFilter);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.AnimatableData>.Fork>, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.AnimatableData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<GraphMutation>, &lazy cache variable for type metadata for GraphMutation, (uint64_t)&protocol descriptor for GraphMutation);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ShapeStyle_Pack.Effect>, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<AnimatorState<ShaderVectorData>.Fork>, &lazy cache variable for type metadata for AnimatorState<ShaderVectorData>.Fork, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<Unmanaged<GraphHost>>, (uint64_t (*)(uint64_t))type metadata accessor for Unmanaged<GraphHost>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<BitVector64>, (uint64_t)&type metadata for BitVector64);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedGradientVector.Stop>, (uint64_t)&type metadata for ResolvedGradientVector.Stop);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<ShaderVectorData.Element>, (uint64_t)&type metadata for ShaderVectorData.Element);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<ObjectCache<Color.Resolved, CGColorRef>.Item>, &lazy cache variable for type metadata for ObjectCache<Color.Resolved, CGColorRef>.Item, type metadata accessor for CGColorRef);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedGradient.Stop>, (uint64_t)&type metadata for ResolvedGradient.Stop);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<ObjectCache<Color.Resolved, NSObject>.Item>, &lazy cache variable for type metadata for ObjectCache<Color.Resolved, NSObject>.Item, (void (*)(uint64_t))type metadata accessor for NSObject);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x263F8D6C8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<UnsafeRawPointer>, MEMORY[0x263F8D3D0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectIdentifier>, MEMORY[0x263F8D1F0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.CharacterIndex>, (uint64_t)&type metadata for Text.Layout.CharacterIndex);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<Range<Int>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<MatchedGeometryScope.Frame>, (uint64_t)&type metadata for MatchedGeometryScope.Frame);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrapeableContent>, (uint64_t)&type metadata for ScrapeableContent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<Unmanaged<DynamicViewList<AnyView>.Item>>, (uint64_t (*)(uint64_t))type metadata accessor for Unmanaged<DynamicViewList<AnyView>.Item>);
}

uint64_t partial apply for closure #1 in ShapeStyleBox.isEqual(to:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X7>, unsigned char *a3@<X8>)
{
  return closure #1 in ShapeStyleBox.isEqual(to:)(a1, *(void *)(v3 + 16), a2, a3);
}

uint64_t closure #1 in ShapeStyleBox.isEqual(to:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X7>, unsigned char *a4@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a2 + *(void *)(*(void *)a2 + 120);
  uint64_t v7 = v5 + *(void *)(*(void *)v5 + 120);
  uint64_t v10 = *(void *)(*(void *)a2 + 104);
  uint64_t v11 = v7;
  int v12 = 3;
  uint64_t result = _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)&v9, v10, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], a3);
  *a4 = v13;
  return result;
}

uint64_t partial apply for closure #1 in ValueActionDispatcher.updateValue()@<X0>(BOOL *a1@<X8>)
{
  return closure #1 in ValueActionDispatcher.updateValue()(v1[4], v1[2], v1[3], a1);
}

uint64_t partial apply for closure #1 in _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment.value.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment.value.getter(*(void **)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t closure #1 in _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment.value.getter@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  default argument 0 of ShapeStyle.copyStyle(name:in:foregroundStyle:)(&v11);
  swift_retain();
  swift_retain();
  uint64_t v8 = ShapeStyle.copyStyle(name:in:foregroundStyle:)((uint64_t)&v11, (uint64_t)v10, 0, a2, a3);
  swift_release();
  uint64_t result = swift_release();
  *a4 = v8;
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollGeometryPreferenceKey@<X0>(void *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  *a3 = *a2;

  return swift_bridgeObjectRetain();
}

__n128 __swift_memcpy28_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance UpdateScrollStateRequestKey@<X0>(void *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollGeometryPreferenceKey(&one-time initialization token for defaultValue, &static UpdateScrollStateRequestKey.defaultValue, a1);
}

uint64_t storeEnumTagSinglePayload for ScrollPosition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AsymmetricTransition(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

uint64_t getEnumTagSinglePayload for FilteredTransition(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = *(void *)((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        __n128 result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in AnimationBox.isEqual(to:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in AnimationBox.isEqual(to:)(a1, v2, a2);
}

uint64_t closure #1 in AnimationBox.isEqual(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v5 = *(void *)(*(void *)a2 + 160);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x270FA5388](v9);
  unsigned int v12 = (char *)&v17 - v11;
  int v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  ((void (*)(char *, void, uint64_t, double))v14)((char *)&v17 - v11, *(void *)v13 + *(void *)(**(void **)v13 + 176), v5, v10);
  v14(v8, v3 + *(void *)(*(void *)v3 + 176), v5);
  LOBYTE(v3) = dispatch thunk of static Equatable.== infix(_:_:)();
  int v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v8, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v15)(v12, v5);
  *a3 = v3 & 1;
  return result;
}

uint64_t partial apply for closure #1 in LayoutProxy.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  return ViewTraitCollection.subscript.getter(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t getEnumTagSinglePayload for MatchedGeometryScope.Frame.View(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollTargetRole.ContentKey@<X0>(void *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollGeometryPreferenceKey(&one-time initialization token for defaultValue, &static ScrollTargetRole.ContentKey.defaultValue, a1);
}

uint64_t partial apply for closure #2 in implicit closure #1 in ChildEnvironment.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X7>, unsigned char *a3@<X8>)
{
  long long v7 = *(_OWORD *)(v3 + 16);
  int v8 = 2;
  uint64_t result = _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)&v6, v7, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], a2);
  *a3 = v9;
  return result;
}

uint64_t partial apply for closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()(a1, *(void *)(v2 + 24), *(void *)(v2 + 16), a2);
}

uint64_t closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v55 = a4;
  uint64_t v5 = a1;
  uint64_t v57 = (uint64_t)a1;
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v58 = a3;
  uint64_t v54 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v47 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v52 = (uint64_t)&v44 - v8;
  uint64_t v9 = type metadata accessor for _EnvironmentKeyWritingModifier();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  __n128 v59 = (char *)&v44 - v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v51 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v56 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (uint64_t *)((char *)&v44 - v16);
  uint64_t v61 = *v5;
  uint64_t v19 = *(int *)(v18 + 48);
  unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  uint64_t v48 = a2;
  v20((char *)&v44 - v16, a2, v9, v15);
  uint64_t v49 = v19;
  *((unsigned char *)v17 + v19) = *(unsigned char *)(a2 + v19);
  uint64_t v21 = *v17;
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  swift_retain();
  swift_retain();
  uint64_t v53 = v10 + 8;
  unint64_t v50 = v22;
  v22((char *)v17, v9);
  uint64_t v60 = v21;
  type metadata accessor for WritableKeyPath();
  LOBYTE(v5) = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  swift_release();
  ((void (*)(char *, uint64_t, uint64_t))v20)(v59, v57, v9);
  uint64_t v57 = TupleTypeMetadata2;
  uint64_t v23 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v24 = v56;
  uint64_t v25 = v48;
  uint64_t v26 = v9;
  uint64_t v46 = v20;
  ((void (*)(char *, uint64_t, uint64_t))v20)(v56, v48, v9);
  char v27 = *(unsigned char *)(v25 + v49);
  uint64_t v28 = v24;
  v24[v23] = v27;
  if (v5)
  {
    uint64_t v29 = *(int *)(v9 + 28);
    uint64_t v30 = v58;
    uint64_t v31 = *(void (**)(uint64_t, char *, uint64_t))(v54 + 16);
    v31(v52, &v59[v29], v58);
    uint64_t v32 = *(int *)(v57 + 48);
    ((void (*)(void *, char *, uint64_t))v46)(v17, v28, v26);
    *((unsigned char *)v17 + v32) = v27;
    uint64_t v33 = *(int *)(v26 + 28);
    uint64_t v34 = v26;
    uint64_t v45 = v26;
    int64_t v35 = v47;
    v31((uint64_t)v47, (char *)v17 + v33, v30);
    BOOL v36 = v50;
    uint64_t v37 = v50((char *)v17, v34);
    MEMORY[0x270FA5388](v37);
    *(&v44 - 4) = v30;
    *(&v44 - 3) = (uint64_t)v35;
    *((_DWORD *)&v44 - 4) = 2;
    uint64_t v38 = v52;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v52, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)(&v44 - 6), v30, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v39);
    char v40 = v61;
    uint64_t v41 = *(void (**)(char *, uint64_t))(v54 + 8);
    v41(v35, v30);
    v41((char *)v38, v30);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v56, v57);
    uint64_t result = v36(v59, v45);
    char v43 = v40 ^ 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v24, v57);
    uint64_t result = v50(v59, v9);
    char v43 = 1;
  }
  *uint64_t v55 = v43 & 1;
  return result;
}

uint64_t partial apply for closure #1 in WeakAttribute.allowsAsyncUpdate()@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = AGGraphGetValueState();
  *a1 = (~result & 0x11) != 0;
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollGeometryPreferenceKey@<X0>(void *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollGeometryPreferenceKey(&one-time initialization token for defaultValue, &static ScrollGeometryPreferenceKey.defaultValue, a1);
}

uint64_t getEnumTagSinglePayload for ScrollStateRequestKind(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t partial apply for closure #1 in AccessibilityValueStorage.init<A>(_:description:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in AccessibilityValueStorage.init<A>(_:description:)(a1, *(void *)(v2 + 16), a2);
}

{
  uint64_t v2;

  return closure #1 in AccessibilityValueStorage.init<A>(_:description:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t closure #1 in AccessibilityValueStorage.init<A>(_:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double v5 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  return AnyAccessibilityValue.init<A>(_:)((uint64_t)v7, a2, a3);
}

uint64_t AnyAccessibilityValue.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  a3[3] = type metadata accessor for AnyAccessibilityValue.ConcreteBase();
  a3[4] = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
}

uint64_t type metadata accessor for AnyAccessibilityValue.ConcreteBase()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollPhasePreferenceKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static ScrollPhasePreferenceKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t partial apply for closure #1 in ValueToScrollPosition.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in ValueToScrollPosition.get(base:)(a1, *(void *)(v2 + 32), *(void *)(v2 + 40), *(unsigned char *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t closure #1 in ValueToScrollPosition.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v12 = a4 & 1;
  double v13 = MEMORY[0x270FA5388](a1);
  double v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v16 + 16))(v15, v13);
  return ScrollPosition.init<A>(id:anchor:)((uint64_t)v15, a2, a3, v12, a5, a6, a7);
}

uint64_t partial apply for closure #1 in ChangedCallbacks.dispatch(phase:state:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  *a1 = (result & 1) == 0;
  return result;
}

uint64_t getEnumTagSinglePayload for ModifierTransition(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v8 = ((v6 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v6;
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

__n128 __swift_memcpy192_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t type metadata accessor for DynamicContainerInfo()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InternalCustomAnimationModifiedContent<A, B>()
{
  return static InternalCustomAnimationModifiedContent.== infix(_:_:)();
}

uint64_t static InternalCustomAnimationModifiedContent.== infix(_:_:)()
{
  return static CustomAnimationModifiedContent.== infix(_:_:)();
}

uint64_t partial apply for closure #3 in implicit closure #3 in ChildEnvironment.updateValue()@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  type metadata accessor for AnyKeyPath();
  uint64_t result = MEMORY[0x24C523A30](v4, v2);
  *a2 = result & 1;
  return result;
}

uint64_t partial apply for implicit closure #1 in View.tint<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return implicit closure #1 in View.tint<A>(_:)(a1, *(void *)(v2 + 24), a2);
}

uint64_t implicit closure #1 in View.tint<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  double v5 = MEMORY[0x270FA5388](a1);
  long long v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  uint64_t result = AnyShapeStyle.init<A>(_:)((uint64_t)v7, a2);
  *a3 = result;
  return result;
}

uint64_t partial apply for closure #3 in ForEachState.item(at:offset:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #3 in ForEachState.item(at:offset:)(a1, *(uint64_t **)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t closure #3 in ForEachState.item(at:offset:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = a4;
  void v22[2] = a3;
  uint64_t v29 = *a2;
  uint64_t v6 = v29;
  uint64_t v7 = *(void *)(v29 + 104);
  v22[1] = *(void *)(*(void *)(v7 + 8) + 8);
  uint64_t v8 = *(void *)(v29 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unsigned int v11 = (char *)v22 - v10;
  uint64_t v12 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v13);
  double v15 = (char *)v22 - v14;
  v22[0] = *a1;
  uint64_t v16 = (char *)a2 + *(void *)(v6 + 160);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v6 + 112);
  uint64_t v25 = v8;
  long long v26 = *(_OWORD *)(v29 + 88);
  uint64_t v27 = v7;
  uint64_t v28 = v17;
  uint64_t v18 = type metadata accessor for ForEach();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v16, 1, v18);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v16, v8);
    unint64_t v20 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v21 = AssociatedTypeWitness;
    (*(void (**)(char *))(v9 + 16))(v11);
    v20(&v25, 0);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v8);
    swift_getAtKeyPath();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v21);
  }
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance UpdateScrollStateRequestKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ScrollGeometryPreferenceKey(a1, a2, a3, a4, a5, specialized Array.append<A>(contentsOf:));
}

uint64_t AccessibilityAttachmentToken.init<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = AGCreateWeakAttribute();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t _ViewInputs.environment.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_beginAccess();
  return *(unsigned int *)(v1 + 16);
}

uint64_t getEnumTag for DisplayList.Content.Value(void *a1)
{
  return *a1 >> 60;
}

double GraphicsContext.opacity.getter(uint64_t a1)
{
  return *(float *)(a1 + 48);
}

ValueMetadata *type metadata accessor for _OffsetEffect()
{
  return &type metadata for _OffsetEffect;
}

uint64_t _ViewList_ReleaseElements.__deallocating_deinit()
{
  _ViewList_ReleaseElements.deinit();

  return swift_deallocClassInstance();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LayoutDirection()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

uint64_t static Alignment.center.getter(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(void *)a2;
}

uint64_t View.lineSpacing(_:)(uint64_t a1, uint64_t a2, double a3)
{
  KeyPath = (uint64_t *)swift_getKeyPath();
  double v8 = a3;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a1, a2);
  return swift_release();
}

{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t getEnumTag for DisplayList.Effect(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 12) <= 0x12u) {
    return *(unsigned __int8 *)(a1 + 12);
  }
  else {
    return (*(_DWORD *)a1 + 19);
  }
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1)
{
  void v5[5] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 8);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of AnyTrackedValue(Value, (uint64_t)v5);
  long long v3 = *(void (**)(void *))(*(void *)v1 + 80);
  swift_retain();
  v3(v5);
  swift_release();
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

{
  unsigned char v2[80];
  uint64_t v3[6];

  v3[5] = *MEMORY[0x263EF8340];
  outlined init with copy of BaseViewList.Init(a1, (uint64_t)v2);
  BaseViewList.Init.value.getter(v3);
  outlined destroy of BaseViewList.Init((uint64_t)v2);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

{
  int v2;
  uint64_t v3;

  long long v3 = *MEMORY[0x263EF8340];
  DynamicViewPhase.value.getter(*(void *)a1, *(_DWORD *)(a1 + 8), &v2);
  return AGGraphSetOutputValue();
}

{
  int v1;
  uint64_t Value;
  __int16 v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  double v15 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(_DWORD *)(a1 + 4);
  uint64_t Value = AGGraphGetValue();
  long long v3 = *(_WORD *)(Value + 8);
  uint64_t v4 = *(unsigned char *)(Value + 10);
  unsigned int v11 = *(void *)Value;
  uint64_t v12 = v3;
  uint64_t v13 = v4;
  double v5 = ++static DisplayList.Version.lastValue;
  if ((v3 & 0x60) != 0)
  {
    double v8 = v1;
    uint64_t v9 = v5;
    uint64_t v10 = MEMORY[0x263F8EE78];
    uint64_t v7 = 0;
    swift_bridgeObjectRetain();
    specialized DisplayList.transform(_:)((uint64_t)&v11, (uint64_t)&v8, &v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v14 = v5;
  type metadata accessor for (Path, FillStyle)(0, (unint64_t *)&lazy cache variable for type metadata for (DisplayList, DisplayList.Version));
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  unint64_t v1;
  uint64_t Value;

  uint64_t v1 = *(void *)(a1 + 8);
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for [ViewGeometry], (uint64_t)&type metadata for ViewGeometry, MEMORY[0x263F8D488]);
  uint64_t Value = AGGraphGetValue();
  if ((v1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  if (v1 >= *(void *)(*(void *)Value + 16)) {
    goto LABEL_5;
  }
  swift_retain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v1;
  uint64_t Value;
  int v3;
  uint64_t v5;
  int v6;
  uint64_t v7;

  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 8);
  type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>();
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(Value, (uint64_t)&v5, (uint64_t (*)(void))type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>);
  swift_retain();
  specialized ForEachState.update(view:)(&v5);
  outlined destroy of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>((uint64_t)&v5, (uint64_t (*)(void))type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>);
  long long v3 = *(_DWORD *)(v1 + 312);
  double v5 = v1;
  uint64_t v6 = v3;
  type metadata accessor for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item(0, &lazy cache variable for type metadata for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Info, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Info);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  unint64_t v1;
  uint64_t v2;
  uint64_t v4[6];

  v4[5] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8) | ((unint64_t)*(unsigned int *)(a1 + 12) << 32);
  uint64_t v2 = swift_bridgeObjectRetain();
  MakeSection.value.getter(v2, v1, v4);
  swift_bridgeObjectRelease();
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

{
  uint64_t v1;
  uint64_t Value;
  int v3;
  uint64_t v5;
  int v6;
  uint64_t v7;

  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 8);
  type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>();
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(Value, (uint64_t)&v5, (uint64_t (*)(void))type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
  swift_retain();
  specialized ForEachState.update(view:)((uint64_t)&v5);
  outlined destroy of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>((uint64_t)&v5, (uint64_t (*)(void))type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
  long long v3 = *(_DWORD *)(v1 + 296);
  double v5 = v1;
  uint64_t v6 = v3;
  type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item(0, &lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Info);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  long long v1;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v7[2];
  _OWORD v8[2];
  uint64_t v9[3];

  _OWORD v9[2] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(_OWORD *)(a1 + 24);
  v7[0] = *(_OWORD *)(a1 + 8);
  v7[1] = v1;
  v8[0] = *(_OWORD *)(a1 + 40);
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)(a1 + 49);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  long long v3 = *Value;
  uint64_t v4 = Value[1];
  v9[0] = *Value;
  v9[1] = v4;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v9, v7);
  swift_release();
  if (v4)
  {
    double v5 = v9[0];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v5);
    swift_release();
    swift_release();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, uint64_t, uint64_t *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t result = specialized ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    type metadata accessor for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>();
    uint64_t v14 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))AGGraphGetValue();
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for GesturePhase<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    uint64_t Value = AGGraphGetValue();
    uint64_t v4 = *(void *)(Value + 8);
    double v5 = *(void *)(Value + 16);
    uint64_t v6 = *(void *)(Value + 24);
    uint64_t v7 = *(void *)(Value + 32);
    double v8 = *(void *)(Value + 40);
    unsigned int v11 = *(void *)(Value + 56);
    uint64_t v12 = *(void *)(Value + 48);
    uint64_t v9 = *(void *)(Value + 64);
    uint64_t v10 = *(unsigned char *)(Value + 72);
    double v15 = *(void *)Value;
    uint64_t v16 = v4;
    uint64_t v13 = v15;
    uint64_t v17 = v5;
    uint64_t v18 = v6;
    uint64_t v19 = v7;
    unint64_t v20 = v8;
    uint64_t v21 = v12;
    uint64_t v22 = v11;
    uint64_t v23 = v9;
    uint64_t v24 = v10;
    swift_retain();
    outlined copy of GesturePhase<SpatialEvent>(v15, v4, v5, v6, v7, v8, v12, v11, v9, v10);
    v14(&v25, a1 + 16, &v15);
    swift_release();
    outlined consume of GesturePhase<SpatialEvent>(v13, v4, v5, v6, v7, v8, v12, v11, v9, v10);
    double v15 = v25;
    LOWORD(v16) = v26;
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for GesturePhase<CGFloat>, MEMORY[0x263F8EF38], (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  TextLayoutQuery.value.getter(*(void *)a1, *(void *)(a1 + 8));
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [Text.LayoutKey.AnchoredLayout], (uint64_t)&type metadata for Text.LayoutKey.AnchoredLayout, MEMORY[0x263F8D488]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  unsigned char v3[48];
  uint64_t v4;
  uint64_t v5;

  double v5 = *MEMORY[0x263EF8340];
  AutomaticPaddingViewModifier.PaddingLayout.value.getter(*(_DWORD *)(a1 + 8), (uint64_t)v3);
  type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for _SafeAreaInsetsModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedContent);
  AGGraphSetOutputValue();
  uint64_t v1 = v4;
  swift_bridgeObjectRelease();
  return outlined consume of Transaction?(v1);
}

{
  uint64_t v1;
  uint64_t Value;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unsigned char v17[40];
  void v18[5];
  void v19[6];

  _OWORD v19[5] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t Value = AGGraphGetValue();
  long long v3 = *(void *)Value;
  uint64_t v4 = *(double *)(Value + 8);
  double v5 = *(double *)(Value + 16);
  uint64_t v6 = *(double *)(Value + 24);
  uint64_t v7 = *(double *)(Value + 32);
  double v8 = AGGraphGetValue();
  uint64_t v9 = *(double *)v8;
  uint64_t v10 = *(double *)(v8 + 8);
  unsigned int v11 = v6 - (*(double *)v8 - v4);
  v18[0] = v1;
  lazy protocol witness table accessor for type UniqueID and conformance UniqueID();
  swift_retain();
  AnyHashable.init<A>(_:)();
  outlined init with copy of AnyHashable((uint64_t)v19, (uint64_t)v18);
  outlined init with copy of CoordinateSpaceElement((uint64_t)v18, (uint64_t)v17);
  _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Element<CoordinateSpaceElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type CoordinateSpaceElement and conformance CoordinateSpaceElement, (uint64_t)&type metadata for CoordinateSpaceElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  uint64_t v12 = swift_allocObject();
  *(double *)(v12 + 32) = v11;
  *(double *)(v12 + 40) = v7 - (v10 - v5);
  outlined init with copy of CoordinateSpaceElement((uint64_t)v17, v12 + 48);
  *(void *)(v12 + 16) = v3;
  if (v3)
  {
    uint64_t v13 = *(void *)(v3 + 24);
    uint64_t v14 = __OFADD__(v13, 1);
    double v15 = v13 + 1;
    if (!v14) {
      goto LABEL_6;
    }
    __break(1u);
  }
  double v15 = 1;
LABEL_6:
  *(void *)(v12 + 24) = v15;
  swift_retain();
  outlined destroy of CoordinateSpaceElement((uint64_t)v17);
  swift_release();
  outlined destroy of CoordinateSpaceElement((uint64_t)v18);
  outlined destroy of AnyHashable((uint64_t)v19);
  v19[0] = v12;
  *(double *)&v19[1] = v9;
  *(double *)&long long v19[2] = v10;
  v19[3] = 0;
  v19[4] = 0;
  AGGraphSetOutputValue();
  return swift_release();
}

{
  _OWORD v2[4];
  _OWORD v3[4];
  _OWORD v4[8];
  uint64_t v5;

  double v5 = *MEMORY[0x263EF8340];
  InsetViewLayout.childGeometry()((uint64_t)v2, (uint64_t)v3, *(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
  type metadata accessor for (Path, FillStyle)(0, (unint64_t *)&lazy cache variable for type metadata for (ViewGeometry, ViewGeometry));
  AGGraphSetOutputValue();
  v4[4] = v3[0];
  v4[5] = v3[1];
  v4[6] = v3[2];
  v4[7] = v3[3];
  v4[0] = v2[0];
  v4[1] = v2[1];
  v4[2] = v2[2];
  v4[3] = v2[3];
  return outlined release of (ViewGeometry, ViewGeometry)((uint64_t)v4);
}

{
  int v1;

  uint64_t v1 = *(_DWORD *)(a1 + 4);
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for CategoryGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for CategoryGesture);
  if (*(unsigned char *)(AGGraphGetValue() + 8) == 1 && v1 != *MEMORY[0x263F288F8]) {
    AGGraphGetValue();
  }
  return AGGraphSetOutputValue();
}

{
  _OWORD v2[9];
  _OWORD v3[9];
  uint64_t v4;

  uint64_t v4 = *MEMORY[0x263EF8340];
  specialized LayoutDebug.value.getter(*(void *)(a1 + 8), (uint64_t)v2);
  AGGraphSetOutputValue();
  v3[6] = v2[6];
  v3[7] = v2[7];
  v3[8] = v2[8];
  v3[2] = v2[2];
  v3[3] = v2[3];
  v3[4] = v2[4];
  v3[5] = v2[5];
  v3[0] = v2[0];
  v3[1] = v2[1];
  return outlined release of GestureDebug.Data((uint64_t)v3);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  long long v3 = *(void *)(a1 + 16);
  swift_retain();
  specialized UpdateLayoutGestureBox.value.getter(v1, v2, v3);
  swift_release();
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t ModifiedViewList.ListModifier.apply(to:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 16);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 80))(a1);
  }
  outlined init with take of ScrollStateRequest((long long *)a1, (uint64_t)v15);
  uint64_t v5 = *(void *)(v2 + 32);
  int v6 = *(_DWORD *)(v2 + 40);
  uint64_t v7 = *(void *)(v2 + 48);
  uint64_t v8 = *(void *)(v2 + 72);
  uint64_t v9 = type metadata accessor for ModifiedViewList();
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = *(void *)(v2 + 24);
  uint64_t v12 = *(void *)(v2 + 56);
  uint64_t v13 = *(void *)(v2 + 64);
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = &protocol witness table for ModifiedViewList<A>;
  *(void *)a1 = v10;
  outlined init with take of ScrollStateRequest(v15, v10 + 16);
  *(void *)(v10 + 56) = v11;
  *(void *)(v10 + 64) = v5;
  *(_DWORD *)(v10 + 72) = v6;
  *(void *)(v10 + 80) = v7;
  *(void *)(v10 + 88) = v12;
  *(void *)(v10 + 96) = v13;
  *(void *)(v10 + 104) = v8;
  swift_retain();
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for ModifiedViewList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ProposedViewSize.init(_:)(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t _ProposedSize.init(_:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = result;
  *(unsigned char *)(a5 + 8) = a2 & 1;
  *(void *)(a5 + 16) = a3;
  *(unsigned char *)(a5 + 24) = a4 & 1;
  return result;
}

ValueMetadata *type metadata accessor for _OpacityEffect()
{
  return &type metadata for _OpacityEffect;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

unint64_t _ViewList_Sublist.list.getter()
{
  return *(unsigned int *)(v0 + 80) | ((unint64_t)*(unsigned __int8 *)(v0 + 84) << 32);
}

uint64_t LayoutProxy.init(context:layoutComputer:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  int v3 = *MEMORY[0x263F288F8];
  if ((a2 & 0x100000000) != 0) {
    int v4 = *MEMORY[0x263F288F8];
  }
  else {
    int v4 = a2;
  }
  *a3 = result;
  a3[1] = v4;
  a3[2] = v3;
  return result;
}

uint64_t static Edge.Set.vertical.getter()
{
  return 5;
}

uint64_t destroy for DynamicContainerInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = v2 + 8;
  unint64_t v4 = (a1 + *(unsigned __int8 *)(v2 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v4);
  unint64_t v5 = (*(void *)(v3 + 56) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t destroy for Event()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in reduce #1 <A>(key:) in PreferenceValues.Entry.reduce(_:)()
{
  return closure #1 in reduce #1 <A>(key:) in PreferenceValues.Entry.reduce(_:)(*(void *)(v0 + 32), *(void *)(v0 + 40));
}

ValueMetadata *type metadata accessor for _PaddingLayout()
{
  return &type metadata for _PaddingLayout;
}

uint64_t static VerticalAlignment.center.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for center, (uint64_t)&static VerticalAlignment.center);
}

double EdgeInsets.horizontal.getter(double a1, double a2, double a3, double a4)
{
  return a2 + a4;
}

ValueMetadata *type metadata accessor for _BlendModeEffect()
{
  return &type metadata for _BlendModeEffect;
}

ValueMetadata *type metadata accessor for GraphicsContext.Filter()
{
  return &type metadata for GraphicsContext.Filter;
}

ValueMetadata *type metadata accessor for Font.TextStyle()
{
  return &type metadata for Font.TextStyle;
}

uint64_t objectdestroy_38Tm()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();

  return swift_deallocObject();
}

BOOL specialized static ViewGeometry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8))
  {
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t v4 = *(void *)(a2 + 24);
    double v6 = *(double *)(a1 + 24);
    v13[0] = *(double *)(a1 + 16);
    v13[1] = v6;
    long long v7 = *(_OWORD *)(a1 + 48);
    long long v14 = *(_OWORD *)(a1 + 32);
    long long v15 = v7;
    v10[0] = v5;
    v10[1] = v4;
    long long v8 = *(_OWORD *)(a2 + 48);
    long long v11 = *(_OWORD *)(a2 + 32);
    long long v12 = v8;
    return specialized static ViewDimensions.== infix(_:_:)(v13, (uint64_t)v10);
  }
  else
  {
    return 0;
  }
}

BOOL specialized static ViewDimensions.== infix(_:_:)(double *a1, uint64_t a2)
{
  if (a1[2] != *(double *)(a2 + 16) || a1[3] != *(double *)(a2 + 24)) {
    return 0;
  }
  double v3 = *a1;
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(void *)(a2 + 8);
  double v7 = *(double *)(a2 + 32);
  double v6 = *(double *)(a2 + 40);
  double v9 = a1[4];
  double v8 = a1[5];
  BOOL v10 = (~*(void *)&v8 & 0x7FF0000000000000) == 0;
  if ((*(void *)&v8 & 0xFFFFFFFFFFFFFLL) == 0) {
    BOOL v10 = 0;
  }
  BOOL v11 = (~*(void *)&v7 & 0x7FF0000000000000) != 0;
  if ((*(void *)&v7 & 0xFFFFFFFFFFFFFLL) == 0) {
    BOOL v11 = 1;
  }
  BOOL v12 = (~*(void *)&v6 & 0x7FF0000000000000) == 0;
  if ((*(void *)&v6 & 0xFFFFFFFFFFFFFLL) == 0) {
    BOOL v12 = 0;
  }
  if ((~*(void *)&v9 & 0x7FF0000000000000) != 0 || (*(void *)&v9 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    if (v9 != v7 || !v11) {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  if (v10)
  {
    if (v4 != v5 || !v12) {
      return 0;
    }
  }
  else
  {
    if (v12) {
      return 0;
    }
    if (v8 != v6 || v4 != v5) {
      return 0;
    }
  }
  return *(void *)&v3 == *(void *)a2;
}

void *destructiveProjectEnumData for DisplayList.Content.Value(void *result)
{
  *result &= 0xFFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t _GraphInputs.subscript.setter(uint64_t a1, Swift::Int a2, Swift::Int a3, uint64_t a4)
{
  specialized _GraphInputs.subscript.setter(a1, a2, a3, a4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v6(a1, AssociatedTypeWitness);
}

uint64_t specialized _GraphInputs.subscript.setter(uint64_t a1, Swift::Int a2, Swift::Int a3, uint64_t a4)
{
  _GraphInputs.recordReusableInput<A>(_:)(a3, a3, a4);
  uint64_t v8 = *(void *)(a4 + 8);

  return specialized PropertyList.subscript.setter(a1, a2, a3, v8);
}

uint64_t PropertyList.mayNotBeEqual(to:)(unint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a1)
    {
      uint64_t v7 = MEMORY[0x263F8EE78];
      swift_retain();
      swift_retain();
      BOOL v4 = compareLists(_:_:ignoredTypes:)(a2, a1, (uint64_t)&v7);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      char v5 = !v4;
    }
    else
    {
      char v5 = 1;
    }
  }
  else
  {
    char v5 = a1 != 0;
  }
  return v5 & 1;
}

BOOL compareLists(_:_:ignoredTypes:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48))
  {
    unint64_t v3 = a2;
    unint64_t v4 = a1;
    if (a1 == a2) {
      return 1;
    }
    while (((*(uint64_t (**)(unint64_t, uint64_t))(*(void *)v4 + 208))(v3, a3) & 1) != 0)
    {
      uint64_t v6 = *(void *)(v3 + 24);
      if (*(void *)(v4 + 24))
      {
        if (!v6 || (compareLists(_:_:ignoredTypes:)() & 1) == 0) {
          return 0;
        }
      }
      else if (v6)
      {
        return 0;
      }
      unint64_t v4 = *(void *)(v4 + 32);
      unint64_t v3 = *(void *)(v3 + 32);
      if (!v4 || !v3) {
        return (v4 | v3) == 0;
      }
      if (v4 == v3) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t TypedElement.matches(_:ignoredTypes:)(void *a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(*v2 + 240);
  uint64_t v6 = *(void *)(*v2 + 232);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  BOOL v10 = (char *)&v17 - v9;
  if (a1[2] != v2[2]) {
    return 0;
  }
  if ((specialized Sequence<>.contains(_:)(v6, *a2) & 1) == 0)
  {
    BOOL v12 = (char *)v2 + *(void *)(*v2 + 248);
    (*(void (**)(uint64_t, uint64_t))(*a1 + 224))(AssociatedTypeWitness, AssociatedTypeWitness);
    char v13 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v5 + 24))(v12, v10, v6, v5);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
    if ((v13 & 1) == 0) {
      return 0;
    }
    long long v14 = (void *)*a2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    }
    unint64_t v16 = v14[2];
    unint64_t v15 = v14[3];
    if (v16 >= v15 >> 1) {
      long long v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
    }
    v14[2] = v16 + 1;
    v14[v16 + 4] = v6;
    *a2 = (uint64_t)v14;
  }
  return 1;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  BOOL v5;
  BOOL v6;

  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t TypedElement.value<A>(as:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = AssociatedTypeWitness - 8;
  if (*(void *)(v8 + 64) == *(void *)(*(void *)(a1 - 8) + 64))
  {
    uint64_t v9 = (char *)v2 + *(void *)(v5 + 248);
    BOOL v10 = *(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a1 - 8) + 16);
    return v10(a2, v9, a1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t initializeWithCopy for Cluster #1 in static Text.Effect.stopMarkers(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance TransactionPropertyKey<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static TransactionPropertyKey.valuesEqual(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t static TransactionPropertyKey.valuesEqual(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))() & 1;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return AGGraphSetOutputValue();
}

{
  float64x2_t *Value;

  uint64_t Value = (float64x2_t *)AGGraphGetValue();
  vaddq_f64(*Value, *(float64x2_t *)AGGraphGetValue());
  return AGGraphSetOutputValue();
}

{
  return ResolvedTextFilter.updateValue()();
}

{
  uint64_t v0;
  uint64_t *WeakValue;
  uint64_t v2;

  uint64_t v0 = *(void *)AGGraphGetValue();
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    uint64_t v2 = *WeakValue;
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    PropertyList.merge(_:)(v2);
    swift_release();
    if (v0) {
      swift_release();
    }
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  AGGraphGetValue();
  AGGraphGetWeakValue();
  return AGGraphSetOutputValue();
}

{
  uint64_t v0;

  AGGraphGetValue();
  if (AGGraphGetWeakValue())
  {
    swift_retain();
    uint64_t v0 = swift_retain();
    PropertyList.merge(_:)(v0);
    swift_release();
  }
  else
  {
    swift_retain();
  }
  AGGraphSetOutputValue();
  return swift_release();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return DynamicLayoutViewChildGeometry.updateValue()();
}

{
  LayoutChildGeometries.value.getter();
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for [ViewGeometry], (uint64_t)&type metadata for ViewGeometry, MEMORY[0x263F8D488]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  return CanvasSymbols.updateValue()();
}

{
  return specialized DynamicContainerInfo.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized LeafDisplayList.updateValue()();
}

{
  return specialized SpacerLayoutComputer.updateValue()((uint64_t)&type metadata for Spacer, (uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:), (uint64_t (*)(uint64_t, double))specialized StatefulRule<>.update<A>(modify:create:));
}

{
  return specialized InterpolatedDisplayList.updateValue()();
}

{
  void v1[2];

  v1[1] = *MEMORY[0x263EF8340];
  MergePreferenceKeys.value.getter(v1);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  return _AppearanceActionModifier.MergedCallbacks.updateValue()();
}

{
  return PlaceholderInfo.updateValue()();
}

{
  unsigned char v1[16];
  uint64_t v2;

  uint64_t v2 = *MEMORY[0x263EF8340];
  RootGeometry.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  void *Value;
  uint64_t v1;
  unsigned char v3[16];
  void *v4;
  void v5[2];

  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v1 = Value[1];
  v5[0] = *Value;
  v5[1] = v1;
  long long v4 = v5;
  swift_retain();
  swift_retain();
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v3, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  swift_release();
  return swift_release();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for ColorView, (void (*)(long long *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  ScrollPositionBindingModifier.AdjustedAnchor.value.getter();
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for UnitPoint?, (uint64_t)&type metadata for UnitPoint, MEMORY[0x263F8D8F0]);
  return AGGraphSetOutputValue();
}

{
  uint64_t Value;
  unsigned char v2[56];
  _OWORD v3[6];
  uint64_t v4;

  long long v4 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of _VariadicView_Children(Value, (uint64_t)v2);
  specialized ForEach<>.init(_:content:)((uint64_t)v2, (uint64_t)closure #1 in _VariadicView_Children.Child.value.getter, 0, v3);
  type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>();
  AGGraphSetOutputValue();
  return outlined destroy of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
}

{
  return specialized ForEachList.Init.updateValue()((uint64_t)&lazy cache variable for type metadata for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Info, (void (*)(void, uint64_t, uint64_t (*)()))type metadata accessor for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Info, (void (*)(uint64_t))specialized ForEachState.invalidateViewCounts(), (uint64_t)&lazy cache variable for type metadata for ForEachList<Slice<SubviewsCollection>, Subview.ID, Subview>);
}

{
  return specialized ShapeStyleResolver.updateValue()();
}

{
  return specialized ShapeStyleResolver.updateValue()();
}

{
  return specialized EnvironmentalViewChild.updateValue()();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5[3];

  v5[2] = *MEMORY[0x263EF8340];
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v1 = *Value;
  uint64_t v2 = Value[1];
  v5[0] = *Value;
  v5[1] = v2;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v5, 0, 0, 0, 2);
  swift_release();
  if (v2)
  {
    long long v3 = v5[0];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v1, v3);
    swift_release();
    swift_release();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11[3];

  _OWORD v11[2] = *MEMORY[0x263EF8340];
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v1 = *Value;
  uint64_t v2 = Value[1];
  v11[0] = *Value;
  v11[1] = v2;
  long long v3 = AGGraphGetValue();
  long long v4 = *(void *)v3;
  uint64_t v5 = *(unsigned __int8 *)(v3 + 8);
  BOOL v6 = *(void *)(v3 + 16);
  if (*(unsigned char *)(v3 + 26)) {
    uint64_t v7 = 0x10000;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned __int8 *)(v3 + 24) | (*(unsigned __int8 *)(v3 + 25) << 8) | v7;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v11, v4, v5, v6, v8);
  swift_release();
  if (v2)
  {
    uint64_t v9 = v11[0];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v1, v9);
    swift_release();
    swift_release();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  unsigned char v1[16];
  uint64_t v2;

  uint64_t v2 = *MEMORY[0x263EF8340];
  SecondaryLayerGeometryQuery.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11[3];

  _OWORD v11[2] = *MEMORY[0x263EF8340];
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v2 = *Value;
  uint64_t v1 = Value[1];
  v11[0] = *Value;
  v11[1] = v1;
  long long v3 = one-time initialization token for black;
  swift_retain();
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  long long v4 = static Color.black;
  uint64_t v5 = one-time initialization token for foreground;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  if (v4 == (void *)static Color.foreground || ((*(uint64_t (**)(void))(*(void *)v4 + 88))() & 1) != 0)
  {
    BOOL v6 = 0;
  }
  else
  {
    swift_retain();
    BOOL v6 = (uint64_t)v4;
  }
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v11, v6);
  swift_release();
  swift_release();
  if (v1)
  {
    uint64_t v7 = v11[0];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v7);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v7 = v11[0];
  }
  uint64_t v8 = static Color.black;
  swift_retain_n();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v11, (uint64_t)v8);
  swift_release();
  swift_release();
  if (v1)
  {
    uint64_t v9 = v11[0];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v7, v9);
    swift_release_n();
  }
  swift_release();
  swift_release();
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  void (*v0)(unsigned char *__return_ptr, uint64_t);
  uint64_t v1;
  unsigned char v3[4];
  uint64_t v4;

  long long v4 = *MEMORY[0x263EF8340];
  uint64_t v0 = *(void (**)(unsigned char *__return_ptr, uint64_t))(**(void **)AGGraphGetValue() + 80);
  uint64_t v1 = swift_retain();
  v0(v3, v1);
  swift_release();
  v3[3] = v3[0];
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Axis?, (uint64_t)&type metadata for Axis, MEMORY[0x263F8D8F0]);
  return AGGraphSetOutputValue();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized InterpolatedDisplayList.updateValue()();
}

{
  void v1[2];

  v1[1] = *MEMORY[0x263EF8340];
  HostPreferencesCombiner.value.getter(v1);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t Value;
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  unsigned char v17[16];
  _OWORD *v18;
  _OWORD v19[10];
  _OWORD v20[2];
  _OWORD v21[10];
  _OWORD v22[2];
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  _OWORD v33[2];

  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(_OWORD *)(Value + 48);
  long long v3 = *(_OWORD *)Value;
  uint64_t v2 = *(_OWORD *)(Value + 16);
  _DWORD v21[2] = *(_OWORD *)(Value + 32);
  v21[3] = v1;
  v21[0] = v3;
  v21[1] = v2;
  long long v4 = *(_OWORD *)(Value + 112);
  BOOL v6 = *(_OWORD *)(Value + 64);
  uint64_t v5 = *(_OWORD *)(Value + 80);
  v21[6] = *(_OWORD *)(Value + 96);
  v21[7] = v4;
  v21[4] = v6;
  v21[5] = v5;
  uint64_t v8 = *(_OWORD *)(Value + 144);
  uint64_t v7 = *(_OWORD *)(Value + 160);
  uint64_t v9 = *(_OWORD *)(Value + 128);
  *(_DWORD *)((char *)v22 + 15) = *(_DWORD *)(Value + 175);
  v21[9] = v8;
  v22[0] = v7;
  v21[8] = v9;
  BOOL v10 = *(_OWORD *)(Value + 160);
  uint64_t v32 = *(_OWORD *)(Value + 144);
  v33[0] = v10;
  *(_DWORD *)((char *)v33 + 15) = *(_DWORD *)(Value + 175);
  BOOL v11 = *(_OWORD *)(Value + 128);
  BOOL v12 = *(_OWORD *)(Value + 80);
  uint64_t v27 = *(_OWORD *)(Value + 64);
  uint64_t v28 = v12;
  char v13 = *(_OWORD *)(Value + 112);
  uint64_t v29 = *(_OWORD *)(Value + 96);
  uint64_t v30 = v13;
  uint64_t v31 = v11;
  long long v14 = *(_OWORD *)(Value + 16);
  uint64_t v23 = *(_OWORD *)Value;
  uint64_t v24 = v14;
  unint64_t v15 = *(_OWORD *)(Value + 48);
  uint64_t v25 = *(_OWORD *)(Value + 32);
  long long v26 = v15;
  v19[8] = v11;
  v19[9] = v32;
  v20[0] = v33[0];
  *(_DWORD *)((char *)v20 + 15) = *(_DWORD *)((char *)v33 + 15);
  v19[4] = v27;
  _OWORD v19[5] = v28;
  v19[6] = v29;
  v19[7] = v30;
  v19[0] = v23;
  v19[1] = v24;
  long long v19[2] = v25;
  v19[3] = v15;
  uint64_t v18 = v19;
  outlined retain of Image.Resolved((uint64_t)v21);
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v17, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  return outlined release of Image.Resolved((uint64_t)v21);
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return DynamicTransaction.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for _OpacityEffect, (void (*)(uint64_t *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for OpacityRendererEffect, (void (*)(uint64_t *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  double *Value;

  AGGraphGetValue();
  AGGraphGetValue();
  uint64_t Value = (double *)AGGraphGetValue();
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(*Value);
  return AGGraphSetOutputValue();
}

{
  void v1[4];

  v1[3] = *MEMORY[0x263EF8340];
  _SafeAreaInsetsModifier.Insets.value.getter(v1);
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v1 = Value[2];
  if (v1 < 0)
  {
    uint64_t v2 = 0;
    long long v3 = 0;
    long long v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v2 = *Value;
    long long v3 = Value[1];
    long long v4 = v1 & 1;
    uint64_t v5 = Value[3];
    outlined copy of Text.Suffix.Storage(*Value, v3, v1);
  }
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for Text?, (uint64_t)&type metadata for Text, MEMORY[0x263F8D8F0]);
  AGGraphSetOutputValue();
  return outlined consume of Text?(v2, v3, v4, v5);
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return specialized LeafLayoutComputer.updateValue()();
}

{
  return SharedFrame.updateValue()();
}

{
  return specialized UnaryPositionAwareLayoutComputer.updateValue()();
}

{
  uint64_t Value;

  uint64_t Value = AGGraphGetValue();
  vsubq_f64(*(float64x2_t *)(Value + 24), vsubq_f64(*(float64x2_t *)AGGraphGetValue(), *(float64x2_t *)(Value + 8)));
  swift_retain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  void v1[6];

  v1[5] = *MEMORY[0x263EF8340];
  RootTransform.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  void v1[6];

  v1[5] = *MEMORY[0x263EF8340];
  _SafeAreaInsetsModifier.Transform.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized LeafResponderFilter.updateValue()();
}

{
  return HitTestBindingFilter.updateValue()();
}

{
  uint64_t Value;
  unsigned char v2[72];
  _OWORD v3[7];
  uint64_t v4;

  long long v4 = *MEMORY[0x263EF8340];
  _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, MEMORY[0x263F8E738]);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of Slice<SubviewsCollection>(Value, (uint64_t)v2);
  specialized ForEach<>.init(_:content:)((uint64_t)v2, (uint64_t)closure #1 in SubviewsCollectionSlice.Child.value.getter, 0, v3);
  type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>();
  AGGraphSetOutputValue();
  return outlined destroy of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>);
}

{
  return specialized DynamicViewList.updateValue()();
}

{
  return specialized ForEachList.Init.updateValue()((uint64_t)&lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info, (void (*)(void, uint64_t, uint64_t (*)()))type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info, (void (*)(uint64_t))specialized ForEachState.invalidateViewCounts(), (uint64_t)&lazy cache variable for type metadata for ForEachList<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for AnyShape, (void (*)(uint64_t *, void, uint64_t, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for AnyLayout, (void (*)(uint64_t *, void, uint64_t, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()((void (*)(uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((void (*)(uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6[2];
  void v7[8];

  _OWORD v7[7] = *MEMORY[0x263EF8340];
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v1 = *Value;
  uint64_t v2 = Value[1];
  v6[0] = *Value;
  v6[1] = v2;
  long long v3 = AGGraphGetValue();
  outlined init with take of ResolvedTextSuffix(v3, (uint64_t)v7);
  outlined retain of ResolvedTextSuffix(v7, (void (*)(void, void, void, void, void, void, void))outlined copy of ResolvedTextSuffix);
  swift_retain_n();
  outlined retain of ResolvedTextSuffix(v7, (void (*)(void, void, void, void, void, void, void))outlined copy of ResolvedTextSuffix);
  swift_retain();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v6, (uint64_t)v7);
  swift_release();
  outlined retain of ResolvedTextSuffix(v7, (void (*)(void, void, void, void, void, void, void))outlined consume of ResolvedTextSuffix);
  if (v2)
  {
    long long v4 = v6[0];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v1, v4);
    swift_release();
    swift_release();
  }
  swift_release();
  outlined retain of ResolvedTextSuffix(v7, (void (*)(void, void, void, void, void, void, void))outlined consume of ResolvedTextSuffix);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_retain();
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  return swift_release();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for EdgeInsets, (void (*)(_OWORD *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  return AGGraphSetOutputValue();
}

{
  uint64_t v0;
  uint64_t Value;
  long long v2;

  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollPhaseState>, (uint64_t)&type metadata for ScrollPhaseState, MEMORY[0x263F8E0F8]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2461B9DC0;
  uint64_t Value = AGGraphGetValue();
  uint64_t v2 = *(_OWORD *)(Value + 8);
  *(unsigned char *)(v0 + 32) = *(unsigned char *)Value;
  *(_OWORD *)(v0 + 40) = v2;
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [ScrollPhaseState], (uint64_t)&type metadata for ScrollPhaseState, MEMORY[0x263F8D488]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  return specialized UnaryPositionAwareLayoutComputer.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  void v1[3];

  v1[2] = *MEMORY[0x263EF8340];
  MaskDisplayList.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  char *Value;
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  uint64_t (*v10)(void, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _OWORD __dst[11];
  long long v15;
  uint64_t v16;
  _OWORD v17[10];
  _OWORD v18[2];
  _OWORD v19[12];
  uint64_t v20;
  uint64_t v21;

  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t Value = (char *)AGGraphGetValue();
  uint64_t v1 = *((_OWORD *)Value + 3);
  long long v3 = *(_OWORD *)Value;
  uint64_t v2 = *((_OWORD *)Value + 1);
  void v17[2] = *((_OWORD *)Value + 2);
  v17[3] = v1;
  v17[0] = v3;
  v17[1] = v2;
  long long v4 = *((_OWORD *)Value + 7);
  BOOL v6 = *((_OWORD *)Value + 4);
  uint64_t v5 = *((_OWORD *)Value + 5);
  v17[6] = *((_OWORD *)Value + 6);
  v17[7] = v4;
  v17[4] = v6;
  v17[5] = v5;
  uint64_t v8 = *((_OWORD *)Value + 9);
  uint64_t v7 = *((_OWORD *)Value + 10);
  uint64_t v9 = *((_OWORD *)Value + 8);
  *(_DWORD *)((char *)v18 + 15) = *(_DWORD *)(Value + 175);
  v17[9] = v8;
  v18[0] = v7;
  v17[8] = v9;
  BOOL v10 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for Color?, (uint64_t)&type metadata for Color, MEMORY[0x263F8D8F0]);
  BOOL v11 = *(void *)AGGraphGetValue();
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, v10);
  BOOL v12 = *(void *)AGGraphGetValue();
  memmove(__dst, Value, 0xB3uLL);
  *((void *)&v15 + 1) = v11;
  unint64_t v16 = v12;
  outlined retain of Image.Resolved((uint64_t)v17);
  swift_retain();
  swift_retain();
  AGGraphSetOutputValue();
  v19[10] = __dst[10];
  v19[11] = v15;
  unint64_t v20 = v16;
  v19[6] = __dst[6];
  v19[7] = __dst[7];
  v19[8] = __dst[8];
  v19[9] = __dst[9];
  long long v19[2] = __dst[2];
  v19[3] = __dst[3];
  v19[4] = __dst[4];
  _OWORD v19[5] = __dst[5];
  v19[0] = __dst[0];
  v19[1] = __dst[1];
  return outlined release of PlatformImageRepresentableContext((uint64_t)v19);
}

{
  uint64_t Value;
  char v1;
  char v2;
  char v3;
  long long v4;
  unsigned char v6[16];
  long long *v7;
  long long v8;
  char v9;
  char v10;
  char v11;
  long long v12;
  long long v13;
  long long v14;
  char v15;
  long long v16;
  long long v17;
  long long v18;
  char v19;
  long long v20;
  long long v21;
  long long v22;
  char v23;
  char v24;
  char v25;
  char v26;

  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(unsigned char *)(Value + 16);
  uint64_t v2 = *(unsigned char *)(Value + 17);
  long long v3 = *(unsigned char *)(Value + 18);
  long long v4 = *(_OWORD *)Value;
  long long v26 = 1;
  uint64_t v25 = 1;
  uint64_t v24 = 1;
  uint64_t v8 = v4;
  uint64_t v9 = v1;
  BOOL v10 = v2;
  BOOL v11 = v3;
  BOOL v12 = 0u;
  char v13 = 0u;
  long long v14 = 0u;
  unint64_t v15 = 1;
  unint64_t v16 = 0u;
  uint64_t v17 = 0u;
  uint64_t v18 = 0u;
  uint64_t v19 = 1;
  unint64_t v20 = 0u;
  uint64_t v21 = 0u;
  uint64_t v22 = 0u;
  uint64_t v23 = 1;
  uint64_t v7 = &v8;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v6, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized LeafDisplayList.updateValue()();
}

{
  return specialized StaticBody.updateValue()((uint64_t)&type metadata for RadialGradient, (void (*)(uint64_t *, uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized LeafLayoutComputer.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()((void (*)(void))type metadata accessor for _ShapeView<Rectangle, RadialGradient>);
}

{
  return specialized ShapeStyledDisplayList.updateValue()((void (*)(void))type metadata accessor for _ShapeView<Rectangle, LinearGradient>);
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized ShapeStyleResolver.updateValue()((uint64_t)&type metadata for RadialGradient, (void (*)(long long *))specialized Paint._apply(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  uint64_t Value;
  char v1;
  char v2;
  long long v3;
  long long v4;
  unsigned char v6[16];
  _OWORD *v7;
  _OWORD v8[2];
  char v9;
  char v10;
  long long v11;
  long long v12;
  long long v13;
  char v14;
  long long v15;
  long long v16;
  long long v17;
  char v18;
  long long v19;
  long long v20;
  long long v21;
  char v22;
  char v23;
  char v24;
  char v25;

  type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(unsigned char *)(Value + 32);
  uint64_t v2 = *(unsigned char *)(Value + 33);
  long long v3 = *(_OWORD *)Value;
  long long v4 = *(_OWORD *)(Value + 16);
  uint64_t v25 = 1;
  uint64_t v24 = 1;
  uint64_t v23 = 1;
  v8[0] = v3;
  v8[1] = v4;
  uint64_t v9 = v1;
  BOOL v10 = v2;
  BOOL v11 = 0u;
  BOOL v12 = 0u;
  char v13 = 0u;
  long long v14 = 1;
  unint64_t v15 = 0u;
  unint64_t v16 = 0u;
  uint64_t v17 = 0u;
  uint64_t v18 = 1;
  uint64_t v19 = 0u;
  unint64_t v20 = 0u;
  uint64_t v21 = 0u;
  uint64_t v22 = 1;
  uint64_t v7 = v8;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v6, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized SpacerLayoutComputer.updateValue()((uint64_t)&type metadata for _VSpacer, (uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:), (uint64_t (*)(uint64_t, double))specialized StatefulRule<>.update<A>(modify:create:));
}

{
  return specialized SpacerLayoutComputer.updateValue()((uint64_t)&type metadata for _HSpacer, (uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:), (uint64_t (*)(uint64_t, double))specialized StatefulRule<>.update<A>(modify:create:));
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized LeafLayoutComputer.updateValue()();
}

{
  return specialized SpacerLayoutComputer.updateValue()((uint64_t)&type metadata for _TextBaselineRelativeSpacer, (uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:), (uint64_t (*)(uint64_t, double))specialized StatefulRule<>.update<A>(modify:create:));
}

{
  return specialized LeafResponderFilter.updateValue()();
}

{
  return specialized LeafLayoutComputer.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return DynamicTextView.DynamicTextEnvironment.updateValue()();
}

{
  return DynamicTextView.DynamicTextFilter.updateValue()();
}

{
  return ForegroundLayerDisplayList.updateValue()();
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return specialized ChildEnvironment.updateValue()();
}

{
  return specialized ChildEnvironment.updateValue()();
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return DrawingGroupDisplayList.updateValue()();
}

{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  __n128 result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x270FA5388](result);
    MEMORY[0x270FA5388](v1);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v2, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  return FillMaskDisplayList.updateValue()();
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return SubviewsPhase.updateValue()();
}

{
  return specialized RepeatPhase.updateValue()();
}

{
  return specialized Map2Phase.updateValue()(&lazy cache variable for type metadata for (_:_:), &lazy cache variable for type metadata for GesturePhase<CGFloat>, MEMORY[0x263F8EF38]);
}

{
  return specialized EventListenerPhase.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized Map2Phase.updateValue()(&lazy cache variable for type metadata for (_:_:), (unint64_t *)&lazy cache variable for type metadata for GesturePhase<Double>, MEMORY[0x263F8D538]);
}

{
  return specialized DurationPhase.updateValue()();
}

{
  return specialized EventListenerPhase.updateValue()();
}

{
  uint64_t result;
  void (*v1)(uint64_t *__return_ptr, uint64_t *);
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  uint64_t v18 = *MEMORY[0x263EF8340];
  __n128 result = specialized ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for MapGesture<TappableEvent, TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for MapGesture);
    uint64_t v1 = *(void (**)(uint64_t *__return_ptr, uint64_t *))AGGraphGetValue();
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    uint64_t Value = AGGraphGetValue();
    long long v4 = *(void *)(Value + 8);
    uint64_t v5 = *(void *)(Value + 16);
    BOOL v10 = *(void *)Value;
    long long v3 = v10;
    BOOL v11 = v4;
    BOOL v12 = v5;
    char v13 = *(unsigned char *)(Value + 24);
    BOOL v6 = v13;
    swift_retain();
    outlined copy of GesturePhase<TappableEvent>(v10, v4, v5, v13);
    v1(&v14, &v10);
    swift_release();
    outlined consume of GesturePhase<TappableEvent>(v3, v4, v5, v6);
    uint64_t v7 = v14;
    uint64_t v8 = v15;
    uint64_t v9 = v16;
    LOBYTE(v4) = v17;
    BOOL v10 = v14;
    BOOL v11 = v15;
    BOOL v12 = v16;
    char v13 = v17;
    AGGraphSetOutputValue();
    return outlined consume of GesturePhase<TappableEvent>(v7, v8, v9, v4);
  }
  return result;
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized SizeThatFitsTransactions.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()(MEMORY[0x263F8EF38], (void (*)(uint64_t *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for ViewOrigin, (void (*)(long long *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for _OffsetEffect, (void (*)(long long *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for RadialGradient._Paint, (void (*)(uint64_t *, void, uint64_t, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for AngularGradient._Paint, (void (*)(uint64_t *, void, uint64_t, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for _ContrastEffect, (void (*)(uint64_t *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for _GrayscaleEffect, (void (*)(uint64_t *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for _BrightnessEffect, (void (*)(uint64_t *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for _SaturationEffect, (void (*)(uint64_t *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for EllipticalGradient._Paint, (void (*)(uint64_t *, void, uint64_t, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for _HueRotationEffect, (void (*)(uint64_t *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for RectangleCornerRadii, (void (*)(_OWORD *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for _ColorMultiplyEffect._Resolved, (void (*)(long long *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for ContainerRelativeShape._Inset, (void (*)(uint64_t *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for Angle, (void (*)(uint64_t *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for Circle._Inset, (void (*)(uint64_t *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for Capsule._Inset, (void (*)(uint64_t *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for Ellipse._Inset, (void (*)(uint64_t *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for UnitRect, (void (*)(_OWORD *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()((uint64_t)&type metadata for Rectangle._Inset, (void (*)(uint64_t *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()();
}

{
  return specialized AnimatableAttribute.updateValue()(type metadata accessor for CGSize, (void (*)(long long *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized AnimatableAttribute.updateValue()(type metadata accessor for CGPoint, (void (*)(long long *, void, void, uint64_t))specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:));
}

{
  return specialized UnaryLayoutComputer.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()((void (*)(void))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>, (void (*)(void, uint64_t, void, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for Rectangle, (void (*)(void))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>, (void (*)(uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  unsigned char v4[16];
  uint64_t *v5;
  uint64_t v6;
  char v7;
  char v8;
  long long v9;
  long long v10;
  long long v11;
  char v12;
  long long v13;
  long long v14;
  long long v15;
  char v16;
  long long v17;
  long long v18;
  long long v19;
  char v20;
  char v21;
  char v22;
  char v23;

  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  uint64_t v2 = *(unsigned char *)(Value + 9);
  uint64_t v7 = *(unsigned char *)(Value + 8);
  uint64_t v23 = 1;
  uint64_t v22 = 1;
  uint64_t v21 = 1;
  BOOL v6 = v1;
  uint64_t v8 = v2;
  uint64_t v9 = 0u;
  BOOL v10 = 0u;
  BOOL v11 = 0u;
  BOOL v12 = 1;
  char v13 = 0u;
  long long v14 = 0u;
  unint64_t v15 = 0u;
  unint64_t v16 = 1;
  uint64_t v17 = 0u;
  uint64_t v18 = 0u;
  uint64_t v19 = 0u;
  unint64_t v20 = 1;
  uint64_t v5 = &v6;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v4, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()(&lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (void (*)(void, uint64_t, void, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for Rectangle._Inset, (void (*)(void))type metadata accessor for _ShapeView<Rectangle._Inset, ForegroundStyle>, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((uint64_t)&type metadata for Rectangle._Inset, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized LeafLayoutComputer.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()((void (*)(void))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>, (void (*)(void, uint64_t, void, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for Ellipse, (void (*)(void))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>, (void (*)(uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((void (*)(uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  unsigned char v4[16];
  uint64_t *v5;
  uint64_t v6;
  char v7;
  char v8;
  long long v9;
  long long v10;
  long long v11;
  char v12;
  long long v13;
  long long v14;
  long long v15;
  char v16;
  long long v17;
  long long v18;
  long long v19;
  char v20;
  char v21;
  char v22;
  char v23;

  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  uint64_t v2 = *(unsigned char *)(Value + 9);
  uint64_t v7 = *(unsigned char *)(Value + 8);
  uint64_t v23 = 1;
  uint64_t v22 = 1;
  uint64_t v21 = 1;
  BOOL v6 = v1;
  uint64_t v8 = v2;
  uint64_t v9 = 0u;
  BOOL v10 = 0u;
  BOOL v11 = 0u;
  BOOL v12 = 1;
  char v13 = 0u;
  long long v14 = 0u;
  unint64_t v15 = 0u;
  unint64_t v16 = 1;
  uint64_t v17 = 0u;
  uint64_t v18 = 0u;
  uint64_t v19 = 0u;
  unint64_t v20 = 1;
  uint64_t v5 = &v6;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v4, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()(&lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (void (*)(void, uint64_t, void, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for Ellipse._Inset, (void (*)(void))type metadata accessor for _ShapeView<Ellipse._Inset, ForegroundStyle>, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((uint64_t)&type metadata for Ellipse._Inset, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  unsigned char *Value;
  char v1;
  char v2;
  unsigned char v4[16];
  unsigned char *v5;
  unsigned char v6[8];
  long long v7;
  long long v8;
  long long v9;
  char v10;
  long long v11;
  long long v12;
  long long v13;
  char v14;
  long long v15;
  long long v16;
  long long v17;
  char v18;
  char v19;
  char v20;
  char v21;

  type metadata accessor for _ShapeView<Capsule, ForegroundStyle>();
  uint64_t Value = (unsigned char *)AGGraphGetValue();
  uint64_t v1 = Value[1];
  uint64_t v2 = Value[2];
  v6[0] = *Value;
  uint64_t v21 = 1;
  unint64_t v20 = 1;
  uint64_t v19 = 1;
  v6[1] = v1;
  _OWORD v6[2] = v2;
  uint64_t v7 = 0u;
  uint64_t v8 = 0u;
  uint64_t v9 = 0u;
  BOOL v10 = 1;
  BOOL v11 = 0u;
  BOOL v12 = 0u;
  char v13 = 0u;
  long long v14 = 1;
  unint64_t v15 = 0u;
  unint64_t v16 = 0u;
  uint64_t v17 = 0u;
  uint64_t v18 = 1;
  uint64_t v5 = v6;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v4, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  unsigned char v4[16];
  uint64_t *v5;
  uint64_t v6;
  char v7;
  char v8;
  long long v9;
  long long v10;
  long long v11;
  char v12;
  long long v13;
  long long v14;
  long long v15;
  char v16;
  long long v17;
  long long v18;
  long long v19;
  char v20;
  char v21;
  char v22;
  char v23;

  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  uint64_t v2 = *(unsigned char *)(Value + 9);
  uint64_t v7 = *(unsigned char *)(Value + 8);
  uint64_t v23 = 1;
  uint64_t v22 = 1;
  uint64_t v21 = 1;
  BOOL v6 = v1;
  uint64_t v8 = v2;
  uint64_t v9 = 0u;
  BOOL v10 = 0u;
  BOOL v11 = 0u;
  BOOL v12 = 1;
  char v13 = 0u;
  long long v14 = 0u;
  unint64_t v15 = 0u;
  unint64_t v16 = 1;
  uint64_t v17 = 0u;
  uint64_t v18 = 0u;
  uint64_t v19 = 0u;
  unint64_t v20 = 1;
  uint64_t v5 = &v6;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v4, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()(&lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (void (*)(void *__return_ptr, void *, double, double, double, double, double))specialized Shape.effectivePath(in:));
}

{
  return specialized ShapeStyledResponderFilter.updateValue()(&lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (void (*)(void, uint64_t, void, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for Capsule._Inset, (void (*)(void))type metadata accessor for _ShapeView<Capsule._Inset, ForegroundStyle>, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((uint64_t)&type metadata for Capsule._Inset, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()((void (*)(void))type metadata accessor for _ShapeView<Circle, ForegroundStyle>, (void (*)(void, uint64_t, void, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for Circle, (void (*)(void))type metadata accessor for _ShapeView<Circle, ForegroundStyle>, (void (*)(uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  unsigned char v4[16];
  uint64_t *v5;
  uint64_t v6;
  char v7;
  char v8;
  long long v9;
  long long v10;
  long long v11;
  char v12;
  long long v13;
  long long v14;
  long long v15;
  char v16;
  long long v17;
  long long v18;
  long long v19;
  char v20;
  char v21;
  char v22;
  char v23;

  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  uint64_t v2 = *(unsigned char *)(Value + 9);
  uint64_t v7 = *(unsigned char *)(Value + 8);
  uint64_t v23 = 1;
  uint64_t v22 = 1;
  uint64_t v21 = 1;
  BOOL v6 = v1;
  uint64_t v8 = v2;
  uint64_t v9 = 0u;
  BOOL v10 = 0u;
  BOOL v11 = 0u;
  BOOL v12 = 1;
  char v13 = 0u;
  long long v14 = 0u;
  unint64_t v15 = 0u;
  unint64_t v16 = 1;
  uint64_t v17 = 0u;
  uint64_t v18 = 0u;
  uint64_t v19 = 0u;
  unint64_t v20 = 1;
  uint64_t v5 = &v6;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v4, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()(&lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (void (*)(void, uint64_t, void, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for Circle._Inset, (void (*)(void))type metadata accessor for _ShapeView<Circle._Inset, ForegroundStyle>, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((uint64_t)&type metadata for Circle._Inset, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized LeafLayoutComputer.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  uint64_t Value;
  char v1;
  char v2;
  char v3;
  long long v4;
  long long v5;
  unsigned char v7[16];
  _OWORD *v8;
  _OWORD v9[2];
  char v10;
  char v11;
  char v12;
  long long v13;
  long long v14;
  long long v15;
  char v16;
  long long v17;
  long long v18;
  long long v19;
  char v20;
  long long v21;
  long long v22;
  long long v23;
  char v24;
  char v25;
  char v26;
  char v27;

  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(unsigned char *)(Value + 32);
  uint64_t v2 = *(unsigned char *)(Value + 33);
  long long v3 = *(unsigned char *)(Value + 34);
  long long v4 = *(_OWORD *)Value;
  uint64_t v5 = *(_OWORD *)(Value + 16);
  uint64_t v27 = 1;
  long long v26 = 1;
  uint64_t v25 = 1;
  v9[0] = v4;
  v9[1] = v5;
  BOOL v10 = v1;
  BOOL v11 = v2;
  BOOL v12 = v3;
  char v13 = 0u;
  long long v14 = 0u;
  unint64_t v15 = 0u;
  unint64_t v16 = 1;
  uint64_t v17 = 0u;
  uint64_t v18 = 0u;
  uint64_t v19 = 0u;
  unint64_t v20 = 1;
  uint64_t v21 = 0u;
  uint64_t v22 = 0u;
  uint64_t v23 = 0u;
  uint64_t v24 = 1;
  uint64_t v8 = v9;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v7, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  uint64_t Value;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  long long v5;
  long long v6;
  unsigned char v8[16];
  _OWORD *v9;
  _OWORD v10[2];
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  long long v15;
  long long v16;
  long long v17;
  char v18;
  long long v19;
  long long v20;
  long long v21;
  char v22;
  long long v23;
  long long v24;
  long long v25;
  char v26;
  char v27;
  char v28;
  char v29;

  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(unsigned char *)(Value + 32);
  uint64_t v2 = *(void *)(Value + 40);
  long long v3 = *(unsigned char *)(Value + 48);
  long long v4 = *(unsigned char *)(Value + 49);
  uint64_t v5 = *(_OWORD *)Value;
  BOOL v6 = *(_OWORD *)(Value + 16);
  uint64_t v29 = 1;
  uint64_t v28 = 1;
  uint64_t v27 = 1;
  v10[0] = v5;
  v10[1] = v6;
  BOOL v11 = v1;
  BOOL v12 = v2;
  char v13 = v3;
  long long v14 = v4;
  unint64_t v15 = 0u;
  unint64_t v16 = 0u;
  uint64_t v17 = 0u;
  uint64_t v18 = 1;
  uint64_t v19 = 0u;
  unint64_t v20 = 0u;
  uint64_t v21 = 0u;
  uint64_t v22 = 1;
  uint64_t v23 = 0u;
  uint64_t v24 = 0u;
  uint64_t v25 = 0u;
  long long v26 = 1;
  uint64_t v9 = v10;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v8, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()((void (*)(void))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>, (void (*)(void, uint64_t, void, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for ContainerRelativeShape, (void (*)(void))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>, (void (*)(uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((void (*)(uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  unsigned char v4[16];
  uint64_t *v5;
  uint64_t v6;
  char v7;
  char v8;
  long long v9;
  long long v10;
  long long v11;
  char v12;
  long long v13;
  long long v14;
  long long v15;
  char v16;
  long long v17;
  long long v18;
  long long v19;
  char v20;
  char v21;
  char v22;
  char v23;

  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  uint64_t v2 = *(unsigned char *)(Value + 9);
  uint64_t v7 = *(unsigned char *)(Value + 8);
  uint64_t v23 = 1;
  uint64_t v22 = 1;
  uint64_t v21 = 1;
  BOOL v6 = v1;
  uint64_t v8 = v2;
  uint64_t v9 = 0u;
  BOOL v10 = 0u;
  BOOL v11 = 0u;
  BOOL v12 = 1;
  char v13 = 0u;
  long long v14 = 0u;
  unint64_t v15 = 0u;
  unint64_t v16 = 1;
  uint64_t v17 = 0u;
  uint64_t v18 = 0u;
  uint64_t v19 = 0u;
  unint64_t v20 = 1;
  uint64_t v5 = &v6;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v4, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()(&lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (void (*)(void *__return_ptr, void *, double, double, double, double, double))specialized Shape.effectivePath(in:));
}

{
  return specialized ShapeStyledResponderFilter.updateValue()(&lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (void (*)(void, uint64_t, void, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for ContainerRelativeShape._Inset, (void (*)(void))type metadata accessor for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((uint64_t)&type metadata for ContainerRelativeShape._Inset, (void (*)(uint64_t, double))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized ChildEnvironment.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized ForEachList.Init.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized ShapeStyleResolver.updateValue()((uint64_t)&type metadata for EllipticalGradient, (void (*)(long long *))specialized Paint._apply(to:));
}

{
  return specialized LeafLayoutComputer.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()((void (*)(void))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>);
}

{
  return specialized ShapeStyledResponderFilter.updateValue()((void (*)(void))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>, (void (*)(uint64_t *, void, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for EllipticalGradient, (void (*)(void))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>, (void (*)(uint64_t *, uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((uint64_t)&type metadata for EllipticalGradient, (void (*)(uint64_t *, uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  uint64_t Value;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  long long v5;
  unsigned char v7[16];
  long long *v8;
  long long v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  long long v14;
  long long v15;
  long long v16;
  char v17;
  long long v18;
  long long v19;
  long long v20;
  char v21;
  long long v22;
  long long v23;
  long long v24;
  char v25;
  char v26;
  char v27;
  char v28;

  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(unsigned char *)(Value + 16);
  uint64_t v2 = *(void *)(Value + 24);
  long long v3 = *(unsigned char *)(Value + 32);
  long long v4 = *(unsigned char *)(Value + 33);
  uint64_t v5 = *(_OWORD *)Value;
  uint64_t v28 = 1;
  uint64_t v27 = 1;
  long long v26 = 1;
  uint64_t v9 = v5;
  BOOL v10 = v1;
  BOOL v11 = v2;
  BOOL v12 = v3;
  char v13 = v4;
  long long v14 = 0u;
  unint64_t v15 = 0u;
  unint64_t v16 = 0u;
  uint64_t v17 = 1;
  uint64_t v18 = 0u;
  uint64_t v19 = 0u;
  unint64_t v20 = 0u;
  uint64_t v21 = 1;
  uint64_t v22 = 0u;
  uint64_t v23 = 0u;
  uint64_t v24 = 0u;
  uint64_t v25 = 1;
  uint64_t v8 = &v9;
  return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v7, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  return specialized ShapeStyleResolver.updateValue()((uint64_t)&type metadata for AngularGradient, (void (*)(long long *))specialized Paint._apply(to:));
}

{
  return specialized LeafLayoutComputer.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()((void (*)(void))type metadata accessor for _ShapeView<Rectangle, AngularGradient>);
}

{
  return specialized ShapeStyledResponderFilter.updateValue()((void (*)(void))type metadata accessor for _ShapeView<Rectangle, AngularGradient>, (void (*)(uint64_t *, void, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for AngularGradient, (void (*)(void))type metadata accessor for _ShapeView<Rectangle, AngularGradient>, (void (*)(uint64_t *, uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized StaticBody.updateValue()((uint64_t)&type metadata for AngularGradient, (void (*)(uint64_t *, uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized ShapeStyledResponderFilter.updateValue()((void (*)(void))type metadata accessor for _ShapeView<Rectangle, RadialGradient>, (void (*)(uint64_t *, void, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double))specialized ContentResponderHelper.update(data:size:position:transform:parent:));
}

{
  return specialized DynamicBody.updateValue()((uint64_t)&type metadata for RadialGradient, (void (*)(void))type metadata accessor for _ShapeView<Rectangle, RadialGradient>, (void (*)(uint64_t *, uint64_t))specialized ViewBodyAccessor.updateBody(of:changed:), (void (*)(char *, uint64_t))specialized installObservationSlow<A>(accessList:attribute:));
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized ShapeStyleResolver.updateValue()();
}

{
  return specialized LeafLayoutComputer.updateValue()();
}

{
  return specialized ShapeStyledDisplayList.updateValue()();
}

{
  return specialized ShapeStyledResponderFilter.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized StaticBody.updateValue()();
}

{
  void *Value;
  uint64_t v1;
  unsigned __int8 v2;
  _OWORD v4[2];
  uint64_t v5;

  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v1 = Value[1];
  *(void *)&v4[0] = *Value;
  *((void *)&v4[0] + 1) = v1;
  type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceWritingModifier<PreferredColorSchemeKey>, (uint64_t)&type metadata for PreferredColorSchemeKey, (uint64_t)&protocol witness table for PreferredColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _PreferenceWritingModifier);
  uint64_t v2 = *(unsigned char *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI11ColorSchemeO_s5NeverOytTB503_s7c45UI26_PreferenceWritingModifierVA2A23PreferredeF98KeyVRszrlE0gH3Env33_E52508E85535897B9A366B470195B29DLLV5valueAA17EnvironmentValuesVvgyAA0gH0OXEfU_AD17EnvironmentValuesVTf1cn_n(v2, (uint64_t *)v4);
  v4[1] = v4[0];
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t v1;
  unsigned int v2;
  unsigned __int8 v3;
  char v4;
  uint64_t v5;

  uint64_t v5 = *MEMORY[0x263EF8340];
  ContentTransitionEffect.Init.value.getter((uint64_t)&v1);
  AGGraphSetOutputValue();
  outlined consume of ContentTransition.Storage(v1, v2 | ((unint64_t)v3 << 32), v4);
  return swift_release();
}

{
  uint64_t Value;
  double v1;
  double v2;

  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(double *)(Value + 8);
  uint64_t v2 = *(double *)(Value + 16);
  swift_retain();
  ResolvedStyledText.frame(in:renderer:)(0, v1, v2);
  swift_release();
  AGGraphGetValue();
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  if (!AGGraphGetWeakValue()) {
    AGGraphGetValue();
  }
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  if (!AGGraphGetWeakValue()) {
    AGGraphGetValue();
  }
  swift_retain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  if (!AGGraphGetWeakValue()) {
    AGGraphGetValue();
  }
  swift_retain();
  swift_retain();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  if (!AGGraphGetWeakValue()) {
    AGGraphGetValue();
  }
  return AGGraphSetOutputValue();
}

{
  if (!AGGraphGetWeakValue()) {
    AGGraphGetValue();
  }
  return AGGraphSetOutputValue();
}

{
  if (!AGGraphGetWeakValue()) {
    AGGraphGetValue();
  }
  swift_retain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  const void *Value;
  unsigned char __dst[160];
  uint64_t v3;

  long long v3 = *MEMORY[0x263EF8340];
  uint64_t Value = (const void *)AGGraphGetValue();
  memmove(__dst, Value, 0xA0uLL);
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  return AGGraphSetOutputValue();
}

{
  void v1[5];

  v1[4] = *MEMORY[0x263EF8340];
  PrivacyRedactionViewModifier.WidgetAuxiliaryChild.value.getter((uint64_t)v1);
  type metadata accessor for ModifiedContent<_EnvironmentKeyWritingModifier<RedactionReasons>, _EnvironmentKeyWritingModifier<Bool>>();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  swift_release();
  return AGGraphSetOutputValue();
}

{
  uint64_t v1;
  unsigned int v2;
  unsigned __int8 v3;
  char v4;

  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  swift_release();
  AGGraphSetOutputValue();
  outlined consume of ContentTransition.Storage(v1, v2 | ((unint64_t)v3 << 32), v4);
  return swift_release();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];

  uint64_t v8[2] = *MEMORY[0x263EF8340];
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v1 = *Value;
  uint64_t v2 = Value[1];
  v8[0] = *Value;
  v8[1] = v2;
  long long v3 = *(void *)AGGraphGetValue();
  if (v3)
  {
    long long v4 = one-time initialization token for foreground;
    swift_retain();
    swift_retain();
    swift_retain();
    if (v4 != -1) {
      swift_once();
    }
    if (static Color.foreground != v3 && ((*(uint64_t (**)(void))(*(void *)v3 + 88))() & 1) == 0)
    {
      swift_retain();
      uint64_t v5 = v3;
      goto LABEL_9;
    }
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  uint64_t v5 = 0;
LABEL_9:
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v8, v5);
  swift_release();
  swift_release();
  if (v2)
  {
    BOOL v6 = v8[0];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v1, v6);
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5[3];

  v5[2] = *MEMORY[0x263EF8340];
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v1 = *Value;
  uint64_t v2 = Value[1];
  v5[0] = *Value;
  v5[1] = v2;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v5, 0, 255);
  swift_release();
  if (v2)
  {
    long long v3 = v5[0];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v1, v3);
    swift_release();
    swift_release();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  void v1[6];

  v1[5] = *MEMORY[0x263EF8340];
  InsetPrimaryTransform.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  void v1[4];

  v1[3] = *MEMORY[0x263EF8340];
  InsetPrimarySafeAreas.value.getter(v1);
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  long long *WeakValue;
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long __dst;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  uint64_t v26;

  long long v26 = *MEMORY[0x263EF8340];
  Weakuint64_t Value = (long long *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    uint64_t v8 = *WeakValue;
    uint64_t v1 = WeakValue[1];
    uint64_t v2 = WeakValue[2];
    long long v3 = WeakValue[4];
    BOOL v11 = WeakValue[3];
    BOOL v12 = v3;
    uint64_t v9 = v1;
    BOOL v10 = v2;
    long long v4 = WeakValue[5];
    uint64_t v5 = WeakValue[6];
    BOOL v6 = WeakValue[8];
    unint64_t v15 = WeakValue[7];
    unint64_t v16 = v6;
    char v13 = v4;
    long long v14 = v5;
    memmove(&__dst, WeakValue, 0x90uLL);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    long long v14 = xmmword_268EFAF78;
    unint64_t v15 = xmmword_268EFAF88;
    unint64_t v16 = xmmword_268EFAF98;
    BOOL v10 = xmmword_268EFAF38;
    BOOL v11 = xmmword_268EFAF48;
    BOOL v12 = xmmword_268EFAF58;
    char v13 = xmmword_268EFAF68;
    uint64_t v8 = static GestureDebug.Data.defaultValue;
    uint64_t v9 = xmmword_268EFAF28;
    uint64_t v23 = xmmword_268EFAF78;
    uint64_t v24 = xmmword_268EFAF88;
    uint64_t v25 = xmmword_268EFAF98;
    uint64_t v19 = xmmword_268EFAF38;
    unint64_t v20 = xmmword_268EFAF48;
    uint64_t v21 = xmmword_268EFAF58;
    uint64_t v22 = xmmword_268EFAF68;
    __dst = static GestureDebug.Data.defaultValue;
    uint64_t v18 = xmmword_268EFAF28;
  }
  outlined retain of GestureDebug.Data((uint64_t)&v8);
  AGGraphSetOutputValue();
  long long v14 = v23;
  unint64_t v15 = v24;
  unint64_t v16 = v25;
  BOOL v10 = v19;
  BOOL v11 = v20;
  BOOL v12 = v21;
  char v13 = v22;
  uint64_t v8 = __dst;
  uint64_t v9 = v18;
  return outlined release of GestureDebug.Data((uint64_t)&v8);
}

{
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  AGGraphGetWeakValue();
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  uint64_t Value;

  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  uint64_t Value = AGGraphGetValue();
  if (*(unsigned __int8 *)(Value + 24) - 1 >= 2
    && !*(unsigned char *)(Value + 24)
    && *(void *)(Value + 16) == 1)
  {
    outlined consume of GesturePhase<TappableEvent>(*(void *)Value, *(void *)(Value + 8), 1, 0);
  }
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  return AGGraphSetOutputValue();
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for RequiredTapCountWriter<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for RequiredTapCountWriter);
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  uint64_t v2 = *(unsigned char *)(Value + 8);
  long long v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(unsigned char *)(v3 + 24) = v2;
  long long v4 = swift_allocObject();
  *(void *)(v4 + 16) = _s7SwiftUI22RequiredTapCountWriter33_7C0ADFDC1D38FCDDCFDE5CE8530A0B2ELLV5ChildV5valueyySiSgzcvgyAHzcfU_TA_0;
  *(void *)(v4 + 24) = v3;
  type metadata accessor for (_:)();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t Value;

  if (*(unsigned char *)(AGGraphGetValue() + 8))
  {
    uint64_t v0 = 0;
    uint64_t v1 = 0;
    uint64_t v2 = 0;
    long long v3 = 3;
  }
  else
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    uint64_t Value = AGGraphGetValue();
    uint64_t v0 = *(void *)Value;
    uint64_t v1 = *(void *)(Value + 8);
    uint64_t v2 = *(void *)(Value + 16);
    long long v3 = *(unsigned char *)(Value + 24);
    outlined copy of GesturePhase<TappableEvent>(*(void *)Value, v1, v2, v3);
  }
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  AGGraphSetOutputValue();
  return outlined consume of GesturePhase<TappableEvent>(v0, v1, v2, v3);
}

{
  uint64_t Value;
  long long v2;
  _OWORD v3[5];
  uint64_t v4;

  long long v4 = *MEMORY[0x263EF8340];
  type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>(0);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(Value, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>);
  swift_retain();
  swift_getAtKeyPath();
  outlined destroy of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>);
  swift_release();
  v3[0] = v2;
  _s7SwiftUI12GesturePhaseOyAA13TappableEventVGAF_ACy12CoreGraphics7CGFloatVGtcMaTm_0(0, &lazy cache variable for type metadata for (_:_:), &lazy cache variable for type metadata for GesturePhase<CGFloat>, MEMORY[0x263F8EF38]);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  specialized CoordinateSpaceEvents.value.getter();
  type metadata accessor for [EventID : EventType]();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>(0, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>.Value, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  BOOL v11 = *(void *)(Value + 8);
  BOOL v12 = *(void *)Value;
  uint64_t v2 = *(void *)(Value + 16);
  long long v3 = *(void *)(Value + 24);
  long long v4 = *(void *)(Value + 32);
  uint64_t v5 = *(void *)(Value + 40);
  BOOL v6 = *(void *)(Value + 48);
  uint64_t v7 = *(void *)(Value + 56);
  uint64_t v8 = *(void *)(Value + 64);
  uint64_t v9 = *(unsigned char *)(Value + 72);
  swift_retain();
  outlined copy of GesturePhase<SpatialEvent>(v1, v11, v2, v3, v4, v5, v6, v7, v8, v9);
  swift_getAtKeyPath();
  outlined consume of GesturePhase<SpatialEvent>(v12, v11, v2, v3, v4, v5, v6, v7, v8, v9);
  swift_release();
  type metadata accessor for ArrayWith2Inline<(String, String)>();
  AGGraphSetOutputValue();
  return outlined consume of ArrayWith2Inline<(String, String)>.Storage(v13, v14, v15, v16, v17, v18, v19, v20, v21);
}

{
  _s7SwiftUI11Map2GestureVyAA13TappableEventVAA08ModifierD0VyAA015CoordinateSpaceD0Vy12CoreGraphics7CGFloatVGAA08DistanceD0VGAEGMaTm_0(0, &lazy cache variable for type metadata for Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, &lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>);
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  _s7SwiftUI12GesturePhaseOyAA13TappableEventVGAF_ACy12CoreGraphics7CGFloatVGtcMaTm_0(0, &lazy cache variable for type metadata for (_:_:), (unint64_t *)&lazy cache variable for type metadata for GesturePhase<Double>, MEMORY[0x263F8D538]);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>(0, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>.Value, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  uint64_t v2 = *(void *)(Value + 8);
  long long v3 = *(void *)(Value + 16);
  long long v4 = *(unsigned char *)(Value + 24);
  swift_retain();
  outlined copy of GesturePhase<TappableEvent>(v1, v2, v3, v4);
  swift_getAtKeyPath();
  outlined consume of GesturePhase<TappableEvent>(v1, v2, v3, v4);
  swift_release();
  type metadata accessor for ArrayWith2Inline<(String, String)>();
  AGGraphSetOutputValue();
  return outlined consume of ArrayWith2Inline<(String, String)>.Storage(v6, v7, v8, v9, v10, v11, v12, v13, v14);
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  void *v6;
  uint64_t v8[3];
  char v9;
  uint64_t v10;

  BOOL v10 = *MEMORY[0x263EF8340];
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  uint64_t v2 = *(void *)(Value + 8);
  long long v3 = *(void *)(Value + 16);
  long long v4 = *(unsigned char *)(Value + 24);
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for DependentGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for DependentGesture);
  uint64_t v5 = *(unsigned __int8 *)AGGraphGetValue();
  BOOL v6 = (void *)AGGraphGetValue();
  specialized GesturePhase.applyingDependency(_:inheritedPhase:)(v5, *v6, v1, v2, v3, v4, (uint64_t)v8);
  AGGraphSetOutputValue();
  return outlined consume of GesturePhase<TappableEvent>(v8[0], v8[1], v8[2], v9);
}

{
  uint64_t result;

  if (*(uint64_t *)AGGraphGetValue() < 1)
  {
    __n128 result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for ModifierGesture<RequiredTapCountWriter<TappableEvent>, ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>>();
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  unsigned char v1[40];
  uint64_t v2;

  uint64_t v2 = *MEMORY[0x263EF8340];
  type metadata accessor for ResolvedStyledText();
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  _s7SwiftUI16TimelineSchedule_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule, (uint64_t)&protocol descriptor for TimelineSchedule, MEMORY[0x263F8D8F0]);
  AGGraphSetOutputValue();
  return outlined destroy of TimelineSchedule?((uint64_t)v1);
}

{
  AGGraphGetValue();
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for AnyGestureInfo<()>.Value, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for AnyGestureInfo.Value);
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  type metadata accessor for ResolvedStyledText();
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for AnyGesture<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for AnyGesture);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;
  __int16 v1;
  _WORD v3[2];
  uint64_t v4;

  long long v4 = *MEMORY[0x263EF8340];
  uint64_t v0 = *(void *)AGGraphGetValue();
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  specialized LayoutGesture.phase(box:)(v0, (BOOL *)v3);
  swift_release();
  uint64_t v1 = v3[0];
  AGGraphGetValue();
  swift_retain();
  specialized LayoutGestureBox.resetTerminalChildren<A>(gesture:)();
  swift_release();
  swift_release();
  v3[1] = v1;
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  swift_release();
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  swift_retain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  return AGGraphSetOutputValue();
}

{
  type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>(0, &lazy cache variable for type metadata for _ValueTransactionModifier<Bool>, MEMORY[0x263F8D4F8], MEMORY[0x263F8D510], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ValueTransactionModifier);
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  type metadata accessor for (_:)();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t Value;
  long long v1;
  long long v2;
  long long v3;
  _OWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  uint64_t v7 = *MEMORY[0x263EF8340];
  type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>();
  uint64_t Value = AGGraphGetValue();
  uint64_t v2 = *(_OWORD *)(Value + 16);
  uint64_t v1 = *(_OWORD *)(Value + 32);
  long long v3 = *(_OWORD *)Value;
  BOOL v6 = *(void *)(Value + 48);
  v5[1] = v2;
  v5[2] = v1;
  v5[0] = v3;
  swift_retain();
  outlined retain of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>((uint64_t)v5);
  specialized ForEachState.update(view:)((int64_t *)v5);
  outlined release of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>((uint64_t)v5);
  type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  return AGGraphSetOutputValue();
}

uint64_t closure #1 in SizeAndSpacingContext.update<A>(_:)(uint64_t a1, void (*a2)(double), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x270FA5388](v7);
  BOOL v11 = (char *)&v13 - v10;
  a2(v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(v11, 0, 1, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 40))(a1, v11, v7);
}

uint64_t SizeAndSpacingContext.update<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  BOOL v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13.n128_f64[0] = MEMORY[0x270FA5388](v12);
  unint64_t v15 = &v18[-v14];
  uint64_t v16 = *(void *)(a3 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t, __n128))(v16 + 56))(&v18[-v14], 1, 1, a3, v13);
  uint64_t v19 = a3;
  unint64_t v20 = v15;
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  AGGraphWithUpdate();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 16))(v11, v15, v8);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v11, 1, a3);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v16 + 32))(a4, v11, a3);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v15, v8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RBColor(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

uint64_t type metadata completion function for _ChangedGesture()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for ChangedCallbacks();
  swift_getWitnessTable();
  type metadata accessor for CallbacksGesture();
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for ModifierGesture();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for _EndedGesture()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for EndedCallbacks();
  swift_getWitnessTable();
  type metadata accessor for CallbacksGesture();
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for ModifierGesture();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _EndedGesture.init(_body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for EndedCallbacks();
  swift_getWitnessTable();
  type metadata accessor for CallbacksGesture();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for ModifierGesture();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t type metadata accessor for EndedCallbacks()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Gesture.onEnded(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for EndedCallbacks();
  swift_getWitnessTable();
  type metadata accessor for CallbacksGesture();
  long long v15[2] = swift_getWitnessTable();
  void v15[3] = a4;
  uint64_t v11 = type metadata accessor for ModifierGesture();
  MEMORY[0x270FA5388](v11 - 8);
  __n128 v13 = (char *)v15 - v12;
  v15[0] = a1;
  v15[1] = a2;
  swift_retain();
  Gesture.callbacks<A>(_:)((uint64_t)v15, a3, v10, (uint64_t)v13);
  swift_release();
  return _EndedGesture.init(_body:)((uint64_t)v13, a5);
}

uint64_t Gesture.callbacks<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CallbacksGesture();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x270FA5388](v11);
  unint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  swift_getWitnessTable();
  Gesture.modifier<A>(_:)((uint64_t)v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for CallbacksGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Gesture.debugLabel(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  swift_getAssociatedTypeWitness();
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v8 = type metadata accessor for GestureLabelModifier();
  swift_getWitnessTable();
  return Gesture.modifier<A>(_:)((uint64_t)v10, a3, v8, a4);
}

uint64_t Gesture.modifier<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v16, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  return ModifierGesture.init(content:modifier:)((uint64_t)v14, (uint64_t)v10, a3, a2, a4);
}

uint64_t initializeWithCopy for ModifierGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

void *initializeBufferWithCopyOfBuffer for ClosestFitCache(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t ModifierGesture.init(content:modifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v8 = type metadata accessor for ModifierGesture();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a3);
}

uint64_t type metadata accessor for ModifierGesture()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for GestureLabelModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ChangedCallbacks()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static StyleModifier._makeView(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v3 = *a1;
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  unsigned int v7 = *((_DWORD *)a2 + 6);
  unsigned int v8 = *((_DWORD *)a2 + 7);
  unsigned int v9 = *((_DWORD *)a2 + 8);
  unsigned int v10 = *((_DWORD *)a2 + 9);
  uint64_t v12 = a2[5];
  uint64_t v11 = a2[6];
  unsigned int v13 = *((_DWORD *)a2 + 14);
  unsigned int v14 = *((_DWORD *)a2 + 15);
  unsigned int v15 = *((_DWORD *)a2 + 16);
  unsigned int v16 = *((_DWORD *)a2 + 17);
  unsigned int v18 = *((_DWORD *)a2 + 18);
  unsigned int v17 = *((_DWORD *)a2 + 19);
  int v19 = *((_DWORD *)a2 + 20);
  uint64_t v37 = v4;
  int v38 = v5;
  uint64_t v39 = v6;
  *(void *)&long long v40 = __PAIR64__(v8, v7);
  *((void *)&v40 + 1) = __PAIR64__(v10, v9);
  uint64_t v41 = v12;
  uint64_t v42 = v11;
  *(void *)&long long v43 = __PAIR64__(v14, v13);
  *((void *)&v43 + 1) = __PAIR64__(v16, v15);
  unint64_t v44 = __PAIR64__(v17, v18);
  int v45 = v19;
  uint64_t v26 = v4;
  LODWORD(v27) = v5;
  uint64_t v28 = v6;
  *(void *)&long long v29 = __PAIR64__(v8, v7);
  *((void *)&v29 + 1) = __PAIR64__(v10, v9);
  uint64_t v30 = v12;
  uint64_t v31 = v11;
  *(void *)&long long v32 = __PAIR64__(v14, v13);
  *((void *)&v32 + 1) = __PAIR64__(v16, v15);
  unint64_t v33 = __PAIR64__(v17, v18);
  int v34 = v19;
  swift_getAssociatedTypeWitness();
  uint64_t v20 = type metadata accessor for StyleOverrideInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.subscript.getter(v20, v20, (uint64_t)&protocol witness table for StyleOverrideInput<A>);
  uint64_t v21 = v36;
  if (v36) {
    int v3 = v35;
  }
  else {
    uint64_t v21 = type metadata accessor for StyleModifierType();
  }
  LODWORD(v26) = v3;
  uint64_t v27 = v21;
  swift_getAssociatedTypeWitness();
  uint64_t v22 = type metadata accessor for StyleInput();
  _ViewInputs.append<A, B>(_:to:)((uint64_t)&v26, v22, v22, (uint64_t)&type metadata for AnyStyleModifier, (uint64_t)&protocol witness table for StyleInput<A>, (uint64_t)&protocol witness table for AnyStyleModifier);
  uint64_t v26 = v37;
  LODWORD(v27) = v38;
  uint64_t v28 = v39;
  long long v29 = v40;
  uint64_t v30 = v41;
  uint64_t v31 = v42;
  long long v32 = v43;
  unint64_t v33 = v44;
  int v34 = v45;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v23 = swift_bridgeObjectRetain();
  a3(v23, &v26);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t static StyleModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v3 = *a1;
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  unsigned int v6 = *((_DWORD *)a2 + 6);
  unsigned int v7 = *((_DWORD *)a2 + 7);
  unsigned int v8 = *((_DWORD *)a2 + 8);
  unsigned int v9 = *((_DWORD *)a2 + 9);
  uint64_t v11 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v12 = a2[7];
  int v13 = *((_DWORD *)a2 + 16);
  uint64_t v14 = a2[9];
  char v15 = *((unsigned char *)a2 + 80);
  uint64_t v33 = *a2;
  int v34 = v4;
  uint64_t v35 = v5;
  *(void *)&long long v36 = __PAIR64__(v7, v6);
  *((void *)&v36 + 1) = __PAIR64__(v9, v8);
  uint64_t v37 = v11;
  *(void *)&long long v38 = v10;
  *((void *)&v38 + 1) = v12;
  int v39 = v13;
  uint64_t v40 = v14;
  char v41 = v15;
  uint64_t v22 = v33;
  LODWORD(v23) = v4;
  uint64_t v24 = v5;
  *(void *)&long long v25 = __PAIR64__(v7, v6);
  *((void *)&v25 + 1) = __PAIR64__(v9, v8);
  uint64_t v26 = v11;
  *(void *)&long long v27 = v10;
  *((void *)&v27 + 1) = v12;
  int v28 = v13;
  uint64_t v29 = v14;
  char v30 = v15;
  swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for StyleOverrideInput();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListInputs.subscript.getter(v16, v16, (uint64_t)&protocol witness table for StyleOverrideInput<A>);
  uint64_t v17 = v32;
  if (v32) {
    int v3 = v31;
  }
  else {
    uint64_t v17 = type metadata accessor for StyleModifierType();
  }
  LODWORD(v22) = v3;
  uint64_t v23 = v17;
  swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for StyleInput();
  _GraphInputs.append<A, B>(_:to:)((uint64_t)&v22, v18, v18, (uint64_t)&type metadata for AnyStyleModifier, (uint64_t)&protocol witness table for StyleInput<A>, (uint64_t)&protocol witness table for AnyStyleModifier);
  uint64_t v22 = v33;
  LODWORD(v23) = v34;
  uint64_t v24 = v35;
  long long v25 = v36;
  uint64_t v26 = v37;
  long long v27 = v38;
  int v28 = v39;
  uint64_t v29 = v40;
  char v30 = v41;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v19 = swift_bridgeObjectRetain();
  a3(v19, &v22);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t type metadata accessor for StyleInput()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for StyleModifierType()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for StyleOverrideInput()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _ViewListInputs.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _GraphInputs.subscript.getter(a1, a2, *(void *)(a3 + 8));
}

{
  return _GraphInputs.subscript.getter(a1, a2, *(void *)(a3 + 8));
}

uint64_t _GraphInputs.makeReusable(indirectMap:)(uint64_t a1)
{
  uint64_t v2 = v1;
  specialized Attribute.makeReusable(indirectMap:)(a1);
  specialized Attribute.makeReusable(indirectMap:)(a1);
  int v4 = *(_DWORD *)(v1 + 32);
  if ((v4 & 0x40) == 0)
  {
    v4 |= 0x40u;
    *(_DWORD *)(v1 + 32) = v4;
  }
  uint64_t v5 = *(void *)(v1 + 16);
  swift_beginAccess();
  int v17 = *(_DWORD *)(v5 + 16);
  specialized Attribute.makeReusable(indirectMap:)(a1);
  uint64_t v6 = MEMORY[0x263F8EE78];
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_7(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = v17;
  *(void *)(v8 + 24) = v6;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_WORD *)(v8 + 80) = 256;
  *(void *)(v8 + 88) = v7;
  swift_release();
  *(void *)(v2 + 16) = v8;
  if ((v4 & 0x20) == 0) {
    *(_DWORD *)(v2 + 32) = v4 | 0x20;
  }
  specialized Attribute.makeReusable(indirectMap:)(a1);
  uint64_t v9 = swift_retain();
  uint64_t v10 = specialized find<A>(_:key:)(v9);
  if (v10)
  {
    uint64_t v11 = (uint64_t *)(v10 + 80);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v11 = &qword_26B1119A8;
  }
  uint64_t v12 = (void *)*v11;
  swift_retain();
  uint64_t result = swift_release();
  if (v12)
  {
    do
    {
      uint64_t v15 = v12[3];
      uint64_t v14 = (void *)v12[4];
      uint64_t v16 = v12[2];
      swift_retain();
      swift_release();
      uint64_t result = project #1 <A>(_:) in _GraphInputs.makeReusable(indirectMap:)(v16, (uint64_t *)v2, a1, v16, v15);
      uint64_t v12 = v14;
    }
    while (v14);
  }
  return result;
}

uint64_t project #1 <A>(_:) in _GraphInputs.makeReusable(indirectMap:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  double v12 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v19 - v13;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, double))(a5 + 16))(a4, a5, v12);
  if ((result & 1) == 0)
  {
    int v16 = *((_DWORD *)a2 + 2);
    uint64_t v17 = a2[2];
    uint64_t v18 = a2[5];
    uint64_t v19 = *a2;
    int v20 = v16;
    uint64_t v21 = v17;
    long long v22 = *(_OWORD *)(a2 + 3);
    uint64_t v23 = v18;
    _GraphInputs.subscript.getter(a1, a4, a5);
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a5 + 24))(a3, v14, a4, a5);
    specialized _ViewListCountInputs.subscript.setter((uint64_t)v14, a1, a4, a5);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  }
  return result;
}

uint64_t PropertyList.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  specialized PropertyList.subscript.setter(a1, a2, a3, a4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v6(a1, AssociatedTypeWitness);
}

uint64_t specialized PropertyList.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  swift_retain();
  closure #1 in PropertyList.subscript.setter(v4, a2, a1, a3, a4);

  return swift_release();
}

uint64_t protocol witness for static GraphInput.isTriviallyReusable.getter in conformance BodyInput<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type Stack<BodyInputElement> and conformance <A> Stack<A>(&lazy protocol witness table cache variable for type Stack<BodyInputElement> and conformance <A> Stack<A>, &lazy cache variable for type metadata for Stack<BodyInputElement>, (uint64_t)&type metadata for BodyInputElement);
  return static GraphInput<>.isTriviallyReusable.getter(a1, a2, v4) & 1;
}

uint64_t static GraphInput<>.isTriviallyReusable.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))() & 1;
}

uint64_t protocol witness for static GraphReusable.isTriviallyReusable.getter in conformance <A> Stack<A>(uint64_t a1, uint64_t a2)
{
  return static Stack<A>.isTriviallyReusable.getter(*(void *)(a1 + 16), *(void *)(a2 - 8));
}

uint64_t static Stack<A>.isTriviallyReusable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))() & 1;
}

uint64_t lazy protocol witness table accessor for type Stack<BodyInputElement> and conformance <A> Stack<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_6(255, a2, a3, (uint64_t (*)(void, uint64_t))type metadata accessor for Stack);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static GraphReusable.isTriviallyReusable.getter in conformance BodyInputElement()
{
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v0 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    return dyld_program_sdk_at_least();
  }
  else {
    return static Semantics.forced >= v0;
  }
}

uint64_t _GraphInputs.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PropertyList.subscript.getter(a1, *v3, a2, *(void *)(a3 + 8));
}

{
  uint64_t *v3;

  return PropertyList.subscript.getter(a1, *v3, a2, *(void *)(a3 + 8));
}

uint64_t specialized _ViewListCountInputs.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  return specialized PropertyList.subscript.setter(a1, a2, a3, *(void *)(a4 + 8));
}

uint64_t static GraphInput<>.makeReusable(indirectMap:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v7(a1, AssociatedTypeWitness, a5);
}

uint64_t protocol witness for GraphReusable.makeReusable(indirectMap:) in conformance <A> Stack<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Stack<A>.makeReusable(indirectMap:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t Stack<A>.makeReusable(indirectMap:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v14 = *v3;
  uint64_t result = Stack.isEmpty.getter(a2);
  if ((result & 1) == 0)
  {
    uint64_t v13 = v7;
    MEMORY[0x270FA5388](result);
    uint64_t v10 = *(void *)(a2 + 16);
    uint64_t v11 = a3;
    uint64_t v12 = a1;
    Stack.map<A>(_:)((void (*)(char *))partial apply for closure #1 in Stack<A>.makeReusable(indirectMap:), (uint64_t)&v9, a2, v10, &v14);
    uint64_t result = swift_release();
    *int v3 = v14;
  }
  return result;
}

BOOL Stack.isEmpty.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v10 - v6;
  v10[1] = *v1;
  Stack.top.getter(a1, (uint64_t)v10 - v6);
  BOOL v8 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v7, 1, v3) == 1;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t Stack.top.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*v2)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = swift_projectBox();
    uint64_t v11 = *(void *)(v4 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a2, v5, v4);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    uint64_t v7 = a2;
    uint64_t v8 = 0;
    uint64_t v9 = v4;
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    uint64_t v7 = a2;
    uint64_t v8 = 1;
  }

  return v6(v7, v8, 1, v9);
}

uint64_t Stack.map<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v20[1] = *MEMORY[0x263EF8340];
  uint64_t v11 = *v5;
  v20[0] = *v5;
  uint64_t isStackAllocationSafe = Stack.count.getter(a3);
  if (isStackAllocationSafe < 0) {
    goto LABEL_13;
  }
  uint64_t v13 = isStackAllocationSafe;
  uint64_t v14 = *(void *)(*(void *)(a4 - 8) + 72);
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)v14) >> 64 != (isStackAllocationSafe * v14) >> 63) {
    goto LABEL_14;
  }
  uint64_t v15 = *(unsigned __int8 *)(*(void *)(a4 - 8) + 80);
  if ((v15 & (unint64_t)(v15 + 1)) != 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  if (v15 > 0xF
    || isStackAllocationSafe * v14 > 1024
    && (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), !isStackAllocationSafe))
  {
    uint64_t v16 = swift_slowAlloc();
    closure #1 in Stack.map<A>(_:)(v16, v13, v11, v13, a1, a2, *(void *)(a3 + 16), a4, a5);
    JUMPOUT(0x24C527CC0);
  }
  MEMORY[0x270FA5388](isStackAllocationSafe);
  uint64_t result = closure #1 in Stack.map<A>(_:)((uint64_t)v20 - v17, v13, v11, v13, a1, a2, *(void *)(a3 + 16), a4, v20);
  *a5 = v20[0];
  return result;
}

uint64_t closure #1 in Stack.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v46 = a5;
  uint64_t v47 = a6;
  uint64_t v50 = a1;
  long long v38 = a9;
  uint64_t v12 = *(void *)(a8 - 8);
  uint64_t v48 = a4;
  uint64_t v49 = v12;
  MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v20 - 8);
  long long v22 = (char *)&v37 - v21;
  uint64_t v51 = a3;
  uint64_t v23 = type metadata accessor for Stack();
  swift_retain();
  swift_getWitnessTable();
  Sequence<>.makeIterator()();
  uint64_t v45 = v23;
  Stack.pop()(v23, (uint64_t)v22);
  long long v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  uint64_t v44 = v16 + 48;
  if (v43(v22, 1, a7) != 1)
  {
    uint64_t v24 = *(uint64_t (**)(char *, char *, uint64_t))(v16 + 32);
    uint64_t v40 = v49 + 32;
    char v41 = v24;
    uint64_t v42 = v16 + 32;
    long long v25 = (void (**)(char *, uint64_t))(v16 + 8);
    uint64_t v26 = 1;
    while (1)
    {
      uint64_t result = v41(v19, v22, a7);
      uint64_t v28 = v48 - v26;
      if (__OFSUB__(v48, v26)) {
        break;
      }
      v46(v19);
      (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v50 + *(void *)(v49 + 72) * v28, v14, a8);
      (*v25)(v19, a7);
      ++v26;
      Stack.pop()(v45, (uint64_t)v22);
      if (v43(v22, 1, a7) == 1) {
        goto LABEL_5;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
LABEL_5:
  swift_release();
  uint64_t v52 = 0;
  uint64_t result = MEMORY[0x24C523850](v50, v39, a8);
  uint64_t v30 = 0;
  if (v29 == result)
  {
LABEL_11:
    *long long v38 = v30;
    return result;
  }
  if (v29 < result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v31 = v29 - result;
  if (v29 > result)
  {
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 32);
    uint64_t v33 = *(void *)(v49 + 72);
    int v34 = (uint64_t (**)(char *, uint64_t))(v49 + 8);
    uint64_t v35 = v50 + result * v33;
    do
    {
      v32(v14, v35, a8);
      uint64_t v36 = type metadata accessor for Stack();
      Stack.push(_:)((uint64_t)v14, v36);
      uint64_t result = (*v34)(v14, a8);
      v35 += v33;
      --v31;
    }
    while (v31);
    uint64_t v30 = v52;
    goto LABEL_11;
  }
LABEL_14:
  __break(1u);
  return result;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t type metadata accessor for Stack()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Stack.push(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = swift_allocBox();
  uint64_t v8 = v7;
  uint64_t v9 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(v7, a1, v4);
  *(void *)(v8 + v9) = *v2;
  *uint64_t v2 = v6;
  return result;
}

uint64_t partial apply for closure #1 in Stack<A>.makeReusable(indirectMap:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2[2];
  uint64_t v4 = v2[3];
  uint64_t v5 = v2[4];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a2, a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v3, v4);
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HostPreferencesCombiner(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t initializeBufferWithCopyOfBuffer for BodyInputElement(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of BodyInputElement();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t outlined copy of BodyInputElement()
{
  return swift_retain();
}

uint64_t Stack.count.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - v6;
  uint64_t v12 = *v1;
  swift_retain();
  swift_getWitnessTable();
  Sequence<>.makeIterator()();
  Stack.pop()(a1, (uint64_t)v7);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48);
  uint64_t v9 = 0;
  if (v8(v7, 1, v3) != 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void (**)(char *, uint64_t))(v5 + 8);
    do
    {
      ++v9;
      v10(v7, v4);
      Stack.pop()(a1, (uint64_t)v7);
    }
    while (v8(v7, 1, v3) != 1);
  }
  swift_release();
  return v9;
}

uint64_t Stack.pop()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*v2)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t v6 = swift_projectBox();
    uint64_t v7 = *(void *)(v6 + *(int *)(TupleTypeMetadata2 + 48));
    uint64_t v8 = *(void *)(v4 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, v6, v4);
    *unint64_t v2 = v7;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v4);
    swift_retain();
    return swift_release();
  }
  else
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56);
    return v10(a2, 1, 1);
  }
}

uint64_t storeEnumTagSinglePayload for HostPreferencesCombiner(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BodyInputElement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t specialized Attribute.makeReusable(indirectMap:)(uint64_t a1)
{
  unint64_t v2 = v1;
  unsigned int v4 = *v1;
  swift_beginAccess();
  uint64_t v5 = *(void *)(a1 + 24);
  if (*(void *)(v5 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v7 & 1) != 0))
  {
    int IndirectAttribute2 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v6);
  }
  else
  {
    swift_endAccess();
    AGGraphClearUpdate();
    id v9 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    int IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(IndirectAttribute2, v4, isUniquelyReferenced_nonNull_native);
    *(void *)(a1 + 24) = v12;
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_endAccess();
  *unint64_t v2 = IndirectAttribute2;
  return result;
}

uint64_t AnyStyleModifier.makeReusable(indirectMap:)(uint64_t a1)
{
  unint64_t v2 = v1;
  unsigned int v4 = *v1;
  swift_beginAccess();
  uint64_t v5 = *(void *)(a1 + 24);
  if (*(void *)(v5 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v7 & 1) != 0))
  {
    int IndirectAttribute = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v6);
  }
  else
  {
    swift_endAccess();
    AGGraphClearUpdate();
    id v9 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    int IndirectAttribute = AGGraphCreateIndirectAttribute();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(IndirectAttribute, v4, isUniquelyReferenced_nonNull_native);
    *(void *)(a1 + 24) = v12;
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_endAccess();
  *unint64_t v2 = IndirectAttribute;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(int a1, unsigned int a2, char a3)
{
  unsigned int v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(_DWORD *)(v16[7] + 4 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    type metadata accessor for AGAttribute(0);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, int a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 4 * result;
  *(_DWORD *)(a4[6] + v4) = a2;
  *(_DWORD *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

uint64_t protocol witness for static GraphInput.isTriviallyReusable.getter in conformance StyleInput<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type Stack<BodyInputElement> and conformance <A> Stack<A>(&lazy protocol witness table cache variable for type Stack<AnyStyleModifier> and conformance <A> Stack<A>, &lazy cache variable for type metadata for Stack<AnyStyleModifier>, (uint64_t)&type metadata for AnyStyleModifier);
  return static GraphInput<>.isTriviallyReusable.getter(a1, a2, v4) & 1;
}

uint64_t protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance StyleInput<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = lazy protocol witness table accessor for type Stack<BodyInputElement> and conformance <A> Stack<A>(&lazy protocol witness table cache variable for type Stack<AnyStyleModifier> and conformance <A> Stack<A>, &lazy cache variable for type metadata for Stack<AnyStyleModifier>, (uint64_t)&type metadata for AnyStyleModifier);
  return static GraphInput<>.makeReusable(indirectMap:value:)(a1, a2, a3, a4, v8);
}

uint64_t _ViewInputs.pushModifierBody<A>(_:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  char v6 = 0;
  uint64_t v3 = type metadata accessor for BodyInput();
  return _ViewInputs.append<A, B>(_:to:)((uint64_t)v5, v3, v3, (uint64_t)&type metadata for BodyInputElement, (uint64_t)&protocol witness table for BodyInput<A>, (uint64_t)&protocol witness table for BodyInputElement);
}

uint64_t _GraphInputs.append<A, B>(_:to:)(uint64_t a1, uint64_t a2, Swift::Int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  type metadata accessor for Stack();
  long long v15[2] = a6;
  swift_getWitnessTable();
  _GraphInputs.recordReusableInput<A>(_:)(a3, a3, a5);
  uint64_t v12 = *(void *)(a5 + 8);
  PropertyList.subscript.getter(a3, *v7, a3, v12);
  uint64_t v13 = swift_checkMetadataState();
  Stack.push(_:)(a1, v13);
  v15[0] = v15[1];
  return PropertyList.subscript.setter((uint64_t)v15, a3, a3, v12);
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!specialized find<A>(_:key:)(*a1) || (uint64_t result = AGCompareValues(), !result))
  {
    v7.value = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<ReusableInputs>, (uint64_t)&type metadata for ReusableInputs, (uint64_t)&protocol witness table for ReusableInputs, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 72) = a2;
    *(void *)(v8 + 80) = a3;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ReusableInputs, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for ImageStyleProtocol.Type(0, &lazy cache variable for type metadata for _VariadicView_AnyImplicitRoot.Type, &lazy cache variable for type metadata for _VariadicView_AnyImplicitRoot), uint64_t result = AGCompareValues(), !result))
  {
    v7.value = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<ImplicitRootType>, (uint64_t)&type metadata for ImplicitRootType, (uint64_t)&protocol witness table for ImplicitRootType, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 72) = a2;
    *(void *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ImplicitRootType, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  char v6 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnderlineStyleKey>, (uint64_t)&type metadata for UnderlineStyleKey, (uint64_t)&protocol witness table for UnderlineStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  uint64_t result = specialized find1<A>(_:key:filter:)(v6, v15);
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v11 = *(void *)(result + 72);
  unint64_t v10 = *(void *)(result + 80);
  if (a3 == 1)
  {
    if (v10 == 1) {
      return result;
    }
    goto LABEL_7;
  }
  if (v10 == 1)
  {
    swift_retain();
LABEL_7:
    outlined copy of Text.LineStyle?(v11, v10);
    outlined consume of Text.LineStyle?(a2, a3);
    outlined consume of Text.LineStyle?(v11, v10);
    goto LABEL_8;
  }
  if (v11 != a2) {
    goto LABEL_8;
  }
  if (!a3)
  {
    if (!v10) {
      return outlined copy of Text.LineStyle?(a2, 0);
    }
    goto LABEL_8;
  }
  if (!v10)
  {
    outlined copy of Text.LineStyle?(a2, a3);
    swift_release();
    goto LABEL_8;
  }
  if (a3 == v10)
  {
    outlined copy of Text.LineStyle?(a2, a3);
    return swift_release();
  }
  char v14 = *(uint64_t (**)(uint64_t))(*(void *)a3 + 88);
  outlined copy of Text.LineStyle?(a2, a3);
  outlined copy of Text.LineStyle?(a2, a3);
  outlined copy of Text.LineStyle?(a2, v10);
  swift_retain();
  LOBYTE(v14) = v14(v10);
  swift_release_n();
  outlined consume of Text.LineStyle?(a2, a3);
  uint64_t result = outlined consume of Text.LineStyle?(a2, v10);
  if ((v14 & 1) == 0)
  {
LABEL_8:
    uint64_t v12 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<UnderlineStyleKey>>();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 72) = a2;
    *(void *)(v13 + 80) = a3;
    outlined copy of Text.LineStyle?(a2, a3);
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v12);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  char v6 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvedTextProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvedTextProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  if (!specialized find1<A>(_:key:filter:)(v6, v12)
    || (type metadata accessor for ResolvedTextProvider.Type?(), uint64_t result = AGCompareValues(), !result))
  {
    unint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>>();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 72) = a2;
    *(void *)(v11 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v10);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  char v6 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  if (!specialized find1<A>(_:key:filter:)(v6, v12)
    || (type metadata accessor for CoreUINamedColorProvider.Type?(), uint64_t result = AGCompareValues(), !result))
  {
    unint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>>();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 72) = a2;
    *(void *)(v11 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v10);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  char v6 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  if (!specialized find1<A>(_:key:filter:)(v6, v12)
    || (type metadata accessor for DefaultAccentColorProvider.Type?(), uint64_t result = AGCompareValues(), !result))
  {
    unint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>>();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 72) = a2;
    *(void *)(v11 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v10);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  char v6 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>, (uint64_t)&type metadata for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  if (!specialized find1<A>(_:key:filter:)(v6, v12)
    || (type metadata accessor for BridgedEnvironmentResolver.Type?(), uint64_t result = AGCompareValues(), !result))
  {
    unint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>>();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 72) = a2;
    *(void *)(v11 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v10);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  char v6 = *a1;
  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.OpacityAccessibilityProviderKey);
  if (!specialized find1<A>(_:key:filter:)(v6, v10)
    || (type metadata accessor for ImageStyleProtocol.Type(0, &lazy cache variable for type metadata for OpacityAccessibilityProvider.Type, &lazy cache variable for type metadata for OpacityAccessibilityProvider), uint64_t result = AGCompareValues(), !result))
  {
    uint64_t v8 = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.OpacityAccessibilityProviderKey>, (uint64_t)&type metadata for _GraphInputs.OpacityAccessibilityProviderKey, (uint64_t)&protocol witness table for _GraphInputs.OpacityAccessibilityProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    char v9 = swift_allocObject();
    *(void *)(v9 + 72) = a2;
    *(void *)(v9 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.OpacityAccessibilityProviderKey, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for ImageStyleProtocol.Type(0, &lazy cache variable for type metadata for TextAccessibilityProvider.Type, &lazy cache variable for type metadata for TextAccessibilityProvider), uint64_t result = AGCompareValues(), !result))
  {
    v7.value = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.TextAccessibilityProviderKey>, (uint64_t)&type metadata for _GraphInputs.TextAccessibilityProviderKey, (uint64_t)&protocol witness table for _GraphInputs.TextAccessibilityProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 72) = a2;
    *(void *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.TextAccessibilityProviderKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for TextAlwaysOnProvider.Type?(), uint64_t result = AGCompareValues(), !result))
  {
    v7.value = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.TextAlwaysOnProviderKey>, (uint64_t)&type metadata for _GraphInputs.TextAlwaysOnProviderKey, (uint64_t)&protocol witness table for _GraphInputs.TextAlwaysOnProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 72) = a2;
    *(void *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.TextAlwaysOnProviderKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for PlatformSpacerRepresentable.Type?(), uint64_t result = AGCompareValues(), !result))
  {
    v7.value = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.SpacerRepresentationKey>, (uint64_t)&type metadata for _GraphInputs.SpacerRepresentationKey, (uint64_t)&protocol witness table for _GraphInputs.SpacerRepresentationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 72) = a2;
    *(void *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.SpacerRepresentationKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  char v6 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  uint64_t result = specialized find1<A>(_:key:filter:)(v6, v13);
  if (!result || (*(void *)(result + 72) == a2 ? (unint64_t v10 = *(void *)(result + 80) == a3) : (unint64_t v10 = 0), !v10))
  {
    uint64_t v11 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundInfoKey>>();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 72) = a2;
    *(void *)(v12 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v11);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for PlatformTextRepresentable.Type?(), uint64_t result = AGCompareValues(), !result))
  {
    v7.value = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.TextRepresentationKey>, (uint64_t)&type metadata for _GraphInputs.TextRepresentationKey, (uint64_t)&protocol witness table for _GraphInputs.TextRepresentationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 72) = a2;
    *(void *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.TextRepresentationKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for PlatformImageRepresentable.Type?(), uint64_t result = AGCompareValues(), !result))
  {
    v7.value = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.ImageRepresentationKey>, (uint64_t)&type metadata for _GraphInputs.ImageRepresentationKey, (uint64_t)&protocol witness table for _GraphInputs.ImageRepresentationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 72) = a2;
    *(void *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.ImageRepresentationKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for PlatformNamedImageRepresentable.Type?(), uint64_t result = AGCompareValues(), !result))
  {
    v7.value = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.NamedImageRepresentationKey>, (uint64_t)&type metadata for _GraphInputs.NamedImageRepresentationKey, (uint64_t)&protocol witness table for _GraphInputs.NamedImageRepresentationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 72) = a2;
    *(void *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.NamedImageRepresentationKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for ImageStyleProtocol.Type(0, &lazy cache variable for type metadata for ImageAccessibilityProvider.Type, &lazy cache variable for type metadata for ImageAccessibilityProvider), uint64_t result = AGCompareValues(), !result))
  {
    v7.value = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.ImageAccessibilityProviderKey>, (uint64_t)&type metadata for _GraphInputs.ImageAccessibilityProviderKey, (uint64_t)&protocol witness table for _GraphInputs.ImageAccessibilityProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 72) = a2;
    *(void *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.ImageAccessibilityProviderKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  char v6 = *a1;
  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.LayoutAccessibilityProviderKey);
  if (!specialized find1<A>(_:key:filter:)(v6, v10)
    || (type metadata accessor for ImageStyleProtocol.Type(0, &lazy cache variable for type metadata for LayoutAccessibilityProvider.Type, &lazy cache variable for type metadata for LayoutAccessibilityProvider), uint64_t result = AGCompareValues(), !result))
  {
    uint64_t v8 = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.LayoutAccessibilityProviderKey>, (uint64_t)&type metadata for _GraphInputs.LayoutAccessibilityProviderKey, (uint64_t)&protocol witness table for _GraphInputs.LayoutAccessibilityProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    char v9 = swift_allocObject();
    *(void *)(v9 + 72) = a2;
    *(void *)(v9 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.LayoutAccessibilityProviderKey, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for ImageStyleProtocol.Type(0, &lazy cache variable for type metadata for GestureAccessibilityProvider.Type, &lazy cache variable for type metadata for GestureAccessibilityProvider), uint64_t result = AGCompareValues(), !result))
  {
    v7.value = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.GestureAccessibilityProviderKey>, (uint64_t)&type metadata for _GraphInputs.GestureAccessibilityProviderKey, (uint64_t)&protocol witness table for _GraphInputs.GestureAccessibilityProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 72) = a2;
    *(void *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.GestureAccessibilityProviderKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for ImageStyleProtocol.Type(0, &lazy cache variable for type metadata for PrivacyReductionAccessibilityProvider.Type, &lazy cache variable for type metadata for PrivacyReductionAccessibilityProvider), uint64_t result = AGCompareValues(), !result))
  {
    v7.value = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.PrivacyReductionAccessibilityProviderKey>, (uint64_t)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey, (uint64_t)&protocol witness table for _GraphInputs.PrivacyReductionAccessibilityProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 72) = a2;
    *(void *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for [LayoutDirection](0, (unint64_t *)&lazy cache variable for type metadata for Material?, (uint64_t)&type metadata for Material, MEMORY[0x263F8D8F0]), uint64_t result = AGCompareValues(), !result))
  {
    v7.value = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundMaterialKey>>();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 72) = a2;
    *(void *)(v8 + 80) = a3;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundMaterialKey>, (uint64_t)&type metadata for BackgroundMaterialKey, (uint64_t)&protocol witness table for BackgroundMaterialKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t v10 = v9;
    outlined copy of Material?(a2, a3);
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v10, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  char v6 = specialized find<A>(_:key:)(*a1);
  if (!v6
    || (uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(a3 + 8))(*(void *)(v6 + 72), *(void *)(v6 + 80), a2, a3), (result & 1) == 0))
  {
    uint64_t v8 = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<StyleContextInput>, (uint64_t)&type metadata for StyleContextInput, (uint64_t)&protocol witness table for StyleContextInput, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    char v9 = swift_allocObject();
    *(void *)(v9 + 72) = a2;
    *(void *)(v9 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for StyleContextInput, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  char v6 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>, (uint64_t)&type metadata for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  if (!specialized find1<A>(_:key:filter:)(v6, v12)
    || (type metadata accessor for SystemAccentValueProvider.Type?(), uint64_t result = AGCompareValues(), !result))
  {
    unint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>>();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 72) = a2;
    *(void *)(v11 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v10);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v7;
  uint64_t v8;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for PlatformTextSelectionRepresentation.Type?(),
        uint64_t result = AGCompareValues(),
        !result))
  {
    v7.value = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.TextSelectionRepresentationKey>, (uint64_t)&type metadata for _GraphInputs.TextSelectionRepresentationKey, (uint64_t)&protocol witness table for _GraphInputs.TextSelectionRepresentationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 72) = a2;
    *(void *)(v8 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.TextSelectionRepresentationKey, 0, v7.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  char v6 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<StrikethroughStyleKey>, (uint64_t)&type metadata for StrikethroughStyleKey, (uint64_t)&protocol witness table for StrikethroughStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  uint64_t result = specialized find1<A>(_:key:filter:)(v6, v15);
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v11 = *(void *)(result + 72);
  unint64_t v10 = *(void *)(result + 80);
  if (a3 == 1)
  {
    if (v10 == 1) {
      return result;
    }
    goto LABEL_7;
  }
  if (v10 == 1)
  {
    swift_retain();
LABEL_7:
    outlined copy of Text.LineStyle?(v11, v10);
    outlined consume of Text.LineStyle?(a2, a3);
    outlined consume of Text.LineStyle?(v11, v10);
    goto LABEL_8;
  }
  if (v11 != a2) {
    goto LABEL_8;
  }
  if (!a3)
  {
    if (!v10) {
      return outlined copy of Text.LineStyle?(a2, 0);
    }
    goto LABEL_8;
  }
  if (!v10)
  {
    outlined copy of Text.LineStyle?(a2, a3);
    swift_release();
    goto LABEL_8;
  }
  if (a3 == v10)
  {
    outlined copy of Text.LineStyle?(a2, a3);
    return swift_release();
  }
  char v14 = *(uint64_t (**)(uint64_t))(*(void *)a3 + 88);
  outlined copy of Text.LineStyle?(a2, a3);
  outlined copy of Text.LineStyle?(a2, a3);
  outlined copy of Text.LineStyle?(a2, v10);
  swift_retain();
  LOBYTE(v14) = v14(v10);
  swift_release_n();
  outlined consume of Text.LineStyle?(a2, a3);
  uint64_t result = outlined consume of Text.LineStyle?(a2, v10);
  if ((v14 & 1) == 0)
  {
LABEL_8:
    uint64_t v12 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<StrikethroughStyleKey>>();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 72) = a2;
    *(void *)(v13 + 80) = a3;
    outlined copy of Text.LineStyle?(a2, a3);
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v12);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;

  uint64_t result = specialized find<A>(_:key:)(*a1);
  if (!result || *(void *)(result + 72) != a2)
  {
    SwiftUI::BloomFilter v7 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<SystemColorDefinitionKey>>();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 72) = a2;
    *(void *)(v8 + 80) = a3;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorDefinitionKey>, (uint64_t)&type metadata for SystemColorDefinitionKey, (uint64_t)&protocol witness table for SystemColorDefinitionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t v10 = v9;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v10, 0, v7);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  char v6 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontDefinitionKey>, (uint64_t)&type metadata for FontDefinitionKey, (uint64_t)&protocol witness table for FontDefinitionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  uint64_t result = specialized find1<A>(_:key:filter:)(v6, v12);
  if (!result || *(void *)(result + 72) != a2)
  {
    unint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<FontDefinitionKey>>();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 72) = a2;
    *(void *)(v11 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v10);
    return swift_release();
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  char v6 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<VibrantColorStyleKey>, (uint64_t)&type metadata for VibrantColorStyleKey, (uint64_t)&protocol witness table for VibrantColorStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  if (!specialized find1<A>(_:key:filter:)(v6, v12)
    || (type metadata accessor for VibrantColorStyle.Type?(), uint64_t result = AGCompareValues(), !result))
  {
    unint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<VibrantColorStyleKey>>();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 72) = a2;
    *(void *)(v11 + 80) = a3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v10);
    return swift_release();
  }
  return result;
}

uint64_t _GraphInputs.recordReusableInput<A>(_:)(Swift::Int a1, uint64_t a2, uint64_t a3)
{
  BloomFilter.init(hashValue:)(a1);
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)(v7 + 72);
    char v9 = (uint64_t *)(v7 + 80);
  }
  else
  {
    uint64_t v8 = &static ReusableInputs.defaultValue;
    char v9 = &qword_26B1119A8;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v10 = *v9;
  uint64_t v11 = *v8;
  swift_retain();
  swift_release();
  if (v10 && *(void *)(v10 + 16) == a2)
  {
    return swift_release();
  }
  else
  {
    uint64_t v12 = (void *)swift_allocObject();
    void v12[2] = a2;
    v12[3] = a3;
    v12[4] = v10;
    swift_retain();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v3, v11 | v14, (uint64_t)v12);
    swift_release_n();
    return swift_release();
  }
}

uint64_t _ViewInputs.append<A, B>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _GraphInputs.append<A, B>(_:to:)(a1, a3, a3, a4, *(void *)(a5 + 8), a6);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<AGAttribute, AGAttribute>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    int v34 = v3;
    int64_t v8 = 0;
    char v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                uint64_t *v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 4 * v18;
      unsigned int v23 = *(_DWORD *)(*(void *)(v5 + 48) + v22);
      int v24 = *(_DWORD *)(*(void *)(v5 + 56) + v22);
      uint64_t result = MEMORY[0x24C5248C0](*(void *)(v7 + 40), v23, 4);
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 4 * v15;
      *(_DWORD *)(*(void *)(v7 + 48) + v16) = v23;
      *(_DWORD *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  long long *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  long long v33[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, ScrollStateRequest>(0, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, AnyTrackedValue>, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue);
  uint64_t v32 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v31 = v3;
    int64_t v8 = 0;
    char v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_41;
        }
        if (v8 >= v13)
        {
LABEL_32:
          if ((v32 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v31;
            goto LABEL_39;
          }
          BOOL v30 = 1 << *(unsigned char *)(v5 + 32);
          if (v30 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            uint64_t *v9 = -1 << v30;
          }
          uint64_t v3 = v31;
          *(void *)(v5 + 16) = 0;
          break;
        }
        int64_t v19 = v9[v8];
        if (!v19)
        {
          unint64_t v20 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_32;
          }
          int64_t v19 = v9[v20];
          if (!v19)
          {
            while (1)
            {
              int64_t v8 = v20 + 1;
              if (__OFADD__(v20, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_32;
              }
              int64_t v19 = v9[v8];
              ++v20;
              if (v19) {
                goto LABEL_19;
              }
            }
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      uint64_t v22 = (long long *)(*(void *)(v5 + 56) + 40 * v17);
      if (v32) {
        outlined init with take of ScrollStateRequest(v22, (uint64_t)v33);
      }
      else {
        outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v33);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unsigned int v23 = -1 << *(unsigned char *)(v7 + 32);
      int v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          char v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      uint64_t result = outlined init with take of ScrollStateRequest(v33, *(void *)(v7 + 56) + 40 * v15);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_39:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ForwardedEventDispatcher>, &lazy cache variable for type metadata for ForwardedEventDispatcher, (uint64_t)&protocol descriptor for ForwardedEventDispatcher, (void (*)(uint64_t, unsigned char *))outlined init with take of ScrollStateRequest);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, AnyAccessibilityPropertiesEntry>, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, (uint64_t)&protocol descriptor for AnyAccessibilityPropertiesEntry, (void (*)(uint64_t, unsigned char *))outlined init with take of ScrollStateRequest);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, UInt>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    int v34 = v3;
    int64_t v8 = 0;
    char v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                uint64_t *v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      unsigned int v23 = *(void *)(*(void *)(v5 + 48) + v22);
      int v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  void *v36;
  char v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, DynamicPropertyCache.Fields>);
  uint64_t v37 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v36 = (void *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    int v34 = v3;
    char v35 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_40;
        }
        uint64_t result = v5 + 64;
        if (v8 >= v35)
        {
LABEL_31:
          if ((v37 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v34;
            goto LABEL_38;
          }
          uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
          if (v33 >= 64) {
            bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *uint64_t v36 = -1 << v33;
          }
          uint64_t v3 = v34;
          *(void *)(v5 + 16) = 0;
          break;
        }
        int64_t v21 = v36[v8];
        if (!v21)
        {
          uint64_t v22 = v8 + 1;
          if (v8 + 1 >= v35) {
            goto LABEL_31;
          }
          int64_t v21 = v36[v22];
          if (!v21)
          {
            while (1)
            {
              int64_t v8 = v22 + 1;
              if (__OFADD__(v22, 1)) {
                break;
              }
              if (v8 >= v35) {
                goto LABEL_31;
              }
              int64_t v21 = v36[v8];
              ++v22;
              if (v21) {
                goto LABEL_20;
              }
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        uint64_t v11 = (v21 - 1) & v21;
        int64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      unsigned int v23 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      int v24 = *(void *)(v5 + 56) + 24 * v19;
      uint64_t v25 = *(void *)v24;
      unint64_t v26 = *(void *)(v24 + 8);
      unint64_t v27 = *(unsigned char *)(v24 + 16);
      char v28 = *(_DWORD *)(v24 + 20);
      if ((v37 & 1) == 0) {
        outlined copy of DynamicPropertyCache.Fields.Layout();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v29 = 0;
        BOOL v30 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v31 = v15 == v30;
          if (v15 == v30) {
            unint64_t v15 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v15);
        }
        while (v32 == -1);
        uint64_t v16 = __clz(__rbit64(~v32)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v23;
      unint64_t v17 = *(void *)(v7 + 56) + 24 * v16;
      *(void *)unint64_t v17 = v25;
      *(void *)(v17 + 8) = v26;
      *(unsigned char *)(v17 + 16) = v27;
      *(_DWORD *)(v17 + 20) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (void (*)(void))type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>);
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  char v19;
  long long v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  _OWORD v25[2];
  char v26;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Spacing.Key, Spacing.Value>, (void (*)(void))lazy protocol witness table accessor for type Spacing.Key and conformance Spacing.Key);
  uint64_t v6 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v8 = (void *)(v5 + 64);
    char v9 = -1;
    if (v7 < 64) {
      char v9 = ~(-1 << v7);
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        uint64_t v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v15 = v14 | (v13 << 6);
      }
      else
      {
        int64_t v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_27:
          __break(1u);
          return result;
        }
        if (v21 >= v11) {
          goto LABEL_20;
        }
        uint64_t v22 = v8[v21];
        ++v13;
        if (!v22)
        {
          int64_t v13 = v21 + 1;
          if (v21 + 1 >= v11) {
            goto LABEL_20;
          }
          uint64_t v22 = v8[v13];
          if (!v22)
          {
            unsigned int v23 = v21 + 2;
            if (v23 >= v11)
            {
LABEL_20:
              swift_release();
              if (a2)
              {
                int v24 = 1 << *(unsigned char *)(v5 + 32);
                if (v24 > 63) {
                  bzero((void *)(v5 + 64), ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v8 = -1 << v24;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v22 = v8[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v13 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_27;
                }
                if (v13 >= v11) {
                  goto LABEL_20;
                }
                uint64_t v22 = v8[v13];
                ++v23;
                if (v22) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v13 = v23;
          }
        }
LABEL_19:
        uint64_t v10 = (v22 - 1) & v22;
        unint64_t v15 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      uint64_t v16 = *(void *)(v5 + 48) + 16 * v15;
      unint64_t v17 = *(void *)(v5 + 56) + 40 * v15;
      unint64_t v18 = *(void *)v16;
      int64_t v19 = *(unsigned char *)(v17 + 32);
      unint64_t v20 = *(_OWORD *)(v17 + 16);
      v25[0] = *(_OWORD *)v17;
      v25[1] = v20;
      unint64_t v26 = v19;
      uint64_t result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(v18, *(unsigned char *)(v16 + 8), (uint64_t)v25, v6);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<UInt32, Int>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v33 = a2;
    uint64_t v32 = v3;
    int64_t v8 = 0;
    char v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    BOOL v30 = -1 << v10;
    uint64_t v31 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        unint64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        int64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          int64_t v19 = v9[v8];
          if (!v19)
          {
            unint64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v32;
                goto LABEL_38;
              }
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                uint64_t *v9 = v30;
              }
              uint64_t v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                int64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v17);
      uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      uint64_t result = MEMORY[0x24C5248C0](*(void *)(v7 + 40), v21, 4);
      unsigned int v23 = -1 << *(unsigned char *)(v7 + 32);
      int v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          char v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v15) = v21;
      *(void *)(*(void *)(v7 + 56) + 8 * v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _OWORD v32[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, Any>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v31 = v3;
    int64_t v8 = 0;
    char v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_41;
        }
        if (v8 >= v13)
        {
LABEL_32:
          if ((a2 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v31;
            goto LABEL_39;
          }
          BOOL v30 = 1 << *(unsigned char *)(v5 + 32);
          if (v30 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            uint64_t *v9 = -1 << v30;
          }
          uint64_t v3 = v31;
          *(void *)(v5 + 16) = 0;
          break;
        }
        int64_t v19 = v9[v8];
        if (!v19)
        {
          unint64_t v20 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_32;
          }
          int64_t v19 = v9[v20];
          if (!v19)
          {
            while (1)
            {
              int64_t v8 = v20 + 1;
              if (__OFADD__(v20, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_32;
              }
              int64_t v19 = v9[v8];
              ++v20;
              if (v19) {
                goto LABEL_19;
              }
            }
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      uint64_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2) {
        outlined init with take of Any(v22, v32);
      }
      else {
        outlined init with copy of Any((uint64_t)v22, (uint64_t)v32);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unsigned int v23 = -1 << *(unsigned char *)(v7 + 32);
      int v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          char v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      uint64_t result = (uint64_t)outlined init with take of Any(v32, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_39:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, AnyFontModifier>, (void (*)(uint64_t))type metadata accessor for AnyFontModifier);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    uint64_t v32 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v10 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        int64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        uint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          uint64_t v22 = v9[v8];
          if (!v22)
          {
            unsigned int v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  uint64_t *v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                uint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      char v28 = 8 * v20;
      unint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      BOOL v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v26 = v16 == v25;
          if (v16 == v25) {
            uint64_t v16 = 0;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<OpaquePointer, DisplayList.ViewUpdater.ViewCache.Key>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    int v34 = (void *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        unint64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v33) {
          goto LABEL_31;
        }
        unint64_t v18 = v34[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v33) {
            goto LABEL_31;
          }
          unint64_t v18 = v34[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v33)
            {
LABEL_31:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int v34 = -1 << v32;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v33) {
                  goto LABEL_31;
                }
                unint64_t v18 = v34[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      unint64_t v20 = *(void *)(v5 + 56) + 20 * v16;
      int64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      uint64_t v22 = *(unsigned char *)(v20 + 16);
      int v24 = *(void *)v20;
      unsigned int v23 = *(void *)(v20 + 8);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        int64_t v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v7 + 48) + 8 * v13) = v21;
      uint64_t v14 = *(void *)(v7 + 56) + 20 * v13;
      *(void *)uint64_t v14 = v24;
      *(void *)(v14 + 8) = v23;
      *(unsigned char *)(v14 + 16) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::UInt32 v31;
  Swift::UInt32 v32;
  Swift::UInt32 v33;
  Swift::UInt32 v34;
  Swift::UInt8 v35;
  long long *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  int64_t v41;
  void *v42;
  uint64_t v43;
  char v44;
  int64_t v45;
  long long v46;
  char v47;
  char v48;
  int v49;
  __int16 v50;
  char v51;
  char v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<DisplayList.ViewUpdater.ViewCache.Key, DisplayList.ViewUpdater.ViewInfo>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key);
  uint64_t v44 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v42 = (void *)(v5 + 64);
    long long v43 = v5;
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    char v41 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        int64_t v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v45 = v8;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v42;
        if (v21 >= v41) {
          goto LABEL_33;
        }
        uint64_t v22 = v42[v21];
        unsigned int v23 = v8 + 1;
        if (!v22)
        {
          unsigned int v23 = v21 + 1;
          if (v21 + 1 >= v41) {
            goto LABEL_33;
          }
          uint64_t v22 = v42[v23];
          if (!v22)
          {
            int v24 = v21 + 2;
            if (v24 >= v41)
            {
LABEL_33:
              if ((v44 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v40 = 1 << *(unsigned char *)(v5 + 32);
              if (v40 >= 64) {
                bzero(v42, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v42 = -1 << v40;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v22 = v42[v24];
            if (!v22)
            {
              while (1)
              {
                unsigned int v23 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v23 >= v41) {
                  goto LABEL_33;
                }
                uint64_t v22 = v42[v23];
                ++v24;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            unsigned int v23 = v24;
          }
        }
LABEL_30:
        uint64_t v11 = (v22 - 1) & v22;
        uint64_t v45 = v23;
        unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
      }
      unint64_t v29 = *(void *)(v5 + 56);
      BOOL v30 = *(void *)(v5 + 48) + 20 * v20;
      uint64_t v32 = *(_DWORD *)v30;
      uint64_t v31 = *(_DWORD *)(v30 + 4);
      int v34 = *(_DWORD *)(v30 + 8);
      uint64_t v33 = *(_DWORD *)(v30 + 12);
      char v35 = *(unsigned char *)(v30 + 16);
      uint64_t v36 = (long long *)(v29 + 120 * v20);
      uint64_t v37 = *((void *)v36 + 2);
      uint64_t v46 = *(long long *)((char *)v36 + 24);
      uint64_t v55 = *(long long *)((char *)v36 + 40);
      uint64_t v56 = *v36;
      uint64_t v51 = *((unsigned char *)v36 + 57);
      uint64_t v52 = *((unsigned char *)v36 + 56);
      uint64_t v53 = v36[5];
      uint64_t v54 = v36[4];
      uint64_t v49 = *((_DWORD *)v36 + 25);
      uint64_t v50 = *((_WORD *)v36 + 48);
      uint64_t v47 = *((unsigned char *)v36 + 105);
      uint64_t v48 = *((unsigned char *)v36 + 104);
      long long v38 = *((void *)v36 + 14);
      if ((v44 & 1) == 0)
      {
        swift_unknownObjectRetain();
        uint64_t v39 = *((id *)&v56 + 1);
        swift_unknownObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v32);
      Hasher._combine(_:)(v31);
      Hasher._combine(_:)(v34);
      Hasher._combine(_:)(v33);
      Hasher._combine(_:)(v35);
      uint64_t result = Hasher._finalize()();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v27 = v15 == v26;
          if (v15 == v26) {
            unint64_t v15 = 0;
          }
          v25 |= v27;
          char v28 = *(void *)(v12 + 8 * v15);
        }
        while (v28 == -1);
        uint64_t v16 = __clz(__rbit64(~v28)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      unint64_t v17 = *(void *)(v7 + 48) + 20 * v16;
      *(_DWORD *)unint64_t v17 = v32;
      *(_DWORD *)(v17 + 4) = v31;
      *(_DWORD *)(v17 + 8) = v34;
      *(_DWORD *)(v17 + 12) = v33;
      *(unsigned char *)(v17 + 16) = v35;
      unint64_t v18 = *(void *)(v7 + 56) + 120 * v16;
      *(_OWORD *)unint64_t v18 = v56;
      *(void *)(v18 + 16) = v37;
      *(_OWORD *)(v18 + 24) = v46;
      *(_OWORD *)(v18 + 40) = v55;
      *(unsigned char *)(v18 + 56) = v52;
      *(unsigned char *)(v18 + 57) = v51;
      *(_OWORD *)(v18 + 64) = v54;
      *(_OWORD *)(v18 + 80) = v53;
      *(_WORD *)(v18 + 96) = v50;
      *(_DWORD *)(v18 + 100) = v49;
      *(unsigned char *)(v18 + 104) = v48;
      *(unsigned char *)(v18 + 105) = v47;
      *(void *)(v18 + 112) = v38;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v43;
      int64_t v8 = v45;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  uint64_t v23;
  Swift::UInt v24;
  Swift::UInt v25;
  Swift::UInt v26;
  Swift::UInt v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int64_t v39;
  void *v40;
  uint64_t v41;
  char v42;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CUIDesignLibraryCacheKey, CUIDesignLibraryCacheKey.Entry>, (void (*)(void))lazy protocol witness table accessor for type CUIDesignLibraryCacheKey and conformance CUIDesignLibraryCacheKey);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    long long v38 = a2;
    int64_t v8 = 0;
    uint64_t v40 = (void *)(v5 + 64);
    char v41 = v5;
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v39 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        unint64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v40;
        if (v18 >= v39) {
          goto LABEL_31;
        }
        int64_t v19 = v40[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v39) {
            goto LABEL_31;
          }
          int64_t v19 = v40[v8];
          if (!v19)
          {
            unint64_t v20 = v18 + 2;
            if (v20 >= v39)
            {
LABEL_31:
              if ((v38 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
              if (v37 >= 64) {
                bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v40 = -1 << v37;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v19 = v40[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v39) {
                  goto LABEL_31;
                }
                int64_t v19 = v40[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        uint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = *(void *)(v5 + 48) + 24 * v17;
      uint64_t v22 = *(void *)(v21 + 16);
      unsigned int v23 = *(void *)(v5 + 56) + 20 * v17;
      int v24 = *(unsigned __int8 *)(v21 + 10);
      uint64_t v25 = *(unsigned __int8 *)(v21 + 9);
      unint64_t v26 = *(unsigned __int8 *)(v21 + 8);
      unint64_t v27 = *(void *)v21;
      uint64_t v42 = *(unsigned char *)(v23 + 16);
      unint64_t v29 = *(void *)v23;
      char v28 = *(void *)(v23 + 8);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      Hasher._combine(_:)(v26);
      Hasher._combine(_:)(v25);
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v22);
      uint64_t result = Hasher._finalize()();
      BOOL v30 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v31 = result & ~v30;
      uint64_t v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v12 + 8 * (v31 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v31) & ~*(void *)(v12 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v33 = 0;
        int v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          char v35 = v32 == v34;
          if (v32 == v34) {
            uint64_t v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v12 + 8 * v32);
        }
        while (v36 == -1);
        int64_t v13 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = *(void *)(v7 + 48) + 24 * v13;
      *(void *)uint64_t v14 = v27;
      *(unsigned char *)(v14 + 8) = v26;
      *(unsigned char *)(v14 + 9) = v25;
      *(unsigned char *)(v14 + 10) = v24;
      *(void *)(v14 + 16) = v22;
      unint64_t v15 = *(void *)(v7 + 56) + 20 * v13;
      *(void *)unint64_t v15 = v29;
      *(void *)(v15 + 8) = v28;
      *(unsigned char *)(v15 + 16) = v42;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v41;
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  _OWORD *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _OWORD v35[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<CFStringRef, Any>();
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v33 = v2;
  int v34 = v5 + 64;
  if (v8 < 64) {
    char v9 = ~(-1 << v8);
  }
  else {
    char v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    unint64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v11) {
      break;
    }
    int64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v34 + 8 * v18);
    ++v14;
    if (!v20)
    {
      uint64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v34 + 8 * v14);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v11)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v33;
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v34 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            uint64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v34 + 8 * v14);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v14 = v21;
      }
    }
LABEL_21:
    uint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    uint64_t v22 = *(void **)(*(void *)(v5 + 48) + 8 * v17);
    unsigned int v23 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
    if (a2)
    {
      outlined init with take of Any(v23, v35);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v23, (uint64_t)v35);
      int v24 = v22;
    }
    Hasher.init(_seed:)();
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    _CFObject.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v7 + 48) + 8 * v15) = v22;
    uint64_t result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v33;
  int64_t v19 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v19, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v19 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  long long v32;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, DisplayList.ViewUpdater.ViewCache.AsyncValues>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v29 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    BOOL v30 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = v3;
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        int64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v13) {
          goto LABEL_33;
        }
        uint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v13) {
            goto LABEL_33;
          }
          uint64_t v22 = v9[v8];
          if (!v22)
          {
            unsigned int v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v31;
                goto LABEL_40;
              }
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                uint64_t *v9 = v29;
              }
              uint64_t v3 = v31;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v13) {
                  goto LABEL_33;
                }
                uint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      char v28 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
      uint64_t v32 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v26 = v17 == v25;
          if (v17 == v25) {
            unint64_t v17 = 0;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        unint64_t v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v7 + 48) + 8 * v18) = v28;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18) = v32;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  Swift::UInt8 v22;
  Swift::UInt v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, &lazy cache variable for type metadata for _DictionaryStorage<ConstantKey, AGAttribute>, type metadata accessor for AGAttribute, (void (*)(void))lazy protocol witness table accessor for type ConstantKey and conformance ConstantKey);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v33 = a2;
    int64_t v8 = 0;
    int v34 = (void *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_38;
        }
        uint64_t result = v5 + 64;
        if (v8 >= v12)
        {
LABEL_29:
          if ((v33 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v2;
            goto LABEL_36;
          }
          uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
          if (v32 >= 64) {
            bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *int v34 = -1 << v32;
          }
          uint64_t v3 = v2;
          *(void *)(v5 + 16) = 0;
          break;
        }
        int64_t v19 = v34[v8];
        if (!v19)
        {
          unint64_t v20 = v8 + 1;
          if (v8 + 1 >= v12) {
            goto LABEL_29;
          }
          int64_t v19 = v34[v20];
          if (!v19)
          {
            while (1)
            {
              int64_t v8 = v20 + 1;
              if (__OFADD__(v20, 1)) {
                break;
              }
              if (v8 >= v12) {
                goto LABEL_29;
              }
              int64_t v19 = v34[v8];
              ++v20;
              if (v19) {
                goto LABEL_19;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        uint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = *(void *)(v5 + 48) + 16 * v17;
      uint64_t v22 = *(unsigned char *)(v21 + 8);
      unsigned int v23 = *(void *)v21;
      int v24 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v17);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      Hasher._combine(_:)(v22);
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v13 + 8 * v27);
        }
        while (v31 == -1);
        uint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = *(void *)(v7 + 48) + 16 * v14;
      *(void *)unint64_t v15 = v23;
      *(unsigned char *)(v15 + 8) = v22;
      *(_DWORD *)(*(void *)(v7 + 56) + 4 * v14) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_36:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt8 v22;
  Swift::UInt v23;
  Swift::UInt32 v24;
  Swift::UInt32 v25;
  Swift::UInt32 v26;
  Swift::UInt32 v27;
  Swift::UInt32 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void *v38;
  uint64_t v39;
  int64_t v40;
  int v41;
  uint64_t v42;
  int64_t v43;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ResolvedShapeStyles, Attribute<_ShapeStyle_Pack>>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v37 = a2;
    int64_t v8 = 0;
    long long v38 = (void *)(v5 + 64);
    uint64_t v39 = v5;
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v40 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v42 = (v11 - 1) & v11;
        long long v43 = v8;
        unint64_t v15 = __clz(__rbit64(v11)) | (v8 << 6);
      }
      else
      {
        uint64_t v16 = __OFADD__(v8, 1);
        unint64_t v17 = v8 + 1;
        if (v16) {
          goto LABEL_38;
        }
        uint64_t result = (uint64_t)v38;
        if (v17 >= v40)
        {
LABEL_29:
          if ((v37 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v2;
            goto LABEL_36;
          }
          uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
          if (v36 >= 64) {
            bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *long long v38 = -1 << v36;
          }
          uint64_t v3 = v2;
          *(void *)(v5 + 16) = 0;
          break;
        }
        unint64_t v18 = v38[v17];
        if (!v18)
        {
          int64_t v19 = v17 + 1;
          if (v17 + 1 >= v40) {
            goto LABEL_29;
          }
          unint64_t v18 = v38[v19];
          if (!v18)
          {
            while (1)
            {
              unint64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                break;
              }
              if (v17 >= v40) {
                goto LABEL_29;
              }
              unint64_t v18 = v38[v17];
              ++v19;
              if (v18) {
                goto LABEL_19;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v17;
        }
LABEL_19:
        uint64_t v42 = (v18 - 1) & v18;
        long long v43 = v17;
        unint64_t v15 = __clz(__rbit64(v18)) + (v17 << 6);
      }
      unint64_t v20 = *(void *)(v5 + 56);
      int64_t v21 = *(void *)(v5 + 48) + 24 * v15;
      uint64_t v22 = *(unsigned char *)(v21 + 21);
      unsigned int v23 = *(unsigned __int8 *)(v21 + 20);
      int v24 = *(_DWORD *)(v21 + 12);
      uint64_t v25 = *(_DWORD *)(v21 + 16);
      unint64_t v27 = *(_DWORD *)(v21 + 4);
      unint64_t v26 = *(_DWORD *)(v21 + 8);
      char v28 = *(_DWORD *)v21;
      char v41 = *(_DWORD *)(v20 + 4 * v15);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      Hasher._combine(_:)(v27);
      Hasher._combine(_:)(v26);
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v25);
      Hasher._combine(_:)(v23);
      Hasher._combine(_:)(v22);
      uint64_t result = Hasher._finalize()();
      unint64_t v29 = -1 << *(unsigned char *)(v7 + 32);
      BOOL v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
        int64_t v8 = v43;
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = (unint64_t)(63 - v29) >> 6;
        int64_t v8 = v43;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          int v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          char v35 = *(void *)(v12 + 8 * v31);
        }
        while (v35 == -1);
        int64_t v13 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = *(void *)(v7 + 48) + 24 * v13;
      *(_DWORD *)uint64_t v14 = v28;
      *(_DWORD *)(v14 + 4) = v27;
      *(_DWORD *)(v14 + 8) = v26;
      *(_DWORD *)(v14 + 12) = v24;
      *(_DWORD *)(v14 + 16) = v25;
      *(unsigned char *)(v14 + 20) = v23;
      *(unsigned char *)(v14 + 21) = v22;
      *(_DWORD *)(*(void *)(v7 + 56) + 4 * v13) = v41;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v39;
      uint64_t v11 = v42;
    }
  }
  uint64_t result = swift_release();
LABEL_36:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  long long v34;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, ConditionalTypeDescriptor<ViewDescriptor>>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v33 = v3;
    int64_t v8 = 0;
    char v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        int64_t v21 = v20 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_40;
        }
        if (v8 >= v13)
        {
LABEL_31:
          if ((a2 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v33;
            goto LABEL_38;
          }
          uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
          if (v32 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            uint64_t *v9 = -1 << v32;
          }
          uint64_t v3 = v33;
          *(void *)(v5 + 16) = 0;
          break;
        }
        unsigned int v23 = v9[v8];
        if (!v23)
        {
          int v24 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_31;
          }
          unsigned int v23 = v9[v24];
          if (!v23)
          {
            while (1)
            {
              int64_t v8 = v24 + 1;
              if (__OFADD__(v24, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_31;
              }
              unsigned int v23 = v9[v8];
              ++v24;
              if (v23) {
                goto LABEL_20;
              }
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        unint64_t v12 = (v23 - 1) & v23;
        int64_t v21 = __clz(__rbit64(v23)) + (v8 << 6);
      }
      uint64_t v25 = *(void *)(*(void *)(v5 + 48) + 8 * v21);
      unint64_t v26 = *(void *)(v5 + 56) + 24 * v21;
      unint64_t v27 = *(void *)v26;
      int v34 = *(_OWORD *)(v26 + 8);
      if ((a2 & 1) == 0) {
        outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v27);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v17 == v29;
          if (v17 == v29) {
            unint64_t v17 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v17);
        }
        while (v31 == -1);
        unint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v7 + 48) + 8 * v18) = v25;
      int64_t v19 = *(void *)(v7 + 56) + 24 * v18;
      *(void *)int64_t v19 = v27;
      *(_OWORD *)(v19 + 8) = v34;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, [DisplayList.ViewUpdater.ViewCache.PendingAsyncValue]>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    uint64_t v32 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v10 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        int64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        uint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          uint64_t v22 = v9[v8];
          if (!v22)
          {
            unsigned int v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  uint64_t *v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                uint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      char v28 = 8 * v20;
      unint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      BOOL v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v26 = v16 == v25;
          if (v16 == v25) {
            uint64_t v16 = 0;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, TupleTypeDescription<ViewDescriptor>>, &lazy cache variable for type metadata for TupleTypeDescription<ViewDescriptor>, (uint64_t)&type metadata for ViewDescriptor, (uint64_t)&protocol witness table for ViewDescriptor);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, TupleTypeDescription<StyleContextDescriptor>>, (unint64_t *)&lazy cache variable for type metadata for TupleTypeDescription<StyleContextDescriptor>, (uint64_t)&type metadata for StyleContextDescriptor, (uint64_t)&protocol witness table for StyleContextDescriptor);
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  int64_t v31;
  void *v32;
  uint64_t v33;
  unsigned char v34[96];

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for NamedImage.VectorKey(0);
  uint64_t v33 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *v2;
  type metadata accessor for _DictionaryStorage<NamedImage.VectorKey, NamedImage.VectorInfo>();
  char v9 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = (void *)v10;
  if (*(void *)(v8 + 16))
  {
    BOOL v30 = v2;
    unint64_t v12 = 1 << *(unsigned char *)(v8 + 32);
    int64_t v13 = *(void *)(v8 + 64);
    uint64_t v32 = (void *)(v8 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    uint64_t v31 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    unint64_t v18 = 0;
    while (1)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        int64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        uint64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
          __break(1u);
LABEL_33:
          __break(1u);
          return result;
        }
        unsigned int v23 = v32;
        if (v22 >= v31) {
          goto LABEL_24;
        }
        int v24 = v32[v22];
        ++v18;
        if (!v24)
        {
          unint64_t v18 = v22 + 1;
          if (v22 + 1 >= v31) {
            goto LABEL_24;
          }
          int v24 = v32[v18];
          if (!v24)
          {
            uint64_t v25 = v22 + 2;
            if (v25 >= v31)
            {
LABEL_24:
              swift_release();
              if ((v9 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v30;
                goto LABEL_31;
              }
              char v28 = 1 << *(unsigned char *)(v8 + 32);
              if (v28 >= 64) {
                bzero(v23, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unsigned int v23 = -1 << v28;
              }
              uint64_t v3 = v30;
              *(void *)(v8 + 16) = 0;
              break;
            }
            int v24 = v32[v25];
            if (!v24)
            {
              while (1)
              {
                unint64_t v18 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_33;
                }
                if (v18 >= v31) {
                  goto LABEL_24;
                }
                int v24 = v32[v18];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            unint64_t v18 = v25;
          }
        }
LABEL_21:
        unint64_t v15 = (v24 - 1) & v24;
        int64_t v21 = __clz(__rbit64(v24)) + (v18 << 6);
      }
      unint64_t v26 = *(void *)(v33 + 72);
      unint64_t v27 = *(void *)(v8 + 48) + v26 * v21;
      if (v9)
      {
        outlined init with take of Text.Effect.InteractionMetrics(v27, (uint64_t)v7, type metadata accessor for NamedImage.VectorKey);
        outlined init with take of NamedImage.VectorInfo(*(void *)(v8 + 56) + 88 * v21, (uint64_t)v34);
      }
      else
      {
        outlined init with copy of Text.Effect.InteractionMetrics(v27, (uint64_t)v7, type metadata accessor for NamedImage.VectorKey);
        outlined init with copy of NamedImage.VectorInfo(*(void *)(v8 + 56) + 88 * v21, (uint64_t)v34);
      }
      Hasher.init(_seed:)();
      NamedImage.VectorKey.hash(into:)();
      Hasher._finalize()();
      int64_t v19 = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      outlined init with take of Text.Effect.InteractionMetrics((uint64_t)v7, v11[6] + v26 * v19, type metadata accessor for NamedImage.VectorKey);
      uint64_t result = outlined init with take of NamedImage.VectorInfo((uint64_t)v34, v11[7] + 88 * v19);
      ++v11[2];
    }
  }
  uint64_t result = swift_release();
LABEL_31:
  *uint64_t v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  long long v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  int64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *);
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  void *v49;
  char v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  long long v54;
  char v55[80];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, CanvasSymbols.Child>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  uint64_t v50 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v49 = (void *)(v5 + 64);
  if (v8 < 64) {
    char v9 = ~(-1 << v8);
  }
  else {
    char v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v47 = v2;
  uint64_t v48 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v21 >= v48) {
      break;
    }
    uint64_t v22 = v49;
    unsigned int v23 = v49[v21];
    ++v14;
    if (!v23)
    {
      uint64_t v14 = v21 + 1;
      if (v21 + 1 >= v48) {
        goto LABEL_36;
      }
      unsigned int v23 = v49[v14];
      if (!v23)
      {
        int v24 = v21 + 2;
        if (v24 >= v48)
        {
LABEL_36:
          swift_release();
          uint64_t v3 = v47;
          if ((v50 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }
        unsigned int v23 = v49[v24];
        if (!v23)
        {
          while (1)
          {
            uint64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_45;
            }
            if (v14 >= v48) {
              goto LABEL_36;
            }
            unsigned int v23 = v49[v14];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v14 = v24;
      }
    }
LABEL_21:
    uint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = (void *)(*(void *)(v5 + 48) + 16 * v20);
    *(void *)&int64_t v13 = *v25;
    uint64_t v54 = v13;
    unint64_t v26 = v25[1];
    unint64_t v27 = *(void *)(v5 + 56) + 48 * v20;
    char v28 = *(void *)(v27 + 8);
    unint64_t v29 = *(_DWORD *)(v27 + 16);
    BOOL v30 = *(void *)(v27 + 24);
    uint64_t v31 = *(void *)(v27 + 32);
    uint64_t v52 = *(void **)v27;
    uint64_t v53 = *(void *)(v27 + 40);
    if ((v50 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      uint64_t v32 = v52;
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v54);
    Hasher._combine(_:)(DWORD1(v54));
    if (v26)
    {
      Hasher._combine(_:)(1u);
      uint64_t v51 = v10;
      uint64_t v33 = v7;
      int v34 = v14;
      char v35 = v29;
      uint64_t v36 = v28;
      uint64_t v37 = v5;
      long long v38 = *(void (**)(char *))(*(void *)v26 + 112);
      swift_retain();
      v38(v55);
      uint64_t v5 = v37;
      char v28 = v36;
      unint64_t v29 = v35;
      uint64_t v14 = v34;
      uint64_t v7 = v33;
      uint64_t v10 = v51;
      swift_release();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v39 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v40 = result & ~v39;
    char v41 = v40 >> 6;
    if (((-1 << v40) & ~*(void *)(v11 + 8 * (v40 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v40) & ~*(void *)(v11 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v16 = v30;
      int64_t v13 = v54;
    }
    else
    {
      uint64_t v42 = 0;
      long long v43 = (unint64_t)(63 - v39) >> 6;
      uint64_t v16 = v30;
      int64_t v13 = v54;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        uint64_t v44 = v41 == v43;
        if (v41 == v43) {
          char v41 = 0;
        }
        v42 |= v44;
        uint64_t v45 = *(void *)(v11 + 8 * v41);
      }
      while (v45 == -1);
      unint64_t v15 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    unint64_t v17 = (void *)(*(void *)(v7 + 48) + 16 * v15);
    void *v17 = v13;
    v17[1] = v26;
    unint64_t v18 = *(void *)(v7 + 56) + 48 * v15;
    *(void *)unint64_t v18 = v52;
    *(void *)(v18 + 8) = v28;
    *(_DWORD *)(v18 + 16) = v29;
    *(void *)(v18 + 24) = v16;
    *(void *)(v18 + 32) = v31;
    *(void *)(v18 + 40) = v53;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v47;
  uint64_t v22 = v49;
  if ((v50 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v46 = 1 << *(unsigned char *)(v5 + 32);
  if (v46 >= 64) {
    bzero(v22, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v46;
  }
  *(void *)(v5 + 16) = 0;
LABEL_43:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  void *v35;
  _OWORD v36[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  int64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    char v35 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    int v34 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    uint64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }
      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v19 >= v34) {
          goto LABEL_34;
        }
        unint64_t v20 = v35[v19];
        ++v14;
        if (!v20)
        {
          uint64_t v14 = v19 + 1;
          if (v19 + 1 >= v34) {
            goto LABEL_34;
          }
          unint64_t v20 = v35[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v34)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (v6)
              {
                uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v35 = -1 << v33;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v20 = v35[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v14 >= v34) {
                  goto LABEL_34;
                }
                unint64_t v20 = v35[v14];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v14 = v21;
          }
        }
LABEL_21:
        uint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      uint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      int v24 = *v22;
      unsigned int v23 = v22[1];
      uint64_t v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if (v6)
      {
        outlined init with take of Any(v25, v36);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v25, (uint64_t)v36);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v27 = result & ~v26;
      char v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v29 = 0;
        BOOL v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            char v28 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        unint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      *uint64_t v16 = v24;
      v16[1] = v23;
      uint64_t result = (uint64_t)outlined init with take of Any(v36, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt64 v23;
  int v24;
  Swift::UInt64 v25;
  int v26;
  long long *v27;
  char v28;
  Swift::UInt64 v29;
  Swift::UInt64 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  void *v40;
  uint64_t v41;
  char v42;
  long long v43;
  long long v44;
  long long v45;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<_ProposedSize, ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer>();
  uint64_t v42 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v40 = (void *)(v5 + 64);
    char v41 = v5;
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v39 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        unint64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v40;
        if (v18 >= v39) {
          goto LABEL_44;
        }
        int64_t v19 = v40[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v39) {
            goto LABEL_44;
          }
          int64_t v19 = v40[v8];
          if (!v19)
          {
            unint64_t v20 = v18 + 2;
            if (v20 >= v39)
            {
LABEL_44:
              if ((v42 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_51;
              }
              long long v38 = 1 << *(unsigned char *)(v5 + 32);
              if (v38 >= 64) {
                bzero(v40, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v40 = -1 << v38;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v19 = v40[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_53;
                }
                if (v8 >= v39) {
                  goto LABEL_44;
                }
                int64_t v19 = v40[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        uint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = *(void *)(v5 + 56);
      uint64_t v22 = *(void *)(v5 + 48) + 32 * v17;
      unsigned int v23 = *(void *)v22;
      int v24 = *(unsigned __int8 *)(v22 + 8);
      uint64_t v25 = *(void *)(v22 + 16);
      unint64_t v26 = *(unsigned __int8 *)(v22 + 24);
      unint64_t v27 = (long long *)(v21 + 56 * v17);
      long long v43 = *v27;
      uint64_t v44 = v27[1];
      char v28 = *((unsigned char *)v27 + 32);
      uint64_t v45 = *(long long *)((char *)v27 + 40);
      if ((v42 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      if (v24)
      {
        Hasher._combine(_:)(0);
        if (v26) {
          goto LABEL_34;
        }
      }
      else
      {
        Hasher._combine(_:)(1u);
        if ((v23 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          BOOL v30 = v23;
        }
        else {
          BOOL v30 = 0;
        }
        Hasher._combine(_:)(v30);
        if (v26)
        {
LABEL_34:
          Hasher._combine(_:)(0);
          goto LABEL_35;
        }
      }
      Hasher._combine(_:)(1u);
      if ((v25 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        unint64_t v29 = v25;
      }
      else {
        unint64_t v29 = 0;
      }
      Hasher._combine(_:)(v29);
LABEL_35:
      uint64_t result = Hasher._finalize()();
      uint64_t v31 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v32 = result & ~v31;
      uint64_t v33 = v32 >> 6;
      if (((-1 << v32) & ~*(void *)(v12 + 8 * (v32 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v32) & ~*(void *)(v12 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int v34 = 0;
        char v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_52;
          }
          uint64_t v36 = v33 == v35;
          if (v33 == v35) {
            uint64_t v33 = 0;
          }
          v34 |= v36;
          uint64_t v37 = *(void *)(v12 + 8 * v33);
        }
        while (v37 == -1);
        int64_t v13 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = *(void *)(v7 + 48) + 32 * v13;
      *(void *)uint64_t v14 = v23;
      *(unsigned char *)(v14 + 8) = v24;
      *(void *)(v14 + 16) = v25;
      *(unsigned char *)(v14 + 24) = v26;
      unint64_t v15 = *(void *)(v7 + 56) + 56 * v13;
      *(_OWORD *)unint64_t v15 = v43;
      *(_OWORD *)(v15 + 16) = v44;
      *(unsigned char *)(v15 + 32) = v28;
      *(_OWORD *)(v15 + 40) = v45;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v41;
    }
  }
  uint64_t result = swift_release();
LABEL_51:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  long long v17;
  long long v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  long long v39;
  long long v40;
  uint64_t v41;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, Int>);
  long long v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    char v9 = ~(-1 << v8);
  }
  else {
    char v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unsigned int v23 = *(void *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      uint64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unsigned int v23 = *(void *)(v37 + 8 * v14);
      if (!v23)
      {
        int v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((v38 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unsigned int v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unsigned int v23 = *(void *)(v37 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v14 = v24;
      }
    }
LABEL_21:
    uint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (v38)
    {
      unint64_t v26 = *(_OWORD *)v25;
      unint64_t v27 = *(_OWORD *)(v25 + 16);
      char v41 = *(void *)(v25 + 32);
      uint64_t v39 = v26;
      uint64_t v40 = v27;
    }
    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v39);
    }
    char v28 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    unint64_t v29 = -1 << *(unsigned char *)(v7 + 32);
    BOOL v30 = result & ~v29;
    uint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v32 = 0;
      uint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        int v34 = v31 == v33;
        if (v31 == v33) {
          uint64_t v31 = 0;
        }
        v32 |= v34;
        char v35 = *(void *)(v12 + 8 * v31);
      }
      while (v35 == -1);
      unint64_t v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    unint64_t v17 = v39;
    unint64_t v18 = v40;
    *(void *)(v16 + 32) = v41;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    *(void *)(*(void *)(v7 + 56) + 8 * v15) = v28;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  void (*v30)(char *);
  Swift::UInt v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  void *v41;
  char v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  Swift::UInt32 v48;
  char v49[72];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<Material.ResolvedMaterial, [AnyMaterialLayer]>();
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v40 = v2;
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v44 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v12 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v14 = 0;
    long long v43 = v5;
    uint64_t v42 = a2;
    char v41 = (void *)(v5 + 64);
    while (1)
    {
      if (v11)
      {
        uint64_t v45 = (v11 - 1) & v11;
        uint64_t v46 = v14;
        unint64_t v18 = __clz(__rbit64(v11)) | (v14 << 6);
      }
      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
          return result;
        }
        if (v19 >= v44) {
          goto LABEL_50;
        }
        unint64_t v20 = v9[v19];
        int64_t v21 = v14 + 1;
        if (!v20)
        {
          int64_t v21 = v14 + 2;
          if (v14 + 2 >= v44) {
            goto LABEL_50;
          }
          unint64_t v20 = v9[v21];
          if (!v20)
          {
            uint64_t v22 = v14 + 3;
            if (v14 + 3 >= v44)
            {
LABEL_50:
              swift_release();
              uint64_t v3 = v40;
              if (a2)
              {
                uint64_t v39 = 1 << *(unsigned char *)(v5 + 32);
                if (v39 >= 64) {
                  bzero(v9, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  uint64_t *v9 = -1 << v39;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v20 = v9[v22];
            if (!v20)
            {
              while (1)
              {
                int64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_57;
                }
                if (v21 >= v44) {
                  goto LABEL_50;
                }
                unint64_t v20 = v9[v21];
                ++v22;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v21 = v14 + 3;
          }
        }
LABEL_21:
        uint64_t v45 = (v20 - 1) & v20;
        uint64_t v46 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      unsigned int v23 = *(void *)(v5 + 48) + 16 * v18;
      int v24 = *(void **)v23;
      uint64_t v25 = *(unsigned __int8 *)(v23 + 8);
      uint64_t v48 = *(_DWORD *)(v23 + 12);
      unint64_t v26 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0)
      {
        outlined copy of Material.ID((uint64_t)v24, v25);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      uint64_t v47 = v26;
      switch(v25)
      {
        case 1:
          Hasher._combine(_:)(9uLL);
          BOOL v30 = *(void (**)(char *))(*v24 + 104);
          swift_retain();
          v30(v49);
          outlined consume of Material.ID((uint64_t)v24, 1u);
          break;
        case 2:
          uint64_t v31 = 10;
          goto LABEL_29;
        case 3:
          switch((unint64_t)v24)
          {
            case 1uLL:
              uint64_t v31 = 1;
              break;
            case 2uLL:
              uint64_t v31 = 2;
              break;
            case 3uLL:
              uint64_t v31 = 3;
              break;
            case 4uLL:
              uint64_t v31 = 4;
              break;
            case 5uLL:
              uint64_t v31 = 5;
              break;
            case 6uLL:
              uint64_t v31 = 6;
              break;
            case 7uLL:
              uint64_t v31 = 7;
              break;
            default:
              uint64_t v31 = 0;
              break;
          }
LABEL_29:
          Hasher._combine(_:)(v31);
          break;
        default:
          unint64_t v27 = (void *)v24[6];
          Hasher._combine(_:)(8uLL);
          char v28 = v27;
          String.hash(into:)();
          String.hash(into:)();
          if (v27)
          {
            Hasher._combine(_:)(1u);
            unint64_t v29 = v28;
            NSObject.hash(into:)();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          uint64_t v5 = v43;
          a2 = v42;
          char v9 = v41;
          break;
      }
      Hasher._combine(_:)(v48);
      uint64_t result = Hasher._finalize()();
      uint64_t v32 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v33 = result & ~v32;
      int v34 = v33 >> 6;
      if (((-1 << v33) & ~*(void *)(v12 + 8 * (v33 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v33) & ~*(void *)(v12 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
        uint64_t v16 = v47;
      }
      else
      {
        char v35 = 0;
        uint64_t v36 = (unint64_t)(63 - v32) >> 6;
        uint64_t v16 = v47;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_56;
          }
          uint64_t v37 = v34 == v36;
          if (v34 == v36) {
            int v34 = 0;
          }
          v35 |= v37;
          long long v38 = *(void *)(v12 + 8 * v34);
        }
        while (v38 == -1);
        unint64_t v15 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      unint64_t v17 = *(void *)(v7 + 48) + 16 * v15;
      *(void *)unint64_t v17 = v24;
      *(unsigned char *)(v17 + 8) = v25;
      *(_DWORD *)(v17 + 12) = v48;
      *(void *)(*(void *)(v7 + 56) + 8 * v15) = v16;
      ++*(void *)(v7 + 16);
      uint64_t v11 = v45;
      uint64_t v14 = v46;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, CAPresentationModifier>();
  long long v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    char v9 = ~(-1 << v8);
  }
  else {
    char v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  char v35 = v2;
  uint64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unsigned int v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unsigned int v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unsigned int v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unsigned int v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    uint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    BOOL v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    uint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v27 = v16 == v26;
        if (v16 == v26) {
          uint64_t v16 = 0;
        }
        v25 |= v27;
        char v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  int v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  int64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ScrollTargetRole.Role, [ScrollableCollection]>();
  uint64_t v31 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        int64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_40;
        }
        if (v8 >= v13)
        {
LABEL_31:
          if ((v31 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v2;
            goto LABEL_38;
          }
          BOOL v30 = 1 << *(unsigned char *)(v5 + 32);
          if (v30 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            uint64_t *v9 = -1 << v30;
          }
          uint64_t v3 = v2;
          *(void *)(v5 + 16) = 0;
          break;
        }
        uint64_t v22 = v9[v8];
        if (!v22)
        {
          unsigned int v23 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_31;
          }
          uint64_t v22 = v9[v23];
          if (!v22)
          {
            while (1)
            {
              int64_t v8 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_31;
              }
              uint64_t v22 = v9[v8];
              ++v23;
              if (v22) {
                goto LABEL_20;
              }
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      int v24 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v20);
      uint64_t v25 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
      if ((v31 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v24);
      uint64_t result = Hasher._finalize()();
      unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          char v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v14 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(unsigned char *)(*(void *)(v7 + 48) + v18) = v24;
      *(void *)(*(void *)(v7 + 56) + 8 * v18) = v25;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  void (*v31)(char *);
  Swift::UInt v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  char v42;
  uint64_t v43;
  int64_t v44;
  void *v45;
  int64_t v46;
  uint64_t v47;
  Swift::UInt32 v48;
  Swift::UInt8 v49;
  Swift::UInt v50;
  char v51[80];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ContentStyle.MaterialStyle, [DisplayList.Effect]>();
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_57;
  }
  char v41 = v2;
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v45 = (void *)(v5 + 64);
  if (v8 < 64) {
    char v9 = ~(-1 << v8);
  }
  else {
    char v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v44 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  long long v43 = v5;
  uint64_t v42 = a2;
  while (1)
  {
    if (v10)
    {
      unint64_t v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v46 = v13;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v19 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      return result;
    }
    if (v19 >= v44) {
      break;
    }
    unint64_t v20 = v45;
    int64_t v21 = v45[v19];
    uint64_t v22 = v13 + 1;
    if (!v21)
    {
      uint64_t v22 = v13 + 2;
      if (v13 + 2 >= v44) {
        goto LABEL_50;
      }
      int64_t v21 = v45[v22];
      if (!v21)
      {
        unsigned int v23 = v13 + 3;
        if (v13 + 3 >= v44)
        {
LABEL_50:
          swift_release();
          uint64_t v3 = v41;
          if ((a2 & 1) == 0) {
            goto LABEL_57;
          }
          goto LABEL_53;
        }
        int64_t v21 = v45[v23];
        if (!v21)
        {
          while (1)
          {
            uint64_t v22 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_59;
            }
            if (v22 >= v44) {
              goto LABEL_50;
            }
            int64_t v21 = v45[v22];
            ++v23;
            if (v21) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v22 = v13 + 3;
      }
    }
LABEL_21:
    uint64_t v10 = (v21 - 1) & v21;
    uint64_t v46 = v22;
    unint64_t v18 = __clz(__rbit64(v21)) + (v22 << 6);
LABEL_22:
    int v24 = *(void *)(v5 + 48) + 24 * v18;
    uint64_t v25 = *(void **)v24;
    unint64_t v26 = *(unsigned __int8 *)(v24 + 8);
    uint64_t v48 = *(_DWORD *)(v24 + 12);
    uint64_t v49 = *(unsigned char *)(v24 + 16);
    uint64_t v50 = *(unsigned __int8 *)(v24 + 17);
    unint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
    if ((a2 & 1) == 0)
    {
      outlined copy of Material.ID((uint64_t)v25, v26);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    uint64_t v47 = v27;
    switch(v26)
    {
      case 1:
        Hasher._combine(_:)(9uLL);
        uint64_t v31 = *(void (**)(char *))(*v25 + 104);
        outlined copy of Material.ID((uint64_t)v25, 1u);
        v31(v51);
        break;
      case 2:
        Hasher._combine(_:)(0xAuLL);
        outlined copy of Material.ID((uint64_t)v25, 2u);
        break;
      case 3:
        switch((unint64_t)v25)
        {
          case 1uLL:
            uint64_t v32 = 1;
            break;
          case 2uLL:
            uint64_t v32 = 2;
            break;
          case 3uLL:
            uint64_t v32 = 3;
            break;
          case 4uLL:
            uint64_t v32 = 4;
            break;
          case 5uLL:
            uint64_t v32 = 5;
            break;
          case 6uLL:
            uint64_t v32 = 6;
            break;
          case 7uLL:
            uint64_t v32 = 7;
            break;
          default:
            uint64_t v32 = 0;
            break;
        }
        Hasher._combine(_:)(v32);
        break;
      default:
        char v28 = (void *)v25[6];
        Hasher._combine(_:)(8uLL);
        outlined copy of Material.ID((uint64_t)v25, 0);
        unint64_t v29 = v28;
        String.hash(into:)();
        String.hash(into:)();
        if (v28)
        {
          Hasher._combine(_:)(1u);
          BOOL v30 = v29;
          NSObject.hash(into:)();
        }
        else
        {
          Hasher._combine(_:)(0);
        }
        uint64_t v5 = v43;
        a2 = v42;
        break;
    }
    Hasher._combine(_:)(v48);
    outlined consume of Material.ID((uint64_t)v25, v26);
    Hasher._combine(_:)(v49);
    Hasher._combine(_:)(v50);
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v7 + 32);
    int v34 = result & ~v33;
    char v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v11 + 8 * (v34 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1 << v34) & ~*(void *)(v11 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      unint64_t v15 = v47;
    }
    else
    {
      uint64_t v36 = 0;
      uint64_t v37 = (unint64_t)(63 - v33) >> 6;
      unint64_t v15 = v47;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_58;
        }
        long long v38 = v35 == v37;
        if (v35 == v37) {
          char v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v11 + 8 * v35);
      }
      while (v39 == -1);
      uint64_t v14 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v16 = *(void *)(v7 + 48) + 24 * v14;
    *(void *)uint64_t v16 = v25;
    *(unsigned char *)(v16 + 8) = v26;
    *(_DWORD *)(v16 + 12) = v48;
    *(unsigned char *)(v16 + 16) = v49;
    *(unsigned char *)(v16 + 17) = v50;
    *(void *)(*(void *)(v7 + 56) + 8 * v14) = v15;
    ++*(void *)(v7 + 16);
    int64_t v13 = v46;
  }
  swift_release();
  uint64_t v3 = v41;
  unint64_t v20 = v45;
  if ((a2 & 1) == 0) {
    goto LABEL_57;
  }
LABEL_53:
  uint64_t v40 = 1 << *(unsigned char *)(v5 + 32);
  if (v40 >= 64) {
    bzero(v20, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v20 = -1 << v40;
  }
  *(void *)(v5 + 16) = 0;
LABEL_57:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  long long v38;
  long long v39;
  uint64_t v40;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<Subview.ID, _ViewList_Edit>, (void (*)(void))lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v8 + 63) >> 6;
    int64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    unint64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v21 = v20 | (v15 << 6);
      }
      else
      {
        if (__OFADD__(v15++, 1)) {
          goto LABEL_39;
        }
        if (v15 >= v12)
        {
LABEL_32:
          swift_release();
          if (v37)
          {
            uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
            if (v36 >= 64) {
              bzero((void *)(v5 + 64), ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            }
            else {
              uint64_t *v9 = -1 << v36;
            }
            *(void *)(v5 + 16) = 0;
          }
          break;
        }
        unsigned int v23 = v9[v15];
        if (!v23)
        {
          int v24 = v15 + 1;
          if (v15 + 1 >= v12) {
            goto LABEL_32;
          }
          unsigned int v23 = v9[v24];
          if (!v23)
          {
            while (1)
            {
              unint64_t v15 = v24 + 1;
              if (__OFADD__(v24, 1)) {
                break;
              }
              if (v15 >= v12) {
                goto LABEL_32;
              }
              unsigned int v23 = v9[v15];
              ++v24;
              if (v23) {
                goto LABEL_19;
              }
            }
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
            return result;
          }
          ++v15;
        }
LABEL_19:
        uint64_t v11 = (v23 - 1) & v23;
        int64_t v21 = __clz(__rbit64(v23)) + (v15 << 6);
      }
      uint64_t v25 = *(void *)(v5 + 48) + 40 * v21;
      if (v37)
      {
        unint64_t v26 = *(_OWORD *)v25;
        unint64_t v27 = *(_OWORD *)(v25 + 16);
        uint64_t v40 = *(void *)(v25 + 32);
        long long v38 = v26;
        uint64_t v39 = v27;
      }
      else
      {
        outlined init with copy of Subview.ID(v25, (uint64_t)&v38);
      }
      char v28 = *(unsigned char *)(*(void *)(v5 + 56) + v21);
      Hasher.init(_seed:)();
      AnyHashable.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v29 = -1 << *(unsigned char *)(v7 + 32);
      BOOL v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v13 + 8 * (v30 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1 << v30) & ~*(void *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          int v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          char v35 = *(void *)(v13 + 8 * v31);
        }
        while (v35 == -1);
        uint64_t v16 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      unint64_t v17 = *(void *)(v7 + 48) + 40 * v16;
      unint64_t v18 = v38;
      int64_t v19 = v39;
      *(void *)(v17 + 32) = v40;
      *(_OWORD *)unint64_t v17 = v18;
      *(_OWORD *)(v17 + 16) = v19;
      *(unsigned char *)(*(void *)(v7 + 56) + v16) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  long long v38;
  long long v39;
  uint64_t v40;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, _ViewList_Edit>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v8 + 63) >> 6;
    int64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    unint64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v21 = v20 | (v15 << 6);
      }
      else
      {
        if (__OFADD__(v15++, 1)) {
          goto LABEL_39;
        }
        if (v15 >= v12)
        {
LABEL_32:
          swift_release();
          if (v37)
          {
            uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
            if (v36 >= 64) {
              bzero((void *)(v5 + 64), ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            }
            else {
              uint64_t *v9 = -1 << v36;
            }
            *(void *)(v5 + 16) = 0;
          }
          break;
        }
        unsigned int v23 = v9[v15];
        if (!v23)
        {
          int v24 = v15 + 1;
          if (v15 + 1 >= v12) {
            goto LABEL_32;
          }
          unsigned int v23 = v9[v24];
          if (!v23)
          {
            while (1)
            {
              unint64_t v15 = v24 + 1;
              if (__OFADD__(v24, 1)) {
                break;
              }
              if (v15 >= v12) {
                goto LABEL_32;
              }
              unsigned int v23 = v9[v15];
              ++v24;
              if (v23) {
                goto LABEL_19;
              }
            }
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
            return result;
          }
          ++v15;
        }
LABEL_19:
        uint64_t v11 = (v23 - 1) & v23;
        int64_t v21 = __clz(__rbit64(v23)) + (v15 << 6);
      }
      uint64_t v25 = *(void *)(v5 + 48) + 40 * v21;
      if (v37)
      {
        unint64_t v26 = *(_OWORD *)v25;
        unint64_t v27 = *(_OWORD *)(v25 + 16);
        uint64_t v40 = *(void *)(v25 + 32);
        long long v38 = v26;
        uint64_t v39 = v27;
      }
      else
      {
        outlined init with copy of AnyHashable(v25, (uint64_t)&v38);
      }
      char v28 = *(unsigned char *)(*(void *)(v5 + 56) + v21);
      uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
      unint64_t v29 = -1 << *(unsigned char *)(v7 + 32);
      BOOL v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v13 + 8 * (v30 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1 << v30) & ~*(void *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          int v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          char v35 = *(void *)(v13 + 8 * v31);
        }
        while (v35 == -1);
        uint64_t v16 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      unint64_t v17 = *(void *)(v7 + 48) + 40 * v16;
      unint64_t v18 = v38;
      int64_t v19 = v39;
      *(void *)(v17 + 32) = v40;
      *(_OWORD *)unint64_t v17 = v18;
      *(_OWORD *)(v17 + 16) = v19;
      *(unsigned char *)(*(void *)(v7 + 56) + v16) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, AttributeInfoTrace.History>);
  uint64_t v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_38;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  long long v38 = v2;
  uint64_t v39 = v5 + 64;
  if (v8 < 64) {
    char v9 = ~(-1 << v8);
  }
  else {
    char v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v22 = v21 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1)) {
      goto LABEL_40;
    }
    if (v14 >= v11) {
      break;
    }
    int v24 = (void *)(v5 + 64);
    uint64_t v25 = *(void *)(v39 + 8 * v14);
    if (!v25)
    {
      unint64_t v26 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_31:
        swift_release();
        uint64_t v3 = v38;
        if ((v40 & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_34;
      }
      uint64_t v25 = *(void *)(v39 + 8 * v26);
      if (!v25)
      {
        while (1)
        {
          uint64_t v14 = v26 + 1;
          if (__OFADD__(v26, 1)) {
            break;
          }
          if (v14 >= v11) {
            goto LABEL_31;
          }
          uint64_t v25 = *(void *)(v39 + 8 * v14);
          ++v26;
          if (v25) {
            goto LABEL_20;
          }
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v14;
    }
LABEL_20:
    uint64_t v10 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_21:
    unint64_t v27 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v22);
    unint64_t v29 = *v27;
    char v28 = v27[1];
    BOOL v30 = *(void *)(v5 + 56) + 12 * v22;
    uint64_t v31 = *(void *)v30;
    uint64_t v32 = *(_DWORD *)(v30 + 8);
    if ((v40 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v33 = 0;
      int v34 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        char v35 = v17 == v34;
        if (v17 == v34) {
          unint64_t v17 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v12 + 8 * v17);
      }
      while (v36 == -1);
      unint64_t v18 = __clz(__rbit64(~v36)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    int64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *int64_t v19 = v29;
    v19[1] = v28;
    unint64_t v20 = *(void *)(v7 + 56) + 12 * v18;
    *(void *)unint64_t v20 = v31;
    *(_DWORD *)(v20 + 8) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v38;
  int v24 = (void *)(v5 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_34:
  uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int v24 = -1 << v37;
  }
  *(void *)(v5 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCySo13AGSubgraphRefaSayyADcGGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef, [(_:)]>, type metadata accessor for AGSubgraphRef, type metadata accessor for [(_:)], (void (*)(void))lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef);
  char v35 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v8 + 63) >> 6;
    int64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    unint64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        int64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v22 = v21 | (v15 << 6);
      }
      else
      {
        if (__OFADD__(v15++, 1)) {
          goto LABEL_38;
        }
        if (v15 >= v12)
        {
LABEL_31:
          swift_release();
          uint64_t v3 = v2;
          if (v35)
          {
            int v34 = 1 << *(unsigned char *)(v5 + 32);
            if (v34 >= 64) {
              bzero((void *)(v5 + 64), ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            }
            else {
              uint64_t *v9 = -1 << v34;
            }
            *(void *)(v5 + 16) = 0;
          }
          break;
        }
        int v24 = v9[v15];
        if (!v24)
        {
          uint64_t v25 = v15 + 1;
          if (v15 + 1 >= v12) {
            goto LABEL_31;
          }
          int v24 = v9[v25];
          if (!v24)
          {
            while (1)
            {
              unint64_t v15 = v25 + 1;
              if (__OFADD__(v25, 1)) {
                break;
              }
              if (v15 >= v12) {
                goto LABEL_31;
              }
              int v24 = v9[v15];
              ++v25;
              if (v24) {
                goto LABEL_20;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v15;
        }
LABEL_20:
        uint64_t v11 = (v24 - 1) & v24;
        uint64_t v22 = __clz(__rbit64(v24)) + (v15 << 6);
      }
      unint64_t v26 = 8 * v22;
      unint64_t v27 = *(void **)(*(void *)(v5 + 48) + v26);
      char v28 = *(void *)(*(void *)(v5 + 56) + v26);
      if ((v35 & 1) == 0)
      {
        unint64_t v29 = v27;
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      type metadata accessor for AGSubgraphRef(0);
      lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef(&lazy protocol witness table cache variable for type AGSubgraphRef and conformance AGSubgraphRef, type metadata accessor for AGSubgraphRef);
      _CFObject.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v16 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        int64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        BOOL v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          uint64_t v32 = v18 == v31;
          if (v18 == v31) {
            unint64_t v18 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v13 + 8 * v18);
        }
        while (v33 == -1);
        int64_t v19 = __clz(__rbit64(~v33)) + (v18 << 6);
      }
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      unint64_t v20 = 8 * v19;
      *(void *)(*(void *)(v7 + 48) + v20) = v27;
      *(void *)(*(void *)(v7 + 56) + v20) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, UInt32>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_38;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    char v9 = ~(-1 << v8);
  }
  else {
    char v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v21 = v20 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1)) {
      goto LABEL_40;
    }
    if (v14 >= v11) {
      break;
    }
    unsigned int v23 = (void *)(v5 + 64);
    int v24 = *(void *)(v36 + 8 * v14);
    if (!v24)
    {
      uint64_t v25 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_31:
        swift_release();
        uint64_t v3 = v35;
        if ((v37 & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_34;
      }
      int v24 = *(void *)(v36 + 8 * v25);
      if (!v24)
      {
        while (1)
        {
          uint64_t v14 = v25 + 1;
          if (__OFADD__(v25, 1)) {
            break;
          }
          if (v14 >= v11) {
            goto LABEL_31;
          }
          int v24 = *(void *)(v36 + 8 * v14);
          ++v25;
          if (v24) {
            goto LABEL_20;
          }
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v14;
    }
LABEL_20:
    uint64_t v10 = (v24 - 1) & v24;
    int64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_21:
    unint64_t v26 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    char v28 = *v26;
    unint64_t v27 = v26[1];
    unint64_t v29 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v21);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v32 = v17 == v31;
        if (v17 == v31) {
          unint64_t v17 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v12 + 8 * v17);
      }
      while (v33 == -1);
      unint64_t v18 = __clz(__rbit64(~v33)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    int64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *int64_t v19 = v28;
    v19[1] = v27;
    *(_DWORD *)(*(void *)(v7 + 56) + 4 * v18) = v29;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unsigned int v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_34:
  int v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unsigned int v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UnsafeRawPointer, String>);
  char v35 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int v34 = v3;
    int64_t v8 = 0;
    char v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        int64_t v21 = v20 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_40;
        }
        if (v8 >= v13)
        {
LABEL_31:
          if ((v35 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v34;
            goto LABEL_38;
          }
          uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
          if (v33 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            uint64_t *v9 = -1 << v33;
          }
          uint64_t v3 = v34;
          *(void *)(v5 + 16) = 0;
          break;
        }
        unsigned int v23 = v9[v8];
        if (!v23)
        {
          int v24 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_31;
          }
          unsigned int v23 = v9[v24];
          if (!v23)
          {
            while (1)
            {
              int64_t v8 = v24 + 1;
              if (__OFADD__(v24, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_31;
              }
              unsigned int v23 = v9[v8];
              ++v24;
              if (v23) {
                goto LABEL_20;
              }
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        unint64_t v12 = (v23 - 1) & v23;
        int64_t v21 = __clz(__rbit64(v23)) + (v8 << 6);
      }
      uint64_t v25 = *(void *)(*(void *)(v5 + 48) + 8 * v21);
      unint64_t v26 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v21);
      char v28 = *v26;
      unint64_t v27 = v26[1];
      if ((v35 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v29 = 0;
        BOOL v30 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v31 = v17 == v30;
          if (v17 == v30) {
            unint64_t v17 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v14 + 8 * v17);
        }
        while (v32 == -1);
        unint64_t v18 = __clz(__rbit64(~v32)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v7 + 48) + 8 * v18) = v25;
      int64_t v19 = (void *)(*(void *)(v7 + 56) + 16 * v18);
      *int64_t v19 = v28;
      v19[1] = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  Swift::UInt32 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  long long v34;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<_DisplayList_Identity, _DisplayList_StableIdentity>, (void (*)(void))lazy protocol witness table accessor for type _DisplayList_Identity and conformance _DisplayList_Identity);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v33 = a2;
    int64_t v8 = 0;
    char v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_38;
        }
        if (v8 >= v13)
        {
LABEL_29:
          if ((v33 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v2;
            goto LABEL_36;
          }
          uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
          if (v32 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            uint64_t *v9 = -1 << v32;
          }
          uint64_t v3 = v2;
          *(void *)(v5 + 16) = 0;
          break;
        }
        unint64_t v20 = v9[v8];
        if (!v20)
        {
          int64_t v21 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_29;
          }
          unint64_t v20 = v9[v21];
          if (!v20)
          {
            while (1)
            {
              int64_t v8 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_29;
              }
              unint64_t v20 = v9[v8];
              ++v21;
              if (v20) {
                goto LABEL_19;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v18);
      unsigned int v23 = *(void *)(v5 + 56) + 24 * v18;
      int v34 = *(_OWORD *)(v23 + 8);
      int v24 = *(void *)v23;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v22);
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v15) = v22;
      uint64_t v16 = *(void *)(v7 + 56) + 24 * v15;
      *(void *)uint64_t v16 = v24;
      *(_OWORD *)(v16 + 8) = v34;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_36:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (void (*)(void))type metadata accessor for _DictionaryStorage<RBSymbolAnimationOptionKey, Any>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  Swift::UInt8 v26;
  void *v27;
  id v28;
  uint64_t v29;
  int64_t v30;
  void *v31;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, &lazy cache variable for type metadata for _DictionaryStorage<CachedVectorImageContents.CacheKey, CGImageRef>, type metadata accessor for CGImageRef, (void (*)(void))lazy protocol witness table accessor for type CachedVectorImageContents.CacheKey and conformance CachedVectorImageContents.CacheKey);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v31 = (void *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    BOOL v30 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v30) {
          goto LABEL_33;
        }
        unint64_t v20 = v31[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v30) {
            goto LABEL_33;
          }
          unint64_t v20 = v31[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v30)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              unint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v31 = -1 << v29;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v31[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v30) {
                  goto LABEL_33;
                }
                unint64_t v20 = v31[v8];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_30:
        uint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      unint64_t v26 = *(unsigned char *)(*(void *)(v5 + 48) + v18);
      unint64_t v27 = *(void **)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0) {
        char v28 = v27;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      uint64_t result = Hasher._finalize()();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v22 = 0;
        unsigned int v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          int v24 = v15 == v23;
          if (v15 == v23) {
            unint64_t v15 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        uint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v26;
      *(void *)(*(void *)(v7 + 56) + 8 * v16) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, AnyFontModifier>, (void (*)(uint64_t))type metadata accessor for AnyFontModifier);
  uint64_t v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v35 = v5 + 64;
  if (v8 < 64) {
    char v9 = ~(-1 << v8);
  }
  else {
    char v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  int v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unsigned int v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unsigned int v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unsigned int v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unsigned int v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    uint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    BOOL v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    uint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v27 = v16 == v26;
        if (v16 == v26) {
          uint64_t v16 = 0;
        }
        v25 |= v27;
        char v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  long long v38 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *v2;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>, (void (*)(uint64_t))type metadata accessor for LocalizedStringKey.FormatArgument);
  char v9 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = result;
  if (*(void *)(v8 + 16))
  {
    char v35 = v3;
    unint64_t v12 = 0;
    int64_t v13 = *(void *)(v8 + 64);
    uint64_t v37 = (void *)(v8 + 64);
    uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
    if (v14 < 64) {
      unint64_t v15 = ~(-1 << v14);
    }
    else {
      unint64_t v15 = -1;
    }
    uint64_t v16 = v15 & v13;
    uint64_t v36 = (unint64_t)(v14 + 63) >> 6;
    unint64_t v17 = result + 64;
    while (1)
    {
      if (v16)
      {
        int64_t v19 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v20 = v19 | (v12 << 6);
      }
      else
      {
        int64_t v21 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v37;
        if (v21 >= v36) {
          goto LABEL_34;
        }
        uint64_t v22 = v37[v21];
        ++v12;
        if (!v22)
        {
          unint64_t v12 = v21 + 1;
          if (v21 + 1 >= v36) {
            goto LABEL_34;
          }
          uint64_t v22 = v37[v12];
          if (!v22)
          {
            unsigned int v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_34:
              if ((v9 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v35;
                goto LABEL_41;
              }
              int v34 = 1 << *(unsigned char *)(v8 + 32);
              if (v34 >= 64) {
                bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v37 = -1 << v34;
              }
              uint64_t v3 = v35;
              *(void *)(v8 + 16) = 0;
              break;
            }
            uint64_t v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                unint64_t v12 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v12 >= v36) {
                  goto LABEL_34;
                }
                uint64_t v22 = v37[v12];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            unint64_t v12 = v23;
          }
        }
LABEL_21:
        uint64_t v16 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v12 << 6);
      }
      int v24 = *(void *)(*(void *)(v8 + 48) + 8 * v20);
      uint64_t v25 = *(void *)(v38 + 72);
      unint64_t v26 = *(void *)(v8 + 56) + v25 * v20;
      if (v9) {
        outlined init with take of Text.Effect.InteractionMetrics(v26, (uint64_t)v7, type metadata accessor for LocalizedStringKey.FormatArgument);
      }
      else {
        outlined init with copy of Text.Effect.InteractionMetrics(v26, (uint64_t)v7, type metadata accessor for LocalizedStringKey.FormatArgument);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v27 = -1 << *(unsigned char *)(v11 + 32);
      char v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        BOOL v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v11 + 48) + 8 * v18) = v24;
      uint64_t result = outlined init with take of Text.Effect.InteractionMetrics((uint64_t)v7, *(void *)(v11 + 56) + v25 * v18, type metadata accessor for LocalizedStringKey.FormatArgument);
      ++*(void *)(v11 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, CGFloat>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    char v9 = ~(-1 << v8);
  }
  else {
    char v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    uint64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unsigned int v23 = (void *)(v5 + 64);
    int v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      uint64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      int v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        uint64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            uint64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            int v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v14 = v25;
      }
    }
LABEL_30:
    uint64_t v10 = (v24 - 1) & v24;
    int64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    BOOL v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        char v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        unint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    int64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *int64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unsigned int v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  int v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unsigned int v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _OWORD v32[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Int, Any>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v31 = v3;
    int64_t v8 = 0;
    char v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        unint64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_34;
        }
        int64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_34;
          }
          int64_t v19 = v9[v8];
          if (!v19)
          {
            unint64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v31;
                goto LABEL_41;
              }
              BOOL v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                uint64_t *v9 = -1 << v30;
              }
              uint64_t v3 = v31;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v13) {
                  goto LABEL_34;
                }
                int64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      uint64_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2) {
        outlined init with take of Any(v22, v32);
      }
      else {
        outlined init with copy of Any((uint64_t)v22, (uint64_t)v32);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unsigned int v23 = -1 << *(unsigned char *)(v7 + 32);
      int v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          char v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      uint64_t result = (uint64_t)outlined init with take of Any(v32, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Int, CGFloat>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    int v34 = v3;
    int64_t v8 = 0;
    char v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                uint64_t *v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      unsigned int v23 = *(void *)(*(void *)(v5 + 48) + v22);
      int v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, UInt32>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v33 = a2;
    uint64_t v32 = v3;
    int64_t v8 = 0;
    char v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    BOOL v30 = -1 << v10;
    uint64_t v31 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        unint64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        int64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          int64_t v19 = v9[v8];
          if (!v19)
          {
            unint64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v32;
                goto LABEL_38;
              }
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                uint64_t *v9 = v30;
              }
              uint64_t v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                int64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      uint64_t v22 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v17);
      uint64_t result = static Hasher._hash(seed:_:)();
      unsigned int v23 = -1 << *(unsigned char *)(v7 + 32);
      int v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          char v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      *(_DWORD *)(*(void *)(v7 + 56) + 4 * v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ScrollStateRequest>, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, (void (*)(uint64_t, unsigned char *))outlined init with take of ScrollStateRequest);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.GlyphIndex, Int>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex, (uint64_t)&type metadata for Text.Effect.GlyphIndex, MEMORY[0x263F8E7C8]);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t *v36;
  char v37;
  long long v38;
  long long v39;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Double, Text.Effect.BaseFragment>);
  uint64_t v37 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v36 = (uint64_t *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    int v34 = v3;
    char v35 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        unint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v35) {
          goto LABEL_33;
        }
        int64_t v21 = v36[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v35) {
            goto LABEL_33;
          }
          int64_t v21 = v36[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v35)
            {
LABEL_33:
              if ((v37 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_40;
              }
              if (v33 >= 64) {
                bzero(v36, 8 * v35);
              }
              else {
                *uint64_t v36 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v21 = v36[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v35) {
                  goto LABEL_33;
                }
                int64_t v21 = v36[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        int64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      unint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      char v28 = *(void *)(v5 + 56) + 56 * v19;
      BOOL v30 = *(void *)v28;
      unint64_t v29 = *(void *)(v28 + 8);
      long long v38 = *(_OWORD *)(v28 + 32);
      uint64_t v39 = *(_OWORD *)(v28 + 16);
      uint64_t v31 = *(void *)(v28 + 48);
      if ((v37 & 1) == 0)
      {
        swift_retain();
        swift_retain();
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unsigned int v23 = 0;
        int v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        uint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      unint64_t v17 = *(void *)(v7 + 56) + 56 * v16;
      *(void *)unint64_t v17 = v30;
      *(void *)(v17 + 8) = v29;
      *(_OWORD *)(v17 + 16) = v39;
      *(_OWORD *)(v17 + 32) = v38;
      *(void *)(v17 + 48) = v31;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.FragmentIdentifier, Int>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier, (uint64_t)&type metadata for Text.Effect.FragmentIdentifier, MEMORY[0x263F8E7C8]);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  Swift::UInt32 *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt32 *v20;
  Swift::UInt32 v21;
  Swift::UInt32 v22;
  Swift::UInt32 v23;
  Swift::UInt32 v24;
  long long *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  void *v35;
  char v36;
  long long v37[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<DisplayList.GraphicsRenderer.Cache.AnimatorKey, _DisplayList_AnyEffectAnimator>();
  uint64_t v36 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v35 = (void *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    int v34 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        unint64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v34) {
          goto LABEL_34;
        }
        unint64_t v18 = v35[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v34) {
            goto LABEL_34;
          }
          unint64_t v18 = v35[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v34)
            {
LABEL_34:
              if ((v36 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_41;
              }
              uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
              if (v33 >= 64) {
                bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *char v35 = -1 << v33;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v35[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v34) {
                  goto LABEL_34;
                }
                unint64_t v18 = v35[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      unint64_t v20 = (Swift::UInt32 *)(*(void *)(v5 + 48) + 16 * v16);
      uint64_t v22 = *v20;
      int64_t v21 = v20[1];
      int v24 = v20[2];
      unsigned int v23 = v20[3];
      uint64_t v25 = (long long *)(*(void *)(v5 + 56) + 40 * v16);
      if (v36) {
        outlined init with take of ScrollStateRequest(v25, (uint64_t)v37);
      }
      else {
        outlined init with copy of AnyTrackedValue((uint64_t)v25, (uint64_t)v37);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v22);
      Hasher._combine(_:)(v21);
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v23);
      uint64_t result = Hasher._finalize()();
      unint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v27 = result & ~v26;
      char v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v29 = 0;
        BOOL v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            char v28 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        int64_t v13 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = (Swift::UInt32 *)(*(void *)(v7 + 48) + 16 * v13);
      *uint64_t v14 = v22;
      v14[1] = v21;
      v14[2] = v24;
      v14[3] = v23;
      uint64_t result = outlined init with take of ScrollStateRequest(v37, *(void *)(v7 + 56) + 40 * v13);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (void (*)(void))type metadata accessor for _DictionaryStorage<RBDisplayListInterpolatorOptionKey, Any>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  Swift::UInt *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt *v20;
  Swift::UInt v21;
  Swift::UInt v22;
  long long *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  void *v33;
  char v34;
  long long v35[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<EventID, EventType>();
  int v34 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v33 = (void *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v32 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        unint64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v32) {
          goto LABEL_34;
        }
        unint64_t v18 = v33[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v32) {
            goto LABEL_34;
          }
          unint64_t v18 = v33[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v32)
            {
LABEL_34:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_41;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v33 = -1 << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v33[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v32) {
                  goto LABEL_34;
                }
                unint64_t v18 = v33[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      unint64_t v20 = (Swift::UInt *)(*(void *)(v5 + 48) + 16 * v16);
      uint64_t v22 = *v20;
      int64_t v21 = v20[1];
      unsigned int v23 = (long long *)(*(void *)(v5 + 56) + 40 * v16);
      if (v34) {
        outlined init with take of ScrollStateRequest(v23, (uint64_t)v35);
      }
      else {
        outlined init with copy of AnyTrackedValue((uint64_t)v23, (uint64_t)v35);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v22);
      Hasher._combine(_:)(v21);
      uint64_t result = Hasher._finalize()();
      int v24 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v27 = 0;
        char v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          unint64_t v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          BOOL v30 = *(void *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        int64_t v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = (Swift::UInt *)(*(void *)(v7 + 48) + 16 * v13);
      *uint64_t v14 = v22;
      v14[1] = v21;
      uint64_t result = outlined init with take of ScrollStateRequest(v35, *(void *)(v7 + 56) + 40 * v13);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, AnyTextAnimation>, (void (*)(uint64_t))type metadata accessor for AnyTextAnimation);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, AnyTextEffect>, (void (*)(uint64_t))type metadata accessor for AnyTextEffect);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, AnyTextFilterEffect>, (void (*)(uint64_t))type metadata accessor for AnyTextFilterEffect);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  Swift::UInt64 *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt64 *v21;
  Swift::UInt v22;
  Swift::UInt64 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.RelativeIdentifierKey, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v33 = a2;
    int64_t v8 = 0;
    int v34 = (void *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        unint64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v18 >= v12) {
          goto LABEL_31;
        }
        int64_t v19 = v34[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v12) {
            goto LABEL_31;
          }
          int64_t v19 = v34[v8];
          if (!v19)
          {
            unint64_t v20 = v18 + 2;
            if (v20 >= v12)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int v34 = -1 << v32;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                int64_t v19 = v34[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        uint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = (Swift::UInt64 *)(*(void *)(v5 + 48) + 16 * v17);
      unsigned int v23 = *v21;
      uint64_t v22 = v21[1];
      int v24 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      Hasher._combine(_:)(v22);
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v13 + 8 * v27);
        }
        while (v31 == -1);
        uint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (Swift::UInt64 *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      *(void *)(*(void *)(v7 + 56) + 8 * v14) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  long long v54;
  char v55;
  Swift::UInt64 v56;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, TextEffectsAnimationController.Timing>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  uint64_t v46 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    long long v43 = (void *)(v5 + 64);
    uint64_t v44 = v5;
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    char v41 = v2;
    uint64_t v42 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    uint64_t v45 = result;
    while (1)
    {
      if (v11)
      {
        uint64_t v47 = (v11 - 1) & v11;
        uint64_t v48 = v8;
        int64_t v21 = __clz(__rbit64(v11)) | (v8 << 6);
      }
      else
      {
        uint64_t v22 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v43;
        if (v22 >= v42) {
          goto LABEL_33;
        }
        unsigned int v23 = v43[v22];
        int v24 = v8 + 1;
        if (!v23)
        {
          int v24 = v22 + 1;
          if (v22 + 1 >= v42) {
            goto LABEL_33;
          }
          unsigned int v23 = v43[v24];
          if (!v23)
          {
            uint64_t v25 = v22 + 2;
            if (v25 >= v42)
            {
LABEL_33:
              if ((v46 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v41;
                goto LABEL_40;
              }
              uint64_t v40 = 1 << *(unsigned char *)(v5 + 32);
              if (v40 >= 64) {
                bzero(v43, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *long long v43 = -1 << v40;
              }
              uint64_t v3 = v41;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unsigned int v23 = v43[v25];
            if (!v23)
            {
              while (1)
              {
                int v24 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_42;
                }
                if (v24 >= v42) {
                  goto LABEL_33;
                }
                unsigned int v23 = v43[v24];
                ++v25;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int v24 = v25;
          }
        }
LABEL_30:
        uint64_t v47 = (v23 - 1) & v23;
        uint64_t v48 = v24;
        int64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
      }
      uint64_t v56 = *(void *)(*(void *)(v5 + 48) + 8 * v21);
      BOOL v30 = *(void *)(v5 + 56) + 120 * v21;
      uint64_t v54 = *(_OWORD *)v30;
      uint64_t v53 = *(void *)(v30 + 16);
      uint64_t v51 = *(unsigned char *)(v30 + 25);
      uint64_t v52 = *(unsigned char *)(v30 + 24);
      uint64_t v50 = *(void *)(v30 + 32);
      uint64_t v49 = *(unsigned char *)(v30 + 40);
      uint64_t v31 = *(void *)(v30 + 48);
      uint64_t v32 = *(void *)(v30 + 56);
      uint64_t v33 = *(void *)(v30 + 64);
      int v34 = *(void *)(v30 + 72);
      char v35 = *(unsigned char *)(v30 + 80);
      uint64_t v37 = *(void *)(v30 + 88);
      uint64_t v36 = *(void *)(v30 + 96);
      long long v38 = *(void *)(v30 + 104);
      uint64_t v39 = *(unsigned char *)(v30 + 112);
      if ((v46 & 1) == 0)
      {
        swift_retain();
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v32, v33, v34, v35);
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v37, v36, v38, v39);
      }
      uint64_t v55 = v39;
      uint64_t v7 = v45;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v56);
      int64_t v13 = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v45 + 32);
      unint64_t v15 = v13 & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v12 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v12 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        uint64_t result = v36;
        unint64_t v18 = v38;
        int64_t v19 = v55;
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v14) >> 6;
        uint64_t result = v36;
        unint64_t v18 = v38;
        int64_t v19 = v55;
        do
        {
          if (++v16 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          char v28 = v16 == v27;
          if (v16 == v27) {
            uint64_t v16 = 0;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v12 + 8 * v16);
        }
        while (v29 == -1);
        unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
      }
      *(void *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v45 + 48) + 8 * v17) = v56;
      unint64_t v20 = *(void *)(v45 + 56) + 120 * v17;
      *(_OWORD *)unint64_t v20 = v54;
      *(void *)(v20 + 16) = v53;
      *(unsigned char *)(v20 + 24) = v52;
      *(unsigned char *)(v20 + 25) = v51;
      *(void *)(v20 + 32) = v50;
      *(unsigned char *)(v20 + 40) = v49;
      *(void *)(v20 + 48) = v31;
      *(void *)(v20 + 56) = v32;
      *(void *)(v20 + 64) = v33;
      *(void *)(v20 + 72) = v34;
      *(unsigned char *)(v20 + 80) = v35;
      *(void *)(v20 + 88) = v37;
      *(void *)(v20 + 96) = result;
      *(void *)(v20 + 104) = v18;
      *(unsigned char *)(v20 + 112) = v19;
      ++*(void *)(v45 + 16);
      uint64_t v5 = v44;
      uint64_t v11 = v47;
      int64_t v8 = v48;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.AnyAnimationInfo>, (void (*)(uint64_t))type metadata accessor for Text.Effect.AnyAnimationInfo);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (void (*)(void))type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, [Text.Effect.KeyframeLayout.Fragment]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Int>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier, (uint64_t)&type metadata for Text.Effect.Identifier, MEMORY[0x263F8E7D0]);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::UInt64 *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt64 *v32;
  Swift::UInt64 v33;
  Swift::UInt64 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  char v43[72];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Key, Text.Effect.KeyframeLayout>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Key and conformance Text.Effect.Key);
  uint64_t v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v41 = v5 + 64;
  if (v8 < 64) {
    char v9 = ~(-1 << v8);
  }
  else {
    char v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  uint64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    unsigned int v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    int v24 = (void *)(v5 + 64);
    uint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      uint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        unint64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            uint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    uint64_t v10 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (Swift::UInt64 *)(*(void *)(v5 + 48) + v31);
    int v34 = *v32;
    uint64_t v33 = v32[1];
    char v35 = *(void *)(v5 + 56) + v31;
    uint64_t v36 = *(void *)v35;
    uint64_t v37 = *(unsigned char *)(v35 + 8);
    if ((v42 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v34);
    (*(void (**)(char *))(*(void *)v33 + 88))(v43);
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    uint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v27 = 0;
      char v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v29 = v16 == v28;
        if (v16 == v28) {
          uint64_t v16 = 0;
        }
        v27 |= v29;
        BOOL v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = 16 * v17;
    int64_t v19 = (Swift::UInt64 *)(*(void *)(v7 + 48) + v18);
    *int64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = *(void *)(v7 + 56) + v18;
    *(void *)unint64_t v20 = v36;
    *(unsigned char *)(v20 + 8) = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  int v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  long long v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt64 v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int64_t v34;
  void *v35;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, FragmentIdentifierOffsetMap.Entry>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v33 = a2;
    int64_t v8 = 0;
    char v35 = (void *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    int v34 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        unint64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v34) {
          goto LABEL_31;
        }
        unint64_t v18 = v35[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v34) {
            goto LABEL_31;
          }
          unint64_t v18 = v35[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v34)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *char v35 = -1 << v32;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v35[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v34) {
                  goto LABEL_31;
                }
                unint64_t v18 = v35[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      unint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 56) + 24 * v16);
      uint64_t v22 = v21[1];
      unsigned int v23 = v21[2];
      int v24 = *v21;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        int64_t v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v7 + 48) + 8 * v13) = v20;
      uint64_t v14 = (void *)(*(void *)(v7 + 56) + 24 * v13);
      *uint64_t v14 = v24;
      v14[1] = v22;
      v14[2] = v23;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.AnyLayoutState>, (void (*)(uint64_t))type metadata accessor for Text.Effect.AnyLayoutState);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (void (*)(void))type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, Set<Int>>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.AnyStateSnapshot>, (void (*)(uint64_t))type metadata accessor for Text.Effect.AnyStateSnapshot);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, TextAnimator>, (void (*)(uint64_t))type metadata accessor for TextAnimator);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt64 v27;
  uint64_t v28;
  void *v29;
  long long v30;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.BasePhaseConfiguration>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    unint64_t v29 = (void *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        unint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v12) {
          goto LABEL_33;
        }
        int64_t v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v12) {
            goto LABEL_33;
          }
          int64_t v21 = v29[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              char v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v29 = -1 << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                int64_t v21 = v29[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        int64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      unint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      BOOL v30 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0)
      {
        swift_retain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unsigned int v23 = 0;
        int v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v25 = v16 == v24;
          if (v16 == v24) {
            uint64_t v16 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v7 + 48) + 8 * v17) = v27;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.ClusterIndex, Int>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex, (uint64_t)&type metadata for Text.Effect.ClusterIndex, MEMORY[0x263F8E7C8]);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt8 v20;
  long long *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int64_t v31;
  void *v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<_ForegroundLayerLevel, _ColorMatrix>, (void (*)(void))lazy protocol witness table accessor for type _ForegroundLayerLevel and conformance _ForegroundLayerLevel);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    BOOL v30 = a2;
    int64_t v8 = 0;
    uint64_t v32 = (void *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v31 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        unint64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v31) {
          goto LABEL_31;
        }
        unint64_t v18 = v32[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v31) {
            goto LABEL_31;
          }
          unint64_t v18 = v32[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v31)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              unint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v32 = -1 << v29;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v32[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v31) {
                  goto LABEL_31;
                }
                unint64_t v18 = v32[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      unint64_t v20 = *(unsigned char *)(*(void *)(v5 + 48) + v16);
      int64_t v21 = (long long *)(*(void *)(v5 + 56) + 80 * v16);
      char v35 = v21[2];
      uint64_t v36 = v21[3];
      uint64_t v37 = v21[4];
      uint64_t v33 = *v21;
      int v34 = v21[1];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unsigned int v23 = result & ~v22;
      int v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v27 = v24 == v26;
          if (v24 == v26) {
            int v24 = 0;
          }
          v25 |= v27;
          char v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        int64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(unsigned char *)(*(void *)(v7 + 48) + v13) = v20;
      uint64_t v14 = (_OWORD *)(*(void *)(v7 + 56) + 80 * v13);
      v14[2] = v35;
      v14[3] = v36;
      v14[4] = v37;
      *uint64_t v14 = v33;
      v14[1] = v34;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::UInt *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  Swift::UInt *v26;
  Swift::UInt v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  void *v32;
  char v33;

  uint64_t v4 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, EventBinding>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  uint64_t v33 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v6 = result;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 0;
    uint64_t v32 = (void *)(v4 + 64);
    int64_t v8 = 1 << *(unsigned char *)(v4 + 32);
    if (v8 < 64) {
      char v9 = ~(-1 << v8);
    }
    else {
      char v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v4 + 64);
    uint64_t v31 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = result + 64;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v18 = v17 | (v7 << 6);
      }
      else
      {
        int64_t v19 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v4 + 64;
        if (v19 >= v31) {
          goto LABEL_33;
        }
        unint64_t v20 = v32[v19];
        ++v7;
        if (!v20)
        {
          uint64_t v7 = v19 + 1;
          if (v19 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v20 = v32[v7];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v31)
            {
LABEL_33:
              if (v33)
              {
                BOOL v30 = 1 << *(unsigned char *)(v4 + 32);
                if (v30 >= 64) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v32 = -1 << v30;
                }
                *(void *)(v4 + 16) = 0;
              }
              break;
            }
            unint64_t v20 = v32[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v7 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v7 >= v31) {
                  goto LABEL_33;
                }
                unint64_t v20 = v32[v7];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v7 = v21;
          }
        }
LABEL_30:
        uint64_t v10 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v7 << 6);
      }
      unint64_t v26 = (Swift::UInt *)(*(void *)(v4 + 48) + 16 * v18);
      char v28 = *v26;
      unint64_t v27 = v26[1];
      unint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
      if ((v33 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      unint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
      int64_t v13 = result & ~v12;
      uint64_t v14 = v13 >> 6;
      if (((-1 << v13) & ~*(void *)(v11 + 8 * (v13 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v13) & ~*(void *)(v11 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v22 = 0;
        unsigned int v23 = (unint64_t)(63 - v12) >> 6;
        do
        {
          if (++v14 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          int v24 = v14 == v23;
          if (v14 == v23) {
            uint64_t v14 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v14);
        }
        while (v25 == -1);
        unint64_t v15 = __clz(__rbit64(~v25)) + (v14 << 6);
      }
      *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = (Swift::UInt *)(*(void *)(v6 + 48) + 16 * v15);
      *uint64_t v16 = v28;
      v16[1] = v27;
      *(void *)(*(void *)(v6 + 56) + 8 * v15) = v29;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v2 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  long long v16;
  long long v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  char v41;
  long long v42;
  long long v43;
  long long v44;
  uint64_t v45;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, SymbolRenderer.CachedResolvedSymbol>);
  char v41 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v40 = v5 + 64;
  if (v8 < 64) {
    char v9 = ~(-1 << v8);
  }
  else {
    char v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v39) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unsigned int v23 = *(void *)(v40 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v39) {
        goto LABEL_34;
      }
      unsigned int v23 = *(void *)(v40 + 8 * v13);
      if (!v23)
      {
        int v24 = v21 + 2;
        if (v24 >= v39)
        {
LABEL_34:
          swift_release();
          if ((v41 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unsigned int v23 = *(void *)(v40 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v39) {
              goto LABEL_34;
            }
            unsigned int v23 = *(void *)(v40 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_21:
    uint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (v41)
    {
      unint64_t v26 = *(_OWORD *)v25;
      unint64_t v27 = *(_OWORD *)(v25 + 16);
      uint64_t v45 = *(void *)(v25 + 32);
      long long v43 = v26;
      uint64_t v44 = v27;
      char v28 = *(void *)(v5 + 56) + 24 * v20;
      uint64_t v42 = *(_OWORD *)v28;
      unint64_t v29 = *(void *)(v28 + 16);
    }
    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v43);
      BOOL v30 = *(void *)(v5 + 56) + 24 * v20;
      unint64_t v29 = *(void *)(v30 + 16);
      uint64_t v42 = *(_OWORD *)v30;
      swift_unknownObjectRetain();
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v31 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v11 + 8 * (v32 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1 << v32) & ~*(void *)(v11 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int v34 = 0;
      char v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v11 + 8 * v33);
      }
      while (v37 == -1);
      uint64_t v14 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = *(void *)(v7 + 48) + 40 * v14;
    uint64_t v16 = v43;
    unint64_t v17 = v44;
    *(void *)(v15 + 32) = v45;
    *(_OWORD *)unint64_t v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    unint64_t v18 = *(void *)(v7 + 56) + 24 * v14;
    *(_OWORD *)unint64_t v18 = v42;
    *(void *)(v18 + 16) = v29;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v41 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  long long v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v22, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  long long v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  long long v31;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCySo13AGSubgraphRefaSayyADcGGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<_NSRange, [NSAttributedStringKey : Any]>, type metadata accessor for _NSRange, (void (*)(uint64_t))type metadata accessor for [NSAttributedStringKey : Any], (void (*)(void))lazy protocol witness table accessor for type _NSRange and conformance _NSRange);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    BOOL v30 = (void *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        int64_t v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v21 >= v12) {
          goto LABEL_33;
        }
        uint64_t v22 = v30[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v12) {
            goto LABEL_33;
          }
          uint64_t v22 = v30[v8];
          if (!v22)
          {
            unsigned int v23 = v21 + 2;
            if (v23 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              unint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *BOOL v30 = -1 << v29;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v22 = v30[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                uint64_t v22 = v30[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        uint64_t v11 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v31 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v20);
      char v28 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v31);
      Hasher._combine(_:)(*((Swift::UInt *)&v31 + 1));
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        unint64_t v18 = v31;
      }
      else
      {
        int v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v14) >> 6;
        unint64_t v18 = v31;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v26 = v16 == v25;
          if (v16 == v25) {
            uint64_t v16 = 0;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_OWORD *)(*(void *)(v7 + 48) + 16 * v17) = v18;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36[72];
  char v37[8];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable2, WeakBox<AnyLocationBase>>, type metadata accessor for WeakBox<AnyLocationBase>, (void (*)(void))lazy protocol witness table accessor for type AnyHashable2 and conformance AnyHashable2);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int v34 = v2;
  char v35 = v5 + 64;
  if (v8 < 64) {
    char v9 = ~(-1 << v8);
  }
  else {
    char v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v19 >= v11) {
      break;
    }
    unint64_t v20 = (void *)(v5 + 64);
    int64_t v21 = *(void *)(v35 + 8 * v19);
    ++v14;
    if (!v21)
    {
      uint64_t v14 = v19 + 1;
      if (v19 + 1 >= v11) {
        goto LABEL_34;
      }
      int64_t v21 = *(void *)(v35 + 8 * v14);
      if (!v21)
      {
        uint64_t v22 = v19 + 2;
        if (v22 >= v11)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        int64_t v21 = *(void *)(v35 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            uint64_t v14 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            int64_t v21 = *(void *)(v35 + 8 * v14);
            ++v22;
            if (v21) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v14 = v22;
      }
    }
LABEL_21:
    uint64_t v10 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_22:
    unsigned int v23 = 8 * v18;
    int v24 = *(void *)(*(void *)(v5 + 48) + v23);
    uint64_t v25 = *(void *)(v5 + 56) + v23;
    if (a2)
    {
      outlined init with take of Text.Effect.InteractionMetrics(v25, (uint64_t)v37, (uint64_t (*)(void))type metadata accessor for WeakBox<AnyLocationBase>);
    }
    else
    {
      outlined init with copy of Text.Effect.InteractionMetrics(v25, (uint64_t)v37, (uint64_t (*)(void))type metadata accessor for WeakBox<AnyLocationBase>);
      swift_retain();
    }
    Hasher.init(_seed:)();
    (*(void (**)(char *))(*(void *)v24 + 112))(v36);
    uint64_t result = Hasher._finalize()();
    unint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    char v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v29 = 0;
      BOOL v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          char v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v12 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = 8 * v15;
    *(void *)(*(void *)(v7 + 48) + v16) = v24;
    uint64_t result = outlined init with take of Text.Effect.InteractionMetrics((uint64_t)v37, *(void *)(v7 + 56) + v16, (uint64_t (*)(void))type metadata accessor for WeakBox<AnyLocationBase>);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v20 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v20, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v20 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  int64_t v32;
  void *v33;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, &lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef.Map.Key, [ScrapeableContent.Node]>, type metadata accessor for [ScrapeableContent.Node], (void (*)(void))lazy protocol witness table accessor for type AGSubgraphRef.Map.Key and conformance AGSubgraphRef.Map.Key);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v33 = (void *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v32 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        unint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        int64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          int64_t v21 = v33[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v33 = -1 << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                int64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        int64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      unint64_t v27 = 8 * v19;
      char v28 = *(void **)(*(void *)(v5 + 48) + v27);
      unint64_t v29 = *(void *)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0)
      {
        BOOL v30 = v28;
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)((Swift::UInt)v28);
      uint64_t result = Hasher._finalize()();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unsigned int v23 = 0;
        int v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        uint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      unint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  Swift::UInt v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<ScrollAnchorStorage.Role, UnitPoint>, (void (*)(void))lazy protocol witness table accessor for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int v34 = a2;
    int64_t v8 = 0;
    char v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                uint64_t *v9 = -1 << v33;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v18);
      unsigned int v23 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v18);
      uint64_t v25 = *v23;
      int v24 = v23[1];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v22);
      uint64_t result = Hasher._finalize()();
      unint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v27 = result & ~v26;
      char v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v29 = 0;
        BOOL v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            char v28 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v14 + 8 * v28);
        }
        while (v32 == -1);
        unint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(unsigned char *)(*(void *)(v7 + 48) + v15) = v22;
      uint64_t v16 = (void *)(*(void *)(v7 + 56) + 16 * v15);
      *uint64_t v16 = v25;
      v16[1] = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  long long v17;
  long long v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::UInt32 v26;
  Swift::UInt32 v27;
  Swift::UInt32 v28;
  Swift::UInt32 v29;
  Swift::UInt8 v30;
  uint64_t v31;
  long long v32;
  long long v33;
  long long v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  void *v44;
  uint64_t v45;
  char v46;
  long long v47;
  long long v48;
  long long v49;
  uint64_t v50;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<DisplayList.ViewUpdater.ViewCache.Key, DisplayList.ViewUpdater.ViewCache.AnimatorInfo>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key);
  uint64_t v46 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v44 = (void *)(v5 + 64);
    uint64_t v45 = v5;
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    long long v43 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        int64_t v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v44;
        if (v21 >= v43) {
          goto LABEL_34;
        }
        uint64_t v22 = v44[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v43) {
            goto LABEL_34;
          }
          uint64_t v22 = v44[v8];
          if (!v22)
          {
            unsigned int v23 = v21 + 2;
            if (v23 >= v43)
            {
LABEL_34:
              if ((v46 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_41;
              }
              uint64_t v42 = 1 << *(unsigned char *)(v5 + 32);
              if (v42 >= 64) {
                bzero(v44, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v44 = -1 << v42;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v22 = v44[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v43) {
                  goto LABEL_34;
                }
                uint64_t v22 = v44[v8];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_21:
        uint64_t v11 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      int v24 = *(void *)(v5 + 56);
      uint64_t v25 = *(void *)(v5 + 48) + 20 * v20;
      unint64_t v26 = *(_DWORD *)v25;
      unint64_t v27 = *(_DWORD *)(v25 + 4);
      unint64_t v29 = *(_DWORD *)(v25 + 8);
      char v28 = *(_DWORD *)(v25 + 12);
      BOOL v30 = *(unsigned char *)(v25 + 16);
      uint64_t v31 = v24 + 56 * v20;
      if (v46)
      {
        uint64_t v32 = *(_OWORD *)v31;
        uint64_t v33 = *(_OWORD *)(v31 + 16);
        int v34 = *(_OWORD *)(v31 + 32);
        uint64_t v50 = *(void *)(v31 + 48);
        uint64_t v48 = v33;
        uint64_t v49 = v34;
        uint64_t v47 = v32;
      }
      else
      {
        outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo(v31, (uint64_t)&v47);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      Hasher._combine(_:)(v27);
      Hasher._combine(_:)(v29);
      Hasher._combine(_:)(v28);
      Hasher._combine(_:)(v30);
      uint64_t result = Hasher._finalize()();
      char v35 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v36 = result & ~v35;
      uint64_t v37 = v36 >> 6;
      if (((-1 << v36) & ~*(void *)(v12 + 8 * (v36 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v36) & ~*(void *)(v12 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        long long v38 = 0;
        uint64_t v39 = (unint64_t)(63 - v35) >> 6;
        do
        {
          if (++v37 == v39 && (v38 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          uint64_t v40 = v37 == v39;
          if (v37 == v39) {
            uint64_t v37 = 0;
          }
          v38 |= v40;
          char v41 = *(void *)(v12 + 8 * v37);
        }
        while (v41 == -1);
        int64_t v13 = __clz(__rbit64(~v41)) + (v37 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = *(void *)(v7 + 48) + 20 * v13;
      *(_DWORD *)uint64_t v14 = v26;
      *(_DWORD *)(v14 + 4) = v27;
      *(_DWORD *)(v14 + 8) = v29;
      *(_DWORD *)(v14 + 12) = v28;
      *(unsigned char *)(v14 + 16) = v30;
      unint64_t v15 = *(void *)(v7 + 56) + 56 * v13;
      uint64_t v16 = v47;
      unint64_t v17 = v48;
      unint64_t v18 = v49;
      *(void *)(v15 + 48) = v50;
      *(_OWORD *)(v15 + 16) = v17;
      *(_OWORD *)(v15 + 32) = v18;
      *(_OWORD *)unint64_t v15 = v16;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v45;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  void *v36;
  char v37;
  long long v38;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, Decodable & AnyViewFactory.Type>, (void (*)(uint64_t))type metadata accessor for Decodable & AnyViewFactory.Type);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v8 < 64) {
      char v9 = ~(-1 << v8);
    }
    else {
      char v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    char v35 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        uint64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35) {
          goto LABEL_33;
        }
        unsigned int v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v35) {
            goto LABEL_33;
          }
          unsigned int v23 = v36[v13];
          if (!v23)
          {
            int v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v37)
              {
                int v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unsigned int v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v35) {
                  goto LABEL_33;
                }
                unsigned int v23 = v36[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        uint64_t v10 = (v23 - 1) & v23;
        int64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v31 = *v29;
      BOOL v30 = v29[1];
      uint64_t v32 = *(void *)(v5 + 56) + 24 * v21;
      long long v38 = *(_OWORD *)v32;
      uint64_t v33 = *(void *)(v32 + 16);
      if ((v37 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v27 = v16 == v26;
          if (v16 == v26) {
            uint64_t v16 = 0;
          }
          v25 |= v27;
          char v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *unint64_t v18 = v31;
      v18[1] = v30;
      int64_t v19 = *(void *)(v7 + 56) + 24 * v17;
      *(_OWORD *)int64_t v19 = v38;
      *(void *)(v19 + 16) = v33;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void *v33;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<CAHostingLayerEvent.MouseButton, Int>, (void (*)(void))lazy protocol witness table accessor for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v32 = a2;
    int64_t v8 = 0;
    uint64_t v33 = (void *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        unint64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v18 >= v12) {
          goto LABEL_31;
        }
        int64_t v19 = v33[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v12) {
            goto LABEL_31;
          }
          int64_t v19 = v33[v8];
          if (!v19)
          {
            unint64_t v20 = v18 + 2;
            if (v20 >= v12)
            {
LABEL_31:
              if ((v32 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v33 = -1 << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v19 = v33[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                int64_t v19 = v33[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        uint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = 8 * v17;
      uint64_t v22 = *(void *)(*(void *)(v5 + 48) + v21);
      unsigned int v23 = *(void *)(*(void *)(v5 + 56) + v21);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v22);
      uint64_t result = Hasher._finalize()();
      int v24 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v27 = 0;
        char v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          BOOL v30 = *(void *)(v13 + 8 * v26);
        }
        while (v30 == -1);
        uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = 8 * v14;
      *(void *)(*(void *)(v7 + 48) + v15) = v22;
      *(void *)(*(void *)(v7 + 56) + v15) = v23;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::UInt *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt *v24;
  Swift::UInt v25;
  Swift::UInt v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int64_t v38;
  void *v39;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, EventBindingBridge.TrackedEventState>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v37 = a2;
    int64_t v8 = 0;
    uint64_t v39 = (void *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    long long v38 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v38) {
          goto LABEL_31;
        }
        unint64_t v20 = v39[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v38) {
            goto LABEL_31;
          }
          unint64_t v20 = v39[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v38)
            {
LABEL_31:
              if ((v37 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
              if (v36 >= 64) {
                bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v39 = -1 << v36;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v39[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v38) {
                  goto LABEL_31;
                }
                unint64_t v20 = v39[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        uint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 16 * v18;
      unsigned int v23 = *(void *)(v5 + 56) + v22;
      int v24 = (Swift::UInt *)(*(void *)(v5 + 48) + v22);
      unint64_t v26 = *v24;
      uint64_t v25 = v24[1];
      unint64_t v27 = *(unsigned char *)(v23 + 8);
      char v28 = *(void *)v23;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      Hasher._combine(_:)(v25);
      uint64_t result = Hasher._finalize()();
      unint64_t v29 = -1 << *(unsigned char *)(v7 + 32);
      BOOL v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          int v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          char v35 = *(void *)(v12 + 8 * v31);
        }
        while (v35 == -1);
        int64_t v13 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = 16 * v13;
      unint64_t v15 = (Swift::UInt *)(*(void *)(v7 + 48) + v14);
      *unint64_t v15 = v26;
      v15[1] = v25;
      uint64_t v16 = *(void *)(v7 + 56) + v14;
      *(void *)uint64_t v16 = v28;
      *(unsigned char *)(v16 + 8) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt32 v20;
  _OWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _OWORD v31[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<_ViewDebug.Property, Any>, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Property and conformance _ViewDebug.Property);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    BOOL v30 = (void *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        unint64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_34;
        }
        unint64_t v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v18 = v30[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_41;
              }
              unint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *BOOL v30 = -1 << v29;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v18 = v30[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      unint64_t v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      int64_t v21 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
      if (a2) {
        outlined init with take of Any(v21, v31);
      }
      else {
        outlined init with copy of Any((uint64_t)v21, (uint64_t)v31);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unsigned int v23 = result & ~v22;
      int v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          unint64_t v27 = v24 == v26;
          if (v24 == v26) {
            int v24 = 0;
          }
          v25 |= v27;
          char v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        uint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(unsigned char *)(*(void *)(v7 + 48) + v14) = v20;
      uint64_t result = (uint64_t)outlined init with take of Any(v31, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  void *v32;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.FragmentIdentifier, Text.Effect.Drawable>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v32 = (void *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v31 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        unint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v31) {
          goto LABEL_33;
        }
        int64_t v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          int64_t v21 = v32[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              BOOL v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v32 = -1 << v30;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                int64_t v21 = v32[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        int64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      unint64_t v27 = 8 * v19;
      char v28 = *(void *)(*(void *)(v5 + 48) + v27);
      unint64_t v29 = *(void *)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unsigned int v23 = 0;
        int v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        uint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      unint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt64 v22;
  int v23;
  Swift::UInt64 v24;
  int v25;
  uint64_t v26;
  Swift::UInt64 v27;
  Swift::UInt64 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  void *v38;
  uint64_t v39;
  char v40;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, Transaction>, (void (*)(void))lazy protocol witness table accessor for type _ProposedSize and conformance _ProposedSize);
  uint64_t v40 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    long long v38 = (void *)(v5 + 64);
    uint64_t v39 = v5;
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v37 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        unint64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v17 >= v37) {
          goto LABEL_44;
        }
        unint64_t v18 = v38[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v37) {
            goto LABEL_44;
          }
          unint64_t v18 = v38[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v37)
            {
LABEL_44:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_51;
              }
              uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
              if (v36 >= 64) {
                bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *long long v38 = -1 << v36;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v38[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_53;
                }
                if (v8 >= v37) {
                  goto LABEL_44;
                }
                unint64_t v18 = v38[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      unint64_t v20 = *(void *)(v5 + 56);
      int64_t v21 = *(void *)(v5 + 48) + 32 * v16;
      uint64_t v22 = *(void *)v21;
      unsigned int v23 = *(unsigned __int8 *)(v21 + 8);
      int v24 = *(void *)(v21 + 16);
      uint64_t v25 = *(unsigned __int8 *)(v21 + 24);
      unint64_t v26 = *(void *)(v20 + 8 * v16);
      if ((v40 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      if (v23)
      {
        Hasher._combine(_:)(0);
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        Hasher._combine(_:)(1u);
        if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          char v28 = v22;
        }
        else {
          char v28 = 0;
        }
        Hasher._combine(_:)(v28);
        if (v25)
        {
LABEL_34:
          Hasher._combine(_:)(0);
          goto LABEL_35;
        }
      }
      Hasher._combine(_:)(1u);
      if ((v24 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        unint64_t v27 = v24;
      }
      else {
        unint64_t v27 = 0;
      }
      Hasher._combine(_:)(v27);
LABEL_35:
      uint64_t result = Hasher._finalize()();
      unint64_t v29 = -1 << *(unsigned char *)(v7 + 32);
      BOOL v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_52;
          }
          int v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          char v35 = *(void *)(v12 + 8 * v31);
        }
        while (v35 == -1);
        int64_t v13 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = *(void *)(v7 + 48) + 32 * v13;
      *(void *)uint64_t v14 = v22;
      *(unsigned char *)(v14 + 8) = v23;
      *(void *)(v14 + 16) = v24;
      *(unsigned char *)(v14 + 24) = v25;
      *(void *)(*(void *)(v7 + 56) + 8 * v13) = v26;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v39;
    }
  }
  uint64_t result = swift_release();
LABEL_51:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  int v21;
  Swift::UInt64 v22;
  int v23;
  Swift::UInt64 v24;
  Swift::UInt64 v25;
  Swift::UInt64 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int64_t v36;
  void *v37;
  long long v38;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, CGSize>, type metadata accessor for CGSize, (void (*)(void))lazy protocol witness table accessor for type _ProposedSize and conformance _ProposedSize);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    int64_t v8 = 0;
    uint64_t v37 = (void *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        unint64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v36) {
          goto LABEL_42;
        }
        unint64_t v18 = v37[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v36) {
            goto LABEL_42;
          }
          unint64_t v18 = v37[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v36)
            {
LABEL_42:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_49;
              }
              int v34 = 1 << *(unsigned char *)(v5 + 32);
              if (v34 >= 64) {
                bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v37 = -1 << v34;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v37[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_51;
                }
                if (v8 >= v36) {
                  goto LABEL_42;
                }
                unint64_t v18 = v37[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      unint64_t v20 = *(void *)(v5 + 48) + 32 * v16;
      int64_t v21 = *(unsigned __int8 *)(v20 + 24);
      uint64_t v22 = *(void *)(v20 + 16);
      unsigned int v23 = *(unsigned __int8 *)(v20 + 8);
      int v24 = *(void *)v20;
      long long v38 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v16);
      Hasher.init(_seed:)();
      if (v23 == 1)
      {
        Hasher._combine(_:)(0);
        if (v21) {
          goto LABEL_32;
        }
      }
      else
      {
        Hasher._combine(_:)(1u);
        if ((v24 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          unint64_t v26 = v24;
        }
        else {
          unint64_t v26 = 0;
        }
        Hasher._combine(_:)(v26);
        if (v21)
        {
LABEL_32:
          Hasher._combine(_:)(0);
          goto LABEL_33;
        }
      }
      Hasher._combine(_:)(1u);
      if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v25 = v22;
      }
      else {
        uint64_t v25 = 0;
      }
      Hasher._combine(_:)(v25);
LABEL_33:
      uint64_t result = Hasher._finalize()();
      unint64_t v27 = -1 << *(unsigned char *)(v7 + 32);
      char v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        BOOL v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_50;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v12 + 8 * v29);
        }
        while (v33 == -1);
        int64_t v13 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = *(void *)(v7 + 48) + 32 * v13;
      *(void *)uint64_t v14 = v24;
      *(unsigned char *)(v14 + 8) = v23;
      *(void *)(v14 + 16) = v22;
      *(unsigned char *)(v14 + 24) = v21;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v13) = v38;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_49:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TintPlacement, AnyShapeStyle>, (void (*)(void))lazy protocol witness table accessor for type TintPlacement and conformance TintPlacement);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    unint64_t v29 = (void *)(v5 + 64);
    char v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        unint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v12) {
          goto LABEL_33;
        }
        int64_t v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v12) {
            goto LABEL_33;
          }
          int64_t v21 = v29[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              char v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v29 = -1 << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                int64_t v21 = v29[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        int64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      unint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unsigned int v23 = 0;
        int v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v25 = v16 == v24;
          if (v16 == v24) {
            uint64_t v16 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, _ViewList_Edit>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v33 = a2;
    int64_t v8 = 0;
    char v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    BOOL v30 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = v3;
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_38;
        }
        if (v8 >= v13)
        {
LABEL_29:
          if ((v33 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v32;
            goto LABEL_36;
          }
          if (v31 >= 64) {
            bzero((void *)(v5 + 64), 8 * v13);
          }
          else {
            uint64_t *v9 = v30;
          }
          uint64_t v3 = v32;
          *(void *)(v5 + 16) = 0;
          break;
        }
        int64_t v19 = v9[v8];
        if (!v19)
        {
          unint64_t v20 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_29;
          }
          int64_t v19 = v9[v20];
          if (!v19)
          {
            while (1)
            {
              int64_t v8 = v20 + 1;
              if (__OFADD__(v20, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_29;
              }
              int64_t v19 = v9[v8];
              ++v20;
              if (v19) {
                goto LABEL_19;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      uint64_t v22 = *(unsigned char *)(*(void *)(v5 + 56) + v17);
      uint64_t result = static Hasher._hash(seed:_:)();
      unsigned int v23 = -1 << *(unsigned char *)(v7 + 32);
      int v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          char v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      *(unsigned char *)(*(void *)(v7 + 56) + v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_36:
  *uint64_t v3 = v7;
  return result;
}

void type metadata accessor for _DictionaryStorage<AGAttribute, AGAttribute>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<AGAttribute, AGAttribute>)
  {
    type metadata accessor for AGAttribute(255);
    lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef((unint64_t *)&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, type metadata accessor for AGAttribute);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AGAttribute, AGAttribute>);
    }
  }
}

uint64_t _ViewInputs.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _GraphInputs.subscript.getter(a1, a2, *(void *)(a3 + 8));
}

{
  return _GraphInputs.subscript.getter(a1, a2, *(void *)(a3 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CountingIndex<A>(uint64_t a1, uint64_t a2)
{
  return static CountingIndex.== infix(_:_:)(a1, a2);
}

uint64_t storeEnumTagSinglePayload for _ViewListOutputs(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t static Edge.Set.horizontal.getter()
{
  return 10;
}

uint64_t closure #1 in Attribute.setValue(_:)partial apply@<X0>(unsigned char *a1@<X8>)
{
  return partial apply for closure #1 in Attribute.setValue(_:)(a1);
}

uint64_t partial apply for closure #1 in Attribute.setValue(_:)@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in Attribute.setValue(_:)(a1);
}

uint64_t _s14AttributeGraph0A0V8setValueySbxFSbSPyxGXEfU_TA_0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AGGraphSetValue();
  *a1 = result;
  return result;
}

uint64_t closure #1 in Attribute.setValue(_:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AGGraphSetValue();
  *a1 = result;
  return result;
}

BOOL specialized static PreferenceKeys.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 16);
  if (v2 != *(void *)(*(void *)a2 + 16)) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v3 = (uint64_t *)(*(void *)a1 + 32);
  uint64_t v4 = (uint64_t *)(*(void *)a2 + 32);
  uint64_t v5 = v2 - 1;
  while (1)
  {
    uint64_t v6 = *v3;
    uint64_t v7 = *v4;
    BOOL v8 = v5-- != 0;
    BOOL v9 = v8;
    BOOL result = v6 == v7;
    if (v6 != v7 || !v9) {
      break;
    }
    v4 += 2;
    v3 += 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for OpenURLAction()
{
  return &type metadata for OpenURLAction;
}

uint64_t _ProposedSize.height.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Rule<>.cachedValue(options:owner:)()
{
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  swift_release();
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  swift_release();
  return AGGraphSetOutputValue();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _EnvironmentKeyTransformModifier<A>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  return static _EnvironmentKeyTransformModifier._makeInputs(modifier:inputs:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t LayoutSubviews.endIndex.getter()
{
  return *(void *)(*(void *)(v0 + 8) + 16);
}

uint64_t type metadata completion function for TrackedValue()
{
  return type metadata completion function for DerivedValue();
}

uint64_t static VerticalAlignment.firstTextBaseline.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for firstTextBaseline, (uint64_t)&static VerticalAlignment.firstTextBaseline);
}

ValueMetadata *type metadata accessor for AnyView()
{
  return &type metadata for AnyView;
}

uint64_t _ProposedSize.init(_:in:by:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  if (a3) {
    uint64_t v6 = a4;
  }
  else {
    uint64_t v6 = result;
  }
  if (a3) {
    char v7 = a5;
  }
  else {
    char v7 = a2;
  }
  if (a3) {
    uint64_t v8 = result;
  }
  else {
    uint64_t v8 = a4;
  }
  if (a3) {
    char v9 = a2;
  }
  else {
    char v9 = a5;
  }
  *(void *)a6 = v6;
  *(unsigned char *)(a6 + 8) = v7 & 1;
  *(void *)(a6 + 16) = v8;
  *(unsigned char *)(a6 + 24) = v9 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Font.Design()
{
  return &type metadata for Font.Design;
}

void *protocol witness for Layout.updateCache(_:subviews:) in conformance _VStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 17);
  uint64_t v10 = *(void *)v5;
  uint64_t v11 = *(void *)(v5 + 8);
  char v12 = *(unsigned char *)(v5 + 16);
  int v14 = *(_DWORD *)a2;
  uint64_t v15 = v7;
  char v16 = v8;
  char v17 = v9;
  return StackLayout.update(children:majorAxis:minorAxisAlignment:uniformSpacing:)(&v14, a5, v10, v11, v12);
}

uint64_t specialized _ZStackLayout.placeSubviews(in:proposal:subviews:cache:)(int *a1, double a2, double a3, double a4, double a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t v8 = *((void *)a1 + 1);
  char v9 = *((unsigned char *)a1 + 17);
  int v95 = *a1;
  char v96 = *((unsigned char *)a1 + 16);
  LODWORD(v104) = *a1;
  uint64_t v105 = v8;
  LOBYTE(v106) = v96;
  BYTE1(v106) = v9;
  double v107 = 0.0;
  char v108 = closure #1 in _ZStackLayout.placeSubviews(in:proposal:subviews:cache:);
  uint64_t v109 = 0;
  swift_bridgeObjectRetain_n();
  *(double *)&unint64_t v10 = COERCE_DOUBLE(specialized LazyMapSequence.Iterator.next()());
  uint64_t v11 = (int *)MEMORY[0x263F288F8];
  if (v12)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    double v13 = 0.0;
LABEL_5:
    *(double *)(swift_allocObject() + 16) = v13;
    char v16 = (double *)swift_allocObject();
    v16[2] = a2;
    void v16[3] = a3;
    v16[4] = a4;
    v16[5] = a5;
    uint64_t v17 = v8 + 32;
    int v18 = *v11;
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    unint64_t v19 = 0;
    uint64_t v20 = v8 + 36;
    double v91 = -INFINITY;
    double v92 = -INFINITY;
LABEL_6:
    int64_t v21 = (int *)(v20 + 8 * v19);
    uint64_t v22 = (int *)(v17 + 12 * v19);
    while (1)
    {
      unint64_t v24 = *(void *)(v8 + 16);
      if (v19 == v24) {
        break;
      }
      if (v96)
      {
        if (v19 >= v24) {
          goto LABEL_87;
        }
        uint64_t v25 = (int *)(v17 + 12 * v19 + 4);
        unint64_t v26 = v22;
      }
      else
      {
        if (v19 >= v24) {
          goto LABEL_88;
        }
        unint64_t v26 = (int *)(v17 + 8 * v19);
        uint64_t v25 = v21;
      }
      if (v19 >= v24)
      {
        __break(1u);
        goto LABEL_84;
      }
      int v27 = *v25;
      int v28 = *v26;
      if (*v26 == v18)
      {
        Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
        }
      }
      else
      {
        Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
      }
      uint64_t v30 = *InputValue;
      uint64_t v31 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v31 != -1) {
        swift_once();
      }
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        if (!_MovableLockIsOwner(static Update._lock)) {
          goto LABEL_97;
        }
      }
      v21 += 2;
      v22 += 3;
      ++v19;
      double v23 = (*(double (**)(void))(*(void *)v30 + 88))();
      swift_release();
      if (v23 == v13)
      {
        int v101 = v95;
        int v102 = v28;
        int v103 = v27;
        double v97 = a4;
        char v98 = 0;
        double v99 = a5;
        char v100 = 0;
        LayoutProxy.dimensions(in:)((uint64_t)&v97, (uint64_t)&v104);
        uint64_t v33 = v104;
        uint64_t v32 = v105;
        double v34 = v106;
        double v35 = v107;
        uint64_t v36 = v108;
        uint64_t v37 = v109;
        ViewDimensions.subscript.getter(a7);
        double v39 = v92;
        if (v92 <= v38) {
          double v39 = v38;
        }
        double v92 = v39;
        uint64_t v104 = v33;
        uint64_t v105 = v32;
        double v106 = v34;
        double v107 = v35;
        char v108 = v36;
        uint64_t v109 = v37;
        ViewDimensions.subscript.getter(a8);
        double v41 = v40;
        swift_release();
        double v42 = v91;
        if (v91 <= v41) {
          double v42 = v41;
        }
        double v91 = v42;
        uint64_t v20 = v8 + 36;
        goto LABEL_6;
      }
    }
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    unint64_t v43 = *(void *)(v8 + 16);
    swift_bridgeObjectRetain();
    if (!v43)
    {
LABEL_58:
      return swift_bridgeObjectRelease();
    }
    unint64_t v44 = 0;
    uint64_t v45 = (int *)(v8 + 36);
    uint64_t v46 = (int *)(v8 + 32);
    uint64_t v86 = v8;
    while (1)
    {
      if (v96)
      {
        if (v44 >= v43) {
          goto LABEL_89;
        }
        uint64_t v52 = (int *)(v17 + 12 * v44);
        int v53 = v45[1];
        uint64_t v54 = v45;
      }
      else
      {
        if (v44 >= v43) {
          goto LABEL_90;
        }
        uint64_t v54 = (int *)(v17 + 8 * v44 + 4);
        int v53 = v44;
        uint64_t v52 = v46;
      }
      if (v44 >= v43) {
        break;
      }
      int v55 = *v52;
      int v56 = *v54;
      int v101 = v95;
      int v102 = v55;
      int v103 = v56;
      double v97 = a4;
      char v98 = 0;
      double v99 = a5;
      char v100 = 0;
      LayoutProxy.dimensions(in:)((uint64_t)&v97, (uint64_t)&v104);
      uint64_t v58 = v104;
      uint64_t v57 = v105;
      CGFloat v59 = v106;
      CGFloat v60 = v107;
      uint64_t v61 = v108;
      uint64_t v62 = v109;
      ViewDimensions.subscript.getter(a7);
      double v64 = v63;
      uint64_t v104 = v58;
      uint64_t v105 = v57;
      double v106 = v59;
      double v107 = v60;
      char v108 = v61;
      uint64_t v109 = v62;
      ViewDimensions.subscript.getter(a8);
      if (v92 == v64) {
        double v66 = -0.0;
      }
      else {
        double v66 = v92 - v64;
      }
      if (v91 == v65) {
        double v67 = -0.0;
      }
      else {
        double v67 = v91 - v65;
      }
      swift_retain();
      uint64_t v68 = _threadLayoutData();
      if (!v68) {
        goto LABEL_96;
      }
      uint64_t v69 = v68;
      if (*(unsigned char *)v68) {
        goto LABEL_85;
      }
      uint64_t v70 = *(void **)(v68 + 8);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v69 + 8) = v70;
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v53 < 0) {
          goto LABEL_57;
        }
      }
      else
      {
        uint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew()(v70);
        *(void *)(v69 + 8) = v70;
        if (v53 < 0)
        {
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
      }
      if (v70[2] <= v53) {
        goto LABEL_86;
      }
      long long v72 = &v70[8 * (uint64_t)v53];
      uint64_t v75 = v72[4];
      BOOL v74 = (double *)(v72 + 4);
      uint64_t v73 = v75;
      swift_release();
      if ((~v75 & 0x7FF0000000000000) == 0 && (v73 & 0xFFFFFFFFFFFFFLL) != 0) {
        ++*(void *)(v69 + 16);
      }
      double v76 = v66 + a2;
      double v77 = v67 + a3;
      double *v74 = v66 + a2;
      v74[1] = v67 + a3;
      *((void *)v74 + 2) = v58;
      *((void *)v74 + 3) = v57;
      _OWORD v74[4] = v59;
      v74[5] = v60;
      *((void *)v74 + 6) = v61;
      *((void *)v74 + 7) = v62;
      if (*(unsigned char *)(v69 + 56))
      {
        double v47 = *(double *)(v69 + 24);
        CGFloat v48 = *(double *)(v69 + 32);
        CGFloat v49 = *(double *)(v69 + 40);
        CGFloat v50 = *(double *)(v69 + 48);
        swift_retain();
        v111.origin.double x = v47;
        v111.origin.CGFloat y = v48;
        v111.size.CGFloat width = v49;
        v111.size.CGFloat height = v50;
        double MaxX = CGRectGetMaxX(v111);
        v112.origin.double x = v76;
        v112.origin.CGFloat y = v77;
        v112.size.CGFloat width = v59;
        v112.size.CGFloat height = v60;
        double *v74 = MaxX - (CGRectGetMaxX(v112) - v47);
      }
      else
      {
        swift_retain();
      }
      ++v44;
      swift_release_n();
      unint64_t v43 = *(void *)(v86 + 16);
      v46 += 2;
      v45 += 3;
      if (v44 == v43) {
        goto LABEL_58;
      }
    }
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  double v13 = *(double *)&v10;
  double v14 = v107;
  unint64_t v15 = *(void *)(v8 + 16);
  if (*(void *)&v107 == v15)
  {
LABEL_3:
    swift_bridgeObjectRelease_n();
    goto LABEL_5;
  }
  int v79 = *MEMORY[0x263F288F8];
  uint64_t v80 = v8 + 32 + 12 * *(void *)&v107;
  while (1)
  {
    if (v96)
    {
      if ((*(void *)&v14 & 0x8000000000000000) != 0) {
        goto LABEL_92;
      }
      uint64_t v82 = (_DWORD *)v80;
      if (*(void *)&v14 >= v15) {
        goto LABEL_94;
      }
    }
    else
    {
      if ((*(void *)&v14 & 0x8000000000000000) != 0) {
        goto LABEL_93;
      }
      if (*(void *)&v14 >= v15) {
        goto LABEL_95;
      }
      uint64_t v82 = (_DWORD *)(v8 + 32 + 8 * *(void *)&v14);
    }
    if (*(void *)&v14 >= v15) {
      goto LABEL_91;
    }
    if (*v82 == v79)
    {
      char v83 = (uint64_t *)&static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        char v83 = (uint64_t *)&static LayoutComputer.defaultValue;
      }
    }
    else
    {
      char v83 = (uint64_t *)AGGraphGetInputValue();
    }
    uint64_t v84 = *v83;
    uint64_t v85 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v85 != -1) {
      swift_once();
    }
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (!_MovableLockIsOwner(static Update._lock)) {
        break;
      }
    }
    ++*(void *)&v14;
    double v81 = (*(double (**)(void))(*(void *)v84 + 88))();
    swift_release();
    if (v13 < v81) {
      double v13 = v81;
    }
    unint64_t v15 = *(void *)(v8 + 16);
    v80 += 12;
    if (*(void *)&v14 == v15) {
      goto LABEL_3;
    }
  }
LABEL_97:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized LazyMapSequence.Iterator.next()()
{
  void (*v6)(uint64_t *__return_ptr, long long *);
  uint64_t v7;
  long long v8;
  char v9;

  unint64_t v1 = v0[3];
  uint64_t v2 = v0[1];
  if (v1 == *(void *)(v2 + 16)) {
    return 0;
  }
  unint64_t result = LayoutSubviews.subscript.getter(v0[3], (uint64_t)&v8);
  if (v1 >= *(void *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    long long v4 = v8;
    char v5 = v9;
    v0[3] = v1 + 1;
    uint64_t v6 = (void (*)(uint64_t *__return_ptr, long long *))v0[4];
    uint64_t v8 = v4;
    char v9 = v5;
    v6(&v7, &v8);
    return v7;
  }
  return result;
}

unint64_t LayoutSubviews.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  char v4 = *(unsigned char *)(v2 + 17);
  if (*(unsigned char *)(v2 + 16))
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(v3 + 16) > result)
    {
      char v5 = (_DWORD *)(v3 + 12 * result);
      uint64_t v6 = v5 + 8;
      uint64_t v7 = v5 + 9;
      unint64_t result = v5[10];
LABEL_8:
      int v9 = *v7;
      int v10 = *v6;
      *(_DWORD *)a2 = *(_DWORD *)v2;
      *(_DWORD *)(a2 + 4) = v10;
      *(_DWORD *)(a2 + 8) = v9;
      *(_DWORD *)(a2 + 12) = result;
      *(unsigned char *)(a2 + 16) = v4;
      return result;
    }
    __break(1u);
    goto LABEL_11;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (*(void *)(v3 + 16) > result)
  {
    uint64_t v8 = v3 + 8 * result;
    uint64_t v6 = (int *)(v8 + 32);
    uint64_t v7 = (int *)(v8 + 36);
    goto LABEL_8;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t closure #1 in _ZStackLayout.placeSubviews(in:proposal:subviews:cache:)@<X0>(void *a1@<X8>)
{
  uint64_t result = LayoutProxy.layoutPriority.getter();
  *a1 = v3;
  return result;
}

uint64_t LayoutProxy.layoutPriority.getter()
{
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x263F288F8])
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
  }
  else
  {
    Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
  }
  uint64_t v2 = *InputValue;
  uint64_t v3 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_12;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    (*(void (**)(void))(*(void *)v2 + 88))();
    return swift_release();
  }
  return result;
}

void *StackLayout.makeChildren()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 88);
  char v45 = *(unsigned char *)(v0 + 97);
  char v51 = *(unsigned char *)(v0 + 96);
  uint64_t v3 = specialized Collection.count.getter(*(unsigned int *)(v0 + 80), v2);
  char v4 = *(void **)(v1 + 104);
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v3 > v4[3] >> 1)
  {
    if (v4[2] <= v3) {
      int64_t v6 = v3;
    }
    else {
      int64_t v6 = v4[2];
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v6, 0, v4);
    char v4 = result;
  }
  *(void *)(v1 + 104) = v4;
  *(void *)(v1 + 24) = 0;
  uint64_t v47 = *(void *)(v2 + 16);
  if (!v47) {
    return result;
  }
  unint64_t v7 = 0;
  uint64_t v8 = (_DWORD *)(v2 + 32);
  int v9 = (_DWORD *)(v2 + 24);
  int v50 = *MEMORY[0x263F288F8];
  double v10 = 0.0;
  uint64_t v46 = v2 + 32;
  uint64_t v48 = v2;
  uint64_t v49 = v1;
  while (1)
  {
    if (v7)
    {
      if (*(unsigned char *)(v1 + 16))
      {
        unint64_t v11 = v7 - 1;
        unint64_t v12 = *(void *)(v2 + 16);
        if (v51)
        {
          if (v11 >= v12) {
            goto LABEL_74;
          }
          double v13 = (_DWORD *)(v46 + 12 * v11);
        }
        else
        {
          double v13 = v9;
          if (v11 >= v12) {
            goto LABEL_75;
          }
        }
        if (*v13 == v50)
        {
          Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
          if (one-time initialization token for defaultValue != -1)
          {
            swift_once();
            Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
          }
        }
        else
        {
          Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
        }
        uint64_t v16 = *InputValue;
        uint64_t v17 = one-time initialization token for lockAssertionsAreEnabled;
        swift_retain();
        if (v17 != -1) {
          swift_once();
        }
        if (lockAssertionsAreEnabled)
        {
          if (one-time initialization token for _lock != -1) {
            swift_once();
          }
          if (!_MovableLockIsOwner(static Update._lock)) {
            goto LABEL_78;
          }
        }
        (*(void (**)(void *__return_ptr))(*(void *)v16 + 112))(v55);
        swift_release();
        uint64_t v18 = v55[0];
        unint64_t v19 = *(void *)(v2 + 16);
        if (v51)
        {
          uint64_t v20 = v8;
          if (v7 >= v19) {
            goto LABEL_76;
          }
        }
        else
        {
          if (v7 >= v19) {
            goto LABEL_77;
          }
          uint64_t v20 = (_DWORD *)(v46 + 8 * v7);
        }
        if (*v20 == v50)
        {
          int64_t v21 = (uint64_t *)&static LayoutComputer.defaultValue;
          if (one-time initialization token for defaultValue != -1)
          {
            swift_once();
            int64_t v21 = (uint64_t *)&static LayoutComputer.defaultValue;
          }
        }
        else
        {
          int64_t v21 = (uint64_t *)AGGraphGetInputValue();
        }
        uint64_t v22 = *v21;
        if (lockAssertionsAreEnabled)
        {
          uint64_t v23 = one-time initialization token for _lock;
          swift_retain();
          if (v23 != -1) {
            swift_once();
          }
          uint64_t IsOwner = _MovableLockIsOwner(static Update._lock);
          if ((IsOwner & 1) == 0) {
            goto LABEL_78;
          }
        }
        else
        {
          uint64_t IsOwner = swift_retain();
        }
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v22 + 112))(v55, IsOwner);
        swift_release();
        uint64_t v25 = v55[0];
        int v26 = *(unsigned __int8 *)(v1 + 17);
        v55[0] = v18;
        char v54 = v45;
        uint64_t v53 = v25;
        Swift::UInt v27 = Spacing.distanceToSuccessorView(along:layoutDirection:preferring:)(v26, &v54, &v53);
        if (v28)
        {
          if (one-time initialization token for defaultSpacingValue != -1) {
            swift_once();
          }
          p_CGFloat height = (CGSize *)&defaultSpacingValue.height;
          if (!v26) {
            p_CGFloat height = &defaultSpacingValue;
          }
          double width = p_height->width;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          double v29 = *(double *)&v27;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          double width = v29;
        }
        uint64_t v2 = v48;
        uint64_t v1 = v49;
      }
      else
      {
        double width = *(double *)(v1 + 8);
      }
      double v10 = v10 + width;
      *(double *)(v1 + 24) = v10;
    }
    else
    {
      double width = 0.0;
    }
    unint64_t v31 = *(void *)(v2 + 16);
    if (v51) {
      break;
    }
    if (v7 >= v31) {
      goto LABEL_73;
    }
    uint64_t v32 = (_DWORD *)(v46 + 8 * v7);
LABEL_56:
    if (*v32 == v50)
    {
      uint64_t v33 = (uint64_t *)&static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        uint64_t v33 = (uint64_t *)&static LayoutComputer.defaultValue;
      }
    }
    else
    {
      uint64_t v33 = (uint64_t *)AGGraphGetInputValue();
    }
    uint64_t v34 = *v33;
    uint64_t v35 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v35 != -1) {
      swift_once();
    }
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (!_MovableLockIsOwner(static Update._lock)) {
        goto LABEL_78;
      }
    }
    double v36 = (*(double (**)(void))(*(void *)v34 + 88))();
    swift_release();
    if (one-time initialization token for invalidValue != -1) {
      swift_once();
    }
    long long v37 = static ViewGeometry.invalidValue;
    uint64_t v38 = qword_26B0F2B10;
    uint64_t v39 = unk_26B0F2B18;
    uint64_t v40 = xmmword_26B0F2B20;
    long long v52 = *(long long *)((char *)&xmmword_26B0F2B20 + 8);
    uint64_t v41 = qword_26B0F2B38;
    unint64_t v43 = v4[2];
    unint64_t v42 = v4[3];
    uint64_t result = (void *)swift_retain();
    if (v43 >= v42 >> 1)
    {
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, v4);
      char v4 = result;
    }
    v4[2] = v43 + 1;
    unint64_t v44 = &v4[15 * v43];
    v44[10] = v7;
    *((double *)v44 + 4) = v36;
    v44[5] = 0;
    *((unsigned char *)v44 + 48) = 1;
    v44[7] = 0;
    *((unsigned char *)v44 + 64) = 1;
    *((double *)v44 + 9) = width;
    *(_OWORD *)(v44 + 11) = v37;
    v44[13] = v38;
    v44[14] = v39;
    v44[15] = v40;
    *((_OWORD *)v44 + 8) = v52;
    v9 += 2;
    v8 += 3;
    ++v7;
    v44[18] = v41;
    uint64_t v2 = v48;
    uint64_t v1 = v49;
    if (v47 == v7)
    {
      *(void *)(v49 + 104) = v4;
      return result;
    }
  }
  uint64_t v32 = v8;
  if (v7 < v31) {
    goto LABEL_56;
  }
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double LayoutEngineBox.layoutPriority()(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 160);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  int64_t v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v9 - v5, (uint64_t)v1 + *(void *)(v2 + 176), v3);
  double v7 = (*(double (**)(uint64_t))(*(void *)(v2 + 168) + 8))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t protocol witness for LayoutEngine.layoutPriority() in conformance UnaryLayoutEngine<A>(uint64_t a1)
{
  return UnaryLayoutEngine.layoutPriority()(a1);
}

uint64_t UnaryLayoutEngine.layoutPriority()(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 40));
  int v3 = *((_DWORD *)v2 + 2);
  uint64_t v5 = *v2;
  int v6 = v3;
  return (*(uint64_t (**)(uint64_t *, void))(*(void *)(a1 + 24) + 64))(&v5, *(void *)(a1 + 16));
}

uint64_t closure #1 in ViewLayoutEngine.childGeometries(at:origin:)(uint64_t a1, uint64_t a2, uint64_t a3, BOOL a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17)
{
  uint64_t v91 = a7;
  BOOL v85 = a4;
  int v86 = a6;
  double v87 = *(double *)&a3;
  double v88 = *(double *)&a5;
  uint64_t v84 = a17;
  uint64_t v26 = type metadata accessor for ViewLayoutEngine();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  double v29 = &v81[-v28];
  double v82 = *(double *)&a8;
  uint64_t v30 = *(void *)(a8 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = &v81[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v83 = _threadLayoutData();
  _setThreadLayoutData();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v30 + 16))(v33, a2, a8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v27 + 16))(v29, a2, v26);
  uint64_t v34 = &v29[*(int *)(v26 + 40)];
  LODWORD(a8) = *(_DWORD *)v34;
  uint64_t v35 = *((void *)v34 + 1);
  LOBYTE(v34) = v29[*(int *)(v26 + 44)];
  char v98 = 0;
  char v99 = (char)v34;
  double v36 = *(void (**)(unsigned char *, uint64_t))(v27 + 8);
  swift_bridgeObjectRetain();
  v36(v29, v26);
  LODWORD(v92) = a8;
  uint64_t v37 = v91;
  uint64_t v93 = v35;
  LOBYTE(v94) = v98;
  BYTE1(v94) = v99;
  uint64_t v89 = v26;
  uint64_t v90 = a2;
  uint64_t v38 = *(void (**)(void, double, double, double, double))(v84 + 64);
  BOOL v97 = v85;
  char v96 = v86 & 1;
  double v39 = v82;
  v38(*(void *)&v87, a9, a10, a11, a12);
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, double))(v30 + 8))(v33, COERCE_DOUBLE(*(void *)&v39));
  uint64_t result = (uint64_t)_setThreadLayoutData();
  if (*(void *)(a1 + 16) != v37)
  {
    if ((v37 & 0x8000000000000000) == 0)
    {
      if (!v37) {
        return result;
      }
      unint64_t v41 = 0;
      double v42 = a15;
      double v43 = a16;
      BOOL v44 = (~*(void *)&a16 & 0x7FF0000000000000) == 0;
      BOOL v45 = (*(void *)&a16 & 0xFFFFFFFFFFFFFLL) != 0;
      if ((~*(void *)&a15 & 0x7FF0000000000000) == 0 && (*(void *)&a15 & 0xFFFFFFFFFFFFFLL) != 0) {
        double v42 = 0.0;
      }
      double v88 = v42;
      double v46 = v42;
      if ((~*(void *)&a15 & 0x7FF0000000000000) == 0 && (*(void *)&a15 & 0xFFFFFFFFFFFFFLL) != 0) {
        double v46 = NAN;
      }
      uint64_t v83 = *(void *)&v46;
      if (v44 && v45) {
        double v43 = 0.0;
      }
      int v86 = *MEMORY[0x263F288F8];
      double v87 = v43;
      double v47 = v43;
      if (v44 && v45) {
        double v47 = NAN;
      }
      double v82 = v47;
      uint64_t v48 = 11;
      uint64_t v49 = 32;
      BOOL v85 = (~*(void *)&a15 & 0x7FF0000000000000) == 0 && (*(void *)&a15 & 0xFFFFFFFFFFFFFLL) != 0;
      LODWORD(v84) = (~*(void *)&a16 & 0x7FF0000000000000) == 0 && v45;
      while (1)
      {
        uint64_t v55 = *(void *)(a1 + 8);
        if (v41 >= *(void *)(v55 + 16)) {
          break;
        }
        uint64_t v56 = *(void *)(v55 + v48 * 8 - 56);
        uint64_t v57 = ~v56 & 0x7FF0000000000000;
        uint64_t v58 = v56 & 0xFFFFFFFFFFFFFLL;
        if (v57) {
          BOOL v59 = 1;
        }
        else {
          BOOL v59 = v58 == 0;
        }
        if (!v59)
        {
          uint64_t v60 = *(void *)(v90 + *(int *)(v89 + 40) + 8);
          if (v41 >= *(void *)(v60 + 16)) {
            goto LABEL_42;
          }
          if (*(_DWORD *)(v60 + v49) == v86)
          {
            Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
            if (one-time initialization token for defaultValue != -1)
            {
              swift_once();
              Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
            }
          }
          else
          {
            Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
          }
          uint64_t v62 = *InputValue;
          uint64_t v63 = InputValue[1];
          uint64_t v64 = one-time initialization token for lockAssertionsAreEnabled;
          swift_retain();
          if (v64 != -1) {
            swift_once();
          }
          if (lockAssertionsAreEnabled)
          {
            if (one-time initialization token for _lock != -1) {
              swift_once();
            }
            if (!_MovableLockIsOwner(static Update._lock)) {
              goto LABEL_45;
            }
          }
          double v92 = v88;
          LOBYTE(v93) = v85;
          double v94 = v87;
          char v95 = v84;
          double v65 = (*(double (**)(double *))(*(void *)v62 + 120))(&v92);
          double v67 = v66;
          double v69 = *(double *)(a1 + 24);
          double v68 = *(double *)(a1 + 32);
          CGFloat v70 = *(double *)(a1 + 40);
          CGFloat v71 = *(double *)(a1 + 48);
          v102.origin.double x = v69;
          v102.origin.CGFloat y = v68;
          v102.size.double width = v70;
          v102.size.CGFloat height = v71;
          double Width = CGRectGetWidth(v102);
          v103.origin.double x = v69;
          v103.origin.CGFloat y = v68;
          v103.size.double width = v70;
          v103.size.CGFloat height = v71;
          double Height = CGRectGetHeight(v103);
          BOOL v74 = *(void **)(a1 + 8);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(a1 + 8) = v74;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            BOOL v74 = specialized _ArrayBuffer._consumeAndCreateNew()(v74);
            *(void *)(a1 + 8) = v74;
          }
          if (v41 >= v74[2]) {
            goto LABEL_43;
          }
          double v76 = (double *)&v74[v48];
          uint64_t v77 = v74[v48 - 7];
          swift_release();
          if ((~v77 & 0x7FF0000000000000) == 0 && (v77 & 0xFFFFFFFFFFFFFLL) != 0) {
            ++*(void *)(a1 + 16);
          }
          double v78 = v68 + Height * 0.5;
          double v79 = v69 + Width * 0.5 - v65 * 0.5;
          double v80 = v78 - v67 * 0.5;
          *(v76 - 7) = v79;
          *(v76 - 6) = v80;
          *((void *)v76 - 5) = v62;
          *((void *)v76 - 4) = v63;
          *(v76 - 3) = v65;
          *(v76 - 2) = v67;
          *((void *)v76 - 1) = v83;
          *(double *)&v74[v48] = v82;
          if (*(unsigned char *)(a1 + 56))
          {
            double v50 = *(double *)(a1 + 24);
            CGFloat v51 = *(double *)(a1 + 32);
            CGFloat v52 = *(double *)(a1 + 40);
            CGFloat v53 = *(double *)(a1 + 48);
            swift_retain();
            v100.origin.double x = v50;
            v100.origin.CGFloat y = v51;
            v100.size.double width = v52;
            v100.size.CGFloat height = v53;
            double MaxX = CGRectGetMaxX(v100);
            v101.origin.double x = v79;
            v101.origin.CGFloat y = v80;
            v101.size.double width = v65;
            v101.size.CGFloat height = v67;
            *(v76 - 7) = MaxX - (CGRectGetMaxX(v101) - v50);
          }
          else
          {
            swift_retain();
          }
          uint64_t v37 = v91;
          uint64_t result = swift_release();
        }
        ++v41;
        v48 += 8;
        v49 += 8;
        if (v37 == v41) {
          return result;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
    }
    __break(1u);
LABEL_45:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in ViewLayoutEngine.explicitAlignment(_:at:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, uint64_t a10@<D2>, double a11@<D3>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  type metadata accessor for ViewLayoutEngine();
  uint64_t result = closure #1 in closure #1 in ViewLayoutEngine.explicitAlignment(_:at:)(a2, a1, a3, a4, a5, a6, &v24, a8, a9, a10, a11);
  char v23 = v25;
  *(void *)a7 = v24;
  *(unsigned char *)(a7 + 8) = v23;
  return result;
}

uint64_t closure #1 in closure #1 in ViewLayoutEngine.explicitAlignment(_:at:)@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>, double a8@<D0>, double a9@<D1>, uint64_t a10@<D2>, double a11@<D3>)
{
  uint64_t v75 = a4;
  uint64_t v74 = a3;
  double v82 = a7;
  uint64_t v79 = a6;
  uint64_t v18 = type metadata accessor for ViewLayoutEngine();
  uint64_t v77 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v72 - v19;
  uint64_t v21 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v72 - v26;
  uint64_t v80 = _threadLayoutData();
  _setThreadLayoutData();
  uint64_t v81 = v21;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v78 = a5;
  if (a1)
  {
    v28(v24, a2, a5);
    if (one-time initialization token for _typeCache != -1) {
      swift_once();
    }
    CGFloat v51 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
    CGFloat v52 = (void *)((char *)static AlignmentKey._typeCache + 24);
    swift_retain_n();
    os_unfair_lock_lock(v51);
    uint64_t v53 = v76;
    closure #1 in AlignmentKey.init(id:axis:)(v52, v74, v75, &v85);
    uint64_t v76 = v53;
    uint64_t v32 = v51;
    if (!v53)
    {
      os_unfair_lock_unlock(v51);
      swift_release_n();
      uint64_t v75 = 2 * v85 + 3;
      BOOL v54 = (~a10 & 0x7FF0000000000000) == 0;
      BOOL v55 = (a10 & 0xFFFFFFFFFFFFFLL) != 0;
      BOOL v56 = v54 && v55;
      if (v54 && v55) {
        uint64_t v57 = 0;
      }
      else {
        uint64_t v57 = a10;
      }
      double v58 = a11;
      BOOL v59 = (~*(void *)&a11 & 0x7FF0000000000000) == 0;
      BOOL v60 = (*(void *)&a11 & 0xFFFFFFFFFFFFFLL) != 0;
      BOOL v61 = v59 && v60;
      if (v59 && v60) {
        double v58 = 0.0;
      }
      double v73 = v58;
      uint64_t v74 = v57;
      uint64_t v62 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v20, a2, v18);
      uint64_t v63 = &v20[*(int *)(v18 + 40)];
      int v64 = *(_DWORD *)v63;
      uint64_t v65 = *((void *)v63 + 1);
      LOBYTE(v63) = v20[*(int *)(v18 + 44)];
      char v89 = 0;
      char v90 = (char)v63;
      double v66 = *(void (**)(char *, uint64_t))(v62 + 8);
      swift_bridgeObjectRetain();
      v66(v20, v18);
      LODWORD(v85) = v64;
      uint64_t v86 = v65;
      char v87 = v89;
      char v88 = v90;
      double v67 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v79 + 80);
      BOOL v84 = v56;
      BOOL v83 = v61;
      uint64_t v68 = v78;
      uint64_t v48 = v67(v75, v74, 0.0, 0.0, a8, a9);
      char v50 = v69;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v81 + 8))(v24, v68);
      goto LABEL_20;
    }
  }
  else
  {
    v28(v27, a2, a5);
    if (one-time initialization token for _typeCache != -1) {
      swift_once();
    }
    double v29 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
    uint64_t v30 = (void *)((char *)static AlignmentKey._typeCache + 24);
    swift_retain_n();
    os_unfair_lock_lock(v29);
    uint64_t v31 = v76;
    closure #1 in AlignmentKey.init(id:axis:)(v30, v74, v75, &v85);
    uint64_t v76 = v31;
    uint64_t v32 = v29;
    if (!v31)
    {
      os_unfair_lock_unlock(v29);
      swift_release_n();
      uint64_t v75 = 2 * v85 + 2;
      BOOL v33 = (~a10 & 0x7FF0000000000000) == 0;
      BOOL v34 = (a10 & 0xFFFFFFFFFFFFFLL) != 0;
      BOOL v35 = v33 && v34;
      if (v33 && v34) {
        uint64_t v36 = 0;
      }
      else {
        uint64_t v36 = a10;
      }
      double v37 = a11;
      BOOL v38 = (~*(void *)&a11 & 0x7FF0000000000000) == 0;
      BOOL v39 = (*(void *)&a11 & 0xFFFFFFFFFFFFFLL) != 0;
      BOOL v40 = v38 && v39;
      if (v38 && v39) {
        double v37 = 0.0;
      }
      double v73 = v37;
      uint64_t v74 = v36;
      uint64_t v41 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v20, a2, v18);
      double v42 = &v20[*(int *)(v18 + 40)];
      int v43 = *(_DWORD *)v42;
      uint64_t v44 = *((void *)v42 + 1);
      LOBYTE(v42) = v20[*(int *)(v18 + 44)];
      char v89 = 0;
      char v90 = (char)v42;
      BOOL v45 = *(void (**)(char *, uint64_t))(v41 + 8);
      swift_bridgeObjectRetain();
      v45(v20, v18);
      LODWORD(v85) = v43;
      uint64_t v86 = v44;
      char v87 = v89;
      char v88 = v90;
      double v46 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v79 + 72);
      BOOL v84 = v35;
      BOOL v83 = v40;
      uint64_t v47 = v78;
      uint64_t v48 = v46(v75, v74, 0.0, 0.0, a8, a9);
      char v50 = v49;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v81 + 8))(v27, v47);
LABEL_20:
      uint64_t result = (uint64_t)_setThreadLayoutData();
      CGFloat v71 = v82;
      *double v82 = v48;
      *((unsigned char *)v71 + 8) = v50 & 1;
      return result;
    }
  }
  os_unfair_lock_unlock(v32);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ViewLayoutEngine()
{
  return __swift_instantiateGenericMetadata();
}

void *_setThreadLayoutData()
{
  uint64_t result = (void *)_perThreadLayoutData();
  *uint64_t result = v1;
  return result;
}

uint64_t _threadLayoutData()
{
  return *(void *)_perThreadLayoutData();
}

uint64_t destroy for ViewLayoutEngine(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(uint64_t, void))v3)(a1, *(void *)(a2 + 16));
  uint64_t v4 = *(void *)(v3 + 56) + a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))((v4 + *(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ViewLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v6 + v10 + a1) & ~v10;
  uint64_t v12 = (v6 + v10 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = *(void *)(v9 + 48);
  uint64_t v14 = v13 + v11;
  uint64_t v15 = v13 + v12;
  unint64_t v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v16 = *(_DWORD *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
  unint64_t v18 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  long long v21 = *(_OWORD *)(v19 + 16);
  long long v20 = *(_OWORD *)(v19 + 32);
  *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v21;
  *(_OWORD *)(v18 + 32) = v20;
  long long v22 = *(_OWORD *)(v19 + 96);
  long long v24 = *(_OWORD *)(v19 + 48);
  long long v23 = *(_OWORD *)(v19 + 64);
  *(_OWORD *)(v18 + 80) = *(_OWORD *)(v19 + 80);
  *(_OWORD *)(v18 + 96) = v22;
  *(_OWORD *)(v18 + 48) = v24;
  *(_OWORD *)(v18 + 64) = v23;
  char v25 = *(unsigned char *)(v19 + 160);
  long long v27 = *(_OWORD *)(v19 + 128);
  long long v26 = *(_OWORD *)(v19 + 144);
  *(_OWORD *)(v18 + 112) = *(_OWORD *)(v19 + 112);
  *(_OWORD *)(v18 + 128) = v27;
  *(_OWORD *)(v18 + 144) = v26;
  *(unsigned char *)(v18 + 160) = v25;
  uint64_t v28 = (_OWORD *)((v14 + 199) & 0xFFFFFFFFFFFFFFF8);
  double v29 = (_OWORD *)((v15 + 199) & 0xFFFFFFFFFFFFFFF8);
  long long v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = (void *)(((unint64_t)v28 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v32 = (void *)(((unint64_t)v29 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v31 = *v32;
  unint64_t v33 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v33 = *(_OWORD *)v34;
  char v35 = *(unsigned char *)(v34 + 64);
  long long v37 = *(_OWORD *)(v34 + 32);
  long long v36 = *(_OWORD *)(v34 + 48);
  *(_OWORD *)(v33 + 16) = *(_OWORD *)(v34 + 16);
  *(_OWORD *)(v33 + 32) = v37;
  *(_OWORD *)(v33 + 48) = v36;
  *(unsigned char *)(v33 + 64) = v35;
  *(void *)(((unint64_t)v31 + 87) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v32 + 87) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t destroy for _StackLayoutCache()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _StackLayoutCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  char v4 = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = v4;
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t closure #1 in AlignmentKey.init(id:axis:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * result);
  }
  else
  {
    uint64_t v12 = (void *)a1[1];
    uint64_t v11 = v12[2];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11 + 1, 1, v12);
    }
    unint64_t v14 = v12[2];
    unint64_t v13 = v12[3];
    if (v14 >= v13 >> 1) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
    }
    void v12[2] = v14 + 1;
    uint64_t v15 = &v12[2 * v14];
    void v15[4] = a2;
    _OWORD v15[5] = a3;
    a1[1] = v12;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *a1;
    *a1 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, a2, isUniquelyReferenced_nonNull_native);
    *a1 = v17;
    unint64_t result = swift_bridgeObjectRelease();
  }
  *a4 = v11;
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of ScrollStateRequest((long long *)a1, (uint64_t)v13);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v12[0] = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = *(void *)&v12[0];
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AnyTrackedValue?(a1, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue?, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue);
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      *(void *)&v13[0] = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v11 = *(void *)&v13[0];
      }
      outlined init with take of ScrollStateRequest((long long *)(*(void *)(v11 + 56) + 40 * v9), (uint64_t)v12);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *uint64_t v3 = v11;
      swift_bridgeObjectRelease();
      outlined init with take of ScrollStateRequest(v12, (uint64_t)v13);
    }
    else
    {
      uint64_t v14 = 0;
      memset(v13, 0, sizeof(v13));
    }
    return outlined destroy of AnyTrackedValue?((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue?, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _OWORD v12[2];
  _OWORD v13[2];

  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v13);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v12[0] = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v13, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = *(void *)&v12[0];
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of NamedImage.Cache.WeakCatalog?(a1, (unint64_t *)&lazy cache variable for type metadata for Any?);
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      *(void *)&v13[0] = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v11 = *(void *)&v13[0];
      }
      outlined init with take of Any((_OWORD *)(*(void *)(v11 + 56) + 32 * v9), v12);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *uint64_t v3 = v11;
      swift_bridgeObjectRelease();
      outlined init with take of Any(v12, v13);
    }
    else
    {
      memset(v13, 0, sizeof(v13));
    }
    return outlined destroy of NamedImage.Cache.WeakCatalog?((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for Any?);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of ScrollStateRequest((long long *)a1, (uint64_t)v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AnyTrackedValue?(a1, &lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      unint64_t v13 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v11 = v13;
      }
      outlined init with take of ScrollStateRequest((long long *)(*(void *)(v11 + 56) + 40 * v9), (uint64_t)v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *uint64_t v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = 0;
      memset(v14, 0, sizeof(v14));
    }
    return outlined destroy of AnyTrackedValue?((uint64_t)v14, &lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of ScrollStateRequest((long long *)a1, (uint64_t)v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AnyTrackedValue?(a1, (unint64_t *)&lazy cache variable for type metadata for ForwardedEventDispatcher?, &lazy cache variable for type metadata for ForwardedEventDispatcher);
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      unint64_t v13 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v11 = v13;
      }
      outlined init with take of ScrollStateRequest((long long *)(*(void *)(v11 + 56) + 40 * v9), (uint64_t)v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *uint64_t v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = 0;
      memset(v14, 0, sizeof(v14));
    }
    return outlined destroy of AnyTrackedValue?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for ForwardedEventDispatcher?, &lazy cache variable for type metadata for ForwardedEventDispatcher);
  }
}

{
  uint64_t *v2;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  unsigned char v9[16];

  if (*(unsigned char *)(a1 + 8))
  {
    outlined destroy of NamedImage.Cache.WeakCatalog?(a1, (unint64_t *)&lazy cache variable for type metadata for NamedImage.Cache.WeakCatalog?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v9);
    char v4 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a2, v4);
    return outlined destroy of NamedImage.Cache.WeakCatalog?((uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for NamedImage.Cache.WeakCatalog?);
  }
  else
  {
    outlined init with take of NamedImage.Cache.WeakCatalog(a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
    unint64_t v7 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of NamedImage.Cache.WeakCatalog?(a1, (unint64_t *)&lazy cache variable for type metadata for Any?);
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      unint64_t v13 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v11 = v13;
      }
      outlined init with take of Any((_OWORD *)(*(void *)(v11 + 56) + 32 * v9), v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *uint64_t v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v14, 0, sizeof(v14));
    }
    return outlined destroy of NamedImage.Cache.WeakCatalog?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Any?);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of ScrollStateRequest((long long *)a1, (uint64_t)v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AnyTrackedValue?(a1, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest);
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      unint64_t v13 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v11 = v13;
      }
      outlined init with take of ScrollStateRequest((long long *)(*(void *)(v11 + 56) + 40 * v9), (uint64_t)v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *uint64_t v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = 0;
      memset(v14, 0, sizeof(v14));
    }
    return outlined destroy of AnyTrackedValue?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  uint64_t v3 = v2;
  type metadata accessor for Text.Effect.InteractionMetrics?(0);
  MEMORY[0x270FA5388](v6 - 8);
  char v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = type metadata accessor for Text.Effect.InteractionMetrics();
  char v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  unint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, double))(v10 + 48))(a1, 1, v9, v11) == 1)
  {
    _s7SwiftUI11DisplayListV10ArchiveIDsVSgWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics?);
    uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v15)
    {
      unint64_t v16 = v14;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v18 = *v3;
      long long v22 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        unint64_t v18 = v22;
      }
      _s7SwiftUI4TextVAAE6EffectO18InteractionMetricsVWObTm_0(*(void *)(v18 + 56) + *(void *)(v10 + 72) * v16, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
      specialized _NativeDictionary._delete(at:)(v16, v18);
      *uint64_t v3 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    return _s7SwiftUI11DisplayListV10ArchiveIDsVSgWOhTm_0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics?);
  }
  else
  {
    _s7SwiftUI4TextVAAE6EffectO18InteractionMetricsVWObTm_0(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
    unint64_t v19 = swift_isUniquelyReferenced_nonNull_native();
    long long v22 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, a2, v19);
    *uint64_t v3 = v22;
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  unsigned char v7[16];

  if (*(unsigned char *)(a1 + 8))
  {
    _s7SwiftUI11DisplayListV10ArchiveIDsVSgWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for WeakBox<AnyLocationBase>?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v7);
    swift_release();
    return _s7SwiftUI11DisplayListV10ArchiveIDsVSgWOhTm_0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for WeakBox<AnyLocationBase>?);
  }
  else
  {
    _s7SwiftUI4TextVAAE6EffectO18InteractionMetricsVWObTm_0(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for WeakBox<AnyLocationBase>);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v7, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v6;
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(uint64_t, uint64_t), uint64_t (*a7)(unint64_t, uint64_t, uint64_t, uint64_t))
{
  char v10 = v7;
  uint64_t v14 = *v7;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 < v19 || (a3 & 1) == 0)
  {
    if (v21 >= v19 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    a5();
    unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v20 & 1) == (v26 & 1))
    {
      unint64_t v16 = v25;
      uint64_t v22 = *v10;
      if (v20) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v22 = *v10;
  if (v20)
  {
LABEL_8:
    uint64_t v23 = *(void *)(v22 + 56) + 40 * v16;
    __swift_destroy_boxed_opaque_existential_1(v23);
    return a6(a1, v23);
  }
LABEL_13:

  return a7(v16, a2, a1, v22);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  uint64_t v2 = v1;
  char v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  _CFObject.hash(into:)();
  uint64_t v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2, type metadata accessor for CFStringRef, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  uint64_t v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  type metadata accessor for AGSubgraphRef(0);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AGSubgraphRef and conformance AGSubgraphRef, type metadata accessor for AGSubgraphRef);
  _CFObject.hash(into:)();
  uint64_t v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2, type metadata accessor for AGSubgraphRef, &lazy protocol witness table cache variable for type AGSubgraphRef and conformance AGSubgraphRef, type metadata accessor for AGSubgraphRef);
}

{
  uint64_t v2;

  uint64_t v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  unsigned char v4[72];
  uint64_t vars8;

  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)a1 + 112))(v4);
  uint64_t v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for URL();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x263F06EA8];
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
  uint64_t v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x263F06EA8], &lazy protocol witness table cache variable for type URL and conformance URL, v2, MEMORY[0x263F06EC0]);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for UUID();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x263F07508];
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x263F07508], &lazy protocol witness table cache variable for type UUID and conformance UUID, v2, MEMORY[0x263F07528]);
}

{
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::Int v4;
  uint64_t vars8;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)a1);
  Hasher._combine(_:)(*(void *)(a1 + 8));
  Hasher._combine(_:)(*(void *)(a1 + 16));
  if (*(unsigned char *)(a1 + 32) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 24);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  if (*(unsigned char *)(a1 + 48) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 40);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  char v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    uint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      uint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          unint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          char v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          BOOL v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            uint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  unsigned char v9[40];

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      uint64_t v7 = MEMORY[0x24C523BA0](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  unsigned char v9[40];

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of Subview.ID(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      uint64_t v7 = MEMORY[0x24C523BA0](v9, a1);
      outlined destroy of Subview.ID((uint64_t)v9);
      if (v7) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = v2;
    uint64_t v8 = *(void *)(*(void *)(v2 + 48) + 8 * v5);
    if (v8 != a1)
    {
      unint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 104);
      swift_retain();
      LOBYTE(v9) = v9(a1);
      swift_release();
      if ((v9 & 1) == 0)
      {
        char v10 = ~v4;
        do
        {
          uint64_t v5 = (v5 + 1) & v10;
          if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
            break;
          }
          uint64_t v11 = *(void *)(*(void *)(v6 + 48) + 8 * v5);
          if (v11 == a1) {
            break;
          }
          uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 104);
          swift_retain();
          LOBYTE(v12) = v12(a1);
          swift_release();
        }
        while ((v12 & 1) == 0);
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  id v10;
  char v11;

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = v2;
    uint64_t v8 = ~v4;
    do
    {
      unint64_t v9 = *(void **)(*(void *)(v6 + 48) + 8 * v5);
      if (v9)
      {
        if (a1)
        {
          type metadata accessor for CFStringRef(0);
          lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
          char v10 = v9;
          uint64_t v11 = static _CFObject.== infix(_:_:)();

          if (v11) {
            return v5;
          }
        }
      }
      else if (!a1)
      {
        return v5;
      }
      uint64_t v5 = (v5 + 1) & v8;
    }
    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t, __n128);
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  uint64_t v15;
  void (**v16)(char *, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v22 = a1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  v6.n128_f64[0] = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = v2;
  unint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  char v10 = a2 & ~v9;
  uint64_t v21 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16);
    uint64_t v12 = v5 + 16;
    unint64_t v13 = v14;
    char v15 = *(void *)(v12 + 56);
    unint64_t v16 = (void (**)(char *, uint64_t))(v12 - 8);
    do
    {
      uint64_t v17 = v12;
      v13(v8, *(void *)(v23 + 48) + v15 * v10, v4, v6);
      BOOL v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v16)(v8, v4);
      if (v18) {
        break;
      }
      char v10 = (v10 + 1) & v11;
      uint64_t v12 = v17;
    }
    while (((*(void *)(v21 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
    return result;
  }
  uint64_t v6 = ~v4;
  while (1)
  {
    uint64_t v7 = *(void *)(v2 + 48) + 56 * result;
    if (*(void *)v7 != *(void *)a1) {
      goto LABEL_4;
    }
    uint64_t v8 = *(void *)(v7 + 8);
    unint64_t v9 = *(void *)(a1 + 8);
    if (__OFSUB__(v9, v8)) {
      break;
    }
    if (v9 == v8)
    {
      char v10 = *(void *)(v7 + 16);
      uint64_t v11 = *(void *)(a1 + 16);
      if (__OFSUB__(v11, v10)) {
        goto LABEL_23;
      }
      if (v11 == v10)
      {
        uint64_t v12 = *(void *)(v7 + 40);
        unint64_t v13 = *(unsigned char *)(v7 + 48);
        if (*(unsigned char *)(v7 + 32))
        {
          if ((*(unsigned char *)(a1 + 32) & 1) == 0) {
            goto LABEL_4;
          }
LABEL_16:
          if (v13)
          {
            if (*(unsigned char *)(a1 + 48)) {
              return result;
            }
          }
          else if ((*(unsigned char *)(a1 + 48) & 1) == 0)
          {
            unint64_t v16 = *(void *)(a1 + 40);
            if (__OFSUB__(v16, v12)) {
              goto LABEL_25;
            }
            if (v16 == v12) {
              return result;
            }
          }
          goto LABEL_4;
        }
        if ((*(unsigned char *)(a1 + 32) & 1) == 0)
        {
          uint64_t v14 = *(void *)(v7 + 24);
          char v15 = *(void *)(a1 + 24);
          if (__OFSUB__(v15, v14)) {
            goto LABEL_24;
          }
          if (v15 == v14) {
            goto LABEL_16;
          }
        }
      }
    }
LABEL_4:
    unint64_t result = (result + 1) & v6;
    if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
      return result;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    uint64_t v8 = *(void *)(v7 + 8 * result);
    if (__OFSUB__(a1, v8))
    {
LABEL_11:
      __break(1u);
      return result;
    }
    if (v8 != a1)
    {
      unint64_t v9 = ~v5;
      unint64_t result = (result + 1) & v9;
      if ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
      {
        while (1)
        {
          char v10 = *(void *)(v7 + 8 * result);
          if (__OFSUB__(a1, v10)) {
            break;
          }
          if (v10 != a1)
          {
            unint64_t result = (result + 1) & v9;
            if ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result)) {
              continue;
            }
          }
          return result;
        }
        __break(1u);
        goto LABEL_11;
      }
    }
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = a5(a3, a4[7] + 40 * a1);
  uint64_t v7 = a4[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a4[2] = v9;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))outlined init with take of ScrollStateRequest);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  BOOL v8 = a4[6];
  uint64_t v9 = type metadata accessor for NamedImage.VectorKey(0);
  _sSo21NSAttributedStringKeya3key_yp5valuetSgWObTm_0(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, type metadata accessor for NamedImage.VectorKey);
  uint64_t result = outlined init with take of NamedImage.VectorInfo(a3, a4[7] + 88 * a1);
  uint64_t v11 = a4[2];
  uint64_t v12 = __OFADD__(v11, 1);
  unint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  BOOL v8 = a4[6];
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = outlined init with take of NamedImage.Cache.WeakCatalog(a3, a4[7] + 8 * a1);
  uint64_t v11 = a4[2];
  uint64_t v12 = __OFADD__(v11, 1);
  unint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  BOOL v8 = type metadata accessor for Text.Effect.InteractionMetrics();
  uint64_t result = _sSo21NSAttributedStringKeya3key_yp5valuetSgWObTm_0(a3, v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
  char v10 = a4[2];
  uint64_t v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = _sSo21NSAttributedStringKeya3key_yp5valuetSgWObTm_0(a3, a4[7] + 8 * a1, (uint64_t (*)(void))type metadata accessor for WeakBox<AnyLocationBase>);
  uint64_t v6 = a4[2];
  uint64_t v7 = __OFADD__(v6, 1);
  BOOL v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, uint64_t))outlined init with take of ScrollStateRequest, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  void *v16;
  char v17;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  BOOL v8 = (void *)*v3;
  char v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  uint64_t v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v14 = v9;
  char v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  char v10 = result;
  unint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, uint64_t))outlined init with take of ScrollStateRequest, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, uint64_t))outlined init with take of ScrollStateRequest, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  BOOL v8 = type metadata accessor for NamedImage.VectorKey(0);
  MEMORY[0x270FA5388](v8);
  char v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*v3;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (void (*)(unsigned char *))NamedImage.VectorKey.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  uint64_t v14 = v11[2];
  char v15 = (v12 & 1) == 0;
  unint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v17 = v12;
  BOOL v18 = v11[3];
  if (v18 < v16 || (a3 & 1) == 0)
  {
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a3 & 1);
    uint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (void (*)(unsigned char *))NamedImage.VectorKey.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if ((v17 & 1) == (v23 & 1))
    {
      unint64_t v13 = v22;
      uint64_t v19 = *v4;
      if (v17) {
        goto LABEL_8;
      }
LABEL_13:
      outlined init with copy of NamedImage.VectorKey(a2, (uint64_t)v10, type metadata accessor for NamedImage.VectorKey);
      return specialized _NativeDictionary._insert(at:key:value:)(v13, (uint64_t)v10, a1, v19);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v19 = *v4;
  if ((v17 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  char v20 = v19[7] + 88 * v13;

  return outlined assign with take of NamedImage.VectorInfo(a1, v20);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  void *v16;
  char v17;
  unsigned char v18[40];

  uint64_t v4 = (void **)v3;
  BOOL v8 = (void *)*v3;
  char v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  uint64_t v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v14 = v9;
  char v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  char v10 = result;
  unint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with copy of AnyHashable(a2, (uint64_t)v18);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v18, a1, v16);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  BOOL v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  char v15 = v12[2];
  unint64_t v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  BOOL v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      uint64_t v14 = v23;
      char v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7] + 8 * v14;

  return outlined assign with take of NamedImage.Cache.WeakCatalog(a1, v21);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, uint64_t))outlined init with take of ScrollStateRequest, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  uint64_t vars8;

  uint64_t v4 = v3;
  BOOL v8 = *v3;
  char v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, MEMORY[0x263F8E7D0], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = (v9 & 1) == 0;
  unint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v14 = v9;
  char v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = *(void *)(v16 + 56);
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, MEMORY[0x263F8E7D0], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  char v10 = v19;
  unint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  char v21;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  BOOL v8 = (void *)*v3;
  char v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, MEMORY[0x263F8E7C8], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  uint64_t v11 = v8[2];
  uint64_t v12 = (v9 & 1) == 0;
  unint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v14 = v9;
  char v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      BOOL v18 = type metadata accessor for Text.Effect.InteractionMetrics();
      return outlined assign with take of Text.Effect.InteractionMetrics(a1, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v10, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  char v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, MEMORY[0x263F8E7C8], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  if ((v14 & 1) != (v21 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  char v10 = v20;
  unint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  BOOL v8 = (void *)*v3;
  char v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  uint64_t v12 = (v9 & 1) == 0;
  unint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v14 = v9;
  char v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      char v10 = v19;
      unint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 8 * v10;
    return outlined assign with take of WeakBox<AnyLocationBase>(a1, v17);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);

  return swift_retain();
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  uint64_t v4 = v3;
  BOOL v8 = *v3;
  char v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v14 = v9;
  char v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    unint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = *(void *)(v16 + 56);
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    *(void *)(v16 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    *(void *)(*(void *)(v16 + 56) + 8 * v10) = a1;
    uint64_t v19 = *(void *)(v16 + 16);
    char v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      *(void *)(v16 + 16) = v21;
      return result;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    char v10 = result;
    unint64_t v16 = *v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t HVStack.explicitAlignment(of:in:proposal:subviews:cache:)(unint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, double a7, double a8, double a9)
{
  return StackLayout.explicitAlignment(_:in:proposal:)(a1, a2, a3 & 1, a4, a5 & 1, a6, a7, a8, a9);
}

{
  return HVStack.explicitAlignment(of:in:proposal:subviews:cache:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

{
  return HVStack.explicitAlignment(of:in:proposal:subviews:cache:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance _VStackLayout(unint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, double a7, double a8, double a9)
{
  return HVStack.explicitAlignment(of:in:proposal:subviews:cache:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t StackLayout.explicitAlignment(_:in:proposal:)(unint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, double a7, double a8, double a9)
{
  if (a3) {
    *(double *)&a2 = NAN;
  }
  if (a5) {
    *(double *)&a4 = NAN;
  }
  uint64_t v17 = *(void **)(v9 + 104);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
  }
  uint64_t v18 = v17[2];
  *(double *)&long long v22 = a8;
  *((double *)&v22 + 1) = a9;
  uint64_t v23 = a2;
  uint64_t v24 = a4;
  *(double *)&uint64_t result = COERCE_DOUBLE(StackLayout.UnmanagedImplementation.explicitAlignment(_:at:)(a1, &v22, v9, (uint64_t)(v17 + 4), v18));
  *(void *)(v9 + 104) = v17;
  if (a1) {
    double v21 = a7;
  }
  else {
    double v21 = a6;
  }
  if ((v20 & 1) == 0) {
    *(double *)&uint64_t result = v21 + *(double *)&result;
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, ScrollStateRequest>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for ScrollStateRequest(255, a3);
    unint64_t v4 = type metadata accessor for _DictionaryStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

Swift::Double __swiftcall ViewLayoutEngine.layoutPriority()()
{
  Swift::Double result = -INFINITY;
  if (*(void *)(*(void *)(v1 + *(int *)(v0 + 40) + 8) + 16)) {
    return 0.0;
  }
  return result;
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ZStackLayout(uint64_t a1)
{
  uint64_t result = _threadLayoutData();
  if (result)
  {
    if (*(unsigned char *)result == 1)
    {
      uint64_t v3 = *(void *)(result + 16);
      long long v4 = *(_OWORD *)(result + 48);
      v5[0] = *(_OWORD *)(result + 32);
      v5[1] = v4;
      return (*(uint64_t (**)(uint64_t, _OWORD *, void))(v3 + 8))(a1, v5, *(void *)(result + 24));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ZStackLayout(a1);
}

uint64_t protocol witness for static DefaultAlignmentFunction.defaultAlignment(_:size:data:) in conformance ViewLayoutEngine<A>(unint64_t a1, void *a2, uint64_t a3)
{
  return static ViewLayoutEngine.defaultAlignment(_:size:data:)(a1, a2, a3);
}

uint64_t static ViewLayoutEngine.defaultAlignment(_:size:data:)(unint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if ((~*a2 & 0x7FF0000000000000) == 0 || (a2[1] & 0x7FF0000000000000) == 0x7FF0000000000000) {
    return 0;
  }
  long long v41 = *(_OWORD *)(a2 + 1);
  uint64_t v7 = a2[3];
  uint64_t v8 = type metadata accessor for ViewLayoutEngine();
  uint64_t v9 = *(void *)(a3 + *(int *)(v8 + 40) + 8);
  uint64_t v10 = *(int *)(v8 + 56);
  uint64_t v11 = *(void *)(a3 + v10);
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12 == *(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v13 = v8;
    *(void *)BOOL v45 = v3;
    *(_OWORD *)&v45[8] = v41;
    *(void *)&v45[24] = v7;
    swift_bridgeObjectRetain();
    uint64_t v11 = ViewLayoutEngine.childGeometries(at:origin:)((double *)v45, v13, 0.0, 0.0);
    *(void *)(a3 + v10) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 16);
  }
  uint64_t v43 = 0;
  char v44 = 1;
  if (!v12)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  int v39 = *MEMORY[0x263F288F8];
  uint64_t v36 = (a1 >> 1) - 1;
  unint64_t v37 = a1 >> 1;
  uint64_t v35 = v9;
  uint64_t v16 = v11 + 40;
  uint64_t v17 = 32;
  uint64_t v38 = v12;
  while (v15 < *(void *)(v9 + 16))
  {
    long long v40 = *(_OWORD *)(v16 + 40);
    long long v42 = *(_OWORD *)(v16 + 24);
    if (*(_DWORD *)(v9 + v17) == v39)
    {
      Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
      }
    }
    else
    {
      Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
    }
    uint64_t v19 = *InputValue;
    uint64_t v20 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v20 != -1) {
      swift_once();
    }
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (!_MovableLockIsOwner(static Update._lock)) {
        goto LABEL_39;
      }
    }
    *(_OWORD *)BOOL v45 = v42;
    *(_OWORD *)&v45[16] = v40;
    double v21 = COERCE_DOUBLE((*(uint64_t (**)(unint64_t, unsigned char *))(*(void *)v19 + 144))(a1, v45));
    char v23 = v22;
    swift_release();
    if ((v23 & 1) == 0)
    {
      uint64_t v24 = (double *)(v16 - 8);
      if (a1) {
        uint64_t v24 = (double *)v16;
      }
      double v25 = *v24;
      unint64_t v26 = a1;
      if (one-time initialization token for _typeCache != -1) {
        swift_once();
      }
      long long v27 = static AlignmentKey._typeCache;
      uint64_t v28 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
      swift_retain();
      os_unfair_lock_lock(v28);
      uint64_t v29 = v27[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_unfair_lock_unlock(v28);
      swift_release();
      if (v26 < 2) {
        goto LABEL_36;
      }
      if (v37 > *(void *)(v29 + 16)) {
        goto LABEL_37;
      }
      uint64_t v30 = v29 + 16 * v36;
      uint64_t v31 = *(void *)(v30 + 32);
      uint64_t v32 = *(void *)(v30 + 40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, double))(v32 + 16))(v14, &v43, v31, v32, v25 + v21);
      if (__OFADD__(v14++, 1)) {
        goto LABEL_38;
      }
      a1 = v26;
      uint64_t v9 = v35;
    }
    ++v15;
    v16 += 64;
    v17 += 8;
    if (v38 == v15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v43;
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t LayoutEngineBox.spacing()()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 168) + 32))(*(void *)(*(void *)v0 + 160));
}

uint64_t specialized Collection.count.getter(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

void protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance _VStackLayout(uint64_t a1, char a2, uint64_t a3, char a4, CGFloat a5, CGFloat a6, double a7, double a8, uint64_t a9, uint64_t a10)
{
  uint64_t v19 = *(void **)(a10 + 104);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
  }
  StackLayout.UnmanagedImplementation.commitPlacements(in:proposedSize:)(a1, a2 & 1, a3, a4 & 1, a10, (uint64_t)(v19 + 4), v19[2], a5, a6, a7, a8);
  *(void *)(a10 + 104) = v19;
}

void StackLayout.UnmanagedImplementation.commitPlacements(in:proposedSize:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, CGFloat a8, CGFloat a9, double a10, double a11)
{
  uint64_t v13 = (void *)a5;
  double MinX = a11;
  double v15 = a10;
  double v19 = NAN;
  if (a2) {
    *(double *)&a1 = NAN;
  }
  *(double *)uint64_t v104 = a10;
  *(double *)&v104[1] = a11;
  if ((a4 & 1) == 0) {
    double v19 = *(double *)&a3;
  }
  v104[2] = a1;
  *(double *)&v104[3] = v19;
  uint64_t v20 = StackLayout.UnmanagedImplementation.proposalWhenPlacing(in:)(v104, a5);
  LOBYTE(v104[0]) = v21 & 1;
  StackLayout.UnmanagedImplementation.placeChildren(in:)(v20, v21 & 1, v23, v22 & 1, (uint64_t)v13, a6, a7);
  unsigned __int8 v24 = *((unsigned char *)v13 + 97);
  double v97 = MinX;
  CGFloat v98 = a8;
  CGFloat v95 = v15;
  int v96 = v24;
  CGFloat v99 = a9;
  double v25 = a8;
  double v26 = a9;
  if (*((unsigned char *)v13 + 17))
  {
    double v27 = v15;
    double v28 = MinX;
    double MinY = CGRectGetMinY(*(CGRect *)&v25);
    if (!a6 || !a7) {
      return;
    }
    double v30 = MinY;
    char v93 = *((unsigned char *)v13 + 96);
    uint64_t v100 = v13[11];
    swift_bridgeObjectRetain();
    unint64_t v31 = 0;
    uint64_t v32 = a6 + 56;
    uint64_t v33 = 120 * a7;
    uint64_t v34 = 40;
    while (1)
    {
      unint64_t v42 = *(void *)(v100 + 16);
      if (v31 == v42) {
        goto LABEL_80;
      }
      double v43 = *(double *)(v32 - 16);
      double v44 = *(double *)v32;
      a7 = *(void *)(v32 + 16);
      uint64_t v45 = *(void *)(v32 + 24);
      CGFloat v46 = *(double *)(v32 + 32);
      uint64_t v47 = *(void *)(v32 + 56);
      if (v93)
      {
        if (v31 >= v42) {
          goto LABEL_89;
        }
        int v48 = *(_DWORD *)(v100 + v34);
      }
      else
      {
        if (v31 >= v42) {
          goto LABEL_90;
        }
        int v48 = v31;
      }
      if (v31 >= v42)
      {
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
        return;
      }
      long long rect = *(_OWORD *)(v32 + 40);
      double v49 = v30 + v43;
      if ((COERCE_UNSIGNED_INT64(v30 + v43) & 0xFFFFFFFFFFFFFLL) != 0
        && (~COERCE__INT64(v30 + v43) & 0x7FF0000000000000) == 0)
      {
        double v51 = *(double *)(v32 + 8);
      }
      else
      {
        double v51 = v30 + v43;
      }
      swift_retain_n();
      if (v24)
      {
        v108.origin.double x = v44;
        v108.origin.CGFloat y = v51;
        v108.size.double width = v46;
        *(void *)&v108.size.CGFloat height = rect;
        double v44 = v15 - CGRectGetMaxX(v108);
      }
      v109.origin.double x = v98;
      v109.origin.CGFloat y = v99;
      v109.size.double width = v15;
      v109.size.CGFloat height = MinX;
      double MinX = CGRectGetMinX(v109);
      swift_retain();
      uint64_t v52 = _threadLayoutData();
      if (!v52) {
        goto LABEL_93;
      }
      a6 = v52;
      if (*(unsigned char *)v52) {
        goto LABEL_85;
      }
      uint64_t v13 = *(void **)(v52 + 8);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(a6 + 8) = v13;
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v48 < 0) {
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew()(v13);
        *(void *)(a6 + 8) = v13;
        if (v48 < 0)
        {
LABEL_37:
          __break(1u);
          break;
        }
      }
      if (v13[2] <= v48) {
        goto LABEL_87;
      }
      BOOL v54 = &v13[8 * (uint64_t)v48];
      uint64_t v57 = v54[4];
      BOOL v55 = v54 + 4;
      uint64_t v56 = v57;
      swift_release();
      if ((~v57 & 0x7FF0000000000000) == 0 && (v56 & 0xFFFFFFFFFFFFFLL) != 0) {
        ++*(void *)(a6 + 16);
      }
      double v58 = v44 + MinX;
      *(double *)BOOL v55 = v58;
      *((double *)v55 + 1) = v51;
      v55[2] = a7;
      void v55[3] = v45;
      *((CGFloat *)v55 + 4) = v46;
      *(_OWORD *)(v55 + 5) = rect;
      v55[7] = v47;
      unsigned __int8 v24 = v96;
      if (v96 == *(unsigned __int8 *)(a6 + 56))
      {
        swift_retain();
      }
      else
      {
        double v35 = *(double *)(a6 + 24);
        CGFloat v36 = *(double *)(a6 + 32);
        CGFloat v37 = v46;
        CGFloat v38 = *(double *)(a6 + 40);
        CGFloat v39 = *(double *)(a6 + 48);
        swift_retain();
        v106.origin.double x = v35;
        v106.origin.CGFloat y = v36;
        v106.size.double width = v38;
        v106.size.CGFloat height = v39;
        double MaxX = CGRectGetMaxX(v106);
        v107.origin.double x = v58;
        v107.origin.CGFloat y = v51;
        v107.size.double width = v37;
        *(void *)&v107.size.CGFloat height = rect;
        double v41 = MaxX - (CGRectGetMaxX(v107) - v35);
        double v15 = v95;
        *(double *)BOOL v55 = v41;
      }
      double MinX = v97;
      double v30 = v49 + *(double *)&rect;
      swift_release_n();
      v34 += 12;
      v32 += 120;
      ++v31;
      v33 -= 120;
      if (!v33) {
        goto LABEL_80;
      }
    }
  }
  double v59 = v15;
  double v60 = MinX;
  if (v24)
  {
    double v61 = CGRectGetMaxX(*(CGRect *)&v25);
    if (!a6) {
      return;
    }
  }
  else
  {
    double v61 = CGRectGetMinX(*(CGRect *)&v25);
    if (!a6) {
      return;
    }
  }
  if (a7)
  {
    char v94 = *((unsigned char *)v13 + 96);
    uint64_t v101 = v13[11];
    swift_bridgeObjectRetain();
    unint64_t v62 = 0;
    uint64_t v63 = a6 + 56;
    uint64_t v64 = 120 * a7;
    uint64_t v65 = 40;
    do
    {
      unint64_t v71 = *(void *)(v101 + 16);
      if (v62 == v71) {
        break;
      }
      double v72 = *(double *)(v63 - 16);
      double v74 = *(double *)v63;
      double v73 = *(double *)(v63 + 8);
      uint64_t v75 = *(void *)(v63 + 16);
      uint64_t v76 = *(void *)(v63 + 24);
      double v77 = *(double *)(v63 + 32);
      uint64_t v78 = *(void *)(v63 + 56);
      if (v94)
      {
        if (v62 >= v71) {
          goto LABEL_91;
        }
        int v79 = *(_DWORD *)(v101 + v65);
      }
      else
      {
        if (v62 >= v71) {
          goto LABEL_92;
        }
        int v79 = v62;
      }
      if (v62 >= v71) {
        goto LABEL_84;
      }
      rectfloat64_t a = *(_OWORD *)(v63 + 40);
      swift_retain_n();
      v112.origin.double x = v98;
      v112.origin.CGFloat y = v99;
      v112.size.double width = v95;
      v112.size.CGFloat height = MinX;
      double v80 = CGRectGetMinY(v112);
      if (v24)
      {
        double v61 = v61 - v72 - v77;
        if ((*(void *)&v61 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)&v61 & 0x7FF0000000000000) == 0) {
          double v82 = v74;
        }
        else {
          double v82 = v61;
        }
      }
      else
      {
        if ((COERCE_UNSIGNED_INT64(v61 + v72) & 0xFFFFFFFFFFFFFLL) != 0
          && (~COERCE__INT64(v61 + v72) & 0x7FF0000000000000) == 0)
        {
          double v82 = v74;
        }
        else
        {
          double v82 = v61 + v72;
        }
        double v61 = v61 + v72 + v77;
      }
      swift_retain();
      uint64_t v84 = _threadLayoutData();
      if (!v84) {
        goto LABEL_94;
      }
      uint64_t v85 = v84;
      if (*(unsigned char *)v84) {
        goto LABEL_86;
      }
      uint64_t v86 = *(void **)(v84 + 8);
      char v87 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v85 + 8) = v86;
      if (v87)
      {
        if (v79 < 0) {
          goto LABEL_78;
        }
      }
      else
      {
        uint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew()(v86);
        *(void *)(v85 + 8) = v86;
        if (v79 < 0)
        {
LABEL_78:
          __break(1u);
          return;
        }
      }
      if (v86[2] <= v79) {
        goto LABEL_88;
      }
      char v88 = &v86[8 * (uint64_t)v79];
      uint64_t v91 = v88[4];
      char v89 = v88 + 4;
      uint64_t v90 = v91;
      swift_release();
      if ((~v91 & 0x7FF0000000000000) == 0 && (v90 & 0xFFFFFFFFFFFFFLL) != 0) {
        ++*(void *)(v85 + 16);
      }
      double v92 = v73 + v80;
      *(double *)char v89 = v82;
      *((double *)v89 + 1) = v92;
      v89[2] = v75;
      v89[3] = v76;
      *((double *)v89 + 4) = v77;
      *(_OWORD *)(v89 + 5) = recta;
      v89[7] = v78;
      unsigned __int8 v24 = v96;
      if (v96 == *(unsigned __int8 *)(v85 + 56))
      {
        swift_retain();
      }
      else
      {
        double v66 = *(double *)(v85 + 24);
        CGFloat v67 = *(double *)(v85 + 32);
        CGFloat v68 = *(double *)(v85 + 40);
        CGFloat v69 = *(double *)(v85 + 48);
        swift_retain();
        v110.origin.double x = v66;
        v110.origin.CGFloat y = v67;
        v110.size.double width = v68;
        v110.size.CGFloat height = v69;
        double v70 = CGRectGetMaxX(v110);
        v111.origin.double x = v82;
        v111.origin.CGFloat y = v92;
        v111.size.double width = v77;
        *(void *)&v111.size.CGFloat height = recta;
        *(double *)char v89 = v70 - (CGRectGetMaxX(v111) - v66);
      }
      double MinX = v97;
      swift_release_n();
      v65 += 12;
      v63 += 120;
      ++v62;
      v64 -= 120;
    }
    while (v64);
LABEL_80:
    swift_bridgeObjectRelease();
  }
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<StackLayout.Child>, (uint64_t)&type metadata for StackLayout.Child, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 120);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[15 * v8 + 4]) {
          memmove(v12, a4 + 4, 120 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewOutputs>, (uint64_t)&type metadata for _ViewOutputs, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(id: DynamicContainerID, value: LayoutProxyAttributes)>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PreferenceValues.Entry>, (uint64_t)&type metadata for PreferenceValues.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DynamicPropertyCache.TaggedFields>, (uint64_t)&type metadata for DynamicPropertyCache.TaggedFields, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DynamicPropertyCache.Field>, (uint64_t)&type metadata for DynamicPropertyCache.Field, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.ViewUpdater.Model.Clip>, (uint64_t)&type metadata for DisplayList.ViewUpdater.Model.Clip, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4]) {
          memmove(v12, a4 + 4, 96 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 120);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[15 * v8 + 4]) {
          memmove(v12, a4 + 4, 120 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<HostPreferencesCombiner.Child>, (uint64_t)&type metadata for HostPreferencesCombiner.Child, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PreferenceBridge.BridgedPreference>, (uint64_t)&type metadata for PreferenceBridge.BridgedPreference, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ShapeStyle_Pack.Style>, (uint64_t)&type metadata for _ShapeStyle_Pack.Style, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4]) {
          memmove(v12, a4 + 4, 112 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<LayoutProxyAttributes>, (uint64_t)&type metadata for LayoutProxyAttributes, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AsyncTransaction>, (uint64_t)&type metadata for AsyncTransaction, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.ViewUpdater.ViewCache.PendingAsyncValue>, (uint64_t)&type metadata for DisplayList.ViewUpdater.ViewCache.PendingAsyncValue, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ShapeStyle_InterpolatorGroup.Layer>, (uint64_t)&type metadata for _ShapeStyle_InterpolatorGroup.Layer, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 224);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[28 * v8 + 4]) {
          memmove(v12, a4 + 4, 224 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SectionAccumulator.Item>, (uint64_t)&type metadata for SectionAccumulator.Item, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 136);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[17 * v8 + 4]) {
          memmove(v12, a4 + 4, 136 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CanvasSymbols.Child>, (uint64_t)&type metadata for CanvasSymbols.Child, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(PreferenceKey.Type, AGAttribute)>, (uint64_t (*)(uint64_t))type metadata accessor for (PreferenceKey.Type, AGAttribute), MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedStyledText.TextLayoutManager.Cache.Entry>, (uint64_t)&type metadata for ResolvedStyledText.TextLayoutManager.Cache.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4]) {
          memmove(v12, a4 + 4, 88 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TextSizeCache.Entry>, (uint64_t)&type metadata for TextSizeCache.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4]) {
          memmove(v12, a4 + 4, 88 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, RBDisplayListContents)>, (uint64_t (*)(uint64_t))type metadata accessor for (Int, RBDisplayListContents), MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Line>, (uint64_t)&type metadata for Text.Layout.Line, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4]) {
          memmove(v12, a4 + 4, 112 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<WeakAttribute<_DisplayList_StableIdentityScope>>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<AnimatorState<Double>.Fork>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<Double>.Entry>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.InterpolatorLayer.Removed>, (uint64_t)&type metadata for DisplayList.InterpolatorLayer.Removed, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4]) {
          memmove(v12, a4 + 4, 112 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<AnimatorState<CGFloat>.Fork>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<CGFloat>.Entry>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Fork, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4]) {
          memmove(v12, a4 + 4, 88 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Fork, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.LayoutKey.AnchoredLayout>, (uint64_t)&type metadata for Text.LayoutKey.AnchoredLayout, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollGeometryState>, (uint64_t)&type metadata for ScrollGeometryState, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 95;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 7);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 7);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollPhaseState>, (uint64_t)&type metadata for ScrollPhaseState, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Substring>, MEMORY[0x263F8D980], MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(AGSubgraphRef, Int)>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(Float, Float)>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MeshGradient.BezierPoint>, (uint64_t)&type metadata for MeshGradient.BezierPoint, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<SIMD2<Float>>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Color.Resolved>, (uint64_t)&type metadata for Color.Resolved, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<ObjectCache<Font.Resolved, CTFontRef>.Item>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(proposal: _ProposedSize, value: TextSizeVariant)>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(views: _ViewList_ID_Views, endOffset: Int)>, (uint64_t (*)(uint64_t))type metadata accessor for (views: _ViewList_ID_Views, endOffset: Int), MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollableCollectionSubview>, (uint64_t)&type metadata for ScrollableCollectionSubview, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4]) {
          memmove(v12, a4 + 4, 88 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NSCalendarUnit>, (uint64_t (*)(uint64_t))type metadata accessor for NSCalendarUnit, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CodableAttributedString.Range>, (uint64_t)&type metadata for CodableAttributedString.Range, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ViewGeometry>, (uint64_t)&type metadata for ViewGeometry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Chunk>, (uint64_t)&type metadata for Text.Effect.Chunk, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Timing.GlyphTiming>, (uint64_t)&type metadata for Text.Effect.Timing.GlyphTiming, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Timing.GlyphInfo>, (uint64_t)&type metadata for Text.Effect.Timing.GlyphInfo, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Timing.Fragment>, (uint64_t)&type metadata for Text.Effect.Timing.Fragment, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGFloat>, MEMORY[0x263F8EF38], MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.StopMarkerCollection.Segment>, (uint64_t)&type metadata for Text.Effect.StopMarkerCollection.Segment, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.StopMarkerCollector.Segment.Element>, (uint64_t)&type metadata for Text.Effect.StopMarkerCollector.Segment.Element, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.RunSlice>, (uint64_t)&type metadata for Text.Layout.RunSlice, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.PathInterpolator.SmoothPathGlyph>, (uint64_t)&type metadata for Text.Effect.PathInterpolator.SmoothPathGlyph, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4]) {
          memmove(v12, a4 + 4, 112 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.PathInterpolator.Cluster>, (uint64_t)&type metadata for Text.Effect.PathInterpolator.Cluster, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>, (uint64_t)&type metadata for Text.Effect.Drawable.Fragment, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.DisplayInfo.DrawOperation>, (uint64_t)&type metadata for Text.Effect.DisplayInfo.DrawOperation, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 216);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[27 * v8 + 4]) {
          memmove(v12, a4 + 4, 216 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GraphicsContext.ResolvedShading>, (uint64_t)&type metadata for GraphicsContext.ResolvedShading, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 160);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[20 * v8 + 4]) {
          memmove(v12, a4 + 4, 160 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<EventID>, (uint64_t)&type metadata for EventID, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewDebug.Data.SerializedProperty>, (uint64_t)&type metadata for _ViewDebug.Data.SerializedProperty, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 104);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[13 * v8 + 4]) {
          memmove(v12, a4 + 4, 104 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<RawTextLayout.Fragment>, (uint64_t)&type metadata for RawTextLayout.Fragment, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Markers.Marker>, (uint64_t)&type metadata for Text.Effect.Markers.Marker, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<ClosedRange<CGFloat>>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.MarkerLayoutInfo.Element>, (uint64_t)&type metadata for Text.Effect.MarkerLayoutInfo.Element, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4]) {
          memmove(v12, a4 + 4, 96 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Decorations.Segment>, (uint64_t)&type metadata for Text.Layout.Decorations.Segment, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.ResolvedDrawing.Operation>, (uint64_t)&type metadata for Text.Effect.ResolvedDrawing.Operation, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[18 * v8 + 4]) {
          memmove(v12, a4 + 4, 144 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Cluster>, (uint64_t)&type metadata for Text.Layout.Cluster, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.InteractionMetrics.Element>, (uint64_t)&type metadata for Text.Effect.InteractionMetrics.Element, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4]) {
          memmove(v12, a4 + 4, 96 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<TextRenderLayer.SegmentLayer>, (uint64_t)&type metadata for TextRenderLayer.SegmentLayer, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Composition.Run>, (uint64_t)&type metadata for Text.Effect.Composition.Run, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4]) {
          memmove(v12, a4 + 4, 88 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.DelayFunction.Element>, (uint64_t)&type metadata for Text.Effect.DelayFunction.Element, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<Range<Text.Layout.CharacterIndex>>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Stop>, (uint64_t)&type metadata for Text.Effect.Stop, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4]) {
          memmove(v12, a4 + 4, 88 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.StopCollector.Segment.Element>, (uint64_t)&type metadata for Text.Effect.StopCollector.Segment.Element, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4]) {
          memmove(v12, a4 + 4, 96 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(StrongHash, DisplayList)>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4, (uint64_t)&lazy cache variable for type metadata for (StrongHash, DisplayList), (uint64_t)&type metadata for StrongHash, (uint64_t)&type metadata for DisplayList, (void (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (Path, FillStyle));
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(ContentShapeKinds, AnyShape)>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Timing.Chunk.Fragment>, (uint64_t)&type metadata for Text.Effect.Timing.Chunk.Fragment, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Double>, MEMORY[0x263F8D538], MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_SymbolEffect.Added>, (uint64_t)&type metadata for _SymbolEffect.Added, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry>, (uint64_t (*)(uint64_t))type metadata accessor for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[10 * v8 + 4]) {
          memmove(v12, a4 + 4, 80 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>>, (uint64_t (*)(uint64_t))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.ClusterTransformMap.Element>, (uint64_t)&type metadata for Text.Effect.ClusterTransformMap.Element, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.SubcomponentKeyPath>, (uint64_t)&type metadata for Text.Effect.SubcomponentKeyPath, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[18 * v8 + 4]) {
          memmove(v12, a4 + 4, 144 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<LayoutGestureBox.Child>, (uint64_t)&type metadata for LayoutGestureBox.Child, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 208);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[26 * v8 + 4]) {
          memmove(v12, a4 + 4, 208 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(offset: Int, element: _ShapeStyle_Pack.Style)>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 120);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[15 * v8 + 4]) {
          memmove(v12, a4 + 4, 120 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(range: _NSRange, attributes: [NSAttributedStringKey : Any])>, (uint64_t (*)(uint64_t))type metadata accessor for (range: _NSRange, attributes: [NSAttributedStringKey : Any]), MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvableTextSegmentAttribute.Value.Run>, (uint64_t)&type metadata for ResolvableTextSegmentAttribute.Value.Run, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID>, (uint64_t)&type metadata for _ViewList_ID, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(ScrapeableContent, Int)>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SummaryPlacement>, (uint64_t)&type metadata for SummaryPlacement, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<(StrongHash, DisplayList.Version)>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<GlobalTransaction>, (uint64_t)&type metadata for GlobalTransaction, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityActivationPoint>, (uint64_t)&type metadata for AccessibilityActivationPoint, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<_ResolvedKeyframes<Double>.Track>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<_ResolvedKeyframeTrackContent<Double>.Segment>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<Path?>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4, (uint64_t)&lazy cache variable for type metadata for Path?, (uint64_t)&type metadata for Path, MEMORY[0x263F8D8F0], (void (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Decorations.Fragment>, (uint64_t)&type metadata for Text.Layout.Decorations.Fragment, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>, MEMORY[0x263F8DB68], MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewDebug.Data.SerializedAttribute>, (uint64_t)&type metadata for _ViewDebug.Data.SerializedAttribute, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4]) {
          memmove(v12, a4 + 4, 96 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.DisplayInfo>, (uint64_t)&type metadata for Text.Effect.DisplayInfo, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 95;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 7);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 7);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SectionAccumulator.RowIDs.Chunk>, (uint64_t)&type metadata for SectionAccumulator.RowIDs.Chunk, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<ViewRendererHost>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, CGFloat>>.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<CGFloat, CGFloat>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<CGFloat, CGFloat>>.Fork, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Fork, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Fork, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Fork, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Fork, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<ResolvedGradientVector>.Entry>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<AnimatorState<ResolvedGradientVector>.Fork>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Fork, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4]) {
          memmove(v12, a4 + 4, 112 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 95;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 7);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 7);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>.Entry>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4]) {
          memmove(v12, a4 + 4, 96 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.Fill.AnimatableData>.Fork>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4]) {
          memmove(v12, a4 + 4, 112 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Entry>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<AnimatorState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Fork>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Fork, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[10 * v8 + 4]) {
          memmove(v12, a4 + 4, 80 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Fork, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Entry>, (uint64_t (*)(uint64_t))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Entry, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<CombinedAnimationState<_AnyAnimatableData>.Entry>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<AnimatorState<_AnyAnimatableData>.Fork>();
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t initializeWithCopy for Image.Resolved(uint64_t a1, uint64_t *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 8);
  if (v4 == 255)
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  }
  else
  {
    uint64_t v5 = *a2;
    outlined copy of GraphicsImage.Contents((id)*a2, *((unsigned char *)a2 + 8));
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 16) = a2[2];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)((char *)a2 + 44);
  *(unsigned char *)(a1 + 60) = *((unsigned char *)a2 + 60);
  long long v6 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 80) = v6;
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(unsigned char *)(a1 + 98) = *((unsigned char *)a2 + 98);
  unint64_t v7 = a2[15];
  *(unsigned char *)(a1 + 99) = *((unsigned char *)a2 + 99);
  if (v7 >> 1 == 0xFFFFFFFF)
  {
    long long v8 = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(a1 + 120) = v8;
  }
  else
  {
    uint64_t v9 = a2[13];
    uint64_t v10 = a2[14];
    uint64_t v11 = a2[16];
    outlined copy of AccessibilityImageLabel(v9, v10, v7);
    *(void *)(a1 + 104) = v9;
    *(void *)(a1 + 112) = v10;
    *(void *)(a1 + 120) = v7;
    *(void *)(a1 + 128) = v11;
  }
  uint64_t v12 = a2[18];
  *(void *)(a1 + 136) = a2[17];
  *(void *)(a1 + 144) = v12;
  *(_WORD *)(a1 + 152) = *((_WORD *)a2 + 76);
  *(_DWORD *)(a1 + 156) = *((_DWORD *)a2 + 39);
  *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
  uint64_t v13 = (void *)a2[21];
  *(void *)(a1 + 168) = v13;
  *(_WORD *)(a1 + 176) = *((_WORD *)a2 + 88);
  *(unsigned char *)(a1 + 178) = *((unsigned char *)a2 + 178);
  swift_unknownObjectRetain();
  swift_retain();
  id v14 = v13;
  return a1;
}