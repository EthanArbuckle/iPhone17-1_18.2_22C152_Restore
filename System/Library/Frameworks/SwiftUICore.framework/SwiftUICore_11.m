double protocol witness for static View._makeView(view:inputs:) in conformance Ellipse._Inset@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3;
  long long v4;
  long long v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Ellipse._Inset@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance Circle._Inset@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Circle._Inset@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance ContainerRelativeShape@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ContainerRelativeShape@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance ContainerRelativeShape._Inset@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ContainerRelativeShape._Inset@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance MeshGradient@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

void protocol witness for static View._makeView(view:inputs:) in conformance Never(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  v5[2] = *(_OWORD *)(a2 + 32);
  v5[3] = v3;
  v5[4] = *(_OWORD *)(a2 + 64);
  int v6 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v4;
  specialized static View.makeView(view:inputs:)(v2, (uint64_t)v5);
}

void protocol witness for static View._makeViewList(view:inputs:) in conformance Never(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  v5[2] = *(_OWORD *)(a2 + 32);
  v5[3] = v3;
  v5[4] = *(_OWORD *)(a2 + 64);
  char v6 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v4;
  specialized static View.makeViewList(view:inputs:)(v2, (uint64_t)v5);
}

double protocol witness for static View._makeView(view:inputs:) in conformance _TestApp.RootView@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _TestApp.RootView@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t getEnumTagSinglePayload for ViewValuePredicate(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ViewValuePredicate(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x245C7B4A4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ViewValuePredicate()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for ViewStatePredicate()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ViewStatePredicate(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  size_t v9 = ((v8 + 16) & ~v8) + *(void *)(v6 + 64);
  if (v8 <= 7 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0 && v9 <= 0x18)
  {
    uint64_t v13 = ~v8;
    unsigned int v14 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v14 + v8 + 8) & v13))
      {
LABEL_14:
        memcpy(__dst, __src, v9);
        return __dst;
      }
    }
    else
    {
      uint64_t v15 = *v14;
      if ((unint64_t)*v14 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      if (v15 != -1) {
        goto LABEL_14;
      }
    }
    *__dst = *__src;
    int v16 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v16 = *v14;
    uint64_t v17 = ((unint64_t)v16 + v8 + 8) & v13;
    v18 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v18(v17, ((unint64_t)v14 + v8 + 8) & v13, v5);
    return __dst;
  }
  uint64_t v12 = *__src;
  *__dst = *__src;
  __dst = (void *)(v12 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
  swift_retain();
  return __dst;
}

uint64_t destroy for ViewStatePredicate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = ~v4;
  uint64_t v6 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = v3;
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
  {
    uint64_t result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)v6 + v4 + 8) & v5);
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v7 = *v6;
  if ((unint64_t)*v6 >= 0xFFFFFFFF) {
    LODWORD(v7) = -1;
  }
  uint64_t result = (v7 + 1);
  if (v7 == -1)
  {
LABEL_7:
    swift_release();
    swift_release();
    size_t v9 = *(uint64_t (**)(unint64_t, uint64_t))(v10 + 8);
    return v9(((unint64_t)v6 + v4 + 8) & v5, v2);
  }
  return result;
}

void *initializeWithCopy for ViewStatePredicate(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0)
  {
    uint64_t v11 = *v10;
    if ((unint64_t)*v10 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    if (v11 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *__dst = *__src;
    uint64_t v12 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v10;
    uint64_t v13 = ((unint64_t)v12 + v7 + 8) & v8;
    unsigned int v14 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v14(v13, ((unint64_t)v10 + v7 + 8) & v8, v5);
    return __dst;
  }
  if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v10 + v7 + 8) & v8)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(__dst, __src, ((v7 + 16) & ~v7) + v9);
  return __dst;
}

void *assignWithCopy for ViewStatePredicate(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = *(void *)(v6 + 64);
  size_t v11 = ((v8 + 16) & ~v8) + v10;
  uint64_t v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
  {
    uint64_t v16 = ((unint64_t)v12 + v8 + 8) & v9;
    size_t v21 = ((v8 + 16) & ~v8) + v10;
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    int v20 = v17(v16, v7, v5);
    uint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v3 = a2;
    int v15 = v17(((unint64_t)v13 + v8 + 8) & ~v8, v7, v5);
    uint64_t v9 = ~v8;
    size_t v11 = v21;
    uint64_t v4 = a1;
    if (!v20)
    {
LABEL_5:
      if (!v15)
      {
        *uint64_t v4 = *v3;
        swift_retain();
        swift_release();
        *uint64_t v12 = *v13;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(((unint64_t)v12 + v8 + 8) & v9, ((unint64_t)v13 + v8 + 8) & v9, v5);
        return v4;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v12 + v8 + 8) & v9, v5);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = *v13;
    if (*v13 >= 0xFFFFFFFFuLL) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 + 1;
    if (*v12 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v15)
  {
    *uint64_t v4 = *v3;
    *uint64_t v12 = *v13;
    v18 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v18(((unint64_t)v12 + v8 + 8) & v9, ((unint64_t)v13 + v8 + 8) & v9, v5);
    return v4;
  }
LABEL_9:
  memcpy(v4, v3, v11);
  return v4;
}

void *initializeWithTake for ViewStatePredicate(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0)
  {
    uint64_t v11 = *v10;
    if ((unint64_t)*v10 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    if (v11 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *__dst = *__src;
    uint64_t v12 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v10;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v12 + v7 + 8) & v8, ((unint64_t)v10 + v7 + 8) & v8, v5);
    return __dst;
  }
  if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v10 + v7 + 8) & v8)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(__dst, __src, ((v7 + 16) & ~v7) + v9);
  return __dst;
}

void *assignWithTake for ViewStatePredicate(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ~v8;
  size_t v10 = ((v8 + 16) & ~v8) + *(void *)(v6 + 64);
  uint64_t v11 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
  {
    uint64_t v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    int v18 = v16(((unint64_t)v11 + v8 + 8) & ~v8, v7, v5);
    uint64_t v12 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v9 = ~v8;
    int v14 = v16(((unint64_t)v12 + v8 + 8) & ~v8, v7, v5);
    uint64_t v3 = a2;
    uint64_t v4 = a1;
    if (!v18)
    {
LABEL_5:
      if (!v14)
      {
        *uint64_t v4 = *v3;
        swift_release();
        *uint64_t v11 = *v12;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(((unint64_t)v11 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v5);
        return v4;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v11 + v8 + 8) & v9, v5);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL) {
      LODWORD(v13) = -1;
    }
    int v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v14)
  {
    *uint64_t v4 = *v3;
    *uint64_t v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v11 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v5);
    return v4;
  }
LABEL_9:
  memcpy(v4, v3, v10);
  return v4;
}

uint64_t getEnumTagSinglePayload for ViewStatePredicate(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 - 1 >= a2) {
    goto LABEL_25;
  }
  uint64_t v8 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 > 3) {
    goto LABEL_7;
  }
  unsigned int v12 = (((1 << v9) + a2 - v7) >> v9) + 1;
  if (HIWORD(v12))
  {
    int v10 = *(_DWORD *)((char *)a1 + v8);
    if (v10) {
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v16 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      unsigned int v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v16 + v6 + 8) & ~v6);
    }
    else
    {
      unint64_t v17 = *v16;
      if (v17 >= 0xFFFFFFFF) {
        LODWORD(v17) = -1;
      }
      unsigned int v18 = v17 + 1;
    }
    if (v18 >= 2) {
      return v18 - 1;
    }
    else {
      return 0;
    }
  }
  if (v12 > 0xFF)
  {
    int v10 = *(unsigned __int16 *)((char *)a1 + v8);
    if (*(unsigned __int16 *)((char *)a1 + v8)) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v12 < 2) {
    goto LABEL_25;
  }
LABEL_7:
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_25;
  }
LABEL_15:
  int v13 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v13 = 0;
  }
  if (v8)
  {
    if (v8 <= 3) {
      int v14 = ((v6 + 16) & ~v6) + *(_DWORD *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
    }
    else {
      int v14 = 4;
    }
    switch(v14)
    {
      case 2:
        int v15 = *a1;
        break;
      case 3:
        int v15 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v15 = *(_DWORD *)a1;
        break;
      default:
        int v15 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v15 = 0;
  }
  return (v15 | v13) + v7;
}

void storeEnumTagSinglePayload for ViewStatePredicate(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  size_t v11 = ((v10 + 16) & ~v10) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  if (v8 - 1 >= a3)
  {
    int v12 = 0;
LABEL_13:
    if (v9 >= a2) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v12 = 1;
  if (v11 > 3) {
    goto LABEL_13;
  }
  unsigned int v13 = (((1 << (8 * v11)) + a3 - v8) >> (8 * v11)) + 1;
  if (HIWORD(v13))
  {
    int v12 = 4;
    if (v9 >= a2) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v13 >= 0x100) {
      int v12 = 2;
    }
    else {
      int v12 = v13 > 1;
    }
    if (v9 >= a2)
    {
LABEL_21:
      switch(v12)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 3:
          goto LABEL_57;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_25;
        default:
LABEL_25:
          if (a2)
          {
LABEL_26:
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                int v20 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  v22 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v23 = a2 + 1;
                  v22(((unint64_t)v20 + v10 + 8) & ~v10, v23);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v21 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v21 = a2;
                  }
                  *int v20 = v21;
                }
              }
            }
            else
            {
              if (v11 <= 3) {
                int v17 = ~(-1 << (8 * v11));
              }
              else {
                int v17 = -1;
              }
              if (v11)
              {
                int v18 = v17 & (a2 - v8);
                if (v11 <= 3) {
                  int v19 = v11;
                }
                else {
                  int v19 = 4;
                }
                bzero(a1, v11);
                switch(v19)
                {
                  case 2:
                    *(_WORD *)a1 = v18;
                    break;
                  case 3:
                    *(_WORD *)a1 = v18;
                    a1[2] = BYTE2(v18);
                    break;
                  case 4:
                    *(_DWORD *)a1 = v18;
                    break;
                  default:
                    *a1 = v18;
                    break;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
LABEL_14:
  unsigned int v14 = a2 - v8;
  if (v11 < 4)
  {
    int v15 = (v14 >> (8 * v11)) + 1;
    if (v11)
    {
      int v16 = v14 & ~(-1 << (8 * v11));
      bzero(a1, v11);
      if (v11 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }
      else if (v11 == 2)
      {
        *(_WORD *)a1 = v16;
      }
      else
      {
        *a1 = v16;
      }
    }
  }
  else
  {
    bzero(a1, v11);
    *(_DWORD *)a1 = v14;
    int v15 = 1;
  }
  switch(v12)
  {
    case 1:
      a1[v11] = v15;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v15;
      break;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x245C7C430);
    case 4:
      *(_DWORD *)&a1[v11] = v15;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for ViewStatePredicate()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static _SymbolEffect.BreatheConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static _SymbolEffect.RotateConfiguration.== infix(_:_:)(a1, a2) & 1;
}

uint64_t static _SymbolEffect.BounceConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static _SymbolEffect.RotateConfiguration.== infix(_:_:)(a1, a2) & 1;
}

uint64_t static _SymbolEffect.RotateConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static _SymbolEffect.RotateConfiguration.== infix(_:_:)(a1, a2) & 1;
}

uint64_t static _SymbolEffect.ScaleConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2) {
    return (*(unsigned __int8 *)(a2 + 4) ^ *(unsigned __int8 *)(a1 + 4) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

BOOL static _SymbolEffect.HiddenConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return ((*(_DWORD *)a1 != *(_DWORD *)a2) | ((*(unsigned char *)(a1 + 4) ^ *(unsigned char *)(a2 + 4)) | (*(unsigned char *)(a2 + 5) ^ *(unsigned char *)(a1 + 5))) & 1) == 0;
}

uint64_t _SymbolEffect.Trigger.activates(after:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((~*a1 & 0xF000000000000006) == 0) {
    goto LABEL_11;
  }
  uint64_t v3 = *v1;
  if (v2 < 0)
  {
    if (v3 < 0)
    {
      outlined consume of _SymbolEffect.Trigger(*a1);
      outlined consume of _SymbolEffect.Trigger(v3);
      char v6 = ((v2 & 1) == 0) & v3;
      return v6 & 1;
    }
    swift_retain();
    goto LABEL_10;
  }
  if (v3 < 0)
  {
    outlined copy of _SymbolEffect.Trigger(*a1);
LABEL_10:
    outlined consume of _SymbolEffect.Trigger(v2);
    outlined consume of _SymbolEffect.Trigger(v3);
LABEL_11:
    char v6 = 0;
    return v6 & 1;
  }
  if (v2 == v3)
  {
    outlined copy of _SymbolEffect.Trigger(*v1);
    outlined copy of _SymbolEffect.Trigger?(v2);
    goto LABEL_10;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 80);
  outlined copy of _SymbolEffect.Trigger(*v1);
  outlined copy of _SymbolEffect.Trigger?(v2);
  outlined copy of _SymbolEffect.Trigger?(v2);
  outlined copy of _SymbolEffect.Trigger(v3);
  char v5 = v4(v3);
  outlined consume of _SymbolEffect.Trigger(v2);
  outlined consume of _SymbolEffect.Trigger(v3);
  outlined consume of _SymbolEffect.Trigger(v3);
  outlined consume of _SymbolEffect.Trigger?(v2);
  char v6 = v5 ^ 1;
  return v6 & 1;
}

float _SymbolEffect.Options.speed.getter()
{
  return *(float *)v0;
}

void _SymbolEffect.Options.speed.setter(float a1)
{
  *unint64_t v1 = a1;
}

uint64_t (*_SymbolEffect.Options.speed.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unint64_t _SymbolEffect.Options.repeatCount.getter()
{
  return *(unsigned int *)(v0 + 4) | ((unint64_t)*(unsigned __int8 *)(v0 + 8) << 32);
}

uint64_t _SymbolEffect.Options.repeatCount.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  *(unsigned char *)(v1 + 8) = BYTE4(result) & 1;
  return result;
}

uint64_t (*_SymbolEffect.Options.repeatCount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unint64_t _SymbolEffect.Options.repeatDelay.getter()
{
  return *(unsigned int *)(v0 + 12) | ((unint64_t)*(unsigned __int8 *)(v0 + 16) << 32);
}

uint64_t _SymbolEffect.Options.repeatDelay.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 12) = result;
  *(unsigned char *)(v1 + 16) = BYTE4(result) & 1;
  return result;
}

uint64_t (*_SymbolEffect.Options.repeatDelay.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void __swiftcall _SymbolEffect.Options.init()(SwiftUI::_SymbolEffect::Options *__return_ptr retstr)
{
  *(void *)&retstr->speed = 1065353216;
  retstr->repeatCount.is_nil = 1;
  retstr->repeatDelay.value = 0.0;
  retstr->repeatDelay.is_nil = 1;
}

uint64_t _SymbolEffect.storage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  unsigned __int16 v5 = *(_WORD *)(v1 + 24);
  *(_WORD *)(a1 + 24) = v5;
  return outlined copy of _SymbolEffect.Storage(v2, v3, v4, v5);
}

__n128 _SymbolEffect.storage.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int16 v3 = a1[1].n128_u16[4];
  outlined consume of _SymbolEffect.Storage(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(_WORD *)(v1 + 24));
  __n128 result = v5;
  *(__n128 *)uint64_t v1 = v5;
  *(void *)(v1 + 16) = v2;
  *(_WORD *)(v1 + 24) = v3;
  return result;
}

uint64_t (*_SymbolEffect.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float _SymbolEffect.options.getter@<S0>(uint64_t a1@<X8>)
{
  float result = *(float *)(v1 + 28);
  int v3 = *(_DWORD *)(v1 + 32);
  char v4 = *(unsigned char *)(v1 + 36);
  int v5 = *(_DWORD *)(v1 + 40);
  char v6 = *(unsigned char *)(v1 + 44);
  *(float *)a1 = result;
  *(_DWORD *)(a1 + 4) = v3;
  *(unsigned char *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  return result;
}

float _SymbolEffect.options.setter(uint64_t a1)
{
  float result = *(float *)a1;
  int v3 = *(_DWORD *)(a1 + 4);
  char v4 = *(unsigned char *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 12);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_DWORD *)(v1 + 28) = *(_DWORD *)a1;
  *(_DWORD *)(v1 + 32) = v3;
  *(unsigned char *)(v1 + 36) = v4;
  *(_DWORD *)(v1 + 40) = v5;
  *(unsigned char *)(v1 + 44) = v6;
  return result;
}

uint64_t (*_SymbolEffect.options.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float _SymbolEffect.init(_:options:)@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  __int16 v4 = *(_WORD *)(a1 + 24);
  float result = *(float *)a2;
  int v6 = *(_DWORD *)(a2 + 4);
  char v7 = *(unsigned char *)(a2 + 8);
  int v8 = *(_DWORD *)(a2 + 12);
  char v9 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(void *)(a3 + 16) = v3;
  *(_WORD *)(a3 + 24) = v4;
  *(float *)(a3 + 28) = result;
  *(_DWORD *)(a3 + 32) = v6;
  *(unsigned char *)(a3 + 36) = v7;
  *(_DWORD *)(a3 + 40) = v8;
  *(unsigned char *)(a3 + 44) = v9;
  return result;
}

uint64_t _SymbolEffect.PulseConfiguration.trigger.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  *a1 = *v1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

uint64_t _SymbolEffect.PulseConfiguration.trigger.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = outlined consume of _SymbolEffect.Trigger?(*v1);
  *uint64_t v1 = v2;
  return result;
}

uint64_t (*_SymbolEffect.PulseConfiguration.trigger.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.PulseConfiguration.layered.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t _SymbolEffect.PulseConfiguration.layered.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*_SymbolEffect.PulseConfiguration.layered.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _SymbolEffect.PulseConfiguration.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xF000000000000006;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t (*_SymbolEffect.BreatheConfiguration.trigger.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_SymbolEffect.BreatheConfiguration.flags.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_SymbolEffect.BreatheConfiguration.layered.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.BounceConfiguration.trigger.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  *a1 = *v1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

uint64_t _SymbolEffect.BounceConfiguration.trigger.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = outlined consume of _SymbolEffect.Trigger?(*v1);
  *uint64_t v1 = v2;
  return result;
}

uint64_t (*_SymbolEffect.BounceConfiguration.trigger.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.BounceConfiguration.flags.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t _SymbolEffect.BounceConfiguration.flags.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_SymbolEffect.BounceConfiguration.flags.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.BounceConfiguration.layered.getter()
{
  return *(unsigned __int8 *)(v0 + 12);
}

uint64_t _SymbolEffect.BounceConfiguration.layered.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 12) = result;
  return result;
}

uint64_t (*_SymbolEffect.BounceConfiguration.layered.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _SymbolEffect.BounceConfiguration.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xF000000000000006;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 1;
}

uint64_t _SymbolEffect.WiggleConfiguration.trigger.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  *a1 = *v1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

uint64_t _SymbolEffect.WiggleConfiguration.trigger.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = outlined consume of _SymbolEffect.Trigger?(*v1);
  *uint64_t v1 = v2;
  return result;
}

uint64_t (*_SymbolEffect.WiggleConfiguration.trigger.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.WiggleConfiguration.angle.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t _SymbolEffect.WiggleConfiguration.angle.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 8) = result;
  *(unsigned char *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*_SymbolEffect.WiggleConfiguration.angle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.WiggleConfiguration.flags.getter()
{
  return *(unsigned int *)(v0 + 20);
}

uint64_t _SymbolEffect.WiggleConfiguration.flags.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 20) = result;
  return result;
}

uint64_t (*_SymbolEffect.WiggleConfiguration.flags.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.WiggleConfiguration.layered.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t _SymbolEffect.WiggleConfiguration.layered.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result;
  return result;
}

uint64_t (*_SymbolEffect.WiggleConfiguration.layered.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.WiggleConfiguration.appliesRTL.getter()
{
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t _SymbolEffect.WiggleConfiguration.appliesRTL.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 25) = result;
  return result;
}

uint64_t (*_SymbolEffect.WiggleConfiguration.appliesRTL.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _SymbolEffect.WiggleConfiguration.init()@<D0>(uint64_t a1@<X8>)
{
  double result = -3.10503618e231;
  *(_OWORD *)a1 = xmmword_2461D16D0;
  *(unsigned char *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = 0;
  *(_WORD *)(a1 + 24) = 1;
  return result;
}

uint64_t (*_SymbolEffect.RotateConfiguration.trigger.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_SymbolEffect.RotateConfiguration.flags.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_SymbolEffect.RotateConfiguration.layered.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.VariableColorConfiguration.trigger.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  *a1 = *v1;
  return outlined copy of _SymbolEffect.Trigger?(v2);
}

uint64_t _SymbolEffect.VariableColorConfiguration.trigger.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = outlined consume of _SymbolEffect.Trigger?(*v1);
  *uint64_t v1 = v2;
  return result;
}

uint64_t (*_SymbolEffect.VariableColorConfiguration.trigger.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.VariableColorConfiguration.flags.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t _SymbolEffect.VariableColorConfiguration.flags.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_SymbolEffect.VariableColorConfiguration.flags.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _SymbolEffect.VariableColorConfiguration.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xF000000000000006;
  *(_DWORD *)(a1 + 8) = 0;
}

uint64_t _SymbolEffect.ScaleConfiguration.level.getter()
{
  return *v0;
}

uint64_t _SymbolEffect.ScaleConfiguration.level.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_SymbolEffect.ScaleConfiguration.level.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.ScaleConfiguration.layered.getter()
{
  return *(unsigned __int8 *)(v0 + 4);
}

uint64_t _SymbolEffect.ScaleConfiguration.layered.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 4) = result;
  return result;
}

uint64_t (*_SymbolEffect.ScaleConfiguration.layered.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _SymbolEffect.ScaleConfiguration.init()(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _SymbolEffect.ScaleConfiguration(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2) {
    return (*(unsigned __int8 *)(a2 + 4) ^ *(unsigned __int8 *)(a1 + 4) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t _SymbolEffect.HiddenConfiguration.flags.getter()
{
  return *v0;
}

uint64_t _SymbolEffect.HiddenConfiguration.flags.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_SymbolEffect.HiddenConfiguration.flags.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.HiddenConfiguration.layered.getter()
{
  return *(unsigned __int8 *)(v0 + 4);
}

uint64_t _SymbolEffect.HiddenConfiguration.layered.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 4) = result;
  return result;
}

uint64_t (*_SymbolEffect.HiddenConfiguration.layered.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.HiddenConfiguration.isHidden.getter()
{
  return *(unsigned __int8 *)(v0 + 5);
}

uint64_t _SymbolEffect.HiddenConfiguration.isHidden.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 5) = result;
  return result;
}

uint64_t (*_SymbolEffect.HiddenConfiguration.isHidden.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _SymbolEffect.HiddenConfiguration.init()(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_WORD *)(a1 + 4) = 1;
}

uint64_t _SymbolEffect.HiddenConfiguration.transitionFlags.getter()
{
  if ((v0[4] | ((*(_DWORD *)v0 & 0x10u) >> 4))) {
    return *(unsigned int *)v0;
  }
  else {
    return *(_DWORD *)v0 | 0x10u;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _SymbolEffect.HiddenConfiguration(uint64_t a1, uint64_t a2)
{
  return ((*(_DWORD *)a1 != *(_DWORD *)a2) | ((*(unsigned char *)(a1 + 4) ^ *(unsigned char *)(a2 + 4)) | (*(unsigned char *)(a2 + 5) ^ *(unsigned char *)(a1 + 5))) & 1) == 0;
}

uint64_t _SymbolEffect.ReplaceConfiguration.flags.getter()
{
  return *v0;
}

uint64_t _SymbolEffect.ReplaceConfiguration.flags.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_SymbolEffect.ReplaceConfiguration.flags.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.ReplaceConfiguration.layered.getter()
{
  return *(unsigned __int8 *)(v0 + 4);
}

uint64_t _SymbolEffect.ReplaceConfiguration.layered.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 4) = result;
  return result;
}

uint64_t (*_SymbolEffect.ReplaceConfiguration.layered.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float _SymbolEffect.ReplaceConfiguration.speed.getter()
{
  return *(float *)(v0 + 8);
}

void _SymbolEffect.ReplaceConfiguration.speed.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*_SymbolEffect.ReplaceConfiguration.speed.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _SymbolEffect.ReplaceConfiguration.init()(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 1;
  *(_DWORD *)(a1 + 8) = 1065353216;
}

uint64_t _SymbolEffect.ReplaceConfiguration.transitionFlags.getter()
{
  if ((v0[4] | ((*(_DWORD *)v0 & 0x10u) >> 4))) {
    return *(unsigned int *)v0;
  }
  else {
    return *(_DWORD *)v0 | 0x10u;
  }
}

BOOL static _SymbolEffect.ReplaceConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && ((*(unsigned __int8 *)(a1 + 4) ^ *(unsigned __int8 *)(a2 + 4)) & 1) == 0) {
    return *(float *)(a1 + 8) == *(float *)(a2 + 8);
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _SymbolEffect.ReplaceConfiguration(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && ((*(unsigned __int8 *)(a1 + 4) ^ *(unsigned __int8 *)(a2 + 4)) & 1) == 0) {
    return *(float *)(a1 + 8) == *(float *)(a2 + 8);
  }
  return result;
}

uint64_t _SymbolEffect.Identified.identifier.getter()
{
  return *(void *)v0;
}

uint64_t _SymbolEffect.Identified.identifier.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_SymbolEffect.Identified.identifier.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.Identified.serial.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t _SymbolEffect.Identified.serial.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*_SymbolEffect.Identified.serial.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SymbolEffect.Identified.effect.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  int v5 = *(_DWORD *)(v1 + 44);
  int v6 = *(_DWORD *)(v1 + 48);
  char v7 = *(unsigned char *)(v1 + 52);
  int v8 = *(_DWORD *)(v1 + 56);
  char v9 = *(unsigned char *)(v1 + 60);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  unsigned __int16 v10 = *(_WORD *)(v1 + 40);
  *(_WORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 28) = v5;
  *(_DWORD *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 44) = v9;
  return outlined copy of _SymbolEffect.Storage(v2, v3, v4, v10);
}

__n128 _SymbolEffect.Identified.effect.setter(__n128 *a1)
{
  __n128 v10 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int16 v3 = a1[1].n128_u16[4];
  unsigned __int32 v4 = a1[1].n128_u32[3];
  unsigned __int32 v5 = a1[2].n128_u32[0];
  unsigned __int8 v6 = a1[2].n128_u8[4];
  unsigned __int32 v7 = a1[2].n128_u32[2];
  unsigned __int8 v8 = a1[2].n128_u8[12];
  outlined consume of _SymbolEffect.Storage(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(_WORD *)(v1 + 40));
  __n128 result = v10;
  *(__n128 *)(v1 + 16) = v10;
  *(void *)(v1 + 32) = v2;
  *(_WORD *)(v1 + 40) = v3;
  *(_DWORD *)(v1 + 44) = v4;
  *(_DWORD *)(v1 + 48) = v5;
  *(unsigned char *)(v1 + 52) = v6;
  *(_DWORD *)(v1 + 56) = v7;
  *(unsigned char *)(v1 + 60) = v8;
  return result;
}

uint64_t (*_SymbolEffect.Identified.effect.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float _SymbolEffect.Identified.init(identifier:serial:effect:)@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)(a3 + 16);
  __int16 v5 = *(_WORD *)(a3 + 24);
  float result = *(float *)(a3 + 28);
  int v7 = *(_DWORD *)(a3 + 32);
  char v8 = *(unsigned char *)(a3 + 36);
  int v9 = *(_DWORD *)(a3 + 40);
  char v10 = *(unsigned char *)(a3 + 44);
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(_OWORD *)(a4 + 16) = *(_OWORD *)a3;
  *(void *)(a4 + 32) = v4;
  *(_WORD *)(a4 + 40) = v5;
  *(float *)(a4 + 44) = result;
  *(_DWORD *)(a4 + 48) = v7;
  *(unsigned char *)(a4 + 52) = v8;
  *(_DWORD *)(a4 + 56) = v9;
  *(unsigned char *)(a4 + 60) = v10;
  return result;
}

void _SymbolEffect.Phase.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 1;
  *(void *)(a1 + 16) = 1065353216;
  *(unsigned char *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = 0;
  *(_WORD *)(a1 + 40) = 1;
  *(void *)(a1 + 44) = 1065353216;
  *(unsigned char *)(a1 + 52) = 1;
  *(_DWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 60) = 257;
}

uint64_t *_SymbolEffect.applyLayoutDirection(from:)(uint64_t *result)
{
  unsigned __int16 v2 = *(_WORD *)(v1 + 24);
  if ((v2 & 0xF000) == 0x3000 && (*(_WORD *)(v1 + 24) & 0x100) != 0)
  {
    uint64_t v3 = v1;
    uint64_t v5 = *result;
    uint64_t v4 = result[1];
    uint64_t v7 = *(void *)v3;
    uint64_t v6 = *(void *)(v3 + 8);
    uint64_t v8 = *(void *)(v3 + 16);
    outlined copy of _SymbolEffect.Storage(*(void *)v3, v6, v8, v2);
    if (v4)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v5, &v15);
      swift_release_n();
      swift_release_n();
      char v9 = v15;
      float result = (uint64_t *)outlined consume of _SymbolEffect.Storage(v7, v6, v8, v2);
      if ((v9 & 1) == 0) {
        return result;
      }
    }
    else
    {
      uint64_t v10 = swift_retain_n();
      uint64_t v11 = specialized find<A>(_:key:)(v10);
      if (!v11)
      {
        swift_release_n();
        return (uint64_t *)outlined consume of _SymbolEffect.Storage(v7, v6, v8, v2);
      }
      int v12 = *(unsigned __int8 *)(v11 + 72);
      swift_release_n();
      float result = (uint64_t *)outlined consume of _SymbolEffect.Storage(v7, v6, v8, v2);
      if (v12 != 1) {
        return result;
      }
    }
    uint64_t v13 = HIDWORD(v8) & 0xFFFFFF0F;
    int v14 = BYTE4(v8) & 0xF0;
    if ((v8 & 0xF000000000) == 0) {
      goto LABEL_11;
    }
    if (v14 == 32)
    {
      uint64_t v13 = v13 | 0x10;
      goto LABEL_14;
    }
    if (v14 == 16) {
LABEL_11:
    }
      uint64_t v13 = v13 | 0x20;
LABEL_14:
    *(void *)uint64_t v3 = v7;
    *(void *)(v3 + 8) = v6;
    *(void *)(v3 + 16) = v8 & 1 | (v13 << 32);
    *(_WORD *)(v3 + 24) = v2 & 1 | 0x3000;
  }
  return result;
}

uint64_t EnvironmentValues.symbolEffects.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_bridgeObjectRetain();
    swift_release_n();
    return v5;
  }
}

uint64_t key path getter for EnvironmentValues.symbolEffects : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
    swift_bridgeObjectRetain();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t EnvironmentValues.symbolEffects.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

void (*EnvironmentValues.symbolEffects.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
    swift_bridgeObjectRetain();
  }
  swift_release_n();
  v3[5] = 0;
  *uint64_t v3 = v5;
  return EnvironmentValues.symbolEffects.modify;
}

void EnvironmentValues.symbolEffects.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (uint64_t *)(*a1)[4];
  uint64_t v5 = **a1;
  uint64_t v6 = *v4;
  swift_retain_n();
  swift_bridgeObjectRetain();
  if (a2)
  {
    swift_bridgeObjectRetain();
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      uint64_t v7 = *(void *)v3[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      uint64_t v8 = *(void *)v3[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v8);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
  }

  free(v3);
}

uint64_t EnvironmentValues.appendSymbolEffect(_:for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 36);
  int v9 = *(_DWORD *)(a1 + 40);
  char v10 = *(unsigned char *)(a1 + 44);
  unsigned __int16 v11 = *(_WORD *)(a1 + 24);
  uint64_t v34 = *(void *)a1;
  uint64_t v35 = v4;
  uint64_t v36 = v5;
  unsigned __int16 v37 = v11;
  int v38 = v6;
  int v39 = v7;
  char v40 = v8;
  int v41 = v9;
  char v42 = v10;
  uint64_t v12 = *v2;
  uint64_t v13 = v2[1];
  v33[0] = *v2;
  v33[1] = v13;
  outlined copy of _SymbolEffect.Storage(v34, v4, v5, v11);
  _SymbolEffect.applyLayoutDirection(from:)(v33);
  uint64_t v14 = v34;
  uint64_t v15 = v35;
  uint64_t v16 = v36;
  unsigned __int16 v17 = v37;
  int v18 = v38;
  char v29 = v40;
  int v30 = v39;
  char v27 = v42;
  int v28 = v41;
  uint64_t v32 = v36;
  if (v13)
  {
    outlined copy of _SymbolEffect.Storage(v34, v35, v36, v37);
    swift_retain_n();
    swift_retain_n();
    int v19 = (void *)specialized PropertyList.Tracker.value<A>(_:for:)(v12);
    swift_release_n();
  }
  else
  {
    swift_retain();
    outlined copy of _SymbolEffect.Storage(v14, v15, v16, v17);
    uint64_t v20 = swift_retain_n();
    int v19 = (void *)specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_bridgeObjectRetain();
  }
  swift_release_n();
  uint64_t v21 = v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
  }
  unint64_t v23 = v19[2];
  unint64_t v22 = v19[3];
  if (v23 >= v22 >> 1) {
    int v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v19);
  }
  v19[2] = v23 + 1;
  v24 = &v19[8 * v23];
  v24[4] = a2;
  v24[5] = 0;
  v24[6] = v21;
  v24[7] = v15;
  v24[8] = v32;
  *((_WORD *)v24 + 36) = v17;
  *((_DWORD *)v24 + 19) = v18;
  *((_DWORD *)v24 + 20) = v30;
  *((unsigned char *)v24 + 84) = v29;
  *((_DWORD *)v24 + 22) = v28;
  *((unsigned char *)v24 + 92) = v27;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v3, (uint64_t)v19);
  swift_bridgeObjectRelease();
  swift_release();
  if (v13)
  {
    uint64_t v25 = *v3;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v12, v25);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();
  return outlined consume of _SymbolEffect.Storage(v21, v15, v32, v17);
}

id RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 | a4)
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a3;
    *(void *)(v8 + 24) = a4;
    uint64_t v21 = partial apply for closure #1 in RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:);
    uint64_t v22 = v8;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    int v19 = thunk for @escaping @callee_guaranteed (@unowned Bool, @unowned UInt32) -> ();
    ObjectType = &block_descriptor_7;
    int v9 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    char v10 = (void *)*MEMORY[0x263F63990];
    ObjectType = (void *)swift_getObjectType();
    *(void *)&long long aBlock = v9;
    outlined init with take of Any(&aBlock, v17);
    id v11 = v10;
    _Block_copy(v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, v11, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease();
    _Block_release(v9);
  }
  type metadata accessor for RBSymbolAnimationOptionKey(0);
  lazy protocol witness table accessor for type RBSymbolAnimationOptionKey and conformance RBSymbolAnimationOptionKey();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v4, sel_addAnimation_options_, a1, isa);

  if (v14)
  {
    if (a3) {
      uint64_t v15 = (*(uint64_t (**)(void))(*(void *)a3 + 88))();
    }
    if (a4) {
      (*(void (**)(uint64_t))(*(void *)a4 + 88))(v15);
    }
  }
  return v14;
}

uint64_t closure #1 in RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  swift_retain();
  swift_retain();
  specialized static Update.begin()();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in closure #1 in RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:);
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = one-time initialization token for actions;
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  int v9 = static Update.actions;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  if (v11 >= v10 >> 1) {
    int v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v9);
  }
  v9[2] = v11 + 1;
  uint64_t v12 = &v9[2 * v11];
  v12[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v12[5] = v7;
  static Update.actions = v9;
  swift_bridgeObjectRelease();
  static Update.end()();

  return swift_release();
}

uint64_t closure #1 in closure #1 in RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(uint64_t result, uint64_t a2)
{
  if (result) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)result + 96))();
  }
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(result);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool, @unowned UInt32) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

uint64_t _SymbolEffect.encode(to:)()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v3 = *(void *)(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 16);
  float v5 = *(float *)(v0 + 28);
  int v6 = *(_DWORD *)(v0 + 32);
  int v11 = *(unsigned __int8 *)(v0 + 36);
  uint64_t v7 = *(unsigned int *)(v0 + 40);
  int v8 = *(unsigned __int8 *)(v0 + 44);
  unsigned __int16 v9 = *(_WORD *)(v0 + 24);
  outlined copy of _SymbolEffect.Storage(*(void *)v0, v3, v4, v9);
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  uint64_t result = outlined consume of _SymbolEffect.Storage(v2, v3, v4, v9);
  if (!v1 && (v5 != 1.0 || ((v11 ^ 1) & 1) != 0 || ((v8 ^ 1) & 1) != 0))
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    return specialized ProtobufEncoder.encodeMessage<A>(_:)(v6, v11 | (unint64_t)(v7 << 32), v8, v5);
  }
  return result;
}

unint64_t _SymbolEffect.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (v4 >= v5)
  {
    a1[3] = 0;
    goto LABEL_4;
  }
  unint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  unint64_t v6 = 2;
  float v7 = 1.0;
  char v8 = 1;
  uint64_t v43 = 4294967294;
  char v9 = 1;
  while (1)
  {
    unint64_t result = a1[3];
    if (result)
    {
      unint64_t v12 = a1[4];
      if (v4 < v12) {
        goto LABEL_14;
      }
      if (v12 < v4) {
        goto LABEL_53;
      }
      a1[3] = 0;
    }
    unint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_54;
    }
    if (result < 8) {
      goto LABEL_53;
    }
LABEL_14:
    if (result >> 3 != 2) {
      break;
    }
    if ((result & 7) != 2) {
      goto LABEL_53;
    }
    uint64_t v22 = (void *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
    }
    unint64_t v24 = v22[2];
    unint64_t v23 = v22[3];
    if (v24 >= v23 >> 1) {
      uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v22);
    }
    v22[2] = v24 + 1;
    v22[v24 + 4] = v5;
    a1[5] = v22;
    uint64_t v25 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_54;
    }
    if (v25 < 0) {
      goto LABEL_66;
    }
    unint64_t v26 = a1[1] + v25;
    if (v5 < v26) {
      goto LABEL_53;
    }
    a1[2] = v26;
    _SymbolEffect.Options.init(from:)((unint64_t)a1, (uint64_t)&v44);
    char v27 = (void *)a1[5];
    if (!v27[2]) {
      goto LABEL_68;
    }
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v28 = v27[2];
      if (!v28) {
        goto LABEL_52;
      }
    }
    else
    {
      unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v27);
      char v27 = (void *)result;
      uint64_t v28 = *(void *)(result + 16);
      if (!v28)
      {
LABEL_52:
        __break(1u);
LABEL_53:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_54:
        uint64_t v31 = v41;
        uint64_t v32 = v42;
        uint64_t v33 = v43;
        unsigned __int16 v34 = v6;
        return outlined consume of _SymbolEffect.Storage?(v31, v32, v33, v34);
      }
    }
    uint64_t v29 = v28 - 1;
    uint64_t v30 = v27[v29 + 4];
    v27[2] = v29;
    a1[5] = v27;
    a1[2] = v30;
    float v7 = *(float *)&v44;
    char v9 = v45;
    unint64_t v40 = __PAIR64__(HIDWORD(v44), HIDWORD(v45));
    char v8 = v46;
LABEL_7:
    unint64_t v4 = a1[1];
    unint64_t v5 = a1[2];
    if (v4 >= v5)
    {
      a1[3] = 0;
      if ((~v43 & 0xFFFFFFFE) != 0 || (v6 & 0xFEFE) != 2)
      {
        *(void *)a2 = v41;
        *(void *)(a2 + 8) = v42;
        *(void *)(a2 + 16) = v43;
        *(_WORD *)(a2 + 24) = v6;
        *(float *)(a2 + 28) = v7;
        *(_DWORD *)(a2 + 32) = HIDWORD(v40);
        *(unsigned char *)(a2 + 36) = v9 & 1;
        *(_DWORD *)(a2 + 40) = v40;
        *(unsigned char *)(a2 + 44) = v8 & 1;
        return result;
      }
LABEL_4:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
  }
  if (result >> 3 != 1)
  {
    switch(result & 7)
    {
      case 0uLL:
        unint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_54;
        }
        goto LABEL_7;
      case 1uLL:
        unint64_t v11 = a1[1] + 8;
        if (v5 >= v11) {
          goto LABEL_6;
        }
        goto LABEL_53;
      case 2uLL:
        unint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_54;
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_70;
        }
        unint64_t v11 = a1[1] + result;
        if (v5 < v11) {
          goto LABEL_53;
        }
LABEL_6:
        a1[1] = v11;
        break;
      case 5uLL:
        unint64_t v11 = a1[1] + 4;
        if (v5 < v11) {
          goto LABEL_53;
        }
        goto LABEL_6;
      default:
        goto LABEL_53;
    }
    goto LABEL_7;
  }
  if ((result & 7) != 2) {
    goto LABEL_53;
  }
  uint64_t v13 = (void *)a1[5];
  unsigned __int16 v14 = v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
  }
  unint64_t v6 = v13[2];
  unint64_t v15 = v13[3];
  if (v6 >= v15 >> 1) {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v6 + 1, 1, v13);
  }
  v13[2] = v6 + 1;
  v13[v6 + 4] = v5;
  a1[5] = v13;
  uint64_t v16 = ProtobufDecoder.decodeVarint()();
  if (v2) {
    goto LABEL_60;
  }
  if ((v16 & 0x8000000000000000) == 0)
  {
    unint64_t v17 = a1[1] + v16;
    if (v5 >= v17)
    {
      a1[2] = v17;
      _SymbolEffect.Storage.init(from:)((unint64_t)a1, &v44);
      int v18 = (void *)a1[5];
      if (!v18[2]) {
        goto LABEL_67;
      }
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v19 = v18[2];
        if (!v19) {
          goto LABEL_69;
        }
      }
      else
      {
        int v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
        uint64_t v19 = v18[2];
        if (!v19) {
          goto LABEL_69;
        }
      }
      uint64_t v20 = v19 - 1;
      uint64_t v21 = v18[v20 + 4];
      v18[2] = v20;
      unint64_t result = outlined consume of _SymbolEffect.Storage?(v41, v42, v43, v14);
      a1[5] = v18;
      a1[2] = v21;
      uint64_t v41 = v44;
      uint64_t v42 = v45;
      uint64_t v43 = v46;
      unint64_t v6 = v47;
      goto LABEL_7;
    }
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
LABEL_60:
    uint64_t v31 = v41;
    uint64_t v32 = v42;
    uint64_t v33 = v43;
    unsigned __int16 v34 = v14;
    return outlined consume of _SymbolEffect.Storage?(v31, v32, v33, v34);
  }
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
  __break(1u);
  uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v6);
  uint64_t v36 = v35[2];
  if (!v36)
  {
    __break(1u);
    LOWORD(v5) = (_WORD)v35;
    uint64_t v35 = (void *)a1[5];
    if (v35[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v36 = v35[2];
        if (v36) {
          goto LABEL_64;
        }
LABEL_74:
        __break(1u);
        JUMPOUT(0x245C7E624);
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
    uint64_t v36 = v35[2];
    if (!v36) {
      goto LABEL_74;
    }
  }
LABEL_64:
  uint64_t v37 = v36 - 1;
  uint64_t v38 = v35[v37 + 4];
  v35[2] = v37;
  unint64_t result = outlined consume of _SymbolEffect.Storage?(v41, v42, v43, v5);
  a1[5] = v35;
  a1[2] = v38;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v3 = *(void *)(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 16);
  float v5 = *(float *)(v0 + 28);
  int v6 = *(_DWORD *)(v0 + 32);
  int v11 = *(unsigned __int8 *)(v0 + 36);
  uint64_t v7 = *(unsigned int *)(v0 + 40);
  int v8 = *(unsigned __int8 *)(v0 + 44);
  unsigned __int16 v9 = *(_WORD *)(v0 + 24);
  outlined copy of _SymbolEffect.Storage(*(void *)v0, v3, v4, v9);
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  uint64_t result = outlined consume of _SymbolEffect.Storage(v2, v3, v4, v9);
  if (!v1 && (v5 != 1.0 || ((v11 ^ 1) & 1) != 0 || v8 != 1))
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    return specialized ProtobufEncoder.encodeMessage<A>(_:)(v6, v11 | (unint64_t)(v7 << 32), v8, v5);
  }
  return result;
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.init(from:)(a1, a2);
}

uint64_t _SymbolEffect.Storage.encode(to:)(uint64_t result)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  unsigned int v6 = *(unsigned __int16 *)(v1 + 24);
  uint64_t v7 = result;
  switch(v6 >> 12)
  {
    case 1u:
      outlined copy of _SymbolEffect.Trigger?(v3);
      specialized ProtobufEncoder.messageField<A>(_:_:)(8, v3, v4 & 0x1FFFFFFFFLL);
      return outlined consume of _SymbolEffect.Storage(v3, v4, v5, v6);
    case 2u:
      outlined copy of _SymbolEffect.Trigger?(v3);
      specialized ProtobufEncoder.messageField<A>(_:_:)(2, v3, v4 & 0x1FFFFFFFFLL);
      return outlined consume of _SymbolEffect.Storage(v3, v4, v5, v6);
    case 3u:
      outlined copy of _SymbolEffect.Trigger?(v3);
      specialized ProtobufEncoder.messageField<A>(_:_:)(3);
      return outlined consume of _SymbolEffect.Storage(v3, v4, v5, v6);
    case 4u:
      outlined copy of _SymbolEffect.Trigger?(v3);
      specialized ProtobufEncoder.messageField<A>(_:_:)(4, v3, v4 & 0x1FFFFFFFFLL);
      return outlined consume of _SymbolEffect.Storage(v3, v4, v5, v6);
    case 5u:
      outlined copy of _SymbolEffect.Trigger?(v3);
      specialized ProtobufEncoder.messageField<A>(_:_:)(5, v3, v4);
      return outlined consume of _SymbolEffect.Storage(v3, v4, v5, v6);
    case 6u:
      ProtobufEncoder.encodeVarint(_:)(0x32uLL);
      return specialized ProtobufEncoder.encodeMessage<A>(_:)(v3 & 0x1FFFFFFFFLL);
    case 7u:
      ProtobufEncoder.encodeVarint(_:)(0x3AuLL);
      return specialized ProtobufEncoder.encodeMessage<A>(_:)(v3 & 0x101FFFFFFFFLL);
    case 8u:
      return result;
    default:
      outlined copy of _SymbolEffect.Trigger?(v3);
      ProtobufEncoder.encodeVarint(_:)(0xAuLL);
      uint64_t v8 = *(void *)(v7 + 8);
      unsigned __int16 v9 = *(void **)(v7 + 24);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_3;
      }
      while (1)
      {
        unsigned __int16 v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
LABEL_3:
        unint64_t v10 = v9[2];
        unint64_t v11 = v9[3];
        unint64_t v12 = v10 + 1;
        if (v10 >= v11 >> 1)
        {
          unint64_t v16 = v10 + 1;
          uint64_t v13 = v9;
          unint64_t v14 = v9[2];
          unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v10 + 1, 1, v13);
          unint64_t v10 = v14;
          unint64_t v12 = v16;
          unsigned __int16 v9 = v15;
        }
        v9[2] = v12;
        v9[v10 + 4] = v8;
        *(void *)(v7 + 24) = v9;
        if (!__OFADD__(v8, 1)) {
          break;
        }
        __break(1u);
      }
      *(void *)(v7 + 8) = v8 + 1;
      if ((~v3 & 0xF000000000000006) == 0
        || (outlined copy of _SymbolEffect.Trigger?(v3),
            specialized ProtobufEncoder.messageField<A>(_:_:)(3, v3),
            outlined consume of _SymbolEffect.Storage(v3, v4, v5, v6),
            !v2))
      {
        if ((v4 & 1) == 0)
        {
          ProtobufEncoder.encodeVarint(_:)(0x10uLL);
          ProtobufEncoder.encodeVarint(_:)(0);
        }
        ProtobufEncoder.endLengthDelimited()();
      }
      return outlined consume of _SymbolEffect.Storage(v3, v4, v5, v6);
  }
}

unint64_t _SymbolEffect.Storage.init(from:)@<X0>(unint64_t result@<X0>, uint64_t *a2@<X8>)
{
  v104 = a2;
  uint64_t v4 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 >= v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    unsigned __int16 v10 = 0x8000;
LABEL_4:
    v4[3] = 0;
    unint64_t v11 = v104;
    uint64_t *v104 = v7;
    v11[1] = v8;
    v11[2] = v9;
    *((_WORD *)v11 + 12) = v10;
    return result;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  unsigned __int16 v10 = 0x8000;
  while (2)
  {
    uint64_t result = v4[3];
    if (result)
    {
      unint64_t v13 = v4[4];
      if (v5 < v13) {
        goto LABEL_14;
      }
      if (v13 < v5) {
        goto LABEL_151;
      }
      v4[3] = 0;
    }
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
    }
    if (result < 8) {
      goto LABEL_151;
    }
LABEL_14:
    switch(result >> 3)
    {
      case 1uLL:
        if ((result & 7) != 2) {
          goto LABEL_151;
        }
        unint64_t v14 = (void *)v4[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
        }
        unint64_t v3 = v14[2];
        unint64_t v15 = v14[3];
        unint64_t v16 = (char *)(v3 + 1);
        if (v3 >= v15 >> 1)
        {
          v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v3 + 1, 1, v14);
          unint64_t v16 = (char *)(v3 + 1);
          unint64_t v14 = v86;
        }
        v14[2] = v16;
        v14[v3 + 4] = v6;
        v4[5] = v14;
        uint64_t v17 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        }
        if ((v17 & 0x8000000000000000) == 0)
        {
          unint64_t v18 = v4[1] + v17;
          if (v6 < v18) {
            goto LABEL_151;
          }
          v4[2] = v18;
          _SymbolEffect.PulseConfiguration.init(from:)((unint64_t)v4, (uint64_t)&v98);
          uint64_t v19 = (void *)v4[5];
          if (!v19[2]) {
            goto LABEL_183;
          }
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v20 = v19[2];
            if (!v20) {
              goto LABEL_191;
            }
          }
          else
          {
            uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
            uint64_t v20 = v19[2];
            if (!v20) {
              goto LABEL_191;
            }
          }
          uint64_t v21 = v20 - 1;
          unint64_t v3 = v19[v21 + 4];
          v19[2] = v21;
          uint64_t result = outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
          unint64_t v9 = 0;
          unsigned __int16 v10 = 0;
          v4[5] = v19;
          v4[2] = v3;
          uint64_t v7 = v98;
          uint64_t v8 = v99;
LABEL_7:
          unint64_t v5 = v4[1];
          unint64_t v6 = v4[2];
          if (v5 >= v6) {
            goto LABEL_4;
          }
          continue;
        }
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
        __break(1u);
        v94 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v3);
        uint64_t v95 = v94[2];
        if (v95) {
          goto LABEL_174;
        }
        __break(1u);
        v94 = (void *)v4[5];
        if (!v94[2])
        {
          __break(1u);
LABEL_201:
          v94 = specialized _ArrayBuffer._consumeAndCreateNew()(v94);
          uint64_t v95 = v94[2];
          if (v95) {
            goto LABEL_174;
          }
LABEL_156:
          __break(1u);
          v94 = (void *)v4[5];
          if (v94[2])
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v95 = v94[2];
              if (v95) {
                goto LABEL_174;
              }
              goto LABEL_159;
            }
          }
          else
          {
            __break(1u);
          }
          v94 = specialized _ArrayBuffer._consumeAndCreateNew()(v94);
          uint64_t v95 = v94[2];
          if (v95) {
            goto LABEL_174;
          }
LABEL_159:
          __break(1u);
          v94 = (void *)v4[5];
          if (v94[2])
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v95 = v94[2];
              if (v95) {
                goto LABEL_174;
              }
              goto LABEL_162;
            }
          }
          else
          {
            __break(1u);
          }
          v94 = specialized _ArrayBuffer._consumeAndCreateNew()(v94);
          uint64_t v95 = v94[2];
          if (v95) {
            goto LABEL_174;
          }
LABEL_162:
          __break(1u);
          v94 = (void *)v4[5];
          if (v94[2])
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v95 = v94[2];
              if (v95) {
                goto LABEL_174;
              }
              goto LABEL_165;
            }
          }
          else
          {
            __break(1u);
          }
          v94 = specialized _ArrayBuffer._consumeAndCreateNew()(v94);
          uint64_t v95 = v94[2];
          if (v95) {
            goto LABEL_174;
          }
LABEL_165:
          __break(1u);
          v94 = (void *)v4[5];
          if (v94[2])
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v95 = v94[2];
              if (v95) {
                goto LABEL_174;
              }
              goto LABEL_168;
            }
          }
          else
          {
            __break(1u);
          }
          v94 = specialized _ArrayBuffer._consumeAndCreateNew()(v94);
          uint64_t v95 = v94[2];
          if (v95) {
            goto LABEL_174;
          }
LABEL_168:
          __break(1u);
          v94 = (void *)v4[5];
          if (v94[2])
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v95 = v94[2];
              if (v95) {
                goto LABEL_174;
              }
              goto LABEL_171;
            }
          }
          else
          {
            __break(1u);
          }
          v94 = specialized _ArrayBuffer._consumeAndCreateNew()(v94);
          uint64_t v95 = v94[2];
          if (v95) {
            goto LABEL_174;
          }
LABEL_171:
          __break(1u);
          v94 = (void *)v4[5];
          if (v94[2])
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v95 = v94[2];
              if (v95) {
                goto LABEL_174;
              }
              goto LABEL_220;
            }
          }
          else
          {
            __break(1u);
          }
          v94 = specialized _ArrayBuffer._consumeAndCreateNew()(v94);
          uint64_t v95 = v94[2];
          if (v95) {
            goto LABEL_174;
          }
LABEL_220:
          __break(1u);
          JUMPOUT(0x245C7F8E8);
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_201;
        }
        uint64_t v95 = v94[2];
        if (!v95) {
          goto LABEL_156;
        }
LABEL_174:
        uint64_t v96 = v95 - 1;
        uint64_t v97 = v94[v96 + 4];
        v94[2] = v96;
        uint64_t result = outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        v4[5] = v94;
        v4[2] = v97;
        return result;
      case 2uLL:
        if ((result & 7) != 2) {
          goto LABEL_151;
        }
        uint64_t v22 = (void *)v4[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        }
        unint64_t v3 = v22[2];
        unint64_t v23 = v22[3];
        unint64_t v24 = (char *)(v3 + 1);
        if (v3 >= v23 >> 1)
        {
          v87 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v3 + 1, 1, v22);
          unint64_t v24 = (char *)(v3 + 1);
          uint64_t v22 = v87;
        }
        v22[2] = v24;
        v22[v3 + 4] = v6;
        v4[5] = v22;
        uint64_t v25 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        }
        if (v25 < 0) {
          goto LABEL_176;
        }
        unint64_t v26 = v4[1] + v25;
        if (v6 < v26) {
          goto LABEL_151;
        }
        v4[2] = v26;
        _SymbolEffect.BounceConfiguration.init(from:)((unint64_t)v4, (uint64_t)&v98);
        char v27 = (void *)v4[5];
        if (!v27[2]) {
          goto LABEL_184;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v28 = v27[2];
          if (!v28) {
            goto LABEL_192;
          }
        }
        else
        {
          char v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
          uint64_t v28 = v27[2];
          if (!v28) {
            goto LABEL_192;
          }
        }
        uint64_t v29 = v28 - 1;
        unint64_t v3 = v27[v29 + 4];
        v27[2] = v29;
        uint64_t result = outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        unint64_t v9 = 0;
        v4[5] = v27;
        v4[2] = v3;
        uint64_t v7 = v98;
        uint64_t v30 = 0x100000000;
        if (!BYTE4(v99)) {
          uint64_t v30 = 0;
        }
        uint64_t v8 = v30 | v99;
        unsigned __int16 v10 = 0x2000;
        goto LABEL_7;
      case 3uLL:
        if ((result & 7) != 2) {
          goto LABEL_151;
        }
        uint64_t v31 = (void *)v4[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        }
        unint64_t v3 = v31[2];
        unint64_t v32 = v31[3];
        uint64_t v33 = (char *)(v3 + 1);
        if (v3 >= v32 >> 1)
        {
          v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v3 + 1, 1, v31);
          uint64_t v33 = (char *)(v3 + 1);
          uint64_t v31 = v88;
        }
        v31[2] = v33;
        v31[v3 + 4] = v6;
        v4[5] = v31;
        uint64_t v34 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        }
        if (v34 < 0) {
          goto LABEL_177;
        }
        unint64_t v35 = v4[1] + v34;
        if (v6 < v35) {
          goto LABEL_151;
        }
        v4[2] = v35;
        _SymbolEffect.WiggleConfiguration.init(from:)((unint64_t)v4, (uint64_t)&v98);
        uint64_t v36 = (void *)v4[5];
        if (!v36[2]) {
          goto LABEL_185;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v37 = v36[2];
          if (!v37) {
            goto LABEL_193;
          }
        }
        else
        {
          uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew()(v36);
          uint64_t v37 = v36[2];
          if (!v37) {
            goto LABEL_193;
          }
        }
        uint64_t v38 = v37 - 1;
        unint64_t v3 = v36[v38 + 4];
        v36[2] = v38;
        uint64_t result = outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        v4[5] = v36;
        v4[2] = v3;
        uint64_t v7 = v98;
        uint64_t v8 = v99;
        unint64_t v9 = v100 | ((unint64_t)v101 << 32);
        if (v103) {
          __int16 v39 = 256;
        }
        else {
          __int16 v39 = 0;
        }
        unsigned __int16 v10 = v39 | v102 | 0x3000;
        goto LABEL_7;
      case 4uLL:
        if ((result & 7) != 2) {
          goto LABEL_151;
        }
        unint64_t v40 = (void *)v4[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1, v40);
        }
        unint64_t v3 = v40[2];
        unint64_t v41 = v40[3];
        uint64_t v42 = (char *)(v3 + 1);
        if (v3 >= v41 >> 1)
        {
          v89 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v3 + 1, 1, v40);
          uint64_t v42 = (char *)(v3 + 1);
          unint64_t v40 = v89;
        }
        v40[2] = v42;
        v40[v3 + 4] = v6;
        v4[5] = v40;
        uint64_t v43 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        }
        if (v43 < 0) {
          goto LABEL_178;
        }
        unint64_t v44 = v4[1] + v43;
        if (v6 < v44) {
          goto LABEL_151;
        }
        v4[2] = v44;
        _SymbolEffect.BounceConfiguration.init(from:)((unint64_t)v4, (uint64_t)&v98);
        uint64_t v45 = (void *)v4[5];
        if (!v45[2]) {
          goto LABEL_186;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v46 = v45[2];
          if (!v46) {
            goto LABEL_194;
          }
        }
        else
        {
          uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew()(v45);
          uint64_t v46 = v45[2];
          if (!v46) {
            goto LABEL_194;
          }
        }
        uint64_t v47 = v46 - 1;
        unint64_t v3 = v45[v47 + 4];
        v45[2] = v47;
        uint64_t result = outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        unint64_t v9 = 0;
        v4[5] = v45;
        v4[2] = v3;
        uint64_t v7 = v98;
        uint64_t v48 = 0x100000000;
        if (!BYTE4(v99)) {
          uint64_t v48 = 0;
        }
        uint64_t v8 = v48 | v99;
        unsigned __int16 v10 = 0x4000;
        goto LABEL_7;
      case 5uLL:
        if ((result & 7) != 2) {
          goto LABEL_151;
        }
        v49 = (void *)v4[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
        }
        unint64_t v3 = v49[2];
        unint64_t v50 = v49[3];
        v51 = (char *)(v3 + 1);
        if (v3 >= v50 >> 1)
        {
          v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v3 + 1, 1, v49);
          v51 = (char *)(v3 + 1);
          v49 = v90;
        }
        v49[2] = v51;
        v49[v3 + 4] = v6;
        v4[5] = v49;
        uint64_t v52 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        }
        if (v52 < 0) {
          goto LABEL_179;
        }
        unint64_t v53 = v4[1] + v52;
        if (v6 < v53) {
          goto LABEL_151;
        }
        v4[2] = v53;
        _SymbolEffect.VariableColorConfiguration.init(from:)((unint64_t)v4, (uint64_t)&v98);
        v54 = (void *)v4[5];
        if (!v54[2]) {
          goto LABEL_187;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v55 = v54[2];
          if (!v55) {
            goto LABEL_195;
          }
        }
        else
        {
          v54 = specialized _ArrayBuffer._consumeAndCreateNew()(v54);
          uint64_t v55 = v54[2];
          if (!v55) {
            goto LABEL_195;
          }
        }
        uint64_t v56 = v55 - 1;
        unint64_t v3 = v54[v56 + 4];
        v54[2] = v56;
        uint64_t result = outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        unint64_t v9 = 0;
        v4[5] = v54;
        v4[2] = v3;
        uint64_t v7 = v98;
        unsigned __int16 v10 = 20480;
        uint64_t v8 = v99;
        goto LABEL_7;
      case 6uLL:
        if ((result & 7) != 2) {
          goto LABEL_151;
        }
        v57 = (void *)v4[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57[2] + 1, 1, v57);
        }
        unint64_t v3 = v57[2];
        unint64_t v58 = v57[3];
        v59 = (char *)(v3 + 1);
        if (v3 >= v58 >> 1)
        {
          v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v58 > 1), v3 + 1, 1, v57);
          v59 = (char *)(v3 + 1);
          v57 = v91;
        }
        v57[2] = v59;
        v57[v3 + 4] = v6;
        v4[5] = v57;
        uint64_t v60 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        }
        if (v60 < 0) {
          goto LABEL_180;
        }
        unint64_t v61 = v4[1] + v60;
        if (v6 < v61) {
          goto LABEL_151;
        }
        v4[2] = v61;
        _SymbolEffect.ScaleConfiguration.init(from:)((unint64_t)v4, (uint64_t)&v98);
        v62 = (void *)v4[5];
        if (!v62[2]) {
          goto LABEL_188;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v63 = v62[2];
          if (!v63) {
            goto LABEL_196;
          }
        }
        else
        {
          v62 = specialized _ArrayBuffer._consumeAndCreateNew()(v62);
          uint64_t v63 = v62[2];
          if (!v63) {
            goto LABEL_196;
          }
        }
        uint64_t v64 = v63 - 1;
        unint64_t v3 = v62[v64 + 4];
        v62[2] = v64;
        uint64_t result = outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        v4[5] = v62;
        v4[2] = v3;
        uint64_t v65 = 0x100000000;
        if (!BYTE4(v98)) {
          uint64_t v65 = 0;
        }
        uint64_t v7 = v65 | v98;
        unsigned __int16 v10 = 24576;
        goto LABEL_7;
      case 7uLL:
        if ((result & 7) != 2) {
          goto LABEL_151;
        }
        v66 = (void *)v4[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v66[2] + 1, 1, v66);
        }
        unint64_t v3 = v66[2];
        unint64_t v67 = v66[3];
        v68 = (char *)(v3 + 1);
        if (v3 >= v67 >> 1)
        {
          v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v67 > 1), v3 + 1, 1, v66);
          v68 = (char *)(v3 + 1);
          v66 = v92;
        }
        v66[2] = v68;
        v66[v3 + 4] = v6;
        v4[5] = v66;
        uint64_t v69 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        }
        if (v69 < 0) {
          goto LABEL_181;
        }
        unint64_t v70 = v4[1] + v69;
        if (v6 < v70) {
          goto LABEL_151;
        }
        v4[2] = v70;
        _SymbolEffect.HiddenConfiguration.init(from:)((unint64_t)v4, (uint64_t)&v98);
        v71 = (void *)v4[5];
        if (!v71[2]) {
          goto LABEL_189;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v72 = v71[2];
          if (!v72) {
            goto LABEL_197;
          }
        }
        else
        {
          v71 = specialized _ArrayBuffer._consumeAndCreateNew()(v71);
          uint64_t v72 = v71[2];
          if (!v72) {
            goto LABEL_197;
          }
        }
        uint64_t v73 = v72 - 1;
        unint64_t v3 = v71[v73 + 4];
        v71[2] = v73;
        uint64_t result = outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        v4[5] = v71;
        v4[2] = v3;
        uint64_t v74 = 0x100000000;
        if (!BYTE4(v98)) {
          uint64_t v74 = 0;
        }
        uint64_t v75 = v74 | v98;
        uint64_t v76 = 0x10000000000;
        if (!BYTE5(v98)) {
          uint64_t v76 = 0;
        }
        uint64_t v7 = v75 | v76;
        unsigned __int16 v10 = 28672;
        goto LABEL_7;
      case 8uLL:
        if ((result & 7) != 2) {
          goto LABEL_151;
        }
        v77 = (void *)v4[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77[2] + 1, 1, v77);
        }
        unint64_t v3 = v77[2];
        unint64_t v78 = v77[3];
        v79 = (char *)(v3 + 1);
        if (v3 >= v78 >> 1)
        {
          v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v78 > 1), v3 + 1, 1, v77);
          v79 = (char *)(v3 + 1);
          v77 = v93;
        }
        v77[2] = v79;
        v77[v3 + 4] = v6;
        v4[5] = v77;
        uint64_t v80 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        }
        if (v80 < 0) {
          goto LABEL_182;
        }
        unint64_t v81 = v4[1] + v80;
        if (v6 < v81) {
          goto LABEL_151;
        }
        v4[2] = v81;
        _SymbolEffect.BreatheConfiguration.init(from:)((unint64_t)v4, (uint64_t)&v98);
        v82 = (void *)v4[5];
        if (!v82[2]) {
          goto LABEL_190;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v83 = v82[2];
          if (!v83) {
            goto LABEL_150;
          }
        }
        else
        {
          v82 = specialized _ArrayBuffer._consumeAndCreateNew()(v82);
          uint64_t v83 = v82[2];
          if (!v83)
          {
LABEL_150:
            __break(1u);
LABEL_151:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
          }
        }
        uint64_t v84 = v83 - 1;
        unint64_t v3 = v82[v84 + 4];
        v82[2] = v84;
        uint64_t result = outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
        unint64_t v9 = 0;
        v4[5] = v82;
        v4[2] = v3;
        uint64_t v7 = v98;
        uint64_t v85 = 0x100000000;
        if (!BYTE4(v99)) {
          uint64_t v85 = 0;
        }
        uint64_t v8 = v85 | v99;
        unsigned __int16 v10 = 4096;
        goto LABEL_7;
      default:
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
            }
            goto LABEL_7;
          case 1uLL:
            unint64_t v12 = v4[1] + 8;
            if (v6 >= v12) {
              goto LABEL_6;
            }
            goto LABEL_151;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_198;
            }
            unint64_t v12 = v4[1] + result;
            if (v6 < v12) {
              goto LABEL_151;
            }
LABEL_6:
            v4[1] = v12;
            break;
          case 5uLL:
            unint64_t v12 = v4[1] + 4;
            if (v6 < v12) {
              goto LABEL_151;
            }
            goto LABEL_6;
          default:
            goto LABEL_151;
        }
        goto LABEL_7;
    }
  }
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.Storage(uint64_t a1)
{
  return _SymbolEffect.Storage.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.Storage@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return _SymbolEffect.Storage.init(from:)(a1, a2);
}

_DWORD *_SymbolEffect.Options.encode(to:)(_DWORD *result)
{
  uint64_t v2 = v1;
  unint64_t v3 = result;
  float v5 = *(float *)v2;
  float v4 = *(float *)(v2 + 4);
  char v6 = *(unsigned char *)(v2 + 8);
  float v7 = *(float *)(v2 + 12);
  char v8 = *(unsigned char *)(v2 + 16);
  if (*(float *)v2 == 1.0) {
    goto LABEL_5;
  }
  ProtobufEncoder.encodeVarint(_:)(0xDuLL);
  uint64_t v9 = v3[1];
  uint64_t result = (_DWORD *)(v9 + 4);
  if (__OFADD__(v9, 4))
  {
    __break(1u);
  }
  else if (v3[2] >= (uint64_t)result)
  {
    v3[1] = result;
    *(float *)(*v3 + v9) = v5;
    goto LABEL_5;
  }
  uint64_t result = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *(float *)uint64_t result = v5;
LABEL_5:
  if (v4 == 0.0) {
    char v10 = 1;
  }
  else {
    char v10 = v6;
  }
  if ((v10 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x15uLL);
    uint64_t v11 = v3[1];
    int64_t v12 = v11 + 4;
    if (__OFADD__(v11, 4))
    {
      __break(1u);
    }
    else if (v3[2] >= v12)
    {
      v3[1] = v12;
      uint64_t result = (_DWORD *)(*v3 + v11);
LABEL_12:
      *(float *)uint64_t result = v4;
      goto LABEL_13;
    }
    uint64_t result = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v12);
    goto LABEL_12;
  }
LABEL_13:
  if (v7 == 0.0) {
    char v13 = 1;
  }
  else {
    char v13 = v8;
  }
  if ((v13 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
    uint64_t v14 = v3[1];
    int64_t v15 = v14 + 4;
    if (__OFADD__(v14, 4))
    {
      __break(1u);
    }
    else if (v3[2] >= v15)
    {
      v3[1] = v15;
      uint64_t result = (_DWORD *)(*v3 + v14);
LABEL_20:
      *(float *)uint64_t result = v7;
      return result;
    }
    uint64_t result = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v15);
    goto LABEL_20;
  }
  return result;
}

unint64_t _SymbolEffect.Options.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    int v7 = 0;
    int v8 = 0;
    float v9 = 1.0;
    char v10 = 1;
    char v11 = 1;
    while (1)
    {
      uint64_t result = v3[3];
      if (result)
      {
        unint64_t v12 = v3[4];
        if (v5 < v12) {
          goto LABEL_9;
        }
        if (v12 < v5) {
          goto LABEL_53;
        }
        v3[3] = 0;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7)
      {
LABEL_53:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_9:
      unint64_t v13 = result >> 3;
      if (result >> 3 == 3)
      {
        if ((result & 7) == 2)
        {
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_56;
          }
          int64_t v15 = (int *)v3[1];
          if (v6 < (unint64_t)v15 + result) {
            goto LABEL_53;
          }
          v3[3] = 29;
          v3[4] = (char *)v15 + result;
        }
        else
        {
          if ((result & 7) != 5) {
            goto LABEL_53;
          }
          int64_t v15 = (int *)v3[1];
        }
        unint64_t v5 = (unint64_t)(v15 + 1);
        if (v6 < (unint64_t)(v15 + 1)) {
          goto LABEL_53;
        }
        char v11 = 0;
        int v7 = *v15;
      }
      else if (v13 == 2)
      {
        if ((result & 7) == 2)
        {
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_57;
          }
          unint64_t v16 = (int *)v3[1];
          if (v6 < (unint64_t)v16 + result) {
            goto LABEL_53;
          }
          v3[3] = 21;
          v3[4] = (char *)v16 + result;
        }
        else
        {
          if ((result & 7) != 5) {
            goto LABEL_53;
          }
          unint64_t v16 = (int *)v3[1];
        }
        unint64_t v5 = (unint64_t)(v16 + 1);
        if (v6 < (unint64_t)(v16 + 1)) {
          goto LABEL_53;
        }
        char v10 = 0;
        int v8 = *v16;
      }
      else
      {
        if (v13 != 1)
        {
          switch(result & 7)
          {
            case 0uLL:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              unint64_t v5 = v3[1];
              goto LABEL_49;
            case 1uLL:
              unint64_t v5 = v3[1] + 8;
              goto LABEL_47;
            case 2uLL:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_58;
              }
              unint64_t v5 = v3[1] + result;
LABEL_47:
              if (v6 >= v5) {
                goto LABEL_48;
              }
              goto LABEL_53;
            case 5uLL:
              unint64_t v5 = v3[1] + 4;
              goto LABEL_47;
            default:
              goto LABEL_53;
          }
        }
        if ((result & 7) == 2)
        {
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
            JUMPOUT(0x245C7FD68);
          }
          uint64_t v14 = (float *)v3[1];
          if (v6 < (unint64_t)v14 + result) {
            goto LABEL_53;
          }
          v3[3] = 13;
          v3[4] = (char *)v14 + result;
        }
        else
        {
          if ((result & 7) != 5) {
            goto LABEL_53;
          }
          uint64_t v14 = (float *)v3[1];
        }
        unint64_t v5 = (unint64_t)(v14 + 1);
        if (v6 < (unint64_t)(v14 + 1)) {
          goto LABEL_53;
        }
        float v9 = *v14;
      }
LABEL_48:
      v3[1] = v5;
LABEL_49:
      unint64_t v6 = v3[2];
      if (v5 >= v6) {
        goto LABEL_52;
      }
    }
  }
  int v7 = 0;
  int v8 = 0;
  float v9 = 1.0;
  char v11 = 1;
  char v10 = 1;
LABEL_52:
  v3[3] = 0;
  *(float *)a2 = v9;
  *(_DWORD *)(a2 + 4) = v8;
  *(unsigned char *)(a2 + 8) = v10 & 1;
  *(_DWORD *)(a2 + 12) = v7;
  *(unsigned char *)(a2 + 16) = v11 & 1;
  return result;
}

_DWORD *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.Options(_DWORD *a1)
{
  return _SymbolEffect.Options.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.Options@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.Options.init(from:)(a1, a2);
}

void _SymbolEffect.Trigger.encode(to:)(void *a1)
{
  void (*v7)(unint64_t *__return_ptr, uint64_t);
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD v19[5];
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  char v24;
  uint64_t v25;

  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v5 = (char *)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v1;
  if (*v1 < 0)
  {
    if (v6)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
  }
  else
  {
    int v7 = *(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v6 + 88);
    int v8 = swift_retain();
    v7(&v20, v8);
    if (v24)
    {
      UUID.init()();
      specialized StrongHash.init<A>(of:)(v5, (uint64_t)v19);
      float v9 = v19[0];
      char v10 = v19[1];
      char v11 = v19[2];
      unint64_t v12 = v19[3];
      unint64_t v13 = v19[4];
    }
    else
    {
      unint64_t v12 = v22;
      unint64_t v13 = v23;
      char v10 = HIDWORD(v20);
      char v11 = v21;
      float v9 = v20;
    }
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    uint64_t v20 = __PAIR64__(v10, v9);
    uint64_t v21 = v11;
    uint64_t v22 = v12;
    unint64_t v23 = v13;
    uint64_t v14 = a1[1];
    int64_t v15 = (void *)a1[3];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    }
    uint64_t v17 = v15[2];
    unint64_t v16 = v15[3];
    if (v17 >= v16 >> 1) {
      int64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v15);
    }
    v15[2] = v17 + 1;
    v15[v17 + 4] = v14;
    a1[3] = v15;
    if (__OFADD__(v14, 1)) {
      __break(1u);
    }
    a1[1] = v14 + 1;
    StrongHash.encode(to:)(a1);
    ProtobufEncoder.endLengthDelimited()();
    outlined consume of _SymbolEffect.Trigger(v6);
  }
}

unint64_t _SymbolEffect.Trigger.init(from:)@<X0>(unint64_t result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  unint64_t v7 = 0x8000000000000000;
  if (v5 >= v6)
  {
LABEL_45:
    v3[3] = 0;
    *a2 = v7;
    return result;
  }
  while (1)
  {
    uint64_t result = v3[3];
    if (result)
    {
      unint64_t v9 = v3[4];
      if (v5 < v9) {
        goto LABEL_12;
      }
      if (v9 < v5) {
        goto LABEL_46;
      }
      v3[3] = 0;
    }
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return outlined consume of _SymbolEffect.Trigger(v7);
    }
    if (result < 8) {
      goto LABEL_46;
    }
LABEL_12:
    if (result >> 3 != 2) {
      break;
    }
    if ((result & 7) != 0)
    {
      if ((result & 7) != 2) {
        goto LABEL_46;
      }
      uint64_t v20 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return outlined consume of _SymbolEffect.Trigger(v7);
      }
      if (v20 < 0) {
        goto LABEL_51;
      }
      unint64_t v21 = v3[1] + v20;
      if (v6 < v21)
      {
LABEL_46:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return outlined consume of _SymbolEffect.Trigger(v7);
      }
      v3[3] = 16;
      v3[4] = v21;
    }
    uint64_t v22 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return outlined consume of _SymbolEffect.Trigger(v7);
    }
    uint64_t v23 = v22;
    uint64_t result = outlined consume of _SymbolEffect.Trigger(v7);
    unint64_t v7 = (v23 != 0) | 0x8000000000000000;
LABEL_5:
    unint64_t v5 = v3[1];
    unint64_t v6 = v3[2];
    if (v5 >= v6) {
      goto LABEL_45;
    }
  }
  if (result >> 3 != 1)
  {
    switch(result & 7)
    {
      case 0uLL:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Trigger(v7);
        }
        goto LABEL_5;
      case 1uLL:
        unint64_t v8 = v3[1] + 8;
        if (v6 < v8) {
          goto LABEL_46;
        }
        goto LABEL_4;
      case 2uLL:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Trigger(v7);
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_52;
        }
        unint64_t v8 = v3[1] + result;
        if (v6 < v8) {
          goto LABEL_46;
        }
LABEL_4:
        v3[1] = v8;
        break;
      case 5uLL:
        unint64_t v8 = v3[1] + 4;
        if (v6 < v8) {
          goto LABEL_46;
        }
        goto LABEL_4;
      default:
        goto LABEL_46;
    }
    goto LABEL_5;
  }
  if ((result & 7) != 2) {
    goto LABEL_46;
  }
  char v10 = (void *)v3[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
  }
  unint64_t v12 = v10[2];
  unint64_t v11 = v10[3];
  if (v12 >= v11 >> 1) {
    char v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v10);
  }
  v10[2] = v12 + 1;
  v10[v12 + 4] = v6;
  v3[5] = v10;
  uint64_t v13 = ProtobufDecoder.decodeVarint()();
  if (v2) {
    return outlined consume of _SymbolEffect.Trigger(v7);
  }
  if ((v13 & 0x8000000000000000) == 0)
  {
    unint64_t v14 = v3[1] + v13;
    if (v6 < v14) {
      goto LABEL_46;
    }
    v3[2] = v14;
    StrongHash.init(from:)((unint64_t)v3, &v28);
    int64_t v15 = (void *)v3[5];
    if (!v15[2]) {
      goto LABEL_50;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v16 = v15[2];
      if (!v16) {
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v15);
      int64_t v15 = (void *)result;
      uint64_t v16 = *(void *)(result + 16);
      if (!v16)
      {
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
    }
    uint64_t v17 = v16 - 1;
    uint64_t v18 = v15[v17 + 4];
    v15[2] = v17;
    outlined consume of _SymbolEffect.Trigger(v7);
    v3[5] = v15;
    v3[2] = v18;
    int v19 = v29;
    type metadata accessor for HashEquatableBox();
    uint64_t result = swift_allocObject();
    unint64_t v7 = result;
    *(_OWORD *)(result + 16) = v28;
    *(_DWORD *)(result + 32) = v19;
    goto LABEL_5;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  __break(1u);
  unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
  uint64_t v27 = v26[2];
  if (!v27)
  {
    __break(1u);
    JUMPOUT(0x245C8035CLL);
  }
  uint64_t v24 = v27 - 1;
  uint64_t v25 = v26[v24 + 4];
  v26[2] = v24;
  uint64_t result = outlined consume of _SymbolEffect.Trigger(v7);
  v3[5] = v26;
  v3[2] = v25;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.Trigger(void *a1)
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.Trigger@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return _SymbolEffect.Trigger.init(from:)(a1, a2);
}

void _SymbolEffect.PulseConfiguration.encode(to:)()
{
  uint64_t v2 = *(void *)v0;
  int v3 = *(unsigned __int8 *)(v0 + 8);
  if ((~*(void *)v0 & 0xF000000000000006) == 0)
  {
    if (v3) {
      return;
    }
LABEL_8:
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
    return;
  }
  outlined copy of _SymbolEffect.Trigger(v2);
  specialized ProtobufEncoder.messageField<A>(_:_:)(3, v2);
  outlined consume of _SymbolEffect.Trigger?(v2);
  if (v1) {
    int v4 = 1;
  }
  else {
    int v4 = v3;
  }
  if (v4 != 1) {
    goto LABEL_8;
  }
}

unint64_t _SymbolEffect.PulseConfiguration.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v3 = (void *)result;
  uint64_t v5 = 0xF000000000000006;
  char v6 = 1;
  BOOL v28 = 1;
  unint64_t v7 = *(void *)(result + 8);
  unint64_t v8 = *(void *)(result + 16);
  if (v7 >= v8) {
    goto LABEL_48;
  }
  do
  {
    uint64_t result = v3[3];
    if (result)
    {
      unint64_t v10 = v3[4];
      if (v7 < v10) {
        goto LABEL_12;
      }
      if (v10 < v7) {
        goto LABEL_45;
      }
      v3[3] = 0;
    }
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return outlined consume of _SymbolEffect.Trigger?(v5);
    }
    if (result <= 7) {
      goto LABEL_45;
    }
LABEL_12:
    if (result >> 3 == 2)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2) {
          goto LABEL_45;
        }
        uint64_t v21 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
        if (v21 < 0) {
          goto LABEL_52;
        }
        unint64_t v22 = v3[1] + v21;
        if (v8 < v22) {
          goto LABEL_45;
        }
        v3[3] = 16;
        v3[4] = v22;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return outlined consume of _SymbolEffect.Trigger?(v5);
      }
      BOOL v28 = result != 0;
    }
    else if (result >> 3 == 3)
    {
      if ((result & 7) != 2) {
        goto LABEL_45;
      }
      unint64_t v11 = (void *)v3[5];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      }
      unint64_t v13 = v11[2];
      unint64_t v12 = v11[3];
      if (v13 >= v12 >> 1) {
        unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v11);
      }
      v11[2] = v13 + 1;
      v11[v13 + 4] = v8;
      v3[5] = v11;
      uint64_t v14 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return outlined consume of _SymbolEffect.Trigger?(v5);
      }
      if (v14 < 0)
      {
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        __break(1u);
        uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
        uint64_t v26 = v25[2];
        if (!v26)
        {
          __break(1u);
          JUMPOUT(0x245C807C0);
        }
        uint64_t v23 = v26 - 1;
        uint64_t v24 = v25[v23 + 4];
        v25[2] = v23;
        v3[5] = v25;
        v3[2] = v24;
        return outlined consume of _SymbolEffect.Trigger?(v5);
      }
      unint64_t v15 = v3[1] + v14;
      if (v8 < v15) {
        goto LABEL_45;
      }
      v3[2] = v15;
      _SymbolEffect.Trigger.init(from:)((unint64_t)v3, &v27);
      uint64_t v16 = (void *)v3[5];
      if (!v16[2]) {
        goto LABEL_51;
      }
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v17 = v16[2];
        if (!v17) {
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
        uint64_t v17 = v16[2];
        if (!v17)
        {
LABEL_44:
          __break(1u);
LABEL_45:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
      }
      uint64_t v18 = v17 - 1;
      uint64_t v19 = v16[v18 + 4];
      v16[2] = v18;
      v3[5] = v16;
      v3[2] = v19;
      unint64_t v20 = v27;
      uint64_t result = outlined consume of _SymbolEffect.Trigger?(v5);
      uint64_t v5 = v20;
    }
    else
    {
      switch(result & 7)
      {
        case 0uLL:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return outlined consume of _SymbolEffect.Trigger?(v5);
          }
          break;
        case 1uLL:
          unint64_t v9 = v3[1] + 8;
          if (v8 < v9) {
            goto LABEL_45;
          }
          goto LABEL_4;
        case 2uLL:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return outlined consume of _SymbolEffect.Trigger?(v5);
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_53;
          }
          unint64_t v9 = v3[1] + result;
          if (v8 < v9) {
            goto LABEL_45;
          }
LABEL_4:
          v3[1] = v9;
          break;
        case 5uLL:
          unint64_t v9 = v3[1] + 4;
          if (v8 < v9) {
            goto LABEL_45;
          }
          goto LABEL_4;
        default:
          goto LABEL_45;
      }
    }
    unint64_t v7 = v3[1];
    unint64_t v8 = v3[2];
  }
  while (v7 < v8);
  char v6 = v28;
LABEL_48:
  v3[3] = 0;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v6;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.PulseConfiguration()
{
  uint64_t v2 = *(void *)v0;
  int v3 = *(unsigned __int8 *)(v0 + 8);
  if ((~*(void *)v0 & 0xF000000000000006) == 0)
  {
    if (v3) {
      return;
    }
LABEL_8:
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
    return;
  }
  outlined copy of _SymbolEffect.Trigger(v2);
  specialized ProtobufEncoder.messageField<A>(_:_:)(3, v2);
  outlined consume of _SymbolEffect.Trigger?(v2);
  if (v1) {
    int v4 = 1;
  }
  else {
    int v4 = v3;
  }
  if (v4 != 1) {
    goto LABEL_8;
  }
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.PulseConfiguration@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.PulseConfiguration.init(from:)(a1, a2);
}

void _SymbolEffect.BreatheConfiguration.encode(to:)()
{
  uint64_t v2 = *(void *)v0;
  Swift::UInt v3 = *(unsigned int *)(v0 + 8);
  char v4 = *(unsigned char *)(v0 + 12);
  if ((~*(void *)v0 & 0xF000000000000006) == 0
    || (outlined copy of _SymbolEffect.Trigger(v2),
        specialized ProtobufEncoder.messageField<A>(_:_:)(1, v2),
        outlined consume of _SymbolEffect.Trigger?(v2),
        !v1))
  {
    if (v3)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(v3);
    }
    if ((v4 & 1) == 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x18uLL);
      ProtobufEncoder.encodeVarint(_:)(0);
    }
  }
}

unint64_t _SymbolEffect.BreatheConfiguration.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  Swift::UInt v3 = (void *)result;
  uint64_t v5 = 0xF000000000000006;
  unint64_t v6 = *(void *)(result + 8);
  unint64_t v7 = *(void *)(result + 16);
  if (v6 >= v7)
  {
    LODWORD(v8) = 0;
    LOBYTE(v9) = 1;
LABEL_4:
    v3[3] = 0;
    *(void *)a2 = v5;
    *(_DWORD *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 12) = v9;
    return result;
  }
  unint64_t v8 = 0;
  BOOL v9 = 1;
  while (1)
  {
    uint64_t result = v3[3];
    if (result)
    {
      unint64_t v11 = v3[4];
      if (v6 < v11) {
        goto LABEL_14;
      }
      if (v11 < v6) {
        goto LABEL_56;
      }
      v3[3] = 0;
    }
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return outlined consume of _SymbolEffect.Trigger?(v5);
    }
    if (result <= 7) {
      goto LABEL_56;
    }
LABEL_14:
    unint64_t v12 = result >> 3;
    if (result >> 3 == 3)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2) {
          goto LABEL_56;
        }
        uint64_t v24 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
        if (v24 < 0) {
          goto LABEL_61;
        }
        unint64_t v25 = v3[1] + v24;
        if (v7 < v25) {
          goto LABEL_56;
        }
        v3[3] = 24;
        v3[4] = v25;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return outlined consume of _SymbolEffect.Trigger?(v5);
      }
      BOOL v9 = result != 0;
      goto LABEL_7;
    }
    if (v12 == 2)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2) {
          goto LABEL_56;
        }
        uint64_t v26 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
        if (v26 < 0) {
          goto LABEL_62;
        }
        unint64_t v27 = v3[1] + v26;
        if (v7 < v27) {
          goto LABEL_56;
        }
        v3[3] = 16;
        v3[4] = v27;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return outlined consume of _SymbolEffect.Trigger?(v5);
      }
      unint64_t v8 = result;
      goto LABEL_7;
    }
    if (v12 != 1)
    {
      switch(result & 7)
      {
        case 0uLL:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return outlined consume of _SymbolEffect.Trigger?(v5);
          }
          goto LABEL_7;
        case 1uLL:
          unint64_t v10 = v3[1] + 8;
          if (v7 < v10) {
            goto LABEL_56;
          }
          goto LABEL_6;
        case 2uLL:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return outlined consume of _SymbolEffect.Trigger?(v5);
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_63;
          }
          unint64_t v10 = v3[1] + result;
          if (v7 < v10) {
            goto LABEL_56;
          }
LABEL_6:
          v3[1] = v10;
          break;
        case 5uLL:
          unint64_t v10 = v3[1] + 4;
          if (v7 < v10) {
            goto LABEL_56;
          }
          goto LABEL_6;
        default:
          goto LABEL_56;
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2) {
      goto LABEL_56;
    }
    unint64_t v32 = v8;
    uint64_t v13 = a2;
    uint64_t v14 = (void *)v3[5];
    a2 = v9;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    }
    unint64_t v16 = v14[2];
    unint64_t v15 = v14[3];
    if (v16 >= v15 >> 1) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
    }
    v14[2] = v16 + 1;
    v14[v16 + 4] = v7;
    v3[5] = v14;
    uint64_t v17 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return outlined consume of _SymbolEffect.Trigger?(v5);
    }
    if (v17 < 0) {
      break;
    }
    unint64_t v18 = v3[1] + v17;
    if (v7 < v18) {
      goto LABEL_56;
    }
    v3[2] = v18;
    _SymbolEffect.Trigger.init(from:)((unint64_t)v3, &v33);
    uint64_t v19 = (void *)v3[5];
    if (!v19[2]) {
      goto LABEL_60;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v20 = v19[2];
      if (!v20) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
      uint64_t v20 = v19[2];
      if (!v20)
      {
LABEL_55:
        __break(1u);
LABEL_56:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return outlined consume of _SymbolEffect.Trigger?(v5);
      }
    }
    uint64_t v21 = v20 - 1;
    uint64_t v22 = v19[v21 + 4];
    v19[2] = v21;
    v3[5] = v19;
    v3[2] = v22;
    unint64_t v23 = v33;
    uint64_t result = outlined consume of _SymbolEffect.Trigger?(v5);
    uint64_t v5 = v23;
    BOOL v9 = a2;
    a2 = v13;
    unint64_t v8 = v32;
LABEL_7:
    unint64_t v6 = v3[1];
    unint64_t v7 = v3[2];
    if (v6 >= v7) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
  __break(1u);
  uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
  uint64_t v31 = v30[2];
  if (!v31)
  {
    __break(1u);
    JUMPOUT(0x245C80D34);
  }
  uint64_t v28 = v31 - 1;
  uint64_t v29 = v30[v28 + 4];
  v30[2] = v28;
  v3[5] = v30;
  v3[2] = v29;
  return outlined consume of _SymbolEffect.Trigger?(v5);
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.BreatheConfiguration()
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.BreatheConfiguration@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.BreatheConfiguration.init(from:)(a1, a2);
}

void _SymbolEffect.BounceConfiguration.encode(to:)()
{
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  char v4;

  uint64_t v2 = *(void *)v0;
  Swift::UInt v3 = *(unsigned int *)(v0 + 8);
  char v4 = *(unsigned char *)(v0 + 12);
  if ((~*(void *)v0 & 0xF000000000000006) == 0
    || (outlined copy of _SymbolEffect.Trigger(v2),
        specialized ProtobufEncoder.messageField<A>(_:_:)(4, v2),
        outlined consume of _SymbolEffect.Trigger?(v2),
        !v1))
  {
    if (v3)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(v3);
    }
    if ((v4 & 1) == 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x18uLL);
      ProtobufEncoder.encodeVarint(_:)(0);
    }
  }
}

unint64_t _SymbolEffect.BounceConfiguration.init(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.BounceConfiguration.init(from:)(a1, a2);
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.BounceConfiguration()
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.BounceConfiguration@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.BounceConfiguration.init(from:)(a1, a2);
}

void _SymbolEffect.WiggleConfiguration.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)v3;
  double v6 = *(double *)(v3 + 8);
  char v7 = *(unsigned char *)(v3 + 16);
  Swift::UInt v8 = *(unsigned int *)(v3 + 20);
  char v9 = *(unsigned char *)(v3 + 24);
  char v10 = *(unsigned char *)(v3 + 25);
  if ((~*(void *)v3 & 0xF000000000000006) != 0)
  {
    outlined copy of _SymbolEffect.Trigger(v5);
    specialized ProtobufEncoder.messageField<A>(_:_:)(5, v5);
    outlined consume of _SymbolEffect.Trigger?(v5);
    if (v2) {
      return;
    }
  }
  if (v6 == 0.0) {
    char v11 = 1;
  }
  else {
    char v11 = v7;
  }
  if ((v11 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x11uLL);
    uint64_t v12 = a1[1];
    int64_t v13 = v12 + 8;
    if (__OFADD__(v12, 8))
    {
      __break(1u);
    }
    else if (a1[2] >= v13)
    {
      a1[1] = v13;
      uint64_t v14 = (double *)(*a1 + v12);
LABEL_10:
      *uint64_t v14 = v6;
      goto LABEL_11;
    }
    uint64_t v14 = (double *)ProtobufEncoder.growBufferSlow(to:)(v13);
    goto LABEL_10;
  }
LABEL_11:
  if (v8)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(v8);
  }
  if ((v9 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x20uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
  }
  if (v10)
  {
    ProtobufEncoder.encodeVarint(_:)(0x30uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
}

unint64_t _SymbolEffect.WiggleConfiguration.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)result;
  uint64_t v5 = 0xF000000000000006;
  char v6 = 1;
  char v43 = 1;
  BOOL v42 = 1;
  unint64_t v7 = *(void *)(result + 8);
  unint64_t v8 = *(void *)(result + 16);
  if (v7 >= v8)
  {
    LOBYTE(v9) = 0;
    LODWORD(v10) = 0;
    double v11 = 0.0;
    char v12 = 1;
    goto LABEL_4;
  }
  BOOL v9 = 0;
  unint64_t v10 = 0;
  double v11 = 0.0;
  while (2)
  {
    uint64_t result = v3[3];
    if (!result) {
      goto LABEL_12;
    }
    unint64_t v14 = v3[4];
    if (v7 >= v14)
    {
      if (v14 < v7) {
        goto LABEL_74;
      }
      v3[3] = 0;
LABEL_12:
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return outlined consume of _SymbolEffect.Trigger?(v5);
      }
      if (result <= 7) {
        goto LABEL_74;
      }
    }
    switch(result >> 3)
    {
      case 2uLL:
        unint64_t v15 = result & 7;
        switch(v15)
        {
          case 5uLL:
            uint64_t v34 = (float *)v3[1];
            if (v8 < (unint64_t)(v34 + 1)) {
              goto LABEL_74;
            }
            float v35 = *v34;
            v3[1] = v34 + 1;
            double v11 = v35;
            char v43 = 0;
            goto LABEL_7;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return outlined consume of _SymbolEffect.Trigger?(v5);
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_83;
            }
            unint64_t v16 = (double *)v3[1];
            if (v8 < (unint64_t)v16 + result) {
              goto LABEL_74;
            }
            v3[3] = 17;
            v3[4] = (char *)v16 + result;
            break;
          case 1uLL:
            unint64_t v16 = (double *)v3[1];
            break;
          default:
            goto LABEL_74;
        }
        if (v8 < (unint64_t)(v16 + 1)) {
          goto LABEL_74;
        }
        double v11 = *v16;
        v3[1] = v16 + 1;
        char v43 = 0;
        goto LABEL_7;
      case 3uLL:
        if ((result & 7) == 0) {
          goto LABEL_28;
        }
        if ((result & 7) != 2) {
          goto LABEL_74;
        }
        uint64_t v17 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
        if (v17 < 0) {
          goto LABEL_80;
        }
        unint64_t v18 = v3[1] + v17;
        if (v8 < v18) {
          goto LABEL_74;
        }
        v3[3] = 24;
        v3[4] = v18;
LABEL_28:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
        unint64_t v10 = result;
        goto LABEL_7;
      case 4uLL:
        if ((result & 7) == 0) {
          goto LABEL_36;
        }
        if ((result & 7) != 2) {
          goto LABEL_74;
        }
        uint64_t v19 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
        if (v19 < 0) {
          goto LABEL_81;
        }
        unint64_t v20 = v3[1] + v19;
        if (v8 < v20) {
          goto LABEL_74;
        }
        v3[3] = 32;
        v3[4] = v20;
LABEL_36:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
        BOOL v42 = result != 0;
        goto LABEL_7;
      case 5uLL:
        if ((result & 7) != 2) {
          goto LABEL_74;
        }
        unint64_t v40 = v10;
        uint64_t v21 = (void *)v3[5];
        BOOL v22 = v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
        }
        unint64_t v24 = v21[2];
        unint64_t v23 = v21[3];
        if (v24 >= v23 >> 1) {
          uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v21);
        }
        v21[2] = v24 + 1;
        v21[v24 + 4] = v8;
        v3[5] = v21;
        uint64_t v25 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
        if (v25 < 0)
        {
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
          __break(1u);
          uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
          uint64_t v39 = v38[2];
          if (!v39)
          {
            __break(1u);
            JUMPOUT(0x245C81438);
          }
          uint64_t v36 = v39 - 1;
          uint64_t v37 = v38[v36 + 4];
          v38[2] = v36;
          v3[5] = v38;
          v3[2] = v37;
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
        unint64_t v26 = v3[1] + v25;
        if (v8 < v26) {
          goto LABEL_74;
        }
        v3[2] = v26;
        _SymbolEffect.Trigger.init(from:)((unint64_t)v3, &v41);
        unint64_t v27 = (void *)v3[5];
        if (!v27[2]) {
          goto LABEL_79;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
          uint64_t v28 = v27[2];
          if (v28) {
            goto LABEL_49;
          }
LABEL_73:
          __break(1u);
LABEL_74:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
        uint64_t v28 = v27[2];
        if (!v28) {
          goto LABEL_73;
        }
LABEL_49:
        uint64_t v29 = v28 - 1;
        uint64_t v30 = v27[v29 + 4];
        v27[2] = v29;
        v3[5] = v27;
        v3[2] = v30;
        unint64_t v31 = v41;
        uint64_t result = outlined consume of _SymbolEffect.Trigger?(v5);
        uint64_t v5 = v31;
        BOOL v9 = v22;
        unint64_t v10 = v40;
LABEL_7:
        unint64_t v7 = v3[1];
        unint64_t v8 = v3[2];
        if (v7 < v8) {
          continue;
        }
        char v12 = v43;
        char v6 = v42;
LABEL_4:
        v3[3] = 0;
        *(void *)a2 = v5;
        *(double *)(a2 + 8) = v11;
        *(unsigned char *)(a2 + 16) = v12;
        *(_DWORD *)(a2 + 20) = v10;
        *(unsigned char *)(a2 + 24) = v6;
        *(unsigned char *)(a2 + 25) = v9;
        return result;
      case 6uLL:
        if ((result & 7) == 0) {
          goto LABEL_56;
        }
        if ((result & 7) != 2) {
          goto LABEL_74;
        }
        uint64_t v32 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
        if (v32 < 0) {
          goto LABEL_82;
        }
        unint64_t v33 = v3[1] + v32;
        if (v8 < v33) {
          goto LABEL_74;
        }
        v3[3] = 48;
        v3[4] = v33;
LABEL_56:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
        BOOL v9 = result != 0;
        goto LABEL_7;
      default:
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return outlined consume of _SymbolEffect.Trigger?(v5);
            }
            goto LABEL_7;
          case 1uLL:
            unint64_t v13 = v3[1] + 8;
            if (v8 < v13) {
              goto LABEL_74;
            }
            goto LABEL_6;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return outlined consume of _SymbolEffect.Trigger?(v5);
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_84;
            }
            unint64_t v13 = v3[1] + result;
            if (v8 < v13) {
              goto LABEL_74;
            }
LABEL_6:
            v3[1] = v13;
            break;
          case 5uLL:
            unint64_t v13 = v3[1] + 4;
            if (v8 < v13) {
              goto LABEL_74;
            }
            goto LABEL_6;
          default:
            goto LABEL_74;
        }
        goto LABEL_7;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.WiggleConfiguration(void *a1)
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.WiggleConfiguration@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.WiggleConfiguration.init(from:)(a1, a2);
}

void _SymbolEffect.RotateConfiguration.encode(to:)()
{
}

unint64_t _SymbolEffect.RotateConfiguration.init(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.BounceConfiguration.init(from:)(a1, a2);
}

unint64_t _SymbolEffect.BounceConfiguration.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)result;
  uint64_t v5 = 0xF000000000000006;
  unint64_t v6 = *(void *)(result + 8);
  unint64_t v7 = *(void *)(result + 16);
  if (v6 >= v7)
  {
    LODWORD(v8) = 0;
    LOBYTE(v9) = 1;
LABEL_4:
    v3[3] = 0;
    *(void *)a2 = v5;
    *(_DWORD *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 12) = v9;
    return result;
  }
  unint64_t v8 = 0;
  BOOL v9 = 1;
  while (1)
  {
    uint64_t result = v3[3];
    if (result)
    {
      unint64_t v11 = v3[4];
      if (v6 < v11) {
        goto LABEL_14;
      }
      if (v11 < v6) {
        goto LABEL_56;
      }
      v3[3] = 0;
    }
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return outlined consume of _SymbolEffect.Trigger?(v5);
    }
    if (result <= 7) {
      goto LABEL_56;
    }
LABEL_14:
    unint64_t v12 = result >> 3;
    if (result >> 3 == 2)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2) {
          goto LABEL_56;
        }
        uint64_t v24 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
        if (v24 < 0) {
          goto LABEL_61;
        }
        unint64_t v25 = v3[1] + v24;
        if (v7 < v25) {
          goto LABEL_56;
        }
        v3[3] = 16;
        v3[4] = v25;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return outlined consume of _SymbolEffect.Trigger?(v5);
      }
      unint64_t v8 = result;
      goto LABEL_7;
    }
    if (v12 == 3)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2) {
          goto LABEL_56;
        }
        uint64_t v26 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
        if (v26 < 0) {
          goto LABEL_62;
        }
        unint64_t v27 = v3[1] + v26;
        if (v7 < v27) {
          goto LABEL_56;
        }
        v3[3] = 24;
        v3[4] = v27;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return outlined consume of _SymbolEffect.Trigger?(v5);
      }
      BOOL v9 = result != 0;
      goto LABEL_7;
    }
    if (v12 != 4)
    {
      switch(result & 7)
      {
        case 0uLL:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return outlined consume of _SymbolEffect.Trigger?(v5);
          }
          goto LABEL_7;
        case 1uLL:
          unint64_t v10 = v3[1] + 8;
          if (v7 < v10) {
            goto LABEL_56;
          }
          goto LABEL_6;
        case 2uLL:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return outlined consume of _SymbolEffect.Trigger?(v5);
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_63;
          }
          unint64_t v10 = v3[1] + result;
          if (v7 < v10) {
            goto LABEL_56;
          }
LABEL_6:
          v3[1] = v10;
          break;
        case 5uLL:
          unint64_t v10 = v3[1] + 4;
          if (v7 < v10) {
            goto LABEL_56;
          }
          goto LABEL_6;
        default:
          goto LABEL_56;
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2) {
      goto LABEL_56;
    }
    unint64_t v32 = v8;
    uint64_t v13 = a2;
    unint64_t v14 = (void *)v3[5];
    a2 = v9;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    }
    unint64_t v16 = v14[2];
    unint64_t v15 = v14[3];
    if (v16 >= v15 >> 1) {
      unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
    }
    v14[2] = v16 + 1;
    v14[v16 + 4] = v7;
    v3[5] = v14;
    uint64_t v17 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return outlined consume of _SymbolEffect.Trigger?(v5);
    }
    if (v17 < 0) {
      break;
    }
    unint64_t v18 = v3[1] + v17;
    if (v7 < v18) {
      goto LABEL_56;
    }
    v3[2] = v18;
    _SymbolEffect.Trigger.init(from:)((unint64_t)v3, &v33);
    uint64_t v19 = (void *)v3[5];
    if (!v19[2]) {
      goto LABEL_60;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v20 = v19[2];
      if (!v20) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
      uint64_t v20 = v19[2];
      if (!v20)
      {
LABEL_55:
        __break(1u);
LABEL_56:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return outlined consume of _SymbolEffect.Trigger?(v5);
      }
    }
    uint64_t v21 = v20 - 1;
    uint64_t v22 = v19[v21 + 4];
    v19[2] = v21;
    v3[5] = v19;
    v3[2] = v22;
    unint64_t v23 = v33;
    uint64_t result = outlined consume of _SymbolEffect.Trigger?(v5);
    uint64_t v5 = v23;
    BOOL v9 = a2;
    a2 = v13;
    unint64_t v8 = v32;
LABEL_7:
    unint64_t v6 = v3[1];
    unint64_t v7 = v3[2];
    if (v6 >= v7) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
  __break(1u);
  uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
  uint64_t v31 = v30[2];
  if (!v31)
  {
    __break(1u);
    JUMPOUT(0x245C81970);
  }
  uint64_t v28 = v31 - 1;
  uint64_t v29 = v30[v28 + 4];
  v30[2] = v28;
  v3[5] = v30;
  v3[2] = v29;
  return outlined consume of _SymbolEffect.Trigger?(v5);
}

void _SymbolEffect.VariableColorConfiguration.encode(to:)()
{
  uint64_t v2 = *(void *)v0;
  Swift::UInt v3 = *(unsigned int *)(v0 + 8);
  if ((~*(void *)v0 & 0xF000000000000006) == 0)
  {
    if (!v3) {
      return;
    }
    goto LABEL_3;
  }
  outlined copy of _SymbolEffect.Trigger(v2);
  specialized ProtobufEncoder.messageField<A>(_:_:)(3, v2);
  outlined consume of _SymbolEffect.Trigger?(v2);
  if (v1) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
LABEL_3:
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(v3);
  }
}

unint64_t _SymbolEffect.VariableColorConfiguration.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  Swift::UInt v3 = (void *)result;
  uint64_t v5 = 0xF000000000000006;
  unint64_t v6 = *(void *)(result + 8);
  unint64_t v7 = *(void *)(result + 16);
  if (v6 >= v7)
  {
    int v8 = 0;
LABEL_4:
    v3[3] = 0;
    *(void *)a2 = v5;
    *(_DWORD *)(a2 + 8) = v8;
    return result;
  }
  int v8 = 0;
  while (1)
  {
    uint64_t result = v3[3];
    if (result)
    {
      unint64_t v10 = v3[4];
      if (v6 < v10) {
        goto LABEL_14;
      }
      if (v10 < v6) {
        goto LABEL_47;
      }
      v3[3] = 0;
    }
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return outlined consume of _SymbolEffect.Trigger?(v5);
    }
    if (result <= 7) {
      goto LABEL_47;
    }
LABEL_14:
    if (result >> 3 == 2)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2) {
          goto LABEL_47;
        }
        uint64_t v21 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of _SymbolEffect.Trigger?(v5);
        }
        if (v21 < 0) {
          goto LABEL_52;
        }
        unint64_t v22 = v3[1] + v21;
        if (v7 < v22) {
          goto LABEL_47;
        }
        v3[3] = 16;
        v3[4] = v22;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return outlined consume of _SymbolEffect.Trigger?(v5);
      }
      int v8 = result;
      goto LABEL_7;
    }
    if (result >> 3 != 3)
    {
      switch(result & 7)
      {
        case 0uLL:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return outlined consume of _SymbolEffect.Trigger?(v5);
          }
          goto LABEL_7;
        case 1uLL:
          unint64_t v9 = v3[1] + 8;
          if (v7 < v9) {
            goto LABEL_47;
          }
          goto LABEL_6;
        case 2uLL:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return outlined consume of _SymbolEffect.Trigger?(v5);
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_53;
          }
          unint64_t v9 = v3[1] + result;
          if (v7 < v9) {
            goto LABEL_47;
          }
LABEL_6:
          v3[1] = v9;
          break;
        case 5uLL:
          unint64_t v9 = v3[1] + 4;
          if (v7 < v9) {
            goto LABEL_47;
          }
          goto LABEL_6;
        default:
          goto LABEL_47;
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2) {
      goto LABEL_47;
    }
    unint64_t v11 = (void *)v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    }
    unint64_t v13 = v11[2];
    unint64_t v12 = v11[3];
    if (v13 >= v12 >> 1) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v11);
    }
    v11[2] = v13 + 1;
    v11[v13 + 4] = v7;
    v3[5] = v11;
    uint64_t v14 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return outlined consume of _SymbolEffect.Trigger?(v5);
    }
    if (v14 < 0) {
      break;
    }
    unint64_t v15 = v3[1] + v14;
    if (v7 < v15) {
      goto LABEL_47;
    }
    v3[2] = v15;
    _SymbolEffect.Trigger.init(from:)((unint64_t)v3, &v27);
    unint64_t v16 = (void *)v3[5];
    if (!v16[2]) {
      goto LABEL_51;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v17 = v16[2];
      if (!v17) {
        goto LABEL_46;
      }
    }
    else
    {
      unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
      uint64_t v17 = v16[2];
      if (!v17)
      {
LABEL_46:
        __break(1u);
LABEL_47:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return outlined consume of _SymbolEffect.Trigger?(v5);
      }
    }
    uint64_t v18 = v17 - 1;
    uint64_t v19 = v16[v18 + 4];
    v16[2] = v18;
    v3[5] = v16;
    v3[2] = v19;
    unint64_t v20 = v27;
    uint64_t result = outlined consume of _SymbolEffect.Trigger?(v5);
    uint64_t v5 = v20;
LABEL_7:
    unint64_t v6 = v3[1];
    unint64_t v7 = v3[2];
    if (v6 >= v7) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  __break(1u);
  unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
  uint64_t v26 = v25[2];
  if (!v26)
  {
    __break(1u);
    JUMPOUT(0x245C81D8CLL);
  }
  uint64_t v23 = v26 - 1;
  uint64_t v24 = v25[v23 + 4];
  v25[2] = v23;
  v3[5] = v25;
  v3[2] = v24;
  return outlined consume of _SymbolEffect.Trigger?(v5);
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.VariableColorConfiguration()
{
  uint64_t v2 = *(void *)v0;
  Swift::UInt v3 = *(unsigned int *)(v0 + 8);
  if ((~*(void *)v0 & 0xF000000000000006) == 0)
  {
    if (!v3) {
      return;
    }
    goto LABEL_3;
  }
  outlined copy of _SymbolEffect.Trigger(v2);
  specialized ProtobufEncoder.messageField<A>(_:_:)(3, v2);
  outlined consume of _SymbolEffect.Trigger?(v2);
  if (v1) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
LABEL_3:
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(v3);
  }
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.VariableColorConfiguration@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.VariableColorConfiguration.init(from:)(a1, a2);
}

void _SymbolEffect.ScaleConfiguration.encode(to:)()
{
  Swift::UInt v1 = *v0;
  if ((v1 & 0x80000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    int v2 = *((unsigned __int8 *)v0 + 4);
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v1);
    if (v2 != 1)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(0);
    }
  }
}

unint64_t _SymbolEffect.ScaleConfiguration.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  Swift::UInt v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    int v7 = 0;
    BOOL v8 = 1;
    while (1)
    {
      uint64_t result = v3[3];
      if (result)
      {
        unint64_t v10 = v3[4];
        if (v5 < v10) {
          goto LABEL_14;
        }
        if (v10 < v5) {
          goto LABEL_42;
        }
        v3[3] = 0;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7) {
        goto LABEL_42;
      }
LABEL_14:
      if (result >> 3 == 2)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_42;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_45;
          }
          unint64_t v12 = v3[1] + result;
          if (v6 < v12)
          {
LABEL_42:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          v3[3] = 16;
          v3[4] = v12;
        }
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        BOOL v8 = result != 0;
      }
      else if (result >> 3 == 1)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_42;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
            JUMPOUT(0x245C8214CLL);
          }
          unint64_t v11 = v3[1] + result;
          if (v6 < v11) {
            goto LABEL_42;
          }
          v3[3] = 8;
          v3[4] = v11;
        }
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        if (result >> 31) {
          int v7 = 0;
        }
        else {
          int v7 = result;
        }
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            break;
          case 1uLL:
            unint64_t v9 = v3[1] + 8;
            if (v6 >= v9) {
              goto LABEL_6;
            }
            goto LABEL_42;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_46;
            }
            unint64_t v9 = v3[1] + result;
            if (v6 < v9) {
              goto LABEL_42;
            }
LABEL_6:
            v3[1] = v9;
            break;
          case 5uLL:
            unint64_t v9 = v3[1] + 4;
            if (v6 < v9) {
              goto LABEL_42;
            }
            goto LABEL_6;
          default:
            goto LABEL_42;
        }
      }
      unint64_t v5 = v3[1];
      unint64_t v6 = v3[2];
      if (v5 >= v6) {
        goto LABEL_4;
      }
    }
  }
  int v7 = 0;
  BOOL v8 = 1;
LABEL_4:
  v3[3] = 0;
  *(_DWORD *)a2 = v7;
  *(unsigned char *)(a2 + 4) = v8;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.ScaleConfiguration()
{
  Swift::UInt v1 = *v0;
  if ((v1 & 0x80000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    char v2 = *((unsigned char *)v0 + 4);
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v1);
    if ((v2 & 1) == 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(0);
    }
  }
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.ScaleConfiguration@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.ScaleConfiguration.init(from:)(a1, a2);
}

void _SymbolEffect.HiddenConfiguration.encode(to:)()
{
  Swift::UInt v1 = *v0;
  char v2 = *((unsigned char *)v0 + 4);
  if (*((unsigned char *)v0 + 5))
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if (v1)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(v1);
  }
  if ((v2 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
  }
}

unint64_t _SymbolEffect.HiddenConfiguration.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  Swift::UInt v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    BOOL v7 = 0;
    int v8 = 0;
    BOOL v9 = 1;
    while (1)
    {
      uint64_t result = v3[3];
      if (result)
      {
        unint64_t v11 = v3[4];
        if (v5 < v11) {
          goto LABEL_14;
        }
        if (v11 < v5) {
          goto LABEL_49;
        }
        v3[3] = 0;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7) {
        goto LABEL_49;
      }
LABEL_14:
      unint64_t v12 = result >> 3;
      if (result >> 3 == 3)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_49;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_52;
          }
          unint64_t v14 = v3[1] + result;
          if (v6 < v14) {
            goto LABEL_49;
          }
          v3[3] = 24;
          v3[4] = v14;
        }
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        BOOL v9 = result != 0;
      }
      else if (v12 == 2)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_49;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_53;
          }
          unint64_t v15 = v3[1] + result;
          if (v6 < v15)
          {
LABEL_49:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          v3[3] = 16;
          v3[4] = v15;
        }
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        int v8 = result;
      }
      else if (v12 == 1)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_49;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            JUMPOUT(0x245C82564);
          }
          unint64_t v13 = v3[1] + result;
          if (v6 < v13) {
            goto LABEL_49;
          }
          v3[3] = 8;
          v3[4] = v13;
        }
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        BOOL v7 = result != 0;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            break;
          case 1uLL:
            unint64_t v10 = v3[1] + 8;
            if (v6 >= v10) {
              goto LABEL_6;
            }
            goto LABEL_49;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_54;
            }
            unint64_t v10 = v3[1] + result;
            if (v6 < v10) {
              goto LABEL_49;
            }
LABEL_6:
            v3[1] = v10;
            break;
          case 5uLL:
            unint64_t v10 = v3[1] + 4;
            if (v6 < v10) {
              goto LABEL_49;
            }
            goto LABEL_6;
          default:
            goto LABEL_49;
        }
      }
      unint64_t v5 = v3[1];
      unint64_t v6 = v3[2];
      if (v5 >= v6) {
        goto LABEL_4;
      }
    }
  }
  BOOL v7 = 0;
  int v8 = 0;
  BOOL v9 = 1;
LABEL_4:
  v3[3] = 0;
  *(_DWORD *)a2 = v8;
  *(unsigned char *)(a2 + 4) = v9;
  *(unsigned char *)(a2 + 5) = v7;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.HiddenConfiguration()
{
  Swift::UInt v1 = *v0;
  char v2 = *((unsigned char *)v0 + 4);
  if (*((unsigned char *)v0 + 5) == 1)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if (v1)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(v1);
  }
  if ((v2 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
  }
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.HiddenConfiguration@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.HiddenConfiguration.init(from:)(a1, a2);
}

void _SymbolEffect.ReplaceConfiguration.encode(to:)(void *a1)
{
  char v2 = v1;
  Swift::UInt v4 = *v2;
  char v5 = *((unsigned char *)v2 + 4);
  float v6 = *((float *)v2 + 2);
  if (v4)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v4);
  }
  if ((v5 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
  }
  if (v6 != 1.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
    uint64_t v7 = a1[1];
    int64_t v8 = v7 + 4;
    if (__OFADD__(v7, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v8)
    {
      a1[1] = v8;
      *(float *)(*a1 + v7) = v6;
      return;
    }
    *(float *)ProtobufEncoder.growBufferSlow(to:)(v8) = v6;
  }
}

unint64_t _SymbolEffect.ReplaceConfiguration.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  Swift::UInt v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    int v7 = 0;
    float v8 = 1.0;
    BOOL v9 = 1;
    while (1)
    {
      uint64_t result = v3[3];
      if (result)
      {
        unint64_t v11 = v3[4];
        if (v5 < v11) {
          goto LABEL_14;
        }
        if (v11 < v5) {
          goto LABEL_50;
        }
        v3[3] = 0;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7) {
        goto LABEL_50;
      }
LABEL_14:
      unint64_t v12 = result >> 3;
      if (result >> 3 == 3)
      {
        if ((result & 7) == 2)
        {
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_54;
          }
          unint64_t v14 = (float *)v3[1];
          if (v6 < (unint64_t)v14 + result) {
            goto LABEL_50;
          }
          v3[3] = 29;
          v3[4] = (char *)v14 + result;
        }
        else
        {
          if ((result & 7) != 5) {
            goto LABEL_50;
          }
          unint64_t v14 = (float *)v3[1];
        }
        if (v6 < (unint64_t)(v14 + 1)) {
          goto LABEL_50;
        }
        float v8 = *v14;
        v3[1] = v14 + 1;
      }
      else if (v12 == 2)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_50;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_53;
          }
          unint64_t v15 = v3[1] + result;
          if (v6 < v15)
          {
LABEL_50:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          v3[3] = 16;
          v3[4] = v15;
        }
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        BOOL v9 = result != 0;
      }
      else if (v12 == 1)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_50;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
            JUMPOUT(0x245C82994);
          }
          unint64_t v13 = v3[1] + result;
          if (v6 < v13) {
            goto LABEL_50;
          }
          v3[3] = 8;
          v3[4] = v13;
        }
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        int v7 = result;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            break;
          case 1uLL:
            unint64_t v10 = v3[1] + 8;
            if (v6 >= v10) {
              goto LABEL_6;
            }
            goto LABEL_50;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_55;
            }
            unint64_t v10 = v3[1] + result;
            if (v6 < v10) {
              goto LABEL_50;
            }
LABEL_6:
            v3[1] = v10;
            break;
          case 5uLL:
            unint64_t v10 = v3[1] + 4;
            if (v6 < v10) {
              goto LABEL_50;
            }
            goto LABEL_6;
          default:
            goto LABEL_50;
        }
      }
      unint64_t v5 = v3[1];
      unint64_t v6 = v3[2];
      if (v5 >= v6) {
        goto LABEL_4;
      }
    }
  }
  int v7 = 0;
  float v8 = 1.0;
  BOOL v9 = 1;
LABEL_4:
  v3[3] = 0;
  *(_DWORD *)a2 = v7;
  *(unsigned char *)(a2 + 4) = v9;
  *(float *)(a2 + 8) = v8;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _SymbolEffect.ReplaceConfiguration(void *a1)
{
  uint64_t v2 = v1;
  Swift::UInt v4 = *v2;
  char v5 = *((unsigned char *)v2 + 4);
  float v6 = *((float *)v2 + 2);
  if (v4)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v4);
  }
  if ((v5 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
  }
  if (v6 != 1.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
    uint64_t v7 = a1[1];
    int64_t v8 = v7 + 4;
    if (__OFADD__(v7, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v8)
    {
      a1[1] = v8;
      BOOL v9 = (float *)(*a1 + v7);
LABEL_9:
      *BOOL v9 = v6;
      return;
    }
    BOOL v9 = (float *)ProtobufEncoder.growBufferSlow(to:)(v8);
    goto LABEL_9;
  }
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _SymbolEffect.ReplaceConfiguration@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _SymbolEffect.ReplaceConfiguration.init(from:)(a1, a2);
}

BOOL _SymbolEffect.isIndefinite.getter()
{
  if ((*(unsigned char *)(v0 + 36) & 1) == 0) {
    return (~*(_DWORD *)(v0 + 32) & 0x7F800000) == 0;
  }
  unsigned int v1 = *(unsigned __int16 *)(v0 + 24);
  if (v1 >> 12 > 5) {
    return 1;
  }
  if ((~*(void *)v0 & 0xF000000000000006) == 0)
  {
    outlined consume of _SymbolEffect.Storage(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), v1);
    return 1;
  }
  return 0;
}

BOOL specialized static _SymbolEffect.Options.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(float *)a1 != *(float *)a2) {
    return 0;
  }
  char v2 = *(unsigned char *)(a2 + 8);
  char v3 = *(unsigned char *)(a2 + 16);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(float *)(a1 + 4) != *(float *)(a2 + 4)) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    if (*(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      char v3 = 1;
    }
    return (v3 & 1) == 0;
  }
  return (*(unsigned char *)(a2 + 16) & 1) != 0;
}

uint64_t specialized static _SymbolEffect.== infix(_:_:)(long long *a1, long long *a2)
{
  uint64_t v2 = *((void *)a1 + 2);
  __int16 v3 = *((_WORD *)a1 + 12);
  float v5 = *((float *)a1 + 7);
  float v4 = *((float *)a1 + 8);
  char v6 = *((unsigned char *)a1 + 36);
  float v7 = *((float *)a1 + 10);
  char v8 = *((unsigned char *)a1 + 44);
  uint64_t v9 = *((void *)a2 + 2);
  __int16 v10 = *((_WORD *)a2 + 12);
  float v12 = *((float *)a2 + 7);
  float v11 = *((float *)a2 + 8);
  int v13 = *((unsigned __int8 *)a2 + 36);
  float v14 = *((float *)a2 + 10);
  char v15 = *((unsigned char *)a2 + 44);
  long long v23 = *a1;
  uint64_t v24 = v2;
  __int16 v25 = v3;
  long long v20 = *a2;
  uint64_t v21 = v9;
  __int16 v22 = v10;
  char v16 = specialized static _SymbolEffect.Storage.== infix(_:_:)((uint64_t)&v23, (uint64_t)&v20);
  uint64_t result = 0;
  if ((v16 & 1) != 0 && v5 == v12)
  {
    if (v6)
    {
      if (!v13) {
        return 0;
      }
    }
    else
    {
      if (v4 == v11) {
        char v18 = v13;
      }
      else {
        char v18 = 1;
      }
      if (v18) {
        return 0;
      }
    }
    if (v8)
    {
      if ((v15 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v7 == v14) {
        char v19 = v15;
      }
      else {
        char v19 = 1;
      }
      if (v19) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t specialized static _SymbolEffect.Phase.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a1 + 12);
  float v4 = *(float *)(a1 + 16);
  float v5 = *(float *)(a1 + 20);
  char v6 = *(unsigned char *)(a1 + 24);
  float v7 = *(float *)(a1 + 28);
  char v8 = *(unsigned char *)(a1 + 32);
  int v38 = *(unsigned __int8 *)(a1 + 40);
  int v39 = *(_DWORD *)(a1 + 36);
  int v37 = *(unsigned __int8 *)(a1 + 41);
  float v9 = *(float *)(a1 + 44);
  float v32 = *(float *)(a1 + 48);
  float v28 = *(float *)(a1 + 56);
  char v33 = *(unsigned char *)(a1 + 60);
  int v29 = *(unsigned __int8 *)(a1 + 61);
  int v10 = *(_DWORD *)(a2 + 8);
  int v11 = *(unsigned __int8 *)(a2 + 12);
  float v13 = *(float *)(a2 + 16);
  float v12 = *(float *)(a2 + 20);
  int v14 = *(unsigned __int8 *)(a2 + 24);
  float v15 = *(float *)(a2 + 28);
  char v16 = *(unsigned char *)(a2 + 32);
  int v17 = *(_DWORD *)(a2 + 36);
  int v18 = *(unsigned __int8 *)(a2 + 40);
  char v35 = *(unsigned char *)(a1 + 52);
  int v36 = *(unsigned __int8 *)(a2 + 41);
  float v19 = *(float *)(a2 + 44);
  float v30 = *(float *)(a2 + 48);
  int v34 = *(unsigned __int8 *)(a2 + 52);
  float v26 = *(float *)(a2 + 56);
  int v31 = *(unsigned __int8 *)(a2 + 60);
  int v27 = *(unsigned __int8 *)(a2 + 61);
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) == 0) {
    return 0;
  }
  uint64_t result = 0;
  if (v2 != v10 || ((v3 ^ v11) & 1) != 0) {
    return result;
  }
  if (v4 != v13) {
    goto LABEL_19;
  }
  if (v6)
  {
    if (!v14) {
      goto LABEL_19;
    }
  }
  else
  {
    if (v5 == v12) {
      char v21 = v14;
    }
    else {
      char v21 = 1;
    }
    if (v21) {
      goto LABEL_19;
    }
  }
  if (v8)
  {
    if ((v16 & 1) == 0)
    {
LABEL_19:
      char v22 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    if (v7 == v15) {
      char v23 = v16;
    }
    else {
      char v23 = 1;
    }
    if (v23) {
      goto LABEL_19;
    }
  }
  char v22 = 0;
LABEL_20:
  uint64_t result = 0;
  if ((v22 & 1) == 0 && v39 == v17 && ((v38 ^ v18) & 1) == 0 && ((v37 ^ v36) & 1) == 0 && v9 == v19)
  {
    if (v35)
    {
      if (!v34) {
        return 0;
      }
    }
    else
    {
      char v24 = v34;
      if (v32 != v30) {
        char v24 = 1;
      }
      if (v24) {
        return 0;
      }
    }
    if (v33)
    {
      if (!v31) {
        return 0;
      }
    }
    else
    {
      char v25 = v31;
      if (v28 != v26) {
        char v25 = 1;
      }
      if (v25) {
        return 0;
      }
    }
    return v29 ^ v27 ^ 1u;
  }
  return result;
}

uint64_t specialized static _SymbolEffect.Added.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
    return 0;
  }
  float v4 = *(float *)(a2 + 48);
  float v5 = *(float *)(a1 + 48);
  int v6 = *(_DWORD *)(a2 + 44);
  __int16 v7 = *(_WORD *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 32);
  int v9 = *(_DWORD *)(a1 + 44);
  __int16 v10 = *(_WORD *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 32);
  long long v16 = *(_OWORD *)(a1 + 16);
  uint64_t v17 = v11;
  __int16 v18 = v10;
  long long v13 = *(_OWORD *)(a2 + 16);
  uint64_t v14 = v8;
  __int16 v15 = v7;
  unsigned int v12 = specialized static _SymbolEffect.Storage.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v13) & (v9 == v6);
  if (v5 == v4) {
    return v12;
  }
  else {
    return 0;
  }
}

BOOL specialized static _SymbolEffect.VariableColorConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  if ((~*(void *)a1 & 0xF000000000000006) == 0)
  {
    if ((~v4 & 0xF000000000000006) == 0) {
      return v3 == v5;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)a1;
  if ((~v4 & 0xF000000000000006) == 0)
  {
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined consume of _SymbolEffect.Trigger(v2);
LABEL_6:
    outlined copy of _SymbolEffect.Trigger?(v4);
    outlined consume of _SymbolEffect.Trigger?(v2);
    outlined consume of _SymbolEffect.Trigger?(v4);
    return 0;
  }
  uint64_t v8 = v4;
  outlined copy of _SymbolEffect.Trigger(v2);
  outlined copy of _SymbolEffect.Trigger(v2);
  char v6 = specialized static PlaybackMode.== infix(_:_:)(&v9, &v8);
  outlined consume of _SymbolEffect.Trigger(v9);
  outlined consume of _SymbolEffect.Trigger?(v2);
  if (v6) {
    return v3 == v5;
  }
  return 0;
}

uint64_t specialized static _SymbolEffect.WiggleConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  double v3 = *(double *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 20);
  int v6 = *(unsigned __int8 *)(a1 + 24);
  int v7 = *(unsigned __int8 *)(a1 + 25);
  uint64_t v8 = *(void *)a2;
  double v9 = *(double *)(a2 + 8);
  int v10 = *(unsigned __int8 *)(a2 + 16);
  int v11 = *(_DWORD *)(a2 + 20);
  int v12 = *(unsigned __int8 *)(a2 + 24);
  int v13 = *(unsigned __int8 *)(a2 + 25);
  if ((~*(void *)a1 & 0xF000000000000006) != 0)
  {
    uint64_t v18 = *(void *)a1;
    if ((~v8 & 0xF000000000000006) != 0)
    {
      uint64_t v17 = v8;
      outlined copy of _SymbolEffect.Trigger(v2);
      outlined copy of _SymbolEffect.Trigger(v2);
      char v15 = specialized static PlaybackMode.== infix(_:_:)(&v18, &v17);
      outlined consume of _SymbolEffect.Trigger(v18);
      outlined consume of _SymbolEffect.Trigger?(v2);
      if (v15) {
        goto LABEL_10;
      }
      return 0;
    }
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined consume of _SymbolEffect.Trigger(v2);
LABEL_6:
    outlined copy of _SymbolEffect.Trigger?(v8);
    outlined consume of _SymbolEffect.Trigger?(v2);
    outlined consume of _SymbolEffect.Trigger?(v8);
    return 0;
  }
  if ((~v8 & 0xF000000000000006) != 0) {
    goto LABEL_6;
  }
LABEL_10:
  uint64_t result = 0;
  if (v4)
  {
    if (!v10 || v5 != v11) {
      return result;
    }
LABEL_20:
    if (((v6 ^ v12) & 1) == 0) {
      return v7 ^ v13 ^ 1u;
    }
    return result;
  }
  if ((v10 & 1) == 0 && v3 == v9 && v5 == v11) {
    goto LABEL_20;
  }
  return result;
}

uint64_t specialized static _SymbolEffect.RotateConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 12);
  uint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 12);
  if ((~*(void *)a1 & 0xF000000000000006) == 0)
  {
    if ((~v5 & 0xF000000000000006) == 0)
    {
      if (v3 == v6) {
        return v4 ^ v7 ^ 1u;
      }
      return 0;
    }
LABEL_7:
    outlined copy of _SymbolEffect.Trigger?(v5);
    outlined consume of _SymbolEffect.Trigger?(v2);
    outlined consume of _SymbolEffect.Trigger?(v5);
    return 0;
  }
  uint64_t v11 = *(void *)a1;
  if ((~v5 & 0xF000000000000006) == 0)
  {
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined consume of _SymbolEffect.Trigger(v2);
    goto LABEL_7;
  }
  uint64_t v10 = v5;
  outlined copy of _SymbolEffect.Trigger(v2);
  outlined copy of _SymbolEffect.Trigger(v2);
  char v9 = specialized static PlaybackMode.== infix(_:_:)(&v11, &v10);
  outlined consume of _SymbolEffect.Trigger(v11);
  outlined consume of _SymbolEffect.Trigger?(v2);
  uint64_t result = 0;
  if ((v9 & 1) != 0 && v3 == v6) {
    return v4 ^ v7 ^ 1u;
  }
  return result;
}

uint64_t specialized static _SymbolEffect.PulseConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v4 = *(void *)a2;
  int v5 = *(unsigned __int8 *)(a2 + 8);
  if ((~*(void *)a1 & 0xF000000000000006) == 0)
  {
    if ((~v4 & 0xF000000000000006) == 0) {
      return v3 ^ v5 ^ 1u;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)a1;
  if ((~v4 & 0xF000000000000006) == 0)
  {
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined copy of _SymbolEffect.Trigger(v2);
    outlined consume of _SymbolEffect.Trigger(v2);
LABEL_6:
    outlined copy of _SymbolEffect.Trigger?(v4);
    outlined consume of _SymbolEffect.Trigger?(v2);
    outlined consume of _SymbolEffect.Trigger?(v4);
    return 0;
  }
  uint64_t v8 = v4;
  outlined copy of _SymbolEffect.Trigger?(v2);
  outlined copy of _SymbolEffect.Trigger(v2);
  char v6 = specialized static PlaybackMode.== infix(_:_:)(&v9, &v8);
  outlined consume of _SymbolEffect.Trigger(v9);
  outlined consume of _SymbolEffect.Trigger?(v2);
  if (v6) {
    return v3 ^ v5 ^ 1u;
  }
  return 0;
}

uint64_t specialized static _SymbolEffect.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unsigned int v5 = *(unsigned __int16 *)(a1 + 24);
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  unsigned int v9 = *(unsigned __int16 *)(a2 + 24);
  switch(v5 >> 12)
  {
    case 1u:
      if ((v9 & 0xF000) == 0x1000) {
        goto LABEL_11;
      }
      goto LABEL_15;
    case 2u:
      if ((v9 & 0xF000) != 0x2000) {
        goto LABEL_15;
      }
      goto LABEL_11;
    case 3u:
      if ((v9 & 0xF000) != 0x3000) {
        goto LABEL_15;
      }
      uint64_t v19 = *(void *)a1;
      uint64_t v20 = v3;
      char v21 = v4 & 1;
      int v22 = HIDWORD(v4);
      __int16 v23 = v5 & 0x101;
      uint64_t v14 = v6;
      uint64_t v15 = v7;
      char v16 = v8 & 1;
      int v17 = HIDWORD(v8);
      __int16 v18 = v9 & 0x101;
      outlined copy of _SymbolEffect.Storage(v6, v7, v8, v9);
      outlined copy of _SymbolEffect.Storage(v2, v3, v4, v5);
      outlined copy of _SymbolEffect.Storage(v6, v7, v8, v9);
      outlined copy of _SymbolEffect.Storage(v2, v3, v4, v5);
      char v10 = specialized static _SymbolEffect.WiggleConfiguration.== infix(_:_:)((uint64_t)&v19, (uint64_t)&v14);
      goto LABEL_14;
    case 4u:
      if ((v9 & 0xF000) != 0x4000) {
        goto LABEL_15;
      }
LABEL_11:
      uint64_t v19 = *(void *)a1;
      LODWORD(v20) = v3;
      BYTE4(v20) = BYTE4(v3) & 1;
      uint64_t v14 = v6;
      LODWORD(v15) = v7;
      BYTE4(v15) = BYTE4(v7) & 1;
      outlined copy of _SymbolEffect.Storage(v6, v7, v8, v9);
      outlined copy of _SymbolEffect.Storage(v2, v3, v4, v5);
      outlined copy of _SymbolEffect.Storage(v6, v7, v8, v9);
      outlined copy of _SymbolEffect.Storage(v2, v3, v4, v5);
      char v10 = specialized static _SymbolEffect.RotateConfiguration.== infix(_:_:)((uint64_t)&v19, (uint64_t)&v14);
      goto LABEL_14;
    case 5u:
      if ((v9 & 0xF000) != 0x5000) {
        goto LABEL_15;
      }
      uint64_t v19 = *(void *)a1;
      LODWORD(v20) = v3;
      uint64_t v14 = v6;
      LODWORD(v15) = v7;
      outlined copy of _SymbolEffect.Storage(v6, v7, v8, v9);
      outlined copy of _SymbolEffect.Storage(v2, v3, v4, v5);
      outlined copy of _SymbolEffect.Storage(v6, v7, v8, v9);
      outlined copy of _SymbolEffect.Storage(v2, v3, v4, v5);
      char v10 = specialized static _SymbolEffect.VariableColorConfiguration.== infix(_:_:)((uint64_t)&v19, (uint64_t)&v14);
      goto LABEL_14;
    case 6u:
      if ((v9 & 0xF000) != 0x6000) {
        goto LABEL_16;
      }
      outlined consume of _SymbolEffect.Storage(*(void *)a1, v3, v4, v5);
      outlined consume of _SymbolEffect.Storage(v6, v7, v8, v9);
      if (v2 == v6) {
        char v11 = ((v2 & 0x100000000) == 0) ^ BYTE4(v6) & 1;
      }
      else {
        char v11 = 0;
      }
      return v11 & 1;
    case 7u:
      if ((v9 & 0xF000) != 0x7000) {
        goto LABEL_16;
      }
      outlined consume of _SymbolEffect.Storage(v2, v3, v4, v5);
      outlined consume of _SymbolEffect.Storage(v6, v7, v8, v9);
      char v11 = (v2 == v6) & (((v2 & 0x100000000) == 0) ^ BYTE4(v6)) & (((v2 & 0x10000000000) == 0) ^ BYTE5(v6) & 1);
      return v11 & 1;
    case 8u:
      BOOL v13 = (v9 & 0xF000) == 0x8000 && (v7 | v6 | v8) == 0;
      if (!v13 || v9 != 0x8000) {
        goto LABEL_16;
      }
      outlined consume of _SymbolEffect.Storage(*(void *)a1, v3, v4, v5);
      outlined consume of _SymbolEffect.Storage(0, 0, 0, 0x8000u);
      char v11 = 1;
      return v11 & 1;
    default:
      if (v9 >= 0x1000)
      {
LABEL_15:
        outlined copy of _SymbolEffect.Trigger?(*(void *)a1);
LABEL_16:
        outlined copy of _SymbolEffect.Storage(v6, v7, v8, v9);
        outlined consume of _SymbolEffect.Storage(v2, v3, v4, v5);
        outlined consume of _SymbolEffect.Storage(v6, v7, v8, v9);
        char v11 = 0;
      }
      else
      {
        uint64_t v19 = *(void *)a1;
        LOBYTE(v20) = v3 & 1;
        uint64_t v14 = v6;
        LOBYTE(v15) = v7 & 1;
        outlined copy of _SymbolEffect.Storage(v6, v7, v8, v9);
        outlined copy of _SymbolEffect.Storage(v2, v3, v4, v5);
        outlined copy of _SymbolEffect.Storage(v6, v7, v8, v9);
        outlined copy of _SymbolEffect.Storage(v2, v3, v4, v5);
        char v10 = specialized static _SymbolEffect.PulseConfiguration.== infix(_:_:)((uint64_t)&v19, (uint64_t)&v14);
LABEL_14:
        char v11 = v10;
        outlined consume of _SymbolEffect.Storage(v2, v3, v4, v5);
        outlined consume of _SymbolEffect.Storage(v6, v7, v8, v9);
        outlined consume of _SymbolEffect.Storage(v6, v7, v8, v9);
        outlined consume of _SymbolEffect.Storage(v2, v3, v4, v5);
      }
      return v11 & 1;
  }
}

uint64_t outlined copy of _SymbolEffect.Trigger?(uint64_t result)
{
  if ((~result & 0xF000000000000006) != 0) {
    return outlined copy of _SymbolEffect.Trigger(result);
  }
  return result;
}

uint64_t outlined copy of _SymbolEffect.Storage(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if ((unsigned __int16)(a4 >> 12) <= 5u) {
    return outlined copy of _SymbolEffect.Trigger?(result);
  }
  return result;
}

uint64_t outlined consume of _SymbolEffect.Storage(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if ((unsigned __int16)(a4 >> 12) <= 5u) {
    return outlined consume of _SymbolEffect.Trigger?(result);
  }
  return result;
}

uint64_t specialized static _SymbolEffect.Identified.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    unsigned __int16 v6 = *(_WORD *)(a1 + 40);
    float v8 = *(float *)(a1 + 44);
    float v7 = *(float *)(a1 + 48);
    char v9 = *(unsigned char *)(a1 + 52);
    float v10 = *(float *)(a1 + 56);
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v12 = *(void *)(a2 + 24);
    uint64_t v13 = *(void *)(a2 + 32);
    unsigned __int16 v14 = *(_WORD *)(a2 + 40);
    float v16 = *(float *)(a2 + 44);
    float v15 = *(float *)(a2 + 48);
    int v17 = *(unsigned __int8 *)(a2 + 52);
    float v18 = *(float *)(a2 + 56);
    char v22 = *(unsigned char *)(a2 + 60);
    char v23 = *(unsigned char *)(a1 + 60);
    v26[0] = v3;
    v26[1] = v4;
    v26[2] = v5;
    unsigned __int16 v27 = v6;
    v24[0] = v11;
    v24[1] = v12;
    v24[2] = v13;
    unsigned __int16 v25 = v14;
    outlined copy of _SymbolEffect.Storage(v3, v4, v5, v6);
    outlined copy of _SymbolEffect.Storage(v11, v12, v13, v14);
    if ((specialized static _SymbolEffect.Storage.== infix(_:_:)((uint64_t)v26, (uint64_t)v24) & 1) == 0 || v8 != v16) {
      goto LABEL_18;
    }
    if (v9)
    {
      if (!v17) {
        goto LABEL_18;
      }
    }
    else
    {
      if (v7 == v15) {
        char v19 = v17;
      }
      else {
        char v19 = 1;
      }
      if (v19) {
        goto LABEL_18;
      }
    }
    if (v23)
    {
      if ((v22 & 1) == 0)
      {
LABEL_18:
        uint64_t v2 = 0;
        goto LABEL_19;
      }
    }
    else
    {
      char v20 = v22;
      if (v10 != v18) {
        char v20 = 1;
      }
      if (v20) {
        goto LABEL_18;
      }
    }
    uint64_t v2 = 1;
LABEL_19:
    outlined consume of _SymbolEffect.Storage(v11, v12, v13, v14);
    outlined consume of _SymbolEffect.Storage(v3, v4, v5, v6);
  }
  return v2;
}

uint64_t outlined consume of _SymbolEffect.Storage?(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if ((~a3 & 0xFFFFFFFE) != 0 || (a4 & 0xFEFE) != 2) {
    return outlined consume of _SymbolEffect.Storage(result, a2, a3, a4);
  }
  return result;
}

uint64_t sub_245C839AC()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues._set<A>(_:for:)(v0);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _SymbolEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unsigned __int16 v7 = *(_WORD *)(a2 + 24);
  outlined copy of _SymbolEffect.Storage(*(void *)a2, v5, v6, v7);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(_WORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  return a1;
}

uint64_t assignWithCopy for _SymbolEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unsigned __int16 v7 = *(_WORD *)(a2 + 24);
  outlined copy of _SymbolEffect.Storage(*(void *)a2, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  unsigned __int16 v11 = *(_WORD *)(a1 + 24);
  *(_WORD *)(a1 + 24) = v7;
  outlined consume of _SymbolEffect.Storage(v8, v9, v10, v11);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  int v12 = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v12;
  int v13 = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v13;
  return a1;
}

uint64_t assignWithTake for _SymbolEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  __int16 v5 = *(_WORD *)(a2 + 24);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  unsigned __int16 v9 = *(_WORD *)(a1 + 24);
  *(_WORD *)(a1 + 24) = v5;
  outlined consume of _SymbolEffect.Storage(v6, v7, v8, v9);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 45)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(_DWORD *)(a1 + 16) >> 1) & 0x7FFFFFFF | ((*(unsigned __int16 *)(a1 + 24) >> 1) << 31);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 45) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (-2 * a2);
      *(_WORD *)(result + 24) = 2;
      return result;
    }
    *(unsigned char *)(result + 45) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect()
{
  return &type metadata for _SymbolEffect;
}

uint64_t destroy for _SymbolEffect.Storage(uint64_t a1)
{
  return outlined consume of _SymbolEffect.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_WORD *)(a1 + 24));
}

uint64_t initializeWithCopy for _SymbolEffect.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int16 v6 = *(_WORD *)(a2 + 24);
  outlined copy of _SymbolEffect.Storage(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for _SymbolEffect.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int16 v6 = *(_WORD *)(a2 + 24);
  outlined copy of _SymbolEffect.Storage(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int16 v10 = *(_WORD *)(a1 + 24);
  *(_WORD *)(a1 + 24) = v6;
  outlined consume of _SymbolEffect.Storage(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for _SymbolEffect.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  __int16 v4 = *(_WORD *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int16 v8 = *(_WORD *)(a1 + 24);
  *(_WORD *)(a1 + 24) = v4;
  outlined consume of _SymbolEffect.Storage(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect.Storage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 26)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(_DWORD *)(a1 + 16) >> 1) & 0x7FFFFFFF | ((*(unsigned __int16 *)(a1 + 24) >> 1) << 31);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect.Storage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (-2 * a2);
      *(_WORD *)(result + 24) = 2;
      return result;
    }
    *(unsigned char *)(result + 26) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for _SymbolEffect.Storage(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 24);
  int v2 = (__int16)v1;
  unsigned int v3 = v1 >> 12;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 + 8);
  }
}

uint64_t destructiveProjectEnumData for _SymbolEffect.Storage(uint64_t result)
{
  *(_WORD *)(result + 24) &= 0xFFFu;
  return result;
}

uint64_t destructiveInjectEnumTag for _SymbolEffect.Storage(uint64_t result, unsigned int a2)
{
  if (a2 < 8)
  {
    __int16 v2 = *(_WORD *)(result + 24) & 0x101 | ((_WORD)a2 << 12);
    *(void *)(result + 16) &= 0xFFFFFFFF00000001;
    *(_WORD *)(result + 24) = v2;
  }
  else
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 8;
    *(_WORD *)(result + 24) = 0x8000;
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect.Storage()
{
  return &type metadata for _SymbolEffect.Storage;
}

ValueMetadata *type metadata accessor for _SymbolEffect.Trigger()
{
  return &type metadata for _SymbolEffect.Trigger;
}

ValueMetadata *type metadata accessor for _SymbolEffect.Options()
{
  return &type metadata for _SymbolEffect.Options;
}

uint64_t destroy for _SymbolEffect.PulseConfiguration(uint64_t *a1)
{
  uint64_t result = *a1;
  if ((~result & 0xF000000000000006) != 0) {
    return outlined consume of _SymbolEffect.Trigger(result);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for _SymbolEffect.PulseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  if ((~*(void *)a2 & 0xF000000000000006) != 0) {
    outlined copy of _SymbolEffect.Trigger(*(void *)a2);
  }
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithCopy for _SymbolEffect.PulseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)a2 & 0xF000000000000006;
  if ((~*(void *)a1 & 0xF000000000000006) != 0)
  {
    if (v5 == 0xF000000000000006)
    {
      outlined destroy of _SymbolEffect.Trigger((uint64_t *)a1);
      *(void *)a1 = *(void *)a2;
    }
    else
    {
      outlined copy of _SymbolEffect.Trigger(*(void *)a2);
      uint64_t v6 = *(void *)a1;
      *(void *)a1 = v4;
      outlined consume of _SymbolEffect.Trigger(v6);
    }
  }
  else
  {
    if (v5 != 0xF000000000000006) {
      outlined copy of _SymbolEffect.Trigger(*(void *)a2);
    }
    *(void *)a1 = v4;
  }
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t *outlined destroy of _SymbolEffect.Trigger(uint64_t *a1)
{
  return a1;
}

uint64_t assignWithTake for _SymbolEffect.PulseConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *a2;
  if ((~v4 & 0xF000000000000006) != 0)
  {
    if ((~v5 & 0xF000000000000006) != 0)
    {
      *(void *)a1 = v5;
      outlined consume of _SymbolEffect.Trigger(v4);
      goto LABEL_6;
    }
    outlined destroy of _SymbolEffect.Trigger((uint64_t *)a1);
  }
  *(void *)a1 = v5;
LABEL_6:
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for _SymbolEffect.PulseConfiguration()
{
  return &type metadata for _SymbolEffect.PulseConfiguration;
}

ValueMetadata *type metadata accessor for _SymbolEffect.BreatheConfiguration()
{
  return &type metadata for _SymbolEffect.BreatheConfiguration;
}

ValueMetadata *type metadata accessor for _SymbolEffect.BounceConfiguration()
{
  return &type metadata for _SymbolEffect.BounceConfiguration;
}

uint64_t initializeWithCopy for _SymbolEffect.WiggleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  if ((~*(void *)a2 & 0xF000000000000006) != 0) {
    outlined copy of _SymbolEffect.Trigger(*(void *)a2);
  }
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for _SymbolEffect.WiggleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)a2 & 0xF000000000000006;
  if ((~*(void *)a1 & 0xF000000000000006) != 0)
  {
    if (v5 == 0xF000000000000006)
    {
      outlined destroy of _SymbolEffect.Trigger((uint64_t *)a1);
      *(void *)a1 = *(void *)a2;
    }
    else
    {
      outlined copy of _SymbolEffect.Trigger(*(void *)a2);
      uint64_t v6 = *(void *)a1;
      *(void *)a1 = v4;
      outlined consume of _SymbolEffect.Trigger(v6);
    }
  }
  else
  {
    if (v5 != 0xF000000000000006) {
      outlined copy of _SymbolEffect.Trigger(*(void *)a2);
    }
    *(void *)a1 = v4;
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

uint64_t assignWithTake for _SymbolEffect.WiggleConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *a2;
  if ((~v4 & 0xF000000000000006) != 0)
  {
    if ((~v5 & 0xF000000000000006) != 0)
    {
      *(void *)a1 = v5;
      outlined consume of _SymbolEffect.Trigger(v4);
      goto LABEL_6;
    }
    outlined destroy of _SymbolEffect.Trigger((uint64_t *)a1);
  }
  *(void *)a1 = v5;
LABEL_6:
  *(void *)(a1 + 8) = a2[1];
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(unsigned char *)(a1 + 25) = *((unsigned char *)a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect.WiggleConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 26)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect.WiggleConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 26) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect.WiggleConfiguration()
{
  return &type metadata for _SymbolEffect.WiggleConfiguration;
}

uint64_t initializeBufferWithCopyOfBuffer for _SymbolEffect.BreatheConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  if ((~*(void *)a2 & 0xF000000000000006) != 0) {
    outlined copy of _SymbolEffect.Trigger(*(void *)a2);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  return a1;
}

uint64_t assignWithCopy for _SymbolEffect.BreatheConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)a2 & 0xF000000000000006;
  if ((~*(void *)a1 & 0xF000000000000006) != 0)
  {
    if (v5 == 0xF000000000000006)
    {
      outlined destroy of _SymbolEffect.Trigger((uint64_t *)a1);
      *(void *)a1 = *(void *)a2;
    }
    else
    {
      outlined copy of _SymbolEffect.Trigger(*(void *)a2);
      uint64_t v6 = *(void *)a1;
      *(void *)a1 = v4;
      outlined consume of _SymbolEffect.Trigger(v6);
    }
  }
  else
  {
    if (v5 != 0xF000000000000006) {
      outlined copy of _SymbolEffect.Trigger(*(void *)a2);
    }
    *(void *)a1 = v4;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  return a1;
}

uint64_t assignWithTake for _SymbolEffect.BreatheConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *a2;
  if ((~v4 & 0xF000000000000006) != 0)
  {
    if ((~v5 & 0xF000000000000006) != 0)
    {
      *(void *)a1 = v5;
      outlined consume of _SymbolEffect.Trigger(v4);
      goto LABEL_6;
    }
    outlined destroy of _SymbolEffect.Trigger((uint64_t *)a1);
  }
  *(void *)a1 = v5;
LABEL_6:
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
  return a1;
}

ValueMetadata *type metadata accessor for _SymbolEffect.RotateConfiguration()
{
  return &type metadata for _SymbolEffect.RotateConfiguration;
}

uint64_t initializeBufferWithCopyOfBuffer for _SymbolEffect.VariableColorConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  if ((~*(void *)a2 & 0xF000000000000006) != 0) {
    outlined copy of _SymbolEffect.Trigger(*(void *)a2);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithCopy for _SymbolEffect.VariableColorConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)a2 & 0xF000000000000006;
  if ((~*(void *)a1 & 0xF000000000000006) != 0)
  {
    if (v5 == 0xF000000000000006)
    {
      outlined destroy of _SymbolEffect.Trigger((uint64_t *)a1);
      *(void *)a1 = *(void *)a2;
    }
    else
    {
      outlined copy of _SymbolEffect.Trigger(*(void *)a2);
      uint64_t v6 = *(void *)a1;
      *(void *)a1 = v4;
      outlined consume of _SymbolEffect.Trigger(v6);
    }
  }
  else
  {
    if (v5 != 0xF000000000000006) {
      outlined copy of _SymbolEffect.Trigger(*(void *)a2);
    }
    *(void *)a1 = v4;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for _SymbolEffect.VariableColorConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *a2;
  if ((~v4 & 0xF000000000000006) != 0)
  {
    if ((~v5 & 0xF000000000000006) != 0)
    {
      *(void *)a1 = v5;
      outlined consume of _SymbolEffect.Trigger(v4);
      goto LABEL_6;
    }
    outlined destroy of _SymbolEffect.Trigger((uint64_t *)a1);
  }
  *(void *)a1 = v5;
LABEL_6:
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect.VariableColorConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3E && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 62);
  }
  uint64_t v3 = *(void *)a1 >> 58;
  int v4 = *(void *)a1 & 6 | (8 * ((v3 >> 2) & 7));
  unsigned int v5 = 62 - (v4 | (v3 >> 5));
  if (v4) {
    int v6 = v5;
  }
  else {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect.VariableColorConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3D)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 62;
    if (a3 >= 0x3E) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3E) {
      *(unsigned char *)(result + 12) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (32 * (a2 ^ 0x3F)) | ((a2 ^ 0x3F) >> 1);
      *(void *)uint64_t result = ((v3 << 58) | (2 * v3)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect.VariableColorConfiguration()
{
  return &type metadata for _SymbolEffect.VariableColorConfiguration;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect.ScaleConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect.ScaleConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect.ScaleConfiguration()
{
  return &type metadata for _SymbolEffect.ScaleConfiguration;
}

uint64_t __swift_memcpy6_4(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect.HiddenConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 6)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect.HiddenConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 6) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 6) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect.HiddenConfiguration()
{
  return &type metadata for _SymbolEffect.HiddenConfiguration;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect.ReplaceConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect.ReplaceConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 12) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect.ReplaceConfiguration()
{
  return &type metadata for _SymbolEffect.ReplaceConfiguration;
}

uint64_t destroy for _SymbolEffect.Identified(uint64_t a1)
{
  return outlined consume of _SymbolEffect.Storage(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(_WORD *)(a1 + 40));
}

uint64_t initializeWithCopy for _SymbolEffect.Identified(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  unsigned __int16 v7 = *(_WORD *)(a2 + 40);
  outlined copy of _SymbolEffect.Storage(v4, v5, v6, v7);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(_WORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  return a1;
}

uint64_t assignWithCopy for _SymbolEffect.Identified(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  unsigned __int16 v7 = *(_WORD *)(a2 + 40);
  outlined copy of _SymbolEffect.Storage(v4, v5, v6, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  unsigned __int16 v11 = *(_WORD *)(a1 + 40);
  *(_WORD *)(a1 + 40) = v7;
  outlined consume of _SymbolEffect.Storage(v8, v9, v10, v11);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  int v12 = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v12;
  int v13 = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v13;
  return a1;
}

uint64_t assignWithTake for _SymbolEffect.Identified(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  __int16 v5 = *(_WORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(void *)(a1 + 32) = v4;
  unsigned __int16 v10 = *(_WORD *)(a1 + 40);
  *(_WORD *)(a1 + 40) = v5;
  outlined consume of _SymbolEffect.Storage(v6, v7, v8, v10);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect.Identified(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 61)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(_DWORD *)(a1 + 32) >> 1) & 0x7FFFFFFF | ((*(unsigned __int16 *)(a1 + 40) >> 1) << 31);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect.Identified(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 60) = 0;
    *(_DWORD *)(result + 56) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 61) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = (-2 * a2);
      *(_WORD *)(result + 40) = 2;
      return result;
    }
    *(unsigned char *)(result + 61) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t initializeWithCopy for _SymbolEffect.Phase(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 61) = *(unsigned char *)(a2 + 61);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _SymbolEffect.Phase(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  int v4 = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = v4;
  int v5 = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = v5;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  int v6 = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v6;
  int v7 = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 61) = *(unsigned char *)(a2 + 61);
  return a1;
}

__n128 __swift_memcpy62_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 46) = *(_OWORD *)(a2 + 46);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for _SymbolEffect.Phase(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(unsigned char *)(a1 + 61) = *(unsigned char *)(a2 + 61);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect.Phase(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 62)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect.Phase(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 60) = 0;
    *(_DWORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 62) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 62) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect.Phase()
{
  return &type metadata for _SymbolEffect.Phase;
}

uint64_t initializeWithCopy for _SymbolEffect.Added(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  unsigned __int16 v7 = *(_WORD *)(a2 + 40);
  outlined copy of _SymbolEffect.Storage(v4, v5, v6, v7);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(_WORD *)(a1 + 40) = v7;
  *(void *)(a1 + 44) = *(void *)(a2 + 44);
  return a1;
}

uint64_t assignWithCopy for _SymbolEffect.Added(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  unsigned __int16 v7 = *(_WORD *)(a2 + 40);
  outlined copy of _SymbolEffect.Storage(v4, v5, v6, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  unsigned __int16 v11 = *(_WORD *)(a1 + 40);
  *(_WORD *)(a1 + 40) = v7;
  outlined consume of _SymbolEffect.Storage(v8, v9, v10, v11);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for _SymbolEffect.Added(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  __int16 v5 = *(_WORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(void *)(a1 + 32) = v4;
  unsigned __int16 v10 = *(_WORD *)(a1 + 40);
  *(_WORD *)(a1 + 40) = v5;
  outlined consume of _SymbolEffect.Storage(v6, v7, v8, v10);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SymbolEffect.Added(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 52)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(_DWORD *)(a1 + 32) >> 1) & 0x7FFFFFFF | ((*(unsigned __int16 *)(a1 + 40) >> 1) << 31);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _SymbolEffect.Added(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 52) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = (-2 * a2);
      *(_WORD *)(result + 40) = 2;
      return result;
    }
    *(unsigned char *)(result + 52) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _SymbolEffect.Added()
{
  return &type metadata for _SymbolEffect.Added;
}

unint64_t type metadata accessor for RBAnimation()
{
  unint64_t result = lazy cache variable for type metadata for RBAnimation;
  if (!lazy cache variable for type metadata for RBAnimation)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RBAnimation);
  }
  return result;
}

uint64_t partial apply for closure #1 in RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)()
{
  return closure #1 in closure #1 in RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_245C850A4()
{
  swift_release();

  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for EnvironmentValues.SymbolEffectsKey()
{
  return &type metadata for EnvironmentValues.SymbolEffectsKey;
}

uint64_t sub_245C850EC()
{
  unsigned int v1 = *(void **)(v0 + 32);
  if ((unint64_t)v1 >= 2) {

  }
  return swift_deallocObject();
}

void NSDateFormatter.configure(in:)(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for TimeZone();
  uint64_t v22 = *(void *)(v2 - 8);
  uint64_t v23 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Calendar();
  uint64_t v5 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Locale();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unsigned __int16 v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  if (v13)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v12, (uint64_t)v11);
  }
  else
  {
    uint64_t v14 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v11);
  }
  swift_release_n();
  swift_release_n();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  id v16 = v24;
  objc_msgSend(v24, sel_setLocale_, isa);

  if (v13)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v12, (uint64_t)v7);
  }
  else
  {
    uint64_t v17 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v17, (uint64_t)v7);
  }
  swift_release_n();
  swift_release_n();
  Class v18 = Calendar._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v21);
  objc_msgSend(v16, sel_setCalendar_, v18);

  if (v13)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v12, (uint64_t)v4);
  }
  else
  {
    uint64_t v19 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v19, (uint64_t)v4);
  }
  swift_release_n();
  swift_release_n();
  Class v20 = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v4, v23);
  objc_msgSend(v16, sel_setTimeZone_, v20);
}

void NSISO8601DateFormatter.configure(in:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for TimeZone();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v8, (uint64_t)v7);
  }
  else
  {
    uint64_t v9 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v9, (uint64_t)v7);
  }
  swift_release_n();
  swift_release_n();
  Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  objc_msgSend(v2, sel_setTimeZone_, isa);
}

void NSDateComponentsFormatter.configure(in:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Calendar();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v8, (uint64_t)v7);
  }
  else
  {
    uint64_t v9 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v9, (uint64_t)v7);
  }
  swift_release_n();
  swift_release_n();
  Class isa = Calendar._bridgeToObjectiveC()().super.isa;
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  objc_msgSend(v2, sel_setCalendar_, isa);
}

void NSDateIntervalFormatter.configure(in:)(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for TimeZone();
  uint64_t v22 = *(void *)(v2 - 8);
  uint64_t v23 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Calendar();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unsigned __int16 v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  if (v13)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v12, (uint64_t)v11);
  }
  else
  {
    uint64_t v14 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v11);
  }
  swift_release_n();
  swift_release_n();
  Class isa = Calendar._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  id v16 = v24;
  objc_msgSend(v24, sel_setCalendar_, isa);

  if (v13)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v12, (uint64_t)v7);
  }
  else
  {
    uint64_t v17 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v17, (uint64_t)v7);
  }
  swift_release_n();
  swift_release_n();
  Class v18 = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v21);
  objc_msgSend(v16, sel_setLocale_, v18);

  if (v13)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v12, (uint64_t)v4);
  }
  else
  {
    uint64_t v19 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v19, (uint64_t)v4);
  }
  swift_release_n();
  swift_release_n();
  Class v20 = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v4, v23);
  objc_msgSend(v16, sel_setTimeZone_, v20);
}

void NSNumberFormatter.configure(in:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v8, (uint64_t)v7);
  }
  else
  {
    uint64_t v9 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v9, (uint64_t)v7);
  }
  swift_release_n();
  swift_release_n();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  objc_msgSend(v2, sel_setLocale_, isa);
}

void protocol witness for EnvironmentConfigurableFormatter.configure(in:) in conformance NSMassFormatter(uint64_t *a1)
{
}

void NSMeasurementFormatter.configure(in:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  if (v12)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v11, (uint64_t)v10);
  }
  else
  {
    uint64_t v13 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v13, (uint64_t)v10);
  }
  swift_release_n();
  swift_release_n();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  float v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v10, v4);
  objc_msgSend(v2, sel_setLocale_, isa);

  id v16 = objc_msgSend(v2, sel_numberFormatter);
  if (v16)
  {
    uint64_t v17 = v16;
    if (v12)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v11, (uint64_t)v7);
    }
    else
    {
      uint64_t v18 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v18, (uint64_t)v7);
    }
    swift_release_n();
    swift_release_n();
    Class v19 = Locale._bridgeToObjectiveC()().super.isa;
    v15(v7, v4);
    objc_msgSend(v17, sel_setLocale_, v19);
  }
  else
  {
    __break(1u);
  }
}

void NSMassFormatter.configure(in:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  id v11 = objc_msgSend(v2, sel_numberFormatter, v6);
  if (v11)
  {
    uint64_t v12 = v11;
    if (v9)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v10, (uint64_t)v8);
    }
    else
    {
      uint64_t v13 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v13, (uint64_t)v8);
    }
    swift_release_n();
    swift_release_n();
    Class isa = Locale._bridgeToObjectiveC()().super.isa;
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
    objc_msgSend(v12, sel_setLocale_, isa);
  }
  else
  {
    __break(1u);
  }
}

SwiftUI::ToggleState __swiftcall ToggleState.init(_:)(SwiftUI::ToggleState result)
{
  *unsigned int v1 = result ^ 1;
  return result;
}

Swift::Void __swiftcall ToggleState.toggle()()
{
  *uint64_t v0 = !*v0;
}

SwiftUI::ToggleState_optional __swiftcall ToggleState.init(rawValue:)(Swift::UInt rawValue)
{
  char v2 = 3;
  if (rawValue < 3) {
    char v2 = rawValue;
  }
  *unsigned int v1 = v2;
  return (SwiftUI::ToggleState_optional)rawValue;
}

uint64_t ToggleState.rawValue.getter()
{
  return *v0;
}

SwiftUI::ToggleState_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ToggleState(Swift::UInt *a1)
{
  return ToggleState.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ToggleState()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ToggleState()
{
  return RawRepresentable<>.encode(to:)();
}

void *static ToggleState.allCases.getter()
{
  return &outlined read-only object #0 of static ToggleState.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ToggleState(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ToggleState;
}

uint64_t ToggleState.debugDescription.getter()
{
  uint64_t v1 = 6710895;
  if (*v0 != 1) {
    uint64_t v1 = 0x646578696DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 28271;
  }
}

unint64_t lazy protocol witness table accessor for type ToggleState and conformance ToggleState()
{
  unint64_t result = lazy protocol witness table cache variable for type ToggleState and conformance ToggleState;
  if (!lazy protocol witness table cache variable for type ToggleState and conformance ToggleState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleState and conformance ToggleState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToggleState and conformance ToggleState;
  if (!lazy protocol witness table cache variable for type ToggleState and conformance ToggleState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleState and conformance ToggleState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ToggleState] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ToggleState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ToggleState] and conformance [A])
  {
    type metadata accessor for [ToggleState]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ToggleState] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [ToggleState]()
{
  if (!lazy cache variable for type metadata for [ToggleState])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [ToggleState]);
    }
  }
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToggleState()
{
  uint64_t v1 = 6710895;
  if (*v0 != 1) {
    uint64_t v1 = 0x646578696DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 28271;
  }
}

unsigned char *storeEnumTagSinglePayload for ToggleState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245C86434);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t AccessibilityNullableOptionSet.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v27 = a7;
  uint64_t v28 = a8;
  uint64_t v25 = a4;
  uint64_t v26 = a6;
  uint64_t v15 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v24 - v19;
  dispatch thunk of SetAlgebra.init()();
  dispatch thunk of SetAlgebra.init()();
  uint64_t v21 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  v21(a9, v20, a1);
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v32 = v25;
  uint64_t v33 = a5;
  uint64_t v34 = v26;
  uint64_t v35 = v27;
  uint64_t v36 = v28;
  uint64_t v37 = a10;
  uint64_t v22 = type metadata accessor for AccessibilityNullableOptionSet();
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v21)(a9 + *(int *)(v22 + 92), v17, a1);
}

uint64_t AccessibilityNullableOptionSet.subscript.getter()
{
  if (dispatch thunk of SetAlgebra.contains(_:)()) {
    return 1;
  }
  if (dispatch thunk of SetAlgebra.contains(_:)()) {
    return 0;
  }
  return 2;
}

uint64_t AccessibilityNullableOptionSet.subscript.setter(unsigned __int8 a1, void (*a2)(char *, uint64_t), uint64_t a3)
{
  int v4 = a1;
  uint64_t v5 = *(void *)(a3 + 48);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v31 = *(void *)(v5 + 16);
  uint64_t v30 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v27 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v27 - v18;
  if (v4 == 2)
  {
    dispatch thunk of SetAlgebra.remove(_:)();
    uint64_t v29 = *(void (**)(char *, uint64_t))(v9 + 8);
    v29(v11, v8);
    dispatch thunk of SetAlgebra.remove(_:)();
    (*(void (**)(void, uint64_t))(v12 + 8))(a2, AssociatedTypeWitness);
    return ((uint64_t (*)(char *, uint64_t))v29)(v11, v8);
  }
  else
  {
    uint64_t v21 = *(void (**)(void, double))(v12 + 16);
    uint64_t v28 = v8;
    uint64_t v29 = a2;
    uint64_t v22 = (void (*)(char *, void (*)(void, void), uint64_t))v21;
    v21(v15, v17);
    dispatch thunk of SetAlgebra.insert(_:)();
    char v23 = v4;
    uint64_t v24 = *(void (**)(char *, uint64_t))(v12 + 8);
    v24(v19, AssociatedTypeWitness);
    if (v23)
    {
      uint64_t v26 = (char *)v29;
      v22(v15, (void (*)(void, void))v29, AssociatedTypeWitness);
      dispatch thunk of SetAlgebra.insert(_:)();
      v24(v26, AssociatedTypeWitness);
      return ((uint64_t (*)(char *, uint64_t))v24)(v19, AssociatedTypeWitness);
    }
    else
    {
      uint64_t v25 = (char *)v29;
      dispatch thunk of SetAlgebra.remove(_:)();
      v24(v25, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v28);
    }
  }
}

uint64_t AccessibilityNullableOptionSet.subscript.getter(uint64_t a1, char a2)
{
  char v3 = AccessibilityNullableOptionSet.subscript.getter();
  if (v3 == 2) {
    char v4 = a2;
  }
  else {
    char v4 = v3;
  }
  return v4 & 1;
}

uint64_t AccessibilityNullableOptionSet.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t AccessibilityNullableOptionSet.mask.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 92));
}

uint64_t AccessibilityNullableOptionSet.init(implying:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = a7;
  uint64_t v28 = a8;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v24 = a3;
  uint64_t v14 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v24 - v18;
  uint64_t v29 = v20;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  dispatch thunk of SetAlgebra.init()();
  uint64_t v21 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
  v21(a9, v19, a2);
  uint64_t v29 = a2;
  uint64_t v30 = v24;
  uint64_t v31 = v25;
  uint64_t v32 = v26;
  uint64_t v33 = a6;
  uint64_t v34 = v27;
  uint64_t v35 = v28;
  uint64_t v36 = a10;
  uint64_t v37 = a11;
  uint64_t v22 = type metadata accessor for AccessibilityNullableOptionSet();
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v21)(a9 + *(int *)(v22 + 92), v16, a2);
}

uint64_t AccessibilityNullableOptionSet.init(adding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = a7;
  uint64_t v28 = a8;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v24 = a3;
  uint64_t v14 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v24 - v18;
  uint64_t v29 = v20;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v19, a2);
  uint64_t v21 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
  v21(a9, v16, a2);
  uint64_t v29 = a2;
  uint64_t v30 = v24;
  uint64_t v31 = v25;
  uint64_t v32 = v26;
  uint64_t v33 = a6;
  uint64_t v34 = v27;
  uint64_t v35 = v28;
  uint64_t v36 = a10;
  uint64_t v37 = a11;
  uint64_t v22 = type metadata accessor for AccessibilityNullableOptionSet();
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v21)(a9 + *(int *)(v22 + 92), v19, a2);
}

uint64_t AccessibilityNullableOptionSet.init(removing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = a7;
  uint64_t v28 = a8;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v24 = a3;
  uint64_t v15 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v24 - v19;
  dispatch thunk of SetAlgebra.init()();
  uint64_t v29 = a1;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v21 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  v21(a9, v20, a2);
  uint64_t v29 = a2;
  uint64_t v30 = v24;
  uint64_t v31 = v25;
  uint64_t v32 = v26;
  uint64_t v33 = a6;
  uint64_t v34 = v27;
  uint64_t v35 = v28;
  uint64_t v36 = a10;
  uint64_t v37 = a11;
  uint64_t v22 = type metadata accessor for AccessibilityNullableOptionSet();
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v21)(a9 + *(int *)(v22 + 92), v17, a2);
}

uint64_t AccessibilityNullableOptionSet.init(adding:removing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v45 = a6;
  uint64_t v46 = a8;
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  uint64_t v47 = a2;
  uint64_t v42 = a9;
  uint64_t v44 = a12;
  uint64_t v14 = *(void *)(a3 - 8);
  uint64_t v43 = a11;
  uint64_t v37 = a10;
  MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v35 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)v35 - v21;
  unint64_t v41 = (char *)v35 - v21;
  uint64_t v50 = v23;
  uint64_t v25 = *(void *)(v24 + 16);
  uint64_t v36 = v24;
  uint64_t v38 = v25;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v40 = v14;
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v35[1] = v19;
  v26(v19, v22, a3);
  v26(v16, v22, a3);
  uint64_t v27 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
  uint64_t v28 = v42;
  v27(v42, v19, a3);
  uint64_t v50 = a3;
  uint64_t v51 = v48;
  uint64_t v30 = v45;
  uint64_t v29 = v46;
  uint64_t v52 = v49;
  uint64_t v53 = v45;
  uint64_t v54 = a7;
  uint64_t v55 = v46;
  uint64_t v56 = a10;
  uint64_t v32 = v43;
  uint64_t v31 = v44;
  uint64_t v57 = v43;
  uint64_t v58 = v44;
  uint64_t v33 = type metadata accessor for AccessibilityNullableOptionSet();
  v27(v28 + *(int *)(v33 + 92), v16, a3);
  uint64_t v50 = v47;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v50 = a3;
  uint64_t v51 = v48;
  uint64_t v52 = v49;
  uint64_t v53 = v30;
  uint64_t v54 = v36;
  uint64_t v55 = v29;
  uint64_t v56 = v37;
  uint64_t v57 = v32;
  uint64_t v58 = v31;
  type metadata accessor for AccessibilityNullableOptionSet();
  dispatch thunk of SetAlgebra.formUnion(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v41, a3);
}

uint64_t key path getter for AccessibilityNullableOptionSet.subscript(_:) : <A>AccessibilityNullableOptionSet<A>A@<X0>(unsigned char *a1@<X8>)
{
  type metadata accessor for AccessibilityNullableOptionSet();
  uint64_t result = AccessibilityNullableOptionSet.subscript.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for AccessibilityNullableOptionSet.subscript(_:) : <A>AccessibilityNullableOptionSet<A>A(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  uint64_t v6 = a4 + a3;
  uint64_t v7 = *(void *)(a4 + a3 - 8);
  long long v19 = *(_OWORD *)(a4 + a3 - 72);
  long long v18 = *(_OWORD *)(a4 + a3 - 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (void (*)(char *, uint64_t))((char *)&v16 - v9);
  uint64_t v12 = *(void (**)(void, uint64_t))(v11 + 16);
  long long v13 = *(_OWORD *)(v6 - 24);
  long long v16 = *(_OWORD *)(v6 - 56);
  long long v17 = v13;
  v12(v10, v4);
  LOBYTE(v4) = *a1;
  long long v20 = v19;
  long long v21 = v16;
  long long v22 = v18;
  long long v23 = v17;
  uint64_t v24 = v7;
  uint64_t v14 = type metadata accessor for AccessibilityNullableOptionSet();
  return AccessibilityNullableOptionSet.subscript.setter(v4, v10, v14);
}

void (*AccessibilityNullableOptionSet.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v6 = malloc(0x38uLL);
  *a1 = v6;
  *uint64_t v6 = a3;
  v6[1] = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[2] = AssociatedTypeWitness;
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = v8;
  v6[3] = v8;
  size_t v10 = *(void *)(v8 + 64);
  v6[4] = malloc(v10);
  v6[5] = malloc(v10);
  (*(void (**)(void))(v9 + 16))();
  *((unsigned char *)v6 + 48) = AccessibilityNullableOptionSet.subscript.getter();
  return AccessibilityNullableOptionSet.subscript.modify;
}

void AccessibilityNullableOptionSet.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  unsigned __int8 v3 = *((unsigned char *)*a1 + 48);
  uint64_t v4 = (void (*)(char *, uint64_t))(*a1)[4];
  uint64_t v5 = (void (*)(char *, uint64_t))(*a1)[5];
  if (a2)
  {
    uint64_t v6 = *v2;
    (*(void (**)(uint64_t, void (*)(char *, uint64_t), uint64_t))(v2[3] + 32))((*a1)[4], v5, v2[2]);
    unsigned __int8 v7 = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v6;
  }
  else
  {
    uint64_t v9 = *v2;
    unsigned __int8 v7 = *((unsigned char *)*a1 + 48);
    uint64_t v8 = v5;
  }
  AccessibilityNullableOptionSet.subscript.setter(v7, v8, v9);
  free(v5);
  free(v4);

  free(v2);
}

uint64_t AccessibilityNullableOptionSet.isDefault.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = dispatch thunk of SetAlgebra.isEmpty.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a1);
  if (v7) {
    char v8 = dispatch thunk of SetAlgebra.isEmpty.getter();
  }
  else {
    char v8 = 0;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  return v8 & 1;
}

uint64_t AccessibilityNullableOptionSet.isSet(_:)()
{
  return dispatch thunk of SetAlgebra.contains(_:)() & 1;
}

uint64_t AccessibilityNullableOptionSet.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t AccessibilityNullableOptionSet.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1802723693 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t AccessibilityNullableOptionSet.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 1802723693;
  }
  else {
    return 0x65756C6176;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityNullableOptionSet<A>.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Pair.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityNullableOptionSet<A>.CodingKeys()
{
  return Pair.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityNullableOptionSet<A>.CodingKeys(uint64_t a1)
{
  Pair.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityNullableOptionSet<A>.CodingKeys()
{
  Hasher.init(_seed:)();
  Pair.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityNullableOptionSet<A>.CodingKeys()
{
  return AccessibilityNullableOptionSet.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityNullableOptionSet<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = AccessibilityNullableOptionSet.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AccessibilityNullableOptionSet<A>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = protocol witness for static _AttributeBody.comparisonMode.getter in conformance ResetDeltaModifier.ChildPhase();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityNullableOptionSet<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityNullableOptionSet<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t AccessibilityNullableOptionSet.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 32);
  v12[0] = *(_OWORD *)(a2 + 16);
  v12[1] = v4;
  long long v13 = v12[0];
  long long v14 = v4;
  long long v5 = *(_OWORD *)(a2 + 64);
  long long v15 = *(_OWORD *)(a2 + 48);
  long long v16 = v5;
  uint64_t v17 = v3;
  type metadata accessor for AccessibilityNullableOptionSet.CodingKeys();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  uint64_t v10 = v18;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v10)
  {
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t type metadata accessor for AccessibilityNullableOptionSet.CodingKeys()
{
  return swift_getGenericMetadata();
}

Swift::Int AccessibilityNullableOptionSet.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t AccessibilityNullableOptionSet.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v51 = a7;
  uint64_t v52 = a8;
  uint64_t v50 = a6;
  uint64_t v53 = a1;
  uint64_t v42 = a9;
  uint64_t v45 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v44 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v47 = (char *)&v42 - v17;
  uint64_t v54 = v18;
  uint64_t v55 = v19;
  uint64_t v56 = v20;
  uint64_t v57 = v21;
  uint64_t v58 = v22;
  uint64_t v59 = v23;
  uint64_t v60 = v24;
  uint64_t v61 = a10;
  uint64_t v62 = a11;
  type metadata accessor for AccessibilityNullableOptionSet.CodingKeys();
  swift_getWitnessTable();
  uint64_t v49 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v43 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v26 = (char *)&v42 - v25;
  uint64_t v46 = a2;
  uint64_t v54 = a2;
  uint64_t v55 = a3;
  uint64_t v48 = a3;
  uint64_t v56 = a4;
  uint64_t v57 = a5;
  uint64_t v58 = v50;
  uint64_t v59 = v51;
  uint64_t v60 = v52;
  uint64_t v61 = a10;
  uint64_t v27 = v53;
  uint64_t v62 = a11;
  uint64_t v28 = type metadata accessor for AccessibilityNullableOptionSet();
  uint64_t v51 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v42 - v29;
  __swift_project_boxed_opaque_existential_1(v27, v27[3]);
  uint64_t v52 = v26;
  uint64_t v31 = v63;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v31) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  uint64_t v63 = v28;
  uint64_t v33 = v43;
  uint64_t v32 = v44;
  uint64_t v35 = v45;
  uint64_t v34 = v46;
  LOBYTE(v54) = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v36 = *(char **)(v35 + 32);
  uint64_t v50 = v30;
  uint64_t v37 = v47;
  uint64_t v47 = v36;
  ((void (*)(char *, char *, uint64_t))v36)(v30, v37, v34);
  LOBYTE(v54) = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v52, v49);
  uint64_t v38 = v63;
  int v39 = v50;
  ((void (*)(char *, char *, uint64_t))v47)(&v50[*(int *)(v63 + 92)], v32, v34);
  uint64_t v40 = v51;
  (*(void (**)(uint64_t, char *, uint64_t))(v51 + 16))(v42, v39, v38);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v39, v38);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityNullableOptionSet<A>()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityNullableOptionSet<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return AccessibilityNullableOptionSet.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 40), *(char **)(a2 + 48), *(void *)(a2 + 56), *(char **)(a2 + 64), a3, *(void *)(a2 + 72), *(void *)(a2 + 80));
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityNullableOptionSet<A>(void *a1, uint64_t a2)
{
  return AccessibilityNullableOptionSet.encode(to:)(a1, a2);
}

unint64_t AccessibilityNullableOptionSet.description.getter()
{
  return 0xD00000000000001ELL;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityNullableOptionSet<A>()
{
  return 0xD00000000000001ELL;
}

void AccessibilityNullableOptionSet.encode(to:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v68 = a1;
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a2[9] + 8) + 24) + 16);
  uint64_t v5 = *(void *)(a2[6] + 8);
  uint64_t v62 = a2;
  uint64_t v6 = a2[2];
  swift_getAssociatedTypeWitness();
  uint64_t v67 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v64 = (char *)&v55 - v7;
  uint64_t v8 = swift_checkMetadataState();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v59 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v63 = (char *)&v55 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v69 = (char *)&v55 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v58 = (char *)&v55 - v16;
  MEMORY[0x270FA5388](v17);
  unint64_t v70 = (char *)&v55 - v18;
  MEMORY[0x270FA5388](v19);
  v71 = (char *)&v55 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v55 - v22;
  uint64_t v60 = v6;
  uint64_t v61 = v5;
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    uint64_t v24 = v71;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    char v25 = dispatch thunk of static Comparable.>= infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v24, v8);
    if ((v25 & 1) == 0) {
      goto LABEL_34;
    }
  }
  uint64_t v26 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v66 = v9;
  if (v26 >= 64)
  {
    uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v56(v70, v23, v8);
    uint64_t v72 = -1;
    char v27 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v28 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v57 = v3;
    if (v27)
    {
      if (v28 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        uint64_t v29 = v71;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        char v30 = dispatch thunk of static Comparable.> infix(_:_:)();
        uint64_t v31 = *(void (**)(char *, uint64_t))(v9 + 8);
        v31(v29, v8);
        unint64_t v55 = v72;
        uint64_t v32 = v58;
        v56(v58, v70, v8);
        if (v30)
        {
          unint64_t v33 = dispatch thunk of BinaryInteger._lowWord.getter();
          v31(v32, v8);
          uint64_t v9 = v66;
          if (v55 < v33)
          {
LABEL_34:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return;
          }
        }
        else
        {
          v31(v32, v8);
          uint64_t v9 = v66;
        }
        goto LABEL_13;
      }
    }
    else if (v28 < 65)
    {
      dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v31 = *(void (**)(char *, uint64_t))(v9 + 8);
LABEL_13:
      v31(v70, v8);
      goto LABEL_14;
    }
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    uint64_t v34 = v71;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v35 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v31 = *(void (**)(char *, uint64_t))(v9 + 8);
    v31(v34, v8);
    if (v35) {
      goto LABEL_34;
    }
    goto LABEL_13;
  }
LABEL_14:
  Swift::UInt v36 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v9 + 8);
  v37(v23, v8);
  if (v36)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v36);
  }
  uint64_t v38 = v69;
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    int v39 = v71;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    char v40 = dispatch thunk of static Comparable.>= infix(_:_:)();
    v37(v39, v8);
    if ((v40 & 1) == 0) {
      goto LABEL_34;
    }
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
  {
    unint64_t v41 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    v66 += 16;
    v41(v63, v38, v8);
    uint64_t v72 = -1;
    char v42 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v43 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v42)
    {
      if (v43 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        uint64_t v44 = v71;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        uint64_t v45 = v63;
        char v46 = dispatch thunk of static Comparable.> infix(_:_:)();
        v37(v44, v8);
        unint64_t v47 = v72;
        uint64_t v48 = v59;
        v41(v59, v45, v8);
        if (v46)
        {
          unint64_t v49 = dispatch thunk of BinaryInteger._lowWord.getter();
          v37(v48, v8);
          uint64_t v50 = v63;
          if (v47 < v49) {
            goto LABEL_34;
          }
        }
        else
        {
          v37(v48, v8);
          uint64_t v50 = v63;
        }
        goto LABEL_30;
      }
    }
    else if (v43 < 65)
    {
      uint64_t v50 = v63;
      dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_30:
      v37(v50, v8);
      uint64_t v38 = v69;
      goto LABEL_31;
    }
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    uint64_t v51 = v71;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v52 = v63;
    char v53 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v50 = v52;
    v37(v51, v8);
    if (v53) {
      goto LABEL_34;
    }
    goto LABEL_30;
  }
LABEL_31:
  Swift::UInt v54 = dispatch thunk of BinaryInteger._lowWord.getter();
  v37(v38, v8);
  if (v54)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(v54);
  }
}

unint64_t AccessibilityNullableOptionSet.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v54 = a7;
  uint64_t v55 = a8;
  uint64_t v53 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v49 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v48 = (char *)&v44 - v20;
  uint64_t v44 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v21);
  unint64_t v47 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  char v46 = (char *)&v44 - v24;
  uint64_t v51 = a11;
  uint64_t v67 = a9;
  uint64_t v56 = a2;
  uint64_t v50 = a3;
  uint64_t v25 = a3;
  uint64_t v45 = a4;
  uint64_t v26 = a6;
  uint64_t v57 = a10;
  unint64_t result = AccessibilityNullableOptionSet.init()(a2, v25, a4, v53, a6, v54, v55, a10, a9, a11);
  unint64_t v28 = a1[1];
  unint64_t v29 = a1[2];
  if (v28 >= v29)
  {
LABEL_40:
    a1[3] = 0;
    return result;
  }
  char v30 = (uint64_t (**)(void))(v44 + 40);
  uint64_t v31 = v45;
  while (1)
  {
    unint64_t result = a1[3];
    if (result)
    {
      unint64_t v32 = a1[4];
      if (v28 < v32) {
        goto LABEL_11;
      }
      if (v32 < v28) {
        goto LABEL_41;
      }
      a1[3] = 0;
    }
    unint64_t result = ProtobufDecoder.decodeVarint()();
    if (v11) {
      goto LABEL_42;
    }
    if (result <= 7) {
      goto LABEL_41;
    }
LABEL_11:
    if (result >> 3 == 2) {
      break;
    }
    if (result >> 3 != 1)
    {
      switch(result & 7)
      {
        case 0uLL:
          unint64_t result = ProtobufDecoder.decodeVarint()();
          if (v11) {
            goto LABEL_42;
          }
          goto LABEL_4;
        case 1uLL:
          unint64_t v42 = a1[1] + 8;
          if (v29 < v42) {
            goto LABEL_41;
          }
          goto LABEL_39;
        case 2uLL:
          unint64_t result = ProtobufDecoder.decodeVarint()();
          if (v11) {
            goto LABEL_42;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_45;
          }
          unint64_t v42 = a1[1] + result;
          if (v29 < v42) {
            goto LABEL_41;
          }
LABEL_39:
          a1[1] = v42;
          break;
        case 5uLL:
          unint64_t v42 = a1[1] + 4;
          if (v29 >= v42) {
            goto LABEL_39;
          }
          goto LABEL_41;
        default:
          goto LABEL_41;
      }
      goto LABEL_4;
    }
    if ((result & 7) != 0)
    {
      if ((result & 7) != 2) {
        goto LABEL_41;
      }
      uint64_t v33 = ProtobufDecoder.decodeVarint()();
      if (v11) {
        goto LABEL_42;
      }
      if (v33 < 0)
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        JUMPOUT(0x245C89220);
      }
      unint64_t v34 = a1[1] + v33;
      if (v29 < v34) {
        goto LABEL_41;
      }
      a1[3] = 8;
      a1[4] = v34;
    }
    uint64_t v35 = ProtobufDecoder.decodeVarint()();
    if (v11) {
      goto LABEL_42;
    }
    uint64_t v58 = v35;
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    dispatch thunk of BinaryInteger.init<A>(_:)();
    dispatch thunk of OptionSet.init(rawValue:)();
    Swift::UInt v36 = *v30;
LABEL_3:
    unint64_t result = v36();
LABEL_4:
    unint64_t v28 = a1[1];
    unint64_t v29 = a1[2];
    if (v28 >= v29) {
      goto LABEL_40;
    }
  }
  if ((result & 7) == 0)
  {
LABEL_27:
    uint64_t v39 = ProtobufDecoder.decodeVarint()();
    if (v11) {
      goto LABEL_42;
    }
    uint64_t v58 = v39;
    uint64_t v40 = v57;
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    dispatch thunk of BinaryInteger.init<A>(_:)();
    uint64_t v41 = v56;
    dispatch thunk of OptionSet.init(rawValue:)();
    uint64_t v58 = v41;
    uint64_t v59 = v50;
    uint64_t v60 = v31;
    uint64_t v61 = v53;
    uint64_t v62 = v26;
    uint64_t v63 = v54;
    uint64_t v64 = v55;
    uint64_t v65 = v40;
    uint64_t v66 = v51;
    type metadata accessor for AccessibilityNullableOptionSet();
    Swift::UInt v36 = *v30;
    goto LABEL_3;
  }
  if ((result & 7) != 2) {
    goto LABEL_41;
  }
  uint64_t v37 = ProtobufDecoder.decodeVarint()();
  if (v11) {
    goto LABEL_42;
  }
  if (v37 < 0) {
    goto LABEL_44;
  }
  unint64_t v38 = a1[1] + v37;
  if (v29 >= v38)
  {
    a1[3] = 16;
    a1[4] = v38;
    goto LABEL_27;
  }
LABEL_41:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
LABEL_42:
  uint64_t v58 = v56;
  uint64_t v59 = v50;
  uint64_t v60 = v31;
  uint64_t v61 = v53;
  uint64_t v62 = v26;
  uint64_t v63 = v54;
  uint64_t v64 = v55;
  uint64_t v65 = v57;
  uint64_t v66 = v51;
  uint64_t v43 = type metadata accessor for AccessibilityNullableOptionSet();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v67, v43);
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance AccessibilityNullableOptionSet<A>(uint64_t a1, void *a2)
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance AccessibilityNullableOptionSet<A>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return AccessibilityNullableOptionSet.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a2[8], a3, a2[9], a2[10]);
}

uint64_t base witness table accessor for Equatable in AccessibilityNullableOptionSet<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_245C89304()
{
  return 72;
}

__n128 sub_245C89310(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  __n128 result = *(__n128 *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 48);
  *(void *)(a2 + 64) = *(void *)(a1 + 64);
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AccessibilityNullableOptionSet(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v8 = ((v6 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v6;
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityNullableOptionSet.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245C89594);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AccessibilityNullableOptionSet<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AccessibilityNullableOptionSet<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in AccessibilityNullableOptionSet<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t Comparable.clamp(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned int v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ClosedRange();
  Comparable.clamp(min:max:)(a1, a1 + *(int *)(v8 + 36), a2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v2, v7, a2);
}

uint64_t Comparable.clamp(min:max:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  max<A>(_:_:)();
  min<A>(_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a3);
}

uint64_t Comparable.clamped(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  return Comparable.clamp(to:)(a1, a2);
}

uint64_t Comparable.formMin(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Comparable.formMin(_:)(a1, a2, a3, MEMORY[0x263F8D170]);
}

uint64_t Comparable.formMax(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Comparable.formMin(_:)(a1, a2, a3, MEMORY[0x263F8D168]);
}

uint64_t Comparable.formMin(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = v4;
  uint64_t result = a4(a1, v5, a2, a3);
  if (result)
  {
    uint64_t v10 = *(void *)(a2 - 8);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v5, a2);
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    return v9(v5, a1, a2);
  }
  return result;
}

uint64_t Collection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v35 = a4;
  uint64_t v37 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v32 - v14;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v34 = a3;
  v32[2] = swift_getAssociatedConformanceWitness();
  char v16 = dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v15, AssociatedTypeWitness);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v33 = v12;
  uint64_t v19 = v12;
  uint64_t v20 = a1;
  v18(v19, a1, AssociatedTypeWitness);
  uint64_t v21 = v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v8, v36, a2);
  if (v16)
  {
    v32[1] = v20;
    dispatch thunk of Collection.endIndex.getter();
    uint64_t v22 = v33;
    char v23 = dispatch thunk of static Comparable.< infix(_:_:)();
    v17(v15, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v21, a2);
    v17(v22, AssociatedTypeWitness);
    uint64_t v24 = v35;
    if (v23)
    {
      uint64_t v25 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v27 = v26;
      uint64_t v28 = swift_getAssociatedTypeWitness();
      uint64_t v29 = *(void *)(v28 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v24, v27, v28);
      v25(v38, 0);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v24, 0, 1, v28);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v8, a2);
    v17(v33, AssociatedTypeWitness);
    uint64_t v24 = v35;
  }
  uint64_t v31 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v24, 1, 1, v31);
}

uint64_t Collection.index(atOffset:limitedBy:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v5 - v2;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.index(_:offsetBy:limitedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
}

uint64_t Collection.offset(of:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v6 - v2;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v4 = dispatch thunk of Collection.distance(from:to:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v4;
}

uint64_t _ViewInputs.textAlwaysOnProvider.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 72);
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t key path getter for _ViewInputs.textAlwaysOnProvider : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _ViewInputs.textAlwaysOnProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _ViewInputs.textAlwaysOnProvider : _ViewInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _GraphInputs.textAlwaysOnProvider.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 72);
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t _GraphInputs.textAlwaysOnProvider.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_ViewInputs.textAlwaysOnProvider.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 72);
    uint64_t v7 = *(void *)(v5 + 80);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *uint64_t v3 = v6;
  v3[1] = v7;
  return _ViewInputs.textAlwaysOnProvider.modify;
}

void _ViewInputs.textAlwaysOnProvider.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[4];
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();

  free(v1);
}

uint64_t key path getter for _GraphInputs.textAlwaysOnProvider : _GraphInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _GraphInputs.textAlwaysOnProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void (*_GraphInputs.textAlwaysOnProvider.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 72);
    uint64_t v7 = *(void *)(v5 + 80);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *uint64_t v3 = v6;
  v3[1] = v7;
  return _ViewInputs.textAlwaysOnProvider.modify;
}

uint64_t dispatch thunk of static TextAlwaysOnProvider.makeAlwaysOn(inputs:schedule:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

ValueMetadata *type metadata accessor for _GraphInputs.TextAlwaysOnProviderKey()
{
  return &type metadata for _GraphInputs.TextAlwaysOnProviderKey;
}

double static CGPoint.+= infix(_:_:)(double *a1, double a2, double a3)
{
  double result = *a1 + a2;
  double v4 = a1[1] + a3;
  *a1 = result;
  a1[1] = v4;
  return result;
}

double static CGPoint.-= infix(_:_:)(double *a1, double a2, double a3)
{
  double result = *a1 - a2;
  double v4 = a1[1] - a3;
  *a1 = result;
  a1[1] = v4;
  return result;
}

double static CGPoint.- infix(_:_:)(double a1, double a2, double a3)
{
  return a1 - a3;
}

{
  return a1 - a3;
}

double static CGPoint.+ infix(_:_:)(double a1, double a2, double a3)
{
  return a1 + a3;
}

CGPoint __swiftcall CGPoint.unapplying(_:)(CGAffineTransform *a1)
{
  double v3 = v2;
  double v4 = v1;
  double b = a1->b;
  double c = a1->c;
  double d = a1->d;
  double tx = a1->tx;
  double ty = a1->ty;
  if (a1->a == 1.0 && b == 0.0 && (c == 0.0 ? (BOOL v10 = d == 1.0) : (BOOL v10 = 0), v10))
  {
    double x = v4 - tx;
    double y = v3 - ty;
  }
  else
  {
    v16.a = a1->a;
    v16.double b = b;
    v16.double c = c;
    v16.double d = d;
    v16.double tx = tx;
    v16.double ty = ty;
    CGAffineTransformInvert(&v15, &v16);
    CGAffineTransform v16 = v15;
    v17.double x = v4;
    v17.double y = v3;
    CGPoint v13 = CGPointApplyAffineTransform(v17, &v16);
    double y = v13.y;
    double x = v13.x;
  }
  result.double y = y;
  result.double x = x;
  return result;
}

CGPoint __swiftcall CGPoint.clamp(min:max:)(CGPoint min, CGPoint max)
{
  if (min.x <= v2) {
    min.double x = v2;
  }
  if (min.x > max.x) {
    min.double x = max.x;
  }
  if (min.y <= v3) {
    min.double y = v3;
  }
  if (min.y > max.y) {
    min.double y = max.y;
  }
  return min;
}

double static CGPoint.- prefix(_:)(double a1)
{
  return -a1;
}

double static CGPoint.* infix(_:_:)(double a1, double a2, double a3)
{
  return a1 * a3;
}

float64x2_t static CGPoint.*= infix(_:_:)(float64x2_t *a1, double a2)
{
  float64x2_t result = vmulq_n_f64(*a1, a2);
  *a1 = result;
  return result;
}

double static CGSize.+ infix(_:_:)(double a1, double a2, double a3)
{
  return a1 + a3;
}

{
  return a1 + a3;
}

uint64_t one-time initialization function for list()
{
  type metadata accessor for FontBox<Font.SystemProvider>();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x4034000000000000;
  *(void *)(result + 24) = 0x3FD3333333333333;
  *(unsigned char *)(result + 32) = 0;
  *(_WORD *)(result + 33) = 3588;
  *(void *)(result + 40) = 0;
  *(unsigned char *)(result + 48) = 1;
  static SystemStyleMetrics.list = result;
  byte_268EFA910 = 1;
  qword_268EFA918 = 0;
  return result;
}

uint64_t SystemListStyleMetrics.init()@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for FontBox<Font.SystemProvider>();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x4034000000000000;
  *(void *)(result + 24) = 0x3FD3333333333333;
  *(unsigned char *)(result + 32) = 0;
  *(_WORD *)(result + 33) = 3588;
  *(void *)(result + 40) = 0;
  *(unsigned char *)(result + 48) = 1;
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  return result;
}

uint64_t static SystemStyleMetrics.list.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for list != -1) {
    swift_once();
  }
  swift_beginAccess();
  char v2 = byte_268EFA910;
  uint64_t v3 = qword_268EFA918;
  *(void *)a1 = static SystemStyleMetrics.list;
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  swift_retain();
  return swift_retain();
}

uint64_t static SystemStyleMetrics.list.setter(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (one-time initialization token for list != -1) {
    swift_once();
  }
  swift_beginAccess();
  static SystemStyleMetrics.list = v1;
  byte_268EFA910 = v2;
  qword_268EFA918 = v3;
  swift_release();
  return swift_release();
}

uint64_t (*static SystemStyleMetrics.list.modify())()
{
  if (one-time initialization token for list != -1) {
    swift_once();
  }
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

void SystemShadowStyleMetrics.init()()
{
}

void static SystemStyleMetrics.shadows.getter()
{
}

void SystemHoverEffectStyleMetrics.init()()
{
}

void static SystemStyleMetrics.hoverEffect.getter()
{
}

void static SystemStyleMetrics.hoverEffect.setter()
{
}

void static SystemStyleMetrics.hoverEffect.modify()
{
}

void type metadata accessor for FontBox<Font.SystemProvider>()
{
  if (!lazy cache variable for type metadata for FontBox<Font.SystemProvider>)
  {
    lazy protocol witness table accessor for type Font.SystemProvider and conformance Font.SystemProvider();
    unint64_t v0 = type metadata accessor for FontBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.SystemProvider>);
    }
  }
}

uint64_t SystemListStyleMetrics.Sidebar.headerFont.getter()
{
  return swift_retain();
}

uint64_t SystemListStyleMetrics.Sidebar.headerFont.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*SystemListStyleMetrics.Sidebar.headerFont.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SystemListStyleMetrics.Sidebar.outlineDisclosureIsTinted.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t SystemListStyleMetrics.Sidebar.outlineDisclosureIsTinted.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*SystemListStyleMetrics.Sidebar.outlineDisclosureIsTinted.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SystemListStyleMetrics.Sidebar.outlineDisclosureFont.getter()
{
  return swift_retain();
}

uint64_t SystemListStyleMetrics.Sidebar.outlineDisclosureFont.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*SystemListStyleMetrics.Sidebar.outlineDisclosureFont.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SystemListStyleMetrics.sidebar.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  swift_retain();

  return swift_retain();
}

uint64_t key path setter for SystemListStyleMetrics.sidebar : SystemListStyleMetrics(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t v5 = a1[2];
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

uint64_t SystemListStyleMetrics.sidebar.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  swift_release();
  uint64_t result = swift_release();
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = v3;
  *(void *)(v1 + 16) = v4;
  return result;
}

uint64_t (*SystemListStyleMetrics.sidebar.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  char v3 = *(unsigned char *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v1;
  swift_retain();
  swift_retain();
  return SystemListStyleMetrics.sidebar.modify;
}

uint64_t SystemListStyleMetrics.sidebar.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    *(void *)uint64_t v5 = v2;
    *(unsigned char *)(v5 + 8) = v3;
    *(void *)(v5 + 16) = v4;
    swift_release();
    return swift_release();
  }
  else
  {
    swift_release();
    uint64_t result = swift_release();
    *(void *)uint64_t v5 = v2;
    *(unsigned char *)(v5 + 8) = v3;
    *(void *)(v5 + 16) = v4;
  }
  return result;
}

void SystemShadowStyleMetrics.Grounding.intensity.getter()
{
}

void SystemShadowStyleMetrics.Grounding.decayRate.getter()
{
}

void SystemShadowStyleMetrics.Grounding.decayRate.setter()
{
}

void SystemShadowStyleMetrics.Grounding.decayRate.modify()
{
}

void SystemShadowStyleMetrics.Separated.radius.getter()
{
}

void SystemShadowStyleMetrics.Separated.offsetX.getter()
{
}

void SystemShadowStyleMetrics.Separated.offsetY.getter()
{
}

void SystemShadowStyleMetrics.Separated.opacity.getter()
{
}

void SystemShadowStyleMetrics.Separated.cgColor.getter()
{
}

void SystemShadowStyleMetrics.Separated.cgColor.setter()
{
}

void SystemShadowStyleMetrics.grounding.getter()
{
}

void SystemShadowStyleMetrics.grounding.setter()
{
}

void SystemShadowStyleMetrics.separated.getter()
{
}

void SystemHoverEffectStyleMetrics.highlightOpacity.getter()
{
}

void SystemHoverEffectStyleMetrics.increaseFocusStateOpacity.getter()
{
}

void SystemHoverEffectStyleMetrics.defaultBrightnessMultiplier.getter()
{
}

uint64_t sub_245C8ADF8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  swift_retain();

  return swift_retain();
}

ValueMetadata *type metadata accessor for SystemStyleMetrics()
{
  return &type metadata for SystemStyleMetrics;
}

ValueMetadata *type metadata accessor for SystemListStyleMetrics()
{
  return &type metadata for SystemListStyleMetrics;
}

uint64_t initializeBufferWithCopyOfBuffer for SystemListStyleMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SystemListStyleMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SystemListStyleMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SystemListStyleMetrics.Sidebar()
{
  return &type metadata for SystemListStyleMetrics.Sidebar;
}

void destroy for SystemShadowStyleMetrics(uint64_t a1)
{
}

uint64_t initializeWithCopy for SystemShadowStyleMetrics(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v4;
  id v5 = v4;
  return a1;
}

void *assignWithCopy for SystemShadowStyleMetrics(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  long long v3 = (void *)a2[6];
  uint64_t v4 = (void *)a1[6];
  a1[6] = v3;
  id v5 = v3;

  return a1;
}

uint64_t assignWithTake for SystemShadowStyleMetrics(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  return a1;
}

ValueMetadata *type metadata accessor for SystemShadowStyleMetrics()
{
  return &type metadata for SystemShadowStyleMetrics;
}

ValueMetadata *type metadata accessor for SystemShadowStyleMetrics.Grounding()
{
  return &type metadata for SystemShadowStyleMetrics.Grounding;
}

void destroy for SystemShadowStyleMetrics.Separated(uint64_t a1)
{
}

uint64_t initializeWithCopy for SystemShadowStyleMetrics.Separated(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  id v5 = v4;
  return a1;
}

void *assignWithCopy for SystemShadowStyleMetrics.Separated(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  long long v3 = (void *)a2[4];
  uint64_t v4 = (void *)a1[4];
  a1[4] = v3;
  id v5 = v3;

  return a1;
}

uint64_t assignWithTake for SystemShadowStyleMetrics.Separated(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  return a1;
}

ValueMetadata *type metadata accessor for SystemShadowStyleMetrics.Separated()
{
  return &type metadata for SystemShadowStyleMetrics.Separated;
}

ValueMetadata *type metadata accessor for SystemHoverEffectStyleMetrics()
{
  return &type metadata for SystemHoverEffectStyleMetrics;
}

void static SystemStyleMetrics.shadows.setter()
{
}

void SystemShadowStyleMetrics.Grounding.intensity.setter()
{
}

void SystemShadowStyleMetrics.Separated.radius.setter()
{
}

void SystemShadowStyleMetrics.Separated.offsetX.setter()
{
}

void SystemShadowStyleMetrics.Separated.offsetY.setter()
{
}

void SystemShadowStyleMetrics.Separated.opacity.setter()
{
}

void SystemHoverEffectStyleMetrics.highlightOpacity.setter()
{
}

void SystemHoverEffectStyleMetrics.increaseFocusStateOpacity.setter()
{
}

void SystemHoverEffectStyleMetrics.defaultBrightnessMultiplier.setter()
{
}

void SystemShadowStyleMetrics.separated.setter()
{
}

unsigned __int8 *AccessibilityTraitSet.init(trait:)@<X0>(unsigned __int8 *result@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 >= 0x40) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 1 << v2;
  }
  *a2 = v3;
  return result;
}

void static AccessibilityTraits.isSelected.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static AccessibilityTraits.isLink.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static AccessibilityTraits.isSearchField.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static AccessibilityTraits.playsSound.getter(void *a1@<X8>)
{
  *a1 = 64;
}

void static AccessibilityTraits.isSummaryElement.getter(void *a1@<X8>)
{
  *a1 = 512;
}

void static AccessibilityTraits.updatesFrequently.getter(void *a1@<X8>)
{
  *a1 = 1024;
}

void static AccessibilityTraits.allowsDirectInteraction.getter(void *a1@<X8>)
{
  *a1 = 4096;
}

void static AccessibilityTraits.causesPageTurn.getter(void *a1@<X8>)
{
  *a1 = 0x2000;
}

void static AccessibilityTraits.isToggle.getter(void *a1@<X8>)
{
  *a1 = 0x10000000;
}

void static AccessibilityTraits.isTabBar.getter(void *a1@<X8>)
{
  *a1 = 0x400000;
}

void static AccessibilityTraits.isTabButton.getter(void *a1@<X8>)
{
  *a1 = 0x800000;
}

void static AccessibilityTraits.isBackButton.getter(void *a1@<X8>)
{
  *a1 = 0x1000000;
}

void static AccessibilityTraits.excludeFromItemChooser.getter(void *a1@<X8>)
{
  *a1 = 0x2000000;
}

void static AccessibilityTraits.isSwitch.getter(void *a1@<X8>)
{
  *a1 = 0x10000;
}

void AccessibilityTraits.init()(void *a1@<X8>)
{
  *a1 = 0;
}

void *AccessibilityTraits.union(_:)@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *AccessibilityTraits.formUnion(_:)(void *result)
{
  *v1 |= *result;
  return result;
}

void *AccessibilityTraits.intersection(_:)@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *AccessibilityTraits.formIntersection(_:)(void *result)
{
  *v1 &= *result;
  return result;
}

void *AccessibilityTraits.symmetricDifference(_:)@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *AccessibilityTraits.formSymmetricDifference(_:)(void *result)
{
  *v1 ^= *result;
  return result;
}

BOOL AccessibilityTraits.contains(_:)(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL AccessibilityTraits.insert(_:)(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2;
  uint64_t v5 = *v2 & *a2;
  if (v5 != *a2)
  {
    v4 |= v3;
    *unsigned int v2 = v4;
  }
  *a1 = v4;
  return v5 != v3;
}

void *AccessibilityTraits.remove(_:)@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & ~*result;
  *unsigned int v2 = v3;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void *AccessibilityTraits.update(with:)@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  *unsigned int v2 = v3;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

BOOL static AccessibilityTraits.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance AccessibilityTraits@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & ~*result;
  *unsigned int v2 = v3;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void *protocol witness for SetAlgebra.update(with:) in conformance AccessibilityTraits@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  *unsigned int v2 = v3;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance AccessibilityTraits(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

uint64_t AccessibilityTrait.rawValue.getter()
{
  return *v0;
}

uint64_t AccessibilityTrait.displayDescription.getter()
{
  uint64_t result = 0;
  if (((1 << *v0) & 0x13C07FFF) != 0)
  {
    v2._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    return 46;
  }
  return result;
}

uint64_t AccessibilityTrait.uiTrait.getter()
{
  uint64_t result = 0;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x10000;
      break;
    case 2:
      uint64_t result = 8;
      break;
    case 3:
      uint64_t result = 2;
      break;
    case 4:
      uint64_t result = 1024;
      break;
    case 5:
      uint64_t result = 4;
      break;
    case 6:
      uint64_t result = 16;
      break;
    case 7:
      uint64_t result = 32;
      break;
    case 8:
      uint64_t result = 64;
      break;
    case 9:
      uint64_t result = 128;
      break;
    case 0xA:
      uint64_t result = 512;
      break;
    case 0xB:
      uint64_t result = 2048;
      break;
    case 0xC:
      uint64_t result = 0x2000;
      break;
    case 0xD:
      uint64_t result = 0x4000;
      break;
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x19:
    case 0x1A:
      return result;
    case 0x11:
      uint64_t result = 0x100000;
      break;
    case 0x16:
      uint64_t result = 0x8000;
      break;
    case 0x17:
      uint64_t result = 0x10000000;
      break;
    case 0x18:
      uint64_t result = 0x8000000;
      break;
    case 0x1B:
      uint64_t result = 0x10000000000;
      break;
    case 0x1C:
      uint64_t result = 0x20000000000000;
      break;
    case 0x1D:
      uint64_t result = 0x40000000000;
      break;
    default:
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t AccessibilityTrait.isElementUITrait.getter()
{
  return (*v0 < 0x1EuLL) & (0x39822BFBu >> *v0);
}

uint64_t AccessibilityTrait.isContainerUITrait.getter()
{
  return (*v0 < 0x17uLL) & (0x401404u >> *v0);
}

uint64_t AccessibilityTrait.isInteractionUITrait.getter()
{
  return (*v0 < 0xEuLL) & (0x2844u >> *v0);
}

SwiftUI::AccessibilityTrait_optional __swiftcall AccessibilityTrait.init(rawValue:)(Swift::UInt64 rawValue)
{
  char v2 = 0;
  char v3 = 12;
  switch(rawValue)
  {
    case 0uLL:
      goto LABEL_14;
    case 1uLL:
      char v2 = 1;
      goto LABEL_14;
    case 2uLL:
      char v2 = 2;
      goto LABEL_14;
    case 3uLL:
      char v2 = 3;
      goto LABEL_14;
    case 4uLL:
      char v2 = 4;
      goto LABEL_14;
    case 5uLL:
      char v2 = 5;
      goto LABEL_14;
    case 6uLL:
      char v2 = 6;
      goto LABEL_14;
    case 7uLL:
      char v2 = 7;
      goto LABEL_14;
    case 8uLL:
      char v2 = 8;
      goto LABEL_14;
    case 9uLL:
      char v2 = 9;
      goto LABEL_14;
    case 0xAuLL:
      char v2 = 10;
      goto LABEL_14;
    case 0xBuLL:
      char v2 = 11;
LABEL_14:
      char v3 = v2;
      goto LABEL_15;
    case 0xCuLL:
LABEL_15:
      *uint64_t v1 = v3;
      break;
    case 0xDuLL:
      *uint64_t v1 = 13;
      break;
    case 0xEuLL:
      *uint64_t v1 = 14;
      break;
    case 0xFuLL:
      *uint64_t v1 = 15;
      break;
    case 0x10uLL:
      *uint64_t v1 = 16;
      break;
    case 0x11uLL:
      *uint64_t v1 = 17;
      break;
    case 0x12uLL:
      *uint64_t v1 = 18;
      break;
    case 0x13uLL:
      *uint64_t v1 = 19;
      break;
    case 0x14uLL:
      *uint64_t v1 = 20;
      break;
    case 0x15uLL:
      *uint64_t v1 = 21;
      break;
    case 0x16uLL:
      *uint64_t v1 = 22;
      break;
    case 0x17uLL:
      *uint64_t v1 = 23;
      break;
    case 0x18uLL:
      *uint64_t v1 = 24;
      break;
    case 0x19uLL:
      *uint64_t v1 = 25;
      break;
    case 0x1AuLL:
      *uint64_t v1 = 26;
      break;
    case 0x1BuLL:
      *uint64_t v1 = 27;
      break;
    case 0x1CuLL:
      *uint64_t v1 = 28;
      break;
    case 0x1DuLL:
      *uint64_t v1 = 29;
      break;
    default:
      *uint64_t v1 = 30;
      break;
  }
  return (SwiftUI::AccessibilityTrait_optional)rawValue;
}

void *static AccessibilityTrait.allCases.getter()
{
  return &outlined read-only object #0 of static AccessibilityTrait.allCases.getter;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityTrait()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityTrait()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityTrait()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

SwiftUI::AccessibilityTrait_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityTrait(Swift::UInt64 *a1)
{
  return AccessibilityTrait.init(rawValue:)(*a1);
}

void protocol witness for static CaseIterable.allCases.getter in conformance AccessibilityTrait(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static AccessibilityTrait.allCases.getter;
}

uint64_t AccessibilityTraitSet.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t AccessibilityTraitSet.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityTraitSet()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityTraitSet()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityTraitSet()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityTraitSet()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityTraitSet()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t AccessibilityNullableOptionSet<>.init(adding:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (unsigned __int8 *)(result + 32);
    while (1)
    {
      unsigned int v6 = *v5++;
      uint64_t v7 = 1 << v6;
      uint64_t v8 = v6 >= 0x40 ? 0 : v7;
      BOOL v9 = __CFADD__(v4, v8);
      v4 += v8;
      if (v9) {
        break;
      }
      if (!--v3) {
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v4 = 0;
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v4;
    a2[1] = v4;
  }
  return result;
}

unsigned __int8 *AccessibilityNullableOptionSet<>.init(removing:)@<X0>(unsigned __int8 *result@<X0>, void *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 >= 0x40) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 1 << v2;
  }
  *a2 = 0;
  a2[1] = v3;
  return result;
}

uint64_t AccessibilityNullableOptionSet<>.init(removing:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (unsigned __int8 *)(result + 32);
    while (1)
    {
      unsigned int v6 = *v5++;
      uint64_t v7 = 1 << v6;
      uint64_t v8 = v6 >= 0x40 ? 0 : v7;
      BOOL v9 = __CFADD__(v4, v8);
      v4 += v8;
      if (v9) {
        break;
      }
      if (!--v3) {
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v4 = 0;
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = 0;
    a2[1] = v4;
  }
  return result;
}

BOOL AccessibilityNullableOptionSet<>.isSet(_:)(unsigned __int8 *a1)
{
  unsigned int v2 = *a1;
  if (v2 >= 0x40) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 1 << v2;
  }
  return (v3 & ~*(void *)(v1 + 8)) == 0;
}

uint64_t AccessibilityNullableOptionSet<>.subscript.getter(unsigned __int8 *a1)
{
  unint64_t v2 = *a1;
  if (v2 > 0x3F) {
    return 1;
  }
  uint64_t v4 = 1 << v2;
  if ((*v1 & v4) != 0) {
    return 1;
  }
  else {
    return 2 * ((v4 & v1[1]) == 0);
  }
}

uint64_t AccessibilityNullableOptionSet<>.subscript.setter(uint64_t result, unsigned __int8 *a2)
{
  unsigned int v3 = *a2;
  if (v3 >= 0x40) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 1 << v3;
  }
  if (result != 2)
  {
    uint64_t v7 = v2[1];
    if ((v4 & ~v7) != 0) {
      v2[1] = v7 | v4;
    }
    uint64_t v8 = *v2;
    uint64_t v9 = *v2 & v4;
    if (result)
    {
      if (v9 == v4) {
        return result;
      }
      uint64_t v6 = v8 | v4;
    }
    else
    {
      if (!v9) {
        return result;
      }
      uint64_t v6 = v8 & ~v4;
    }
    goto LABEL_16;
  }
  uint64_t v5 = v2[1];
  if ((v5 & v4) != 0) {
    v2[1] = v5 & ~v4;
  }
  if ((*v2 & v4) != 0)
  {
    uint64_t v6 = *v2 & ~v4;
LABEL_16:
    *unint64_t v2 = v6;
  }
  return result;
}

uint64_t (*AccessibilityNullableOptionSet<>.subscript.modify(uint64_t a1, unsigned __int8 *a2))(uint64_t a1)
{
  *(void *)a1 = v2;
  unint64_t v3 = *a2;
  *(unsigned char *)(a1 + 9) = v3;
  if (v3 <= 0x3F)
  {
    uint64_t v5 = 1 << v3;
    if ((*v2 & v5) != 0) {
      char v4 = 1;
    }
    else {
      char v4 = 2 * ((v2[1] & v5) == 0);
    }
  }
  else
  {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 8) = v4;
  return AccessibilityNullableOptionSet<>.subscript.modify;
}

uint64_t AccessibilityNullableOptionSet<>.subscript.modify(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 9);
  if (v1 >= 0x40) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = 1 << v1;
  }
  return specialized AccessibilityNullableOptionSet.subscript.setter(*(unsigned __int8 *)(a1 + 8), v2);
}

uint64_t AccessibilityNullableOptionSet<>.subscript.getter(unsigned __int8 *a1, unsigned __int8 a2)
{
  unint64_t v3 = *a1;
  if (v3 > 0x3F) {
    return 1;
  }
  uint64_t v5 = 1 << v3;
  if ((*v2 & v5) != 0) {
    return 1;
  }
  else {
    return ((v5 & v2[1]) == 0) & a2;
  }
}

uint64_t AccessibilityProperties.isTabBar.getter()
{
  return AccessibilityProperties.isTabBar.getter(0x16u);
}

uint64_t AccessibilityProperties.isTabBar.setter(uint64_t a1)
{
  unsigned __int8 v2 = 22;
  return AccessibilityProperties.subscript.setter(a1, &v2);
}

uint64_t (*AccessibilityProperties.isTabBar.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)a1 = v1;
  uint64_t v4 = *v1;
  unsigned __int8 v3 = 22;
  *(unsigned char *)(a1 + 8) = AccessibilityProperties.subscript.getter(&v3);
  return AccessibilityProperties.isTabBar.modify;
}

uint64_t AccessibilityProperties.isTabBar.modify(uint64_t a1, char a2)
{
  return AccessibilityProperties.isTabBar.modify(a1, a2, 22);
}

uint64_t AccessibilityProperties.isTabButton.getter()
{
  return AccessibilityProperties.isTabBar.getter(0x17u);
}

uint64_t AccessibilityProperties.isTabButton.setter(uint64_t a1)
{
  unsigned __int8 v2 = 23;
  return AccessibilityProperties.subscript.setter(a1, &v2);
}

uint64_t (*AccessibilityProperties.isTabButton.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)a1 = v1;
  uint64_t v4 = *v1;
  unsigned __int8 v3 = 23;
  *(unsigned char *)(a1 + 8) = AccessibilityProperties.subscript.getter(&v3);
  return AccessibilityProperties.isTabButton.modify;
}

uint64_t AccessibilityProperties.isTabButton.modify(uint64_t a1, char a2)
{
  return AccessibilityProperties.isTabBar.modify(a1, a2, 23);
}

uint64_t AccessibilityProperties.isBackButton.getter()
{
  return AccessibilityProperties.isTabBar.getter(0x18u);
}

uint64_t AccessibilityProperties.isBackButton.setter(uint64_t a1)
{
  unsigned __int8 v2 = 24;
  return AccessibilityProperties.subscript.setter(a1, &v2);
}

uint64_t (*AccessibilityProperties.isBackButton.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)a1 = v1;
  uint64_t v4 = *v1;
  unsigned __int8 v3 = 24;
  *(unsigned char *)(a1 + 8) = AccessibilityProperties.subscript.getter(&v3);
  return AccessibilityProperties.isBackButton.modify;
}

uint64_t AccessibilityProperties.isBackButton.modify(uint64_t a1, char a2)
{
  return AccessibilityProperties.isTabBar.modify(a1, a2, 24);
}

uint64_t AccessibilityProperties.excludeFromItemChooser.getter()
{
  return AccessibilityProperties.isTabBar.getter(0x19u);
}

uint64_t AccessibilityProperties.isTabBar.getter(unsigned __int8 a1)
{
  uint64_t v4 = *v1;
  unsigned __int8 v3 = a1;
  return AccessibilityProperties.subscript.getter(&v3);
}

uint64_t AccessibilityProperties.excludeFromItemChooser.setter(uint64_t a1)
{
  unsigned __int8 v2 = 25;
  return AccessibilityProperties.subscript.setter(a1, &v2);
}

uint64_t (*AccessibilityProperties.excludeFromItemChooser.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)a1 = v1;
  uint64_t v4 = *v1;
  unsigned __int8 v3 = 25;
  *(unsigned char *)(a1 + 8) = AccessibilityProperties.subscript.getter(&v3);
  return AccessibilityProperties.excludeFromItemChooser.modify;
}

uint64_t AccessibilityProperties.excludeFromItemChooser.modify(uint64_t a1, char a2)
{
  return AccessibilityProperties.isTabBar.modify(a1, a2, 25);
}

uint64_t AccessibilityProperties.isTabBar.modify(uint64_t a1, char a2, char a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 8);
  if (a2)
  {
    char v6 = a3;
    uint64_t v4 = (unsigned __int8 *)&v6;
  }
  else
  {
    char v7 = a3;
    uint64_t v4 = (unsigned __int8 *)&v7;
  }
  return AccessibilityProperties.subscript.setter(v3, v4);
}

unint64_t lazy protocol witness table accessor for type AccessibilityTrait and conformance AccessibilityTrait()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTrait and conformance AccessibilityTrait;
  if (!lazy protocol witness table cache variable for type AccessibilityTrait and conformance AccessibilityTrait)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTrait and conformance AccessibilityTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [AccessibilityTrait] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [AccessibilityTrait] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AccessibilityTrait] and conformance [A])
  {
    type metadata accessor for [AccessibilityTrait]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AccessibilityTrait] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [AccessibilityTrait]()
{
  if (!lazy cache variable for type metadata for [AccessibilityTrait])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityTrait]);
    }
  }
}

uint64_t sub_245C8C2B4@<X0>(long long *a1@<X0>, unsigned __int8 *a2@<X1>, unsigned char *a3@<X8>)
{
  unsigned __int8 v4 = *a2;
  long long v7 = *a1;
  unsigned __int8 v6 = v4;
  uint64_t result = AccessibilityNullableOptionSet<>.subscript.getter(&v6);
  *a3 = result;
  return result;
}

uint64_t sub_245C8C2FC(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3 = *a1;
  unsigned __int8 v5 = *a3;
  return AccessibilityNullableOptionSet<>.subscript.setter(v3, &v5);
}

uint64_t sub_245C8C338()
{
  return 0;
}

uint64_t sub_245C8C348@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_4Tm(a1, 0x16u, a2);
}

uint64_t sub_245C8C350(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  unsigned __int8 v3 = 22;
  return AccessibilityProperties.subscript.setter(v1, &v3);
}

uint64_t sub_245C8C38C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_4Tm(a1, 0x17u, a2);
}

uint64_t sub_245C8C394(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  unsigned __int8 v3 = 23;
  return AccessibilityProperties.subscript.setter(v1, &v3);
}

uint64_t sub_245C8C3D0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_4Tm(a1, 0x18u, a2);
}

uint64_t sub_245C8C3D8(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  unsigned __int8 v3 = 24;
  return AccessibilityProperties.subscript.setter(v1, &v3);
}

uint64_t sub_245C8C414@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_4Tm(a1, 0x19u, a2);
}

uint64_t keypath_get_4Tm@<X0>(uint64_t *a1@<X0>, unsigned __int8 a2@<W3>, unsigned char *a3@<X8>)
{
  uint64_t v6 = *a1;
  unsigned __int8 v5 = a2;
  uint64_t result = AccessibilityProperties.subscript.getter(&v5);
  *a3 = result;
  return result;
}

uint64_t sub_245C8C460(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  unsigned __int8 v3 = 25;
  return AccessibilityProperties.subscript.setter(v1, &v3);
}

uint64_t getEnumTagSinglePayload for AccessibilityTrait(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE3) {
    goto LABEL_17;
  }
  if (a2 + 29 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 29) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 29;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 29;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 29;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1E;
  int v8 = v6 - 30;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AccessibilityTrait(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 29 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 29) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE2)
  {
    unsigned int v6 = ((a2 - 227) >> 8) + 1;
    *uint64_t result = a2 + 29;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245C8C5F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 29;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityTrait()
{
  return &type metadata for AccessibilityTrait;
}

BOOL specialized Sequence.contains(where:)(uint64_t a1)
{
  uint64_t v31 = a1;
  type metadata accessor for URL?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8]);
  MEMORY[0x270FA5388](v1 - 8);
  int v3 = (char *)&v28 - v2;
  type metadata accessor for (NSInlinePresentationIntent?, URL?, Range<AttributedString.Index>)();
  uint64_t v5 = v4;
  uint64_t v30 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  BOOL v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0, &lazy cache variable for type metadata for (NSInlinePresentationIntent?, URL?, Range<AttributedString.Index>)?, (void (*)(uint64_t))type metadata accessor for (NSInlinePresentationIntent?, URL?, Range<AttributedString.Index>));
  MEMORY[0x270FA5388](v8 - 8);
  BOOL v10 = (char *)&v28 - v9;
  uint64_t v29 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F067A0];
  type metadata accessor for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>(0, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>, MEMORY[0x263F067A0]);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  CGAffineTransform v15 = (char *)&v28 - v14;
  CGAffineTransform v16 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263F06790];
  type metadata accessor for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>(0, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>.Iterator, MEMORY[0x263F06790]);
  uint64_t v33 = v17;
  uint64_t v32 = *(void *)(v17 - 8);
  double v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v28 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, v31, v12, v18);
  lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute> and conformance AttributedString.Runs.AttributesSlice2<A, B>(&lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute> and conformance AttributedString.Runs.AttributesSlice2<A, B>, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>, v29);
  dispatch thunk of Sequence.makeIterator()();
  lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute> and conformance AttributedString.Runs.AttributesSlice2<A, B>(&lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>.Iterator and conformance AttributedString.Runs.AttributesSlice2<A, B>.Iterator, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>.Iterator, v16);
  uint64_t v21 = (uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  do
  {
    dispatch thunk of IteratorProtocol.next()();
    int v24 = (*v21)(v10, 1, v5);
    if (v24 == 1) {
      break;
    }
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for (NSInlinePresentationIntent?, URL?, Range<AttributedString.Index>));
    uint64_t v25 = (uint64_t)&v7[*(int *)(v5 + 48)];
    if (v7[8])
    {
      outlined init with copy of URL?(v25, (uint64_t)v3);
    }
    else
    {
      uint64_t v26 = *(void *)v7 & 0x27;
      outlined init with copy of URL?(v25, (uint64_t)v3);
      if (v26)
      {
        outlined destroy of Morphology?((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8]);
        _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for (NSInlinePresentationIntent?, URL?, Range<AttributedString.Index>));
        break;
      }
    }
    uint64_t v22 = type metadata accessor for URL();
    int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v3, 1, v22);
    outlined destroy of Morphology?((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8]);
    _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for (NSInlinePresentationIntent?, URL?, Range<AttributedString.Index>));
  }
  while (v23 == 1);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v20, v33);
  return v24 != 1;
}

BOOL LocalizedStringKey.isStyled.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v93 = a2;
  uint64_t v92 = a1;
  uint64_t v5 = 0;
  type metadata accessor for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>(0, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>, MEMORY[0x263F067A0]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  BOOL v10 = (char *)&v75 - v9;
  uint64_t v81 = type metadata accessor for AttributedString.Runs();
  uint64_t v80 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  v79 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8]);
  MEMORY[0x270FA5388](v12 - 8);
  v91 = (char *)&v75 - v13;
  uint64_t v88 = type metadata accessor for AttributedString.MarkdownParsingOptions.FailurePolicy();
  uint64_t v86 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  v87 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for AttributedString.MarkdownParsingOptions.InterpretedSyntax();
  uint64_t v82 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  uint64_t v84 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for AttributedString.MarkdownParsingOptions();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v85 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0, &lazy cache variable for type metadata for AttributedString?, MEMORY[0x263F06828]);
  MEMORY[0x270FA5388](v18 - 8);
  v90 = (char *)&v75 - v19;
  uint64_t v20 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v20 - 8);
  v107 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for LocalizedStringResource();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  unsigned __int8 v100 = (char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  v105 = (char *)&v75 - v26;
  MEMORY[0x270FA5388](v27);
  v106 = (char *)&v75 - v28;
  uint64_t v29 = type metadata accessor for AttributedString();
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  unint64_t v78 = (char *)&v75 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v99 = (char *)&v75 - v33;
  MEMORY[0x270FA5388](v34);
  uint64_t v98 = (char *)&v75 - v35;
  uint64_t v112 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  v36.n128_f64[0] = MEMORY[0x270FA5388](v112);
  unint64_t v38 = (char *)&v75 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = *(void *)(a4 + 16);
  uint64_t v89 = v30;
  if (v109)
  {
    uint64_t v75 = v10;
    uint64_t v76 = v8;
    uint64_t v77 = v7;
    uint64_t v39 = *(void *)(type metadata accessor for LocalizedStringKey.FormatArgument(0) - 8);
    uint64_t v111 = a4 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
    uint64_t v96 = (void (**)(char *, char *, uint64_t))(v23 + 32);
    v104 = (void (**)(char *, char *, uint64_t))(v23 + 16);
    uint64_t v95 = (void (**)(char *, uint64_t))(v23 + 8);
    char v103 = (void (**)(char *, uint64_t))(v30 + 8);
    v94 = (void (**)(char *, char *, uint64_t))(v30 + 32);
    uint64_t v110 = *(void *)(v39 + 72);
    swift_bridgeObjectRetain();
    uint64_t v40 = 0;
    uint64_t v41 = v106;
    uint64_t v42 = (uint64_t)v107;
    uint64_t v101 = v22;
    uint64_t v97 = v29;
    uint64_t v102 = a4;
    while (2)
    {
      uint64_t v43 = v111 + v110 * v40++;
      outlined init with copy of LocalizedStringKey.FormatArgument(v43, (uint64_t)v38, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          v108 = v5;
          uint64_t v45 = *(void *)v38;
          uint64_t v44 = *((void *)v38 + 1);
          int v46 = v38[16];
          uint64_t v47 = *((void *)v38 + 3);
          if (v46 == 1
            && (uint64_t v113 = 0,
                uint64_t v48 = *(uint64_t (**)(uint64_t *))(*(void *)v45 + 104),
                swift_retain(),
                char v49 = v48(&v113),
                outlined consume of Text.Storage(v45, v44, 1),
                (v49 & 1) != 0))
          {
            BOOL v68 = 1;
            outlined consume of Text.Storage(v45, v44, 1);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v50 = *(void *)(v47 + 16);
            if (!v50)
            {
              outlined consume of Text.Storage(v45, v44, v46);
              swift_bridgeObjectRelease();
              uint64_t v5 = v108;
              goto LABEL_24;
            }
            uint64_t v51 = (unsigned char *)(v47 + 40);
            while ((*v51 & 0xE0) == 0xC0)
            {
              uint64_t v52 = *((void *)v51 - 1);
              uint64_t v113 = 0;
              if ((*(uint64_t (**)(uint64_t *))(*(void *)v52 + 80))(&v113)) {
                break;
              }
              v51 += 16;
              if (!--v50)
              {
                outlined consume of Text.Storage(v45, v44, v46);
                swift_bridgeObjectRelease();
                uint64_t v5 = v108;
                uint64_t v29 = v97;
LABEL_24:
                uint64_t v41 = v106;
                uint64_t v42 = (uint64_t)v107;
                uint64_t v22 = v101;
                goto LABEL_4;
              }
            }
            outlined consume of Text.Storage(v45, v44, v46);
            swift_bridgeObjectRelease();
LABEL_26:
            swift_bridgeObjectRelease();
            BOOL v68 = 1;
          }
          break;
        case 2u:
          uint64_t v53 = v98;
          (*v94)(v98, v38, v29);
          char v54 = AttributedString.isStyled.getter();
          (*v103)(v53, v29);
          if (v54) {
            goto LABEL_26;
          }
          goto LABEL_4;
        case 3u:
          v108 = v5;
          (*v96)(v41, v38, v22);
          uint64_t v113 = 0;
          uint64_t v114 = 0;
          uint64_t v55 = v22;
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v56 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
          uint64_t v57 = static CoreGlue2.shared;
          v56(&v113);

          uint64_t v58 = v113;
          uint64_t v59 = v114;
          uint64_t v60 = *v104;
          (*v104)(v105, v41, v55);
          if (v59)
          {
            swift_retain_n();
            swift_retain_n();
            specialized PropertyList.Tracker.value<A>(_:for:)(v58, v42);
          }
          else
          {
            uint64_t v61 = swift_retain_n();
            uint64_t v62 = v108;
            specialized closure #1 in PropertyList.subscript.getter(v61, v42);
            v108 = v62;
          }
          swift_release_n();
          swift_release_n();
          uint64_t v63 = v105;
          LocalizedStringResource.locale.setter();
          uint64_t v64 = v101;
          v60(v100, v63, v101);
          uint64_t v22 = v64;
          uint64_t v65 = v99;
          AttributedString.init(localized:)();
          uint64_t v66 = *v95;
          (*v95)(v63, v22);
          swift_release();
          swift_release();
          char v67 = AttributedString.isStyled.getter();
          uint64_t v29 = v97;
          (*v103)(v65, v97);
          uint64_t v41 = v106;
          v66(v106, v22);
          uint64_t v42 = (uint64_t)v107;
          uint64_t v5 = v108;
          if (v67) {
            goto LABEL_26;
          }
          goto LABEL_4;
        default:

          __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
LABEL_4:
          if (v40 != v109) {
            continue;
          }
          swift_bridgeObjectRelease();
          uint64_t v7 = v77;
          uint64_t v8 = v76;
          BOOL v10 = v75;
          goto LABEL_28;
      }
      break;
    }
  }
  else
  {
LABEL_28:
    (*(void (**)(char *, void, uint64_t, __n128))(v82 + 104))(v84, *MEMORY[0x263F06758], v83, v36);
    (*(void (**)(char *, void, uint64_t))(v86 + 104))(v87, *MEMORY[0x263F06748], v88);
    swift_bridgeObjectRetain();
    AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:)();
    uint64_t v69 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v91, 1, 1, v69);
    uint64_t v70 = (uint64_t)v90;
    AttributedString.init(markdown:options:baseURL:)();
    uint64_t v71 = v89;
    if (v5)
    {

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(v70, 1, 1, v29);
    }
    else
    {
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v89 + 56))(v70, 0, 1, v29);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v70, 1, v29) != 1)
      {
        uint64_t v73 = v78;
        (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v78, v70, v29);
        uint64_t v74 = v79;
        AttributedString.runs.getter();
        lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute();
        lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute();
        AttributedString.Runs.subscript.getter();
        (*(void (**)(char *, uint64_t))(v80 + 8))(v74, v81);
        BOOL v68 = specialized Sequence.contains(where:)((uint64_t)v10);
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v29);
        return v68;
      }
    }
    outlined destroy of Morphology?(v70, &lazy cache variable for type metadata for AttributedString?, MEMORY[0x263F06828]);
    return 0;
  }
  return v68;
}

uint64_t LocalizedStringKey.resolve(in:table:bundle:)(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8)
{
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v14 = type metadata accessor for Text.ResolvedString(0);
  uint64_t v15 = (int *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *a1;
  uint64_t v19 = a1[1];
  Text.Style.init()((uint64_t)v17);
  uint64_t v20 = &v17[v15[7]];
  *(void *)uint64_t v20 = 0;
  *((void *)v20 + 1) = 0;
  uint64_t v21 = &v17[v15[8]];
  *(void *)uint64_t v21 = 0;
  *((void *)v21 + 1) = 0xE000000000000000;
  v17[v15[9]] = 0;
  specialized LocalizedStringKey.resolve<A>(into:in:options:table:bundle:)((uint64_t)v17, v18, v19, 0, a2, a3, v24, v25, a6, a7, a8);
  uint64_t v22 = *(void *)v21;
  swift_bridgeObjectRetain();
  _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)v17, type metadata accessor for Text.ResolvedString);
  return v22;
}

void specialized LocalizedStringKey.resolve<A>(into:in:options:table:bundle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11)
{
  uint64_t v104 = a8;
  uint64_t v100 = a4;
  uint64_t v106 = a2;
  type metadata accessor for URL?(0, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v99 = (uint64_t *)((char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v18);
  uint64_t v97 = (uint64_t)&v97 - v19;
  uint64_t v103 = type metadata accessor for Locale();
  uint64_t v105 = *(void *)(v103 - 8);
  MEMORY[0x270FA5388](v103);
  uint64_t v21 = (char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v97 - v23;
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  uint64_t v101 = a11;
  unsigned int v25 = static _SemanticFeature_v3.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  int v102 = a10;
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if (static Semantics.forced < v25)
  {
LABEL_7:
    uint64_t v26 = v106;
    if (a7) {
      id v27 = a7;
    }
    else {
      id v27 = objc_msgSend(self, sel_mainBundle);
    }
    id v30 = a7;
    uint64_t v31 = (void *)MEMORY[0x24C522820](v104, a9);
    if (a6) {
      uint64_t v32 = (void *)MEMORY[0x24C522820](a5, a6);
    }
    else {
      uint64_t v32 = 0;
    }
    uint64_t v37 = v103;
    if (a3)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v26, (uint64_t)v21);
    }
    else
    {
      uint64_t v47 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v47, (uint64_t)v21);
    }
    swift_release_n();
    swift_release_n();
    Class isa = Locale._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v105 + 8))(v21, v37);
    char v49 = (void *)_LocalizeString(v27, v31, v32, isa);

    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v52 = v51;

    if (v102)
    {
      uint64_t v103 = v50;
      uint64_t v104 = v52;
      if (a3)
      {
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v26, (uint64_t *)v109);
        swift_release_n();
        swift_release_n();
        uint64_t v53 = *(void *)&v109[0];
        swift_retain_n();
        swift_retain_n();
        char v54 = (void (*)(void, void))v99;
        specialized PropertyList.Tracker.value<A>(_:for:)(v26, (uint64_t)v99);
        uint64_t v55 = v101;
      }
      else
      {
        _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
        BloomFilter.init(hashValue:)(v65);
        uint64_t v66 = v108;
        uint64_t v67 = swift_retain_n();
        uint64_t v68 = specialized find1<A>(_:key:filter:)(v67, v66);
        uint64_t v55 = v101;
        char v54 = (void (*)(void, void))v99;
        if (v68) {
          uint64_t v53 = *(void *)(v68 + 72);
        }
        else {
          uint64_t v53 = 0;
        }
        swift_release_n();
        uint64_t v83 = swift_retain_n();
        specialized closure #1 in PropertyList.subscript.getter(v83, (uint64_t)v54);
      }
      swift_release_n();
      swift_release_n();
      char v84 = v53 == 0;
      (*(void (**)(void (*)(void, void), void, uint64_t, uint64_t))(v105 + 56))(v54, 0, 1, v37);
      int64_t v85 = *(void *)(v55 + 16);
      if (v85)
      {
        uint64_t v98 = a1;
        uint64_t v110 = MEMORY[0x263F8EE78];
        swift_retain();
        uint64_t v86 = a3;
        swift_retain();
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v85, 0);
        uint64_t v87 = v110;
        uint64_t v88 = *(void *)(type metadata accessor for LocalizedStringKey.FormatArgument(0) - 8);
        unint64_t v89 = v55 + ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80));
        uint64_t v90 = *(void *)(v88 + 72);
        do
        {
          *(void *)&long long v108 = v106;
          *((void *)&v108 + 1) = v86;
          BOOL v91 = LocalizedStringKey.FormatArgument.resolve(in:idiom:)((uint64_t)v109, (uint64_t *)&v108);
          uint64_t v110 = v87;
          unint64_t v93 = *(void *)(v87 + 16);
          unint64_t v92 = *(void *)(v87 + 24);
          if (v93 >= v92 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v92 > 1, v93 + 1, 1);
            uint64_t v87 = v110;
          }
          v84 |= v91;
          *(void *)(v87 + 16) = v93 + 1;
          outlined init with take of ScrollStateRequest(v109, v87 + 40 * v93 + 32);
          v89 += v90;
          --v85;
        }
        while (v85);
        swift_bridgeObjectRelease();
        a3 = v86;
        swift_release();
        uint64_t v26 = v106;
        swift_release();
        a1 = v98;
        char v54 = (void (*)(void, void))v99;
      }
      uint64_t v94 = String.init(format:locale:arguments:)();
      uint64_t v96 = v95;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of Morphology?((uint64_t)v54, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
      specialized LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(v94, v96, a1, v26, a3, v100, v84 & 1);
      goto LABEL_61;
    }
    if (a3)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v26, (uint64_t *)v109);
      swift_release_n();
    }
    else
    {
      _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      BloomFilter.init(hashValue:)(v69);
      uint64_t v70 = *(void *)&v109[0];
      uint64_t v71 = swift_retain_n();
      specialized find1<A>(_:key:filter:)(v71, v70);
    }
    swift_release_n();
    *(void *)&v109[0] = v50;
    *((void *)&v109[0] + 1) = v52;
    swift_bridgeObjectRetain();
    uint64_t v72 = String.init<A>(_:)();
    *(void *)&v109[0] = v26;
    *((void *)&v109[0] + 1) = a3;
    uint64_t v74 = String.caseConvertedIfNeeded(_:)((uint64_t *)v109, v72, v73);
    uint64_t v76 = v75;
    swift_bridgeObjectRelease();
    if (a3)
    {
      swift_retain_n();
      swift_retain_n();
      char v77 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v26);
      swift_release_n();
      swift_release_n();
      if ((v77 & 1) == 0)
      {
LABEL_49:
        type metadata accessor for Text.ResolvedString(0);
        v81._countAndFlagsBits = v74;
        v81._object = v76;
        String.append(_:)(v81);
        swift_bridgeObjectRelease();
LABEL_61:
        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      v109[0] = (unint64_t)v26;
      swift_retain();
      char v82 = specialized static ShouldRedactContentKey.value(in:)((uint64_t *)v109);
      swift_release();
      if ((v82 & 1) == 0) {
        goto LABEL_49;
      }
    }
    uint64_t v78 = String.count.getter();
    uint64_t v74 = MEMORY[0x24C522AC0](3081666804, 0xA400000000000000, v78);
    uint64_t v80 = v79;
    swift_bridgeObjectRelease();
    uint64_t v76 = v80;
    goto LABEL_49;
  }
  uint64_t v28 = v106;
  uint64_t v98 = a1;
  if (a7) {
    id v29 = a7;
  }
  else {
    id v29 = objc_msgSend(self, sel_mainBundle);
  }
  uint64_t v33 = a3;
  id v34 = a7;
  uint64_t v35 = (void *)MEMORY[0x24C522820](v104, a9);
  if (!a6)
  {
    __n128 v36 = 0;
    if (v33) {
      goto LABEL_18;
    }
LABEL_23:
    uint64_t v38 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v38, (uint64_t)v24);
    goto LABEL_24;
  }
  __n128 v36 = (void *)MEMORY[0x24C522820](a5, a6);
  if (!v33) {
    goto LABEL_23;
  }
LABEL_18:
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v28, (uint64_t)v24);
LABEL_24:
  swift_release_n();
  swift_release_n();
  Class v39 = Locale._bridgeToObjectiveC()().super.isa;
  uint64_t v99 = *(uint64_t **)(v105 + 8);
  ((void (*)(char *, uint64_t))v99)(v24, v103);
  uint64_t v40 = (void *)_LocalizeAttributedString(v29, v35, v36, v39);

  if (v102)
  {
    *(void *)&v109[0] = v28;
    *((void *)&v109[0] + 1) = v33;
    uint64_t v41 = v33;
    uint64_t v42 = type metadata accessor for Text.ResolvedString(0);
    uint64_t v43 = v98;
    long long v108 = *(_OWORD *)(v98 + *(int *)(v42 + 20));
    uint64_t v107 = v100;
    LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:)((uint64_t)v40, (uint64_t *)v109, &v108, &v107, v98, v104, a9, 1, v101);
    LODWORD(v104) = v44;
    swift_retain_n();
    if (v41)
    {
      swift_retain_n();
      id v45 = v40;
      uint64_t v46 = v97;
      specialized PropertyList.Tracker.value<A>(_:for:)(v28, v97);
    }
    else
    {
      id v56 = v40;
      uint64_t v46 = v97;
      specialized closure #1 in PropertyList.subscript.getter(v28, v97);
    }
    swift_release_n();
    swift_release_n();
    uint64_t v57 = v105;
    uint64_t v58 = v103;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v105 + 56))(v46, 0, 1, v103);
    uint64_t v59 = getVaList(_:)();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v46, 1, v58) == 1)
    {
      Class v60 = 0;
    }
    else
    {
      Class v60 = Locale._bridgeToObjectiveC()().super.isa;
      ((void (*)(uint64_t, uint64_t))v99)(v46, v58);
    }
    id v61 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F086A0]), sel_initSwiftUIAttributedStringWithFormat_options_locale_arguments_, v40, 0, v60, v59);

    specialized LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(v61, v43, v28, v41, v100, v104 & 1);
  }
  else
  {
    *(void *)&v109[0] = v28;
    *((void *)&v109[0] + 1) = v33;
    if (v33)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v28, (uint64_t *)&v108);
      swift_release_n();
    }
    else
    {
      _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      BloomFilter.init(hashValue:)(v62);
      uint64_t v63 = v108;
      uint64_t v64 = swift_retain_n();
      specialized find1<A>(_:key:filter:)(v64, v63);
    }
    swift_release_n();
    specialized Text.ResolvedString.append(_:in:with:isUniqueSizeVariant:)(v40, (uint64_t *)v109);
  }
}

BOOL closure #1 in LocalizedStringKey.resolve<A>(into:in:options:table:bundle:)@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v13 = *(void *)(a5 - 8);
  double v14 = MEMORY[0x270FA5388](a1);
  uint64_t v16 = &v20[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v17, v18, v14);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 32))(&v22, a5, a6);
  (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v16, a5);
  v21[0] = a2;
  v21[1] = a3;
  BOOL result = LocalizedStringKey.FormatArgument.resolve(in:idiom:)(a7, v21);
  *a4 |= result;
  return result;
}

uint64_t closure #2 in closure #1 in LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:)()
{
  uint64_t v0 = type metadata accessor for AttributedString.CharacterView();
  MEMORY[0x270FA5388](v0);
  AttributedString.characters.getter();
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x263F066D8]);
  return String.init<A>(_:)();
}

uint64_t specialized closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_bridgeObjectRetain();
  uint64_t v9 = String.init<A>(_:)();
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v11 = String.caseConvertedIfNeeded(_:)(&v21, v9, v10);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if (!a7)
  {
    uint64_t v21 = a6;
    uint64_t v22 = 0;
    swift_retain();
    uint64_t v20 = specialized static ShouldRedactContentKey.value(in:)(&v21);
    swift_release();
    if ((v20 & 1) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  swift_retain_n();
  swift_retain_n();
  char v14 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(a6);
  swift_release_n();
  swift_release_n();
  if (v14)
  {
LABEL_3:
    uint64_t v15 = String.count.getter();
    uint64_t v11 = MEMORY[0x24C522AC0](3081666804, 0xA400000000000000, v15);
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    uint64_t v13 = v17;
  }
LABEL_4:
  type metadata accessor for Text.ResolvedString(0);
  v18._countAndFlagsBits = v11;
  v18._object = v13;
  String.append(_:)(v18);
  return swift_bridgeObjectRelease();
}

void specialized closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(int a1, int a2, int a3, int a4, id a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v11 = objc_msgSend(a5, sel_string);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_0(0, &lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x263F8D2B0], MEMORY[0x263F8D2B8], MEMORY[0x263F8D870]);
  lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v15 = _NSRange.init<A, B>(_:in:)();
  id v17 = objc_msgSend(a5, sel_attributedSubstringFromRange_, v15, v16, v12, v14);
  v18[0] = a7;
  v18[1] = a8;
  specialized Text.ResolvedString.append(_:in:with:isUniqueSizeVariant:)(v17, v18);
}

uint64_t specialized closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, char a3, void *a4, int a5, int a6, uint64_t a7, uint64_t a8, id a9, uint64_t a10, uint64_t a11)
{
  id v15 = objc_msgSend(a9, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_0(0, &lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x263F8D2B0], MEMORY[0x263F8D2B8], MEMORY[0x263F8D870]);
  lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v16 = _NSRange.init<A, B>(_:in:)();
  id v18 = objc_msgSend(a9, sel_attributesAtIndex_longestEffectiveRange_inRange_, v16, 0, v16, v17);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  uint64_t v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v20 = Text.withInlinePresentationIntent(from:)(v19, a1, a2, a3 & 1, a4);
  uint64_t v22 = v21;
  LOBYTE(a2) = v23;
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  specialized Text.resolve<A>(into:in:with:)(a10, a7, a8, a11, v20, v22, a2 & 1, v25);
  outlined consume of Text.Storage(v20, v22, a2 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t implicit closure #1 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(58);
  v4._object = (void *)0x800000024621EC40;
  v4._countAndFlagsBits = 0xD00000000000002DLL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0x3A6469202020200ALL;
  v6._object = (void *)0xE900000000000020;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t closure #1 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EnvironmentValues.CapitalizationContext();
  MEMORY[0x270FA5388](v2);
  Swift::String v4 = (void (**)(void))((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::String v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  id v11 = (char *)&v20 - v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v20 - v13;
  outlined init with copy of LocalizedStringKey.FormatArgument(a1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*v4)();
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v14, v11, v5);
  }
  else
  {
    id v15 = *(void (**)(char *, void (**)(void), uint64_t))(v6 + 32);
    v15(v11, v4, v5);
    v15(v14, (void (**)(void))v11, v5);
  }
  static FormatStyleCapitalizationContext.middleOfSentence.getter();
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext, MEMORY[0x263F06E00]);
  char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v8, v5);
  uint64_t v18 = ((uint64_t (*)(char *, uint64_t))v17)(v14, v5);
  if (v16) {
    return static FormatStyleCapitalizationContext.middleOfSentence.getter();
  }
  else {
    return MEMORY[0x24C520B00](v18);
  }
}

uint64_t closure #2 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = String.subscript.getter();
  uint64_t v5 = MEMORY[0x24C522930](v4);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  Swift::String v8 = (__CFString *)MEMORY[0x24C522820](a1, a2);
  uint64_t v9 = (__CFString *)MEMORY[0x24C522820](v5, v7);
  CFLocaleRef isa = Locale._bridgeToObjectiveC()().super.isa;
  BOOL isBeginningOfSentence = _isBeginningOfSentence(v8, v9, isa);
  swift_bridgeObjectRelease();

  if (isBeginningOfSentence)
  {
    JUMPOUT(0x24C520B00);
  }

  return static FormatStyleCapitalizationContext.middleOfSentence.getter();
}

BOOL LocalizedStringKey.resolvesToEmpty(in:options:table:bundle:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, int a8)
{
  int v40 = a8;
  type metadata accessor for URL?(0, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
  MEMORY[0x270FA5388](v14 - 8);
  char v16 = (char *)&v39 - v15;
  uint64_t v17 = type metadata accessor for Locale();
  uint64_t v41 = *(void *)(v17 - 8);
  uint64_t v42 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *a1;
  uint64_t v21 = a1[1];
  if (a5) {
    id v22 = a5;
  }
  else {
    id v22 = objc_msgSend(self, sel_mainBundle);
  }
  id v23 = a5;
  uint64_t v24 = (void *)MEMORY[0x24C522820](a6, a7);
  if (a4) {
    uint64_t v25 = (void *)MEMORY[0x24C522820](a3, a4);
  }
  else {
    uint64_t v25 = 0;
  }
  Class v39 = v16;
  if (v21)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v20, (uint64_t)v19);
  }
  else
  {
    uint64_t v26 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v26, (uint64_t)v19);
  }
  swift_release_n();
  swift_release_n();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v42);
  uint64_t v28 = (void *)_LocalizeString(v22, v24, v25, isa);

  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v31 = v30;

  if (v40)
  {
    if (v21)
    {
      swift_retain_n();
      swift_retain_n();
      uint64_t v32 = (uint64_t)v39;
      specialized PropertyList.Tracker.value<A>(_:for:)(v20, (uint64_t)v39);
    }
    else
    {
      uint64_t v33 = swift_retain_n();
      uint64_t v32 = (uint64_t)v39;
      specialized closure #1 in PropertyList.subscript.getter(v33, (uint64_t)v39);
    }
    swift_release_n();
    swift_release_n();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v32, 0, 1, v42);
    swift_retain();
    swift_retain();
    uint64_t v34 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18LocalizedStringKeyV14FormatArgumentVG_s7CVarArg_ps5NeverOTg503_s7d4UI18fgh114V15resolvesToEmpty2in7options5table6bundleSbAA17EnvironmentValuesV_AA4TextV14ResolveOptionsVSSSgSo8NSBundleCSgtFs7kl6_pAC14iJ6VXEfU_AF0uV0VTf1cn_nTf4ng_n(v34, v20, v21);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v29 = String.init(format:locale:arguments:)();
    unint64_t v36 = v35;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of Morphology?(v32, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
    unint64_t v31 = v36;
  }
  swift_bridgeObjectRelease();
  uint64_t v37 = HIBYTE(v31) & 0xF;
  if ((v31 & 0x2000000000000000) == 0) {
    uint64_t v37 = v29 & 0xFFFFFFFFFFFFLL;
  }
  return v37 == 0;
}

uint64_t LocalizedStringKey.FormatArgument.init(value:formatter:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  MEMORY[0x270FA5388](v6);
  Swift::String v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v8);
  if (a2)
  {
    objc_msgSend(a2, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSFormatter);
    swift_dynamicCast();
    uint64_t v9 = v11[5];
  }
  else
  {
    uint64_t v9 = 0;
  }
  *((void *)v8 + 5) = v9;
  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_storeEnumTagMultiPayload();
  return outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v8, a3, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:formatter:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v10 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = &v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  double v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = &v25[-v16 - 8];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, a3, v15);
  uint64_t v26 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  uint64_t v27 = lazy protocol witness table accessor for type NSObject and conformance NSObject(&lazy protocol witness table cache variable for type NSObject and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  swift_dynamicCast();
  id v18 = a2;
  LocalizedStringKey.FormatArgument.init(value:formatter:)((uint64_t)v25, a2, (uint64_t)v17);
  v19._countAndFlagsBits = 16421;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  outlined init with copy of LocalizedStringKey.FormatArgument((uint64_t)v17, (uint64_t)v13, type metadata accessor for LocalizedStringKey.FormatArgument);
  unint64_t v20 = *(void *)(v3 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1, v20);
  }
  unint64_t v22 = *(void *)(v20 + 16);
  unint64_t v21 = *(void *)(v20 + 24);
  if (v22 >= v21 >> 1) {
    unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1, v20);
  }
  *(void *)(v20 + 16) = v22 + 1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v13, v20+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v22, type metadata accessor for LocalizedStringKey.FormatArgument);
  *(void *)(v3 + 16) = v20;
  return _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)v17, type metadata accessor for LocalizedStringKey.FormatArgument);
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:formatter:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v22[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v22[-1] - v12;
  v22[3] = a3;
  v22[4] = swift_getWitnessTable();
  v22[0] = a1;
  id v14 = a2;
  id v15 = a1;
  LocalizedStringKey.FormatArgument.init(value:formatter:)((uint64_t)v22, a2, (uint64_t)v13);
  v16._countAndFlagsBits = 16421;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  outlined init with copy of LocalizedStringKey.FormatArgument((uint64_t)v13, (uint64_t)v10, type metadata accessor for LocalizedStringKey.FormatArgument);
  unint64_t v17 = *(void *)(v3 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1, v17);
  }
  unint64_t v19 = *(void *)(v17 + 16);
  unint64_t v18 = *(void *)(v17 + 24);
  if (v19 >= v18 >> 1) {
    unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1, v17);
  }
  *(void *)(v17 + 16) = v19 + 1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v10, v17+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v19, type metadata accessor for LocalizedStringKey.FormatArgument);
  *(void *)(v3 + 16) = v17;
  return _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)v13, type metadata accessor for LocalizedStringKey.FormatArgument);
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:format:)(a1, a2, a3, a4, a5, (uint64_t (*)(unsigned char *, unsigned char *, uint64_t, uint64_t, uint64_t))Text.init<A>(_:format:));
}

{
  return LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:format:)(a1, a2, a3, a4, a5, (uint64_t (*)(unsigned char *, unsigned char *, uint64_t, uint64_t, uint64_t))Text.init<A>(_:format:));
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(unsigned char *, unsigned char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = a3;
  uint64_t v12 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  id v14 = &v26[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v16 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v18 = &v26[-v17];
  (*(void (**)(unsigned char *, uint64_t, double))(v19 + 16))(&v26[-v17], a1, v16);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v9);
  uint64_t v20 = a6(v18, v14, v9, a4, a5);
  uint64_t v22 = v21;
  LOBYTE(v9) = v23 & 1;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v20, v21, v23 & 1, v24);
  outlined consume of Text.Storage(v20, v22, v9);
  return swift_bridgeObjectRelease();
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = formatSpecifier<A>(_:)();
  LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(a1, v6, v7, a2, a3);

  return swift_bridgeObjectRelease();
}

uint64_t formatSpecifier<A>(_:)()
{
  uint64_t v0 = 1684827173;
  if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype())
  {
    if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
    {
      return 25637;
    }
    else
    {
      uint64_t v0 = 1970039845;
      if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype())
      {
        if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
        {
          return 29989;
        }
        else if (swift_dynamicCastMetatype())
        {
          return 26149;
        }
        else
        {
          uint64_t v0 = 6712357;
          if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype()) {
            return 16421;
          }
        }
      }
    }
  }
  return v0;
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v11 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11 - 8);
  id v14 = (uint64_t *)((char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15._countAndFlagsBits = a2;
  v15._object = a3;
  String.append(_:)(v15);
  double v16 = *(void (**)(uint64_t, uint64_t))(a5 + 32);
  v14[3] = swift_getAssociatedTypeWitness();
  v14[4] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v14);
  v16(a4, a5);
  v14[5] = 0;
  type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  swift_storeEnumTagMultiPayload();
  unint64_t v17 = *(void *)(v6 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1, v17);
  }
  unint64_t v19 = *(void *)(v17 + 16);
  unint64_t v18 = *(void *)(v17 + 24);
  if (v19 >= v18 >> 1) {
    unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1, v17);
  }
  *(void *)(v17 + 16) = v19 + 1;
  uint64_t result = outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v14, v17+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v12 + 72) * v19, type metadata accessor for LocalizedStringKey.FormatArgument);
  *(void *)(v6 + 16) = v17;
  return result;
}

void LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:)()
{
}

uint64_t protocol witness for StringInterpolationProtocol.init(literalCapacity:interpolationCount:) in conformance LocalizedStringKey.StringInterpolation@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0xE000000000000000;
  a3[3] = 0;
  if (a2 + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    BOOL v5 = __OFADD__(result, 2 * a2);
    result += 2 * a2;
    if (!v5)
    {
      MEMORY[0x24C522950](result);
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0, MEMORY[0x263F8EE78]);
      a3[2] = result;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for StringInterpolationProtocol.appendLiteral(_:) in conformance LocalizedStringKey.StringInterpolation()
{
  lazy protocol witness table accessor for type String and conformance String();
  v0._countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

uint64_t static LocalizedStringKey.== infix(_:_:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  if (a1 != a5 || a2 != a6) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || ((a3 ^ a7)) {
    return 0;
  }

  return specialized static Array<A>.== infix(_:_:)(a4, a8);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocalizedStringKey(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  int v4 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    if (v2 == v4) {
      goto LABEL_7;
    }
    return 0;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || ((v2 ^ v4)) {
    return 0;
  }
LABEL_7:

  return specialized static Array<A>.== infix(_:_:)(v3, v5);
}

void *protocol witness for ExpressibleByStringInterpolation.init(stringInterpolation:) in conformance LocalizedStringKey@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result[1];
  uint64_t v3 = result[2];
  *(void *)a2 = *result;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = 1;
  *(void *)(a2 + 24) = v3;
  return result;
}

void *protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance LocalizedStringKey@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result[1];
  *(void *)a2 = *result;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = MEMORY[0x263F8EE78];
  return result;
}

BOOL LocalizedTextStorage.resolvesToEmpty(in:with:)(long long *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  int v5 = *(unsigned __int8 *)(v2 + 32);
  long long v7 = *a1;
  return LocalizedStringKey.resolvesToEmpty(in:options:table:bundle:)((uint64_t *)&v7, a2, *(void *)(v2 + 48), *(void *)(v2 + 56), *(void **)(v2 + 64), v3, v4, v5);
}

BOOL LocalizedTextStorage.isStyled(options:)()
{
  return LocalizedStringKey.isStyled.getter(v0[2], v0[3], 0, v0[5]);
}

uint64_t LocalizedTextStorage.localizationInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 56);
  int v5 = *(void **)(v1 + 64);
  char v6 = *(unsigned char *)(v1 + 32) | 0x40;
  *(void *)a1 = *(void *)(v1 + 16);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v6;
  id v7 = v5;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

void LocalizedTextStorage.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void **)(v0 + 64);
}

uint64_t Int._specifier.getter()
{
  return 1684827173;
}

uint64_t protocol witness for _FormatSpecifiable._specifier.getter in conformance Int()
{
  return 1684827173;
}

uint64_t Int8._arg.getter(char a1)
{
  return a1;
}

uint64_t Int8._specifier.getter()
{
  return 25637;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance Int8(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for _FormatSpecifiable._specifier.getter in conformance Int8()
{
  return 25637;
}

uint64_t Int16._arg.getter(__int16 a1)
{
  return a1;
}

uint64_t Int16._specifier.getter()
{
  return 25637;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance Int16(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t Int32._specifier.getter()
{
  return 25637;
}

uint64_t Int64._specifier.getter()
{
  return 1684827173;
}

uint64_t UInt._specifier.getter()
{
  return 1970039845;
}

uint64_t protocol witness for _FormatSpecifiable._specifier.getter in conformance UInt()
{
  return 1970039845;
}

uint64_t UInt8._arg.getter(uint64_t result)
{
  return result;
}

uint64_t UInt8._specifier.getter()
{
  return 29989;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance UInt8(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for _FormatSpecifiable._specifier.getter in conformance UInt8()
{
  return 29989;
}

uint64_t UInt16._arg.getter(uint64_t result)
{
  return (unsigned __int16)result;
}

uint64_t UInt16._specifier.getter()
{
  return 29989;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance UInt16(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t UInt32._specifier.getter()
{
  return 29989;
}

uint64_t UInt64._specifier.getter()
{
  return 29989;
}

uint64_t Float._specifier.getter()
{
  return 26149;
}

float protocol witness for _FormatSpecifiable._arg.getter in conformance Float@<S0>(_DWORD *a1@<X8>)
{
  float result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t protocol witness for _FormatSpecifiable._specifier.getter in conformance Float()
{
  return 26149;
}

uint64_t Double._specifier.getter()
{
  return 6712357;
}

uint64_t protocol witness for _FormatSpecifiable._specifier.getter in conformance Double()
{
  return 6712357;
}

uint64_t CGFloat._specifier.getter()
{
  return 6712357;
}

uint64_t associated type witness table accessor for StringInterpolationProtocol.StringLiteralType : _ExpressibleByBuiltinStringLiteral in LocalizedStringKey.StringInterpolation()
{
  return MEMORY[0x263F8D388];
}

unint64_t lazy protocol witness table accessor for type LocalizedStringKey and conformance LocalizedStringKey()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringKey and conformance LocalizedStringKey;
  if (!lazy protocol witness table cache variable for type LocalizedStringKey and conformance LocalizedStringKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringKey and conformance LocalizedStringKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringKey and conformance LocalizedStringKey;
  if (!lazy protocol witness table cache variable for type LocalizedStringKey and conformance LocalizedStringKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringKey and conformance LocalizedStringKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringKey and conformance LocalizedStringKey;
  if (!lazy protocol witness table cache variable for type LocalizedStringKey and conformance LocalizedStringKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringKey and conformance LocalizedStringKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalizedStringKey.StringInterpolation and conformance LocalizedStringKey.StringInterpolation()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringKey.StringInterpolation and conformance LocalizedStringKey.StringInterpolation;
  if (!lazy protocol witness table cache variable for type LocalizedStringKey.StringInterpolation and conformance LocalizedStringKey.StringInterpolation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringKey.StringInterpolation and conformance LocalizedStringKey.StringInterpolation);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in LocalizedStringKey()
{
  return MEMORY[0x263F8D398];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in LocalizedStringKey()
{
  return MEMORY[0x263F8D390];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Int()
{
  return MEMORY[0x263F8E620];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Int8()
{
  return MEMORY[0x263F8E5B0];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in UInt()
{
  return MEMORY[0x263F8E9C0];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in UInt8()
{
  return MEMORY[0x263F8E960];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Float()
{
  return MEMORY[0x263F8D648];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Double()
{
  return MEMORY[0x263F8D5B8];
}

uint64_t initializeWithCopy for LocalizedStringKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LocalizedStringKey(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LocalizedStringKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for LocalizedStringKey()
{
  return &type metadata for LocalizedStringKey;
}

unint64_t initializeBufferWithCopyOfBuffer for LocalizedStringKey.FormatArgument(unint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(*(void *)(type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0) - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v8 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v8 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v11 = *(void *)a2;
        uint64_t v12 = *(void *)(a2 + 8);
        char v13 = *(unsigned char *)(a2 + 16);
        outlined copy of Text.Storage(*(void *)a2, v12, v13);
        *(void *)a1 = v11;
        *(void *)(a1 + 8) = v12;
        *(unsigned char *)(a1 + 16) = v13;
        uint64_t v14 = *(void *)(a2 + 32);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = v14;
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v9 = type metadata accessor for AttributedString();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        break;
      case 3u:
        uint64_t v10 = type metadata accessor for LocalizedStringResource();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        break;
      default:
        long long v5 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v5;
        (**(void (***)(unint64_t, uint64_t))(v5 - 8))(a1, a2);
        char v6 = *(void **)(a2 + 40);
        *(void *)(a1 + 40) = v6;
        id v7 = v6;
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t assignWithCopy for LocalizedStringKey.FormatArgument(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s7SwiftUI4TextV14ResolvedStringVWOhTm_0(a1, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
    type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v7 = *(void *)a2;
        uint64_t v8 = *(void *)(a2 + 8);
        char v9 = *(unsigned char *)(a2 + 16);
        outlined copy of Text.Storage(*(void *)a2, v8, v9);
        *(void *)a1 = v7;
        *(void *)(a1 + 8) = v8;
        *(unsigned char *)(a1 + 16) = v9;
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v10 = type metadata accessor for AttributedString();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        break;
      case 3u:
        uint64_t v11 = type metadata accessor for LocalizedStringResource();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        break;
      default:
        uint64_t v4 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v4;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
        long long v5 = *(void **)(a2 + 40);
        *(void *)(a1 + 40) = v5;
        id v6 = v5;
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for LocalizedStringKey.FormatArgument(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  EnumCaseMultiPayloadouble d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v7 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 2)
  {
    uint64_t v6 = type metadata accessor for AttributedString();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for LocalizedStringKey.FormatArgument(void *a1, const void *a2)
{
  if (a1 != a2)
  {
    _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)a1, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
    uint64_t v4 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
    EnumCaseMultiPayloadouble d = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v7 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      uint64_t v6 = type metadata accessor for AttributedString();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalizedStringKey.FormatArgument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245C912A8);
}

uint64_t sub_245C912A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for LocalizedStringKey.FormatArgument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245C91328);
}

uint64_t sub_245C91328(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void *initializeWithCopy for LocalizedStringKey.StringInterpolation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LocalizedStringKey.StringInterpolation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for LocalizedStringKey.StringInterpolation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t dispatch thunk of _FormatSpecifiable._arg.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of _FormatSpecifiable._specifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

unint64_t initializeBufferWithCopyOfBuffer for LocalizedStringKey.FormatArgument.Storage(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v12 = *(void *)a2;
        uint64_t v13 = *(void *)(a2 + 8);
        char v14 = *(unsigned char *)(a2 + 16);
        outlined copy of Text.Storage(*(void *)a2, v13, v14);
        *(void *)a1 = v12;
        *(void *)(a1 + 8) = v13;
        *(unsigned char *)(a1 + 16) = v14;
        uint64_t v15 = *(void *)(a2 + 32);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = v15;
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v10 = type metadata accessor for AttributedString();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        break;
      case 3u:
        uint64_t v11 = type metadata accessor for LocalizedStringResource();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        break;
      default:
        long long v6 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v6;
        (**(void (***)(unint64_t, uint64_t))(v6 - 8))(a1, a2);
        uint64_t v7 = *(void **)(a2 + 40);
        *(void *)(a1 + 40) = v7;
        id v8 = v7;
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t assignWithCopy for LocalizedStringKey.FormatArgument.Storage(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s7SwiftUI4TextV14ResolvedStringVWOhTm_0(a1, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v7 = *(void *)a2;
        uint64_t v8 = *(void *)(a2 + 8);
        char v9 = *(unsigned char *)(a2 + 16);
        outlined copy of Text.Storage(*(void *)a2, v8, v9);
        *(void *)a1 = v7;
        *(void *)(a1 + 8) = v8;
        *(unsigned char *)(a1 + 16) = v9;
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v10 = type metadata accessor for AttributedString();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        break;
      case 3u:
        uint64_t v11 = type metadata accessor for LocalizedStringResource();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        break;
      default:
        uint64_t v4 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v4;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
        int v5 = *(void **)(a2 + 40);
        *(void *)(a1 + 40) = v5;
        id v6 = v5;
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for LocalizedStringKey.FormatArgument.Storage(void *a1, const void *a2, uint64_t a3)
{
  EnumCaseMultiPayloadouble d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v8 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 2)
  {
    uint64_t v7 = type metadata accessor for AttributedString();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for LocalizedStringKey.FormatArgument.Storage(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)a1, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
    EnumCaseMultiPayloadouble d = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v8 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      uint64_t v7 = type metadata accessor for AttributedString();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute);
  }
  return result;
}

uint64_t outlined destroy of Morphology?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for URL?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for (NSInlinePresentationIntent?, URL?, Range<AttributedString.Index>)()
{
  if (!lazy cache variable for type metadata for (NSInlinePresentationIntent?, URL?, Range<AttributedString.Index>))
  {
    type metadata accessor for URL?(255, &lazy cache variable for type metadata for NSInlinePresentationIntent?, type metadata accessor for NSInlinePresentationIntent);
    type metadata accessor for URL?(255, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8]);
    type metadata accessor for Range<AttributedString.Index>(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (NSInlinePresentationIntent?, URL?, Range<AttributedString.Index>));
    }
  }
}

void type metadata accessor for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute();
    unint64_t v7 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute();
    v10[0] = MEMORY[0x263F06548];
    v10[1] = MEMORY[0x263F06558];
    v10[2] = v6;
    v10[3] = v7;
    unint64_t v8 = a3(a1, v10);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute> and conformance AttributedString.Runs.AttributesSlice2<A, B>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AttributedString.Runs.AttributesSlice2<AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, AttributeScopes.FoundationAttributes.LinkAttribute>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for URL?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = *a4;
  uint64_t v14 = a4[1];
  uint64_t v16 = *a5;
  uint64_t v17 = specialized LocalizedStringKey.getTextArguments()();
  uint64_t v18 = v17;
  if (*(void *)(v17 + 16))
  {
    uint64_t v25 = (uint64_t)&v25;
    uint64_t v28 = v15;
    uint64_t v29 = v14;
    v27[0] = v16;
    MEMORY[0x270FA5388](v17);
    v23[8] = a8;
    v23[9] = a9;
    v23[10] = a3;
    v23[11] = v15;
    v23[12] = v14;
    v23[13] = v16;
    char v24 = a6 & 1;
    MEMORY[0x270FA5388](v19);
    v23[2] = a8;
    v23[3] = a9;
    v23[4] = a3;
    v23[5] = v16;
    specialized LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(a1, a2, &v28, (uint64_t)v27, v18, (void (*)(uint64_t, uint64_t, unint64_t, unint64_t))partial apply for closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:), v20, (void (*)(uint64_t, uint64_t, void, uint64_t, unint64_t, unint64_t, void *))partial apply for closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:), (uint64_t)v23);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = a1;
    uint64_t v29 = a2;
    v27[0] = v15;
    v27[1] = v14;
    uint64_t v26 = v16;
    unint64_t v22 = lazy protocol witness table accessor for type String and conformance String();
    return ResolvedTextContainer.append<A>(_:in:with:)((uint64_t)&v28, v27, &v26, a8, MEMORY[0x263F8D310], a9, v22);
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18LocalizedStringKeyV14FormatArgumentVG_s7CVarArg_ps5NeverOTg503_s7d4UI18fgh114V15resolvesToEmpty2in7options5table6bundleSbAA17EnvironmentValuesV_AA4TextV14ResolveOptionsVSSSgSo8NSBundleCSgtFs7kl6_pAC14iJ6VXEfU_AF0uV0VTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v16;
    uint64_t v8 = *(void *)(type metadata accessor for LocalizedStringKey.FormatArgument(0) - 8);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    do
    {
      v14[0] = a2;
      v14[1] = a3;
      LocalizedStringKey.FormatArgument.resolve(in:idiom:)((uint64_t)v15, v14);
      uint64_t v16 = v4;
      unint64_t v12 = *(void *)(v4 + 16);
      unint64_t v11 = *(void *)(v4 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        uint64_t v4 = v16;
      }
      *(void *)(v4 + 16) = v12 + 1;
      outlined init with take of ScrollStateRequest(v15, v4 + 40 * v12 + 32);
      v9 += v10;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t lazy protocol witness table accessor for type NSObject and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAPresentationModifier(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL partial apply for closure #1 in LocalizedStringKey.resolve<A>(into:in:options:table:bundle:)@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in LocalizedStringKey.resolve<A>(into:in:options:table:bundle:)(a1, *(void *)(v2 + 32), *(void *)(v2 + 40), *(unsigned char **)(v2 + 56), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for implicit closure #1 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)()
{
  return implicit closure #1 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_245C92164()
{
  uint64_t v1 = type metadata accessor for Locale();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)()
{
  type metadata accessor for Locale();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);

  return closure #2 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(v1, v2);
}

uint64_t sub_245C922A8()
{
  uint64_t v1 = *(void *)(type metadata accessor for EnvironmentValues.CapitalizationContext() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
  }
  else
  {
    uint64_t v3 = type metadata accessor for FormatStyleCapitalizationContext();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v0 + v2, v3);
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for EnvironmentValues.CapitalizationContext() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #1 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(v2);
}

uint64_t sub_245C92414@<X0>(uint64_t *a1@<X8>)
{
  AttributeScopes.foundation.getter();
  uint64_t result = type metadata accessor for AttributeScopes.FoundationAttributes();
  *a1 = result;
  return result;
}

void sub_245C92444()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18LocalizedStringKeyV14FormatArgumentVG_s7CVarArg_ps5NeverOTg503_s7d4UI18fgh61V25getArgumentsForInflection3for2in5idiom4with9includingSays7kl150_pG9arguments_Sb19isUniqueSizeVarianttSo012NSAttributedD0C_AA17EnvironmentValuesVAA17AnyInterfaceIdiomVSgAA4TextV14ResolveOptionsVAV5StyleVtFsAJ_pAC14iJ19VXEfU_sAJ_pA0_XEfU_AF17EnvironmentValuesVAF17AnyInterfaceIdiomVSgSbTf1cn_nTf4ngdn_n(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v5 = v18;
    uint64_t v9 = *(void *)(type metadata accessor for LocalizedStringKey.FormatArgument(0) - 8);
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    do
    {
      v16[0] = a2;
      v16[1] = a3;
      *a4 = (*a4 | LocalizedStringKey.FormatArgument.resolve(in:idiom:)((uint64_t)v17, v16)) & 1;
      uint64_t v18 = v5;
      unint64_t v13 = *(void *)(v5 + 16);
      unint64_t v12 = *(void *)(v5 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v5 = v18;
      }
      *(void *)(v5 + 16) = v13 + 1;
      outlined init with take of ScrollStateRequest(v17, v5 + 40 * v13 + 32);
      v10 += v11;
      --v4;
    }
    while (v4);
  }
  return v5;
}

uint64_t partial apply for closure #2 in closure #1 in LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:)()
{
  return closure #2 in closure #1 in LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:)();
}

uint64_t partial apply for closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = *(void *)(v2 + 56);
  uint64_t v6 = *(unsigned __int8 *)(v2 + 64);
  v12[0] = a1;
  v12[1] = a2;
  long long v11 = *(_OWORD *)(v2 + 40);
  uint64_t v10 = v5;
  unint64_t v7 = *(uint64_t (**)(void *, long long *, uint64_t *, uint64_t, void, unint64_t, uint64_t, uint64_t))(v4 + 40);
  unint64_t v8 = lazy protocol witness table accessor for type String and conformance String();
  return v7(v12, &v11, &v10, v6, MEMORY[0x263F8D310], v8, v3, v4);
}

uint64_t partial apply for closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7)
{
  uint64_t v10 = v7[2];
  uint64_t v11 = v7[3];
  uint64_t v12 = v7[4];
  uint64_t v13 = v7[5];
  long long v16 = *a7;
  uint64_t v15 = v13;
  return Text.resolve<A>(into:in:with:)(v12, (uint64_t *)&v16, &v15, a1, a2, a3 & 1, a4, v10, v11);
}

uint64_t specialized LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v12 = specialized LocalizedStringKey.getTextArguments()();
  if (*(void *)(v12 + 16))
  {
    id v13 = objc_msgSend(a1, sel_string);
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    uint64_t v24 = a3;
    uint64_t v25 = a4;
    uint64_t v23 = a5;
    MEMORY[0x270FA5388](v17);
    v21[8] = a1;
    v21[9] = a2;
    v21[10] = a3;
    v21[11] = a4;
    v21[12] = a5;
    char v22 = a6 & 1;
    MEMORY[0x270FA5388](v18);
    uint64_t v21[2] = a1;
    v21[3] = a2;
    v21[4] = a5;
    specialized LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(v14, v16, &v24, (uint64_t)&v23, v12, (void (*)(uint64_t, uint64_t, unint64_t, unint64_t))partial apply for specialized closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:), v19, (void (*)(uint64_t, uint64_t, void, uint64_t, unint64_t, unint64_t, void *))partial apply for specialized closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:), (uint64_t)v21);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = a3;
    uint64_t v25 = a4;
    return specialized Text.ResolvedString.append(_:in:with:isUniqueSizeVariant:)(a1, &v24);
  }
}

uint64_t specialized LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v14 = specialized LocalizedStringKey.getTextArguments()();
  uint64_t v15 = v14;
  if (*(void *)(v14 + 16))
  {
    uint64_t v35 = a4;
    uint64_t v36 = a5;
    uint64_t v34 = a6;
    MEMORY[0x270FA5388](v14);
    v32[6] = a3;
    v32[7] = a4;
    v32[8] = a5;
    v32[9] = a6;
    char v33 = a7 & 1;
    MEMORY[0x270FA5388](v16);
    v32[2] = a3;
    void v32[3] = a6;
    specialized LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(a1, a2, &v35, (uint64_t)&v34, v15, (void (*)(uint64_t, uint64_t, unint64_t, unint64_t))partial apply for specialized closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:), v17, (void (*)(uint64_t, uint64_t, void, uint64_t, unint64_t, unint64_t, void *))partial apply for specialized closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:), (uint64_t)v32);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (a5)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(a4, &v35);
    swift_release_n();
  }
  else
  {
    _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v19);
    uint64_t v20 = swift_retain_n();
    specialized find1<A>(_:key:filter:)(v20, v35);
  }
  swift_release_n();
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  swift_bridgeObjectRetain();
  uint64_t v21 = String.init<A>(_:)();
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v23 = String.caseConvertedIfNeeded(_:)(&v35, v21, v22);
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  if (!a5)
  {
    uint64_t v35 = a4;
    uint64_t v36 = 0;
    swift_retain();
    uint64_t v31 = specialized static ShouldRedactContentKey.value(in:)(&v35);
    swift_release();
    if ((v31 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  swift_retain_n();
  swift_retain_n();
  char v26 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(a4);
  swift_release_n();
  swift_release_n();
  if (v26)
  {
LABEL_8:
    uint64_t v27 = String.count.getter();
    uint64_t v23 = MEMORY[0x24C522AC0](3081666804, 0xA400000000000000, v27);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    uint64_t v25 = v29;
  }
LABEL_9:
  type metadata accessor for Text.ResolvedString(0);
  v30._countAndFlagsBits = v23;
  v30._object = v25;
  String.append(_:)(v30);
  return swift_bridgeObjectRelease();
}

void partial apply for specialized closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(int a1, int a2, int a3, int a4)
{
  specialized closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(a1, a2, a3, a4, *(id *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void *)(v4 + 40));
}

uint64_t partial apply for specialized closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, char a3, void *a4, int a5, int a6, uint64_t *a7)
{
  return specialized closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(a1, a2, a3 & 1, a4, a5, a6, *a7, a7[1], *(id *)(v7 + 16), *(void *)(v7 + 24), *(void *)(v7 + 32));
}

uint64_t partial apply for specialized closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(a1, a2, a3, a4, v4[2], v4[3], v4[4]);
}

uint64_t partial apply for specialized closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return specialized Text.resolve<A>(into:in:with:)(*(void *)(v7 + 16), *a7, a7[1], *(void *)(v7 + 24), a1, a2, a3 & 1, a4);
}

ValueMetadata *type metadata accessor for LocalizedStringKey.FormatArgument.Token()
{
  return &type metadata for LocalizedStringKey.FormatArgument.Token;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in LocalizedStringKey.FormatArgument.Token()
{
  return MEMORY[0x263F8D6D8];
}

unint64_t lazy protocol witness table accessor for type LocalizedStringKey.FormatArgument.Token and conformance LocalizedStringKey.FormatArgument.Token()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalizedStringKey.FormatArgument.Token and conformance LocalizedStringKey.FormatArgument.Token;
  if (!lazy protocol witness table cache variable for type LocalizedStringKey.FormatArgument.Token and conformance LocalizedStringKey.FormatArgument.Token)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedStringKey.FormatArgument.Token and conformance LocalizedStringKey.FormatArgument.Token);
  }
  return result;
}

id PlatformTextRepresentableContext.text.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

void PlatformTextRepresentableContext.text.setter(void *a1)
{
  *id v1 = a1;
}

uint64_t (*PlatformTextRepresentableContext.text.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t PlatformTextRepresentationOptions.rawValue.getter()
{
  return *(void *)v0;
}

SwiftUI::PlatformTextRepresentationOptions __swiftcall PlatformTextRepresentationOptions.init(rawValue:)(SwiftUI::PlatformTextRepresentationOptions rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static PlatformTextRepresentationOptions.includeStyledText.getter(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t _ViewInputs.requestedTextRepresentation.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 72);
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t key path getter for _ViewInputs.requestedTextRepresentation : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _ViewInputs.requestedTextRepresentation.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _ViewInputs.requestedTextRepresentation : _ViewInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _GraphInputs.requestedTextRepresentation.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 72);
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t _GraphInputs.requestedTextRepresentation.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_ViewInputs.requestedTextRepresentation.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 72);
    uint64_t v7 = *(void *)(v5 + 80);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *uint64_t v3 = v6;
  v3[1] = v7;
  return _ViewInputs.requestedTextRepresentation.modify;
}

void _ViewInputs.requestedTextRepresentation.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[4];
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();

  free(v1);
}

uint64_t key path getter for _GraphInputs.requestedTextRepresentation : _GraphInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _GraphInputs.requestedTextRepresentation.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void (*_GraphInputs.requestedTextRepresentation.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 72);
    uint64_t v7 = *(void *)(v5 + 80);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *uint64_t v3 = v6;
  v3[1] = v7;
  return _ViewInputs.requestedTextRepresentation.modify;
}

unint64_t lazy protocol witness table accessor for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions;
  if (!lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions;
  if (!lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions;
  if (!lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions;
  if (!lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformTextRepresentationOptions and conformance PlatformTextRepresentationOptions);
  }
  return result;
}

uint64_t dispatch thunk of static PlatformTextRepresentable.shouldMakeRepresentation(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static PlatformTextRepresentable.representationOptions(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static PlatformTextRepresentable.makeRepresentation(inputs:context:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

void **initializeBufferWithCopyOfBuffer for PlatformTextRepresentableContext(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void **assignWithCopy for PlatformTextRepresentableContext(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  *a1 = *a2;
  id v5 = v4;

  return a1;
}

void **assignWithTake for PlatformTextRepresentableContext(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for PlatformTextRepresentableContext()
{
  return &type metadata for PlatformTextRepresentableContext;
}

ValueMetadata *type metadata accessor for PlatformTextRepresentationOptions()
{
  return &type metadata for PlatformTextRepresentationOptions;
}

ValueMetadata *type metadata accessor for _GraphInputs.TextRepresentationKey()
{
  return &type metadata for _GraphInputs.TextRepresentationKey;
}

uint64_t static EnabledTextSelectability.allowsSelection.getter()
{
  return 1;
}

uint64_t static DisabledTextSelectability.allowsSelection.getter()
{
  return 0;
}

uint64_t static TextAllowsSelection.defaultValue.getter()
{
  return 0;
}

uint64_t _ViewInputs.textSelectionRepresentation.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 72);
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t key path getter for _ViewInputs.textSelectionRepresentation : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _ViewInputs.textSelectionRepresentation.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _ViewInputs.textSelectionRepresentation : _ViewInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _ViewInputs.textSelectionRepresentation.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

uint64_t _GraphInputs.textSelectionRepresentation.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 72);
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t _GraphInputs.textSelectionRepresentation.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_ViewInputs.textSelectionRepresentation.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 72);
    uint64_t v7 = *(void *)(v5 + 80);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *uint64_t v3 = v6;
  v3[1] = v7;
  return _ViewInputs.textSelectionRepresentation.modify;
}

void _ViewInputs.textSelectionRepresentation.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[4];
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();

  free(v1);
}

uint64_t key path getter for _GraphInputs.textSelectionRepresentation : _GraphInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _GraphInputs.textSelectionRepresentation.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void (*_GraphInputs.textSelectionRepresentation.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 72);
    uint64_t v7 = *(void *)(v5 + 80);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *uint64_t v3 = v6;
  v3[1] = v7;
  return _ViewInputs.textSelectionRepresentation.modify;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in TextSelectionForbidden()
{
  return &protocol witness table for TextSelectionForbidden;
}

uint64_t dispatch thunk of static TextSelectability.allowsSelection.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for EnabledTextSelectability()
{
  return &type metadata for EnabledTextSelectability;
}

ValueMetadata *type metadata accessor for DisabledTextSelectability()
{
  return &type metadata for DisabledTextSelectability;
}

ValueMetadata *type metadata accessor for TextAllowsSelection()
{
  return &type metadata for TextAllowsSelection;
}

uint64_t dispatch thunk of static PlatformTextSelectionRepresentation.makeSelectableText(resolvedText:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for _GraphInputs.TextSelectionRepresentationKey()
{
  return &type metadata for _GraphInputs.TextSelectionRepresentationKey;
}

uint64_t LocalizedStringResource.isStyled.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for LocalizedStringResource();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v22 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = type metadata accessor for AttributedString();
  uint64_t v23 = *(void *)(v11 - 8);
  uint64_t v24 = v11;
  MEMORY[0x270FA5388](v11);
  id v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v14 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  uint64_t v15 = static CoreGlue2.shared;
  v14(&v25);

  uint64_t v17 = v25;
  uint64_t v16 = v26;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v18(v10, v1, v5);
  if (v16)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v17, (uint64_t)v4);
  }
  else
  {
    uint64_t v19 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v19, (uint64_t)v4);
  }
  swift_release_n();
  swift_release_n();
  LocalizedStringResource.locale.setter();
  v18(v22, (uint64_t)v10, v5);
  AttributedString.init(localized:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  swift_release();
  swift_release();
  char v20 = AttributedString.isStyled.getter();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v13, v24);
  return v20 & 1;
}

uint64_t LocalizedStringResource.resolve(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  v20[1] = a2;
  uint64_t v4 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LocalizedStringResource();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v20 - v13;
  uint64_t v16 = *a1;
  uint64_t v15 = a1[1];
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16);
  v17((char *)v20 - v13, v2, v7, v12);
  if (v15)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, (uint64_t)v6);
  }
  else
  {
    uint64_t v18 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v18, (uint64_t)v6);
  }
  swift_release_n();
  swift_release_n();
  LocalizedStringResource.locale.setter();
  ((void (*)(char *, char *, uint64_t))v17)(v10, v14, v7);
  AttributedString.init(localized:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v14, v7);
}

uint64_t type metadata accessor for LocalizedStringResourceStorage()
{
  uint64_t result = type metadata singleton initialization cache for LocalizedStringResourceStorage;
  if (!type metadata singleton initialization cache for LocalizedStringResourceStorage) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void LocalizedStringResourceStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for AttributedString();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  uint64_t v14 = *a3;
  type metadata accessor for NSAttributedString();
  uint64_t v18 = v13;
  uint64_t v19 = v12;
  LocalizedStringResource.resolve(in:)(&v18, (uint64_t)v11);
  id v15 = NSAttributedString.init(swiftUIAttributedString:)((uint64_t)v11);
  uint64_t v18 = v13;
  uint64_t v19 = v12;
  uint64_t v17 = v14;
  ResolvedTextContainer.append(_:in:with:)((uint64_t)v15, &v18, &v17, a4, a5);
}

uint64_t LocalizedStringResourceStorage.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v2 = v0 + OBJC_IVAR____TtC7SwiftUIP33_1A1BB6A07088C23EE7C52846B7BEB81330LocalizedStringResourceStorage_resource;
    uint64_t v3 = result + OBJC_IVAR____TtC7SwiftUIP33_1A1BB6A07088C23EE7C52846B7BEB81330LocalizedStringResourceStorage_resource;
    swift_retain();
    LOBYTE(v2) = MEMORY[0x24C520970](v2, v3);
    swift_release();
    return v2 & 1;
  }
  return result;
}

uint64_t LocalizedStringResourceStorage.isStyled(options:)()
{
  return LocalizedStringResource.isStyled.getter() & 1;
}

uint64_t LocalizedStringResourceStorage.localizationInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = LocalizedStringResource.key.getter();
  uint64_t v8 = v7;
  uint64_t v9 = LocalizedStringResource.table.getter();
  uint64_t v11 = v10;
  LocalizedStringResource.bundle.getter();
  id v12 = LocalizedStringResource.BundleDescription.swiftUI_resolvedBundle.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v11;
  *(void *)(a1 + 32) = v12;
  *(unsigned char *)(a1 + 40) = 64;
  return result;
}

id LocalizedStringResource.BundleDescription.swiftUI_resolvedBundle.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v1, v6, v8);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
  if (v11 == *MEMORY[0x263F06D30])
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v13 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    return v13;
  }
  if (v11 != *MEMORY[0x263F06D20])
  {
    if (v11 != *MEMORY[0x263F06D18])
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      return 0;
    }
    id v13 = objc_msgSend(self, sel_mainBundle);
    return v13;
  }
  (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v10, v2);
  id v14 = objc_allocWithZone(MEMORY[0x263F086E0]);
  URL._bridgeToObjectiveC()(v15);
  uint64_t v17 = v16;
  id v18 = objc_msgSend(v14, sel_initWithURL_, v16);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v18;
}

uint64_t LocalizedStringResourceStorage.__ivar_destroyer()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUIP33_1A1BB6A07088C23EE7C52846B7BEB81330LocalizedStringResourceStorage_resource;
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

uint64_t LocalizedStringResourceStorage.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUIP33_1A1BB6A07088C23EE7C52846B7BEB81330LocalizedStringResourceStorage_resource;
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t outlined init with take of LocalizedStringKey.FormatArgument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ObjC metadata update function for LocalizedStringResourceStorage()
{
  return type metadata accessor for LocalizedStringResourceStorage();
}

uint64_t type metadata completion function for LocalizedStringResourceStorage()
{
  uint64_t result = type metadata accessor for LocalizedStringResource();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t static IsExpandedTraitKey.defaultValue.getter()
{
  return 0;
}

void protocol witness for static _ViewTraitKey.defaultValue.getter in conformance IsExpandedTraitKey(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
}

uint64_t ViewTraitCollection.isExpanded.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, 0, 0, v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t key path getter for ViewTraitCollection.isExpanded : ViewTraitCollection@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, 0, 0, v3);
  uint64_t v6 = v5;
  char v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = v8;
  return result;
}

uint64_t (*ViewTraitCollection.isExpanded.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, 0, 0, v3);
  uint64_t v6 = v5;
  char v8 = v7;
  swift_bridgeObjectRelease();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v8;
  return ViewTraitCollection.isExpanded.modify;
}

uint64_t ViewTraitCollection.isExpanded.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  if ((a2 & 1) == 0) {
    return specialized ViewTraitCollection.subscript.setter(*(void *)a1, v3, v4);
  }
  outlined copy of Binding<Bool>?(*(void *)a1, v3);
  specialized ViewTraitCollection.subscript.setter(v2, v3, v4);

  return outlined consume of Binding<Bool>?(v2, v3);
}

uint64_t SectionConfiguration.isExpanded.getter()
{
  if (*(void *)(v0 + 64))
  {
    uint64_t v1 = *(void *)(v0 + 72);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v1 = MEMORY[0x263F8EE78];
  }
  uint64_t v2 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, 0, 0, v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_245C94CB4(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  outlined copy of Binding<Bool>?(*(void *)a1, v2);
  return specialized ViewTraitCollection.subscript.setter(v1, v2, v3);
}

uint64_t NSMutableAttributedString.resolveAttributes(in:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ResolvableStringResolutionContext();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3 - 8);
  if (one-time initialization token for resolvableTextSegment != -1) {
    swift_once();
  }
  uint64_t v6 = static NSAttributedStringKey.resolvableTextSegment;
  id v7 = objc_msgSend(v1, sel_length);
  _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_0(a1, (uint64_t)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v1;
  outlined init with take of ResolvableStringResolutionContext((uint64_t)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = partial apply for closure #1 in static ResolvableTextSegmentAttribute.update(_:in:);
  *(void *)(v10 + 24) = v9;
  aBlock[4] = _sypSgSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgnyy_AacGIegnyy_TRTA_0;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_8;
  int v11 = _Block_copy(aBlock);
  id v12 = v1;
  swift_retain();
  swift_release();
  objc_msgSend(v12, sel_enumerateAttribute_inRange_options_usingBlock_, v6, 0, v7, 2, v11);
  _Block_release(v11);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v6) {
    __break(1u);
  }
  return result;
}

uint64_t *NSAttributedStringKey._textScale.unsafeMutableAddressor()
{
  if (one-time initialization token for _textScale != -1) {
    swift_once();
  }
  return &static NSAttributedStringKey._textScale;
}

uint64_t one-time initialization function for resolvableAttributeConfiguration()
{
  uint64_t result = MEMORY[0x24C522820](0xD000000000000028, 0x800000024621ECF0);
  static NSAttributedStringKey.resolvableAttributeConfiguration = result;
  return result;
}

id static NSAttributedStringKey.resolvableAttributeConfiguration.getter()
{
  return static NSAttributedStringKey.resolvableAttributeConfiguration.getter(&one-time initialization token for resolvableAttributeConfiguration, (void **)&static NSAttributedStringKey.resolvableAttributeConfiguration);
}

id static NSAttributedStringKey._textScale.getter()
{
  return static NSAttributedStringKey.resolvableAttributeConfiguration.getter(&one-time initialization token for _textScale, (void **)&static NSAttributedStringKey._textScale);
}

id one-time initialization function for _textScaleRatio()
{
  static NSAttributedStringKey._textScaleRatio = *MEMORY[0x263F03CD0];
  return (id)static NSAttributedStringKey._textScaleRatio;
}

id static NSAttributedStringKey._textScaleRatio.getter()
{
  return static NSAttributedStringKey.resolvableAttributeConfiguration.getter(&one-time initialization token for _textScaleRatio, (void **)&static NSAttributedStringKey._textScaleRatio);
}

uint64_t one-time initialization function for _textScaleStaticWeightMatching()
{
  uint64_t result = MEMORY[0x24C522820](0xD00000000000001FLL, 0x800000024621ECD0);
  static NSAttributedStringKey._textScaleStaticWeightMatching = result;
  return result;
}

id static NSAttributedStringKey._textScaleStaticWeightMatching.getter()
{
  return static NSAttributedStringKey.resolvableAttributeConfiguration.getter(&one-time initialization token for _textScaleStaticWeightMatching, (void **)&static NSAttributedStringKey._textScaleStaticWeightMatching);
}

id static NSAttributedStringKey.resolvableAttributeConfiguration.getter(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;

  return v3;
}

void NSAttributedString.firstAttribute<A>(_:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  id v4 = (id)static ResolvableStringAttributeRepresentation.attribute.getter();
  NSAttributedString.firstAttribute<A>(_:name:)((uint64_t)v4, a1, a2);
}

uint64_t NSMutableAttributedString.addResolvableAttributes(with:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unint64_t v8 = (char *)&v12 - v7;
  _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_0(a1, (uint64_t)&v12 - v7, type metadata accessor for ResolvableAttributeConfiguration);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      uint64_t v10 = type metadata accessor for Date();
      goto LABEL_4;
    case 2:
      uint64_t v10 = type metadata accessor for DateInterval();
LABEL_4:
      (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v8, v10);
      goto LABEL_5;
    case 4:
      return result;
    default:
LABEL_5:
      if (one-time initialization token for resolvableAttributeConfiguration != -1) {
        swift_once();
      }
      uint64_t v11 = static NSAttributedStringKey.resolvableAttributeConfiguration;
      _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_0(a1, (uint64_t)v5, type metadata accessor for ResolvableAttributeConfiguration);
      objc_msgSend(v1, sel_addAttribute_value_range_, v11, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), 0, objc_msgSend(v1, sel_length));
      return swift_unknownObjectRelease();
  }
}

uint64_t EnvironmentValues.resolveNSAttributes(includeDefaultAttributes:options:)(int a1, uint64_t *a2)
{
  uint64_t v5 = type metadata accessor for Text.Style(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a2;
  uint64_t v10 = *v2;
  uint64_t v9 = v2[1];
  LOWORD(v18) = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  *((void *)&v18 + 1) = MEMORY[0x263F8EE78];
  *(void *)&v19[0] = MEMORY[0x263F8EE78];
  *(_OWORD *)((char *)v19 + 8) = 0u;
  *(_OWORD *)((char *)&v19[1] + 8) = 0u;
  *((void *)&v19[2] + 1) = 0;
  long long v20 = xmmword_24619B530;
  uint64_t v22 = 0;
  long long v21 = MEMORY[0x263F8EE78];
  Text.Style.init()((uint64_t)v7);
  v15[0] = v10;
  v15[1] = v9;
  uint64_t v14 = v8;
  uint64_t v11 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)(0, 0, v15, a1, &v14, (uint64_t)&v16);
  outlined destroy of Text.Style((uint64_t)v7, type metadata accessor for Text.Style);
  v23[6] = v20;
  v23[7] = v21;
  uint64_t v24 = v22;
  v23[2] = v18;
  v23[3] = v19[0];
  v23[4] = v19[1];
  v23[5] = v19[2];
  v23[0] = v16;
  v23[1] = v17;
  outlined release of Text.ResolvedProperties(v23);
  return v11;
}

id NSAttributedString.scaled(by:)(double a1)
{
  if (a1 == 1.0)
  {
    return v1;
  }
  else
  {
    id v3 = objc_msgSend(v1, sel__ui_attributedSubstringFromRange_scaledByScaleFactor_, 0, objc_msgSend(v1, sel_length), a1);
    return v3;
  }
}

double NSAttributedString.EncodedFontMetrics.capHeight.getter()
{
  return *(double *)v0;
}

void NSAttributedString.EncodedFontMetrics.capHeight.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*NSAttributedString.EncodedFontMetrics.capHeight.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double NSAttributedString.EncodedFontMetrics.ascender.getter()
{
  return *(double *)(v0 + 8);
}

void NSAttributedString.EncodedFontMetrics.ascender.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*NSAttributedString.EncodedFontMetrics.ascender.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double NSAttributedString.EncodedFontMetrics.descender.getter()
{
  return *(double *)(v0 + 16);
}

void NSAttributedString.EncodedFontMetrics.descender.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*NSAttributedString.EncodedFontMetrics.descender.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double NSAttributedString.EncodedFontMetrics.leading.getter()
{
  return *(double *)(v0 + 24);
}

void NSAttributedString.EncodedFontMetrics.leading.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*NSAttributedString.EncodedFontMetrics.leading.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double NSAttributedString.EncodedFontMetrics.outsets.getter()
{
  return *(double *)(v0 + 32);
}

void NSAttributedString.EncodedFontMetrics.outsets.setter(double a1, double a2, double a3, double a4)
{
  v4[4] = a1;
  v4[5] = a2;
  v4[6] = a3;
  v4[7] = a4;
}

uint64_t (*NSAttributedString.EncodedFontMetrics.outsets.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL closure #1 in Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Text.Style(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v12 = *(void *)(a2 + *(int *)(v11 + 96));
  uint64_t v13 = (*(uint64_t (**)(double))(**(void **)a1 + 112))(v8);
  LOBYTE(v12) = specialized Set.contains(_:)(v13, v12);
  _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_0(a2, (uint64_t)v10, type metadata accessor for Text.Style);
  if ((v12 & 1) == 0)
  {
    type metadata accessor for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WeightModifier>, (void (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier);
    uint64_t v15 = swift_dynamicCastClass();
    if (v15)
    {
      double v16 = *(double *)(v15 + 16);
      _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_0((uint64_t)v10, (uint64_t)v6, type metadata accessor for Text.Style);
      if (v16 >= 0.3)
      {
        BOOL v14 = !specialized Set.contains(_:)((uint64_t)&type metadata for Font.BoldModifier, *(void *)&v6[*(int *)(v4 + 96)]);
LABEL_8:
        outlined destroy of Text.Style((uint64_t)v10, type metadata accessor for Text.Style);
        goto LABEL_9;
      }
    }
    else
    {
      _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_0((uint64_t)v10, (uint64_t)v6, type metadata accessor for Text.Style);
    }
    BOOL v14 = 1;
    goto LABEL_8;
  }
  BOOL v14 = 0;
  uint64_t v6 = v10;
LABEL_9:
  outlined destroy of Text.Style((uint64_t)v6, type metadata accessor for Text.Style);
  return v14;
}

uint64_t specialized EnvironmentValues.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  if (!a2)
  {
    uint64_t v11 = swift_retain_n();
    uint64_t v6 = specialized closure #1 in PropertyList.subscript.getter(v11, (uint64_t)v15);
    uint64_t v8 = v12;
    swift_release_n();
    if (!v6)
    {
      uint64_t v13 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v13, a3);
      return swift_release_n();
    }
    goto LABEL_7;
  }
  swift_retain_n();
  swift_retain_n();
  uint64_t v6 = specialized PropertyList.Tracker.value<A>(_:for:)(a1);
  uint64_t v8 = v7;
  swift_release_n();
  swift_release_n();
  if (v6)
  {
LABEL_7:
    v14[0] = a1;
    v14[1] = a2;
    return (*(uint64_t (**)(ValueMetadata *, void *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v8 + 8))(&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, v14, &type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, &protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, v6, v8);
  }
  swift_retain();
  uint64_t v9 = swift_retain();
  specialized PropertyList.Tracker.value<A>(_:for:)(v9, a3);
  swift_release();

  return swift_release();
}

uint64_t sub_245C959F0()
{
  uint64_t v1 = *(void *)(type metadata accessor for ResolvableStringResolutionContext() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);

  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245C95B3C()
{
  return swift_deallocObject();
}

uint64_t sub_245C95B4C()
{
  return swift_deallocObject();
}

uint64_t sub_245C95B5C()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)(uint64_t a1)
{
  return closure #1 in Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)(a1, *(void *)(v1 + 16));
}

uint64_t outlined copy of Text.Encapsulation?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result = a9;
  if (a9 != 1) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of Text.Encapsulation?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result = a9;
  if (a9 != 1) {
    return swift_release();
  }
  return result;
}

ValueMetadata *type metadata accessor for NSAttributedString.EncodedFontMetrics()
{
  return &type metadata for NSAttributedString.EncodedFontMetrics;
}

uint64_t EnvironmentValues.textJustification.getter@<X0>(__int16 *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TextJustification.Storage(__int16 *a1, _WORD *a2)
{
  __int16 v2 = *a1;
  int v3 = *a1;
  uint64_t result = *a2 == 2 && v3 == 2;
  if (v3 != 2 && *a2 != 2) {
    return (((v2 & 1) == 0) ^ (unsigned __int16)*a2) & (((v2 & 0x100) == 0) ^ ((unsigned __int16)(*a2 & 0x100) >> 8));
  }
  return result;
}

void static TextJustification.none.getter(_WORD *a1@<X8>)
{
  *a1 = 2;
}

void static TextJustification.full.getter(_WORD *a1@<X8>)
{
  *a1 = 0;
}

void static TextJustification.stretched.getter(_WORD *a1@<X8>)
{
  *a1 = 257;
}

uint64_t static TextJustification.stretched(_:)@<X0>(uint64_t result@<X0>, __int16 *a2@<X8>)
{
  if (result) {
    __int16 v2 = 257;
  }
  else {
    __int16 v2 = 1;
  }
  *a2 = v2;
  return result;
}

uint64_t static TextJustification.full(allLines:flexible:)@<X0>(uint64_t result@<X0>, char a2@<W1>, _WORD *a3@<X8>)
{
  if (a2) {
    __int16 v3 = 256;
  }
  else {
    __int16 v3 = 0;
  }
  *a3 = v3 & 0xFFFE | result & 1;
  return result;
}

uint64_t static TextJustification.== infix(_:_:)(__int16 *a1, __int16 *a2)
{
  __int16 v2 = *a1;
  __int16 v3 = *a2;
  int v4 = *a2;
  if (*a1 == 2)
  {
    if (v4 == 2) {
      return 1;
    }
  }
  else if (v4 != 2 {
         && ((v2 & 1) == 0) != (v3 & 1)
  }
         && ((((v2 & 0x100) == 0) ^ ((unsigned __int16)(v3 & 0x100) >> 8)) & 1) != 0)
  {
    return 1;
  }
  return 0;
}

uint64_t View.justification(_:)(__int16 *a1, uint64_t a2, uint64_t a3)
{
  __int16 v5 = *a1;
  KeyPath = (uint64_t *)swift_getKeyPath();
  __int16 v8 = v5;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

uint64_t sub_245C95DDC(__int16 *a1)
{
  __int16 v2 = *a1;
  return EnvironmentValues.textJustification.setter(&v2);
}

uint64_t getEnumTagSinglePayload for TextJustification(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 65282 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65282 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65282;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  if (v6 >= 2) {
    int v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v7 = -2;
  }
  if (v7 < 0) {
    int v7 = -1;
  }
  return (v7 + 1);
}

uint64_t storeEnumTagSinglePayload for TextJustification(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65282 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 254;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245C95F90);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_245C95FB8()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TextJustification>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextJustification>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextJustification>);
    }
  }
}

uint64_t getEnumTagSinglePayload for TextJustification.Storage(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    unsigned int v2 = a2 + 65282;
    if (a2 + 65282 <= 0xFFFEFFFF) {
      unsigned int v3 = 2;
    }
    else {
      unsigned int v3 = 4;
    }
    if (v2 < 0xFF0000) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x10000) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = *((unsigned __int8 *)a1 + 2);
        if (!*((unsigned char *)a1 + 2)) {
          break;
        }
        return (*a1 | (v5 << 16)) - 65282;
      case 2:
        int v5 = a1[1];
        if (a1[1]) {
          return (*a1 | (v5 << 16)) - 65282;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245C9613CLL);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 16)) - 65282;
      default:
        break;
    }
  }
  unsigned int v7 = *(unsigned __int8 *)a1;
  BOOL v8 = v7 >= 2;
  unsigned int v9 = (v7 + 2147483646) & 0x7FFFFFFF;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TextJustification.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 65282;
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v4 = 2;
  }
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 254;
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = v7;
        break;
      case 2:
        *(_WORD *)(result + 2) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x245C96224);
      case 4:
        *(_DWORD *)(result + 2) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *(unsigned char *)uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextJustificationKey()
{
  return &type metadata for TextJustificationKey;
}

uint64_t storeEnumTagSinglePayload for TextJustification.Full(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245C96328);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t HStack._tree.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for _VariadicView.Tree();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t HStack._tree.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for _VariadicView.Tree();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*HStack._tree.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _HStackLayout.alignment.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_HStackLayout.alignment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_HStackLayout.spacing.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _HStackLayout.majorAxis.getter()
{
  return 0;
}

uint64_t static _HStackLayout.implicitRoot.getter()
{
  if (one-time initialization token for center != -1) {
    swift_once();
  }
  return static VerticalAlignment.center;
}

uint64_t protocol witness for static _VariadicView_ImplicitRoot.implicitRoot.getter in conformance _HStackLayout@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for center != -1) {
    uint64_t result = swift_once();
  }
  *(void *)a1 = static VerticalAlignment.center;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

uint64_t HStackLayout.alignment.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*HStackLayout.alignment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t HStackLayout.spacing.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t HStackLayout.spacing.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 8) = result;
  *(unsigned char *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*HStackLayout.spacing.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t instantiation function for generic protocol witness table for <> HStack<A>(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type HStack<EmptyView> and conformance <> HStack<A>(&lazy protocol witness table cache variable for type HStack<EmptyView> and conformance <> HStack<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type HStack<EmptyView> and conformance <> HStack<A>(&lazy protocol witness table cache variable for type HStack<EmptyView> and conformance <> HStack<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for HStack<EmptyView>()
{
  if (!lazy cache variable for type metadata for HStack<EmptyView>)
  {
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<EmptyView>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type HStack<EmptyView> and conformance <> HStack<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for HStack<EmptyView>();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for HStackLayout()
{
  return &type metadata for HStackLayout;
}

double UnitRect.x.getter()
{
  return *(double *)v0;
}

void UnitRect.x.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*UnitRect.x.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double UnitRect.y.getter()
{
  return *(double *)(v0 + 8);
}

void UnitRect.y.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*UnitRect.y.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double UnitRect.width.getter()
{
  return *(double *)(v0 + 16);
}

void UnitRect.width.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*UnitRect.width.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double UnitRect.height.getter()
{
  return *(double *)(v0 + 24);
}

void UnitRect.height.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*UnitRect.height.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void UnitRect.init(x:y:width:height:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

void UnitRect.init(point:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
}

__C::CGRect __swiftcall UnitRect.in(_:)(CGSize a1)
{
  double v2 = v1[2] * a1.width;
  double v3 = v1[3] * a1.height;
  double v4 = *v1 * a1.width;
  double v5 = v1[1] * a1.height;
  result.size.height = v3;
  result.size.width = v2;
  result.origin.double y = v5;
  result.origin.double x = v4;
  return result;
}

__C::CGRect __swiftcall UnitRect.in(_:)(__C::CGRect a1)
{
  double v2 = *v1 * a1.size.width + a1.origin.x;
  double v3 = v1[1] * a1.size.height + a1.origin.y;
  double v4 = v1[2] * a1.size.width;
  double v5 = v1[3] * a1.size.height;
  result.size.height = v5;
  result.size.width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

double static UnitRect.one.getter@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for one != -1) {
    swift_once();
  }
  double result = *(double *)&static UnitRect.one;
  long long v3 = xmmword_26B0E8880;
  *a1 = static UnitRect.one;
  a1[1] = v3;
  return result;
}

void UnitRect.hash(into:)()
{
  Swift::UInt64 v1 = v0[1];
  Swift::UInt64 v2 = v0[2];
  Swift::UInt64 v3 = v0[3];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *v0;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v1;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v2;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v3;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
}

Swift::Int UnitRect.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UnitRect()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnitRect()
{
  return Hasher._finalize()();
}

double UnitRect.animatableData.getter()
{
  return *v0 * 128.0;
}

double UnitRect.animatableData.setter(double a1, double a2, double a3, double a4)
{
  *Swift::UInt64 v4 = a1 * 0.0078125;
  v4[1] = a2 * 0.0078125;
  double result = a4 * 0.0078125;
  v4[2] = a3 * 0.0078125;
  v4[3] = a4 * 0.0078125;
  return result;
}

__n128 (*UnitRect.animatableData.modify(float64x2_t **a1))(uint64_t *a1)
{
  Swift::UInt64 v3 = (float64x2_t *)malloc(0x28uLL);
  float64x2_t v4 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  float64x2_t v5 = vmulq_f64(*v1, v4);
  float64x2_t v6 = vmulq_f64(v1[1], v4);
  *a1 = v3;
  *(void *)&v3[2].f64[0] = v1;
  *Swift::UInt64 v3 = v5;
  v3[1] = v6;
  return UnitRect.animatableData.modify;
}

__n128 UnitRect.animatableData.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  Swift::UInt64 v2 = *(float64x2_t **)(v1 + 32);
  float64x2_t v3 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  float64x2_t v4 = vmulq_f64(*(float64x2_t *)v1, v3);
  float64x2_t v5 = vmulq_f64(*(float64x2_t *)(v1 + 16), v3);
  *Swift::UInt64 v2 = v4;
  v2[1] = v5;
  free((void *)v1);
  return result;
}

float64x2_t protocol witness for Animatable.animatableData.getter in conformance UnitRect@<Q0>(float64x2_t *a1@<X8>)
{
  float64x2_t v2 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  float64x2_t v3 = vmulq_f64(*v1, v2);
  float64x2_t result = vmulq_f64(v1[1], v2);
  *a1 = v3;
  a1[1] = result;
  return result;
}

float64x2_t protocol witness for Animatable.animatableData.setter in conformance UnitRect(float64x2_t *a1)
{
  float64x2_t v2 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  float64x2_t v3 = vmulq_f64(*a1, v2);
  float64x2_t result = vmulq_f64(a1[1], v2);
  *uint64_t v1 = v3;
  v1[1] = result;
  return result;
}

void (*protocol witness for Animatable.animatableData.modify in conformance UnitRect(float64x2_t ***a1))(void *a1)
{
  float64x2_t v2 = (float64x2_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (float64x2_t *)UnitRect.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

float64x2_t sub_245C96CF4@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v2 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  float64x2_t v3 = vmulq_f64(*a1, v2);
  float64x2_t result = vmulq_f64(a1[1], v2);
  *a2 = v3;
  a2[1] = result;
  return result;
}

float64x2_t sub_245C96D10(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  float64x2_t v3 = vmulq_f64(*a1, v2);
  float64x2_t result = vmulq_f64(a1[1], v2);
  *a2 = v3;
  a2[1] = result;
  return result;
}

ValueMetadata *type metadata accessor for UnitRect()
{
  return &type metadata for UnitRect;
}

uint64_t key path getter for _ViewInputs.transform : _ViewInputs@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 60);
  return result;
}

uint64_t CoordinateSpaceGesture.coordinateSpace.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of CoordinateSpace(v1, a1);
}

uint64_t CoordinateSpaceGesture.coordinateSpace.setter(uint64_t a1)
{
  return outlined assign with take of CoordinateSpace(a1, v1);
}

uint64_t outlined assign with take of CoordinateSpace(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t (*CoordinateSpaceGesture.coordinateSpace.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CoordinateSpaceGesture.init(coordinateSpace:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of CoordinateSpace(a1, a2);
}

uint64_t static CoordinateSpaceGesture._makeGesture(modifier:inputs:body:)(unsigned int *a1, long long *a2, void (*a3)(_OWORD *))
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  unsigned int v34 = *a1;
  *(_OWORD *)uint64_t v59 = a2[6];
  *(_OWORD *)&v59[12] = *(long long *)((char *)a2 + 108);
  long long v3 = a2[1];
  long long v53 = *a2;
  long long v54 = v3;
  long long v4 = a2[3];
  long long v55 = a2[2];
  long long v56 = v4;
  long long v5 = a2[5];
  long long v57 = a2[4];
  long long v58 = v5;
  unsigned int v26 = *(_DWORD *)&v59[12];
  uint64_t v6 = v53;
  int v7 = DWORD2(v53);
  uint64_t v8 = v54;
  unsigned int v9 = DWORD2(v54);
  unsigned int v10 = HIDWORD(v54);
  unsigned int v32 = DWORD2(v54);
  int v33 = DWORD2(v53);
  unsigned int v11 = v55;
  unsigned int v12 = DWORD1(v55);
  unsigned int v30 = v55;
  unsigned int v31 = HIDWORD(v54);
  uint64_t v24 = *((void *)&v55 + 1);
  uint64_t v22 = v56;
  unsigned int v13 = DWORD2(v56);
  unsigned int v28 = DWORD2(v56);
  unsigned int v29 = DWORD1(v55);
  unsigned int v14 = v57;
  unsigned int v27 = v57;
  unsigned int v23 = HIDWORD(v56);
  uint64_t v15 = *((void *)&v57 + 1);
  unsigned int v37 = DWORD1(v57);
  int v38 = v5;
  uint64_t v36 = *((void *)&v5 + 1);
  outlined retain of _GestureInputs((uint64_t)&v53);
  AGGraphClearUpdate();
  id v25 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  *(void *)&long long v44 = v6;
  DWORD2(v44) = v7;
  *(void *)&long long v45 = v8;
  *((void *)&v45 + 1) = __PAIR64__(v10, v9);
  *(void *)&long long v46 = __PAIR64__(v12, v11);
  *((void *)&v46 + 1) = v24;
  *(void *)&long long v47 = v22;
  *((void *)&v47 + 1) = __PAIR64__(v23, v13);
  *(void *)&long long v48 = __PAIR64__(v37, v14);
  *((void *)&v48 + 1) = v15;
  LODWORD(v49) = v38;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v16 = CachedEnvironment.animatedPosition(for:)((uint64_t *)&v44);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v52 = 0;
  memset(v51, 0, sizeof(v51));
  outlined retain of _GestureInputs((uint64_t)&v53);
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v51, 0);
  AGGraphClearUpdate();
  id v17 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  unsigned int IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs((uint64_t)&v53);
  *(void *)&v42[0] = __PAIR64__(v26, v34);
  *((void *)&v42[0] + 1) = __PAIR64__(IndirectAttribute2, v16);
  uint64_t v40 = type metadata accessor for CoordinateSpaceEvents();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<[EventID : EventType]>(0, &lazy cache variable for type metadata for Attribute<[EventID : EventType]>, (uint64_t (*)(uint64_t))type metadata accessor for [EventID : EventType], MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v42, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_5, (uint64_t)v39, v40, MEMORY[0x263F8E628], v19, MEMORY[0x263F8E658], v20);
  *(void *)&long long v44 = v6;
  DWORD2(v44) = v33;
  *(void *)&long long v45 = v8;
  *((void *)&v45 + 1) = __PAIR64__(v31, v32);
  *(void *)&long long v46 = __PAIR64__(v29, v30);
  *((void *)&v46 + 1) = v24;
  *(void *)&long long v47 = v22;
  *((void *)&v47 + 1) = __PAIR64__(v23, v28);
  *(void *)&long long v48 = __PAIR64__(v37, v27);
  *((void *)&v48 + 1) = v15;
  LODWORD(v49) = v38;
  *((void *)&v49 + 1) = v36;
  *(void *)uint64_t v50 = *(void *)v59;
  *(_DWORD *)&v50[8] = *(_DWORD *)&v59[8];
  *(void *)&v50[16] = *(void *)&v59[16];
  *(_DWORD *)&v50[24] = *(_DWORD *)&v59[24] | 1;
  v42[4] = v48;
  v42[5] = v49;
  v43[0] = *(_OWORD *)v50;
  *(_OWORD *)((char *)v43 + 12) = *(_OWORD *)&v50[12];
  v42[0] = v44;
  v42[1] = v45;
  v42[2] = v46;
  v42[3] = v47;
  outlined retain of _GestureInputs((uint64_t)&v44);
  a3(v42);
  outlined release of _GestureInputs((uint64_t)&v44);
  return outlined release of _GestureInputs((uint64_t)&v44);
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance CoordinateSpaceGesture<A>(unsigned int *a1, long long *a2, void (*a3)(_OWORD *))
{
  return static CoordinateSpaceGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t Gesture.coordinateSpace(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with copy of CoordinateSpace(a1, (uint64_t)v7);
  swift_getAssociatedTypeWitness();
  outlined init with take of CoordinateSpace((uint64_t)v7, (uint64_t)v8);
  uint64_t v5 = type metadata accessor for CoordinateSpaceGesture();
  swift_getWitnessTable();
  Gesture.modifier<A>(_:)((uint64_t)v8, a2, v5, a3);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v5 - 8) + 8))(v8, v5);
}

uint64_t CoordinateSpaceEvents.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CoordinateSpaceGesture();
  uint64_t Value = AGGraphGetValue();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t CoordinateSpaceEvents.value.getter()
{
  type metadata accessor for [EventID : EventType]();
  uint64_t v17 = *(void *)AGGraphGetValue();
  CoordinateSpaceEvents.modifier.getter((uint64_t)&v10);
  outlined init with take of CoordinateSpace((uint64_t)&v10, (uint64_t)v16);
  outlined init with copy of CoordinateSpace((uint64_t)v16, (uint64_t)&v10);
  if (v15)
  {
    if (v15 != 1 && !(*(void *)&v13 | *(void *)&v14 | v10 | *(void *)&v12 | *(void *)&v11))
    {
      swift_bridgeObjectRetain();
      specialized defaultConvertEventLocations<A>(_:converter:)(&v17);
      outlined destroy of CoordinateSpace((uint64_t)v16);
      return v17;
    }
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of CoordinateSpace((uint64_t)&v10);
  }
  AGGraphClearUpdate();
  uint64_t Value = AGGraphGetValue();
  double v1 = *(double *)(Value + 8);
  double v2 = *(double *)(Value + 16);
  double v3 = *(double *)(Value + 24);
  double v4 = *(double *)(Value + 32);
  uint64_t v10 = *(void *)Value;
  swift_retain();
  AGGraphSetUpdate();
  AGGraphClearUpdate();
  uint64_t v5 = (double *)AGGraphGetValue();
  double v6 = *v5;
  double v7 = v5[1];
  uint64_t v8 = AGGraphSetUpdate();
  double v13 = v3 - (v6 - v1);
  double v14 = v4 - (v7 - v2);
  double v11 = v6;
  double v12 = v7;
  MEMORY[0x270FA5388](v8);
  specialized defaultConvertEventLocations<A>(_:converter:)(&v17, (void (*)(void **))partial apply for closure #4 in CoordinateSpaceEvents.value.getter);
  outlined destroy of CoordinateSpace((uint64_t)v16);
  swift_release();
  return v17;
}

uint64_t specialized defaultConvertEventLocations<A>(_:converter:)(uint64_t *a1, void (*a2)(void **))
{
  uint64_t v64 = (void *)MEMORY[0x263F8EE78];
  uint64_t v76 = (void *)MEMORY[0x263F8EE78];
  uint64_t v2 = *a1;
  uint64_t v62 = *a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(*a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(*a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
LABEL_6:
      uint64_t v10 = *(void *)(v2 + 56);
      double v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v9);
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      *(void *)&long long v69 = v13;
      *((void *)&v69 + 1) = v12;
      outlined init with copy of AnyTrackedValue(v10 + 40 * v9, (uint64_t)&v70);
      goto LABEL_13;
    }
    int64_t v14 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    if (v14 >= v6)
    {
      int64_t v16 = v7;
    }
    else
    {
      unint64_t v15 = *(void *)(v62 + 8 * v14);
      if (v15) {
        goto LABEL_10;
      }
      int64_t v16 = v7 + 1;
      if (v7 + 2 < v6)
      {
        unint64_t v15 = *(void *)(v62 + 8 * (v7 + 2));
        if (v15)
        {
          int64_t v14 = v7 + 2;
LABEL_10:
          unint64_t v5 = (v15 - 1) & v15;
          unint64_t v9 = __clz(__rbit64(v15)) + (v14 << 6);
          int64_t v7 = v14;
          goto LABEL_6;
        }
        int64_t v16 = v7 + 2;
        if (v7 + 3 < v6)
        {
          unint64_t v15 = *(void *)(v62 + 8 * (v7 + 3));
          if (v15)
          {
            int64_t v14 = v7 + 3;
            goto LABEL_10;
          }
          int64_t v14 = v7 + 4;
          int64_t v16 = v7 + 3;
          if (v7 + 4 < v6)
          {
            unint64_t v15 = *(void *)(v62 + 8 * v14);
            if (v15) {
              goto LABEL_10;
            }
            while (v6 - 5 != v7)
            {
              unint64_t v15 = *(void *)(v2 + 104 + 8 * v7++);
              if (v15)
              {
                int64_t v14 = v7 + 4;
                goto LABEL_10;
              }
            }
            int64_t v16 = v6 - 1;
          }
        }
      }
    }
    unint64_t v5 = 0;
    uint64_t v72 = 0;
    long long v70 = 0u;
    long long v71 = 0u;
    int64_t v7 = v16;
    long long v69 = 0u;
LABEL_13:
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v69, (uint64_t)v73);
    uint64_t v17 = v73[0];
    if (!v73[0]) {
      break;
    }
    uint64_t v18 = v73[1];
    outlined init with take of ScrollStateRequest(&v74, (uint64_t)v68);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SpatialEventType);
    if (swift_dynamicCast())
    {
      outlined init with take of ScrollStateRequest(v66, (uint64_t)&v69);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v19 = v64;
      }
      else {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
      }
      unint64_t v21 = v19[2];
      unint64_t v20 = v19[3];
      if (v21 >= v20 >> 1) {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v19);
      }
      v19[2] = v21 + 1;
      uint64_t v64 = v19;
      uint64_t v22 = &v19[2 * v21];
      v22[4] = v17;
      void v22[5] = v18;
      uint64_t v23 = *((void *)&v70 + 1);
      uint64_t v24 = v71;
      __swift_project_boxed_opaque_existential_1(&v69, *((uint64_t *)&v70 + 1));
      double v25 = (*(double (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24);
      uint64_t v27 = v26;
      unsigned int v28 = v76;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unsigned int v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
      }
      unint64_t v30 = v28[2];
      unint64_t v29 = v28[3];
      if (v30 >= v29 >> 1) {
        unsigned int v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v28);
      }
      v28[2] = v30 + 1;
      unsigned int v31 = (double *)&v28[2 * v30];
      v31[4] = v25;
      *((void *)v31 + 5) = v27;
      uint64_t v76 = v28;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v69);
    }
    else
    {
      uint64_t v67 = 0;
      memset(v66, 0, sizeof(v66));
      outlined destroy of SpatialEventType?((uint64_t)v66);
    }
  }
  swift_release();
  if (v76[2])
  {
    a2(&v76);
    uint64_t v63 = v64[2];
    if (v63)
    {
      unsigned int v32 = v76;
      uint64_t v61 = v76[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      while (1)
      {
        if (v61 == v34)
        {
LABEL_58:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          break;
        }
        if (v34 >= v32[2]) {
          goto LABEL_61;
        }
        uint64_t v36 = *a1;
        if (!*(void *)(*a1 + 16)) {
          goto LABEL_62;
        }
        Swift::UInt v37 = v64[v33 + 4];
        Swift::UInt v38 = v64[v33 + 5];
        double v39 = *(double *)&v32[v33 + 4];
        double v40 = *(double *)&v32[v33 + 5];
        unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
        if ((v42 & 1) == 0) {
          goto LABEL_63;
        }
        outlined init with copy of AnyTrackedValue(*(void *)(v36 + 56) + 40 * v41, (uint64_t)v68);
        outlined init with take of ScrollStateRequest(v68, (uint64_t)&v69);
        type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SpatialEventType);
        swift_dynamicCast();
        uint64_t v43 = *((void *)&v74 + 1);
        uint64_t v44 = v75;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v73, *((uint64_t *)&v74 + 1));
        (*(void (**)(uint64_t, uint64_t, double, double))(v44 + 48))(v43, v44, v39, v40);
        outlined init with copy of AnyTrackedValue((uint64_t)v73, (uint64_t)v68);
        swift_dynamicCast();
        outlined init with take of ScrollStateRequest(&v69, (uint64_t)v66);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        long long v46 = (void *)*a1;
        *a1 = 0x8000000000000000;
        unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
        uint64_t v49 = v46[2];
        BOOL v50 = (v47 & 1) == 0;
        uint64_t v51 = v49 + v50;
        if (__OFADD__(v49, v50)) {
          goto LABEL_64;
        }
        char v52 = v47;
        if (v46[3] >= v51)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            if ((v47 & 1) == 0) {
              goto LABEL_54;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            if ((v52 & 1) == 0) {
              goto LABEL_54;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v51, isUniquelyReferenced_nonNull_native);
          unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
          if ((v52 & 1) != (v54 & 1)) {
            goto LABEL_66;
          }
          unint64_t v48 = v53;
          if ((v52 & 1) == 0)
          {
LABEL_54:
            v46[(v48 >> 6) + 8] |= 1 << v48;
            long long v55 = (Swift::UInt *)(v46[6] + 16 * v48);
            *long long v55 = v37;
            v55[1] = v38;
            outlined init with take of ScrollStateRequest(v66, v46[7] + 40 * v48);
            uint64_t v56 = v46[2];
            BOOL v57 = __OFADD__(v56, 1);
            uint64_t v58 = v56 + 1;
            if (v57) {
              goto LABEL_65;
            }
            v46[2] = v58;
            goto LABEL_42;
          }
        }
        uint64_t v35 = v46[7] + 40 * v48;
        __swift_destroy_boxed_opaque_existential_1(v35);
        outlined init with take of ScrollStateRequest(v66, v35);
LABEL_42:
        ++v34;
        *a1 = (uint64_t)v46;
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
        v33 += 2;
        if (v63 == v34) {
          goto LABEL_58;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #4 in CoordinateSpaceEvents.value.getter(uint64_t a1, double *a2, uint64_t a3)
{
  double v4 = *a2;
  double v5 = a2[1];
  double v6 = a2[2];
  double v7 = a2[3];
  double v8 = a2[4];
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  char v13 = 2;
  outlined init with copy of CoordinateSpace(a3, (uint64_t)v14);
  v14[41] = 4;
  if (v4 != 0.0 || v7 != 0.0 || v8 != 0.0)
  {
    if (*(void *)(*(void *)a1 + 16))
    {
      v10[0] = v4;
      v10[1] = v5;
      v10[2] = v6;
      v10[3] = v7;
      void v10[4] = v8;
      swift_retain();
      specialized ViewTransform.convert(_:_:)((uint64_t)v11, v10, a1);
    }
    else
    {
      swift_retain();
    }
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v11);
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance CoordinateSpaceEvents<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CoordinateSpaceEvents.value.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for CoordinateSpaceEvents()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CoordinateSpaceGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for CoordinateSpaceGesture(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 40)) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for CoordinateSpaceGesture(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40))
  {
    long long v3 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v3;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for CoordinateSpaceGesture(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    outlined destroy of CoordinateSpace(a1);
    if (*((unsigned char *)a2 + 40))
    {
      long long v4 = *a2;
      long long v5 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v4;
      *(_OWORD *)(a1 + 16) = v5;
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

_OWORD *assignWithTake for CoordinateSpaceGesture(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of CoordinateSpace((uint64_t)a1);
    long long v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CoordinateSpaceGesture(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CoordinateSpaceGesture(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in CoordinateSpaceEvents<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #4 in CoordinateSpaceEvents.value.getter(uint64_t a1)
{
  return closure #4 in CoordinateSpaceEvents.value.getter(a1, *(double **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t outlined destroy of SpatialEventType?(uint64_t a1)
{
  type metadata accessor for SpatialEventType?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for SpatialEventType?()
{
  if (!lazy cache variable for type metadata for SpatialEventType?)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for SpatialEventType);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SpatialEventType?);
    }
  }
}

void _CompositingGroupEffect.effectValue(size:)(uint64_t a1@<X8>)
{
  *(void *)a1 = 2;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 19;
}

uint64_t static _CompositingGroupEffect.== infix(_:_:)()
{
  return 1;
}

void protocol witness for _RendererEffect.effectValue(size:) in conformance _CompositingGroupEffect(uint64_t a1@<X8>)
{
  *(void *)a1 = 2;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 19;
}

unint64_t instantiation function for generic protocol witness table for _CompositingGroupEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _CompositingGroupEffect and conformance _CompositingGroupEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _CompositingGroupEffect and conformance _CompositingGroupEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _CompositingGroupEffect and conformance _CompositingGroupEffect;
  if (!lazy protocol witness table cache variable for type _CompositingGroupEffect and conformance _CompositingGroupEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CompositingGroupEffect and conformance _CompositingGroupEffect);
  }
  return result;
}

uint64_t sub_245C98198()
{
  return swift_getWitnessTable();
}

double static ModifierGesture._makeGesture(gesture:inputs:)@<D0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v12 = *a1;
  long long v13 = a2[5];
  long long v48 = a2[4];
  long long v49 = v13;
  long long v50 = a2[6];
  uint64_t v51 = *((void *)a2 + 14);
  long long v14 = a2[1];
  long long v44 = *a2;
  long long v45 = v14;
  long long v15 = a2[3];
  long long v46 = a2[2];
  long long v47 = v15;
  int v16 = *((_DWORD *)a2 + 30);
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  LODWORD(v41) = v12;
  *(void *)&long long v32 = a3;
  *((void *)&v32 + 1) = a4;
  *(void *)&long long v33 = a5;
  *((void *)&v33 + 1) = a6;
  type metadata accessor for ModifierGesture();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static ModifierGesture._makeGesture(gesture:inputs:), a3, v29);
  v23[2] = a3;
  v23[3] = a4;
  v23[4] = a5;
  v23[5] = a6;
  int v24 = v12;
  long long v36 = v48;
  long long v37 = v49;
  long long v38 = v50;
  uint64_t v39 = v51;
  long long v32 = v44;
  long long v33 = v45;
  long long v34 = v46;
  long long v35 = v47;
  int v40 = v16;
  (*(void (**)(double *__return_ptr, void *, long long *, double (*)@<D0>(long long *@<X0>, uint64_t@<X8>), void *, uint64_t, uint64_t))(a5 + 24))(&v41, v29, &v32, partial apply for closure #2 in static ModifierGesture._makeGesture(gesture:inputs:), v23, a3, a5);
  if ((v16 & 8) != 0 && !(swift_conformsToProtocol2() ? a3 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol()) {
      char v18 = 2;
    }
    else {
      char v18 = 1;
    }
    char v31 = v18;
    long long v36 = v48;
    long long v37 = v49;
    long long v38 = v50;
    uint64_t v39 = v51;
    long long v32 = v44;
    long long v33 = v45;
    long long v34 = v46;
    long long v35 = v47;
    int v40 = v16;
    *(double *)unint64_t v29 = v41;
    v29[1] = v42;
    int v30 = v43;
    swift_getAssociatedTypeWitness();
    type metadata accessor for _GestureOutputs();
    unint64_t v19 = _GestureOutputs.debugData.getter();
    LOBYTE(v29[0]) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a3, &v31, 0x100000000, &v32, v19 | ((HIDWORD(v19) & 1) << 32), 0x100000000);
  }
  uint64_t v20 = v42;
  int v21 = v43;
  double result = v41;
  *(double *)a7 = v41;
  *(void *)(a7 + 8) = v20;
  *(_DWORD *)(a7 + 16) = v21;
  return result;
}

uint64_t closure #1 in static ModifierGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v7 = type metadata accessor for ModifierGesture();
  uint64_t v8 = a1 + *(int *)(v7 + 52);
  void v12[2] = v7;
  v12[3] = a2;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, a2, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v10);
  return v13;
}

double closure #2 in static ModifierGesture._makeGesture(gesture:inputs:)@<D0>(long long *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  long long v10 = a1[5];
  long long v39 = a1[4];
  long long v40 = v10;
  long long v41 = a1[6];
  uint64_t v42 = *((void *)a1 + 14);
  long long v11 = a1[1];
  long long v35 = *a1;
  long long v36 = v11;
  long long v12 = a1[3];
  long long v37 = a1[2];
  long long v38 = v12;
  int v13 = *((_DWORD *)a1 + 30);
  LODWORD(v32) = a2;
  *(void *)&long long v23 = a3;
  *((void *)&v23 + 1) = a4;
  *(void *)&long long v24 = a5;
  *((void *)&v24 + 1) = a6;
  type metadata accessor for ModifierGesture();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in closure #2 in static ModifierGesture._makeGesture(gesture:inputs:), a4, v20);
  long long v27 = v39;
  long long v28 = v40;
  long long v29 = v41;
  uint64_t v30 = v42;
  long long v23 = v35;
  long long v24 = v36;
  long long v25 = v37;
  long long v26 = v38;
  int v31 = v13;
  (*(void (**)(double *__return_ptr, void *, long long *, uint64_t, uint64_t))(a6 + 32))(&v32, v20, &v23, a4, a6);
  if ((v13 & 8) != 0 && !(swift_conformsToProtocol2() ? a4 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol()) {
      char v15 = 2;
    }
    else {
      char v15 = 1;
    }
    char v22 = v15;
    long long v27 = v39;
    long long v28 = v40;
    long long v29 = v41;
    uint64_t v30 = v42;
    long long v23 = v35;
    long long v24 = v36;
    long long v25 = v37;
    long long v26 = v38;
    int v31 = v13;
    *(double *)uint64_t v20 = v32;
    v20[1] = v33;
    int v21 = v34;
    swift_getAssociatedTypeWitness();
    type metadata accessor for _GestureOutputs();
    unint64_t v16 = _GestureOutputs.debugData.getter();
    LOBYTE(v20[0]) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a4, &v22, 0x100000000, &v23, v16 | ((HIDWORD(v16) & 1) << 32), 0x100000000);
  }
  uint64_t v17 = v33;
  int v18 = v34;
  double result = v32;
  *(double *)a7 = v32;
  *(void *)(a7 + 8) = v17;
  *(_DWORD *)(a7 + 16) = v18;
  return result;
}

uint64_t closure #1 in closure #2 in static ModifierGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  v10[2] = type metadata accessor for ModifierGesture();
  v10[3] = a3;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v10, a3, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v8);
  return v11;
}

uint64_t partial apply for closure #1 in static ModifierGesture._makeGesture(gesture:inputs:)(uint64_t a1)
{
  return closure #1 in static ModifierGesture._makeGesture(gesture:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

double partial apply for closure #2 in static ModifierGesture._makeGesture(gesture:inputs:)@<D0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in static ModifierGesture._makeGesture(gesture:inputs:)(a1, *(_DWORD *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

double protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance ModifierGesture<A, B>@<D0>(int *a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return static ModifierGesture._makeGesture(gesture:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

uint64_t instantiation function for generic protocol witness table for ModifierGesture<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of static GestureModifier._makeGesture(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t *initializeBufferWithCopyOfBuffer for ModifierGesture(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  unint64_t v11 = ((v6 + v9) & ~v9) + *(void *)(v8 + 64);
  uint64_t v12 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v12 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *int v4 = *a2;
    int v4 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v16, ((unint64_t)a2 + v10) & v16, v7);
  }
  return v4;
}

uint64_t initializeWithTake for ModifierGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for ModifierGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ModifierGesture(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(void *)(a3 + 16);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for ModifierGesture(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245C98FF4);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          long long v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          long long v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t partial apply for closure #1 in closure #2 in static ModifierGesture._makeGesture(gesture:inputs:)(uint64_t a1)
{
  return closure #1 in closure #2 in static ModifierGesture._makeGesture(gesture:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t _ResolvedKeyframes.append<A>(keyPath:path:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  AnimationPath.duration.getter(a2);
  unsigned int v7 = (void *)swift_allocObject();
  v7[2] = a4;
  v7[3] = a2;
  v7[4] = a1;
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a4;
  v8[3] = a2;
  v8[4] = a1;
  type metadata accessor for _ResolvedKeyframes.Track();
  type metadata accessor for Array();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  return Array.append(_:)();
}

void protocol witness for Keyframes.body.getter in conformance KeyframeTrack<A, B, C>()
{
}

void PrimitiveKeyframes.body.getter()
{
}

void protocol witness for Keyframes.body.getter in conformance EmptyKeyframes<A>()
{
}

void protocol witness for Keyframes.body.getter in conformance CombinedKeyframes<A, B, C>()
{
}

uint64_t Keyframes<>._resolve(into:initialValue:initialVelocity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  double v12 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  size_t v14 = (char *)&v17 - v13;
  (*(void (**)(uint64_t, uint64_t, double))(a5 + 32))(a4, a5, v12);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(a1, a2, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
}

void protocol witness for Keyframes.body.getter in conformance Never()
{
}

uint64_t AnyKeyframes.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  unsigned int v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v7(boxed_opaque_existential_1, a1, a2);
}

uint64_t AnyKeyframes._resolve(into:initialValue:initialVelocity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 40))(a1, a2, a3, v7, v8);
}

void protocol witness for Keyframes.body.getter in conformance AnyKeyframes<A>()
{
}

uint64_t closure #1 in _ResolvedKeyframes.append<A>(keyPath:path:)(double a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, void, uint64_t, double))
{
  uint64_t v10 = *a4;
  uint64_t v11 = (uint64_t (*)(uint64_t *, void))swift_modifyAtWritableKeyPath();
  a6(v12, a3, *(void *)(*MEMORY[0x263F8DE50] + v10 + 8), a5, a1);
  return v11(&v14, 0);
}

double _ResolvedKeyframes.duration.getter()
{
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for _ResolvedKeyframes.Track();
  uint64_t v1 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in _ResolvedKeyframes.duration.getter, KeyPath, v1, MEMORY[0x263F8D538], MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v3);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    double v6 = *(double *)(v4 + 32);
    uint64_t v7 = v5 - 1;
    if (v7)
    {
      uint64_t v8 = (double *)(v4 + 40);
      do
      {
        double v9 = *v8++;
        double v10 = v9;
        if (v6 < v9) {
          double v6 = v10;
        }
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    double v6 = 0.0;
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t implicit closure #1 in _ResolvedKeyframes.duration.getter()
{
  return swift_release();
}

uint64_t specialized Sequence<>.max()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    uint64_t v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v2 < v5) {
        double v2 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return *(void *)&v2;
}

uint64_t _ResolvedKeyframes.update(value:time:)(uint64_t a1, double a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = type metadata accessor for _ResolvedKeyframes.Track();
  uint64_t v7 = swift_bridgeObjectRetain();
  if (MEMORY[0x24C522EA0](v7, v6))
  {
    uint64_t v8 = 0;
    uint64_t v9 = v5 + 64;
    while (1)
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      uint64_t result = Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (!IsNativeType) {
        break;
      }
      uint64_t v12 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_10;
      }
      uint64_t v13 = *(void (**)(uint64_t, double))(v9 - 24);
      swift_retain();
      swift_retain();
      v13(a1, a2);
      swift_release();
      swift_release();
      ++v8;
      v9 += 40;
      if (v12 == MEMORY[0x24C522EA0](v5, v6)) {
        goto LABEL_6;
      }
    }
    uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
LABEL_6:
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _ResolvedKeyframes.update(velocity:time:)(uint64_t a1, double a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = type metadata accessor for _ResolvedKeyframes.Track();
  uint64_t v7 = swift_bridgeObjectRetain();
  if (MEMORY[0x24C522EA0](v7, v6))
  {
    uint64_t v8 = 0;
    uint64_t v9 = v5 + 64;
    while (1)
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      uint64_t result = Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (!IsNativeType) {
        break;
      }
      uint64_t v12 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_10;
      }
      uint64_t v13 = *(void (**)(uint64_t, double))(v9 - 8);
      swift_retain();
      swift_retain();
      v13(a1, a2);
      swift_release();
      swift_release();
      ++v8;
      v9 += 40;
      if (v12 == MEMORY[0x24C522EA0](v5, v6)) {
        goto LABEL_6;
      }
    }
    uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
LABEL_6:
    return swift_bridgeObjectRelease();
  }
  return result;
}

void specialized Keyframes.bodyError()()
{
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x800000024621ED40;
  v1._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized PrimitiveKeyframes.body.getter()
{
}

_UNKNOWN **associated type witness table accessor for Keyframes.Body : Keyframes in Never()
{
  return &protocol witness table for Never;
}

uint64_t instantiation function for generic protocol witness table for AnyKeyframes<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of Keyframes.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Keyframes._resolve(into:initialValue:initialVelocity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t type metadata accessor for AnyKeyframes()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _ResolvedKeyframes()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for _ResolvedKeyframes.Track()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for _ResolvedKeyframes.Track(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for _ResolvedKeyframes.Track(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _ResolvedKeyframes.Track(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for _ResolvedKeyframes.Track()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for implicit closure #1 in _ResolvedKeyframes.duration.getter()
{
  return implicit closure #1 in _ResolvedKeyframes.duration.getter();
}

uint64_t partial apply for closure #1 in _ResolvedKeyframes.append<A>(keyPath:path:)(uint64_t a1, double a2)
{
  return closure #1 in _ResolvedKeyframes.append<A>(keyPath:path:)(a2, a1, *(void *)(v2 + 24), *(uint64_t **)(v2 + 32), *(void *)(v2 + 16), (void (*)(uint64_t, uint64_t, void, uint64_t, double))AnimationPath.update(value:time:));
}

uint64_t partial apply for closure #2 in _ResolvedKeyframes.append<A>(keyPath:path:)(uint64_t a1, double a2)
{
  return closure #1 in _ResolvedKeyframes.append<A>(keyPath:path:)(a2, a1, *(void *)(v2 + 24), *(uint64_t **)(v2 + 32), *(void *)(v2 + 16), (void (*)(uint64_t, uint64_t, void, uint64_t, double))AnimationPath.update(velocity:time:));
}

uint64_t VisualEffect.geometryEffect<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return VisualEffect.rendererEffect<A>(_:)(a1, a2, a3, a4, a5);
}

uint64_t type metadata accessor for GeometryVisualEffect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_245C99DA4()
{
  return swift_getWitnessTable();
}

uint64_t sub_245C99DF0(uint64_t a1)
{
  return get_witness_table_7SwiftUI12VisualEffectRzs8SendableRd__AA08RendererD0Rd__r__lAA08CombinedcD033_9FFF1526AA410727EB04F8ADBE7663C7LLVyxAA0fcD0AFLLVyqd__GGAaBHPyHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for RendererVisualEffect);
}

uint64_t sub_245C99E1C(uint64_t a1)
{
  return get_witness_table_7SwiftUI12VisualEffectRzs8SendableRd__AA08RendererD0Rd__r__lAA08CombinedcD033_9FFF1526AA410727EB04F8ADBE7663C7LLVyxAA0fcD0AFLLVyqd__GGAaBHPyHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for GeometryVisualEffect);
}

uint64_t getEnumTagSinglePayload for CombinedVisualEffect(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for CombinedVisualEffect(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245C9A30CLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          long long v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          long long v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for GeometryVisualEffect(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for GeometryVisualEffect(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245C9A6B0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t closure #1 in closure #2 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  v10[2] = type metadata accessor for CombinedVisualEffect();
  v10[3] = a2;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, a2, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v8);
  return v11;
}

uint64_t CombinedVisualEffect.animatableData.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v3 = *(void *)(a1[5] + 8);
  uint64_t v4 = a1[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v15 - v6;
  uint64_t v8 = *(void *)(a1[4] + 8);
  uint64_t v9 = a1[2];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  double v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(uint64_t, uint64_t, double))(v8 + 24))(v9, v8, v11);
  (*(void (**)(uint64_t, uint64_t))(v3 + 24))(v4, v3);
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  return AnimatablePair.init(_:_:)((uint64_t)v13, (uint64_t)v7, v10, AssociatedTypeWitness, v16);
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance CombinedVisualEffect<A, B>(uint64_t a1, void *a2)
{
  specialized CombinedVisualEffect.animatableData.setter(a1, a2);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for AnimatablePair();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
}

void (*protocol witness for Animatable.animatableData.modify in conformance CombinedVisualEffect<A, B>(void *a1, void *a2))(uint64_t a1, char a2)
{
  unsigned int v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = v2;
  _OWORD v5[5] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedConformanceWitness();
  *unsigned int v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  uint64_t v10 = type metadata accessor for AnimatablePair();
  v5[6] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[7] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v5[8] = malloc(v12);
  uint64_t v13 = malloc(v12);
  v5[9] = v13;
  CombinedVisualEffect.animatableData.getter(a2, (uint64_t)v13);
  return protocol witness for Animatable.animatableData.modify in conformance CombinedVisualEffect<A, B>;
}

void protocol witness for Animatable.animatableData.modify in conformance CombinedVisualEffect<A, B>(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  uint64_t v4 = *(void **)(*(void *)a1 + 72);
  uint64_t v5 = *(void *)(*(void *)a1 + 48);
  uint64_t v6 = *(void *)(*(void *)a1 + 56);
  uint64_t v7 = *(void **)(*(void *)a1 + 40);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 64), v4, v5);
    specialized CombinedVisualEffect.animatableData.setter((uint64_t)v3, v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized CombinedVisualEffect.animatableData.setter(*(void *)(*(void *)a1 + 72), v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t protocol witness for static VisualEffect._makeVisualEffect(effect:inputs:body:) in conformance GeometryVisualEffect<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryVisualEffect, (void (*)(uint64_t))partial apply for closure #1 in static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:), (uint64_t (*)(_DWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))static GeometryEffect.makeGeometryEffect(modifier:inputs:body:));
}

uint64_t protocol witness for Animatable.animatableData.getter in conformance GeometryVisualEffect<A>(uint64_t a1)
{
  return GeometryVisualEffect.animatableData.getter(a1);
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance GeometryVisualEffect<A>(void *a1, uint64_t a2))()
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = v2;
  v5[1] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[2] = AssociatedTypeWitness;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  _OWORD v5[5] = malloc(v8);
  GeometryVisualEffect.animatableData.getter(a2);
  return protocol witness for Animatable.animatableData.modify in conformance GeometryVisualEffect<A>;
}

uint64_t GeometryVisualEffect.animatableData.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 24) + 8) + 24))(*(void *)(a1 + 16));
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance GeometryVisualEffect<A>(uint64_t a1, uint64_t a2)
{
  specialized RendererVisualEffect.animatableData.setter(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v4(a1, AssociatedTypeWitness);
}

void protocol witness for Animatable.animatableData.modify in conformance GeometryVisualEffect<A>(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  uint64_t v4 = *(void **)(*(void *)a1 + 40);
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  uint64_t v6 = *(void *)(*(void *)a1 + 24);
  uint64_t v7 = *(void *)(*(void *)a1 + 8);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 32), v4, v5);
    specialized RendererVisualEffect.animatableData.setter((uint64_t)v3, v7);
    size_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized RendererVisualEffect.animatableData.setter(*(void *)(*(void *)a1 + 40), v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t instantiation function for generic protocol witness table for GeometryVisualEffect<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t partial apply for closure #1 in static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(uint64_t a1)
{
  return closure #1 in static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(void))type metadata accessor for GeometryVisualEffect, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t sub_245C9B094()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)(uint64_t a1)
{
  return closure #1 in closure #2 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t specialized RendererVisualEffect.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v6 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  size_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, double))(v9 + 16))((char *)&v11 - v7, a1, v6);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 32))(v8, v3, v4);
}

uint64_t specialized CombinedVisualEffect.animatableData.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[5] + 8);
  uint64_t v5 = a2[3];
  uint64_t v22 = a1;
  uint64_t v23 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  size_t v8 = (char *)&v21 - v7;
  uint64_t v9 = *(void *)(a2[4] + 8);
  uint64_t v10 = a2[2];
  uint64_t v11 = swift_getAssociatedTypeWitness();
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v21 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)&v21 - v13, a1, v11, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v14, v10, v9);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v17 = v23;
  uint64_t v18 = swift_getAssociatedConformanceWitness();
  uint64_t v25 = v11;
  uint64_t v26 = AssociatedTypeWitness;
  uint64_t v27 = AssociatedConformanceWitness;
  uint64_t v28 = v18;
  uint64_t v19 = type metadata accessor for AnimatablePair();
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v8, v22 + *(int *)(v19 + 52), AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 32))(v8, v17, v4);
}

double static _VariadicView.Tree<>.makePlatformSubstitutableView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, double *a7@<X8>)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  int v30 = *a1;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v24 = a2[2];
  uint64_t v25 = *a2;
  int v8 = *((_DWORD *)a2 + 6);
  int v9 = *((_DWORD *)a2 + 7);
  int v21 = *((_DWORD *)a2 + 8);
  uint64_t v10 = a2[6];
  uint64_t v22 = a2[5];
  int v11 = *((_DWORD *)a2 + 14);
  int v12 = *((_DWORD *)a2 + 15);
  int v13 = *((_DWORD *)a2 + 16);
  int v18 = *((_DWORD *)a2 + 17);
  int v19 = *((_DWORD *)a2 + 9);
  int v15 = *((_DWORD *)a2 + 18);
  int v14 = *((_DWORD *)a2 + 19);
  int v16 = *((_DWORD *)a2 + 20);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
  {
    type metadata accessor for _VariadicView.Tree();
    AGSubgraphBeginTreeElement();
  }
  uint64_t v50 = v25;
  int v51 = v7;
  uint64_t v52 = v24;
  int v53 = v8;
  int v54 = v9;
  uint64_t v57 = v22;
  uint64_t v58 = v10;
  int v56 = v19;
  int v59 = v11;
  int v60 = v12;
  int v61 = v13;
  int v62 = v18;
  int v63 = v15;
  int v64 = v14;
  int v65 = v16;
  int v31 = v30;
  uint64_t v34 = v25;
  int v35 = v7;
  uint64_t v36 = v24;
  int v37 = v8;
  int v38 = v9;
  int v39 = 0;
  int v40 = v19;
  uint64_t v41 = v22;
  uint64_t v42 = v10;
  int v43 = v11;
  int v44 = v12;
  int v45 = v13;
  int v46 = v18;
  int v47 = v15;
  int v48 = v14;
  int v49 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _VariadicView.Tree<>._makeView(view:inputs:)(&v31, (uint64_t)&v34, a3, a4, a5, a6, (uint64_t)&v32);
  int v55 = v21;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v32, (uint64_t)&v50);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a7 = v32;
  double result = v33;
  a7[1] = v33;
  return result;
}

uint64_t makePlatformSecondaryView(primaryInputs:primaryOutputs:secondaryInputs:flipOrder:body:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *))
{
  int v5 = *((_DWORD *)a3 + 2);
  uint64_t v6 = a3[2];
  int v7 = *((_DWORD *)a3 + 20);
  uint64_t v10 = *a3;
  int v11 = v5;
  uint64_t v12 = v6;
  long long v8 = *(_OWORD *)(a3 + 5);
  long long v13 = *(_OWORD *)(a3 + 3);
  long long v14 = v8;
  long long v15 = *(_OWORD *)(a3 + 7);
  uint64_t v16 = a3[9];
  int v17 = v7;
  return a5(a1, &v10);
}

uint64_t static _ViewOutputs.makePlatformRootGeometryTransform(inputs:body:)(uint64_t *a1, uint64_t (*a2)(uint64_t *))
{
  int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = a1[2];
  int v4 = *((_DWORD *)a1 + 20);
  uint64_t v7 = *a1;
  int v8 = v2;
  uint64_t v9 = v3;
  long long v5 = *(_OWORD *)(a1 + 5);
  long long v10 = *(_OWORD *)(a1 + 3);
  long long v11 = v5;
  long long v12 = *(_OWORD *)(a1 + 7);
  uint64_t v13 = a1[9];
  int v14 = v4;
  return a2(&v7);
}

uint64_t *NSAttributedStringKey.kitStrikethroughStyle.unsafeMutableAddressor()
{
  if (one-time initialization token for kitStrikethroughStyle != -1) {
    swift_once();
  }
  return &static NSAttributedStringKey.kitStrikethroughStyle;
}

uint64_t *NSAttributedStringKey.kitUnderlineStyle.unsafeMutableAddressor()
{
  if (one-time initialization token for kitUnderlineStyle != -1) {
    swift_once();
  }
  return &static NSAttributedStringKey.kitUnderlineStyle;
}

uint64_t *NSAttributedStringKey.kitUnderlineColor.unsafeMutableAddressor()
{
  if (one-time initialization token for kitUnderlineColor != -1) {
    swift_once();
  }
  return &static NSAttributedStringKey.kitUnderlineColor;
}

uint64_t static Character.nsAttachment.getter()
{
  uint64_t v1 = 12369903;
  return MEMORY[0x24C522990](&v1, 3);
}

uint64_t String.init(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AttributedString.CharacterView();
  MEMORY[0x270FA5388](v2);
  AttributedString.characters.getter();
  _s10Foundation16AttributedStringV13CharacterViewVAESTAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x263F066D8]);
  uint64_t v3 = String.init<A>(_:)();
  uint64_t v4 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return v3;
}

uint64_t AttributedString.isEmpty.getter()
{
  uint64_t v0 = type metadata accessor for AttributedString.Index();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v14 - v5;
  uint64_t v7 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  long long v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttributedString.characters.getter();
  _s10Foundation16AttributedStringV13CharacterViewVAESTAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x263F066D8]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  _s10Foundation16AttributedStringV13CharacterViewVAESTAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x263F067E8]);
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  long long v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v3, v0);
  v12(v6, v0);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v11 & 1;
}

uint64_t one-time initialization function for kitBackgroundColor()
{
  uint64_t result = MEMORY[0x24C522820](0xD000000000000011, 0x800000024621ED60);
  static NSAttributedStringKey.kitBackgroundColor = result;
  return result;
}

uint64_t one-time initialization function for kitStrikethroughStyle()
{
  uint64_t result = MEMORY[0x24C522820](0x656B69727453534ELL, 0xEF6867756F726874);
  static NSAttributedStringKey.kitStrikethroughStyle = result;
  return result;
}

uint64_t one-time initialization function for kitUnderlineStyle()
{
  uint64_t result = MEMORY[0x24C522820](0x6C7265646E55534ELL, 0xEB00000000656E69);
  static NSAttributedStringKey.kitUnderlineStyle = result;
  return result;
}

uint64_t one-time initialization function for kitBaselineOffset()
{
  uint64_t result = MEMORY[0x24C522820](0xD000000000000010, 0x800000024621EDE0);
  static NSAttributedStringKey.kitBaselineOffset = result;
  return result;
}

uint64_t one-time initialization function for kitUnderlineColor()
{
  uint64_t result = MEMORY[0x24C522820](0xD000000000000010, 0x800000024621EDA0);
  static NSAttributedStringKey.kitUnderlineColor = result;
  return result;
}

uint64_t one-time initialization function for kitStrikethroughColor()
{
  uint64_t result = MEMORY[0x24C522820](0xD000000000000014, 0x800000024621ED80);
  static NSAttributedStringKey.kitStrikethroughColor = result;
  return result;
}

CTFontRef_optional __swiftcall NSAttributedString.kitFont(at:)(Swift::Int at)
{
  if (one-time initialization token for kitFont != -1) {
    swift_once();
  }
  if (objc_msgSend(v1, sel_attribute_atIndex_effectiveRange_, static NSAttributedStringKey.kitFont, at, 0))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  outlined init with copy of Any?((uint64_t)v10, (uint64_t)&v7);
  if (v8)
  {
    outlined init with take of Any(&v7, v6);
    outlined init with copy of Any((uint64_t)v6, (uint64_t)v5);
    type metadata accessor for CTFontRef(0);
    swift_dynamicCast();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    v3.value = v9;
  }
  else
  {
    v3.value = 0;
  }
  outlined destroy of Any?((uint64_t)v10);
  return v3;
}

uint64_t ResolvableStringAttribute.reduceSchedule<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v27 = a5;
  uint64_t v28 = a3;
  uint64_t v29 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  double v16 = MEMORY[0x270FA5388](v15);
  int v18 = (char *)&v26 - v17;
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 48))(a2, a4, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v19 = v27;
    uint64_t v20 = v28;
    a6[3] = v28;
    a6[4] = v19;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a6);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(boxed_opaque_existential_1, v29, v20);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v13, AssociatedTypeWitness);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v24 = v28;
    uint64_t v30 = v28;
    uint64_t v31 = AssociatedTypeWitness;
    uint64_t v32 = v27;
    uint64_t v33 = AssociatedConformanceWitness;
    a6[3] = type metadata accessor for ReducedTimelineSchedule();
    a6[4] = swift_getWitnessTable();
    uint64_t v25 = __swift_allocate_boxed_opaque_existential_1(a6);
    TimelineSchedule.reduced<A>(with:)((uint64_t)v18, v24, AssociatedTypeWitness, (uint64_t)v25);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, AssociatedTypeWitness);
  }
}

uint64_t TimelineSchedule.reduced<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v16, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  return ReducedTimelineSchedule.init(t1:t2:)((uint64_t)v14, (uint64_t)v10, a2, a3, a4);
}

uint64_t ReducedTimelineSchedule.init(t1:t2:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for ReducedTimelineSchedule();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t ReducedTimelineSchedule.entries(from:mode:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = a4;
  uint64_t v6 = a3[5];
  uint64_t v7 = a3[3];
  uint64_t v22 = a2;
  uint64_t v23 = v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v25 = AssociatedTypeWitness;
  uint64_t v26 = v9;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = a3[4];
  uint64_t v13 = a3[2];
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(v14 - 8);
  double v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v21 - v16;
  char v29 = *v22;
  char v18 = v29;
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, double))(v12 + 24))(a1, &v29, v13, v12, v15);
  char v28 = v18;
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v6 + 24))(a1, &v28, v23, v6);
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = v25;
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type Date and conformance Date();
  Sequence<>.reduced<A>(with:)((uint64_t)v11, v14, v19, v27);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v17, v14);
}

uint64_t Sequence<>.reduced<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v16, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  return ReducedSequence.init(s1:s2:)((uint64_t)v14, (uint64_t)v10, a2, a3, a4);
}

uint64_t static ReducedTimelineSchedule<>.== infix(_:_:)()
{
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    type metadata accessor for ReducedTimelineSchedule();
    char v0 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> ReducedTimelineSchedule<A, B>()
{
  return static ReducedTimelineSchedule<>.== infix(_:_:)();
}

uint64_t type metadata accessor for ReducedTimelineSchedule()
{
  return swift_getGenericMetadata();
}

uint64_t associated type witness table accessor for TimelineSchedule.Entries : Sequence in ReducedTimelineSchedule<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in ReducedSequence<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t ReducedSequence.init(s1:s2:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for ReducedSequence();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 60), a2, a4);
}

uint64_t ReducedSequence.Iterator.init(s1:s2:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a3, a1, AssociatedTypeWitness);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for ReducedSequence.Iterator() + 60);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, a2, v8);
}

uint64_t ReducedSequence.Iterator.next()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v88 = a2;
  int64_t v85 = *(char **)(a1 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v95 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v96 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v79 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v80 = (char *)&v74 - v6;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v97 = v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v84 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v98 = (char *)&v74 - v8;
  uint64_t v94 = *(void **)(v7 - 8);
  MEMORY[0x270FA5388](v9);
  char v82 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v83 = (char *)&v74 - v12;
  MEMORY[0x270FA5388](v13);
  Swift::String v81 = (char *)&v74 - v14;
  MEMORY[0x270FA5388](v15);
  unint64_t v92 = (char *)&v74 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v74 - v18;
  uint64_t v20 = *(void *)(a1 + 24);
  uint64_t v86 = *(char **)(a1 + 40);
  uint64_t v87 = v20;
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t v90 = *(void *)(v21 - 8);
  uint64_t v22 = v90;
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v74 - v23;
  uint64_t v25 = swift_getAssociatedTypeWitness();
  uint64_t v26 = *(void *)(v25 - 8);
  double v27 = MEMORY[0x270FA5388](v25);
  char v29 = (char *)&v74 - v28;
  uint64_t v30 = v93;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v26 + 16))((char *)&v74 - v28, v93, v25, v27);
  uint64_t v78 = a1;
  uint64_t v89 = v30 + *(int *)(a1 + 60);
  (*(void (**)(char *))(v22 + 16))(v24);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  swift_getAssociatedConformanceWitness();
  uint64_t v31 = v92;
  uint64_t v87 = v21;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v32 = v98;
  uint64_t v33 = &v98[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v34 = (void (*)(char *, char *, uint64_t))v94[2];
  uint64_t v86 = v19;
  int v35 = v19;
  uint64_t v36 = v97;
  v34(v98, v35, v97);
  int64_t v85 = v33;
  uint64_t v37 = v36;
  uint64_t v38 = v89;
  v34(v33, v31, v37);
  int v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v95 + 48);
  int v40 = v32;
  uint64_t v41 = v90;
  int v42 = v39(v40, 1, v96);
  uint64_t v43 = v93;
  if (v42 == 1)
  {
LABEL_4:
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 40))(v43, v29, v25);
    (*(void (**)(uint64_t, char *, uint64_t))(v41 + 40))(v38, v24, v87);
    int v48 = v94;
    int v49 = (void (*)(char *, char *, uint64_t))v94[4];
    uint64_t v50 = v83;
    uint64_t v51 = v97;
    v49(v83, v86, v97);
    uint64_t v52 = v82;
    v49(v82, v92, v51);
    uint64_t v53 = v96;
    if (v39(v50, 1, v96) == 1)
    {
      v49(v88, v52, v51);
      ((void (*)(char *, uint64_t))v48[1])(v50, v51);
    }
    else
    {
      ((void (*)(char *, uint64_t))v48[1])(v52, v51);
      uint64_t v54 = v95;
      int v55 = v88;
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v88, v50, v53);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v55, 0, 1, v53);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v98, TupleTypeMetadata2);
  }
  char v77 = v29;
  uint64_t v74 = v26;
  uint64_t v75 = v25;
  uint64_t v76 = v24;
  uint64_t v44 = v93;
  int v45 = v81;
  v34(v81, v98, v97);
  int v46 = v85;
  uint64_t v47 = v96;
  if (v39(v85, 1, v96) == 1)
  {
    (*(void (**)(char *, uint64_t))(v95 + 8))(v45, v47);
    uint64_t v43 = v44;
    uint64_t v38 = v89;
    uint64_t v41 = v90;
    uint64_t v24 = v76;
    uint64_t v25 = v75;
    uint64_t v26 = v74;
    char v29 = v77;
    goto LABEL_4;
  }
  uint64_t v57 = v95;
  uint64_t v59 = v95 + 32;
  uint64_t v58 = *(char **)(v95 + 32);
  int v60 = v80;
  ((void (*)(char *, char *, uint64_t))v58)(v80, v45, v47);
  int v61 = v79;
  ((void (*)(char *, char *, uint64_t))v58)(v79, v46, v47);
  if (dispatch thunk of static Comparable.< infix(_:_:)())
  {
    (*(void (**)(char *, uint64_t))(v57 + 8))(v60, v47);
    uint64_t v62 = v57;
    int v63 = (void (*)(char *, uint64_t))v94[1];
    uint64_t v64 = v97;
    v63(v92, v97);
    v63(v86, v64);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v77, v75);
    (*(void (**)(uint64_t, char *, uint64_t))(v90 + 40))(v89, v76, v87);
    int v65 = v88;
    ((void (*)(char *, char *, uint64_t))v58)(v88, v61, v47);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v65, 0, 1, v47);
    return ((uint64_t (*)(char *, uint64_t))v63)(v98, v64);
  }
  else
  {
    int64_t v85 = v58;
    TupleTypeMetadata2 = v59;
    uint64_t v66 = v74;
    uint64_t v67 = v44;
    uint64_t v68 = v75;
    (*(void (**)(uint64_t, char *, uint64_t))(v74 + 24))(v67, v77, v75);
    char v69 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v61, v47);
    long long v70 = (void (*)(char *, uint64_t))v94[1];
    uint64_t v71 = v97;
    v70(v92, v97);
    v70(v86, v71);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v77, v68);
    if (v69) {
      (*(void (**)(uint64_t, char *, uint64_t))(v90 + 40))(v89, v76, v87);
    }
    else {
      (*(void (**)(char *, uint64_t))(v90 + 8))(v76, v87);
    }
    uint64_t v72 = v88;
    uint64_t v73 = v96;
    ((void (*)(char *, char *, uint64_t))v85)(v88, v80, v96);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v72, 0, 1, v73);
    return ((uint64_t (*)(char *, uint64_t))v70)(v98, v71);
  }
}

uint64_t ReducedSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v24 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v23 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = *(void *)(v8 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness - 8);
  uint64_t v11 = (char *)v22 - v10;
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  double v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v20 = (char *)v22 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v3, v12, v18);
  dispatch thunk of Sequence.makeIterator()();
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v7, v3 + *(int *)(a1 + 60), v5);
  dispatch thunk of Sequence.makeIterator()();
  return ReducedSequence.Iterator.init(s1:s2:)((uint64_t)v20, (uint64_t)v11, v24);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ReducedSequence<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  ReducedSequence.makeIterator()(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v4(v2, a1);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ReducedSequence<A, B>(uint64_t a1)
{
  uint64_t v3 = specialized Sequence._copyToContiguousArray()();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

uint64_t specialized Sequence._copyToContiguousArray()()
{
  return MEMORY[0x270F9FA28]();
}

uint64_t type metadata accessor for ReducedSequence.Iterator()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ReducedSequence()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for ReducedSequence.Iterator()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReducedSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v11 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || ((v6 + v9) & (unint64_t)~v9) + *(void *)(*(void *)(v7 - 8) + 64) > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  else
  {
    uint64_t v15 = v7;
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)a1 + v10) & v16, ((unint64_t)a2 + v10) & v16, v15);
  }
  return a1;
}

uint64_t destroy for ReducedSequence.Iterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v3)(a1, AssociatedTypeWitness);
  uint64_t v4 = *(void *)(v3 + 56) + a1;
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
  uint64_t v8 = v5;
  unint64_t v9 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v9, v8);
}

uint64_t initializeWithCopy for ReducedSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t assignWithCopy for ReducedSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t initializeWithTake for ReducedSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t assignWithTake for ReducedSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReducedSequence.Iterator(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v6) {
    unsigned int v10 = v6;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(v5 + 64) + v11;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v12 & ~v11) + *(void *)(*(void *)(v7 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((a2 - v10 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v9)
        {
          uint64_t v22 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
          return v22(a1, v6, AssociatedTypeWitness);
        }
        else
        {
          uint64_t v20 = *(uint64_t (**)(unint64_t))(v8 + 48);
          return v20(((unint64_t)a1 + v12) & ~v11);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for ReducedSequence.Iterator(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= v8) {
    unsigned int v12 = v8;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = *(void *)(v7 + 64) + v13;
  size_t v15 = (v14 & ~v13) + *(void *)(v9 + 64);
  if (a3 <= v12)
  {
    int v16 = 0;
  }
  else if (v15 <= 3)
  {
    unsigned int v19 = ((a3 - v12 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
    if (HIWORD(v19))
    {
      int v16 = 4;
    }
    else if (v19 >= 0x100)
    {
      int v16 = 2;
    }
    else
    {
      int v16 = v19 > 1;
    }
  }
  else
  {
    int v16 = 1;
  }
  if (v12 < a2)
  {
    unsigned int v17 = ~v12 + a2;
    if (v15 < 4)
    {
      int v18 = (v17 >> (8 * v15)) + 1;
      if (v15)
      {
        int v20 = v17 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v20;
          a1[2] = BYTE2(v20);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v20;
        }
        else
        {
          *a1 = v20;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v16)
    {
      case 1:
        a1[v15] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v15] = v18;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v15] = v18;
        return;
      default:
        return;
    }
  }
  switch(v16)
  {
    case 1:
      a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245C9E56CLL);
    case 4:
      *(_DWORD *)&a1[v15] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v8 >= v11)
        {
          uint64_t v22 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
          v22(a1, a2, v8, AssociatedTypeWitness);
        }
        else
        {
          uint64_t v21 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
          v21((unint64_t)&a1[v14] & ~v13, a2);
        }
      }
      return;
  }
}

uint64_t type metadata completion function for ReducedSequence()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ReducedTimelineSchedule(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for ReducedTimelineSchedule(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245C9EB28);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

unint64_t NSAttributedString.updateSchedule.getter@<X0>(void *a1@<X8>)
{
  if ((uint64_t)objc_msgSend(v1, sel_length) < 1)
  {
    type metadata accessor for ExplicitTimelineSchedule<[Date]>();
    a1[3] = v4;
    unint64_t result = lazy protocol witness table accessor for type ExplicitTimelineSchedule<[Date]> and conformance ExplicitTimelineSchedule<A>();
    a1[4] = result;
    *a1 = MEMORY[0x263F8EE78];
    return result;
  }
  if (one-time initialization token for updateSchedule != -1) {
    swift_once();
  }
  uint64_t v3 = static NSAttributedStringKey.updateSchedule;
  objc_msgSend(v1, sel_length);
  if (objc_msgSend(v1, sel_attribute_atIndex_effectiveRange_, v3, 0, 0))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  _sypSgWObTm_2((uint64_t)v7, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Any?);
  if (v9)
  {
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
    if (swift_dynamicCast())
    {
      if (*((void *)&v11 + 1)) {
        return outlined init with take of ScrollStateRequest(&v10, (uint64_t)a1);
      }
    }
    else
    {
      uint64_t v12 = 0;
      long long v10 = 0u;
      long long v11 = 0u;
    }
  }
  else
  {
    _sypSgWOhTm_4((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Any?);
    long long v10 = 0u;
    long long v11 = 0u;
    uint64_t v12 = 0;
  }
  type metadata accessor for ExplicitTimelineSchedule<[Date]>();
  a1[3] = v6;
  a1[4] = lazy protocol witness table accessor for type ExplicitTimelineSchedule<[Date]> and conformance ExplicitTimelineSchedule<A>();
  *a1 = MEMORY[0x263F8EE78];
  return _s7SwiftUI16TimelineSchedule_pSgWOhTm_0((uint64_t)&v10, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule?, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule, (uint64_t)&protocol descriptor for TimelineSchedule, (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
}

void type metadata accessor for ExplicitTimelineSchedule<[Date]>()
{
  if (!lazy cache variable for type metadata for ExplicitTimelineSchedule<[Date]>)
  {
    type metadata accessor for [Date](255, &lazy cache variable for type metadata for [Date], MEMORY[0x263F07490], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [Date] and conformance [A]();
    unint64_t v0 = type metadata accessor for ExplicitTimelineSchedule();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ExplicitTimelineSchedule<[Date]>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [Date] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Date] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Date] and conformance [A])
  {
    type metadata accessor for [Date](255, &lazy cache variable for type metadata for [Date], MEMORY[0x263F07490], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Date] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExplicitTimelineSchedule<[Date]> and conformance ExplicitTimelineSchedule<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ExplicitTimelineSchedule<[Date]> and conformance ExplicitTimelineSchedule<A>;
  if (!lazy protocol witness table cache variable for type ExplicitTimelineSchedule<[Date]> and conformance ExplicitTimelineSchedule<A>)
  {
    type metadata accessor for ExplicitTimelineSchedule<[Date]>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExplicitTimelineSchedule<[Date]> and conformance ExplicitTimelineSchedule<A>);
  }
  return result;
}

uint64_t sub_245C9EEC4()
{
  return swift_deallocObject();
}

uint64_t sub_245C9EEFC()
{
  return swift_deallocObject();
}

uint64_t outlined assign with take of TimelineSchedule?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyTrackedValue?(0, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t AnyShapeStyleBox.deinit()
{
  return v0;
}

uint64_t AnyShapeStyleBox.isEqual(to:)()
{
  return 0;
}

uint64_t AnyShapeStyle.Storage.box.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*AnyShapeStyle.Storage.box.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static AnyShapeStyle.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a2) & 1;
  }
}

uint64_t (*AnyShapeStyle.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AnyShapeStyle._apply(to:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 80))();
}

unsigned char *static AnyShapeStyle._apply(to:)(unsigned char *result)
{
  *uint64_t result = 1;
  return result;
}

uint64_t AnyShapeStyle.as<A>(type:)@<X0>(ValueMetadata *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (a1 == &type metadata for Color)
  {
    type metadata accessor for AnyColorBox();
    uint64_t result = swift_dynamicCastClass();
    if (result)
    {
      uint64_t v13 = result;
      uint64_t v7 = qword_26FA7CB78;
      if (*(void *)(qword_26FA7CB78 + 64) == 8)
      {
        uint64_t v8 = &type metadata for Color;
        (*(void (**)(uint64_t, uint64_t *, ValueMetadata *))(qword_26FA7CB78 + 16))(a3, &v13, &type metadata for Color);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, ValueMetadata *))(v7 + 56))(a3, 0, 1, v8);
      }
      __break(1u);
      goto LABEL_15;
    }
  }
  else if (a1 == &type metadata for AnyGradient)
  {
    type metadata accessor for AnyGradientBox();
    uint64_t result = swift_dynamicCastClass();
    if (result)
    {
      uint64_t v13 = result;
      uint64_t v7 = qword_26FA410C0;
      if (*(void *)(qword_26FA410C0 + 64) == 8)
      {
        uint64_t v8 = &type metadata for AnyGradient;
        (*(void (**)(uint64_t, uint64_t *, ValueMetadata *))(qword_26FA410C0 + 16))(a3, &v13, &type metadata for AnyGradient);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, ValueMetadata *))(v7 + 56))(a3, 0, 1, v8);
      }
LABEL_15:
      __break(1u);
      return result;
    }
  }
  type metadata accessor for ShapeStyleBox();
  uint64_t v9 = swift_dynamicCastClass();
  uint64_t v10 = v9;
  if (v9) {
    uint64_t v9 = swift_retain();
  }
  uint64_t v13 = v10;
  MEMORY[0x270FA5388](v9);
  void v12[2] = a1;
  v12[3] = a2;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in AnyShapeStyle.as<A>(type:), (uint64_t)v12, MEMORY[0x263F8E628], (uint64_t)a1, v11, a3);
  return swift_release();
}

uint64_t partial apply for closure #1 in AnyShapeStyle.as<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(v2 + 16) - 8) + 16))(a2, *(void *)a1 + *(void *)(**(void **)a1 + 120));
}

uint64_t AnyShapeStyleBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t method lookup function for AnyShapeStyleBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyShapeStyleBox);
}

uint64_t dispatch thunk of AnyShapeStyleBox.apply(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t Text.Effect.DisplayInfo.DrawOperation.resolve(_:fragment:displacement:in:)(uint64_t a1, unint64_t a2, uint64_t a3, double a4, double a5)
{
  CGFloat v9 = v6;
  uint64_t v332 = *MEMORY[0x263EF8340];
  uint64_t v14 = *(void *)a3;
  uint64_t v15 = *(void *)(a3 + 24);
  char v16 = *(unsigned char *)(a3 + 32);
  uint64_t v17 = *(void *)(a3 + 40);
  double v321 = *(double *)a3;
  long long v322 = *(_OWORD *)(a3 + 8);
  uint64_t v323 = v15;
  char v324 = v16;
  uint64_t v325 = v17;
  outlined init with take of Text.Effect.DisplayInfo.DrawOperation(*(uint64_t *)&v9, (uint64_t)v326);
  int v18 = _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOg((uint64_t)v326);
  __asm { FMOV            V0.2D, #1.0 }
  long long v243 = _Q0;
  switch(v18)
  {
    case 1:
      uint64_t v149 = _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOj0_((uint64_t)v326);
      unint64_t v150 = *(void *)(v149 + 80);
      uint64_t v301 = *(void *)(v149 + 64);
      uint64_t v305 = *(void *)(v149 + 72);
      CGFloat v151 = *(double *)(v149 + 88);
      double v152 = *(double *)(v149 + 96);
      double v153 = *(double *)(v149 + 104);
      CGFloat v277 = *(double *)(v149 + 112);
      CGFloat v280 = *(double *)(v149 + 120);
      CGFloat v286 = *(double *)(v149 + 128);
      uint64_t v289 = *(void *)(v149 + 136);
      double v154 = *(double *)(v149 + 152);
      double v292 = *(double *)(v149 + 144);
      char v298 = *(unsigned char *)(v149 + 160);
      uint64_t v155 = *(void *)(v149 + 164);
      uint64_t v156 = *(void *)(v149 + 172);
      uint64_t v157 = *(void *)(v149 + 184);
      unint64_t v158 = *(void *)(v149 + 192);
      unint64_t v159 = *(void *)(v149 + 200);
      int v160 = *(unsigned char *)(v149 + 180) & 1;
      double v161 = *(double *)(v14 + 72);
      char v274 = *(unsigned char *)(v149 + 208);
      swift_retain();
      outlined retain of Text.Effect.DisplayInfo.DrawOperation(*(uint64_t *)&v9, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.DisplayInfo.DrawOperation);
      if (v154 * v161 != v161)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Text.Effect.DrawingContext.Storage();
          unint64_t v271 = v150;
          *(double *)&uint64_t v162 = COERCE_DOUBLE(swift_allocObject());
          *(_OWORD *)(v162 + 104) = 0u;
          *(_OWORD *)(v162 + 120) = 0u;
          *(_OWORD *)(v162 + 136) = 0u;
          *(_OWORD *)(v162 + 152) = v243;
          *(void *)(v162 + 168) = 0x3FF0000000000000;
          *(unsigned char *)(v162 + 176) = 0;
          unint64_t v263 = v158;
          *(void *)(v162 + 16) = *(void *)(v14 + 16);
          long long v163 = *(_OWORD *)(v14 + 40);
          long long v164 = *(_OWORD *)(v14 + 56);
          *(_OWORD *)(v162 + 24) = *(_OWORD *)(v14 + 24);
          *(_OWORD *)(v162 + 40) = v163;
          *(_OWORD *)(v162 + 56) = v164;
          *(void *)(v162 + 72) = *(void *)(v14 + 72);
          double v308 = v9;
          uint64_t v165 = *(void *)(v14 + 184);
          uint64_t v166 = *(void *)(v14 + 192);
          unint64_t v265 = v159;
          uint64_t v268 = v157;
          uint64_t v168 = *(void *)(v14 + 200);
          uint64_t v167 = *(void *)(v14 + 208);
          uint64_t v169 = *(void *)(v14 + 216);
          *(void *)(v162 + 184) = v165;
          *(void *)(v162 + 192) = v166;
          *(void *)(v162 + 200) = v168;
          *(void *)(v162 + 208) = v167;
          *(void *)(v162 + 216) = v169;
          swift_retain();
          swift_retain();
          uint64_t v170 = v168;
          unint64_t v159 = v265;
          outlined copy of Text.Effect.StopCollector?(v165, v166, v170, v167);
          outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
          uint64_t v171 = *(void *)(v14 + 80);
          uint64_t v172 = *(void *)(v14 + 88);
          LOBYTE(v166) = *(unsigned char *)(v14 + 96);
          swift_release();
          *(void *)(v162 + 80) = v171;
          *(void *)(v162 + 88) = v172;
          uint64_t v157 = v268;
          unint64_t v158 = v263;
          *(unsigned char *)(v162 + 96) = v166;
          CGFloat v9 = v308;
          double v321 = *(double *)&v162;
          swift_release();
          uint64_t v14 = v162;
          unint64_t v150 = v271;
        }
        *(double *)(v14 + 72) = v154 * v161;
      }
      Text.Effect.DrawingContext.foregroundColor.setter(v155, v156, v160);
      if (!v160) {
        Text.Effect.DrawingContext.foregroundColor.setter(v155, v156, 0);
      }
      if (v274)
      {
        t1.CGFloat a = v151;
        t1.CGFloat b = v152 + a4;
        t1.CGFloat c = v153 + a5;
        t1.CGFloat d = v277;
        t1.CGFloat tx = v280;
        t1.CGFloat ty = v286;
        uint64_t v311 = v289;
        CGFloat v312 = v292;
        double v313 = v154;
        LOBYTE(v314) = v298;
        unint64_t v205 = a1 - v301;
        if (!__OFSUB__(a1, v301))
        {
          if ((v205 & 0x8000000000000000) == 0)
          {
            if (v205 < *(void *)(v305 + 16))
            {
              uint64_t v206 = v305 + 56 * v205;
              long long v207 = *(_OWORD *)(v206 + 32);
              long long v208 = *(_OWORD *)(v206 + 48);
              long long v209 = *(_OWORD *)(v206 + 64);
              uint64_t v328 = *(void *)(v206 + 80);
              *(_OWORD *)&t2.CGFloat c = v208;
              *(_OWORD *)&t2.CGFloat tx = v209;
              *(_OWORD *)&t2.CGFloat a = v207;
              outlined retain of Text.Effect.PathInterpolator.Cluster((uint64_t)&t2);
              Text.Effect.PathInterpolator.Cluster.resolve(cluster:state:mapKeys:in:)(a1, &t1.a, v150, (uint64_t)&v321);
              outlined release of Text.Effect.PathInterpolator.Cluster((uint64_t)&t2);
              uint64_t v183 = *(void *)&v9;
              goto LABEL_82;
            }
            goto LABEL_110;
          }
          goto LABEL_108;
        }
        goto LABEL_106;
      }
      t2.CGFloat a = v151;
      t2.CGFloat b = v152 + a4;
      t2.CGFloat c = v153 + a5;
      t2.CGFloat d = v277;
      t2.CGFloat tx = v280;
      t2.CGFloat ty = v286;
      uint64_t v328 = v289;
      double v329 = v292;
      double v330 = v154;
      char v331 = v298;
      unint64_t v173 = v157 - v301;
      if (!__OFSUB__(v157, v301))
      {
        if ((v173 & 0x8000000000000000) == 0)
        {
          if (v173 < *(void *)(v305 + 16))
          {
            if ((v158 & 0x8000000000000000) == 0)
            {
              unint64_t v266 = v159;
              uint64_t v269 = v157;
              unint64_t v272 = v150;
              uint64_t v309 = *(void *)&v9;
              uint64_t v174 = *(void *)(v305 + 56 * v173 + 56);
              if (v158 < *(void *)(v174 + 16))
              {
                uint64_t v175 = v174 + 120 * v158;
                CGFloat v281 = *(double *)(v175 + 56);
                CGFloat v275 = *(double *)(v175 + 40);
                CGFloat v278 = *(double *)(v175 + 72);
                CGFloat v293 = *(double *)(v175 + 64);
                uint64_t v299 = *(void *)(v175 + 80);
                uint64_t v302 = *(uint64_t *)(v175 + 88);
                uint64_t v176 = *(uint64_t *)(v175 + 96);
                uint64_t v177 = *(void *)(v175 + 104);
                uint64_t v178 = *(void *)(v175 + 112);
                uint64_t v179 = *(void *)(v175 + 120);
                CGFloat v261 = *(double *)(v175 + 48);
                uint64_t v180 = *(void *)(v175 + 128);
                uint64_t v181 = *(void *)(v175 + 136);
                char v182 = *(unsigned char *)(v175 + 144);
                t1.CGFloat a = *(CGFloat *)(v175 + 32);
                t1.CGFloat b = v275;
                t1.CGFloat c = v261;
                t1.CGFloat d = v281;
                t1.CGFloat tx = v293;
                t1.CGFloat ty = v278;
                uint64_t v311 = v299;
                CGFloat v312 = *(double *)&v302;
                double v313 = *(double *)&v176;
                uint64_t v314 = v177;
                uint64_t v315 = v178;
                uint64_t v316 = v179;
                uint64_t v317 = v180;
                uint64_t v318 = v181;
                char v319 = v182;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Text.Effect.PathInterpolator.Glyph(*(id *)&t1.a, *(uint64_t *)&v275, *(uint64_t *)&v261, *(uint64_t *)&v281, *(uint64_t *)&v293, *(uint64_t *)&v278, v299, v302, v176, v177, v178, v179, v180, v181, v182);
                Text.Effect.PathInterpolator.Glyph.resolve(keyPath:state:mapKeys:in:)(v269, v158, v266, &t2.a, v272, (uint64_t)&v321);
                outlined consume of Text.Effect.PathInterpolator.Glyph(*(void **)&t1.a, *(uint64_t *)&v275, *(uint64_t *)&v261, *(uint64_t *)&v281, *(uint64_t *)&v293, *(uint64_t *)&v278, v299, v302, v176, v177, v178, v179, v180, v181, v182);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v183 = v309;
LABEL_82:
                outlined retain of Text.Effect.DisplayInfo.DrawOperation(v183, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.DisplayInfo.DrawOperation);
                return swift_release();
              }
LABEL_112:
              __break(1u);
            }
LABEL_111:
            __break(1u);
            goto LABEL_112;
          }
          goto LABEL_109;
        }
        goto LABEL_107;
      }
      goto LABEL_105;
    case 2:
      return _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOj0_((uint64_t)v326);
    case 3:
      uint64_t v185 = _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOj0_((uint64_t)v326);
      CGFloat v294 = *(double *)v185;
      CGFloat v300 = *(double *)(v185 + 8);
      CGFloat v303 = *(double *)(v185 + 16);
      CGFloat v306 = *(double *)(v185 + 24);
      uint64_t v186 = *(void *)(v185 + 32);
      double v187 = *(double *)(v185 + 64);
      double v188 = *(double *)(v185 + 72);
      double v190 = *(double *)(v185 + 80);
      CGFloat v189 = *(double *)(v185 + 88);
      CGFloat v191 = *(double *)(v185 + 48) + a4;
      CGFloat v192 = *(double *)(v185 + 56) + a5;
      CGFloat v193 = *(double *)(v185 + 96);
      uint64_t v194 = *(void *)(v185 + 104);
      type metadata accessor for ColorBox<Color.OpacityColor>();
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = v186;
      *(void *)(v5 + 24) = v194;
      CGAffineTransformMakeTranslation(&t1, v188, v190);
      CGAffineTransformScale(&t2, &t1, v189, v193);
      long long v287 = *(_OWORD *)&t2.c;
      long long v290 = *(_OWORD *)&t2.a;
      CGFloat tx = t2.tx;
      CGFloat ty = t2.ty;
      outlined retain of Text.Effect.DisplayInfo.DrawOperation(*(uint64_t *)&v9, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.DisplayInfo.DrawOperation);
      swift_retain();
      outlined retain of Text.Effect.DisplayInfo.DrawOperation(*(uint64_t *)&v9, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.DisplayInfo.DrawOperation);
      __double2 v197 = __sincos_stret(v187);
      t1.CGFloat a = v197.__cosval;
      t1.CGFloat b = v197.__sinval;
      t1.CGFloat c = -v197.__sinval;
      t1.CGFloat d = v197.__cosval;
      t1.CGFloat tx = 0.0;
      t1.CGFloat ty = 0.0;
      *(_OWORD *)&t2.CGFloat a = v290;
      *(_OWORD *)&t2.CGFloat c = v287;
      t2.CGFloat tx = tx;
      t2.CGFloat ty = ty;
      CGAffineTransformConcat(&v320, &t1, &t2);
      CGAffineTransform t1 = v320;
      CGAffineTransformTranslate(&t2, &t1, -v188, -v190);
      CGAffineTransform t1 = t2;
      CGAffineTransformTranslate(&t2, &t1, v191, v192);
      CGFloat a = t2.a;
      CGFloat b = t2.b;
      CGFloat c = t2.c;
      CGFloat d = t2.d;
      CGFloat v202 = t2.tx;
      CGFloat v203 = t2.ty;
      CGAffineTransform t1 = t2;
      if (!CGAffineTransformIsIdentity(&t1))
      {
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          *(double *)&uint64_t v204 = v321;
        }
        else
        {
          type metadata accessor for Text.Effect.DrawingContext.Storage();
          *(double *)&uint64_t v204 = COERCE_DOUBLE(swift_allocObject());
          *(_OWORD *)(v204 + 104) = 0u;
          *(_OWORD *)(v204 + 120) = 0u;
          *(_OWORD *)(v204 + 136) = 0u;
          *(_OWORD *)(v204 + 152) = v243;
          *(void *)(v204 + 168) = 0x3FF0000000000000;
          *(unsigned char *)(v204 + 176) = 0;
          *(void *)(v204 + 16) = *(void *)(v14 + 16);
          long long v210 = *(_OWORD *)(v14 + 40);
          long long v211 = *(_OWORD *)(v14 + 56);
          *(_OWORD *)(v204 + 24) = *(_OWORD *)(v14 + 24);
          *(_OWORD *)(v204 + 40) = v210;
          *(_OWORD *)(v204 + 56) = v211;
          *(void *)(v204 + 72) = *(void *)(v14 + 72);
          double v212 = v9;
          uint64_t v213 = *(void *)(v14 + 184);
          uint64_t v214 = *(void *)(v14 + 192);
          uint64_t v215 = *(void *)(v14 + 200);
          uint64_t v216 = *(void *)(v14 + 208);
          uint64_t v217 = *(void *)(v14 + 216);
          *(void *)(v204 + 184) = v213;
          *(void *)(v204 + 192) = v214;
          *(void *)(v204 + 200) = v215;
          *(void *)(v204 + 208) = v216;
          *(void *)(v204 + 216) = v217;
          swift_retain();
          swift_retain();
          outlined copy of Text.Effect.StopCollector?(v213, v214, v215, v216);
          outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
          uint64_t v218 = *(void *)(v14 + 80);
          uint64_t v219 = *(void *)(v14 + 88);
          LOBYTE(v214) = *(unsigned char *)(v14 + 96);
          swift_release();
          *(void *)(v204 + 80) = v218;
          *(void *)(v204 + 88) = v219;
          *(unsigned char *)(v204 + 96) = v214;
          CGFloat v9 = v212;
          double v321 = *(double *)&v204;
          swift_release();
        }
        t1.CGFloat a = a;
        t1.CGFloat b = b;
        t1.CGFloat c = c;
        t1.CGFloat d = d;
        t1.CGFloat tx = v202;
        t1.CGFloat ty = v203;
        if (!CGAffineTransformIsIdentity(&t1))
        {
          long long v220 = *(_OWORD *)(v204 + 24);
          long long v221 = *(_OWORD *)(v204 + 40);
          t1.CGFloat a = a;
          t1.CGFloat b = b;
          t1.CGFloat c = c;
          t1.CGFloat d = d;
          t1.CGFloat tx = v202;
          t1.CGFloat ty = v203;
          *(_OWORD *)&t2.CGFloat a = v220;
          *(_OWORD *)&t2.CGFloat c = v221;
          *(_OWORD *)&t2.CGFloat tx = *(_OWORD *)(v204 + 56);
          CGAffineTransformConcat(&v320, &t1, &t2);
          long long v222 = *(_OWORD *)&v320.c;
          long long v223 = *(_OWORD *)&v320.tx;
          *(_OWORD *)(v204 + 24) = *(_OWORD *)&v320.a;
          *(_OWORD *)(v204 + 40) = v222;
          *(_OWORD *)(v204 + 56) = v223;
        }
      }
      CGFloat v307 = v9;
      v333.origin.double x = v294;
      v333.origin.double y = v300;
      v333.size.width = v303;
      v333.size.height = v306;
      if (CGRectIsNull(v333))
      {
        a2 = 0;
        CGFloat v9 = 0.0;
        CGFloat v7 = 0.0;
        CGFloat v8 = 0.0;
        LODWORD(a1) = 6;
      }
      else
      {
        LODWORD(a1) = 0;
        a2 = *(void *)&v294;
        CGFloat v9 = v300;
        CGFloat v7 = v303;
        CGFloat v8 = v306;
      }
      t1.CGFloat a = 0.0;
      t1.CGFloat b = 0.0;
      if (one-time initialization token for shared == -1) {
        goto LABEL_90;
      }
      goto LABEL_102;
    default:
      uint64_t v24 = _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOj0_((uint64_t)v326);
      double v25 = *(double *)(v24 + 8);
      double v26 = *(double *)(v24 + 16);
      double v254 = *(double *)(v24 + 32);
      double v252 = *(double *)(v24 + 24);
      double v253 = *(double *)(v24 + 40);
      CGFloat v250 = *(double *)(v24 + 56);
      CGFloat v251 = *(double *)(v24 + 48);
      uint64_t v248 = *(void *)(v24 + 84);
      uint64_t v249 = *(void *)(v24 + 76);
      char v247 = *(unsigned char *)(v24 + 92);
      double v27 = *(double *)(v14 + 72);
      double v28 = *(double *)(v24 + 64) * v27;
      swift_retain();
      if (v28 != v27)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Text.Effect.DrawingContext.Storage();
          *(double *)&uint64_t v29 = COERCE_DOUBLE(swift_allocObject());
          *(void *)(v29 + 80) = 0;
          *(void *)(v29 + 88) = 0;
          *(unsigned char *)(v29 + 96) = 1;
          *(_OWORD *)(v29 + 104) = 0u;
          *(_OWORD *)(v29 + 120) = 0u;
          *(_OWORD *)(v29 + 136) = 0u;
          *(_OWORD *)(v29 + 152) = v243;
          *(void *)(v29 + 168) = 0x3FF0000000000000;
          *(unsigned char *)(v29 + 176) = 0;
          *(void *)(v29 + 16) = *(void *)(v14 + 16);
          long long v30 = *(_OWORD *)(v14 + 40);
          long long v31 = *(_OWORD *)(v14 + 56);
          *(_OWORD *)(v29 + 24) = *(_OWORD *)(v14 + 24);
          *(_OWORD *)(v29 + 40) = v30;
          *(_OWORD *)(v29 + 56) = v31;
          *(void *)(v29 + 72) = *(void *)(v14 + 72);
          uint64_t v32 = *(void *)(v14 + 184);
          CGFloat v8 = *(double *)(v14 + 192);
          uint64_t v33 = *(void *)(v14 + 200);
          uint64_t v34 = *(void *)(v14 + 208);
          uint64_t v35 = *(void *)(v14 + 216);
          *(void *)(v29 + 184) = v32;
          *(CGFloat *)(v29 + 192) = v8;
          *(void *)(v29 + 200) = v33;
          *(void *)(v29 + 208) = v34;
          *(void *)(v29 + 216) = v35;
          swift_retain();
          swift_retain();
          outlined copy of Text.Effect.StopCollector?(v32, *(uint64_t *)&v8, v33, v34);
          outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
          uint64_t v5 = *(void *)(v14 + 80);
          CGFloat v9 = *(double *)(v14 + 88);
          *(void *)&CGFloat v7 = *(unsigned __int8 *)(v14 + 96);
          swift_release();
          *(void *)(v29 + 80) = v5;
          *(CGFloat *)(v29 + 88) = v9;
          *(unsigned char *)(v29 + 96) = LOBYTE(v7);
          double v321 = *(double *)&v29;
          swift_release();
          uint64_t v14 = v29;
        }
        *(double *)(v14 + 72) = v28;
      }
      uint64_t v36 = *(void *)(a2 + 48);
      _VF = __OFSUB__(a1, v36);
      unint64_t v37 = a1 - v36;
      if (_VF) {
        goto LABEL_101;
      }
      if ((v37 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_104;
      }
      uint64_t v38 = *(void *)(*(void *)(a2 + 24) + 96);
      if (v37 >= *(void *)(v38 + 16))
      {
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
        goto LABEL_111;
      }
      uint64_t v39 = *(void *)(v38 + 24 * v37 + 48);
      uint64_t v241 = *(void *)(v39 + 16);
      if (v241)
      {
        double v245 = v26 + a5;
        double v246 = v25 + a4;
        uint64_t v240 = v39 + 32;
        uint64_t v242 = *(void *)(v38 + 24 * v37 + 48);
        swift_bridgeObjectRetain();
        a2 = 0;
        a1 = a3;
        while (a2 < *(void *)(v242 + 16))
        {
          uint64_t v41 = v240 + (a2 << 6);
          uint64_t v5 = *(void *)v41;
          CGFloat v42 = *(double *)(v41 + 8);
          CGFloat v43 = *(double *)(v41 + 16);
          CGFloat v44 = *(double *)(v41 + 24);
          uint64_t v45 = *(unsigned int *)(v41 + 32);
          CGFloat v9 = *(double *)(v41 + 40);
          uint64_t v273 = *(uint64_t *)(v41 + 48);
          double v46 = *(double *)(v41 + 56);
          swift_retain_n();
          CGFloat v7 = COERCE_DOUBLE((id)v5);
          uint64_t v47 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)&v7, *(CFIndex *)&v42);
          int v48 = (const __CTFont *)(id)CTRunGetFont();
          swift_release();

          double Size = CTFontGetSize(v48);
          swift_release_n();

          t1.CGFloat a = v7;
          t1.CGFloat b = v42;
          CGFloat v267 = v42;
          CGFloat v8 = v46;
          uint64_t v50 = v273;
          CGFloat v262 = v44;
          CGFloat v264 = v43;
          t1.CGFloat c = v43;
          t1.CGFloat d = v44;
          uint64_t v260 = v45;
          LODWORD(t1.tx) = v45;
          t1.CGFloat ty = v9;
          uint64_t v311 = v273;
          CGFloat v312 = v8;
          v276 = Text.Layout.RunSlice.positions.getter();
          if (*(void *)&v276[1].x && v273 != *(void *)&v8)
          {
            float64x2_t v295 = (float64x2_t)v276[2];
            uint64_t v5 = __OFADD__(v273, 1);
            CGFloat v307 = COERCE_DOUBLE(*(id *)&v7);
            swift_retain();
            if (v273 + 1 < v273)
            {
LABEL_96:
              __break(1u);
            }
            else
            {
              uint64_t v51 = 0;
              if (*(uint64_t *)&v8 <= v273) {
                CGFloat v52 = *(double *)&v273;
              }
              else {
                CGFloat v52 = v8;
              }
              uint64_t v255 = v273 - *(void *)&v8 + 1;
              unint64_t v258 = a2;
              uint64_t v259 = v273 - *(void *)&v52;
              double v244 = v8;
              double v304 = v9;
              double v257 = v7;
              while (1)
              {
                uint64_t v291 = v50 + v51 + 1;
                if (*(uint64_t *)&v8 < v291)
                {
                  t1.CGFloat a = 0.0;
                  t1.CGFloat b = -2.68156159e154;
                  *(void *)&CGFloat v237 = v50 + v51;
                  _StringGuts.grow(_:)(19);
                  swift_bridgeObjectRelease();
                  t1.CGFloat a = -2.31584178e77;
                  *(void *)&t1.CGFloat b = 0x800000024621E3B0;
                  v320.CGFloat a = v237;
                  t2.CGFloat a = 0.0;
                  t2.CGFloat b = -2.68156159e154;
                  _print_unlocked<A, B>(_:_:)();
                  v238._countAndFlagsBits = 3943982;
                  v238._object = (void *)0xE300000000000000;
                  String.append(_:)(v238);
                  _print_unlocked<A, B>(_:_:)();
                  v239._countAndFlagsBits = *(void *)&t2.a;
                  v239._object = *(void **)&t2.b;
                  String.append(_:)(v239);
                  swift_bridgeObjectRelease();
                  _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
                  JUMPOUT(0x245CA0C1CLL);
                }
                if (!(v259 + v51)) {
                  break;
                }
                if (v5) {
                  goto LABEL_98;
                }
                uint64_t v288 = v50 + v51;
                uint64_t v279 = v51;
                CGFloat v8 = v321;
                if ((*(unsigned char *)(a1 + 32) & 1) != 0 || *(double *)(a1 + 8) != Size)
                {
                  CGAffineTransformMakeScale(&t1, Size * *(double *)(a1 + 40), -(Size * *(double *)(a1 + 40)));
                  long long v282 = *(_OWORD *)&t1.a;
                  long long v270 = *(_OWORD *)&t1.c;
                  CGFloat v54 = t1.tx;
                  CGFloat v55 = t1.ty;
                  id v56 = *(id *)&v307;
                  swift_retain();
                  swift_retain();
                  *(_OWORD *)&t1.CGFloat a = v282;
                  *(_OWORD *)&t1.CGFloat c = v270;
                  t1.CGFloat tx = v54;
                  t1.CGFloat ty = v55;
                  RBShapeGetFontQuantizationLevel();
                  *(double *)(a1 + 8) = Size;
                  *(void *)(a1 + 16) = v57;
                  *(void *)(a1 + 24) = v58;
                  *(unsigned char *)(a1 + 32) = 0;
                }
                else
                {
                  id v53 = *(id *)&v307;
                  swift_retain();
                  swift_retain();
                }
                double v283 = *(double *)(a1 + 40);
                t1.CGFloat b = 0.0;
                t1.CGFloat c = 0.0;
                t1.CGFloat a = v283;
                t1.CGFloat d = -v283;
                *(float64x2_t *)&t1.CGFloat tx = vmulq_n_f64(v295, v283);
                RBShapeGetPredictedFontQuantizationError();
                double v60 = v59 / v283;
                double v62 = v61 / v283;
                if (v59 / v283 != 0.0 || v62 != 0.0)
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  {
                    type metadata accessor for Text.Effect.DrawingContext.Storage();
                    *(double *)&uint64_t v63 = COERCE_DOUBLE(swift_allocObject());
                    *(void *)(v63 + 24) = 0x3FF0000000000000;
                    *(void *)(v63 + 32) = 0;
                    *(void *)(v63 + 40) = 0;
                    *(void *)(v63 + 48) = 0x3FF0000000000000;
                    *(void *)(v63 + 56) = 0;
                    *(void *)(v63 + 64) = 0;
                    *(void *)(v63 + 80) = 0;
                    *(void *)(v63 + 88) = 0;
                    *(void *)(v63 + 72) = 0x3FF0000000000000;
                    *(unsigned char *)(v63 + 96) = 1;
                    *(_OWORD *)(v63 + 104) = 0u;
                    *(_OWORD *)(v63 + 120) = 0u;
                    *(_OWORD *)(v63 + 136) = 0u;
                    *(_OWORD *)(v63 + 152) = v243;
                    *(void *)(v63 + 168) = 0x3FF0000000000000;
                    *(unsigned char *)(v63 + 176) = 0;
                    *(_OWORD *)(v63 + 184) = 0u;
                    *(_OWORD *)(v63 + 200) = 0u;
                    *(void *)(v63 + 216) = 0;
                    *(void *)(v63 + 16) = *(void *)(*(void *)&v8 + 16);
                    long long v64 = *(_OWORD *)(*(void *)&v8 + 40);
                    long long v65 = *(_OWORD *)(*(void *)&v8 + 56);
                    *(_OWORD *)(v63 + 24) = *(_OWORD *)(*(void *)&v8 + 24);
                    *(_OWORD *)(v63 + 40) = v64;
                    *(_OWORD *)(v63 + 56) = v65;
                    *(void *)(v63 + 72) = *(void *)(*(void *)&v8 + 72);
                    uint64_t v66 = *(void *)(*(void *)&v8 + 184);
                    uint64_t v67 = *(void *)(*(void *)&v8 + 192);
                    uint64_t v69 = *(void *)(*(void *)&v8 + 200);
                    uint64_t v68 = *(void *)(*(void *)&v8 + 208);
                    uint64_t v70 = *(void *)(*(void *)&v8 + 216);
                    *(void *)(v63 + 184) = v66;
                    *(void *)(v63 + 192) = v67;
                    *(void *)(v63 + 200) = v69;
                    *(void *)(v63 + 208) = v68;
                    *(void *)(v63 + 216) = v70;
                    swift_retain();
                    swift_retain();
                    outlined copy of Text.Effect.StopCollector?(v66, v67, v69, v68);
                    outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
                    uint64_t v71 = *(void *)(*(void *)&v8 + 80);
                    uint64_t v72 = *(void *)(*(void *)&v8 + 88);
                    LOBYTE(v66) = *(unsigned char *)(*(void *)&v8 + 96);
                    swift_release();
                    *(void *)(v63 + 80) = v71;
                    *(void *)(v63 + 88) = v72;
                    *(unsigned char *)(v63 + 96) = v66;
                    swift_release();
                    CGFloat v8 = *(double *)&v63;
                  }
                  long long v73 = *(_OWORD *)(*(void *)&v8 + 40);
                  *(_OWORD *)&t1.CGFloat a = *(_OWORD *)(*(void *)&v8 + 24);
                  *(_OWORD *)&t1.CGFloat c = v73;
                  *(_OWORD *)&t1.CGFloat tx = *(_OWORD *)(*(void *)&v8 + 56);
                  CGAffineTransformTranslate(&t2, &t1, v60, v62);
                  long long v74 = *(_OWORD *)&t2.c;
                  long long v75 = *(_OWORD *)&t2.tx;
                  *(_OWORD *)(*(void *)&v8 + 24) = *(_OWORD *)&t2.a;
                  *(_OWORD *)(*(void *)&v8 + 40) = v74;
                  *(_OWORD *)(*(void *)&v8 + 56) = v75;
                }
                CGFloat v76 = *(double *)(*(void *)a1 + 112);
                CGFloat v77 = *(double *)(*(void *)a1 + 120);
                double v78 = *(double *)(*(void *)a1 + 128);
                double v79 = *(double *)(*(void *)a1 + 136);
                double v80 = *(double *)(*(void *)a1 + 144);
                CGFloat v81 = *(double *)(*(void *)a1 + 152);
                CGFloat v82 = *(double *)(*(void *)a1 + 160);
                CGAffineTransformMakeTranslation(&t1, v79, v80);
                CGAffineTransformScale(&t2, &t1, v81, v82);
                long long v296 = *(_OWORD *)&t2.a;
                long long v284 = *(_OWORD *)&t2.c;
                CGFloat v83 = t2.tx;
                CGFloat v84 = t2.ty;
                __double2 v85 = __sincos_stret(v78);
                t1.CGFloat a = v85.__cosval;
                t1.CGFloat b = v85.__sinval;
                t1.CGFloat c = -v85.__sinval;
                t1.CGFloat d = v85.__cosval;
                t1.CGFloat tx = 0.0;
                t1.CGFloat ty = 0.0;
                *(_OWORD *)&t2.CGFloat a = v296;
                *(_OWORD *)&t2.CGFloat c = v284;
                t2.CGFloat tx = v83;
                t2.CGFloat ty = v84;
                CGAffineTransformConcat(&v320, &t1, &t2);
                CGAffineTransform t1 = v320;
                CGAffineTransformTranslate(&t2, &t1, -v79, -v80);
                CGAffineTransform t1 = t2;
                CGAffineTransformTranslate(&t2, &t1, v76, v77);
                CGFloat v86 = t2.a;
                CGFloat v87 = t2.b;
                CGFloat v88 = t2.c;
                CGFloat v89 = t2.d;
                CGFloat v90 = t2.tx;
                CGFloat v91 = t2.ty;
                CGAffineTransform t1 = t2;
                if (!CGAffineTransformIsIdentity(&t1))
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  {
                    type metadata accessor for Text.Effect.DrawingContext.Storage();
                    *(double *)&uint64_t v92 = COERCE_DOUBLE(swift_allocObject());
                    *(void *)(v92 + 24) = 0x3FF0000000000000;
                    *(void *)(v92 + 32) = 0;
                    *(void *)(v92 + 40) = 0;
                    *(void *)(v92 + 48) = 0x3FF0000000000000;
                    *(void *)(v92 + 56) = 0;
                    *(void *)(v92 + 64) = 0;
                    *(void *)(v92 + 80) = 0;
                    *(void *)(v92 + 88) = 0;
                    *(void *)(v92 + 72) = 0x3FF0000000000000;
                    *(unsigned char *)(v92 + 96) = 1;
                    *(_OWORD *)(v92 + 104) = 0u;
                    *(_OWORD *)(v92 + 120) = 0u;
                    *(_OWORD *)(v92 + 136) = 0u;
                    *(_OWORD *)(v92 + 152) = v243;
                    *(void *)(v92 + 168) = 0x3FF0000000000000;
                    *(unsigned char *)(v92 + 176) = 0;
                    *(_OWORD *)(v92 + 184) = 0u;
                    *(_OWORD *)(v92 + 200) = 0u;
                    *(void *)(v92 + 216) = 0;
                    *(void *)(v92 + 16) = *(void *)(*(void *)&v8 + 16);
                    long long v93 = *(_OWORD *)(*(void *)&v8 + 40);
                    long long v94 = *(_OWORD *)(*(void *)&v8 + 56);
                    *(_OWORD *)(v92 + 24) = *(_OWORD *)(*(void *)&v8 + 24);
                    *(_OWORD *)(v92 + 40) = v93;
                    *(_OWORD *)(v92 + 56) = v94;
                    *(void *)(v92 + 72) = *(void *)(*(void *)&v8 + 72);
                    uint64_t v95 = *(void *)(*(void *)&v8 + 184);
                    uint64_t v96 = *(void *)(*(void *)&v8 + 192);
                    uint64_t v97 = *(void *)(*(void *)&v8 + 200);
                    uint64_t v98 = *(void *)(*(void *)&v8 + 208);
                    uint64_t v99 = *(void *)(*(void *)&v8 + 216);
                    *(void *)(v92 + 184) = v95;
                    *(void *)(v92 + 192) = v96;
                    *(void *)(v92 + 200) = v97;
                    *(void *)(v92 + 208) = v98;
                    *(void *)(v92 + 216) = v99;
                    swift_retain();
                    swift_retain();
                    outlined copy of Text.Effect.StopCollector?(v95, v96, v97, v98);
                    outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
                    uint64_t v100 = *(void *)(*(void *)&v8 + 80);
                    uint64_t v101 = *(void *)(*(void *)&v8 + 88);
                    LOBYTE(v95) = *(unsigned char *)(*(void *)&v8 + 96);
                    swift_release();
                    *(void *)(v92 + 80) = v100;
                    *(void *)(v92 + 88) = v101;
                    *(unsigned char *)(v92 + 96) = v95;
                    swift_release();
                    CGFloat v8 = *(double *)&v92;
                  }
                  t1.CGFloat a = v86;
                  t1.CGFloat b = v87;
                  t1.CGFloat c = v88;
                  t1.CGFloat d = v89;
                  t1.CGFloat tx = v90;
                  t1.CGFloat ty = v91;
                  if (!CGAffineTransformIsIdentity(&t1))
                  {
                    long long v102 = *(_OWORD *)(*(void *)&v8 + 24);
                    long long v103 = *(_OWORD *)(*(void *)&v8 + 40);
                    t1.CGFloat a = v86;
                    t1.CGFloat b = v87;
                    t1.CGFloat c = v88;
                    t1.CGFloat d = v89;
                    t1.CGFloat tx = v90;
                    t1.CGFloat ty = v91;
                    *(_OWORD *)&t2.CGFloat a = v102;
                    *(_OWORD *)&t2.CGFloat c = v103;
                    *(_OWORD *)&t2.CGFloat tx = *(_OWORD *)(*(void *)&v8 + 56);
                    CGAffineTransformConcat(&v320, &t1, &t2);
                    long long v104 = *(_OWORD *)&v320.c;
                    long long v105 = *(_OWORD *)&v320.tx;
                    *(_OWORD *)(*(void *)&v8 + 24) = *(_OWORD *)&v320.a;
                    *(_OWORD *)(*(void *)&v8 + 40) = v104;
                    *(_OWORD *)(*(void *)&v8 + 56) = v105;
                  }
                }
                CGAffineTransformMakeTranslation(&t1, v254, v253);
                CGAffineTransformScale(&t2, &t1, v251, v250);
                long long v297 = *(_OWORD *)&t2.a;
                long long v285 = *(_OWORD *)&t2.c;
                CGFloat v106 = t2.tx;
                CGFloat v107 = t2.ty;
                __double2 v108 = __sincos_stret(v252);
                t1.CGFloat a = v108.__cosval;
                t1.CGFloat b = v108.__sinval;
                t1.CGFloat c = -v108.__sinval;
                t1.CGFloat d = v108.__cosval;
                t1.CGFloat tx = 0.0;
                t1.CGFloat ty = 0.0;
                *(_OWORD *)&t2.CGFloat a = v297;
                *(_OWORD *)&t2.CGFloat c = v285;
                t2.CGFloat tx = v106;
                t2.CGFloat ty = v107;
                CGAffineTransformConcat(&v320, &t1, &t2);
                CGAffineTransform t1 = v320;
                CGAffineTransformTranslate(&t2, &t1, -v254, -v253);
                CGAffineTransform t1 = t2;
                CGAffineTransformTranslate(&t2, &t1, v246, v245);
                CGFloat v109 = t2.a;
                CGFloat v110 = t2.b;
                CGFloat v111 = t2.c;
                CGFloat v112 = t2.d;
                CGFloat v113 = t2.tx;
                CGFloat v114 = t2.ty;
                CGAffineTransform t1 = t2;
                if (!CGAffineTransformIsIdentity(&t1))
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  {
                    type metadata accessor for Text.Effect.DrawingContext.Storage();
                    *(double *)&uint64_t v115 = COERCE_DOUBLE(swift_allocObject());
                    *(void *)(v115 + 24) = 0x3FF0000000000000;
                    *(void *)(v115 + 32) = 0;
                    *(void *)(v115 + 40) = 0;
                    *(void *)(v115 + 48) = 0x3FF0000000000000;
                    *(void *)(v115 + 56) = 0;
                    *(void *)(v115 + 64) = 0;
                    *(void *)(v115 + 80) = 0;
                    *(void *)(v115 + 88) = 0;
                    *(void *)(v115 + 72) = 0x3FF0000000000000;
                    *(unsigned char *)(v115 + 96) = 1;
                    *(_OWORD *)(v115 + 104) = 0u;
                    *(_OWORD *)(v115 + 120) = 0u;
                    *(_OWORD *)(v115 + 136) = 0u;
                    *(_OWORD *)(v115 + 152) = v243;
                    *(void *)(v115 + 168) = 0x3FF0000000000000;
                    *(unsigned char *)(v115 + 176) = 0;
                    *(_OWORD *)(v115 + 184) = 0u;
                    *(_OWORD *)(v115 + 200) = 0u;
                    *(void *)(v115 + 216) = 0;
                    *(void *)(v115 + 16) = *(void *)(*(void *)&v8 + 16);
                    long long v116 = *(_OWORD *)(*(void *)&v8 + 40);
                    long long v117 = *(_OWORD *)(*(void *)&v8 + 56);
                    *(_OWORD *)(v115 + 24) = *(_OWORD *)(*(void *)&v8 + 24);
                    *(_OWORD *)(v115 + 40) = v116;
                    *(_OWORD *)(v115 + 56) = v117;
                    *(void *)(v115 + 72) = *(void *)(*(void *)&v8 + 72);
                    uint64_t v118 = *(void *)(*(void *)&v8 + 184);
                    uint64_t v119 = *(void *)(*(void *)&v8 + 192);
                    uint64_t v120 = *(void *)(*(void *)&v8 + 200);
                    uint64_t v121 = *(void *)(*(void *)&v8 + 208);
                    uint64_t v122 = *(void *)(*(void *)&v8 + 216);
                    *(void *)(v115 + 184) = v118;
                    *(void *)(v115 + 192) = v119;
                    *(void *)(v115 + 200) = v120;
                    *(void *)(v115 + 208) = v121;
                    *(void *)(v115 + 216) = v122;
                    swift_retain();
                    swift_retain();
                    outlined copy of Text.Effect.StopCollector?(v118, v119, v120, v121);
                    outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
                    uint64_t v123 = *(void *)(*(void *)&v8 + 80);
                    uint64_t v124 = *(void *)(*(void *)&v8 + 88);
                    LOBYTE(v118) = *(unsigned char *)(*(void *)&v8 + 96);
                    swift_release();
                    *(void *)(v115 + 80) = v123;
                    *(void *)(v115 + 88) = v124;
                    *(unsigned char *)(v115 + 96) = v118;
                    swift_release();
                    CGFloat v8 = *(double *)&v115;
                  }
                  t1.CGFloat a = v109;
                  t1.CGFloat b = v110;
                  t1.CGFloat c = v111;
                  t1.CGFloat d = v112;
                  t1.CGFloat tx = v113;
                  t1.CGFloat ty = v114;
                  if (!CGAffineTransformIsIdentity(&t1))
                  {
                    long long v125 = *(_OWORD *)(*(void *)&v8 + 24);
                    long long v126 = *(_OWORD *)(*(void *)&v8 + 40);
                    t1.CGFloat a = v109;
                    t1.CGFloat b = v110;
                    t1.CGFloat c = v111;
                    t1.CGFloat d = v112;
                    t1.CGFloat tx = v113;
                    t1.CGFloat ty = v114;
                    *(_OWORD *)&t2.CGFloat a = v125;
                    *(_OWORD *)&t2.CGFloat c = v126;
                    *(_OWORD *)&t2.CGFloat tx = *(_OWORD *)(*(void *)&v8 + 56);
                    CGAffineTransformConcat(&v320, &t1, &t2);
                    long long v127 = *(_OWORD *)&v320.c;
                    long long v128 = *(_OWORD *)&v320.tx;
                    *(_OWORD *)(*(void *)&v8 + 24) = *(_OWORD *)&v320.a;
                    *(_OWORD *)(*(void *)&v8 + 40) = v127;
                    *(_OWORD *)(*(void *)&v8 + 56) = v128;
                  }
                }
                uint64_t v129 = v248;
                uint64_t v130 = v249;
                char v131 = v247;
                if ((*(unsigned char *)(*(void *)&v8 + 96) & 1) == 0)
                {
                  char v131 = 0;
                  uint64_t v130 = *(void *)(*(void *)&v8 + 80);
                  uint64_t v129 = *(void *)(*(void *)&v8 + 88);
                }
                uint64_t v132 = *(void *)(*(void *)&v8 + 24);
                uint64_t v133 = *(void *)(*(void *)&v8 + 32);
                uint64_t v134 = *(void *)(*(void *)&v8 + 40);
                uint64_t v135 = *(void *)(*(void *)&v8 + 48);
                uint64_t v136 = *(void *)(*(void *)&v8 + 56);
                uint64_t v137 = *(void *)(*(void *)&v8 + 64);
                uint64_t v138 = *(void *)(*(void *)&v8 + 72);
                v139 = (void **)(*(void *)(*(void *)&v8 + 16) + 16);
                swift_beginAccess();
                v140 = *v139;
                id v141 = *(id *)&v307;
                swift_retain();
                swift_retain();
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *v139 = v140;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  v140 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v140[2] + 1, 1, v140);
                  *v139 = v140;
                }
                unint64_t v144 = v140[2];
                unint64_t v143 = v140[3];
                if (v144 >= v143 >> 1)
                {
                  v140 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v143 > 1), v144 + 1, 1, v140);
                  *v139 = v140;
                }
                char v145 = v131 | 0x20;
                v140[2] = v144 + 1;
                v146 = &v140[18 * v144];
                CGFloat v9 = v304;
                *((CGFloat *)v146 + 4) = v307;
                *((CGFloat *)v146 + 5) = v267;
                *((CGFloat *)v146 + 6) = v264;
                *((CGFloat *)v146 + 7) = v262;
                v146[8] = v260;
                *((double *)v146 + 9) = v304;
                uint64_t v5 = v291;
                v146[10] = v288;
                v146[11] = v291;
                v146[12] = v130;
                v146[13] = v129;
                *((unsigned char *)v146 + 112) = v145;
                int v147 = *(_DWORD *)((char *)&t2.a + 3);
                *(_DWORD *)((char *)v146 + 113) = LODWORD(t2.a);
                *((_DWORD *)v146 + 29) = v147;
                v146[15] = v138;
                v146[16] = v132;
                v146[17] = v133;
                v146[18] = v134;
                v146[19] = v135;
                v146[20] = v136;
                v146[21] = v137;
                swift_endAccess();
                swift_release();

                swift_release();
                swift_release();
                unint64_t v148 = *(void *)&v276[1].x;
                a1 = a3;
                CGFloat v7 = v257;
                a2 = v258;
                if (v279 + 1 == v148) {
                  goto LABEL_12;
                }
                if (v279 + 1 >= v148) {
                  goto LABEL_99;
                }
                if (!(v255 + v279)) {
                  goto LABEL_12;
                }
                CGFloat v8 = v244;
                float64x2_t v295 = (float64x2_t)v276[v279 + 3];
                uint64_t v5 = __OFADD__(v291, 1);
                uint64_t v51 = v279 + 1;
                uint64_t v50 = v273;
                if (v291 + 1 < v273 + v279 + 1) {
                  goto LABEL_96;
                }
              }
            }
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
            break;
          }
          id v40 = *(id *)&v7;
          swift_retain();
LABEL_12:
          ++a2;
          swift_release_n();

          swift_bridgeObjectRelease();
          if (a2 == v241)
          {
            swift_bridgeObjectRelease();
            return swift_release();
          }
        }
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        swift_once();
LABEL_90:
        swift_beginAccess();
        v224 = *(void (**)(CGAffineTransform *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared)
                                                          + 0x68);
        v225 = static CoreGlue2.shared;
        v224(&t1);

        uint64_t v226 = *(void *)(v5 + 16);
        double v227 = *(double *)(v5 + 24);
        v320.CGFloat a = t1.a;
        v320.CGFloat b = t1.b;
        float v228 = (*(float (**)(CGAffineTransform *))(*(void *)v226 + 104))(&v320);
        int v230 = v229;
        int v232 = v231;
        float v234 = v233;
        swift_release();
        swift_release();
        if (*(unsigned char *)(*(void *)&v321 + 96))
        {
          float v235 = v227;
          float v236 = v234 * v235;
        }
        else
        {
          float v228 = *(float *)(*(void *)&v321 + 80);
          int v230 = *(_DWORD *)(*(void *)&v321 + 84);
          int v232 = *(_DWORD *)(*(void *)&v321 + 88);
          float v236 = *(float *)(*(void *)&v321 + 92);
        }
        *(void *)&t1.CGFloat a = a2;
        t1.CGFloat b = v9;
        t1.CGFloat c = v7;
        t1.CGFloat d = v8;
        LODWORD(t1.tx) = a1;
        *((float *)&t1.tx + 1) = v228;
        LODWORD(t1.ty) = v230;
        HIDWORD(t1.ty) = v232;
        uint64_t v311 = LODWORD(v236);
        CGFloat v312 = 0.0;
        uint64_t v314 = 0;
        double v313 = 0.0;
        LOBYTE(v315) = 64;
        outlined copy of Path.Storage(a2, *(uint64_t *)&v9, *(uint64_t *)&v7, *(uint64_t *)&v8, a1);
        Text.Effect.DrawingContext.Storage.append(_:)((uint64_t)&t1);
        outlined consume of Path.Storage(a2, *(uint64_t *)&v9, *(uint64_t *)&v7, *(uint64_t *)&v8, a1);
        outlined retain of Text.Effect.DisplayInfo.DrawOperation(*(uint64_t *)&v307, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.DisplayInfo.DrawOperation);
        outlined consume of Path.Storage(a2, *(uint64_t *)&v9, *(uint64_t *)&v7, *(uint64_t *)&v8, a1);
        swift_release();
        swift_setDeallocating();
        swift_deallocClassInstance();
      }
      return swift_release();
  }
}

uint64_t Text.Effect.DisplayInfo.prepare(in:)(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)result;
    Swift::UInt v48 = *(void *)v1;
    uint64_t v5 = v2 + 32;
    double v6 = *(double *)(v1 + 104);
    double v7 = *(double *)(v1 + 112);
    outlined retain of Text.Effect.DisplayInfo(v1);
    uint64_t v8 = 0;
    id v40 = v4;
    uint64_t v41 = v5;
    uint64_t v42 = v3;
    do
    {
      outlined init with take of Text.Effect.DisplayInfo.DrawOperation(v5 + 216 * v8++, (uint64_t)v51);
      outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v51, (uint64_t)v52);
      if (_s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOg((uint64_t)v52) == 2)
      {
        uint64_t v9 = _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOj0_((uint64_t)v52);
        uint64_t v10 = *(void *)(v9 + 64);
        BOOL v11 = __OFSUB__(v48, v10);
        Swift::UInt v12 = v48 - v10;
        if (v11)
        {
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          JUMPOUT(0x245CA1154);
        }
        if ((v12 & 0x8000000000000000) != 0) {
          goto LABEL_30;
        }
        uint64_t v13 = *(void *)(v9 + 72);
        if (v12 >= *(void *)(v13 + 16)) {
          goto LABEL_31;
        }
        Swift::UInt v14 = v13 + 56 * v12;
        uint64_t v15 = *(void *)(v14 + 48);
        uint64_t v16 = *(void *)(v15 + 16);
        if (v16)
        {
          uint64_t v17 = *(void *)(v9 + 88);
          long long v46 = *(_OWORD *)(v9 + 128);
          long long v47 = *(_OWORD *)(v9 + 112);
          long long v45 = *(_OWORD *)(v9 + 144);
          char v44 = *(unsigned char *)(v9 + 160);
          double v18 = v6 + *(double *)(v9 + 96);
          double v19 = v7 + *(double *)(v9 + 104);
          long long v43 = *(_OWORD *)(v14 + 72);
          outlined retain of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.DisplayInfo.DrawOperation);
          outlined retain of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.DisplayInfo.DrawOperation);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unsigned int v20 = (CFIndex *)(v15 + 40);
          while (1)
          {
            unint64_t v22 = (void *)*(v20 - 1);
            CFIndex v21 = *v20;
            swift_retain_n();
            uint64_t v23 = v22;
            uint64_t v24 = (id)_CTLineGetRunAtIndex(v23, v21);
            double v25 = (const __CTFont *)(id)CTRunGetFont();
            swift_release();

            double v26 = (__CFString *)CTFontCopyPostScriptName(v25);
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            v27._countAndFlagsBits = 0x696261724146532ELL;
            v27._object = (void *)0xE900000000000063;
            Swift::Bool v28 = String.hasPrefix(_:)(v27);
            if (v28) {
              break;
            }
            v29._countAndFlagsBits = 0xD000000000000012;
            v29._object = (void *)0x800000024621EE40;
            Swift::Bool v30 = String.hasPrefix(_:)(v29);
            swift_release_n();

            swift_bridgeObjectRelease();
            if (v30) {
              goto LABEL_18;
            }
            v20 += 8;
            if (!--v16)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              uint64_t v5 = v41;
              uint64_t v3 = v42;
              goto LABEL_16;
            }
          }
          swift_bridgeObjectRelease();
          swift_release_n();

LABEL_18:
          swift_bridgeObjectRelease();
          long long v31 = (void *)v40[1];
          if (!v31 || v28 == *(unsigned char *)v40)
          {
            Text.Effect.StopCollector.flushSegment()();
            uint64_t v32 = !v28;
            outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(*v40, v40[1]);
            *id v40 = v32;
            long long v31 = (void *)MEMORY[0x263F8EE78];
            v40[1] = MEMORY[0x263F8EE78];
            uint64_t v33 = MEMORY[0x263F8EE88];
            v40[2] = MEMORY[0x263F8EE88];
          }
          else
          {
            uint64_t v32 = *v40;
            uint64_t v33 = v40[2];
          }
          uint64_t v50 = v33;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v34 = v31;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
          }
          unint64_t v36 = v34[2];
          unint64_t v35 = v34[3];
          if (v36 >= v35 >> 1) {
            uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, v34);
          }
          v34[2] = v36 + 1;
          unint64_t v37 = &v34[12 * v36];
          v37[4] = v17;
          *((double *)v37 + 5) = v18;
          *((double *)v37 + 6) = v19;
          *(_OWORD *)(v37 + 7) = v47;
          *(_OWORD *)(v37 + 9) = v46;
          *(_OWORD *)(v37 + 11) = v45;
          *((unsigned char *)v37 + 104) = v44;
          *((_OWORD *)v37 + 7) = v43;
          specialized Set._Variant.insert(_:)(&v49, v48);
          outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v32, (uint64_t)v31);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined retain of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.DisplayInfo.DrawOperation);
          outlined retain of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.DisplayInfo.DrawOperation);
          uint64_t v38 = v50;
          *id v40 = v32 & 1;
          v40[1] = (uint64_t)v34;
          v40[2] = v38;
          uint64_t v5 = v41;
          uint64_t v3 = v42;
        }
        else
        {
          outlined retain of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.DisplayInfo.DrawOperation);
          outlined retain of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.DisplayInfo.DrawOperation);
LABEL_16:
          Text.Effect.StopCollector.flushSegment()();
          outlined retain of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.DisplayInfo.DrawOperation);
          outlined retain of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.DisplayInfo.DrawOperation);
        }
      }
      else
      {
        _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOj0_((uint64_t)v52);
      }
    }
    while (v8 != v3);
    return outlined release of Text.Effect.DisplayInfo(v39);
  }
  return result;
}

uint64_t _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOg(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 208) >> 6;
}

void outlined copy of Text.Effect.DisplayInfo.DrawOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unsigned __int8 a27)
{
  int v27 = a27 >> 6;
  if (v27 == 3)
  {
    swift_retain();
  }
  else if (v27 == 2 || v27 == 1)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of Text.Effect.PathInterpolator.MapKeys(a11);
  }
}

uint64_t outlined retain of Text.Effect.DisplayInfo.DrawOperation(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 208);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v4);
  return a1;
}

void outlined consume of Text.Effect.DisplayInfo.DrawOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unsigned __int8 a27)
{
  int v27 = a27 >> 6;
  if (v27 == 3)
  {
    swift_release();
  }
  else if (v27 == 2 || v27 == 1)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Text.Effect.PathInterpolator.MapKeys(a11);
  }
}

uint64_t _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOj0_(uint64_t result)
{
  *(unsigned char *)(result + 208) &= 0x3Fu;
  return result;
}

uint64_t outlined retain of Text.Effect.PathInterpolator.Cluster(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Text.Effect.PathInterpolator.Cluster(uint64_t a1)
{
  return a1;
}

id outlined copy of Text.Effect.PathInterpolator.Glyph(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  switch(a15)
  {
    case 0:
      id v15 = result;
      swift_retain();
      return v15;
    case 1:
    case 5:
      goto LABEL_6;
    case 2:
      swift_bridgeObjectRetain();
LABEL_6:
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 3:
    case 4:
LABEL_7:
      uint64_t result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void *outlined consume of Text.Effect.PathInterpolator.Glyph(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  switch(a15)
  {
    case 0:

      return (void *)swift_release();
    case 1:
    case 5:
      goto LABEL_6;
    case 2:
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 3:
    case 4:
LABEL_7:
      uint64_t result = (void *)swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void destroy for Text.Effect.DisplayInfo.DrawOperation(uint64_t a1)
{
  outlined consume of Text.Effect.DisplayInfo.DrawOperation(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(unsigned char *)(a1 + 208));
}

uint64_t initializeWithCopy for Text.Effect.DisplayInfo.DrawOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *(void *)(a2 + 72);
  unint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 136);
  uint64_t v22 = *(void *)(a2 + 144);
  uint64_t v23 = *(void *)(a2 + 152);
  uint64_t v24 = *(void *)(a2 + 160);
  uint64_t v25 = *(void *)(a2 + 168);
  uint64_t v26 = *(void *)(a2 + 176);
  uint64_t v27 = *(void *)(a2 + 184);
  uint64_t v28 = *(void *)(a2 + 192);
  uint64_t v29 = *(void *)(a2 + 200);
  unsigned __int8 v30 = *(unsigned char *)(a2 + 208);
  uint64_t v3 = *(void *)(a2 + 64);
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  outlined copy of Text.Effect.DisplayInfo.DrawOperation(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v3, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = v23;
  *(void *)(a1 + 160) = v24;
  *(void *)(a1 + 168) = v25;
  *(void *)(a1 + 176) = v26;
  *(void *)(a1 + 184) = v27;
  *(void *)(a1 + 192) = v28;
  *(void *)(a1 + 200) = v29;
  *(unsigned char *)(a1 + 208) = v30;
  return a1;
}

uint64_t assignWithCopy for Text.Effect.DisplayInfo.DrawOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = *(void *)(a2 + 72);
  unint64_t v33 = *(void *)(a2 + 80);
  uint64_t v34 = *(void *)(a2 + 88);
  uint64_t v35 = *(void *)(a2 + 96);
  uint64_t v36 = *(void *)(a2 + 104);
  uint64_t v37 = *(void *)(a2 + 112);
  uint64_t v38 = *(void *)(a2 + 120);
  uint64_t v39 = *(void *)(a2 + 128);
  uint64_t v40 = *(void *)(a2 + 136);
  uint64_t v41 = *(void *)(a2 + 144);
  uint64_t v42 = *(void *)(a2 + 152);
  uint64_t v43 = *(void *)(a2 + 160);
  uint64_t v44 = *(void *)(a2 + 168);
  uint64_t v45 = *(void *)(a2 + 176);
  uint64_t v46 = *(void *)(a2 + 184);
  uint64_t v47 = *(void *)(a2 + 192);
  uint64_t v48 = *(void *)(a2 + 200);
  unsigned __int8 v49 = *(unsigned char *)(a2 + 208);
  uint64_t v3 = *(void *)(a2 + 64);
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  outlined copy of Text.Effect.DisplayInfo.DrawOperation(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v3, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    v48,
    v49);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = v32;
  *(void *)(a1 + 80) = v33;
  *(void *)(a1 + 88) = v34;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v35;
  *(void *)(a1 + 104) = v36;
  *(void *)(a1 + 112) = v37;
  *(void *)(a1 + 120) = v38;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v39;
  *(void *)(a1 + 136) = v40;
  *(void *)(a1 + 144) = v41;
  *(void *)(a1 + 152) = v42;
  long long v26 = *(_OWORD *)(a1 + 160);
  long long v27 = *(_OWORD *)(a1 + 176);
  *(void *)(a1 + 160) = v43;
  *(void *)(a1 + 168) = v44;
  *(void *)(a1 + 176) = v45;
  *(void *)(a1 + 184) = v46;
  uint64_t v28 = *(void *)(a1 + 192);
  uint64_t v29 = *(void *)(a1 + 200);
  *(void *)(a1 + 192) = v47;
  *(void *)(a1 + 200) = v48;
  unsigned __int8 v30 = *(unsigned char *)(a1 + 208);
  *(unsigned char *)(a1 + 208) = v49;
  outlined consume of Text.Effect.DisplayInfo.DrawOperation(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    v29,
    v30);
  return a1;
}

__n128 __swift_memcpy209_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for Text.Effect.DisplayInfo.DrawOperation(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 208);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 96);
  long long v16 = *(_OWORD *)(a1 + 112);
  long long v17 = *(_OWORD *)(a1 + 128);
  long long v18 = *(_OWORD *)(a1 + 144);
  long long v19 = *(_OWORD *)(a1 + 160);
  long long v20 = *(_OWORD *)(a1 + 176);
  uint64_t v21 = *(void *)(a1 + 192);
  uint64_t v22 = *(void *)(a1 + 200);
  unsigned __int8 v23 = *(unsigned char *)(a1 + 208);
  long long v24 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v24;
  long long v25 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v25;
  long long v26 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v26;
  long long v27 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v27;
  long long v28 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v28;
  long long v29 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v29;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(unsigned char *)(a1 + 208) = v4;
  outlined consume of Text.Effect.DisplayInfo.DrawOperation(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    v22,
    v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.DisplayInfo.DrawOperation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 209)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(void *)(a1 + 176) >> 9) & 0xFF000000 | (*(_DWORD *)(a1 + 160) >> 8);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for Text.Effect.DisplayInfo.DrawOperation(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 200) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 208) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 209) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 160) = (-256 * a2);
      *(void *)(a1 + 168) = 0;
      *(void *)(a1 + 176) = ((unint64_t)-a2 << 9) & 0x1FE00000000;
      *(void *)(a1 + 184) = 0;
      *(void *)(a1 + 192) = 0;
      *(void *)(a1 + 200) = 0;
      *(unsigned char *)(a1 + 208) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 209) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for Text.Effect.DisplayInfo.DrawOperation(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 176) & 0x1FFFFFFFFLL;
  char v3 = *(unsigned char *)(result + 208) & 1 | (a2 << 6);
  *(void *)(result + 160) &= 0xFFFFFFFF000000FFLL;
  *(void *)(result + 176) = v2;
  *(unsigned char *)(result + 208) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.DisplayInfo.DrawOperation()
{
  return &type metadata for Text.Effect.DisplayInfo.DrawOperation;
}

uint64_t destroy for Text.Effect.DisplayInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.Effect.DisplayInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Text.Effect.DisplayInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Text.Effect.DisplayInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.DisplayInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 120);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.DisplayInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 120) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.DisplayInfo()
{
  return &type metadata for Text.Effect.DisplayInfo;
}

double _PreferenceReadingView.value.getter@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

double _PreferenceReadingView.value.setter(double *a1)
{
  double result = *a1;
  *uint64_t v1 = *(void *)a1;
  return result;
}

uint64_t (*_PreferenceReadingView.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _PreferenceReadingView.transform.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_retain();
  return v1;
}

uint64_t _PreferenceReadingView.transform.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*_PreferenceReadingView.transform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _PreferenceReadingView.init(value:transform:)@<D0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  double result = *a1;
  *a4 = *(void *)a1;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

double static _PreferenceReadingView._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, double *a7@<X8>)
{
  void (*v28)(uint64_t *__return_ptr, int *, uint64_t *);
  double result;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v40;
  int v41;
  uint64_t v42;
  double v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  long long v79;
  uint64_t v80;
  uint64_t v81;
  long long v82;
  uint64_t v83;
  int v84;
  uint64_t v85;

  __double2 v85 = *MEMORY[0x263EF8340];
  int v11 = *a1;
  int v12 = *((_DWORD *)a2 + 2);
  uint64_t v13 = a2[2];
  uint64_t v14 = a2[5];
  uint64_t v15 = a2[6];
  int v16 = *((_DWORD *)a2 + 20);
  CGFloat v76 = *a2;
  double v78 = v13;
  double v79 = *(_OWORD *)(a2 + 3);
  CGFloat v82 = *(_OWORD *)(a2 + 7);
  uint64_t v17 = a2[9];
  double v80 = v14;
  CGFloat v81 = v15;
  CGFloat v83 = v17;
  CGFloat v77 = v12;
  CGFloat v84 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)(a3, a3);
  LODWORD(v45) = v11;
  double v61 = a3;
  double v62 = a4;
  uint64_t v63 = a5;
  long long v64 = a6;
  uint64_t v18 = type metadata accessor for PreferenceReadingChild();
  uint64_t WitnessTable = swift_getWitnessTable();
  _GraphValue.init<A>(_:)((uint64_t)&v45, a4, v18, WitnessTable, &v44);
  uint64_t v40 = v44;
  uint64_t v20 = v76;
  uint64_t v21 = v78;
  uint64_t v37 = v79;
  uint64_t v35 = v77;
  uint64_t v36 = DWORD1(v79);
  int v22 = HIDWORD(v79);
  uint64_t v38 = DWORD2(v79);
  uint64_t v23 = v80;
  uint64_t v24 = v81;
  int v25 = DWORD1(v82);
  unint64_t v33 = DWORD2(v82);
  uint64_t v34 = v82;
  int v26 = HIDWORD(v83);
  long long v31 = v83;
  uint64_t v32 = HIDWORD(v82);
  unsigned __int8 v30 = v84;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  double v61 = v20;
  uint64_t v63 = v21;
  LODWORD(v62) = v35;
  long long v64 = __PAIR64__(v36, v37);
  uint64_t v66 = v22;
  uint64_t v67 = v23;
  uint64_t v68 = v24;
  uint64_t v69 = v34;
  uint64_t v70 = v25;
  uint64_t v71 = v33;
  uint64_t v72 = v32;
  long long v73 = v31;
  long long v74 = v26;
  long long v75 = v30;
  uint64_t v41 = v40;
  uint64_t v45 = v20;
  uint64_t v46 = v35;
  uint64_t v47 = v21;
  uint64_t v48 = v37;
  unsigned __int8 v49 = v36;
  uint64_t v50 = 0;
  uint64_t v51 = v22;
  CGFloat v52 = v23;
  id v53 = v24;
  CGFloat v54 = v34;
  CGFloat v55 = v25;
  id v56 = v33;
  uint64_t v57 = v32;
  uint64_t v58 = v31;
  double v59 = v26;
  double v60 = v30;
  long long v28 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *))(a6 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28(&v42, &v41, &v45);
  long long v65 = v38;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v42, (uint64_t)&v61);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release();
  }
  swift_release();
  swift_release();
  *(void *)a7 = v42;
  double result = v43;
  a7[1] = v43;
  return result;
}

uint64_t type metadata accessor for PreferenceReadingChild()
{
  return swift_getGenericMetadata();
}

uint64_t PreferenceReadingChild.view.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for _PreferenceReadingView();
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v4 = Value[1];
  uint64_t v3 = Value[2];
  *a1 = *Value;
  a1[1] = v4;
  a1[2] = v3;
  return swift_retain();
}

double protocol witness for static View._makeView(view:inputs:) in conformance _PreferenceReadingView<A, B>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  return static _PreferenceReadingView._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), a4);
}

uint64_t PreferenceReadingChild.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, char *a6@<X8>)
{
  CGFloat v52 = a6;
  id v53 = a5;
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v10 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unsigned __int8 v49 = (char *)&v46 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v51 = (char *)&v46 - v17;
  type metadata accessor for ObservationTracking._AccessList?();
  uint64_t v19 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v46 - v23;
  uint64_t v50 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v25);
  CGFloat v54 = (char *)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v48 = (char *)&v46 - v28;
  uint64_t v56 = a2;
  uint64_t v57 = a3;
  uint64_t v58 = a4;
  double v59 = v53;
  int v60 = a1;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    a1 = CurrentAttribute;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  id v53 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v24, 1, 1, v10);
  MEMORY[0x270FA5388](v30);
  *(&v46 - 4) = a3;
  *(&v46 - 3) = (uint64_t)partial apply for closure #1 in PreferenceReadingChild.value.getter;
  *(&v46 - 2) = (uint64_t)&v55;
  unint64_t v31 = type metadata accessor for Error();
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v24, (uint64_t)partial apply for closure #1 in _withObservation<A>(do:), (uint64_t)(&v46 - 6), v19, v31, a3, MEMORY[0x263F8E4E0], (uint64_t)v61);
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v24, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v21, 1, v10) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v21);
  }
  else
  {
    uint64_t v32 = v51;
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v47(v51, v21, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v49, v32, v10);
    swift_beginAccess();
    unint64_t v33 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v33;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v33 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v33 + 2) + 1, 1, (unint64_t)v33);
      static ObservationRegistrar.lastestAccessLists = v33;
    }
    unint64_t v36 = *((void *)v33 + 2);
    unint64_t v35 = *((void *)v33 + 3);
    if (v36 >= v35 >> 1)
    {
      unint64_t v33 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, (unint64_t)v33);
      static ObservationRegistrar.lastestAccessLists = v33;
    }
    *((void *)v33 + 2) = v36 + 1;
    v47(&v33[((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v36], v49, v10);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v51, v10);
  }
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
  uint64_t v38 = v48;
  v37(v48, v54, a3);
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v24);
  v37(v52, v38, a3);
  uint64_t v39 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v39)
  {
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v41 = v11 + 16;
    uint64_t v40 = v42;
    uint64_t v43 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v41 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 64));
    uint64_t v44 = *(void *)(v41 + 56);
    CGFloat v54 = (char *)static ObservationRegistrar.lastestAccessLists;
    swift_bridgeObjectRetain();
    do
    {
      v40(v13, v43, v10);
      installObservationSlow<A>(accessList:attribute:)((uint64_t)v13, a1, a3);
      (*(void (**)(char *, uint64_t))(v41 - 8))(v13, v10);
      v43 += v44;
      --v39;
    }
    while (v39);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v53;
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in PreferenceReadingChild.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _OWORD v10[2] = a2;
  v10[3] = a3;
  void v10[4] = a4;
  double v10[5] = a5;
  int v11 = a1;
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v8 = type metadata accessor for _PreferenceReadingView();
  return Attribute.syncMainIfReferences<A>(do:)((void (*)(void))partial apply for closure #1 in closure #1 in PreferenceReadingChild.value.getter, (uint64_t)v10, v8, a3, a6);
}

uint64_t closure #1 in closure #1 in PreferenceReadingChild.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v10[1] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v6 = (char *)v10 - v5;
  uint64_t v7 = *(void (**)(char *))(a1 + 8);
  PreferenceReadingChild.view.getter(&v11);
  swift_release();
  _OWORD v10[2] = v11;
  uint64_t v8 = type metadata accessor for _PreferenceValue();
  _PreferenceValue.wrappedValue.getter(v8, (uint64_t)v6);
  v7(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance PreferenceReadingChild<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 56))(a2, 1, 1);
}

uint64_t protocol witness for Rule.value.getter in conformance PreferenceReadingChild<A, B>@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return PreferenceReadingChild.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void **)(a1 + 40), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PreferenceReadingChild<A, B>()
{
  return specialized PreferenceReadingChild.description.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PreferenceReadingChild<A, B>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t _PreferenceValue._force<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = *v3;
  a3[1] = a1;
  a3[2] = a2;
  return swift_retain();
}

uint64_t assignWithCopy for _PreferenceReadingView(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t type metadata accessor for _PreferenceReadingView()
{
  return swift_getGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for PreferenceReadingChild<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in PreferenceReadingChild<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in PreferenceReadingChild.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in PreferenceReadingChild.value.getter(*(_DWORD *)(v1 + 48), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t partial apply for closure #1 in closure #1 in PreferenceReadingChild.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in PreferenceReadingChild.value.getter(a1, a2);
}

uint64_t specialized PreferenceReadingChild.description.getter()
{
  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x203A64616552;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityCustomContentKey.Identifier(uint64_t *a1, uint64_t *a2)
{
  return specialized static AccessibilityCustomContentKey.Identifier.== infix(_:_:)(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t AccessibilityCustomContentKey.init(_:id:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = a5;
  *(void *)(a7 + 8) = a6;
  *(void *)(a7 + 16) = 0;
  *(void *)(a7 + 24) = 0;
  *(void *)(a7 + 32) = result;
  *(void *)(a7 + 40) = a2;
  *(unsigned char *)(a7 + 48) = a3 & 1;
  *(void *)(a7 + 56) = a4;
  return result;
}

uint64_t AccessibilityCustomContentKey.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  type metadata accessor for LocalizedTextStorage();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  *(unsigned char *)(result + 32) = a3;
  *(void *)(result + 40) = a4;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  *(void *)a7 = a5;
  *(void *)(a7 + 8) = a6;
  *(void *)(a7 + 16) = 0;
  *(void *)(a7 + 24) = 0;
  *(void *)(a7 + 32) = result;
  *(void *)(a7 + 40) = 0;
  *(unsigned char *)(a7 + 48) = 1;
  *(void *)(a7 + 56) = MEMORY[0x263F8EE78];
  return result;
}

uint64_t AccessibilityCustomContentKey.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  type metadata accessor for LocalizedTextStorage();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(unsigned char *)(v10 + 32) = a3;
  *(void *)(v10 + 40) = a4;
  *(void *)(v10 + 48) = 0;
  *(void *)(v10 + 56) = 0;
  *(void *)(v10 + 64) = 0;
  *(void *)a5 = v10;
  *(_OWORD *)(a5 + 8) = xmmword_2461D3F10;
  uint64_t v11 = MEMORY[0x263F8EE78];
  *(void *)(a5 + 24) = MEMORY[0x263F8EE78];
  *(void *)(a5 + 32) = v10;
  *(void *)(a5 + 40) = 0;
  *(unsigned char *)(a5 + 48) = 1;
  *(void *)(a5 + 56) = v11;

  return swift_retain();
}

{
  char v5;
  uint64_t vars8;

  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3 & 1 | 0x8000000000000000;
  *(void *)(a5 + 24) = a4;
  *(void *)(a5 + 32) = a1;
  *(void *)(a5 + 40) = a2;
  uint64_t v5 = a3 & 1;
  *(unsigned char *)(a5 + 48) = v5;
  *(void *)(a5 + 56) = a4;
  outlined copy of Text.Storage(a1, a2, v5);

  return swift_bridgeObjectRetain();
}

__n128 AccessibilityCustomContentEntry.init(_:value:importance:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v7 = *(unsigned char *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  long long v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a7 = *(_OWORD *)a1;
  *(_OWORD *)(a7 + 16) = v9;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a7 + 32) = result;
  *(unsigned char *)(a7 + 48) = v7;
  *(void *)(a7 + 56) = v8;
  *(void *)(a7 + 64) = a2;
  *(void *)(a7 + 72) = a3;
  *(unsigned char *)(a7 + 80) = a4 & 1;
  *(void *)(a7 + 88) = a5;
  *(void *)(a7 + 96) = a6;
  *(unsigned char *)(a7 + 112) = 0;
  return result;
}

uint64_t AccessibilityCustomContentEntry.init<A>(_:value:importance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v7 = *(unsigned char *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  long long v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_OWORD *)(a5 + 16) = v9;
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(a1 + 32);
  *(unsigned char *)(a5 + 48) = v7;
  *(void *)(a5 + 56) = v8;
  uint64_t result = AnyAccessibilityValue.init<A>(_:)(a2, a4, (uint64_t *)(a5 + 64));
  *(void *)(a5 + 104) = a3;
  *(unsigned char *)(a5 + 112) = 1;
  return result;
}

double AccessibilityCustomContentEntry.init(clearing:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(unsigned char *)(a2 + 48) = v2;
  *(void *)(a2 + 56) = v3;
  double result = 0.0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(unsigned char *)(a2 + 112) = 2;
  return result;
}

uint64_t Array<A>.resolve(in:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v83 = type metadata accessor for Text.ResolvedString(0);
  MEMORY[0x270FA5388](v83);
  uint64_t v5 = (char *)v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v7 = *a1;
  uint64_t v81 = a1[1];
  uint64_t v82 = v7;
  unint64_t v104 = MEMORY[0x263F8EE78];
  uint64_t v103 = MEMORY[0x263F8EE88];
  uint64_t v86 = *(void *)(a2 + 16);
  if (!v86)
  {
LABEL_58:
    swift_bridgeObjectRelease();
    return v6;
  }
  CGFloat v84 = &v102;
  uint64_t v85 = a2 + 32;
  v75[1] = a2;
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  while (1)
  {
    outlined init with copy of AccessibilityCustomContentEntry(v85 + 120 * v8, (uint64_t)&v94);
    uint64_t v9 = v94;
    uint64_t v10 = v95;
    if (v96 < 0)
    {
      uint64_t v11 = v97;
      if (v96)
      {
        outlined copy of Text.Storage(v94, v95, 1);
        swift_bridgeObjectRetain();
        Text.Style.init()((uint64_t)v5);
        uint64_t v12 = v82;
        uint64_t v13 = v83;
        uint64_t v14 = &v5[*(int *)(v83 + 20)];
        uint64_t v15 = (uint64_t *)&v5[*(int *)(v83 + 24)];
        *uint64_t v15 = 0;
        v15[1] = 0xE000000000000000;
        v5[*(int *)(v13 + 28)] = 0;
        *(void *)uint64_t v14 = 0;
        *((void *)v14 + 1) = 0;
        specialized Text.resolve<A>(into:in:with:)((uint64_t)v5, v12, v81, 0, v9, v10, 1, v11);
        uint64_t v17 = *v15;
        uint64_t v16 = v15[1];
        swift_bridgeObjectRetain();
        _s7SwiftUI4TextV14ResolvedStringVWOhTm_1((uint64_t)v5, type metadata accessor for Text.ResolvedString);
        outlined consume of Text.Storage(v9, v10, 1);
        uint64_t v9 = v17;
        uint64_t v10 = v16;
      }
      else
      {
        outlined copy of Text.Storage(v94, v95, 0);
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    if (String.count.getter() < 1) {
      goto LABEL_4;
    }
    uint64_t v18 = v103;
    if (!*(void *)(v103 + 16)) {
      goto LABEL_29;
    }
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v19 = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v18 + 32);
    unint64_t v21 = v19 & ~v20;
    if (((*(void *)(v18 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
      goto LABEL_28;
    }
    uint64_t v22 = *(void *)(v18 + 48);
    uint64_t v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v9 && v23[1] == v10;
    if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      break;
    }
LABEL_3:
    swift_bridgeObjectRelease();
LABEL_4:
    outlined destroy of AccessibilityCustomContentEntry((uint64_t)&v94);
    swift_bridgeObjectRelease();
LABEL_5:
    if (++v8 == v86) {
      goto LABEL_57;
    }
  }
  uint64_t v25 = ~v20;
  while (1)
  {
    unint64_t v21 = (v21 + 1) & v25;
    if (((*(void *)(v18 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
      break;
    }
    uint64_t v26 = (void *)(v22 + 16 * v21);
    BOOL v27 = *v26 == v9 && v26[1] == v10;
    if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_3;
    }
  }
LABEL_28:
  swift_bridgeObjectRelease();
LABEL_29:
  specialized Set._Variant.insert(_:)((Swift::Int *)&v89, v9, v10);
  swift_bridgeObjectRelease();
  outlined init with copy of AccessibilityCustomContentEntry.Value(v84, (uint64_t)&v89);
  if (!v93)
  {
    uint64_t v44 = *((void *)&v89 + 1);
    uint64_t v45 = v89;
    uint64_t v46 = *((void *)&v90 + 1);
    uint64_t v79 = *((void *)&v89 + 1);
    uint64_t v80 = v91;
    int v78 = v90;
    if (v90)
    {
      Text.Style.init()((uint64_t)v5);
      uint64_t v47 = v82;
      uint64_t v48 = v83;
      unsigned __int8 v49 = &v5[*(int *)(v83 + 20)];
      uint64_t v50 = &v5[*(int *)(v83 + 24)];
      *(void *)uint64_t v50 = 0;
      *((void *)v50 + 1) = 0xE000000000000000;
      v5[*(int *)(v48 + 28)] = 0;
      *(void *)unsigned __int8 v49 = 0;
      *((void *)v49 + 1) = 0;
      specialized Text.resolve<A>(into:in:with:)((uint64_t)v5, v47, v81, 0, v45, v44, 1, v46);
      uint64_t v51 = *(void *)v50;
      uint64_t v44 = *((void *)v50 + 1);
      swift_bridgeObjectRetain();
      _s7SwiftUI4TextV14ResolvedStringVWOhTm_1((uint64_t)v5, type metadata accessor for Text.ResolvedString);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v51 = v45;
    }
    uint64_t v56 = v98;
    uint64_t v57 = v99;
    if (v100)
    {
      uint64_t v76 = v51;
      uint64_t v58 = v101;
      outlined copy of Text.Storage(v98, v99, 1);
      swift_bridgeObjectRetain();
      Text.Style.init()((uint64_t)v5);
      uint64_t v59 = v82;
      uint64_t v60 = v83;
      uint64_t v61 = *(int *)(v83 + 24);
      uint64_t v62 = &v5[*(int *)(v83 + 20)];
      uint64_t v77 = v45;
      uint64_t v63 = (uint64_t *)&v5[v61];
      *uint64_t v63 = 0;
      v63[1] = 0xE000000000000000;
      v5[*(int *)(v60 + 28)] = 0;
      *(void *)uint64_t v62 = 0;
      *((void *)v62 + 1) = 0;
      specialized Text.resolve<A>(into:in:with:)((uint64_t)v5, v59, v81, 0, v56, v57, 1, v58);
      uint64_t v64 = *v63;
      uint64_t v65 = v63[1];
      swift_bridgeObjectRetain();
      _s7SwiftUI4TextV14ResolvedStringVWOhTm_1((uint64_t)v5, type metadata accessor for Text.ResolvedString);
      outlined consume of Text.Storage(v56, v57, 1);
      uint64_t v51 = v76;
      swift_bridgeObjectRelease();
      uint64_t v56 = v64;
      uint64_t v57 = v65;
      uint64_t v45 = v77;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t v66 = (void *)MEMORY[0x24C522820](v56, v57);
    swift_bridgeObjectRelease();
    uint64_t v67 = (void *)MEMORY[0x24C522820](v51, v44);
    swift_bridgeObjectRelease();
    id v68 = objc_msgSend(self, sel_customContentWithLabel_value_, v66, v67);

    objc_msgSend(v68, sel_setImportance_, v80);
    if (v104 >> 62)
    {
      id v73 = v68;
      swift_bridgeObjectRetain();
      uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v74 < 0)
      {
        __break(1u);
LABEL_57:
        swift_bridgeObjectRelease();
        unint64_t v6 = v104;
        goto LABEL_58;
      }
    }
    else
    {
      id v69 = v68;
    }
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, (uint64_t)v68);
    outlined consume of Text.Storage(v45, v79, v78);

    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
  if (v93 != 1)
  {
LABEL_52:
    outlined destroy of AccessibilityCustomContentEntry((uint64_t)&v94);
    goto LABEL_5;
  }
  v87[0] = v89;
  v87[1] = v90;
  uint64_t v28 = v91;
  uint64_t v29 = v92;
  uint64_t v88 = v91;
  uint64_t v30 = *((void *)&v90 + 1);
  __swift_project_boxed_opaque_existential_1(v87, *((uint64_t *)&v90 + 1));
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 24))(v30, v28);
  if (v32) {
    uint64_t v33 = v31;
  }
  else {
    uint64_t v33 = 0;
  }
  if (v32) {
    unint64_t v34 = v32;
  }
  else {
    unint64_t v34 = 0xE000000000000000;
  }
  uint64_t v36 = v98;
  uint64_t v35 = v99;
  if (v100)
  {
    uint64_t v80 = v29;
    uint64_t v37 = v101;
    outlined copy of Text.Storage(v98, v99, 1);
    swift_bridgeObjectRetain();
    Text.Style.init()((uint64_t)v5);
    uint64_t v38 = v82;
    uint64_t v39 = v83;
    uint64_t v40 = &v5[*(int *)(v83 + 20)];
    uint64_t v41 = (uint64_t *)&v5[*(int *)(v83 + 24)];
    *uint64_t v41 = 0;
    v41[1] = 0xE000000000000000;
    v5[*(int *)(v39 + 28)] = 0;
    *(void *)uint64_t v40 = 0;
    *((void *)v40 + 1) = 0;
    specialized Text.resolve<A>(into:in:with:)((uint64_t)v5, v38, v81, 0, v36, v35, 1, v37);
    uint64_t v42 = *v41;
    uint64_t v43 = v41[1];
    swift_bridgeObjectRetain();
    _s7SwiftUI4TextV14ResolvedStringVWOhTm_1((uint64_t)v5, type metadata accessor for Text.ResolvedString);
    outlined consume of Text.Storage(v36, v35, 1);
    uint64_t v29 = v80;
    swift_bridgeObjectRelease();
    uint64_t v36 = v42;
    uint64_t v35 = v43;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  CGFloat v52 = (void *)MEMORY[0x24C522820](v36, v35);
  swift_bridgeObjectRelease();
  id v53 = (void *)MEMORY[0x24C522820](v33, v34);
  swift_bridgeObjectRelease();
  id v54 = objc_msgSend(self, sel_customContentWithLabel_value_, v52, v53);

  objc_msgSend(v54, sel_setImportance_, v29);
  if (!(v104 >> 62))
  {
    id v55 = v54;
    goto LABEL_44;
  }
  id v70 = v54;
  swift_bridgeObjectRetain();
  uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v71 & 0x8000000000000000) == 0)
  {
LABEL_44:
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, (uint64_t)v54);

    outlined destroy of AnyAccessibilityValue((uint64_t)v87);
    goto LABEL_52;
  }
  __break(1u);
  return result;
}

uint64_t CodableAccessibilityCustomContentList.CodableEntry.CodableKey.init(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  char v10 = *(unsigned char *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  uint64_t v29 = v6;
  uint64_t v30 = *(void *)a1;
  if (v6 < 0)
  {
    uint64_t v24 = *(void *)(a1 + 56);
    char v15 = v6 & 1;
    char v28 = v6 & 1;
    uint64_t v31 = *a2;
    uint64_t v32 = v13;
    long long v34 = 0uLL;
    outlined copy of AccessibilityCustomContentKey.Identifier(v4, v5, v6);
    swift_retain();
    swift_retain();
    char v37 = v15;
    uint64_t v11 = v24;
    uint64_t v16 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)(v4, v5, v37, v7, &v31, 1, 1, 0, 0, &v34);
    uint64_t v17 = v5;
    uint64_t v18 = v16;
    outlined consume of Text.Storage(v4, v17, v28);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v26 = 0;
    uint64_t v27 = v18;
    BOOL v19 = v18 == 0;
    uint64_t v5 = v17;
    if (v19) {
      __int16 v20 = 255;
    }
    else {
      __int16 v20 = 1;
    }
    __int16 v25 = v20;
  }
  else
  {
    uint64_t v33 = MEMORY[0x263F8D310];
    uint64_t v31 = v4;
    uint64_t v32 = v5;
    swift_bridgeObjectRetain();
    AccessibilityText.init(_:)(&v31, (uint64_t)&v34);
    uint64_t v26 = *((void *)&v34 + 1);
    uint64_t v27 = v34;
    if (v36) {
      __int16 v14 = 256;
    }
    else {
      __int16 v14 = 0;
    }
    __int16 v25 = v14 | v35;
  }
  uint64_t v31 = v12;
  uint64_t v32 = v13;
  long long v34 = 0uLL;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v8, v9, v10);
  uint64_t v21 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)(v8, v9, v10, v11, &v31, 1, 1, 0, 0, &v34);
  outlined consume of Text.Storage(v8, v9, v10);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of AccessibilityCustomContentKey.Identifier(v30, v5, v29);
  outlined consume of Text.Storage(v8, v9, v10);
  swift_release();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (v21) {
    __int16 v23 = 1;
  }
  else {
    __int16 v23 = 255;
  }
  *(void *)a3 = v27;
  *(void *)(a3 + 8) = v26;
  *(_WORD *)(a3 + 16) = v25;
  *(void *)(a3 + 24) = v21;
  *(void *)(a3 + 32) = 0;
  *(_WORD *)(a3 + 40) = v23;
  return result;
}

uint64_t CodableAccessibilityCustomContentList.CodableEntry.CodableKey.encode(to:)(void *a1)
{
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys, (uint64_t)&unk_26FA747D0, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v17 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v14 - v5;
  uint64_t v8 = *v1;
  uint64_t v7 = v1[1];
  __int16 v9 = *((_WORD *)v1 + 8);
  uint64_t v10 = v1[3];
  uint64_t v15 = v1[4];
  uint64_t v16 = v10;
  int v22 = *((unsigned __int16 *)v1 + 20);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v19 = v8;
  uint64_t v20 = v7;
  __int16 v21 = v9;
  char v23 = 0;
  lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
  uint64_t v11 = v18;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (v11) {
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
  }
  uint64_t v13 = v17;
  uint64_t v19 = v16;
  uint64_t v20 = v15;
  __int16 v21 = v22;
  char v23 = 1;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v6, v4);
}

void CodableAccessibilityCustomContentList.CodableEntry.CodableKey.init(from:)(void *a1@<X0>, void *a2@<X8>)
{
  __int16 v21 = a2;
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys, (uint64_t)&unk_26FA747D0, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v19 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined consume of AccessibilityText?(0, 0, 255);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    char v18 = -1;
  }
  else
  {
    uint64_t v20 = v6;
    char v25 = 0;
    lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    id v10 = v22;
    uint64_t v9 = v23;
    __int16 v11 = v24;
    char v25 = 1;
    outlined copy of AccessibilityText?(v22, v23, v24);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v5);
    id v12 = v22;
    uint64_t v13 = v23;
    __int16 v14 = v24;
    outlined copy of AccessibilityText?(v22, v23, v24);
    outlined consume of AccessibilityText?(0, 0, 255);
    outlined copy of AccessibilityText?(v10, v9, v11);
    outlined copy of AccessibilityText?(v12, v13, v14);
    outlined consume of AccessibilityText?(v12, v13, v14);
    outlined consume of AccessibilityText?(v10, v9, v11);
    uint64_t v15 = v21;
    *__int16 v21 = v10;
    v15[1] = v9;
    *((_WORD *)v15 + 8) = v11;
    v15[3] = v12;
    v15[4] = v13;
    *((_WORD *)v15 + 20) = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined consume of AccessibilityText?(v10, v9, v11);
    uint64_t v16 = v12;
    uint64_t v17 = v13;
    char v18 = v14;
  }
  outlined consume of AccessibilityText?(v16, v17, v18);
}

void CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.encode(to:)(void *a1)
{
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys, (uint64_t)&unk_26FA748E0, MEMORY[0x263F8E0C0]);
  uint64_t v19 = *(void *)(v3 - 8);
  uint64_t v20 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v18 - v4;
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys, (uint64_t)&unk_26FA74A00, v2);
  uint64_t v7 = v6;
  uint64_t v18 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v18 - v8;
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys, (uint64_t)&unk_26FA74970, v2);
  uint64_t v11 = v10;
  uint64_t v22 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v18 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(v21, (uint64_t)&v26);
  if (v29)
  {
    long long v23 = v26;
    long long v24 = v27;
    uint64_t v25 = v28;
    char v30 = 1;
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type AnyAccessibilityValue and conformance AnyAccessibilityValue();
    uint64_t v14 = v20;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v14);
    outlined destroy of AnyAccessibilityValue((uint64_t)&v23);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v11);
  }
  else
  {
    long long v15 = v26;
    char v16 = v27;
    char v17 = BYTE1(v27);
    LOBYTE(v23) = 0;
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    long long v23 = v15;
    LOBYTE(v24) = v16;
    BYTE1(v24) = v17;
    lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v11);
    outlined consume of AccessibilityText.Storage((void *)v15, *((uint64_t *)&v15 + 1), v16);
  }
}

uint64_t CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  char v29 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys, (uint64_t)&unk_26FA748E0, MEMORY[0x263F8E040]);
  uint64_t v34 = v4;
  uint64_t v31 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v33 = (char *)&v29 - v5;
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys, (uint64_t)&unk_26FA74A00, v3);
  uint64_t v7 = v6;
  uint64_t v30 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v29 - v8;
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys, (uint64_t)&unk_26FA74970, v3);
  uint64_t v11 = v10;
  uint64_t v32 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v29 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys();
  uint64_t v14 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    goto LABEL_7;
  }
  uint64_t v15 = v7;
  char v16 = v33;
  uint64_t v17 = v34;
  uint64_t v43 = a1;
  uint64_t v18 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v19 = v11;
  if (*(void *)(v18 + 16) != 1)
  {
    uint64_t v23 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v25 = v24;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v25 = &type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v23 - 8) + 104))(v25, *MEMORY[0x263F8DCB0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v11);
    a1 = v43;
LABEL_7:
    uint64_t v27 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v27);
  }
  if (*(unsigned char *)(v18 + 32))
  {
    LOBYTE(v38) = 1;
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys();
    uint64_t v20 = v16;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type AnyAccessibilityValue and conformance AnyAccessibilityValue();
    uint64_t v21 = v17;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v22 = v32;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v19);
    char v41 = 1;
  }
  else
  {
    LOBYTE(v38) = 0;
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v26 = v32;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v15);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v11);
    long long v38 = v35;
    char v39 = v36;
    char v40 = v37;
    char v41 = 0;
  }
  outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(&v38, v42);
  outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(v42, v29);
  uint64_t v27 = (uint64_t)v43;
  return __swift_destroy_boxed_opaque_existential_1(v27);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys()
{
  if (*v0) {
    return 0x6C6562616CLL;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

void protocol witness for Decodable.init(from:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey(void *a1@<X0>, void *a2@<X8>)
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey(void *a1)
{
  return CodableAccessibilityCustomContentList.CodableEntry.CodableKey.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys()
{
  if (*v0) {
    return 0x65756C6176;
  }
  else {
    return 1954047348;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(void *a1)
{
}

uint64_t CodableAccessibilityCustomContentList.CodableEntry.CodableValue.init(_:in:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  *(unsigned char *)a3 = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  uint64_t v7 = a3 + 8;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 48) = -1;
  *(void *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 64) = 1;
  outlined init with copy of AccessibilityCustomContentEntry.Value(a1, (uint64_t)&v18);
  if (!v22)
  {
    long long v11 = v18;
    char v12 = v19;
    uint64_t v13 = *((void *)&v19 + 1);
    uint64_t v15 = v20;
    v17[0] = v6;
    v17[1] = v5;
    long long v16 = 0uLL;
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v11, *((uint64_t *)&v11 + 1), v12);
    swift_retain();
    swift_retain();
    uint64_t v14 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)(v11, *((uint64_t *)&v11 + 1), v12, v13, v17, 1, 1, 0, 0, &v16);
    outlined consume of Text.Storage(v11, *((uint64_t *)&v11 + 1), v12);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v11, *((uint64_t *)&v11 + 1), v12);
    swift_bridgeObjectRelease();
    outlined destroy of AccessibilityCustomContentEntry.Value((uint64_t)a1);
    swift_release();
    uint64_t result = swift_release();
    if (!v14) {
      return result;
    }
    uint64_t result = outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?(v7, &lazy cache variable for type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?, (uint64_t)&type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content);
    *(void *)(a3 + 8) = v14;
    *(void *)(a3 + 16) = 0;
    *(_WORD *)(a3 + 24) = 1;
    *(unsigned char *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = v15;
    goto LABEL_6;
  }
  if (v22 == 1)
  {
    outlined destroy of AccessibilityCustomContentEntry.Value((uint64_t)a1);
    swift_release();
    swift_release();
    uint64_t v8 = v21;
    uint64_t result = outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?(v7, &lazy cache variable for type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?, (uint64_t)&type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content);
    long long v10 = v19;
    *(_OWORD *)uint64_t v7 = v18;
    *(_OWORD *)(v7 + 16) = v10;
    *(void *)(v7 + 32) = v20;
    *(unsigned char *)(a3 + 48) = 1;
    *(void *)(a3 + 56) = v8;
LABEL_6:
    *(unsigned char *)(a3 + 64) = 0;
    return result;
  }
  outlined destroy of AccessibilityCustomContentEntry.Value((uint64_t)a1);
  swift_release();
  uint64_t result = swift_release();
  *(unsigned char *)a3 = 1;
  return result;
}

uint64_t CodableAccessibilityCustomContentList.CodableEntry.CodableValue.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys, (uint64_t)&unk_26FA74B20, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v15 = 1;
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v10 = *(unsigned char *)(v3 + 64);
    uint64_t v12 = *(void *)(v3 + 56);
    char v13 = v10;
    char v14 = 2;
    type metadata accessor for ProxyCodable<AXCustomContentImportance?>();
    lazy protocol witness table accessor for type ProxyCodable<AXCustomContentImportance?> and conformance ProxyCodable<A>(&lazy protocol witness table cache variable for type ProxyCodable<AXCustomContentImportance?> and conformance ProxyCodable<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t CodableAccessibilityCustomContentList.CodableEntry.CodableValue.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = a2;
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys, (uint64_t)&unk_26FA74B20, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - v7;
  v14[0] = 0;
  memset(v15, 0, sizeof(v15));
  uint64_t v16 = 0;
  char v17 = -1;
  uint64_t v18 = 0;
  char v19 = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = v11;
    LOBYTE(v12) = 0;
    v14[0] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    char v20 = 1;
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v12, (uint64_t)v15);
    type metadata accessor for ProxyCodable<AXCustomContentImportance?>();
    char v20 = 2;
    lazy protocol witness table accessor for type ProxyCodable<AXCustomContentImportance?> and conformance ProxyCodable<A>(&lazy protocol witness table cache variable for type ProxyCodable<AXCustomContentImportance?> and conformance ProxyCodable<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v18 = v12;
    char v19 = v13;
    outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue(v14, v9);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue((uint64_t)v14);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys()
{
  uint64_t v1 = 0x746E65746E6F63;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E6174726F706D69;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7261656C63;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CodableAccessibilityCustomContentList.CodableEntry.CodableValue.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue(void *a1)
{
  return CodableAccessibilityCustomContentList.CodableEntry.CodableValue.encode(to:)(a1);
}

uint64_t CodableAccessibilityCustomContentList.CodableEntry.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys, (uint64_t)&unk_26FA74C38, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int16 v10 = *((_WORD *)v3 + 8);
  __int16 v11 = *((_WORD *)v3 + 20);
  long long v13 = *v3;
  __int16 v14 = v10;
  long long v15 = *(long long *)((char *)v3 + 24);
  __int16 v16 = v11;
  char v17 = 0;
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void CodableAccessibilityCustomContentList.CodableEntry.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = a2;
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodableEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys, (uint64_t)&unk_26FA74C38, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v10 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v9 = v11;
    char v25 = 0;
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v16 = v12;
    __int16 v17 = *(_WORD *)v13;
    long long v18 = *(_OWORD *)&v13[8];
    __int16 v19 = *(_WORD *)&v13[24];
    char v25 = 1;
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    long long v22 = *(_OWORD *)&v13[16];
    long long v23 = v14;
    char v24 = v15;
    long long v20 = v12;
    long long v21 = *(_OWORD *)v13;
    outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry((uint64_t *)&v16, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry((uint64_t)&v16);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys()
{
  if (*v0) {
    return 0x56656C6261646F63;
  }
  else {
    return 0x4B656C6261646F63;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CodableAccessibilityCustomContentList.CodableEntry.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

void protocol witness for Decodable.init(from:) in conformance CodableAccessibilityCustomContentList.CodableEntry(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityCustomContentList.CodableEntry(void *a1)
{
  return CodableAccessibilityCustomContentList.CodableEntry.encode(to:)(a1);
}

uint64_t CodableAccessibilityCustomContentList.encode(to:)(void *a1, uint64_t a2)
{
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityCustomContentList.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys, (uint64_t)&unk_26FA74D48, MEMORY[0x263F8E0C0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v10 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[1] = a2;
  type metadata accessor for [CodableAccessibilityCustomContentList.CodableEntry](0, &lazy cache variable for type metadata for [CodableAccessibilityCustomContentList.CodableEntry], (uint64_t)&type metadata for CodableAccessibilityCustomContentList.CodableEntry, MEMORY[0x263F8D488]);
  lazy protocol witness table accessor for type [CodableAccessibilityCustomContentList.CodableEntry] and conformance <A> [A](&lazy protocol witness table cache variable for type [CodableAccessibilityCustomContentList.CodableEntry] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry and conformance CodableAccessibilityCustomContentList.CodableEntry);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityCustomContentList.CodingKeys()
{
  return 0x45656C6261646F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityCustomContentList.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x45656C6261646F63 && a2 == 0xEE0073656972746ELL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityCustomContentList.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityCustomContentList.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

void *protocol witness for Decodable.init(from:) in conformance CodableAccessibilityCustomContentList@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized CodableAccessibilityCustomContentList.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityCustomContentList(void *a1)
{
  return CodableAccessibilityCustomContentList.encode(to:)(a1, *v1);
}

uint64_t specialized AnyAccessibilityValue.isEqual(to:)(uint64_t a1, void *a2)
{
  v14[3] = &type metadata for AnyAccessibilityValue;
  v14[4] = lazy protocol witness table accessor for type AnyAccessibilityValue and conformance AnyAccessibilityValue();
  v14[0] = swift_allocObject();
  outlined init with copy of AnyAccessibilityValue(a1, v14[0] + 16);
  outlined init with copy of AnyTrackedValue((uint64_t)v14, (uint64_t)v11);
  type metadata accessor for AbstractAnyAccessibilityValue();
  if (swift_dynamicCast())
  {
    v12[0] = v8;
    v12[1] = v9;
    uint64_t v13 = v10;
    uint64_t v4 = a2[3];
    uint64_t v5 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v4);
    char v6 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v5 + 88))(v12, v4, v5);
    outlined destroy of AnyAccessibilityValue((uint64_t)v12);
  }
  else
  {
    uint64_t v10 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v8, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    char v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v6 & 1;
}

uint64_t specialized static AccessibilityCustomContentEntry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v39 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 40);
  char v7 = *(unsigned char *)(a1 + 48);
  uint64_t v34 = *(void *)(a1 + 32);
  uint64_t v36 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v38 = *(void *)(a2 + 32);
  uint64_t v37 = *(void *)(a2 + 40);
  char v32 = *(unsigned char *)(a2 + 48);
  uint64_t v33 = *(void *)(a2 + 56);
  if ((v5 & 0x8000000000000000) == 0)
  {
    if (v10 < 0) {
      return 0;
    }
    if (v4 != v9 || v39 != v8)
    {
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v4 = *(void *)a1;
      char v7 = *(unsigned char *)(a1 + 48);
      uint64_t v5 = *(void *)(a1 + 16);
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        return 0;
      }
    }
    outlined copy of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
    uint64_t v31 = v6;
    outlined copy of Text.Storage(v34, v6, v7);
    swift_bridgeObjectRetain();
    outlined copy of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
    char v11 = v32;
    outlined copy of Text.Storage(v38, v37, v32);
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  if ((v10 & 0x8000000000000000) == 0) {
    return 0;
  }
  if (v5)
  {
    if (v10)
    {
      char v24 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 96);
      uint64_t v29 = *(void *)(a2 + 24);
      uint64_t v15 = *(void *)(a1 + 24);
      outlined copy of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
      uint64_t v31 = v6;
      uint64_t v16 = v6;
      uint64_t v17 = v29;
      outlined copy of Text.Storage(v34, v16, v7);
      swift_bridgeObjectRetain();
      outlined copy of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
      outlined copy of Text.Storage(v38, v37, v32);
      swift_bridgeObjectRetain();
      uint64_t v28 = v15;
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v9, v8, 1);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v4, v39, 1);
      char v27 = v7;
      if ((v24(v9) & 1) == 0) {
        goto LABEL_37;
      }
      goto LABEL_32;
    }
    return 0;
  }
  if (v10) {
    return 0;
  }
  uint64_t v30 = *(void *)(a2 + 24);
  uint64_t v31 = *(void *)(a1 + 40);
  uint64_t v28 = *(void *)(a1 + 24);
  char v27 = *(unsigned char *)(a1 + 48);
  if (v4 == v9 && v39 == v8)
  {
    outlined copy of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
    outlined copy of Text.Storage(v34, v6, v7);
    swift_bridgeObjectRetain();
    uint64_t v17 = v30;
    outlined copy of AccessibilityCustomContentKey.Identifier(v4, v39, v10);
    outlined copy of Text.Storage(v38, v37, v32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v4, v39, 0);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v4, v39, 0);
  }
  else
  {
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined copy of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
    outlined copy of Text.Storage(v34, v6, v7);
    swift_bridgeObjectRetain();
    uint64_t v17 = v30;
    outlined copy of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
    outlined copy of Text.Storage(v38, v37, v32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v9, v8, 0);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v4, v39, 0);
    if ((v23 & 1) == 0)
    {
LABEL_37:
      outlined consume of Text.Storage(v9, v8, v10 & 1);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v4, v39, v5 & 1);
      swift_bridgeObjectRelease();
      outlined consume of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
      outlined consume of Text.Storage(v38, v37, v32);
      swift_bridgeObjectRelease();
      outlined consume of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
      outlined consume of Text.Storage(v34, v31, v27);
      goto LABEL_35;
    }
  }
LABEL_32:
  char v25 = specialized static Array<A>.== infix(_:_:)(v28, v17);
  outlined consume of Text.Storage(v9, v8, v10 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v4, v39, v5 & 1);
  swift_bridgeObjectRelease();
  char v7 = v27;
  char v11 = v32;
  if ((v25 & 1) == 0)
  {
    outlined consume of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
    outlined consume of Text.Storage(v38, v37, v32);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
    uint64_t v18 = v34;
    uint64_t v19 = v31;
    char v20 = v27;
    goto LABEL_34;
  }
LABEL_7:
  if ((v7 & 1) == 0)
  {
    if ((v11 & 1) == 0)
    {
      char v26 = v7;
      uint64_t v12 = v34;
      uint64_t v14 = v31;
      if ((v34 != v38 || v31 != v37) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_30;
      }
      goto LABEL_22;
    }
    outlined consume of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
    outlined consume of Text.Storage(v38, v37, 1);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
    uint64_t v18 = v34;
    uint64_t v19 = v31;
    char v20 = 0;
LABEL_34:
    outlined consume of Text.Storage(v18, v19, v20);
LABEL_35:
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((v11 & 1) == 0)
  {
    outlined consume of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
    outlined consume of Text.Storage(v38, v37, 0);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
    uint64_t v18 = v34;
    uint64_t v19 = v31;
    char v20 = 1;
    goto LABEL_34;
  }
  char v26 = v7;
  uint64_t v12 = v34;
  long long v22 = *(uint64_t (**)(uint64_t))(*(void *)v34 + 96);
  outlined copy of Text.Storage(v34, v31, 1);
  outlined copy of Text.Storage(v38, v37, 1);
  char v13 = v22(v38);
  uint64_t v14 = v31;
  outlined consume of Text.Storage(v38, v37, 1);
  outlined consume of Text.Storage(v34, v31, 1);
  if ((v13 & 1) == 0)
  {
LABEL_30:
    outlined consume of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
    outlined consume of Text.Storage(v38, v37, v32);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
    uint64_t v18 = v12;
    uint64_t v19 = v14;
    char v20 = v26;
    goto LABEL_34;
  }
LABEL_22:
  char v35 = specialized static Array<A>.== infix(_:_:)(v36, v33);
  outlined consume of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
  outlined consume of Text.Storage(v38, v37, v32);
  swift_bridgeObjectRelease();
  outlined consume of AccessibilityCustomContentKey.Identifier(v4, v39, v5);
  outlined consume of Text.Storage(v12, v14, v26);
  swift_bridgeObjectRelease();
  if ((v35 & 1) == 0) {
    return 0;
  }

  return specialized static AccessibilityCustomContentEntry.Value.== infix(_:_:)((uint64_t *)(a1 + 64), (uint64_t *)(a2 + 64));
}

uint64_t specialized static AccessibilityCustomContentEntry.Value.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  outlined init with copy of AccessibilityCustomContentEntry.Value(a1, (uint64_t)v27);
  outlined init with copy of AccessibilityCustomContentEntry.Value(a2, (uint64_t)&v29);
  if (!v28)
  {
    outlined init with copy of AccessibilityCustomContentEntry.Value(v27, (uint64_t)&v22);
    long long v7 = v22;
    char v8 = v23;
    uint64_t v9 = v24;
    if (v32)
    {
      outlined consume of Text.Storage(v22, *((uint64_t *)&v22 + 1), v23);
      swift_bridgeObjectRelease();
LABEL_13:
      _s7SwiftUI4TextV14ResolvedStringVWOhTm_1((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for (AccessibilityCustomContentEntry.Value, AccessibilityCustomContentEntry.Value));
      return 0;
    }
    uint64_t v11 = v25;
    long long v12 = v29;
    char v13 = v30.i8[0];
    uint64_t v14 = v30.i64[1];
    if (v23)
    {
      if (v30.i8[0])
      {
        uint64_t v19 = v31.i64[0];
        uint64_t v18 = *(uint64_t (**)(void))(*(void *)v22 + 96);
        uint64_t v15 = v25;
        outlined copy of Text.Storage(v22, *((uint64_t *)&v22 + 1), 1);
        outlined copy of Text.Storage(v12, *((uint64_t *)&v12 + 1), 1);
        uint64_t v11 = v15;
        LOBYTE(v15) = v18(v12);
        outlined consume of Text.Storage(v12, *((uint64_t *)&v12 + 1), 1);
        outlined consume of Text.Storage(v7, *((uint64_t *)&v7 + 1), 1);
        if ((v15 & 1) == 0) {
          goto LABEL_26;
        }
LABEL_24:
        char v16 = specialized static Array<A>.== infix(_:_:)(v9, v14);
        outlined consume of Text.Storage(v12, *((uint64_t *)&v12 + 1), v13);
        swift_bridgeObjectRelease();
        outlined consume of Text.Storage(v7, *((uint64_t *)&v7 + 1), v8);
        swift_bridgeObjectRelease();
        if (v16)
        {
          BOOL v6 = v11 == v19;
          goto LABEL_6;
        }
        goto LABEL_27;
      }
      char v13 = 0;
      char v8 = 1;
    }
    else
    {
      if ((v30.i8[0] & 1) == 0)
      {
        uint64_t v19 = v31.i64[0];
        if (v22 != v29 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_26;
        }
        goto LABEL_24;
      }
      char v8 = 0;
      char v13 = 1;
    }
LABEL_26:
    outlined consume of Text.Storage(v12, *((uint64_t *)&v12 + 1), v13);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v7, *((uint64_t *)&v7 + 1), v8);
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  if (v28 != 1)
  {
    if (v32 == 2)
    {
      int8x16_t v10 = vorrq_s8(v30, v31);
      if (!(*(void *)&vorr_s8(*(int8x8_t *)v10.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)) | *((void *)&v29 + 1) | (unint64_t)v29))
      {
        outlined destroy of AccessibilityCustomContentEntry.Value((uint64_t)v27);
        return 1;
      }
    }
    goto LABEL_13;
  }
  outlined init with copy of AccessibilityCustomContentEntry.Value(v27, (uint64_t)&v22);
  if (v32 != 1)
  {
    outlined destroy of AnyAccessibilityValue((uint64_t)&v22);
    goto LABEL_13;
  }
  uint64_t v3 = v26;
  uint64_t v4 = v31.i64[1];
  v20[0] = v29;
  v20[1] = v30;
  uint64_t v21 = v31.i64[0];
  char v5 = specialized AnyAccessibilityValue.isEqual(to:)((uint64_t)v20, &v22);
  outlined destroy of AnyAccessibilityValue((uint64_t)&v22);
  if ((v5 & 1) == 0)
  {
    outlined destroy of AnyAccessibilityValue((uint64_t)v20);
LABEL_27:
    outlined destroy of AccessibilityCustomContentEntry.Value((uint64_t)v27);
    return 0;
  }
  BOOL v6 = v3 == v4;
  outlined destroy of AnyAccessibilityValue((uint64_t)v20);
LABEL_6:
  outlined destroy of AccessibilityCustomContentEntry.Value((uint64_t)v27);
  return v6;
}

BOOL specialized static AccessibilityCustomContentKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  char v7 = *(unsigned char *)(a1 + 48);
  uint64_t v9 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  char v13 = *(unsigned char *)(a2 + 48);
  uint64_t v14 = *(void *)(a2 + 56);
  if (v4 < 0)
  {
    if ((v10 & 0x8000000000000000) == 0) {
      return 0;
    }
    if (v4)
    {
      if ((v10 & 1) == 0) {
        return 0;
      }
      uint64_t v31 = *(void *)(a2 + 40);
      uint64_t v32 = *(void *)(a1 + 40);
      uint64_t v33 = *(void *)(a2 + 56);
      uint64_t v36 = *(void *)(a1 + 56);
      char v28 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 96);
      uint64_t v34 = *(void *)(a1 + 24);
      uint64_t v35 = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v9, v8, 1);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v2, v3, 1);
      if ((v28(v9) & 1) == 0)
      {
LABEL_28:
        outlined consume of Text.Storage(v9, v8, v10 & 1);
        swift_bridgeObjectRelease();
        outlined consume of Text.Storage(v2, v3, v4 & 1);
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      if (v10) {
        return 0;
      }
      uint64_t v35 = *(void *)(a2 + 24);
      uint64_t v36 = *(void *)(a1 + 56);
      uint64_t v31 = *(void *)(a2 + 40);
      uint64_t v32 = *(void *)(a1 + 40);
      uint64_t v33 = *(void *)(a2 + 56);
      uint64_t v34 = *(void *)(a1 + 24);
      if (v2 == v9 && v3 == v8)
      {
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v2, v3, 0);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v2, v3, 0);
      }
      else
      {
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v9, v8, 0);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v2, v3, 0);
        if ((v29 & 1) == 0) {
          goto LABEL_28;
        }
      }
    }
    char v30 = specialized static Array<A>.== infix(_:_:)(v34, v35);
    outlined consume of Text.Storage(v9, v8, v10 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v2, v3, v4 & 1);
    swift_bridgeObjectRelease();
    uint64_t v5 = v32;
    uint64_t v14 = v33;
    uint64_t v11 = v31;
    if (v30) {
      goto LABEL_6;
    }
    return 0;
  }
  if (v10 < 0) {
    return 0;
  }
  uint64_t v36 = *(void *)(a1 + 56);
  if (v2 == v9 && v3 == v8) {
    goto LABEL_6;
  }
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 56);
  uint64_t v17 = *(void *)(a1 + 40);
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v11 = v15;
  uint64_t v5 = v17;
  uint64_t v14 = v16;
  char v19 = v18;
  BOOL result = 0;
  if (v19)
  {
LABEL_6:
    if (v7)
    {
      if ((v13 & 1) == 0) {
        return 0;
      }
      uint64_t v21 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 96);
      uint64_t v22 = v14;
      uint64_t v23 = v5;
      uint64_t v24 = v11;
      outlined copy of Text.Storage(v6, v5, 1);
      outlined copy of Text.Storage(v12, v24, 1);
      char v25 = v21(v12);
      outlined consume of Text.Storage(v12, v24, 1);
      outlined consume of Text.Storage(v6, v23, 1);
      uint64_t v14 = v22;
      if ((v25 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v13) {
        return 0;
      }
      if (v6 != v12 || v5 != v11)
      {
        uint64_t v26 = v14;
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v14 = v26;
        if ((v27 & 1) == 0) {
          return 0;
        }
      }
    }
    return (specialized static Array<A>.== infix(_:_:)(v36, v14) & 1) != 0;
  }
  return result;
}

uint64_t outlined init with copy of AccessibilityCustomContentEntry.Value(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyAccessibilityValue(uint64_t a1)
{
  return a1;
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in AXCustomContentImportance()
{
  return MEMORY[0x263F8DA00];
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Encodable in AXCustomContentImportance()
{
  return MEMORY[0x263F8D9D8];
}

uint64_t outlined copy of AccessibilityCustomContentKey.Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0) {
    outlined copy of Text.Storage(a1, a2, a3 & 1);
  }

  return swift_bridgeObjectRetain();
}

uint64_t destroy for AccessibilityCustomContentKey(uint64_t a1)
{
  outlined consume of AccessibilityCustomContentKey.Identifier(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
  outlined consume of Text.Storage(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));

  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of AccessibilityCustomContentKey.Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0) {
    outlined consume of Text.Storage(a1, a2, a3 & 1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityCustomContentKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  outlined copy of AccessibilityCustomContentKey.Identifier(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  LOBYTE(v6) = *(unsigned char *)(a2 + 48);
  outlined copy of Text.Storage(v8, v9, v6);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityCustomContentKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  outlined copy of AccessibilityCustomContentKey.Identifier(*(void *)a2, v5, v6);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  outlined consume of AccessibilityCustomContentKey.Identifier(v8, v9, v10);
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  LOBYTE(v6) = *(unsigned char *)(a2 + 48);
  outlined copy of Text.Storage(v11, v12, v6);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  char v15 = *(unsigned char *)(a1 + 48);
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v12;
  *(unsigned char *)(a1 + 48) = v6;
  outlined consume of Text.Storage(v13, v14, v15);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityCustomContentKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  outlined consume of AccessibilityCustomContentKey.Identifier(v4, v5, v6);
  char v8 = *(unsigned char *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  char v11 = *(unsigned char *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = v8;
  outlined consume of Text.Storage(v9, v10, v11);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityCustomContentKey(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 16) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityCustomContentKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)BOOL result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)BOOL result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 2 * -a2;
      *(void *)(result + 24) = 0;
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityCustomContentKey()
{
  return &type metadata for AccessibilityCustomContentKey;
}

uint64_t destroy for AccessibilityCustomContentEntry(uint64_t a1)
{
  outlined consume of AccessibilityCustomContentKey.Identifier(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
  outlined consume of Text.Storage(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
  uint64_t result = swift_bridgeObjectRelease();
  if (*(unsigned char *)(a1 + 112) == 1)
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  }
  else if (!*(unsigned char *)(a1 + 112))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityCustomContentEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  outlined copy of AccessibilityCustomContentKey.Identifier(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  LOBYTE(v6) = *(unsigned char *)(a2 + 48);
  outlined copy of Text.Storage(v8, v9, v6);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  int v10 = *(unsigned __int8 *)(a2 + 112);
  swift_bridgeObjectRetain();
  if (v10 == 1)
  {
    long long v15 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 88) = v15;
    (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 64, a2 + 64);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(unsigned char *)(a1 + 112) = 1;
  }
  else if (v10)
  {
    long long v16 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v16;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 64);
    uint64_t v12 = *(void *)(a2 + 72);
    int v13 = *(unsigned __int8 *)(a2 + 80);
    outlined copy of Text.Storage(v11, v12, *(unsigned char *)(a2 + 80));
    *(void *)(a1 + 64) = v11;
    *(void *)(a1 + 72) = v12;
    *(unsigned char *)(a1 + 80) = v13;
    uint64_t v14 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = v14;
    *(unsigned char *)(a1 + 112) = 0;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityCustomContentEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  outlined copy of AccessibilityCustomContentKey.Identifier(*(void *)a2, v5, v6);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  outlined consume of AccessibilityCustomContentKey.Identifier(v8, v9, v10);
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  LOBYTE(v6) = *(unsigned char *)(a2 + 48);
  outlined copy of Text.Storage(v11, v12, v6);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  char v15 = *(unsigned char *)(a1 + 48);
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v12;
  *(unsigned char *)(a1 + 48) = v6;
  outlined consume of Text.Storage(v13, v14, v15);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of AccessibilityCustomContentEntry.Value(a1 + 64);
    if (*(unsigned char *)(a2 + 112) == 1)
    {
      uint64_t v19 = *(void *)(a2 + 88);
      *(void *)(a1 + 88) = v19;
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1 + 64, a2 + 64);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(unsigned char *)(a1 + 112) = 1;
    }
    else if (*(unsigned char *)(a2 + 112))
    {
      long long v20 = *(_OWORD *)(a2 + 64);
      long long v21 = *(_OWORD *)(a2 + 80);
      long long v22 = *(_OWORD *)(a2 + 96);
      *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
      *(_OWORD *)(a1 + 80) = v21;
      *(_OWORD *)(a1 + 96) = v22;
      *(_OWORD *)(a1 + 64) = v20;
    }
    else
    {
      uint64_t v16 = *(void *)(a2 + 64);
      uint64_t v17 = *(void *)(a2 + 72);
      char v18 = *(unsigned char *)(a2 + 80);
      outlined copy of Text.Storage(v16, v17, v18);
      *(void *)(a1 + 64) = v16;
      *(void *)(a1 + 72) = v17;
      *(unsigned char *)(a1 + 80) = v18;
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 112) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t outlined destroy of AccessibilityCustomContentEntry.Value(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for AccessibilityCustomContentEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  outlined consume of AccessibilityCustomContentKey.Identifier(v4, v5, v6);
  char v8 = *(unsigned char *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  char v11 = *(unsigned char *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = v8;
  outlined consume of Text.Storage(v9, v10, v11);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of AccessibilityCustomContentEntry.Value(a1 + 64);
    long long v12 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v12;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityCustomContentEntry(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 113)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 16) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityCustomContentEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 112) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 2 * -a2;
      *(void *)(result + 24) = 0;
      return result;
    }
    *(unsigned char *)(result + 113) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityCustomContentEntry()
{
  return &type metadata for AccessibilityCustomContentEntry;
}

uint64_t destroy for AccessibilityCustomContentKey.Identifier(uint64_t *a1)
{
  return outlined consume of AccessibilityCustomContentKey.Identifier(*a1, a1[1], a1[2]);
}

uint64_t *initializeWithCopy for AccessibilityCustomContentKey.Identifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of AccessibilityCustomContentKey.Identifier(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for AccessibilityCustomContentKey.Identifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of AccessibilityCustomContentKey.Identifier(*a2, v4, v5);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of AccessibilityCustomContentKey.Identifier(v7, v8, v9);
  return a1;
}

uint64_t *assignWithTake for AccessibilityCustomContentKey.Identifier(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  long long v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v6;
  outlined consume of AccessibilityCustomContentKey.Identifier(v3, v5, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityCustomContentKey.Identifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 16) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityCustomContentKey.Identifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 2 * -a2;
      *(void *)(result + 24) = 0;
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for AccessibilityCustomContentKey.Identifier(uint64_t a1)
{
  return *(void *)(a1 + 16) >> 63;
}

uint64_t destructiveProjectEnumData for AccessibilityCustomContentKey.Identifier(uint64_t result)
{
  *(void *)(result + 16) &= ~0x8000000000000000;
  return result;
}

uint64_t destructiveInjectEnumTag for AccessibilityCustomContentKey.Identifier(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = *(void *)(result + 16) & 1 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityCustomContentKey.Identifier()
{
  return &type metadata for AccessibilityCustomContentKey.Identifier;
}

ValueMetadata *type metadata accessor for CodableAccessibilityCustomContentList()
{
  return &type metadata for CodableAccessibilityCustomContentList;
}

uint64_t destroy for AccessibilityCustomContentEntry.Value(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 48);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)result + 2;
  }
  if (v1 == 1)
  {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  else if (!v1)
  {
    outlined consume of Text.Storage(*(void *)result, *(void *)(result + 8), *(unsigned char *)(result + 16));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityCustomContentEntry.Value(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 48);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    long long v9 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v9;
    (**(void (***)(uint64_t, uint64_t *))(v9 - 8))(a1, a2);
    *(void *)(a1 + 40) = a2[5];
    char v10 = 1;
LABEL_8:
    *(unsigned char *)(a1 + 48) = v10;
    return a1;
  }
  if (v4)
  {
    long long v11 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    char v10 = *((unsigned char *)a2 + 48);
    goto LABEL_8;
  }
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  char v7 = *((unsigned char *)a2 + 16);
  outlined copy of Text.Storage(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  uint64_t v8 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 48) = 0;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityCustomContentEntry.Value(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 48);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else if (!v4)
    {
      outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 48);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v9 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v9 - 8))(a1, a2);
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(unsigned char *)(a1 + 48) = 1;
    }
    else if (v5)
    {
      long long v10 = *a2;
      long long v11 = a2[1];
      long long v12 = a2[2];
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
      *(_OWORD *)(a1 + 16) = v11;
      *(_OWORD *)(a1 + 32) = v12;
      *(_OWORD *)a1 = v10;
    }
    else
    {
      uint64_t v6 = *(void *)a2;
      uint64_t v7 = *((void *)a2 + 1);
      char v8 = *((unsigned char *)a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v7, v8);
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v7;
      *(unsigned char *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      *(unsigned char *)(a1 + 48) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t assignWithTake for AccessibilityCustomContentEntry.Value(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 48);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else if (!v4)
    {
      outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 48);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    }
    else
    {
      if (!v5)
      {
        long long v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v6;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 48) = 0;
        return a1;
      }
      long long v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      LOBYTE(v5) = *(unsigned char *)(a2 + 48);
    }
    *(unsigned char *)(a1 + 48) = v5;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityCustomContentEntry.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AccessibilityCustomContentEntry.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for AccessibilityCustomContentEntry.Value(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 48);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for AccessibilityCustomContentEntry.Value(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityCustomContentEntry.Value()
{
  return &type metadata for AccessibilityCustomContentEntry.Value;
}

uint64_t specialized static AccessibilityCustomContentKey.Identifier.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a7;
  if (a3 < 0)
  {
    if ((a7 & 0x8000000000000000) == 0) {
      return 0;
    }
    char v16 = a3;
    if (a3)
    {
      if ((a7 & 1) == 0) {
        return 0;
      }
      uint64_t v17 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 96);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(a5, a6, 1);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(a1, a2, 1);
      if ((v17(a5) & 1) == 0)
      {
LABEL_22:
        outlined consume of Text.Storage(a5, a6, v8 & 1);
        swift_bridgeObjectRelease();
        outlined consume of Text.Storage(a1, a2, v16 & 1);
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      if (a7) {
        return 0;
      }
      if (a1 == a5 && a2 == a6)
      {
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(a1, a2, 0);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(a1, a2, 0);
      }
      else
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(a5, a6, 0);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(a1, a2, 0);
        if ((v18 & 1) == 0) {
          goto LABEL_22;
        }
      }
    }
    char v19 = specialized static Array<A>.== infix(_:_:)(a4, a8);
    outlined consume of Text.Storage(a5, a6, v8 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(a1, a2, v16 & 1);
    swift_bridgeObjectRelease();
    return (v19 & 1) != 0;
  }
  if (a7 < 0) {
    return 0;
  }
  if (a1 == a5 && a2 == a6) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t specialized CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7261656C63 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6174726F706D69 && a2 == 0xEA00000000006563)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized CodableAccessibilityCustomContentList.CodableEntry.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4B656C6261646F63 && a2 == 0xEA00000000007965;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x56656C6261646F63 && a2 == 0xEC00000065756C61)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *specialized CodableAccessibilityCustomContentList.init(from:)(void *a1)
{
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys, (uint64_t)&unk_26FA74D48, MEMORY[0x263F8E040]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  long long v7 = (char *)v11 - v6;
  char v8 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys();
  uint64_t v9 = v8;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    type metadata accessor for [CodableAccessibilityCustomContentList.CodableEntry](0, &lazy cache variable for type metadata for [CodableAccessibilityCustomContentList.CodableEntry], (uint64_t)&type metadata for CodableAccessibilityCustomContentList.CodableEntry, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [CodableAccessibilityCustomContentList.CodableEntry] and conformance <A> [A](&lazy protocol witness table cache variable for type [CodableAccessibilityCustomContentList.CodableEntry] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry and conformance CodableAccessibilityCustomContentList.CodableEntry);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v9 = (void *)v11[1];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v9;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodingKeys and conformance CodableAccessibilityCustomContentList.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry and conformance CodableAccessibilityCustomContentList.CodableEntry()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry and conformance CodableAccessibilityCustomContentList.CodableEntry;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry and conformance CodableAccessibilityCustomContentList.CodableEntry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry and conformance CodableAccessibilityCustomContentList.CodableEntry);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry and conformance CodableAccessibilityCustomContentList.CodableEntry;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry and conformance CodableAccessibilityCustomContentList.CodableEntry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry and conformance CodableAccessibilityCustomContentList.CodableEntry);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [CodableAccessibilityCustomContentList.CodableEntry] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for [CodableAccessibilityCustomContentList.CodableEntry](255, &lazy cache variable for type metadata for [CodableAccessibilityCustomContentList.CodableEntry], (uint64_t)&type metadata for CodableAccessibilityCustomContentList.CodableEntry, MEMORY[0x263F8D488]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for (AccessibilityCustomContentEntry.Value, AccessibilityCustomContentEntry.Value)()
{
  if (!lazy cache variable for type metadata for (AccessibilityCustomContentEntry.Value, AccessibilityCustomContentEntry.Value))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AccessibilityCustomContentEntry.Value, AccessibilityCustomContentEntry.Value));
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnyAccessibilityValue and conformance AnyAccessibilityValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyAccessibilityValue and conformance AnyAccessibilityValue;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValue and conformance AnyAccessibilityValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue and conformance AnyAccessibilityValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyAccessibilityValue and conformance AnyAccessibilityValue;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValue and conformance AnyAccessibilityValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue and conformance AnyAccessibilityValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyAccessibilityValue and conformance AnyAccessibilityValue;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValue and conformance AnyAccessibilityValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue and conformance AnyAccessibilityValue);
  }
  return result;
}

uint64_t sub_245CA86CC()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t outlined init with copy of AnyAccessibilityValue(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t type metadata accessor for AbstractAnyAccessibilityValue()
{
  unint64_t result = lazy cache variable for type metadata for AbstractAnyAccessibilityValue;
  if (!lazy cache variable for type metadata for AbstractAnyAccessibilityValue)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AbstractAnyAccessibilityValue);
  }
  return result;
}

uint64_t outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for [CodableAccessibilityCustomContentList.CodableEntry](0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for [CodableAccessibilityCustomContentList.CodableEntry](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void destroy for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 == 1) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  else {
    outlined consume of AccessibilityText.Storage(*(void **)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  }
}

uint64_t initializeWithCopy for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 40);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t *))(v5 - 8))(a1, a2);
    char v6 = 1;
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    outlined copy of AccessibilityText.Storage((void *)*a2, v8, v9);
    char v6 = 0;
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
  }
  *(unsigned char *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else {
      outlined consume of AccessibilityText.Storage(*(void **)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v6 = a2[3];
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
      char v7 = 1;
    }
    else
    {
      uint64_t v8 = *a2;
      uint64_t v9 = a2[1];
      char v10 = *((unsigned char *)a2 + 16);
      outlined copy of AccessibilityText.Storage((void *)*a2, v9, v10);
      char v7 = 0;
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v9;
      *(unsigned char *)(a1 + 16) = v10;
      *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
    }
    *(unsigned char *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else {
      outlined consume of AccessibilityText.Storage(*(void **)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      char v7 = 1;
    }
    else
    {
      char v7 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    }
    *(unsigned char *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content()
{
  return &type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content;
}

void *type metadata accessor for CodableAccessibilityCustomContentList.CodingKeys()
{
  return &unk_26FA74D48;
}

void destroy for CodableAccessibilityCustomContentList.CodableEntry(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) != 0xFF) {
    outlined consume of AccessibilityText.Storage(*(void **)a1, *(void *)(a1 + 8), *(_WORD *)(a1 + 16) & 1);
  }
  __int16 v2 = *(_WORD *)(a1 + 40);
  if ((_BYTE)v2 != 0xFF) {
    outlined consume of AccessibilityText.Storage(*(void **)(a1 + 24), *(void *)(a1 + 32), v2 & 1);
  }
  int v3 = *(unsigned __int8 *)(a1 + 96);
  if (v3 != 255)
  {
    if (v3)
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 56);
    }
    else
    {
      unsigned int v4 = *(void **)(a1 + 56);
      uint64_t v5 = *(void *)(a1 + 64);
      char v6 = *(unsigned char *)(a1 + 72);
      outlined consume of AccessibilityText.Storage(v4, v5, v6);
    }
  }
}

uint64_t initializeWithCopy for CodableAccessibilityCustomContentList.CodableEntry(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *((unsigned __int16 *)a2 + 8);
  if (*((unsigned char *)a2 + 16) == 0xFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  }
  else
  {
    unsigned int v5 = v4 >> 8;
    char v6 = v4 & 1;
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v8, v4 & 1);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v6;
    *(unsigned char *)(a1 + 17) = v5;
  }
  unsigned int v9 = *((unsigned __int16 *)a2 + 20);
  if (*((unsigned char *)a2 + 40) == 0xFF)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  }
  else
  {
    unsigned int v10 = v9 >> 8;
    char v11 = v9 & 1;
    long long v12 = (void *)a2[3];
    uint64_t v13 = a2[4];
    outlined copy of AccessibilityText.Storage(v12, v13, v9 & 1);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v13;
    *(unsigned char *)(a1 + 40) = v11;
    *(unsigned char *)(a1 + 41) = v10;
  }
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  uint64_t v14 = (_OWORD *)(a1 + 56);
  char v15 = a2 + 7;
  int v16 = *((unsigned __int8 *)a2 + 96);
  if (v16 == 255)
  {
    long long v17 = *(_OWORD *)(a2 + 9);
    *uint64_t v14 = *v15;
    *(_OWORD *)(a1 + 72) = v17;
    *(_OWORD *)(a1 + 81) = *(_OWORD *)((char *)a2 + 81);
  }
  else if (v16)
  {
    long long v21 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 80) = v21;
    (**(void (***)(_OWORD *, _OWORD *))(v21 - 8))(v14, v15);
    *(unsigned char *)(a1 + 96) = 1;
  }
  else
  {
    char v18 = (void *)a2[7];
    uint64_t v19 = a2[8];
    char v20 = *((unsigned char *)a2 + 72);
    outlined copy of AccessibilityText.Storage(v18, v19, v20);
    *(void *)(a1 + 56) = v18;
    *(void *)(a1 + 64) = v19;
    *(unsigned char *)(a1 + 72) = v20;
    *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
    *(unsigned char *)(a1 + 96) = 0;
  }
  *(void *)(a1 + 104) = a2[13];
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityCustomContentList.CodableEntry(uint64_t a1, uint64_t *a2)
{
  __int16 v4 = *((_WORD *)a2 + 8);
  if (*(unsigned __int8 *)(a1 + 16) != 0xFF)
  {
    if (v4 == 255)
    {
      outlined destroy of AccessibilityText(a1);
      __int16 v6 = *((_WORD *)a2 + 8);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = v6;
      goto LABEL_9;
    }
    char v10 = v4 & 1;
    uint64_t v11 = *a2;
    uint64_t v12 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v12, v4 & 1);
    uint64_t v13 = *(void **)a1;
    uint64_t v14 = *(void *)(a1 + 8);
    char v15 = *(unsigned char *)(a1 + 16);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    *(unsigned char *)(a1 + 16) = v10;
    outlined consume of AccessibilityText.Storage(v13, v14, v15);
  }
  else
  {
    if (v4 == 255)
    {
      long long v5 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
      *(_OWORD *)a1 = v5;
      goto LABEL_9;
    }
    char v7 = v4 & 1;
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v9, v4 & 1);
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v9;
    *(unsigned char *)(a1 + 16) = v7;
  }
  *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
LABEL_9:
  int v16 = (_OWORD *)(a1 + 24);
  long long v17 = a2 + 3;
  __int16 v18 = *((_WORD *)a2 + 20);
  if (*(unsigned __int8 *)(a1 + 40) != 0xFF)
  {
    if (v18 == 255)
    {
      outlined destroy of AccessibilityText(a1 + 24);
      __int16 v20 = *((_WORD *)a2 + 20);
      *int v16 = *v17;
      *(_WORD *)(a1 + 40) = v20;
      goto LABEL_17;
    }
    char v24 = v18 & 1;
    char v25 = (void *)a2[3];
    uint64_t v26 = a2[4];
    outlined copy of AccessibilityText.Storage(v25, v26, v18 & 1);
    char v27 = *(void **)(a1 + 24);
    uint64_t v28 = *(void *)(a1 + 32);
    char v29 = *(unsigned char *)(a1 + 40);
    *(void *)(a1 + 24) = v25;
    *(void *)(a1 + 32) = v26;
    *(unsigned char *)(a1 + 40) = v24;
    outlined consume of AccessibilityText.Storage(v27, v28, v29);
  }
  else
  {
    if (v18 == 255)
    {
      long long v19 = *v17;
      *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
      *int v16 = v19;
      goto LABEL_17;
    }
    char v21 = v18 & 1;
    long long v22 = (void *)a2[3];
    uint64_t v23 = a2[4];
    outlined copy of AccessibilityText.Storage(v22, v23, v18 & 1);
    *(void *)(a1 + 24) = v22;
    *(void *)(a1 + 32) = v23;
    *(unsigned char *)(a1 + 40) = v21;
  }
  *(unsigned char *)(a1 + 41) = *((unsigned char *)a2 + 41);
LABEL_17:
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  char v30 = (long long *)(a1 + 56);
  uint64_t v31 = (long long *)(a2 + 7);
  int v32 = *((unsigned __int8 *)a2 + 96);
  if (*(unsigned __int8 *)(a1 + 96) == 255)
  {
    if (v32 == 255)
    {
      long long v35 = *v31;
      long long v36 = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 81) = *(_OWORD *)((char *)a2 + 81);
      *char v30 = v35;
      *(_OWORD *)(a1 + 72) = v36;
      goto LABEL_27;
    }
    if (v32)
    {
LABEL_24:
      uint64_t v37 = a2[10];
      *(void *)(a1 + 80) = v37;
      *(void *)(a1 + 88) = a2[11];
      (**(void (***)(uint64_t, uint64_t))(v37 - 8))(a1 + 56, (uint64_t)(a2 + 7));
      *(unsigned char *)(a1 + 96) = 1;
      goto LABEL_27;
    }
LABEL_26:
    uint64_t v38 = (void *)a2[7];
    uint64_t v39 = a2[8];
    char v40 = *((unsigned char *)a2 + 72);
    outlined copy of AccessibilityText.Storage(v38, v39, v40);
    *(void *)(a1 + 56) = v38;
    *(void *)(a1 + 64) = v39;
    *(unsigned char *)(a1 + 72) = v40;
    *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
    *(unsigned char *)(a1 + 96) = 0;
    goto LABEL_27;
  }
  if (v32 != 255)
  {
    if ((uint64_t *)a1 == a2) {
      goto LABEL_27;
    }
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1 + 56);
    if (a2[12]) {
      goto LABEL_24;
    }
    goto LABEL_26;
  }
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1 + 56);
  long long v33 = *(_OWORD *)((char *)a2 + 81);
  long long v34 = *(_OWORD *)(a2 + 9);
  *char v30 = *v31;
  *(_OWORD *)(a1 + 72) = v34;
  *(_OWORD *)(a1 + 81) = v33;
LABEL_27:
  uint64_t v41 = a2[13];
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(void *)(a1 + 104) = v41;
  return a1;
}

uint64_t outlined destroy of AccessibilityText(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityCustomContentList.CodableEntry(uint64_t a1, uint64_t a2)
{
  __int16 v4 = *(_WORD *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16) == 0xFF) {
    goto LABEL_4;
  }
  __int16 v5 = *(_WORD *)(a2 + 16);
  if ((_BYTE)v5 == 0xFF)
  {
    outlined destroy of AccessibilityText(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    goto LABEL_6;
  }
  __int16 v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  outlined consume of AccessibilityText.Storage(v6, v7, v4 & 1);
  *(unsigned char *)(a1 + 17) = HIBYTE(v5) & 1;
LABEL_6:
  uint64_t v8 = (_OWORD *)(a2 + 24);
  __int16 v9 = *(_WORD *)(a1 + 40);
  if (*(unsigned char *)(a1 + 40) == 0xFF)
  {
LABEL_9:
    *(_OWORD *)(a1 + 24) = *v8;
    *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
    goto LABEL_11;
  }
  __int16 v10 = *(_WORD *)(a2 + 40);
  if ((_BYTE)v10 == 0xFF)
  {
    outlined destroy of AccessibilityText(a1 + 24);
    goto LABEL_9;
  }
  uint64_t v11 = *(void **)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *v8;
  *(unsigned char *)(a1 + 40) = v10 & 1;
  outlined consume of AccessibilityText.Storage(v11, v12, v9 & 1);
  *(unsigned char *)(a1 + 41) = HIBYTE(v10) & 1;
LABEL_11:
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  if (*(unsigned __int8 *)(a1 + 96) == 255)
  {
LABEL_15:
    long long v13 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v13;
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
    goto LABEL_16;
  }
  if (*(unsigned __int8 *)(a2 + 96) == 255 || a1 != a2)
  {
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1 + 56);
    goto LABEL_15;
  }
LABEL_16:
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 113)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 112) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 113) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry()
{
  return &type metadata for CodableAccessibilityCustomContentList.CodableEntry;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue);
  }
  return result;
}

uint64_t outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of CodableAccessibilityCustomContentList.CodableEntry(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText;
  if (!lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText;
  if (!lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText);
  }
  return result;
}

uint64_t outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t *a1, uint64_t a2)
{
  return a2;
}

void *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys()
{
  return &unk_26FA74970;
}

void *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.TextCodingKeys()
{
  return &unk_26FA74A00;
}

unsigned char *storeEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x245CA99A4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.ValueCodingKeys()
{
  return &unk_26FA748E0;
}

void *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry.CodingKeys()
{
  return &unk_26FA74C38;
}

void destroy for CodableAccessibilityCustomContentList.CodableEntry.CodableKey(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) != 0xFF) {
    outlined consume of AccessibilityText.Storage(*(void **)a1, *(void *)(a1 + 8), *(_WORD *)(a1 + 16) & 1);
  }
  __int16 v2 = *(_WORD *)(a1 + 40);
  if ((_BYTE)v2 != 0xFF)
  {
    int v3 = *(void **)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 32);
    outlined consume of AccessibilityText.Storage(v3, v4, v2 & 1);
  }
}

uint64_t initializeWithCopy for CodableAccessibilityCustomContentList.CodableEntry.CodableKey(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *((unsigned __int16 *)a2 + 8);
  if (*((unsigned char *)a2 + 16) == 0xFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  }
  else
  {
    unsigned int v5 = v4 >> 8;
    char v6 = v4 & 1;
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v8, v4 & 1);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v6;
    *(unsigned char *)(a1 + 17) = v5;
  }
  unsigned int v9 = *((unsigned __int16 *)a2 + 20);
  if (*((unsigned char *)a2 + 40) == 0xFF)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  }
  else
  {
    unsigned int v10 = v9 >> 8;
    char v11 = v9 & 1;
    long long v13 = (void *)a2[3];
    uint64_t v12 = a2[4];
    outlined copy of AccessibilityText.Storage(v13, v12, v9 & 1);
    *(void *)(a1 + 24) = v13;
    *(void *)(a1 + 32) = v12;
    *(unsigned char *)(a1 + 40) = v11;
    *(unsigned char *)(a1 + 41) = v10;
  }
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityCustomContentList.CodableEntry.CodableKey(uint64_t a1, uint64_t *a2)
{
  __int16 v4 = *((_WORD *)a2 + 8);
  if (*(unsigned __int8 *)(a1 + 16) != 0xFF)
  {
    if (v4 == 255)
    {
      outlined destroy of AccessibilityText(a1);
      __int16 v6 = *((_WORD *)a2 + 8);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = v6;
      goto LABEL_9;
    }
    char v10 = v4 & 1;
    uint64_t v11 = *a2;
    uint64_t v12 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v12, v4 & 1);
    long long v13 = *(void **)a1;
    uint64_t v14 = *(void *)(a1 + 8);
    char v15 = *(unsigned char *)(a1 + 16);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    *(unsigned char *)(a1 + 16) = v10;
    outlined consume of AccessibilityText.Storage(v13, v14, v15);
  }
  else
  {
    if (v4 == 255)
    {
      long long v5 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
      *(_OWORD *)a1 = v5;
      goto LABEL_9;
    }
    char v7 = v4 & 1;
    uint64_t v8 = (void *)*a2;
    uint64_t v9 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v9, v4 & 1);
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v9;
    *(unsigned char *)(a1 + 16) = v7;
  }
  *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
LABEL_9:
  int v16 = (_OWORD *)(a1 + 24);
  long long v17 = a2 + 3;
  __int16 v18 = *((_WORD *)a2 + 20);
  if (*(unsigned __int8 *)(a1 + 40) != 0xFF)
  {
    if (v18 != 255)
    {
      char v24 = v18 & 1;
      char v25 = (void *)a2[3];
      uint64_t v26 = a2[4];
      outlined copy of AccessibilityText.Storage(v25, v26, v18 & 1);
      char v27 = *(void **)(a1 + 24);
      uint64_t v28 = *(void *)(a1 + 32);
      char v29 = *(unsigned char *)(a1 + 40);
      *(void *)(a1 + 24) = v25;
      *(void *)(a1 + 32) = v26;
      *(unsigned char *)(a1 + 40) = v24;
      outlined consume of AccessibilityText.Storage(v27, v28, v29);
      goto LABEL_16;
    }
    outlined destroy of AccessibilityText(a1 + 24);
    __int16 v20 = *((_WORD *)a2 + 20);
    *int v16 = *v17;
    *(_WORD *)(a1 + 40) = v20;
  }
  else
  {
    if (v18 != 255)
    {
      char v21 = v18 & 1;
      long long v22 = (void *)a2[3];
      uint64_t v23 = a2[4];
      outlined copy of AccessibilityText.Storage(v22, v23, v18 & 1);
      *(void *)(a1 + 24) = v22;
      *(void *)(a1 + 32) = v23;
      *(unsigned char *)(a1 + 40) = v21;
LABEL_16:
      *(unsigned char *)(a1 + 41) = *((unsigned char *)a2 + 41);
      return a1;
    }
    long long v19 = *v17;
    *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
    *int v16 = v19;
  }
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityCustomContentList.CodableEntry.CodableKey(uint64_t a1, uint64_t a2)
{
  __int16 v4 = *(_WORD *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16) == 0xFF) {
    goto LABEL_4;
  }
  __int16 v5 = *(_WORD *)(a2 + 16);
  if ((_BYTE)v5 == 0xFF)
  {
    outlined destroy of AccessibilityText(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    goto LABEL_6;
  }
  __int16 v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  outlined consume of AccessibilityText.Storage(v6, v7, v4 & 1);
  *(unsigned char *)(a1 + 17) = HIBYTE(v5) & 1;
LABEL_6:
  uint64_t v8 = a2 + 24;
  __int16 v9 = *(_WORD *)(a1 + 40);
  if (*(unsigned char *)(a1 + 40) != 0xFF)
  {
    __int16 v10 = *(_WORD *)(a2 + 40);
    if ((_BYTE)v10 != 0xFF)
    {
      uint64_t v11 = *(void **)(a1 + 24);
      uint64_t v12 = *(void *)(a1 + 32);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)v8;
      *(unsigned char *)(a1 + 40) = v10 & 1;
      outlined consume of AccessibilityText.Storage(v11, v12, v9 & 1);
      *(unsigned char *)(a1 + 41) = HIBYTE(v10) & 1;
      return a1;
    }
    outlined destroy of AccessibilityText(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v8;
  *(_WORD *)(a1 + 40) = *(_WORD *)(v8 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry.CodableKey(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry.CodableKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 42) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = ~(_BYTE)a2;
    }
  }
  return result;
}

void *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry.CodableKey()
{
  return &unk_26FA74860;
}

void destroy for CodableAccessibilityCustomContentList.CodableEntry.CodableValue(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 48);
  if (v1 != 255)
  {
    if (v1) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    }
    else {
      outlined consume of AccessibilityText.Storage(*(void **)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
    }
  }
}

uint64_t initializeWithCopy for CodableAccessibilityCustomContentList.CodableEntry.CodableValue(uint64_t a1, char *a2)
{
  char v5 = *a2;
  int v4 = a2 + 8;
  *(unsigned char *)a1 = v5;
  __int16 v6 = (_OWORD *)(a1 + 8);
  int v7 = a2[48];
  if (v7 == 255)
  {
    long long v8 = v4[1];
    *__int16 v6 = *v4;
    v6[1] = v8;
    *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v4 + 25);
  }
  else if (v7)
  {
    long long v12 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v12;
    (**(void (***)(_OWORD *, _OWORD *))(v12 - 8))(v6, v4);
    *(unsigned char *)(a1 + 48) = 1;
  }
  else
  {
    __int16 v9 = (void *)*((void *)a2 + 1);
    uint64_t v10 = *((void *)a2 + 2);
    char v11 = a2[24];
    outlined copy of AccessibilityText.Storage(v9, v10, v11);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v10;
    *(unsigned char *)(a1 + 24) = v11;
    *(unsigned char *)(a1 + 25) = a2[25];
    *(unsigned char *)(a1 + 48) = 0;
  }
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(unsigned char *)(a1 + 64) = a2[64];
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityCustomContentList.CodableEntry.CodableValue(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  int v4 = (long long *)(a1 + 8);
  char v5 = (long long *)(a2 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 48);
  if (*(unsigned __int8 *)(a1 + 48) == 255)
  {
    if (v6 == 255)
    {
      long long v9 = *v5;
      long long v10 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
      *int v4 = v9;
      *(_OWORD *)(a1 + 24) = v10;
      goto LABEL_11;
    }
    if (v6)
    {
LABEL_8:
      uint64_t v11 = *(void *)(a2 + 32);
      *(void *)(a1 + 32) = v11;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      (**(void (***)(long long *, long long *))(v11 - 8))(v4, v5);
      *(unsigned char *)(a1 + 48) = 1;
      goto LABEL_11;
    }
LABEL_10:
    long long v12 = *(void **)(a2 + 8);
    uint64_t v13 = *(void *)(a2 + 16);
    char v14 = *(unsigned char *)(a2 + 24);
    outlined copy of AccessibilityText.Storage(v12, v13, v14);
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v13;
    *(unsigned char *)(a1 + 24) = v14;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
    *(unsigned char *)(a1 + 48) = 0;
    goto LABEL_11;
  }
  if (v6 != 255)
  {
    if (a1 == a2) {
      goto LABEL_11;
    }
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1 + 8);
    if (*(unsigned char *)(a2 + 48)) {
      goto LABEL_8;
    }
    goto LABEL_10;
  }
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1 + 8);
  long long v7 = *(long long *)((char *)v5 + 25);
  long long v8 = v5[1];
  *int v4 = *v5;
  v4[1] = v8;
  *(long long *)((char *)v4 + 25) = v7;
LABEL_11:
  uint64_t v15 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v15;
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityCustomContentList.CodableEntry.CodableValue(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  int v4 = (_OWORD *)(a1 + 8);
  if (*(unsigned __int8 *)(a1 + 48) == 255) {
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(a2 + 48) == 255 || a1 != a2)
  {
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1 + 8);
LABEL_7:
    long long v6 = *(_OWORD *)(a2 + 24);
    *int v4 = *(_OWORD *)(a2 + 8);
    v4[1] = v6;
    *(_OWORD *)((char *)v4 + 25) = *(_OWORD *)(a2 + 33);
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry.CodableValue(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[65]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry.CodableValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue()
{
  return &unk_26FA74BB0;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys);
  }
  return result;
}

uint64_t outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content and conformance CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content);
  }
  return result;
}

uint64_t outlined assign with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for [CodableAccessibilityCustomContentList.CodableEntry](0, &lazy cache variable for type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?, (uint64_t)&type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ProxyCodable<AXCustomContentImportance?>()
{
  if (!lazy cache variable for type metadata for ProxyCodable<AXCustomContentImportance?>)
  {
    type metadata accessor for AXCustomContentImportance?();
    lazy protocol witness table accessor for type AXCustomContentImportance? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for ProxyCodable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ProxyCodable<AXCustomContentImportance?>);
    }
  }
}

void type metadata accessor for AXCustomContentImportance?()
{
  if (!lazy cache variable for type metadata for AXCustomContentImportance?)
  {
    type metadata accessor for AXCustomContentImportance(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AXCustomContentImportance?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AXCustomContentImportance? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type AXCustomContentImportance? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AXCustomContentImportance? and conformance <A> A?)
  {
    type metadata accessor for AXCustomContentImportance?();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AXCustomContentImportance? and conformance <A> A?);
  }
  return result;
}

uint64_t outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue(char *a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for KeyedDecodingContainer<CodableAccessibilityCustomContentList.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ProxyCodable<AXCustomContentImportance?> and conformance ProxyCodable<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ProxyCodable<AXCustomContentImportance?>();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245CAAAE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.CodingKeys()
{
  return &unk_26FA74B20;
}

unsigned char *storeEnumTagSinglePayload for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245CAABE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CodableAccessibilityCustomContentList.CodableEntry.CodableKey.CodingKeys()
{
  return &unk_26FA747D0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TextShape.Exclusion(double *a1, double *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  if (a1[2] == a2[2]) {
    return a1[1] == a2[1];
  }
  return 0;
}

void static TextShape.bounds.getter(void *a1@<X8>)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 2;
}

uint64_t static TextShape.excludeTop(_:size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *(void *)a2 = result & 1;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  return result;
}

unsigned char *TextShape.resolve(in:layoutDirection:)@<X0>(unsigned char *result@<X0>, void *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v5 = *v4;
  if (v5 == 2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[3] = 0;
    a2[4] = 0;
    a2[2] = 4;
    return result;
  }
  long long v6 = *(_OWORD *)(v4 + 8);
  if (v5)
  {
    if (*result) {
      goto LABEL_5;
    }
LABEL_7:
    uint64_t v7 = 3;
    goto LABEL_8;
  }
  if (*result) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v7 = 1;
LABEL_8:
  if (a3 == INFINITY) {
    a3 = 1.79769313e308;
  }
  if (a4 == INFINITY) {
    a4 = 1.79769313e308;
  }
  *(double *)a2 = a3;
  *((double *)a2 + 1) = a4;
  a2[2] = v7;
  *(_OWORD *)(a2 + 3) = v6;
  return result;
}

void TextShape.Resolved.init()(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 4;
}

__n128 TextShape.Resolved.init(boundsSize:kind:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  unint64_t v4 = a1[1].n128_u64[0];
  a2->n128_f64[0] = a3;
  a2->n128_f64[1] = a4;
  __n128 result = *a1;
  a2[1] = *a1;
  a2[2].n128_u64[0] = v4;
  return result;
}

BOOL static TextShape.Resolved.Kind.== infix(_:_:)(double *a1, double *a2)
{
  uint64_t v2 = *(unsigned __int8 *)a1;
  uint64_t v3 = *(unsigned __int8 *)a2;
  if (v2 == 4) {
    return v3 == 4;
  }
  if (v3 == 4 || v2 != v3) {
    return 0;
  }
  if (a1[2] == a2[2]) {
    return a1[1] == a2[1];
  }
  return 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TextShape.Resolved.Kind(double *a1, double *a2)
{
  uint64_t v2 = *(unsigned __int8 *)a1;
  uint64_t v3 = *(unsigned __int8 *)a2;
  if (v2 == 4) {
    return v3 == 4;
  }
  if (v3 == 4 || v2 != v3) {
    return 0;
  }
  if (a1[2] == a2[2]) {
    return a1[1] == a2[1];
  }
  return 0;
}

uint64_t TextShape.Resolved.exclusionPaths.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 == 4) {
    return MEMORY[0x263F8EE78];
  }
  double v3 = *(double *)(v0 + 24);
  CGFloat v4 = *(double *)(v0 + 32);
  double v5 = 0.0;
  if (v1 == 3) {
    double v6 = *(double *)v0 - v3;
  }
  else {
    double v6 = 0.0;
  }
  type metadata accessor for _ContiguousArrayStorage<Path>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Path>, (uint64_t)&type metadata for Path, MEMORY[0x263F8E0F8]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2461B9DC0;
  v9.origin.double y = 0.0;
  v9.origin.double x = v6;
  v9.size.width = v3;
  v9.size.height = v4;
  if (CGRectIsNull(v9))
  {
    char v7 = 6;
    double v3 = 0.0;
    CGFloat v4 = 0.0;
  }
  else
  {
    char v7 = 0;
    double v5 = v6;
  }
  *(double *)(v2 + 32) = v5;
  *(void *)(v2 + 40) = 0;
  *(double *)(v2 + 48) = v3;
  *(CGFloat *)(v2 + 56) = v4;
  *(unsigned char *)(v2 + 64) = v7;
  return v2;
}

double *TextShape.Resolved.adjustLayout(width:height:targetWidth:)(double *result, double *a2, uint64_t a3, char a4)
{
  uint64_t v5 = *(unsigned __int8 *)(v4 + 16);
  if (v5 == 4) {
    return result;
  }
  double v6 = *(double *)(v4 + 32);
  if (v5 != 3)
  {
    if (v5 != 1)
    {
      __n128 result = (double *)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    if (a4) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if ((a4 & 1) == 0)
  {
LABEL_7:
    *(void *)__n128 result = a3;
    goto LABEL_8;
  }
  *__n128 result = *(double *)(v4 + 24) + *result;
LABEL_8:
  if (*a2 > v6) {
    double v6 = *a2;
  }
  *a2 = v6;
  return result;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.__Key_textShape(void *a1@<X8>)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 2;
}

uint64_t EnvironmentValues.textShape.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.textShape.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2, v3, v4);
  swift_release();
  if (v1[1])
  {
    uint64_t v6 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.textWrappingTop(horizontalAlignment:size:isEnabled:)(char a1, char a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  if (a2) {
    uint64_t v8 = a1 & 1;
  }
  else {
    uint64_t v8 = 2;
  }
  if ((a2 & 1) == 0) {
    a5 = 0.0;
  }
  if ((a2 & 1) == 0) {
    a6 = 0.0;
  }
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  v13[0] = v8;
  *(double *)&v13[1] = a5;
  *(double *)&v13[2] = a6;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)v13, a3, a4);
  return swift_release();
}

double key path getter for EnvironmentValues.textShape : EnvironmentValues@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v7);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v7);
  }
  swift_release_n();
  uint64_t v5 = v8;
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v5;
  return result;
}

BOOL specialized static TextShape.Resolved.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
    return 0;
  }
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v4 = *(unsigned __int8 *)(a2 + 16);
  if (v3 != 4) {
    return v4 != 4
  }
        && v3 == v4
        && *(double *)(a1 + 24) == *(double *)(a2 + 24)
        && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  return v4 == 4;
}

uint64_t specialized static TextShape.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  if (*(void *)a1 == 2)
  {
    if (v2 == 2) {
      return 1;
    }
  }
  else if (v2 != 2 {
         && ((*(void *)a2 ^ *(void *)a1) & 1) == 0
  }
         && *(double *)(a1 + 8) == *(double *)(a2 + 8)
         && *(double *)(a1 + 16) == *(double *)(a2 + 16))
  {
    return 1;
  }
  return 0;
}

uint64_t sub_245CAB4B4(long long *a1)
{
  uint64_t v1 = *((void *)a1 + 2);
  long long v3 = *a1;
  uint64_t v4 = v1;
  return EnvironmentValues.textShape.setter((uint64_t *)&v3);
}

uint64_t getEnumTagSinglePayload for TextShape(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[24]) {
    return (*(_DWORD *)a1 + 254);
  }
  if (*a1 <= 2u) {
    int v3 = 2;
  }
  else {
    int v3 = *a1;
  }
  int v4 = v3 - 3;
  if (*a1 < 2u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TextShape(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)double result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)double result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextShape()
{
  return &type metadata for TextShape;
}

uint64_t getEnumTagSinglePayload for TextShape.Resolved(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 252);
  }
  if (*(unsigned __int8 *)(a1 + 16) <= 4u) {
    int v3 = 4;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 16);
  }
  int v4 = v3 - 5;
  if (*(unsigned __int8 *)(a1 + 16) < 4u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TextShape.Resolved(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)double result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextShape.Resolved()
{
  return &type metadata for TextShape.Resolved;
}

uint64_t getEnumTagSinglePayload for TextShape.Resolved.Kind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && a1[24]) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 4;
  unsigned int v5 = v3 - 4;
  if (!v4) {
    unsigned int v5 = -1;
  }
  if (v5 + 1 >= 2) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TextShape.Resolved.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)double result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)double result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)double result = a2 + 4;
    }
  }
  return result;
}

uint64_t getEnumTag for TextShape.Resolved.Kind(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 4) {
    return v1 - 3;
  }
  else {
    return 0;
  }
}

void *destructiveInjectEnumTag for TextShape.Resolved.Kind(void *result, unsigned int a2)
{
  if (a2 > 0xFC)
  {
    result[1] = 0;
    result[2] = 0;
    *double result = a2 - 253;
  }
  else if (a2)
  {
    *(unsigned char *)double result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextShape.Resolved.Kind()
{
  return &type metadata for TextShape.Resolved.Kind;
}

uint64_t sub_245CAB724()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _ContiguousArrayStorage<Path>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for TextShape.Exclusion(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[24]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TextShape.Exclusion(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)double result = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for TextShape.Exclusion()
{
  return &unk_26FA8B998;
}

ValueMetadata *type metadata accessor for EnvironmentValues.__Key_textShape()
{
  return &type metadata for EnvironmentValues.__Key_textShape;
}

uint64_t AccessibilityHeadingLevel.rawValue.getter(uint64_t result)
{
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityHeadingLevel@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized AccessibilityHeadingLevel.init(protobufValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t AccessibilityHeadingLevel.codingProxy.getter(uint64_t result)
{
  return result;
}

unint64_t protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance AccessibilityHeadingLevel@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized static AccessibilityHeadingLevel.unwrap(codingProxy:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance AccessibilityHeadingLevel@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized AccessibilityHeadingLevel.init(protobufValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t specialized AccessibilityHeadingLevel.init(protobufValue:)(unint64_t result)
{
  if (result >= 7) {
    return 7;
  }
  return result;
}

unint64_t specialized static AccessibilityHeadingLevel.unwrap(codingProxy:)(unint64_t result)
{
  if (result >= 7) {
    return 0;
  }
  else {
    return result;
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityHeadingLevel and conformance AccessibilityHeadingLevel()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityHeadingLevel and conformance AccessibilityHeadingLevel;
  if (!lazy protocol witness table cache variable for type AccessibilityHeadingLevel and conformance AccessibilityHeadingLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityHeadingLevel and conformance AccessibilityHeadingLevel);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityHeadingLevel(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245CABA84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityHeadingLevel()
{
  return &type metadata for AccessibilityHeadingLevel;
}

uint64_t _TrimmedShape.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _TrimmedShape.shape.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_TrimmedShape.shape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _TrimmedShape.startFraction.getter(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 36));
}

uint64_t _TrimmedShape.startFraction.setter(uint64_t result, double a2)
{
  *(double *)(v2 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t (*_TrimmedShape.startFraction.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _TrimmedShape.endFraction.getter(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 40));
}

uint64_t _TrimmedShape.endFraction.setter(uint64_t result, double a2)
{
  *(double *)(v2 + *(int *)(result + 40)) = a2;
  return result;
}

uint64_t (*_TrimmedShape.endFraction.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _TrimmedShape.init(shape:startFraction:endFraction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  uint64_t result = type metadata accessor for _TrimmedShape();
  *(double *)(a3 + *(int *)(result + 36)) = a4;
  *(double *)(a3 + *(int *)(result + 40)) = a5;
  return result;
}

uint64_t static _TrimmedShape.role.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t _TrimmedShape.animatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v10 = (char *)v15 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 24))(v5, v6, v8);
  double v11 = *(double *)(v2 + *(int *)(a1 + 40));
  v15[0] = *(double *)(v2 + *(int *)(a1 + 36)) * 128.0;
  v15[1] = v11 * 128.0;
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  uint64_t v13 = v12;
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  return AnimatablePair.init(_:_:)((uint64_t)v10, (uint64_t)v15, AssociatedTypeWitness, v13, a2);
}

uint64_t _TrimmedShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  specialized _TrimmedShape.animatableData.setter(a1, a2);
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  uint64_t v3 = type metadata accessor for AnimatablePair();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
}

void (*_TrimmedShape.animatableData.modify(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  _OWORD v5[5] = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  uint64_t v8 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v10 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  *uint64_t v5 = AssociatedTypeWitness;
  v5[1] = v8;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v10;
  uint64_t v11 = type metadata accessor for AnimatablePair();
  v5[6] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[7] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v5[8] = malloc(v13);
  char v14 = malloc(v13);
  v5[9] = v14;
  _TrimmedShape.animatableData.getter(a2, (uint64_t)v14);
  return _TrimmedShape.animatableData.modify;
}

void _TrimmedShape.animatableData.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  unsigned int v4 = *(void **)(*(void *)a1 + 72);
  uint64_t v5 = *(void *)(*(void *)a1 + 48);
  uint64_t v6 = *(void *)(*(void *)a1 + 56);
  uint64_t v7 = *(void *)(*(void *)a1 + 32);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 64), v4, v5);
    double v8 = specialized _TrimmedShape.animatableData.setter((uint64_t)v3, v7);
    uint64_t v9 = *(void (**)(void *, uint64_t, double))(v6 + 8);
    v9(v3, v5, v8);
    ((void (*)(void *, uint64_t))v9)(v4, v5);
  }
  else
  {
    double v10 = specialized _TrimmedShape.animatableData.setter(*(void *)(*(void *)a1 + 72), v7);
    (*(void (**)(void *, uint64_t, double))(v6 + 8))(v4, v5, v10);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t _TrimmedShape.sizeThatFits(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(*(void *)(a5 + 24) + 48))();
}

uint64_t protocol witness for static Shape.role.getter in conformance _TrimmedShape<A>(uint64_t a1)
{
  return static _TrimmedShape.role.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance _TrimmedShape<A>(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  return _TrimmedShape.sizeThatFits(_:)(a1, a2 & 1, a3, a4 & 1, a5);
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance _TrimmedShape<A>(uint64_t a1, uint64_t a2)
{
  specialized _TrimmedShape.animatableData.setter(a1, a2);
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  uint64_t v3 = type metadata accessor for AnimatablePair();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
}

void (*protocol witness for Animatable.animatableData.modify in conformance _TrimmedShape<A>(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = v2;
  _OWORD v5[5] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  uint64_t v8 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v10 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  *uint64_t v5 = AssociatedTypeWitness;
  v5[1] = v8;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v10;
  uint64_t v11 = type metadata accessor for AnimatablePair();
  v5[6] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[7] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v5[8] = malloc(v13);
  char v14 = malloc(v13);
  v5[9] = v14;
  _TrimmedShape.animatableData.getter(a2, (uint64_t)v14);
  return protocol witness for Animatable.animatableData.modify in conformance _TrimmedShape<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance _TrimmedShape<A>(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  unsigned int v4 = *(void **)(*(void *)a1 + 72);
  uint64_t v5 = *(void *)(*(void *)a1 + 48);
  uint64_t v6 = *(void *)(*(void *)a1 + 56);
  uint64_t v7 = *(void *)(*(void *)a1 + 40);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 64), v4, v5);
    double v8 = specialized _TrimmedShape.animatableData.setter((uint64_t)v3, v7);
    uint64_t v9 = *(void (**)(void *, uint64_t, double))(v6 + 8);
    v9(v3, v5, v8);
    ((void (*)(void *, uint64_t))v9)(v4, v5);
  }
  else
  {
    double v10 = specialized _TrimmedShape.animatableData.setter(*(void *)(*(void *)a1 + 72), v7);
    (*(void (**)(void *, uint64_t, double))(v6 + 8))(v4, v5, v10);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t Shape.trim(from:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v9 = *(void *)(a1 - 8);
  double v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v4, a1, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v12, a1);
  uint64_t result = type metadata accessor for _TrimmedShape();
  *(double *)(a2 + *(int *)(result + 36)) = a3;
  *(double *)(a2 + *(int *)(result + 40)) = a4;
  return result;
}

double specialized _TrimmedShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) + 8);
  *(double *)&uint64_t v7 = COERCE_DOUBLE(swift_getAssociatedTypeWitness());
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  double v10 = (char *)&v19 - v9;
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  double v12 = v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v14 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  double v19 = *(double *)&v7;
  double v20 = v12;
  uint64_t v21 = AssociatedConformanceWitness;
  unint64_t v22 = v14;
  uint64_t v15 = type metadata accessor for AnimatablePair();
  AnimatablePair.subscript.getter((uint64_t)v10, (uint64_t)&v19, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v10, v5, v6);
  AnimatablePair.subscript.getter((uint64_t)v10, (uint64_t)&v19, v15);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  double v16 = v20;
  uint64_t v17 = *(int *)(a2 + 40);
  *(double *)(v3 + *(int *)(a2 + 36)) = v19 * 0.0078125;
  double result = v16 * 0.0078125;
  *(double *)(v3 + v17) = v16 * 0.0078125;
  return result;
}

uint64_t sub_245CAC730@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _TrimmedShape();
  return _TrimmedShape.animatableData.getter(v2, a1);
}

double sub_245CAC76C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _TrimmedShape();
  return specialized _TrimmedShape.animatableData.setter(a1, v2);
}

uint64_t sub_245CAC7AC()
{
  return 16;
}

__n128 sub_245CAC7B8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _TrimmedShape(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    double v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    double v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *double v10 = *v11;
    *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for _TrimmedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for _TrimmedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for _TrimmedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for _TrimmedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _TrimmedShape(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245CACC20);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for _TrimmedShape(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            double v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245CACDE8);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t sub_245CACE10()
{
  type metadata accessor for _TrimmedShape();

  return swift_getWitnessTable();
}

double static Gesture.makeDebuggableGesture(gesture:inputs:)@<D0>(_DWORD *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  int v7 = *((_DWORD *)a2 + 30);
  LODWORD(v20[0]) = *a1;
  long long v8 = a2[5];
  long long v27 = a2[4];
  long long v28 = v8;
  long long v29 = a2[6];
  uint64_t v30 = *((void *)a2 + 14);
  long long v9 = a2[1];
  long long v23 = *a2;
  long long v24 = v9;
  long long v10 = a2[3];
  long long v25 = a2[2];
  long long v26 = v10;
  int v31 = v7;
  (*(void (**)(double *__return_ptr, void *, long long *))(a3 + 32))(&v32, v20, &v23);
  if ((v7 & 8) != 0 && !(swift_conformsToProtocol2() ? v4 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol()) {
      char v12 = 2;
    }
    else {
      char v12 = 1;
    }
    char v22 = v12;
    long long v13 = a2[5];
    long long v27 = a2[4];
    long long v28 = v13;
    long long v29 = a2[6];
    uint64_t v30 = *((void *)a2 + 14);
    long long v14 = a2[1];
    long long v23 = *a2;
    long long v24 = v14;
    long long v15 = a2[3];
    long long v25 = a2[2];
    long long v26 = v15;
    int v31 = v7;
    *(double *)double v20 = v32;
    v20[1] = v33;
    int v21 = v34;
    swift_getAssociatedTypeWitness();
    type metadata accessor for _GestureOutputs();
    unint64_t v16 = _GestureOutputs.debugData.getter();
    LOBYTE(v20[0]) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v4, &v22, 0x100000000, &v23, v16 | ((HIDWORD(v16) & 1) << 32), 0x100000000);
  }
  uint64_t v17 = v33;
  int v18 = v34;
  double result = v32;
  *(double *)a4 = v32;
  *(void *)(a4 + 8) = v17;
  *(_DWORD *)(a4 + 16) = v18;
  return result;
}

uint64_t _GestureOutputs.wrapDebugOutputs<A, B, C>(_:kind:properties:inputs:combiningOutputs:)(uint64_t result, char *a2, unint64_t a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(a4 + 120);
  if ((v4 & 8) != 0)
  {
    uint64_t v6 = result;
    v15[0] = *a2;
    long long v7 = *(_OWORD *)(a4 + 80);
    v12[4] = *(_OWORD *)(a4 + 64);
    void v12[5] = v7;
    void v12[6] = *(_OWORD *)(a4 + 96);
    uint64_t v13 = *(void *)(a4 + 112);
    long long v8 = *(_OWORD *)(a4 + 16);
    v12[0] = *(_OWORD *)a4;
    v12[1] = v8;
    long long v9 = *(_OWORD *)(a4 + 48);
    _OWORD v12[2] = *(_OWORD *)(a4 + 32);
    v12[3] = v9;
    int v14 = v4;
    swift_bridgeObjectRetain();
    type metadata accessor for _GestureOutputs();
    unint64_t v10 = _GestureOutputs.debugData.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    type metadata accessor for _GestureOutputs();
    unint64_t v11 = _GestureOutputs.debugData.getter();
    swift_bridgeObjectRelease();
    return _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v6, v15, a3 | ((HIDWORD(a3) & 1) << 32), v12, v10 | ((HIDWORD(v10) & 1) << 32), v11 | ((HIDWORD(v11) & 1) << 32));
  }
  return result;
}

double static GestureModifier.makeDebuggableGesture(modifier:inputs:body:)@<D0>(_DWORD *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  int v7 = *((_DWORD *)a2 + 30);
  LODWORD(v20[0]) = *a1;
  long long v8 = a2[5];
  long long v27 = a2[4];
  long long v28 = v8;
  long long v29 = a2[6];
  uint64_t v30 = *((void *)a2 + 14);
  long long v9 = a2[1];
  long long v23 = *a2;
  long long v24 = v9;
  long long v10 = a2[3];
  long long v25 = a2[2];
  long long v26 = v10;
  int v31 = v7;
  (*(void (**)(double *__return_ptr, void *, long long *))(a3 + 24))(&v32, v20, &v23);
  if ((v7 & 8) != 0 && !(swift_conformsToProtocol2() ? v4 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol()) {
      char v12 = 2;
    }
    else {
      char v12 = 1;
    }
    char v22 = v12;
    long long v13 = a2[5];
    long long v27 = a2[4];
    long long v28 = v13;
    long long v29 = a2[6];
    uint64_t v30 = *((void *)a2 + 14);
    long long v14 = a2[1];
    long long v23 = *a2;
    long long v24 = v14;
    long long v15 = a2[3];
    long long v25 = a2[2];
    long long v26 = v15;
    int v31 = v7;
    *(double *)double v20 = v32;
    v20[1] = v33;
    int v21 = v34;
    swift_getAssociatedTypeWitness();
    type metadata accessor for _GestureOutputs();
    unint64_t v16 = _GestureOutputs.debugData.getter();
    LOBYTE(v20[0]) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v4, &v22, 0x100000000, &v23, v16 | ((HIDWORD(v16) & 1) << 32), 0x100000000);
  }
  uint64_t v17 = v33;
  int v18 = v34;
  double result = v32;
  *(double *)a4 = v32;
  *(void *)(a4 + 8) = v17;
  *(_DWORD *)(a4 + 16) = v18;
  return result;
}

BOOL static GestureDebug.Kind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void GestureDebug.Kind.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int GestureDebug.Kind.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void GestureDebug.Data.kind.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *GestureDebug.Data.kind.setter(unsigned char *result)
{
  *Swift::UInt v1 = *result;
  return result;
}

uint64_t (*GestureDebug.Data.kind.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t GestureDebug.Data.type.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t GestureDebug.Data.type.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*GestureDebug.Data.type.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void GestureDebug.Data.phase.getter(_WORD *a1@<X8>)
{
  *a1 = *(_WORD *)(v1 + 16);
}

_WORD *GestureDebug.Data.phase.setter(_WORD *result)
{
  *(_WORD *)(v1 + 16) = *result;
  return result;
}

uint64_t (*GestureDebug.Data.phase.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t GestureDebug.Data.attribute.getter()
{
  return *(unsigned int *)(v0 + 20);
}

uint64_t GestureDebug.Data.attribute.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 20) = result;
  return result;
}

uint64_t (*GestureDebug.Data.attribute.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t GestureDebug.Data.resetSeed.getter()
{
  return *(unsigned int *)(v0 + 24);
}

uint64_t GestureDebug.Data.resetSeed.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*GestureDebug.Data.resetSeed.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double GestureDebug.Data.frame.getter()
{
  return *(double *)(v0 + 32);
}

void GestureDebug.Data.frame.setter(double a1, double a2, double a3, double a4)
{
  v4[4] = a1;
  v4[5] = a2;
  v4[6] = a3;
  v4[7] = a4;
}

uint64_t (*GestureDebug.Data.frame.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t GestureDebug.Data.properties.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 72);
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v5 = *(void *)(v1 + 88);
  uint64_t v6 = *(void *)(v1 + 96);
  uint64_t v7 = *(void *)(v1 + 104);
  uint64_t v8 = *(void *)(v1 + 112);
  uint64_t v9 = *(void *)(v1 + 120);
  char v10 = *(unsigned char *)(v1 + 128);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 64) = v10;
  return outlined copy of ArrayWith2Inline<(String, String)>.Storage(v2, v3, v4, v5, v6, v7, v8, v9, v10);
}

__n128 GestureDebug.Data.properties.setter(long long *a1)
{
  long long v7 = a1[1];
  long long v8 = *a1;
  __n128 v6 = (__n128)a1[2];
  uint64_t v2 = *((void *)a1 + 6);
  uint64_t v3 = *((void *)a1 + 7);
  char v4 = *((unsigned char *)a1 + 64);
  outlined consume of ArrayWith2Inline<(String, String)>.Storage(*(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88), *(void *)(v1 + 96), *(void *)(v1 + 104), *(void *)(v1 + 112), *(void *)(v1 + 120), *(unsigned char *)(v1 + 128));
  *(_OWORD *)(v1 + 64) = v8;
  *(_OWORD *)(v1 + 80) = v7;
  __n128 result = v6;
  *(__n128 *)(v1 + 96) = v6;
  *(void *)(v1 + 112) = v2;
  *(void *)(v1 + 120) = v3;
  *(unsigned char *)(v1 + 128) = v4;
  return result;
}

uint64_t (*GestureDebug.Data.properties.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t GestureDebug.Data.children.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (const void *)(*(void *)(v1 + 136) + 16);
  memcpy(__dst, v3, 0x121uLL);
  memcpy(a1, v3, 0x121uLL);
  return outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of ArrayWith2Inline<GestureDebug.Data>.Storage);
}

void *key path setter for GestureDebug.Data.children : GestureDebug.Data(void *__src, uint64_t a2)
{
  memcpy(__dst, __src, 0x121uLL);
  outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of ArrayWith2Inline<GestureDebug.Data>.Storage);
  swift_release();
  uint64_t v3 = swift_allocObject();
  __n128 result = memcpy((void *)(v3 + 16), __dst, 0x121uLL);
  *(void *)(a2 + 136) = v3;
  return result;
}

void *GestureDebug.Data.children.setter(const void *a1)
{
  swift_release();
  uint64_t v3 = swift_allocObject();
  __n128 result = memcpy((void *)(v3 + 16), a1, 0x121uLL);
  *(void *)(v1 + 136) = v3;
  return result;
}

void (*GestureDebug.Data.children.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x4A8uLL);
  *a1 = v3;
  v3[148] = v1;
  char v4 = (const void *)(*(void *)(v1 + 136) + 16);
  memcpy(v3, v4, 0x121uLL);
  memmove(v3 + 37, v4, 0x121uLL);
  outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)v3, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of ArrayWith2Inline<GestureDebug.Data>.Storage);
  return GestureDebug.Data.children.modify;
}

void GestureDebug.Data.children.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a1 + 37;
  if (a2)
  {
    uint64_t v4 = v2[148];
    memcpy(v2 + 111, v3, 0x121uLL);
    outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)(v2 + 111), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of ArrayWith2Inline<GestureDebug.Data>.Storage);
    swift_release();
    uint64_t v5 = swift_allocObject();
    memcpy((void *)(v5 + 16), v2 + 111, 0x121uLL);
    *(void *)(v4 + 136) = v5;
    memcpy(v2 + 74, v3, 0x121uLL);
    outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)(v2 + 74), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of ArrayWith2Inline<GestureDebug.Data>.Storage);
  }
  else
  {
    uint64_t v6 = v2[148];
    memcpy(__dst, v3, sizeof(__dst));
    swift_release();
    uint64_t v7 = swift_allocObject();
    memcpy((void *)(v7 + 16), __dst, 0x121uLL);
    *(void *)(v6 + 136) = v7;
  }

  free(v2);
}

double GestureDebug.Data.init()@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for EmptyGesture<()>(0, &lazy cache variable for type metadata for EmptyGesture<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for EmptyGesture);
  uint64_t v3 = v2;
  _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi2_((uint64_t)v7);
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v7, (uint64_t)__src, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t (*)(void, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
  uint64_t v4 = swift_allocObject();
  memcpy((void *)(v4 + 16), __src, 0x121uLL);
  int v5 = *MEMORY[0x263F288F8];
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = 768;
  *(_DWORD *)(a1 + 20) = v5;
  *(_DWORD *)(a1 + 24) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(unsigned char *)(a1 + 128) = 3;
  *(void *)(a1 + 136) = v4;
  return result;
}

__n128 GestureDebug.Data.init(kind:type:children:phase:attribute:resetSeed:frame:properties:)@<Q0>(char *a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, __int16 *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, long long *a7@<X6>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>, double a11@<D2>, double a12@<D3>)
{
  char v20 = *a1;
  __int16 v21 = *a4;
  long long v29 = a7[1];
  long long v30 = *a7;
  __n128 v28 = (__n128)a7[2];
  uint64_t v22 = *((void *)a7 + 6);
  uint64_t v23 = *((void *)a7 + 7);
  char v24 = *((unsigned char *)a7 + 64);
  uint64_t v25 = swift_allocObject();
  memcpy((void *)(v25 + 16), a3, 0x121uLL);
  if ((a5 & 0x100000000) != 0) {
    int v26 = *MEMORY[0x263F288F8];
  }
  else {
    int v26 = a5;
  }
  *(unsigned char *)a8 = v20;
  *(void *)(a8 + 8) = a2;
  *(_WORD *)(a8 + 16) = v21;
  *(_DWORD *)(a8 + 20) = v26;
  *(_DWORD *)(a8 + 24) = a6;
  *(double *)(a8 + 32) = a9;
  *(double *)(a8 + 40) = a10;
  *(double *)(a8 + 48) = a11;
  *(double *)(a8 + 56) = a12;
  *(_OWORD *)(a8 + 64) = v30;
  *(_OWORD *)(a8 + 80) = v29;
  __n128 result = v28;
  *(__n128 *)(a8 + 96) = v28;
  *(void *)(a8 + 112) = v22;
  *(void *)(a8 + 120) = v23;
  *(unsigned char *)(a8 + 128) = v24;
  *(void *)(a8 + 136) = v25;
  return result;
}

uint64_t static GestureDebug.Data.defaultValue.getter@<X0>(long long *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  long long v2 = xmmword_268EFAF68;
  void v10[6] = xmmword_268EFAF78;
  v10[7] = xmmword_268EFAF88;
  long long v3 = xmmword_268EFAF88;
  v10[8] = xmmword_268EFAF98;
  long long v4 = xmmword_268EFAF28;
  long long v5 = xmmword_268EFAF38;
  void v10[2] = xmmword_268EFAF38;
  void v10[3] = xmmword_268EFAF48;
  long long v6 = xmmword_268EFAF48;
  long long v7 = xmmword_268EFAF58;
  void v10[4] = xmmword_268EFAF58;
  double v10[5] = xmmword_268EFAF68;
  long long v8 = static GestureDebug.Data.defaultValue;
  v10[0] = static GestureDebug.Data.defaultValue;
  v10[1] = xmmword_268EFAF28;
  a1[6] = xmmword_268EFAF78;
  a1[7] = v3;
  a1[8] = xmmword_268EFAF98;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v2;
  *a1 = v8;
  a1[1] = v4;
  return outlined retain of GestureDebug.Data((uint64_t)v10);
}

uint64_t protocol witness for static Defaultable.defaultValue.getter in conformance GestureDebug.Data@<X0>(long long *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  long long v2 = xmmword_268EFAF68;
  void v10[6] = xmmword_268EFAF78;
  v10[7] = xmmword_268EFAF88;
  long long v3 = xmmword_268EFAF88;
  v10[8] = xmmword_268EFAF98;
  long long v4 = xmmword_268EFAF28;
  long long v5 = xmmword_268EFAF38;
  void v10[2] = xmmword_268EFAF38;
  void v10[3] = xmmword_268EFAF48;
  long long v6 = xmmword_268EFAF48;
  long long v7 = xmmword_268EFAF58;
  void v10[4] = xmmword_268EFAF58;
  double v10[5] = xmmword_268EFAF68;
  long long v8 = static GestureDebug.Data.defaultValue;
  v10[0] = static GestureDebug.Data.defaultValue;
  v10[1] = xmmword_268EFAF28;
  a1[6] = xmmword_268EFAF78;
  a1[7] = v3;
  a1[8] = xmmword_268EFAF98;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v2;
  *a1 = v8;
  a1[1] = v4;
  return outlined retain of GestureDebug.Data((uint64_t)v10);
}

uint64_t Attribute<A>.phase()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  if (*(void *)(*(void *)(type metadata accessor for GesturePhase() - 8) + 64)) {
    closure #1 in Attribute<A>.phase()(1, a2, a3);
  }

  return AGGraphCreateOffsetAttribute2();
}

uint64_t closure #1 in Attribute<A>.phase()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(a3 + 32))(v14);
  uint64_t v6 = v5;
  void v11[2] = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for GesturePhase();
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v11, v12, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v8);
  uint64_t v9 = v13;
  v4(v14, 0);
  return v9;
}

uint64_t _GestureOutputs.wrapDebugOutputs<A>(_:properties:inputs:)(uint64_t result, unint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 120);
  if ((v3 & 8) != 0)
  {
    uint64_t v6 = result;
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol()) {
      char v7 = 2;
    }
    else {
      char v7 = 1;
    }
    char v15 = v7;
    long long v8 = *(_OWORD *)(a3 + 80);
    v12[4] = *(_OWORD *)(a3 + 64);
    void v12[5] = v8;
    void v12[6] = *(_OWORD *)(a3 + 96);
    uint64_t v13 = *(void *)(a3 + 112);
    long long v9 = *(_OWORD *)(a3 + 16);
    v12[0] = *(_OWORD *)a3;
    v12[1] = v9;
    long long v10 = *(_OWORD *)(a3 + 48);
    _OWORD v12[2] = *(_OWORD *)(a3 + 32);
    v12[3] = v10;
    int v14 = v3;
    unint64_t v11 = _GestureOutputs.debugData.getter();
    return _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v6, &v15, a2 | ((HIDWORD(a2) & 1) << 32), v12, v11 | ((HIDWORD(v11) & 1) << 32), 0x100000000);
  }
  return result;
}

uint64_t _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(uint64_t a1, char *a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  char v26 = *a2;
  long long v8 = a4[5];
  v45[4] = a4[4];
  v45[5] = v8;
  *(_OWORD *)uint64_t v46 = a4[6];
  *(_OWORD *)&v46[12] = *(_OWORD *)((char *)a4 + 108);
  long long v9 = a4[1];
  v45[0] = *a4;
  v45[1] = v9;
  long long v10 = a4[3];
  v45[2] = a4[2];
  v45[3] = v10;
  int v11 = *MEMORY[0x263F288F8];
  if ((a3 & 0x100000000) != 0) {
    int v12 = *MEMORY[0x263F288F8];
  }
  else {
    int v12 = a3;
  }
  int v24 = *v6;
  int v25 = v12;
  outlined retain of _GestureInputs((uint64_t)v45);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v13 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  int IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  id v15 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  int v16 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v44 = 0;
  memset(v43, 0, sizeof(v43));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v43, 0);
  AGGraphClearUpdate();
  id v17 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  int v18 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs((uint64_t)v45);
  v30[0] = v26;
  if ((a5 & 0x100000000) != 0) {
    int v19 = v11;
  }
  else {
    int v19 = a5;
  }
  if ((a6 & 0x100000000) != 0) {
    int v20 = v11;
  }
  else {
    int v20 = a6;
  }
  uint64_t v31 = a1;
  int v32 = v25;
  int v33 = v24;
  int v34 = *(_DWORD *)&v46[16];
  int v35 = IndirectAttribute2;
  int v36 = v16;
  int v37 = v18;
  int v38 = v19;
  int v39 = v20;
  uint64_t v41 = type metadata accessor for GestureDebug.Value();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for EmptyGesture<()>(0, &lazy cache variable for type metadata for Attribute<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data, MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v30, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_6, (uint64_t)v40, v41, MEMORY[0x263F8E628], v21, MEMORY[0x263F8E658], v22);
  v30[0] = 0;
  return _GestureOutputs.debugData.setter(v29);
}

void GestureDebug.Value.properties.getter(uint64_t a1@<X8>)
{
  if (*(_DWORD *)(v1 + 16) == *MEMORY[0x263F288F8])
  {
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 64) = -1;
  }
  else
  {
    type metadata accessor for ArrayWith2Inline<(String, String)>();
    uint64_t Value = AGGraphGetValue();
    uint64_t v5 = *(void *)Value;
    uint64_t v4 = *(void *)(Value + 8);
    uint64_t v6 = *(void *)(Value + 16);
    uint64_t v7 = *(void *)(Value + 24);
    uint64_t v8 = *(void *)(Value + 32);
    uint64_t v9 = *(void *)(Value + 40);
    uint64_t v10 = *(void *)(Value + 48);
    uint64_t v11 = *(void *)(Value + 56);
    char v12 = *(unsigned char *)(Value + 64);
    *(void *)a1 = *(void *)Value;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v11;
    *(unsigned char *)(a1 + 64) = v12;
    outlined copy of ArrayWith2Inline<(String, String)>.Storage(v5, v4, v6, v7, v8, v9, v10, v11, v12);
  }
}

uint64_t GestureDebug.Value.phase.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t GestureDebug.Value.debugData1.getter@<X0>(void *a1@<X8>)
{
  if (*(_DWORD *)(v1 + 40) == *MEMORY[0x263F288F8])
  {
    _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOi0_(v12);
    return outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v12, (uint64_t)a1, &lazy cache variable for type metadata for GestureDebug.Data?, MEMORY[0x263F8D8F0]);
  }
  else
  {
    uint64_t Value = (_OWORD *)AGGraphGetValue();
    v12[0] = *Value;
    long long v5 = Value[4];
    long long v7 = Value[1];
    long long v6 = Value[2];
    v12[3] = Value[3];
    v12[4] = v5;
    v12[1] = v7;
    _OWORD v12[2] = v6;
    long long v8 = Value[8];
    long long v10 = Value[5];
    long long v9 = Value[6];
    _OWORD v12[7] = Value[7];
    v12[8] = v8;
    void v12[5] = v10;
    void v12[6] = v9;
    memmove(a1, Value, 0x90uLL);
    _ViewInputs.base.modify(a1, v11);
    return outlined retain of GestureDebug.Data((uint64_t)v12);
  }
}

uint64_t GestureDebug.Value.debugData2.getter@<X0>(void *a1@<X8>)
{
  if (*(_DWORD *)(v1 + 44) == *MEMORY[0x263F288F8])
  {
    _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOi0_(v12);
    return outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v12, (uint64_t)a1, &lazy cache variable for type metadata for GestureDebug.Data?, MEMORY[0x263F8D8F0]);
  }
  else
  {
    uint64_t Value = (_OWORD *)AGGraphGetValue();
    v12[0] = *Value;
    long long v5 = Value[4];
    long long v7 = Value[1];
    long long v6 = Value[2];
    v12[3] = Value[3];
    v12[4] = v5;
    v12[1] = v7;
    _OWORD v12[2] = v6;
    long long v8 = Value[8];
    long long v10 = Value[5];
    long long v9 = Value[6];
    _OWORD v12[7] = Value[7];
    v12[8] = v8;
    void v12[5] = v10;
    void v12[6] = v9;
    memmove(a1, Value, 0x90uLL);
    _ViewInputs.base.modify(a1, v11);
    return outlined retain of GestureDebug.Data((uint64_t)v12);
  }
}

void *GestureDebug.Value.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for GesturePhase();
  uint64_t v55 = *(void *)(v5 - 8);
  uint64_t v56 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v54 = (uint64_t)&v50 - v6;
  int v7 = *v2;
  uint64_t v60 = *((void *)v2 + 1);
  LODWORD(v58) = *((_DWORD *)v2 + 4);
  LODWORD(v6) = *((_DWORD *)v2 + 5);
  unsigned int v8 = *((_DWORD *)v2 + 6);
  int v61 = v7;
  unsigned int v62 = v6;
  unsigned int v9 = *((_DWORD *)v2 + 7);
  unsigned int v10 = *((_DWORD *)v2 + 8);
  unsigned int v12 = *((_DWORD *)v2 + 9);
  unsigned int v11 = *((_DWORD *)v2 + 10);
  unsigned int v13 = *((_DWORD *)v2 + 11);
  uint64_t Value = AGGraphGetValue();
  double v15 = *(double *)Value;
  double v16 = *(double *)(Value + 8);
  double v17 = *(double *)(Value + 16);
  double v18 = *(double *)(Value + 24);
  double v19 = *(double *)(Value + 32);
  swift_retain();
  uint64_t v85 = 0;
  memset(v84, 0, sizeof(v84));
  char v86 = 2;
  char v87 = 2;
  int v20 = (uint64_t *)AGGraphGetValue();
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  uint64_t v59 = a1;
  unint64_t v57 = __PAIR64__(v13, v11);
  unsigned int v53 = v12;
  if (v15 == 0.0 && v18 == 0.0 && v19 == 0.0)
  {
    unsigned int v23 = v10;
    unsigned int v24 = v9;
  }
  else
  {
    unsigned int v23 = v10;
    unsigned int v24 = v9;
    uint64_t v73 = v21;
    uint64_t v74 = v22;
    v83[0] = v15;
    v83[1] = v16;
    v83[2] = v17;
    v83[3] = v18;
    v83[4] = v19;
    specialized ViewTransform.convert(_:_:)((uint64_t)v84, v83, (uint64_t)&v73);
    uint64_t v21 = v73;
    uint64_t v22 = v74;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v84);
  swift_release();
  char v25 = v61;
  LOBYTE(v73) = v61;
  uint64_t v26 = v60;
  uint64_t v74 = v60;
  unint64_t v75 = __PAIR64__(v62, v58);
  unsigned int v27 = v58;
  unint64_t v76 = __PAIR64__(v24, v8);
  unsigned int v28 = v62;
  unsigned int v50 = v8;
  unsigned int v51 = v23;
  unint64_t v77 = __PAIR64__(v53, v23);
  unsigned int v52 = v24;
  unsigned int v29 = v53;
  unsigned int v30 = v57;
  unint64_t v78 = v57;
  GestureDebug.Value.childData.getter(v83);
  LOBYTE(v73) = v25;
  uint64_t v74 = v26;
  unint64_t v75 = __PAIR64__(v28, v27);
  unsigned int v31 = v50;
  unint64_t v76 = __PAIR64__(v24, v50);
  unsigned int v32 = v51;
  unint64_t v77 = __PAIR64__(v29, v51);
  unint64_t v78 = __PAIR64__(HIDWORD(v57), v30);
  int v33 = HIDWORD(v57);
  uint64_t v34 = v54;
  GestureDebug.Value.phase.getter(v54);
  uint64_t v35 = v56;
  GesturePhase.withValue<A>(_:)(v56, MEMORY[0x263F8EE60] + 8, (uint64_t)v82);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v34, v35);
  LODWORD(v56) = v82[0];
  LODWORD(v55) = v82[1];
  LODWORD(v54) = *(_DWORD *)AGGraphGetValue();
  int v36 = (uint64_t *)AGGraphGetValue();
  uint64_t v37 = *v36;
  uint64_t v38 = v36[1];
  char v63 = v61;
  uint64_t v64 = v60;
  int v65 = v58;
  unsigned int v66 = v62;
  unsigned int v67 = v31;
  unsigned int v68 = v52;
  unsigned int v69 = v32;
  unsigned int v70 = v29;
  int v71 = v57;
  int v72 = v33;
  GestureDebug.Value.properties.getter((uint64_t)&v73);
  char v39 = v81;
  if (v81 == 255)
  {
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    unint64_t v40 = 0;
    unint64_t v41 = 0;
    unint64_t v42 = 0;
    unint64_t v44 = 0;
    uint64_t v43 = 0;
    uint64_t v45 = 0;
    char v39 = 3;
  }
  else
  {
    unint64_t v40 = v75;
    uint64_t v58 = v74;
    uint64_t v59 = v73;
    unint64_t v41 = v76;
    unint64_t v42 = v77;
    unint64_t v44 = v78;
    uint64_t v43 = v79;
    uint64_t v45 = v80;
  }
  uint64_t v46 = swift_allocObject();
  __n128 result = memcpy((void *)(v46 + 16), v83, 0x121uLL);
  *(unsigned char *)a2 = v61;
  *(void *)(a2 + 8) = v60;
  *(unsigned char *)(a2 + 16) = v56;
  *(unsigned char *)(a2 + 17) = v55;
  int v48 = v54;
  *(_DWORD *)(a2 + 20) = v62;
  *(_DWORD *)(a2 + 24) = v48;
  *(void *)(a2 + 32) = v21;
  *(void *)(a2 + 40) = v22;
  *(void *)(a2 + 48) = v37;
  *(void *)(a2 + 56) = v38;
  uint64_t v49 = v58;
  *(void *)(a2 + 64) = v59;
  *(void *)(a2 + 72) = v49;
  *(void *)(a2 + 80) = v40;
  *(void *)(a2 + 88) = v41;
  *(void *)(a2 + 96) = v42;
  *(void *)(a2 + 104) = v44;
  *(void *)(a2 + 112) = v43;
  *(void *)(a2 + 120) = v45;
  *(unsigned char *)(a2 + 128) = v39;
  *(void *)(a2 + 136) = v46;
  return result;
}

uint64_t GestureDebug.Value.childData.getter@<X0>(_OWORD *a1@<X8>)
{
  char v2 = *v1;
  uint64_t v3 = *((void *)v1 + 1);
  unsigned int v4 = *((_DWORD *)v1 + 4);
  unsigned int v5 = *((_DWORD *)v1 + 5);
  unsigned int v7 = *((_DWORD *)v1 + 6);
  unsigned int v6 = *((_DWORD *)v1 + 7);
  unsigned int v9 = *((_DWORD *)v1 + 8);
  unsigned int v8 = *((_DWORD *)v1 + 9);
  unsigned int v25 = *((_DWORD *)v1 + 11);
  unsigned int v26 = *((_DWORD *)v1 + 10);
  GestureDebug.Value.debugData1.getter(v47);
  unsigned int v10 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v47, (uint64_t)v48, &lazy cache variable for type metadata for GestureDebug.Data?, MEMORY[0x263F8D8F0]);
  LOBYTE(v28) = v2;
  *((void *)&v28 + 1) = v3;
  *(void *)&long long v29 = __PAIR64__(v5, v4);
  *((void *)&v29 + 1) = __PAIR64__(v6, v7);
  *(void *)&long long v30 = __PAIR64__(v8, v9);
  *((void *)&v30 + 1) = __PAIR64__(v25, v26);
  GestureDebug.Value.debugData2.getter(v46);
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v46, (uint64_t)v49, &lazy cache variable for type metadata for GestureDebug.Data?, v10);
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v48, (uint64_t)&v50, &lazy cache variable for type metadata for GestureDebug.Data?, v10);
  if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)&v50) == 1)
  {
    outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v49, (uint64_t)&v37, &lazy cache variable for type metadata for GestureDebug.Data?, MEMORY[0x263F8D8F0]);
    if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)&v37) == 1)
    {
      _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi2_((uint64_t)&v28);
      return outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)&v28, (uint64_t)a1, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t (*)(void, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
    }
    long long v34 = v43;
    long long v35 = v44;
    long long v36 = v45;
    long long v30 = v39;
    long long v31 = v40;
    long long v32 = v41;
    long long v33 = v42;
    long long v11 = v38;
    long long v12 = v37;
LABEL_7:
    long long v28 = v12;
    long long v29 = v11;
    _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi_((uint64_t)&v28);
    return outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)&v28, (uint64_t)a1, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t (*)(void, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
  }
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v49, (uint64_t)&v37, &lazy cache variable for type metadata for GestureDebug.Data?, MEMORY[0x263F8D8F0]);
  if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)&v37) == 1)
  {
    long long v34 = v56;
    long long v35 = v57;
    long long v36 = v58;
    long long v30 = v52;
    long long v31 = v53;
    long long v32 = v54;
    long long v33 = v55;
    long long v11 = v51;
    long long v12 = v50;
    goto LABEL_7;
  }
  long long v14 = v57;
  a1[6] = v56;
  a1[7] = v14;
  long long v15 = v53;
  a1[2] = v52;
  a1[3] = v15;
  long long v16 = v55;
  a1[4] = v54;
  a1[5] = v16;
  long long v17 = v51;
  *a1 = v50;
  a1[1] = v17;
  long long v18 = v43;
  long long v19 = v44;
  long long v20 = v41;
  a1[14] = v42;
  a1[15] = v18;
  long long v21 = v45;
  a1[16] = v19;
  a1[17] = v21;
  long long v22 = v39;
  long long v23 = v40;
  long long v24 = v37;
  a1[10] = v38;
  a1[11] = v22;
  a1[12] = v23;
  a1[13] = v20;
  a1[8] = v58;
  a1[9] = v24;
  return _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi0_((uint64_t)a1);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance GestureDebug.Value<A>@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOi0_(v3);
  return outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v3, a1, &lazy cache variable for type metadata for GestureDebug.Data?, MEMORY[0x263F8D8F0]);
}

uint64_t GesturePhase.descriptionWithoutValue.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  double v3 = MEMORY[0x270FA5388](a1);
  unsigned int v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v2 + 16))(v5, v3);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  uint64_t result = 0x64656C696166;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
      uint64_t result = 0x657669746361;
      break;
    case 2:
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
      uint64_t result = 0x6465646E65;
      break;
    case 3:
      return result;
    default:
      if ((*(unsigned int (**)(char *, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8) + 48))(v5, 1, *(void *)(a1 + 16)) == 1)
      {
        uint64_t result = 0;
      }
      else
      {
        uint64_t v8 = type metadata accessor for Optional();
        (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v5, v8);
        uint64_t result = 0x656C626973736F70;
      }
      break;
  }
  return result;
}

Swift::Void __swiftcall GestureDebug.Data.printTree()()
{
  char v5 = *v0;
  char v1 = v5;
  long long v11 = *(_OWORD *)(v0 + 81);
  long long v12 = *(_OWORD *)(v0 + 97);
  *(_OWORD *)unsigned int v13 = *(_OWORD *)(v0 + 113);
  *(_OWORD *)&v13[15] = *((_OWORD *)v0 + 8);
  long long v7 = *(_OWORD *)(v0 + 17);
  long long v8 = *(_OWORD *)(v0 + 33);
  long long v9 = *(_OWORD *)(v0 + 49);
  long long v10 = *(_OWORD *)(v0 + 65);
  long long v6 = *(_OWORD *)(v0 + 1);
  _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOi0_(v14);
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v14, (uint64_t)v4, &lazy cache variable for type metadata for GestureDebug.Data?, MEMORY[0x263F8D8F0]);
  v2[0] = 0;
  v2[1] = 0xE000000000000000;
  char v3 = v1;
  GestureDebug.Data.printSubtree(parent:indent:)((uint64_t)v4, (uint64_t)v2);
}

uint64_t GestureDebug.Data.printSubtree(parent:indent:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage(a1, (uint64_t)v173, &lazy cache variable for type metadata for GestureDebug.Data?, MEMORY[0x263F8D8F0]);
  uint64_t v115 = *(void *)(a2 + 8);
  int v4 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v112 = *v2;
  uint64_t v113 = *(void *)a2;
  v178[0] = *(_DWORD *)(v2 + 1);
  *(_DWORD *)((char *)v178 + 3) = *((_DWORD *)v2 + 1);
  uint64_t v110 = v2[17];
  uint64_t v111 = *((void *)v2 + 1);
  __int16 v107 = *((_WORD *)v2 + 9);
  unsigned __int8 v108 = v2[16];
  int v5 = *((_DWORD *)v2 + 6);
  int v114 = *((_DWORD *)v2 + 5);
  long long v6 = *(_OWORD *)(v2 + 28);
  long long v7 = *(_OWORD *)(v2 + 44);
  int v177 = *((_DWORD *)v2 + 15);
  long long v176 = v7;
  long long v175 = v6;
  uint64_t v8 = *((void *)v2 + 8);
  uint64_t v136 = *((void *)v2 + 10);
  uint64_t v137 = *((void *)v2 + 9);
  uint64_t v134 = *((void *)v2 + 12);
  uint64_t v135 = *((void *)v2 + 11);
  uint64_t v132 = *((void *)v2 + 14);
  uint64_t v133 = *((void *)v2 + 13);
  uint64_t v131 = *((void *)v2 + 15);
  uint64_t v9 = v2[128];
  v174[0] = *(_DWORD *)(v2 + 129);
  *(_DWORD *)((char *)v174 + 3) = *((_DWORD *)v2 + 33);
  uint64_t v109 = *((void *)v2 + 17);
  int v125 = v4;
  if (v4 == 4)
  {
    *(void *)__dst = v113;
    *(void *)&__dst[8] = v115;
    swift_bridgeObjectRetain();
    uint64_t v10 = 8235;
  }
  else
  {
    if (v4 != 3)
    {
      uint64_t v14 = swift_bridgeObjectRetain();
      uint64_t v12 = v113;
      unint64_t v13 = v14;
      goto LABEL_7;
    }
    *(void *)__dst = v113;
    *(void *)&__dst[8] = v115;
    swift_bridgeObjectRetain();
    uint64_t v10 = 8234;
  }
  unint64_t v11 = 0xE200000000000000;
  String.append(_:)(*(Swift::String *)&v10);
  uint64_t v12 = *(void *)__dst;
  unint64_t v13 = *(void *)&__dst[8];
LABEL_7:
  uint64_t v171 = v12;
  unint64_t v172 = v13;
  uint64_t v15 = AGTypeID.description.getter();
  unint64_t v17 = v16;
  switch(v112)
  {
    case 1:
    case 3:
    case 4:
      break;
    case 2:
      *(void *)__dst = 10286;
      *(void *)&__dst[8] = 0xE200000000000000;
      String.append(_:)(*(Swift::String *)&v15);
      swift_bridgeObjectRelease();
      v18._uint64_t countAndFlagsBits = 41;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      uint64_t v15 = 10286;
      unint64_t v17 = 0xE200000000000000;
      break;
    default:
      swift_bridgeObjectRelease();
      unint64_t v17 = 0xE700000000000000;
      uint64_t v15 = 0x297974706D6528;
      break;
  }
  unint64_t v19 = v17;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease();
  if (v114 != *MEMORY[0x263F288F8])
  {
    v20._uint64_t countAndFlagsBits = AGAttribute.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 32;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
  }
  *(void *)__dst = 10272;
  *(void *)&__dst[8] = 0xE200000000000000;
  unint64_t v22 = 0xE600000000000000;
  uint64_t v23 = 0x657669746361;
  switch(v110)
  {
    case 1:
      break;
    case 2:
      unint64_t v22 = 0xE500000000000000;
      uint64_t v23 = 0x6465646E65;
      break;
    case 3:
      uint64_t v23 = 0x64656C696166;
      break;
    default:
      if (v108) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = 0x656C626973736F70;
      }
      if (v108) {
        unint64_t v22 = 0xE000000000000000;
      }
      else {
        unint64_t v22 = 0xEE0029656D6F7328;
      }
      break;
  }
  unint64_t v24 = v22;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 41;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  String.append(_:)(*(Swift::String *)__dst);
  swift_bridgeObjectRelease();
  if (v5)
  {
    outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v173, (uint64_t)__dst, &lazy cache variable for type metadata for GestureDebug.Data?, MEMORY[0x263F8D8F0]);
    if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)__dst) == 1 || v5 != *(_DWORD *)&__dst[24])
    {
      v169._uint64_t countAndFlagsBits = 0x3A746573657220;
      v169._object = (void *)0xE700000000000000;
      v168[0] = v5;
      v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 0x3A746573657220;
      v27._object = (void *)0xE700000000000000;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
    }
  }
  __dst[0] = v112;
  *(_DWORD *)&__dst[1] = v178[0];
  *(_DWORD *)&__dst[4] = *(_DWORD *)((char *)v178 + 3);
  *(void *)&__dst[8] = v111;
  __dst[16] = v108;
  __dst[17] = v110;
  *(_WORD *)&__dst[18] = v107;
  *(_DWORD *)&__dst[20] = v114;
  *(_DWORD *)&__dst[24] = v5;
  *(_OWORD *)&__dst[28] = v175;
  *(_OWORD *)&__dst[44] = v176;
  *(_DWORD *)&__dst[60] = v177;
  *(void *)&__dst[64] = v8;
  *(void *)&__dst[72] = v137;
  *(void *)&__dst[80] = v136;
  *(void *)&__dst[88] = v135;
  *(void *)&__dst[96] = v134;
  *(void *)&__dst[104] = v133;
  *(void *)&__dst[112] = v132;
  *(void *)&__dst[120] = v131;
  __dst[128] = v9;
  *(_DWORD *)&__dst[132] = *(_DWORD *)((char *)v174 + 3);
  *(_DWORD *)&__dst[129] = v174[0];
  *(void *)&__dst[136] = v109;
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v173, (uint64_t)&v169, &lazy cache variable for type metadata for GestureDebug.Data?, MEMORY[0x263F8D8F0]);
  v28._uint64_t countAndFlagsBits = GestureDebug.Data.frameDescription(relativeTo:)((uint64_t)&v169);
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  int64_t v29 = 1;
  int v106 = v5;
  uint64_t v138 = v8;
  int v116 = v9;
  switch(v9)
  {
    case 1:
      outlined copy of ArrayWith2Inline<(String, String)>.Storage(v8, v137, v136, v135, v134, v133, v132, v131, 1);
      outlined copy of ArrayWith2Inline<(String, String)>.Storage(v8, v137, v136, v135, v134, v133, v132, v131, 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of ArrayWith2Inline<(String, String)>.Storage(v8, v137, v136, v135, v134, v133, v132, v131, 1);
      outlined copy of ArrayWith2Inline<(String, String)>.Storage(v8, v137, v136, v135, v134, v133, v132, v131, 1);
      outlined copy of ArrayWith2Inline<(String, String)>.Storage(v8, v137, v136, v135, v134, v133, v132, v131, 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v29 = 2;
      goto LABEL_29;
    case 2:
      int64_t v29 = *(void *)(v8 + 16);
      if (v29) {
        goto LABEL_28;
      }
      goto LABEL_46;
    case 3:
      outlined consume of ArrayWith2Inline<(String, String)>.Storage(v8, v137, v136, v135, v134, v133, v132, v131, 3);
      goto LABEL_46;
    default:
LABEL_28:
      outlined copy of ArrayWith2Inline<(String, String)>.Storage(v8, v137, v136, v135, v134, v133, v132, v131, v9);
LABEL_29:
      int64_t v128 = v29;
      v169._uint64_t countAndFlagsBits = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
      unint64_t v30 = 0;
      uint64_t countAndFlagsBits = v169._countAndFlagsBits;
      long long v32 = (void **)(v8 + 56);
      break;
  }
  do
  {
    if (v9)
    {
      if (v9 == 1)
      {
        if (v30)
        {
          if (v30 != 1) {
            goto LABEL_74;
          }
          uint64_t v36 = v8;
          uint64_t v8 = v134;
          outlined copy of ArrayWith2Inline<(String, String)>.Storage(v36, v137, v136, v135, v134, v133, v132, v131, 1);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v33 = v133;
          uint64_t v34 = v132;
          long long v35 = (void *)v131;
        }
        else
        {
          uint64_t v34 = v136;
          uint64_t v33 = v137;
          long long v35 = (void *)v135;
          outlined copy of ArrayWith2Inline<(String, String)>.Storage(v8, v137, v136, v135, v134, v133, v132, v131, 1);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        LODWORD(v9) = v116;
      }
      else
      {
        if (v30 >= *(void *)(v8 + 16)) {
          goto LABEL_73;
        }
        uint64_t v8 = (uint64_t)*(v32 - 3);
        uint64_t v33 = (uint64_t)*(v32 - 2);
        uint64_t v34 = (uint64_t)*(v32 - 1);
        long long v35 = *v32;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      if (v30) {
        goto LABEL_74;
      }
      uint64_t v34 = v136;
      uint64_t v33 = v137;
      long long v35 = (void *)v135;
      outlined copy of ArrayWith2Inline<(String, String)>.Storage(v8, v137, v136, v135, v134, v133, v132, v131, 0);
    }
    *(void *)__dst = v8;
    *(void *)&__dst[8] = v33;
    swift_bridgeObjectRetain();
    v37._uint64_t countAndFlagsBits = 8250;
    v37._object = (void *)0xE200000000000000;
    String.append(_:)(v37);
    v38._uint64_t countAndFlagsBits = v34;
    v38._object = v35;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v39 = *(void *)__dst;
    uint64_t v40 = *(void *)&__dst[8];
    v169._uint64_t countAndFlagsBits = countAndFlagsBits;
    unint64_t v42 = *(void *)(countAndFlagsBits + 16);
    unint64_t v41 = *(void *)(countAndFlagsBits + 24);
    if (v42 >= v41 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
      uint64_t countAndFlagsBits = v169._countAndFlagsBits;
    }
    ++v30;
    *(void *)(countAndFlagsBits + 16) = v42 + 1;
    uint64_t v43 = countAndFlagsBits + 16 * v42;
    *(void *)(v43 + 32) = v39;
    *(void *)(v43 + 40) = v40;
    v32 += 4;
    uint64_t v8 = v138;
  }
  while (v128 != v30);
  outlined consume of ArrayWith2Inline<(String, String)>.Storage(v138, v137, v136, v135, v134, v133, v132, v131, v9);
  *(void *)__dst = countAndFlagsBits;
  type metadata accessor for EmptyGesture<()>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v44 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v46 = v45;
  swift_bridgeObjectRelease();
  *(void *)__dst = 23328;
  *(void *)&__dst[8] = 0xE200000000000000;
  v47._uint64_t countAndFlagsBits = v44;
  v47._object = v46;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._uint64_t countAndFlagsBits = 93;
  v48._object = (void *)0xE100000000000000;
  String.append(_:)(v48);
  String.append(_:)(*(Swift::String *)__dst);
  swift_bridgeObjectRelease();
LABEL_46:
  specialized static Log.eventDebug(_:)(v171, v172);
  swift_bridgeObjectRelease();
  if (v125 == 4)
  {
    *(void *)__dst = v113;
    *(void *)&__dst[8] = v115;
    swift_bridgeObjectRetain();
    uint64_t v49 = 8316;
  }
  else
  {
    if (v125 != 3)
    {
      swift_bridgeObjectRetain();
      goto LABEL_52;
    }
    *(void *)__dst = v113;
    *(void *)&__dst[8] = v115;
    swift_bridgeObjectRetain();
    uint64_t v49 = 8234;
  }
  unint64_t v50 = 0xE200000000000000;
  String.append(_:)(*(Swift::String *)&v49);
  uint64_t v113 = *(void *)__dst;
  uint64_t v115 = *(void *)&__dst[8];
LABEL_52:
  memcpy(__dst, (const void *)(v109 + 16), sizeof(__dst));
  outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of ArrayWith2Inline<GestureDebug.Data>.Storage);
  unint64_t v51 = 0;
  uint64_t v52 = 32;
  while (2)
  {
    outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)__dst, (uint64_t)v168, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t (*)(void, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
    outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)__dst, (uint64_t)&v169, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t (*)(void, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
    switch(_s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOg((uint64_t)&v169))
    {
      case 1u:
        uint64_t v82 = (_OWORD *)_ViewInputs.base.modify(v168, v80);
        long long v83 = v82[16];
        long long v155 = v82[15];
        long long v156 = v83;
        long long v157 = v82[17];
        long long v84 = v82[12];
        *(_OWORD *)&v152[16] = v82[11];
        *(_OWORD *)&v152[32] = v84;
        long long v85 = v82[14];
        long long v153 = v82[13];
        long long v154 = v85;
        long long v86 = v82[10];
        long long v151 = v82[9];
        *(_OWORD *)double v152 = v86;
        outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of ArrayWith2Inline<GestureDebug.Data>.Storage);
        outlined release of GestureDebug.Data((uint64_t)&v151);
        v167[0] = *v82;
        long long v87 = v82[4];
        long long v89 = v82[1];
        long long v88 = v82[2];
        v167[3] = v82[3];
        v167[4] = v87;
        v167[1] = v89;
        v167[2] = v88;
        long long v90 = v82[8];
        long long v92 = v82[5];
        long long v91 = v82[6];
        v167[7] = v82[7];
        v167[8] = v90;
        v167[5] = v92;
        v167[6] = v91;
        outlined release of GestureDebug.Data((uint64_t)v167);
        if (v51 != 2) {
          goto LABEL_64;
        }
        goto LABEL_71;
      case 2u:
        outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)__dst, (uint64_t)v167, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t (*)(void, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
        if (v51 == *(void *)(*(void *)_ViewInputs.base.modify(v167, v81) + 16)) {
          goto LABEL_71;
        }
        goto LABEL_64;
      case 3u:
        if (!v51) {
          goto LABEL_71;
        }
        goto LABEL_64;
      default:
        if (v51 != 1)
        {
LABEL_64:
          outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)__dst, (uint64_t)v167, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t (*)(void, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
          outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)__dst, (uint64_t)v168, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t (*)(void, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
          switch(_s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOg((uint64_t)v168))
          {
            case 1u:
              long long v53 = (long long *)_ViewInputs.base.modify(v167, v93);
              long long v158 = *v53;
              long long v54 = v53[1];
              long long v55 = v53[2];
              long long v56 = v53[4];
              long long v161 = v53[3];
              long long v162 = v56;
              long long v159 = v54;
              long long v160 = v55;
              long long v57 = v53[5];
              long long v58 = v53[6];
              long long v59 = v53[8];
              long long v165 = v53[7];
              long long v166 = v59;
              long long v163 = v57;
              long long v164 = v58;
              long long v60 = v53[17];
              long long v61 = v53[15];
              long long v156 = v53[16];
              long long v157 = v60;
              long long v62 = v53[13];
              long long v154 = v53[14];
              long long v155 = v61;
              long long v63 = v53[11];
              *(_OWORD *)&v152[32] = v53[12];
              long long v153 = v62;
              long long v64 = v53[9];
              *(_OWORD *)double v152 = v53[10];
              *(_OWORD *)&v152[16] = v63;
              long long v151 = v64;
              if (v51)
              {
                if (v51 != 1) {
                  goto LABEL_74;
                }
                uint64_t v65 = v52;
                outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of ArrayWith2Inline<GestureDebug.Data>.Storage);
                outlined release of GestureDebug.Data((uint64_t)&v158);
                uint64_t v67 = *((void *)&v157 + 1);
                long long v69 = v155;
                long long v68 = v156;
                long long v71 = v153;
                long long v70 = v154;
                char v72 = v157;
                long long v74 = *(_OWORD *)&v152[16];
                long long v73 = *(_OWORD *)&v152[32];
                uint64_t v75 = *(void *)&v152[4];
                char v76 = v152[0];
                char v77 = v152[1];
                uint64_t v78 = *((void *)&v151 + 1);
                char v79 = v151;
              }
              else
              {
                uint64_t v65 = v52;
                outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of ArrayWith2Inline<GestureDebug.Data>.Storage);
                outlined release of GestureDebug.Data((uint64_t)&v151);
                uint64_t v67 = *((void *)&v166 + 1);
                long long v69 = v164;
                long long v68 = v165;
                long long v71 = v162;
                long long v70 = v163;
                char v72 = v166;
                long long v74 = v160;
                long long v73 = v161;
                uint64_t v75 = *(void *)((char *)&v159 + 4);
                char v76 = v159;
                char v77 = BYTE1(v159);
                uint64_t v78 = *((void *)&v158 + 1);
                char v79 = v158;
              }
              goto LABEL_55;
            case 2u:
              outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)__dst, (uint64_t)&v151, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t (*)(void, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
              uint64_t v97 = _ViewInputs.base.modify(&v151, v96);
              if (v51 >= *(void *)(*(void *)v97 + 16))
              {
                __break(1u);
LABEL_73:
                __break(1u);
LABEL_74:
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
                JUMPOUT(0x245CB0190);
              }
              uint64_t v65 = v52;
              uint64_t v98 = (long long *)(*(void *)v97 + v52);
              long long v158 = *v98;
              long long v99 = v98[1];
              long long v100 = v98[2];
              long long v101 = v98[4];
              long long v161 = v98[3];
              long long v162 = v101;
              long long v159 = v99;
              long long v160 = v100;
              long long v102 = v98[5];
              long long v103 = v98[6];
              long long v104 = v98[8];
              long long v165 = v98[7];
              long long v166 = v104;
              long long v163 = v102;
              long long v164 = v103;
              uint64_t v67 = *((void *)&v104 + 1);
              long long v127 = v103;
              long long v130 = v165;
              long long v122 = v162;
              long long v124 = v102;
              char v72 = v104;
              long long v118 = v160;
              long long v120 = v161;
              uint64_t v75 = *(void *)((char *)&v159 + 4);
              char v76 = v159;
              char v77 = BYTE1(v159);
              uint64_t v78 = *((void *)&v158 + 1);
              char v79 = v158;
              outlined retain of GestureDebug.Data((uint64_t)&v158);
              long long v74 = v118;
              long long v73 = v120;
              long long v71 = v122;
              long long v70 = v124;
              long long v69 = v127;
              long long v68 = v130;
LABEL_55:
              LOBYTE(v158) = v79;
              *((void *)&v158 + 1) = v78;
              LOBYTE(v159) = v76;
              BYTE1(v159) = v77;
              *(void *)((char *)&v159 + 4) = v75;
              long long v160 = v74;
              long long v161 = v73;
              long long v162 = v71;
              long long v163 = v70;
              long long v164 = v69;
              long long v165 = v68;
              LOBYTE(v166) = v72;
              *((void *)&v166 + 1) = v67;
              ++v51;
              long long v148 = v69;
              long long v149 = v68;
              long long v150 = v166;
              long long v144 = v74;
              long long v145 = v73;
              long long v146 = v71;
              long long v147 = v70;
              long long v142 = v158;
              long long v143 = v159;
              LOBYTE(v151) = v112;
              *(_DWORD *)((char *)&v151 + 1) = v178[0];
              DWORD1(v151) = *(_DWORD *)((char *)v178 + 3);
              *((void *)&v151 + 1) = v111;
              v152[0] = v108;
              v152[1] = v110;
              *(_WORD *)&v152[2] = v107;
              *(_DWORD *)&v152[4] = v114;
              *(_DWORD *)&v152[8] = v106;
              *(_OWORD *)&v152[12] = v175;
              *(_OWORD *)&v152[28] = v176;
              *(_DWORD *)&v152[44] = v177;
              *(void *)&long long v153 = v138;
              *((void *)&v153 + 1) = v137;
              *(void *)&long long v154 = v136;
              *((void *)&v154 + 1) = v135;
              *(void *)&long long v155 = v134;
              *((void *)&v155 + 1) = v133;
              *(void *)&long long v156 = v132;
              *((void *)&v156 + 1) = v131;
              LOBYTE(v157) = v116;
              *(_DWORD *)((char *)&v157 + 1) = v174[0];
              DWORD1(v157) = *(_DWORD *)((char *)v174 + 3);
              *((void *)&v157 + 1) = v109;
              _ViewInputs.base.modify(&v151, v66);
              outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)&v151, (uint64_t)v141, &lazy cache variable for type metadata for GestureDebug.Data?, MEMORY[0x263F8D8F0]);
              v139[0] = v113;
              v139[1] = v115;
              char v140 = v112;
              GestureDebug.Data.printSubtree(parent:indent:)(v141, v139);
              outlined release of GestureDebug.Data((uint64_t)&v158);
              uint64_t v52 = v65 + 144;
              break;
            case 3u:
              goto LABEL_74;
            default:
              uint64_t v65 = v52;
              outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)__dst, (uint64_t)&v151, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t (*)(void, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
              uint64_t v95 = _ViewInputs.base.modify(&v151, v94);
              if (v51) {
                goto LABEL_74;
              }
              uint64_t v67 = *(void *)(v95 + 136);
              long long v126 = *(_OWORD *)(v95 + 96);
              long long v129 = *(_OWORD *)(v95 + 112);
              long long v121 = *(_OWORD *)(v95 + 64);
              long long v123 = *(_OWORD *)(v95 + 80);
              char v72 = *(unsigned char *)(v95 + 128);
              long long v117 = *(_OWORD *)(v95 + 32);
              long long v119 = *(_OWORD *)(v95 + 48);
              uint64_t v75 = *(void *)(v95 + 20);
              char v76 = *(unsigned char *)(v95 + 16);
              char v77 = *(unsigned char *)(v95 + 17);
              uint64_t v78 = *(void *)(v95 + 8);
              char v79 = *(unsigned char *)v95;
              outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of ArrayWith2Inline<GestureDebug.Data>.Storage);
              long long v74 = v117;
              long long v73 = v119;
              long long v71 = v121;
              long long v70 = v123;
              long long v69 = v126;
              long long v68 = v129;
              goto LABEL_55;
          }
          continue;
        }
LABEL_71:
        outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of ArrayWith2Inline<GestureDebug.Data>.Storage);
        return swift_bridgeObjectRelease();
    }
  }
}

uint64_t GestureDebug.Data.frameDescription(relativeTo:)(uint64_t a1)
{
  uint64_t v2 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage(a1, (uint64_t)v34, &lazy cache variable for type metadata for GestureDebug.Data?, MEMORY[0x263F8D8F0]);
  double v3 = v1[4];
  double v4 = v1[5];
  double v5 = v1[6];
  double v6 = v1[7];
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v34, (uint64_t)v35, &lazy cache variable for type metadata for GestureDebug.Data?, v2);
  if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)v35) != 1 && v36 == v5 && v37 == v6)
  {
    outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v34, (uint64_t)&v28, &lazy cache variable for type metadata for GestureDebug.Data?, MEMORY[0x263F8D8F0]);
    double v14 = v30;
    double v15 = v31;
    uint64_t v8 = (void *)MEMORY[0x263F8EE78];
LABEL_15:
    if (v14 == v3 && v15 == v4) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (v5 == 0.0 && v6 == 0.0)
  {
    uint64_t v8 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v28 = 0;
    unint64_t v29 = 0xE000000000000000;
    v9._uint64_t countAndFlagsBits = 123;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    double v32 = v5;
    double v33 = v6;
    type metadata accessor for (CGFloat, CGFloat)(0, (unint64_t *)&lazy cache variable for type metadata for (CGFloat, CGFloat));
    _print_unlocked<A, B>(_:_:)();
    v10._uint64_t countAndFlagsBits = 125;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v12 = v8[2];
    unint64_t v11 = v8[3];
    if (v12 >= v11 >> 1) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v8);
    }
    v8[2] = v12 + 1;
    unint64_t v13 = &v8[2 * v12];
    v13[4] = 0;
    v13[5] = 0xE000000000000000;
  }
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v34, (uint64_t)&v28, &lazy cache variable for type metadata for GestureDebug.Data?, MEMORY[0x263F8D8F0]);
  if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)&v28) != 1)
  {
    double v14 = v30;
    double v15 = v31;
    goto LABEL_15;
  }
LABEL_19:
  if (v3 != 0.0 || v4 != 0.0)
  {
    uint64_t v28 = 0;
    unint64_t v29 = 0xE000000000000000;
    v22._uint64_t countAndFlagsBits = 64;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    double v32 = v3;
    double v33 = v4;
    type metadata accessor for (CGFloat, CGFloat)(0, (unint64_t *)&lazy cache variable for type metadata for (CGFloat, CGFloat));
    _print_unlocked<A, B>(_:_:)();
    uint64_t v23 = v28;
    unint64_t v24 = v29;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    }
    unint64_t v26 = v8[2];
    unint64_t v25 = v8[3];
    if (v26 >= v25 >> 1) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v8);
    }
    v8[2] = v26 + 1;
    Swift::String v27 = &v8[2 * v26];
    v27[4] = v23;
    v27[5] = v24;
    if (v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_28;
  }
LABEL_21:
  if (v8[2])
  {
LABEL_22:
    uint64_t v28 = (uint64_t)v8;
    type metadata accessor for EmptyGesture<()>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v17 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    uint64_t v28 = 32;
    unint64_t v29 = 0xE100000000000000;
    v20._uint64_t countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    return v28;
  }
LABEL_28:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t outlined copy of ArrayWith2Inline<GestureDebug.Data>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37)
{
  if (a37 != 2)
  {
    uint64_t result = a9;
    if (a37 == 1)
    {
      outlined copy of ArrayWith2Inline<(String, String)>.Storage(a9, a10, a11, a12, a13, a14, a15, a16, a17);
      swift_retain();
      outlined copy of ArrayWith2Inline<(String, String)>.Storage(a27, a28, a29, a30, a31, a32, a33, a34, a35);
    }
    else
    {
      if (a37) {
        return result;
      }
      outlined copy of ArrayWith2Inline<(String, String)>.Storage(a9, a10, a11, a12, a13, a14, a15, a16, a17);
    }
  }

  return swift_retain();
}

uint64_t sub_245CB067C()
{
  long long v3 = *(_OWORD *)(v0 + 256);
  long long v4 = *(_OWORD *)(v0 + 272);
  long long v2 = *(_OWORD *)(v0 + 224);
  outlined consume of ArrayWith2Inline<GestureDebug.Data>.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(_OWORD *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160),
    *(void *)(v0 + 168),
    *(void *)(v0 + 176),
    *(void *)(v0 + 184),
    *(void *)(v0 + 192),
    *(void *)(v0 + 200),
    *(void *)(v0 + 208),
    *(void *)(v0 + 216),
    v2,
    *((uint64_t *)&v2 + 1),
    *(void *)(v0 + 240),
    *(void *)(v0 + 248),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    *(void *)(v0 + 288),
    *(void *)(v0 + 296),
    *(unsigned char *)(v0 + 304));

  return swift_deallocObject();
}

uint64_t outlined consume of ArrayWith2Inline<GestureDebug.Data>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37)
{
  if (a37 != 2)
  {
    uint64_t result = a9;
    if (a37 == 1)
    {
      outlined consume of ArrayWith2Inline<(String, String)>.Storage(a9, a10, a11, a12, a13, a14, a15, a16, a17);
      swift_release();
      outlined consume of ArrayWith2Inline<(String, String)>.Storage(a27, a28, a29, a30, a31, a32, a33, a34, a35);
    }
    else
    {
      if (a37) {
        return result;
      }
      outlined consume of ArrayWith2Inline<(String, String)>.Storage(a9, a10, a11, a12, a13, a14, a15, a16, a17);
    }
  }

  return swift_release();
}

uint64_t outlined retain of ArrayWith2Inline<GestureDebug.Data>(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v7 = *(unsigned char *)(a1 + 288);
  long long v5 = *(_OWORD *)(a1 + 240);
  long long v6 = *(_OWORD *)(a1 + 256);
  long long v4 = *(_OWORD *)(a1 + 208);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v4,
    *((void *)&v4 + 1),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    *(void *)(a1 + 272),
    *(void *)(a1 + 280),
    v7);
  return a1;
}

double _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi2_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 288) = 3;
  return result;
}

uint64_t outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void, uint64_t))
{
  type metadata accessor for EmptyGesture<()>(0, a3, (uint64_t)&type metadata for GestureDebug.Data, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

unint64_t lazy protocol witness table accessor for type GestureDebug.Kind and conformance GestureDebug.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type GestureDebug.Kind and conformance GestureDebug.Kind;
  if (!lazy protocol witness table cache variable for type GestureDebug.Kind and conformance GestureDebug.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureDebug.Kind and conformance GestureDebug.Kind);
  }
  return result;
}

uint64_t sub_245CB09B8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v3 = (const void *)(*(void *)(a1 + 136) + 16);
  memcpy(__dst, v3, 0x121uLL);
  memcpy(a2, v3, 0x121uLL);
  return outlined retain of ArrayWith2Inline<GestureDebug.Data>((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of ArrayWith2Inline<GestureDebug.Data>.Storage);
}

ValueMetadata *type metadata accessor for GestureDebug()
{
  return &type metadata for GestureDebug;
}

unsigned char *storeEnumTagSinglePayload for GestureDebug.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245CB0B0CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GestureDebug.Kind()
{
  return &type metadata for GestureDebug.Kind;
}

uint64_t destroy for GestureDebug.Data(uint64_t a1)
{
  outlined consume of ArrayWith2Inline<(String, String)>.Storage(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(unsigned char *)(a1 + 128));

  return swift_release();
}

uint64_t initializeWithCopy for GestureDebug.Data(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 20) = *(void *)(a2 + 20);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 88);
  uint64_t v9 = *(void *)(a2 + 96);
  uint64_t v10 = *(void *)(a2 + 104);
  uint64_t v11 = *(void *)(a2 + 112);
  uint64_t v12 = *(void *)(a2 + 120);
  char v14 = *(unsigned char *)(a2 + 128);
  outlined copy of ArrayWith2Inline<(String, String)>.Storage(v5, v6, v7, v8, v9, v10, v11, v12, v14);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = v7;
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = v10;
  *(void *)(a1 + 112) = v11;
  *(void *)(a1 + 120) = v12;
  *(unsigned char *)(a1 + 128) = v14;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GestureDebug.Data(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 88);
  uint64_t v8 = *(void *)(a2 + 96);
  uint64_t v9 = *(void *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 112);
  uint64_t v11 = *(void *)(a2 + 120);
  char v22 = *(unsigned char *)(a2 + 128);
  outlined copy of ArrayWith2Inline<(String, String)>.Storage(v4, v5, v6, v7, v8, v9, v10, v11, v22);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 80);
  uint64_t v15 = *(void *)(a1 + 88);
  uint64_t v16 = *(void *)(a1 + 96);
  uint64_t v17 = *(void *)(a1 + 104);
  uint64_t v18 = *(void *)(a1 + 112);
  uint64_t v19 = *(void *)(a1 + 120);
  char v20 = *(unsigned char *)(a1 + 128);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v5;
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = v8;
  *(void *)(a1 + 104) = v9;
  *(void *)(a1 + 112) = v10;
  *(void *)(a1 + 120) = v11;
  *(unsigned char *)(a1 + 128) = v22;
  outlined consume of ArrayWith2Inline<(String, String)>.Storage(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for GestureDebug.Data(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 20) = *(void *)(a2 + 20);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  char v5 = *(unsigned char *)(a2 + 128);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  uint64_t v10 = *(void *)(a1 + 96);
  uint64_t v11 = *(void *)(a1 + 104);
  uint64_t v12 = *(void *)(a1 + 112);
  uint64_t v13 = *(void *)(a1 + 120);
  char v14 = *(unsigned char *)(a1 + 128);
  long long v15 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v15;
  long long v16 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v16;
  *(unsigned char *)(a1 + 128) = v5;
  outlined consume of ArrayWith2Inline<(String, String)>.Storage(v6, v7, v8, v9, v10, v11, v12, v13, v14);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GestureDebug.Data(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GestureDebug.Data(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GestureDebug.Data()
{
  return &type metadata for GestureDebug.Data;
}

uint64_t dispatch thunk of DebuggableGesturePhase.phase.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DebuggableGesturePhase.phase.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of DebuggableGesturePhase.phase.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of DebuggableGesturePhase.properties.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

void *type metadata accessor for GestureDebug.ChildrenBox()
{
  return &unk_26FA458B8;
}

uint64_t type metadata accessor for GestureDebug.Value()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _s7SwiftUI12GestureDebugO4DataVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void type metadata accessor for EmptyGesture<()>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOg(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 288) <= 2u) {
    return *(unsigned __int8 *)(a1 + 288);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t base witness table accessor for _AttributeBody in GestureDebug.Value<A>()
{
  return swift_getWitnessTable();
}

void type metadata accessor for ArrayWith2Inline<(String, String)>()
{
  if (!lazy cache variable for type metadata for ArrayWith2Inline<(String, String)>)
  {
    type metadata accessor for (CGFloat, CGFloat)(255, (unint64_t *)&lazy cache variable for type metadata for (String, String));
    unint64_t v0 = type metadata accessor for ArrayWith2Inline();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArrayWith2Inline<(String, String)>);
    }
  }
}

uint64_t _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi_(uint64_t result)
{
  *(unsigned char *)(result + 288) = 0;
  return result;
}

uint64_t _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi0_(uint64_t result)
{
  *(unsigned char *)(result + 288) = 1;
  return result;
}

BOOL _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI7EventIDV_s5NeverOytTB503_s7c4UI18E82ListenerPhase33_D4E5D14C6252B45A30FB249B3DBDFD35LLV11descriptionSSvgyAA0C2IDVXEfU_SSTf1cn_n(uint64_t a1)
{
  if (a1)
  {
    v7._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    v7._object = v2;
    v3._uint64_t countAndFlagsBits = 35;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v5._uint64_t countAndFlagsBits = 32;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
  }
  return a1 == 0;
}

uint64_t specialized ArrayWith2Inline.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v5 = v4;
  uint64_t v6 = *v4;
  Swift::String v7 = v5 + 1;
  uint64_t v8 = v5[1];
  uint64_t v9 = v5[3];
  switch(*((unsigned char *)v5 + 64))
  {
    case 1:
      uint64_t v15 = v5[2];
      uint64_t v23 = v5[6];
      uint64_t v24 = v5[7];
      long long v22 = *((_OWORD *)v5 + 2);
      type metadata accessor for ArrayWith2Inline<(String, String)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, String)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, String), MEMORY[0x263F8E0F8]);
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_2461BE2B0;
      *(void *)(v16 + 32) = v6;
      *(void *)(v16 + 40) = v8;
      *(void *)(v16 + 48) = v15;
      *(void *)(v16 + 56) = v9;
      *(_OWORD *)(v16 + 64) = v22;
      *(void *)(v16 + 80) = v23;
      *(void *)(v16 + 88) = v24;
      *(void *)(v16 + 96) = a1;
      *(void *)(v16 + 104) = a2;
      *(void *)(v16 + 112) = a3;
      *(void *)(v16 + 120) = a4;
      *Swift::String v5 = v16;
      *Swift::String v7 = 0u;
      *(_OWORD *)(v5 + 3) = 0u;
      *(_OWORD *)(v5 + 5) = 0u;
      v5[7] = 0;
      char v14 = 2;
      goto LABEL_4;
    case 2:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
      }
      unint64_t v19 = *(void *)(v6 + 16);
      unint64_t v18 = *(void *)(v6 + 24);
      unint64_t v20 = v19 + 1;
      if (v19 >= v18 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        unint64_t v20 = v19 + 1;
      }
      *(void *)(v6 + 16) = v20;
      Swift::String v21 = (void *)(v6 + 32 * v19);
      v21[4] = a1;
      v21[5] = a2;
      v21[6] = a3;
      v21[7] = a4;
      *Swift::String v5 = v6;
      *Swift::String v7 = 0u;
      *(_OWORD *)(v5 + 3) = 0u;
      *(_OWORD *)(v5 + 5) = 0u;
      v5[7] = 0;
      *((unsigned char *)v5 + 64) = 2;
      return result;
    case 3:
      *Swift::String v5 = a1;
      v5[1] = a2;
      v5[2] = a3;
      v5[3] = a4;
      *((_OWORD *)v5 + 2) = 0u;
      *((_OWORD *)v5 + 3) = 0u;
      *((unsigned char *)v5 + 64) = 0;
      goto LABEL_11;
    default:
      v5[1] = v8;
      v5[3] = v9;
      v5[4] = a1;
      _OWORD v5[5] = a2;
      v5[6] = a3;
      v5[7] = a4;
      char v14 = 1;
LABEL_4:
      *((unsigned char *)v5 + 64) = v14;
LABEL_11:
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
  }
}

uint64_t EventListener.ignoresOtherEvents.getter()
{
  return *v0;
}

uint64_t EventListener.ignoresOtherEvents.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*EventListener.ignoresOtherEvents.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t EventListener.init(ignoresOtherEvents:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static EventListener._makeGesture(gesture:inputs:)@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  unsigned int v5 = *a1;
  *(_OWORD *)long long v54 = a2[6];
  *(_OWORD *)&v54[12] = *(long long *)((char *)a2 + 108);
  long long v6 = a2[1];
  long long v50 = *a2;
  long long v51 = v6;
  long long v7 = a2[3];
  long long v52 = a2[2];
  *(_OWORD *)long long v53 = v7;
  long long v8 = a2[5];
  *(_OWORD *)&v53[16] = a2[4];
  *(_OWORD *)&v53[32] = v8;
  unsigned int v27 = *(_DWORD *)&v54[12];
  unsigned int v28 = v5;
  uint64_t v9 = v7;
  int v10 = DWORD2(v7);
  AGGraphClearUpdate();
  id v11 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  *(void *)&long long v43 = v50;
  long long v44 = v51;
  long long v45 = v52;
  *(void *)uint64_t v46 = v9;
  DWORD2(v43) = DWORD2(v50);
  *(_DWORD *)&v46[8] = v10;
  *(void *)&v46[12] = *(void *)&v53[12];
  *(void *)&v46[20] = *(void *)&v53[20];
  *(void *)&unsigned char v46[28] = *(void *)&v53[28];
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v12 = CachedEnvironment.animatedPosition(for:)((uint64_t *)&v43);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v49 = 0;
  memset(v48, 0, sizeof(v48));
  outlined retain of _GestureInputs((uint64_t)&v50);
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v48, 0);
  AGGraphClearUpdate();
  id v13 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  LODWORD(v9) = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs((uint64_t)&v50);
  LOBYTE(v11) = v54[24];
  *(void *)&long long v43 = __PAIR64__(v27, v28);
  *((void *)&v43 + 1) = __PAIR64__(v9, v12);
  LODWORD(v44) = *(_DWORD *)&v54[16];
  BYTE4(v44) = v54[24] & 1;
  BYTE5(v44) = (v54[24] & 2) != 0;
  *((void *)&v44 + 1) = 0;
  *(void *)&long long v45 = 0;
  DWORD2(v45) = 0;
  uint64_t v14 = type metadata accessor for EventListenerPhase.Value();
  uint64_t v40 = v14;
  uint64_t v41 = type metadata accessor for EventListenerPhase();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v43, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v39, v41, MEMORY[0x263F8E628], v15, MEMORY[0x263F8E658], v16);
  uint64_t v17 = swift_getWitnessTable();
  uint64_t v18 = Attribute<A>.phase()(v32, v14, v17);
  _GestureOutputs.init(phase:)(v18, a5);
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t KeyPath = swift_getKeyPath();
  LODWORD(v43) = v32;
  *((void *)&v43 + 1) = KeyPath;
  type metadata accessor for ArrayWith2Inline<(String, String)>();
  uint64_t v35 = type metadata accessor for Focus();
  uint64_t v36 = swift_getWitnessTable();
  type metadata accessor for ArrayWith2Inline<(String, String)>(0, &lazy cache variable for type metadata for Attribute<ArrayWith2Inline<(String, String)>>, (uint64_t (*)(uint64_t))type metadata accessor for ArrayWith2Inline<(String, String)>, MEMORY[0x263F28898]);
  uint64_t v21 = v20;
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v43, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)v34, v35, MEMORY[0x263F8E628], v21, MEMORY[0x263F8E658], v22);
  swift_release();
  uint64_t result = swift_release();
  if ((v11 & 8) != 0)
  {
    uint64_t v24 = type metadata accessor for EventListener();
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol()) {
      char v25 = 2;
    }
    else {
      char v25 = 1;
    }
    v33[0] = v25;
    *(_OWORD *)&v46[16] = *(_OWORD *)&v53[16];
    *(_OWORD *)&v46[32] = *(_OWORD *)&v53[32];
    v47[0] = *(_OWORD *)v54;
    *(_OWORD *)((char *)v47 + 12) = *(_OWORD *)&v54[12];
    long long v43 = v50;
    long long v44 = v51;
    long long v45 = v52;
    *(_OWORD *)uint64_t v46 = *(_OWORD *)v53;
    type metadata accessor for _GestureOutputs();
    unint64_t v26 = _GestureOutputs.debugData.getter();
    return _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v24, v33, v32, &v43, v26 | ((HIDWORD(v26) & 1) << 32), 0x100000000);
  }
  return result;
}

double EventListenerPhase.Value.properties.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(v2 + *(int *)(a1 + 40)) != 5)
  {
    type metadata accessor for EventListenerPhase.FailureReason();
    uint64_t v5 = String.init<A>(describing:)();
    specialized ArrayWith2Inline.append(_:)(0x6572756C696166, 0xE700000000000000, v5, v6);
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v2 + *(int *)(a1 + 36)))
  {
    uint64_t v11 = _typeName(_:qualified:)();
    uint64_t v12 = v7;
    v8._uint64_t countAndFlagsBits = 35;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    specialized ArrayWith2Inline.append(_:)(0x676E696B63617274, 0xEA00000000004449, v11, v12);
    swift_bridgeObjectRelease();
  }
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  double result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(unsigned char *)(a2 + 64) = 3;
  return result;
}

double key path getter for EventListenerPhase.Value.properties : <A>EventListenerPhase<A>.Value@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for EventListenerPhase.Value();
  EventListenerPhase.Value.properties.getter(v2, (uint64_t)v7);
  char v3 = v10;
  long long v4 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v4;
  double result = *(double *)&v8;
  long long v6 = v9;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 64) = v3;
  return result;
}

uint64_t EventListenerPhase.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  *(void *)a1 = *(void *)Value;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);

  return swift_retain();
}

uint64_t EventListenerPhase.resetSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance EventListener<A>@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static EventListener._makeGesture(gesture:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t EventListenerPhase.Value.init(phase:trackingID:failureReason:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = type metadata accessor for GesturePhase();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(a4, a1, v9);
  uint64_t result = type metadata accessor for EventListenerPhase.Value();
  uint64_t v11 = (void *)(a4 + *(int *)(result + 36));
  *uint64_t v11 = v7;
  v11[1] = v8;
  *(unsigned char *)(a4 + *(int *)(result + 40)) = a3;
  return result;
}

BOOL static EventListenerPhase.FailureReason.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void EventListenerPhase.FailureReason.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int EventListenerPhase.FailureReason.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for DebuggableGesturePhase.phase.getter in conformance EventListenerPhase<A>.Value@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for GesturePhase();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t protocol witness for DebuggableGesturePhase.phase.setter in conformance EventListenerPhase<A>.Value(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for GesturePhase();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance EventListenerPhase<A>.FailureReason(char *a1, char *a2)
{
  return static EventListenerPhase.FailureReason.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EventListenerPhase<A>.FailureReason()
{
  return EventListenerPhase.FailureReason.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance EventListenerPhase<A>.FailureReason(uint64_t a1)
{
  EventListenerPhase.FailureReason.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EventListenerPhase<A>.FailureReason()
{
  Hasher.init(_seed:)();
  EventListenerPhase.FailureReason.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t EventListenerPhase.resetPhase()(uint64_t a1)
{
  uint64_t v18[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for GesturePhase();
  MEMORY[0x270FA5388](v4);
  long long v6 = &v14[-v5];
  uint64_t v7 = type metadata accessor for EventListenerPhase.Value();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = &v14[-v10];
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t, double))(*(void *)(v3 - 8) + 56))(v6, 1, 1, v3, v9);
  swift_storeEnumTagMultiPayload();
  v18[0] = 0;
  v18[1] = 0;
  EventListenerPhase.Value.init(phase:trackingID:failureReason:)((uint64_t)v6, v18, 5, (uint64_t)v11);
  uint64_t v16 = a1;
  uint64_t WitnessTable = swift_getWitnessTable();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v11, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)v15, v7, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v12);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t EventListenerPhase.updateValue()(uint64_t a1)
{
  void (*v49)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  long long *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  Swift::UInt v74;
  Swift::UInt v75;
  uint64_t inited;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char *v81;
  int v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  char *v88;
  int v89;
  long long *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  int64_t v112;
  void (**v113)(char *, uint64_t);
  uint64_t v114;
  uint64_t (**v115)(char *, uint64_t, uint64_t);
  char *v116;
  uint64_t v117;
  long long *v118;
  uint64_t v119;
  uint64_t v120;
  long long *v121;
  uint64_t v122;
  unint64_t v123[13];
  long long v124[2];
  uint64_t v125;
  long long v126;
  long long v127;
  long long v128;
  uint64_t v129;
  long long v130;
  long long v131;
  uint64_t v132;
  _OWORD v133[2];
  uint64_t v134;
  uint64_t v135;

  uint64_t v135 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = type metadata accessor for EventListenerPhase.Value();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  long long v105 = (uint64_t)&v93 - v7;
  uint64_t v8 = type metadata accessor for GesturePhase();
  __int16 v107 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  long long v103 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  long long v104 = (char *)&v93 - v11;
  uint64_t v12 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v13);
  long long v102 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Optional();
  unsigned __int8 v108 = *(void *)(v15 - 8);
  uint64_t v109 = v15;
  MEMORY[0x270FA5388](v15);
  int v106 = (char *)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v110 = (char *)&v93 - v18;
  long long v122 = v3;
  long long v117 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v117 - 8);
  MEMORY[0x270FA5388](v117);
  long long v101 = (char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  int v116 = (char *)&v93 - v22;
  swift_getWitnessTable();
  uint64_t result = ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) == 0) {
    return result;
  }
  long long v99 = v8;
  long long v100 = v5;
  uint64_t v96 = a1;
  uint64_t v97 = v6;
  uint64_t v134 = 0;
  memset(v133, 0, sizeof(v133));
  type metadata accessor for [EventID : EventType]();
  uint64_t v24 = *(void *)AGGraphGetValue();
  uint64_t v25 = *(void *)(v24 + 64);
  uint64_t v111 = v24 + 64;
  uint64_t v26 = 1 << *(unsigned char *)(v24 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  unint64_t v28 = v27 & v25;
  long long v118 = &v127;
  long long v119 = v24;
  long long v121 = &v131;
  int v114 = v4 + 48;
  uint64_t v115 = (uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v112 = (unint64_t)(v26 + 63) >> 6;
  uint64_t v113 = (void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v94 = v112 - 1;
  uint64_t v95 = v12;
  swift_bridgeObjectRetain();
  int64_t v29 = 0;
  uint64_t v30 = v1;
  uint64_t v98 = v1;
  long long v120 = v4;
  while (1)
  {
    if (v28)
    {
      unint64_t v31 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      unint64_t v32 = v31 | (v29 << 6);
LABEL_11:
      uint64_t v33 = *(void *)(v119 + 56);
      uint64_t v34 = (uint64_t *)(*(void *)(v119 + 48) + 16 * v32);
      uint64_t v36 = *v34;
      uint64_t v35 = v34[1];
      *(void *)&long long v126 = v36;
      *((void *)&v126 + 1) = v35;
      outlined init with copy of AnyTrackedValue(v33 + 40 * v32, (uint64_t)v118);
      goto LABEL_30;
    }
    int64_t v37 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    if (v37 < v112)
    {
      unint64_t v38 = *(void *)(v111 + 8 * v37);
      if (v38) {
        goto LABEL_15;
      }
      int64_t v39 = v29 + 2;
      ++v29;
      if (v37 + 1 < v112)
      {
        unint64_t v38 = *(void *)(v111 + 8 * v39);
        if (v38) {
          goto LABEL_18;
        }
        int64_t v29 = v37 + 1;
        if (v37 + 2 < v112)
        {
          unint64_t v38 = *(void *)(v111 + 8 * (v37 + 2));
          if (v38)
          {
            v37 += 2;
            goto LABEL_15;
          }
          int64_t v39 = v37 + 3;
          int64_t v29 = v37 + 2;
          if (v37 + 3 < v112)
          {
            unint64_t v38 = *(void *)(v111 + 8 * v39);
            if (v38)
            {
LABEL_18:
              int64_t v37 = v39;
LABEL_15:
              unint64_t v28 = (v38 - 1) & v38;
              unint64_t v32 = __clz(__rbit64(v38)) + (v37 << 6);
              int64_t v29 = v37;
              goto LABEL_11;
            }
            while (1)
            {
              int64_t v37 = v39 + 1;
              if (__OFADD__(v39, 1)) {
                goto LABEL_83;
              }
              if (v37 >= v112) {
                break;
              }
              unint64_t v38 = *(void *)(v111 + 8 * v37);
              ++v39;
              if (v38) {
                goto LABEL_15;
              }
            }
            int64_t v29 = v94;
          }
        }
      }
    }
    unint64_t v28 = 0;
    long long v129 = 0;
    long long v127 = 0u;
    int64_t v128 = 0u;
    long long v126 = 0u;
LABEL_30:
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v126, (uint64_t)&v130, (uint64_t (*)(void))type metadata accessor for (key: EventID, value: EventType)?);
    uint64_t v40 = v130;
    if (!(void)v130)
    {
      swift_release();
      uint64_t v55 = 5;
      goto LABEL_56;
    }
    uint64_t v41 = *((void *)&v130 + 1);
    outlined init with take of ScrollStateRequest(v121, (uint64_t)&v126);
    uint64_t v42 = *((void *)&v127 + 1);
    uint64_t v43 = v128;
    __swift_project_boxed_opaque_existential_1(&v126, *((uint64_t *)&v127 + 1));
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v43 + 24))(v124, v42, v43);
    uint64_t v44 = *(void *)&v124[0];
    swift_release();
    if (v44) {
      break;
    }
    long long v54 = *(void *)(v30 + 24);
    if (v54 && *(void *)(v30 + 32) == v41 && v40 == v54)
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v126);
      LODWORD(v121) = 0;
      goto LABEL_57;
    }
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v126);
  }
  uint64_t v45 = v120;
  if ((*(unsigned char *)(v30 + 21) & 1) == 0)
  {
    uint64_t v46 = *(void *)(v30 + 24);
    if (!v46 || *(void *)(v30 + 32) != v41 || v40 != v46)
    {
      uint64_t v47 = *((void *)&v127 + 1);
      uint64_t v48 = v128;
      __swift_project_boxed_opaque_existential_1(&v126, *((uint64_t *)&v127 + 1));
      uint64_t v49 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v48 + 8);
      long long v50 = v48;
      uint64_t v45 = v120;
      v49(v124, v47, v50);
      if (LOBYTE(v124[0]))
      {
        if (!v46 || (type metadata accessor for EventListener(), (*(unsigned char *)AGGraphGetValue() & 1) == 0))
        {
          swift_release();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v126);
          uint64_t v55 = 1;
          goto LABEL_56;
        }
      }
    }
  }
  outlined init with copy of AnyTrackedValue((uint64_t)&v126, (uint64_t)v124);
  long long v51 = v116;
  long long v52 = v122;
  (*(void (**)(long long *, uint64_t, uint64_t))(v45 + 48))(v124, v122, v45);
  LODWORD(v52) = (*v115)(v51, 1, v52);
  (*v113)(v51, v117);
  long long v53 = *(void *)(v30 + 24);
  if (v52 == 1)
  {
    if (!v53 || (type metadata accessor for EventListener(), (*(unsigned char *)AGGraphGetValue() & 1) == 0))
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v126);
      uint64_t v55 = 3;
      goto LABEL_56;
    }
    goto LABEL_8;
  }
  if (!v53)
  {
    outlined destroy of EventType?((uint64_t)v133);
    *(void *)(v30 + 24) = v40;
    *(void *)(v30 + 32) = v41;
    goto LABEL_7;
  }
  if (*(void *)(v30 + 32) == v41 && v40 == v53
    || (type metadata accessor for EventListener(), *(unsigned char *)AGGraphGetValue() == 1))
  {
    outlined destroy of EventType?((uint64_t)v133);
LABEL_7:
    outlined init with copy of AnyTrackedValue((uint64_t)&v126, (uint64_t)v133);
    goto LABEL_8;
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v126);
  uint64_t v55 = 2;
LABEL_56:
  LODWORD(v121) = v55;
LABEL_57:
  long long v56 = v107;
  long long v57 = *(long long **)(v107 + 56);
  long long v58 = v110;
  long long v59 = v99;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v57)(v110, 1, 1, v99);
  long long v60 = v100;
  long long v61 = v108;
  long long v62 = v109;
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v108 + 8))(v58, v109);
    swift_storeEnumTagMultiPayload();
    ((void (*)(char *, void, uint64_t, uint64_t))v57)(v58, 0, 1, v59);
    goto LABEL_59;
  }
  long long v121 = v57;
  outlined init with copy of EventType?((uint64_t)v133, (uint64_t)&v130);
  if (!*((void *)&v131 + 1))
  {
    outlined destroy of EventType?((uint64_t)&v130);
    if (AGGraphGetOutputValue())
    {
      LODWORD(v121) = 5;
      long long v58 = v110;
    }
    else
    {
      long long v58 = v110;
      (*(void (**)(char *, uint64_t))(v61 + 8))(v110, v62);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56))(v58, 1, 1, v122);
      swift_storeEnumTagMultiPayload();
      ((void (*)(char *, void, uint64_t, uint64_t))v121)(v58, 0, 1, v59);
      LODWORD(v121) = 5;
    }
    goto LABEL_59;
  }
  outlined init with take of ScrollStateRequest(&v130, (uint64_t)&v126);
  char v72 = v122;
  if (*(unsigned char *)(v98 + 20)) {
    goto LABEL_68;
  }
  AGGraphClearUpdate();
  closure #1 in EventListenerPhase.updateValue()((uint64_t)v124);
  long long v73 = v98;
  uint64_t result = AGGraphSetUpdate();
  long long v130 = v124[0];
  uint64_t v131 = v124[1];
  uint64_t v132 = v125;
  long long v74 = *(void *)(v73 + 24);
  if (!v74)
  {
    __break(1u);
    return result;
  }
  uint64_t v75 = *(void *)(v73 + 32);
  type metadata accessor for ArrayWith2Inline<(String, String)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, EventType)>, (uint64_t (*)(uint64_t))type metadata accessor for (EventID, EventType), MEMORY[0x263F8E0F8]);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  *(void *)(inited + 32) = v74;
  *(void *)(inited + 40) = v75;
  outlined init with copy of AnyTrackedValue((uint64_t)&v126, inited + 48);
  char v77 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating();
  type metadata accessor for (EventID, EventType)();
  swift_arrayDestroy();
  v123[0] = v77;
  outlined retain of ViewTransform((uint64_t)&v130);
  specialized defaultConvertEventLocations<A>(_:converter:)((uint64_t *)v123, (uint64_t)&v130);
  outlined release of ViewTransform((uint64_t)&v130);
  uint64_t v78 = v123[0];
  if (!*(void *)(v123[0] + 16)) {
    goto LABEL_81;
  }
  char v79 = specialized __RawDictionaryStorage.find<A>(_:)(v74, v75);
  long long v61 = v108;
  long long v62 = v109;
  if ((v80 & 1) == 0)
  {
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
  }
  outlined init with copy of AnyTrackedValue(*(void *)(v78 + 56) + 40 * v79, (uint64_t)v124);
  outlined release of ViewTransform((uint64_t)&v130);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v126);
  outlined init with take of ScrollStateRequest(v124, (uint64_t)&v126);
  swift_bridgeObjectRelease();
  char v72 = v122;
LABEL_68:
  outlined init with copy of AnyTrackedValue((uint64_t)&v126, (uint64_t)v124);
  uint64_t v81 = v101;
  (*(void (**)(long long *, uint64_t))(v120 + 48))(v124, v72);
  uint64_t v82 = (*v115)(v81, 1, v72);
  long long v83 = v102;
  if (v82 == 1)
  {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v110, v62);
    outlined destroy of EventType?((uint64_t)v133);
    (*v113)(v81, v117);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v126);
  }
  long long v84 = v61;
  long long v85 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
  v85(v102, v81, v72);
  long long v86 = *((void *)&v127 + 1);
  long long v87 = v128;
  __swift_project_boxed_opaque_existential_1(&v126, *((uint64_t *)&v127 + 1));
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v87 + 8))(v124, v86, v87);
  long long v88 = v110;
  (*(void (**)(char *, uint64_t))(v84 + 8))(v110, v62);
  if (LOBYTE(v124[0]) >= 2u)
  {
    long long v90 = v121;
    if (LOBYTE(v124[0]) == 2)
    {
      long long v91 = v110;
      v85(v110, v102, v122);
      long long v59 = v99;
      swift_storeEnumTagMultiPayload();
      ((void (*)(char *, void, uint64_t, uint64_t))v90)(v91, 0, 1, v59);
      long long v89 = 5;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v95 + 8))(v102, v122);
      long long v92 = v110;
      long long v59 = v99;
      swift_storeEnumTagMultiPayload();
      ((void (*)(char *, void, uint64_t, uint64_t))v90)(v92, 0, 1, v59);
      long long v89 = 4;
    }
  }
  else
  {
    v85(v88, v83, v122);
    long long v59 = v99;
    swift_storeEnumTagMultiPayload();
    ((void (*)(char *, void, uint64_t, uint64_t))v121)(v88, 0, 1, v59);
    long long v89 = 5;
  }
  LODWORD(v121) = v89;
  long long v60 = v100;
  long long v56 = v107;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v126);
  long long v61 = v108;
  long long v58 = v110;
LABEL_59:
  long long v63 = v106;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v106, v58, v62);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v63, 1, v59) == 1)
  {
    long long v64 = *(void (**)(char *, uint64_t))(v61 + 8);
    v64(v58, v62);
    outlined destroy of EventType?((uint64_t)v133);
    return ((uint64_t (*)(char *, uint64_t))v64)(v63, v62);
  }
  else
  {
    uint64_t v65 = v63;
    uint64_t v66 = v104;
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v104, v65, v59);
    uint64_t v67 = (uint64_t)v103;
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v103, v66, v59);
    long long v126 = *(_OWORD *)(v98 + 24);
    long long v68 = v61;
    long long v69 = v105;
    long long v70 = EventListenerPhase.Value.init(phase:trackingID:failureReason:)(v67, (uint64_t *)&v126, (char)v121, v105);
    MEMORY[0x270FA5388](v70);
    *(&v93 - 2) = v96;
    *(&v93 - 1) = swift_getWitnessTable();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v69, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v93 - 4), v60, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v71);
    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v69, v60);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v66, v59);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v110, v109);
    return outlined destroy of EventType?((uint64_t)v133);
  }
}

__n128 closure #1 in EventListenerPhase.updateValue()@<Q0>(uint64_t a1@<X8>)
{
  type metadata accessor for EventListenerPhase();
  EventListenerPhase.transform.getter(a1);
  uint64_t Value = (float64x2_t *)AGGraphGetValue();
  __n128 result = *(__n128 *)Value;
  *(float64x2_t *)(a1 + 24) = vsubq_f64(*(float64x2_t *)(a1 + 24), vsubq_f64(*Value, *(float64x2_t *)(a1 + 8)));
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t closure #2 in EventListenerPhase.updateValue()(uint64_t a1, uint64_t a2)
{
  *(void *)uint64_t v6 = 1;
  memset(&v6[8], 0, 32);
  char v7 = 2;
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = 0;
  char v10 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)v6, (uint64_t)v11);
  v11[41] = 4;
  outlined destroy of CoordinateSpace((uint64_t)v6);
  outlined init with take of (key: EventID, value: EventType)?(a2, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for AnyElement?);
  outlined init with take of (key: EventID, value: EventType)?((uint64_t)v12, (uint64_t)&v13, (uint64_t (*)(void))type metadata accessor for AnyElement?);
  if (v13 || *(double *)(a2 + 24) != 0.0 || *(double *)(a2 + 32) != 0.0)
  {
    if (*(void *)(*(void *)a1 + 16))
    {
      long long v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
      *(_OWORD *)&v6[16] = v4;
      *(void *)&v6[32] = *(void *)(a2 + 32);
      specialized ViewTransform.convert(_:_:)((uint64_t)v8, (double *)v6, a1);
    }
  }
  return outlined destroy of ViewTransform.Conversion((uint64_t)v8);
}

uint64_t EventListenerPhase.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  v2._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 93;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI7EventIDV_s5NeverOytTB503_s7c4UI18E82ListenerPhase33_D4E5D14C6252B45A30FB249B3DBDFD35LLV11descriptionSSvgyAA0C2IDVXEfU_SSTf1cn_n(v1);
  return 0x72656E657473694CLL;
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.getter in conformance EventListenerPhase<A>()
{
  return *(unsigned int *)(v0 + 40);
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance EventListenerPhase<A>(uint64_t result)
{
  *(_DWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*protocol witness for ResettableGestureRule.lastResetSeed.modify in conformance EventListenerPhase<A>())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance EventListenerPhase<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for EventListenerPhase.Value();
  Swift::String v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t type metadata accessor for EventListenerPhase.Value()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for EventListenerPhase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for EventListener()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_245CB3270()
{
  return 16;
}

__n128 sub_245CB327C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata accessor for (String, String)()
{
  if (!lazy cache variable for type metadata for (String, String))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, String));
    }
  }
}

uint64_t instantiation function for generic protocol witness table for EventListener<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for EventListener(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245CB33F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for EventListenerPhase(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 44)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EventListenerPhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 44) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 44) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

uint64_t type metadata completion function for EventListenerPhase.Value()
{
  uint64_t result = type metadata accessor for GesturePhase();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for EventListenerPhase.Value(void *__dst, unsigned __int8 *__src, uint64_t a3)
{
  int v4 = __dst;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(void *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = v7 + 1;
  }
  if (v7 <= v8) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = *(void *)(v6 + 64);
  }
  int v10 = *(_DWORD *)(v6 + 80);
  if ((v10 & 0x1000F8) == 0 && (v9 & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFE7)
  {
    unsigned int v13 = __src[v9];
    if (v13 >= 3) {
      unsigned int v13 = *(_DWORD *)__src + 3;
    }
    if (v13 == 2)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      *((unsigned char *)v4 + v9) = 2;
    }
    else if (v13 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      *((unsigned char *)v4 + v9) = 1;
    }
    else if (v13)
    {
      memcpy(__dst, __src, v9 + 1);
    }
    else
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(__src, 1, v5))
      {
        memcpy(v4, __src, v8);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(v4, __src, v5);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      }
      *((unsigned char *)v4 + v9) = 0;
    }
    unint64_t v14 = ((unint64_t)v4 + v9 + 8) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = (unint64_t)&__src[v9 + 8] & 0xFFFFFFFFFFFFFFF8;
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
    *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  }
  else
  {
    uint64_t v12 = *(void *)__src;
    *int v4 = *(void *)__src;
    int v4 = (void *)(v12 + ((unsigned __int16)((v10 & 0xF8) + 23) & (unsigned __int16)~(v10 & 0xF8) & 0x1F8));
    swift_retain();
  }
  return v4;
}

unsigned __int8 *destroy for EventListenerPhase.Value(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  if (*(_DWORD *)(v4 + 84)) {
    unint64_t v6 = *(void *)(v4 + 64);
  }
  else {
    unint64_t v6 = v5 + 1;
  }
  if (v5 > v6) {
    unint64_t v6 = *(void *)(v4 + 64);
  }
  unsigned int v7 = result[v6];
  unsigned int v8 = v7 - 3;
  if (v7 >= 3)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *result;
        goto LABEL_15;
      case 2:
        int v10 = *(unsigned __int16 *)result;
        goto LABEL_15;
      case 3:
        int v10 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_15;
      case 4:
        int v10 = *(_DWORD *)result;
LABEL_15:
        int v11 = (v10 | (v8 << (8 * v6))) + 3;
        unsigned int v7 = v10 + 3;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 - 1 < 2
    || !v7
    && (uint64_t v13 = *(void *)(*(void *)(a2 + 16) - 8),
        result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v4 + 48))(result, 1, v3), uint64_t v4 = v13, !result))
  {
    uint64_t v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v4 + 8);
    return (unsigned __int8 *)v12(v2, v3);
  }
  return result;
}

unsigned char *initializeWithCopy for EventListenerPhase.Value(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(void *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = v7 + 1;
  }
  if (v7 <= v8) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = *(void *)(v6 + 64);
  }
  unsigned int v10 = __src[v9];
  unsigned int v11 = v10 - 3;
  if (v10 >= 3)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *__src;
        goto LABEL_16;
      case 2:
        int v13 = *(unsigned __int16 *)__src;
        goto LABEL_16;
      case 3:
        int v13 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_16;
      case 4:
        int v13 = *(_DWORD *)__src;
LABEL_16:
        int v14 = (v13 | (v11 << (8 * v9))) + 3;
        unsigned int v10 = v13 + 3;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  if (v10 == 2)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
    __dst[v9] = 2;
  }
  else if (v10 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
    __dst[v9] = 1;
  }
  else if (v10)
  {
    memcpy(__dst, __src, v9 + 1);
  }
  else
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(__src, 1, v5))
    {
      memcpy(__dst, __src, v8);
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v6 + 56))(__dst, 0, 1, v5);
    }
    __dst[v9] = 0;
  }
  unint64_t v15 = (unint64_t)&__dst[v9 + 8] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (unint64_t)&__src[v9 + 8] & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  return __dst;
}

unsigned __int8 *assignWithCopy for EventListenerPhase.Value(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (a1 != a2)
  {
    size_t v7 = *(void *)(v6 + 64);
    if (*(_DWORD *)(v6 + 84)) {
      size_t v8 = *(void *)(v6 + 64);
    }
    else {
      size_t v8 = v7 + 1;
    }
    if (v7 <= v8) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = *(void *)(v6 + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 3;
    if (v10 >= 3)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_17;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_17;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_17;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_17:
          int v14 = (v13 | (v11 << (8 * v9))) + 3;
          unsigned int v10 = v13 + 3;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 - 1 < 2
      || !v10 && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v15 = a2[v9];
    unsigned int v16 = v15 - 3;
    if (v15 >= 3)
    {
      if (v9 <= 3) {
        uint64_t v17 = v9;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a2;
          if (v9 >= 4) {
            goto LABEL_42;
          }
          goto LABEL_31;
        case 2:
          int v18 = *(unsigned __int16 *)a2;
          if (v9 < 4) {
            goto LABEL_31;
          }
          goto LABEL_42;
        case 3:
          int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v9 < 4) {
            goto LABEL_31;
          }
          goto LABEL_42;
        case 4:
          int v18 = *(_DWORD *)a2;
          if (v9 < 4)
          {
LABEL_31:
            unsigned int v15 = (v18 | (v16 << (8 * v9))) + 3;
            break;
          }
LABEL_42:
          unsigned int v15 = v18 + 3;
          if (v15 == 2) {
            goto LABEL_43;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v15 == 2)
    {
LABEL_43:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v9] = 2;
    }
    else
    {
LABEL_33:
      if (v15 == 1)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        a1[v9] = 1;
      }
      else if (v15)
      {
        memcpy(a1, a2, v9 + 1);
      }
      else
      {
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
        {
          memcpy(a1, a2, v8);
        }
        else
        {
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
          (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
        }
        a1[v9] = 0;
      }
    }
  }
  unint64_t v19 = *(void *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84)) {
    unint64_t v20 = *(void *)(v6 + 64);
  }
  else {
    unint64_t v20 = v19 + 1;
  }
  if (v19 > v20) {
    unint64_t v20 = *(void *)(v6 + 64);
  }
  unint64_t v21 = v20 + 8;
  unint64_t v22 = (unint64_t)&a1[v21] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (unint64_t)&a2[v21] & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
  *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
  return a1;
}

unsigned char *initializeWithTake for EventListenerPhase.Value(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(void *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = v7 + 1;
  }
  if (v7 <= v8) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = *(void *)(v6 + 64);
  }
  unsigned int v10 = __src[v9];
  unsigned int v11 = v10 - 3;
  if (v10 >= 3)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *__src;
        goto LABEL_16;
      case 2:
        int v13 = *(unsigned __int16 *)__src;
        goto LABEL_16;
      case 3:
        int v13 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_16;
      case 4:
        int v13 = *(_DWORD *)__src;
LABEL_16:
        int v14 = (v13 | (v11 << (8 * v9))) + 3;
        unsigned int v10 = v13 + 3;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  if (v10 == 2)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
    __dst[v9] = 2;
  }
  else if (v10 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
    __dst[v9] = 1;
  }
  else if (v10)
  {
    memcpy(__dst, __src, v9 + 1);
  }
  else
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(__src, 1, v5))
    {
      memcpy(__dst, __src, v8);
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v6 + 56))(__dst, 0, 1, v5);
    }
    __dst[v9] = 0;
  }
  unint64_t v15 = (unint64_t)&__dst[v9 + 8] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (unint64_t)&__src[v9 + 8] & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  return __dst;
}

unsigned __int8 *assignWithTake for EventListenerPhase.Value(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (a1 != a2)
  {
    size_t v7 = *(void *)(v6 + 64);
    if (*(_DWORD *)(v6 + 84)) {
      size_t v8 = *(void *)(v6 + 64);
    }
    else {
      size_t v8 = v7 + 1;
    }
    if (v7 <= v8) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = *(void *)(v6 + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 3;
    if (v10 >= 3)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_17;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_17;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_17;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_17:
          int v14 = (v13 | (v11 << (8 * v9))) + 3;
          unsigned int v10 = v13 + 3;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 - 1 < 2
      || !v10 && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v15 = a2[v9];
    unsigned int v16 = v15 - 3;
    if (v15 >= 3)
    {
      if (v9 <= 3) {
        uint64_t v17 = v9;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a2;
          if (v9 >= 4) {
            goto LABEL_42;
          }
          goto LABEL_31;
        case 2:
          int v18 = *(unsigned __int16 *)a2;
          if (v9 < 4) {
            goto LABEL_31;
          }
          goto LABEL_42;
        case 3:
          int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v9 < 4) {
            goto LABEL_31;
          }
          goto LABEL_42;
        case 4:
          int v18 = *(_DWORD *)a2;
          if (v9 < 4)
          {
LABEL_31:
            unsigned int v15 = (v18 | (v16 << (8 * v9))) + 3;
            break;
          }
LABEL_42:
          unsigned int v15 = v18 + 3;
          if (v15 == 2) {
            goto LABEL_43;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v15 == 2)
    {
LABEL_43:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      a1[v9] = 2;
    }
    else
    {
LABEL_33:
      if (v15 == 1)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        a1[v9] = 1;
      }
      else if (v15)
      {
        memcpy(a1, a2, v9 + 1);
      }
      else
      {
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
        {
          memcpy(a1, a2, v8);
        }
        else
        {
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
          (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
        }
        a1[v9] = 0;
      }
    }
  }
  unint64_t v19 = *(void *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84)) {
    unint64_t v20 = *(void *)(v6 + 64);
  }
  else {
    unint64_t v20 = v19 + 1;
  }
  if (v19 > v20) {
    unint64_t v20 = *(void *)(v6 + 64);
  }
  unint64_t v21 = v20 + 8;
  unint64_t v22 = (unint64_t)&a1[v21] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (unint64_t)&a2[v21] & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
  *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventListenerPhase.Value(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  if (*(_DWORD *)(v3 + 84)) {
    unint64_t v5 = *(void *)(v3 + 64);
  }
  else {
    unint64_t v5 = v4 + 1;
  }
  if (v4 > v5) {
    unint64_t v5 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF)
  {
    unint64_t v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 25;
    if (v6 < 4) {
      unsigned int v7 = ((a2 - 2147483391) >> (8 * v6)) + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      unsigned int v8 = 4;
    }
    else {
      unsigned int v8 = 2;
    }
    if (v7 < 0x100) {
      unsigned int v8 = 1;
    }
    if (v7 >= 2) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    switch(v9)
    {
      case 1:
        int v10 = a1[v6];
        if (!a1[v6]) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v10 = *(unsigned __int16 *)&a1[v6];
        if (*(_WORD *)&a1[v6]) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245CB45E8);
      case 4:
        int v10 = *(_DWORD *)&a1[v6];
        if (!v10) {
          break;
        }
LABEL_24:
        int v12 = (v10 - 1) << (8 * v6);
        if (v6 >= 4) {
          int v12 = 0;
        }
        if (v6 == 1) {
          int v13 = *a1;
        }
        else {
          int v13 = *(_DWORD *)a1;
        }
        return (v13 | v12) + 0x7FFFFFFF;
      default:
        break;
    }
  }
  unint64_t v14 = *(void *)((unint64_t)&a1[v5 + 8] & 0xFFFFFFFFFFFFFFF8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  if ((v14 + 1) >= 2) {
    return v14;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for EventListenerPhase.Value(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84)) {
    unint64_t v7 = *(void *)(v5 + 64);
  }
  else {
    unint64_t v7 = v6 + 1;
  }
  if (v6 > v7) {
    unint64_t v7 = *(void *)(v5 + 64);
  }
  size_t v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 25;
  char v9 = 8 * v8;
  if (a3 < 0x7FFFFFFF)
  {
    int v12 = 0;
  }
  else
  {
    if (v8 <= 3) {
      unsigned int v10 = ((a3 - 2147483391) >> v9) + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
  }
  if (a2 > 0x7FFFFFFE)
  {
    unsigned int v13 = (a2 - 0x7FFFFFFF) >> v9;
    if (v8 < 4) {
      int v14 = v13 + 1;
    }
    else {
      int v14 = 1;
    }
    if (v8 >= 4) {
      unsigned int v15 = a2 - 0x7FFFFFFF;
    }
    else {
      unsigned int v15 = (a2 + 1);
    }
    bzero(a1, v8);
    if (v8 == 1) {
      *a1 = v15;
    }
    else {
      *(_DWORD *)a1 = v15;
    }
    switch(v12)
    {
      case 1:
        a1[v8] = v14;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v14;
        break;
      case 3:
LABEL_42:
        __break(1u);
        JUMPOUT(0x245CB47C0);
      case 4:
        *(_DWORD *)&a1[v8] = v14;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v12)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_36;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_35;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_36;
      default:
LABEL_35:
        if (a2) {
LABEL_36:
        }
          *(void *)((unint64_t)&a1[v7 + 8] & 0xFFFFFFFFFFFFFFF8) = a2;
        break;
    }
  }
}

uint64_t instantiation function for generic protocol witness table for EventListenerPhase<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in EventListenerPhase<A>()
{
  return swift_getWitnessTable();
}

uint64_t outlined init with copy of EventType?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ArrayWith2Inline<(String, String)>(0, &lazy cache variable for type metadata for EventType?, (uint64_t (*)(uint64_t))type metadata accessor for EventType, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of EventType?(uint64_t a1)
{
  type metadata accessor for ArrayWith2Inline<(String, String)>(0, &lazy cache variable for type metadata for EventType?, (uint64_t (*)(uint64_t))type metadata accessor for EventType, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of (key: EventID, value: EventType)?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for AnyElement?(uint64_t a1)
{
}

uint64_t type metadata accessor for EventListenerPhase.FailureReason()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for ArrayWith2Inline<(String, String)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for EventListenerPhase.FailureReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245CB4B44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in EventListenerPhase<A>.FailureReason()
{
  return swift_getWitnessTable();
}

uint64_t GestureCallbacks.cancel(state:)()
{
  return 0;
}

uint64_t static GestureCallbacks<>.initialState.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t CallbacksGesture.callbacks.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t CallbacksGesture.callbacks.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*CallbacksGesture.callbacks.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CallbacksGesture.init(callbacks:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t static CallbacksGesture._makeGesture(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, _OWORD *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _DWORD *a6@<X8>)
{
  unint64_t v31 = a6;
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness - 8);
  unsigned int v13 = (char *)&v29 - v12;
  uint64_t v14 = type metadata accessor for CallbacksPhase();
  uint64_t v30 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unsigned int v16 = (char *)&v29 - v15;
  LODWORD(a1) = *a1;
  long long v17 = *(_OWORD *)(a2 + 80);
  v38[4] = *(_OWORD *)(a2 + 64);
  v38[5] = v17;
  v38[6] = *(_OWORD *)(a2 + 96);
  long long v18 = *(_OWORD *)(a2 + 16);
  v38[0] = *(_OWORD *)a2;
  v38[1] = v18;
  long long v19 = *(_OWORD *)(a2 + 48);
  v38[2] = *(_OWORD *)(a2 + 32);
  v38[3] = v19;
  int v20 = *(_DWORD *)(a2 + 120);
  *(void *)&long long v19 = *(void *)(a2 + 112);
  long long v29 = v19;
  uint64_t v39 = v19;
  int v40 = v20;
  a3(v32, v38);
  LODWORD(a3) = v32[0];
  (*(void (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
  CallbacksPhase.init(modifier:phase:resetSeed:useGestureGraph:state:cancel:lastResetSeed:)((int)a1, (int)a3, v29, (v20 & 0x10) != 0, (uint64_t)v13, 0, 0, 0, (uint64_t)v16);
  swift_getAssociatedTypeWitness();
  uint64_t v35 = type metadata accessor for GesturePhase();
  uint64_t v36 = v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v21 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v34, v14, MEMORY[0x263F8E628], v21, MEMORY[0x263F8E658], v22);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v14);
  int v23 = v38[0];
  AGGraphGetFlags();
  uint64_t result = AGGraphSetFlags();
  int v25 = HIDWORD(v32[0]);
  uint64_t v26 = v32[1];
  int v27 = v33;
  unint64_t v28 = v31;
  *unint64_t v31 = v23;
  v28[1] = v25;
  *((void *)v28 + 1) = v26;
  v28[4] = v27;
  return result;
}

uint64_t type metadata accessor for CallbacksPhase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CallbacksPhase.init(modifier:phase:resetSeed:useGestureGraph:state:cancel:lastResetSeed:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(unsigned char *)(a9 + 12) = a4;
  uint64_t v14 = (int *)type metadata accessor for CallbacksPhase();
  uint64_t v15 = a9 + v14[12];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v15, a5, AssociatedTypeWitness);
  long long v18 = (void *)(a9 + v14[13]);
  *long long v18 = a6;
  v18[1] = a7;
  *(_DWORD *)(a9 + v14[14]) = a8;
  return result;
}

uint64_t CallbacksPhase.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CallbacksGesture();
  uint64_t Value = AGGraphGetValue();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t CallbacksPhase.resetSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance CallbacksGesture<A>@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, _OWORD *)@<X2>, uint64_t a4@<X4>, _DWORD *a5@<X8>)
{
  return static CallbacksGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t CallbacksPhase.resetPhase()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  v7.n128_f64[0] = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)v25 - v8;
  unsigned int v10 = (uint64_t *)(v1 + *(int *)(a1 + 52));
  if (*v10)
  {
    uint64_t v11 = ((uint64_t (*)(uint64_t, double))*v10)(v1 + *(int *)(a1 + 48), v7.n128_f64[0]);
    if (v11)
    {
      uint64_t v13 = v11;
      uint64_t v14 = v12;
      uint64_t v26 = v1;
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = v13;
      *(void *)(v15 + 24) = v14;
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      *(void *)(v16 + 24) = v15;
      v25[1] = v15;
      swift_retain();
      specialized static Update.begin()();
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
      *(void *)(v17 + 24) = v16;
      v25[0] = v17;
      uint64_t v18 = one-time initialization token for actions;
      swift_retain();
      if (v18 != -1) {
        swift_once();
      }
      long long v19 = static Update.actions;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
      }
      unint64_t v21 = v19[2];
      unint64_t v20 = v19[3];
      if (v21 >= v20 >> 1) {
        long long v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v19);
      }
      v19[2] = v21 + 1;
      uint64_t v22 = &v19[2 * v21];
      uint64_t v23 = v25[0];
      v22[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      void v22[5] = v23;
      static Update.actions = v19;
      swift_bridgeObjectRelease();
      static Update.end()();
      swift_release();
      swift_release();
      uint64_t v2 = v26;
    }
  }
  (*(void (**)(uint64_t, uint64_t, __n128))(v4 + 24))(v5, v4, v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v2 + *(int *)(a1 + 48), v9, AssociatedTypeWitness);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*v10);
  *unsigned int v10 = 0;
  v10[1] = 0;
  return result;
}

uint64_t CallbacksPhase.updateValue()(uint64_t a1)
{
  v71[3] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = type metadata accessor for CallbacksGesture();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v67 = (uint64_t)v58 - v6;
  uint64_t v7 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v8);
  unsigned int v10 = (char *)v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for GesturePhase();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v69 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v14 = (char *)v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v58 - v16;
  swift_getWitnessTable();
  uint64_t v70 = a1;
  uint64_t result = ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    long long v63 = v10;
    uint64_t v64 = v7;
    uint64_t v61 = v4;
    uint64_t v65 = v3;
    uint64_t v19 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v68 = v1;
    uint64_t Value = AGGraphGetValue();
    char v22 = v21;
    uint64_t v23 = *(void *)(v11 - 8);
    uint64_t v24 = v11;
    int v25 = *(uint64_t (**)(char *, char *, uint64_t))(v23 + 16);
    uint64_t v66 = v25;
    v25(v17, (char *)Value, v24);
    v58[0] = v19;
    v58[1] = v23 + 16;
    v17[v19] = v22 & 1;
    uint64_t v26 = v68;
    uint64_t v62 = TupleTypeMetadata2;
    uint64_t v27 = *(int *)(TupleTypeMetadata2 + 48);
    v25(v14, v17, v24);
    uint64_t v28 = v24;
    long long v29 = v14;
    v14[v27] = v22 & 1;
    long long v59 = *(void (**)(char *, uint64_t))(v23 + 8);
    uint64_t v60 = v23 + 8;
    v59(v14, v24);
    if (v22)
    {
      uint64_t v30 = v67;
      uint64_t v31 = v70;
      CallbacksPhase.modifier.getter(v67);
      uint64_t v32 = v65;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v63, v30, v65);
      uint64_t v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 32))(v17, v26 + *(int *)(v31 + 48), v32, v61);
      if (v33)
      {
        uint64_t v35 = v33;
        uint64_t v36 = v34;
        uint64_t v37 = swift_allocObject();
        *(void *)(v37 + 16) = v35;
        *(void *)(v37 + 24) = v36;
        v71[0] = (uint64_t)partial apply for thunk for @escaping @callee_guaranteed () -> ();
        v71[1] = v37;
        closure #1 in CallbacksPhase.updateValue()(v71, v26);
        outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)partial apply for thunk for @escaping @callee_guaranteed () -> ());
      }
      uint64_t v42 = v62;
      uint64_t v43 = *(int *)(v62 + 48);
      uint64_t v44 = v66(v29, v17, v28);
      uint64_t v45 = (uint64_t)v29;
      uint64_t v46 = v58[0];
      *(unsigned char *)(v45 + v43) = v17[v58[0]];
      MEMORY[0x270FA5388](v44);
      v58[-2] = v70;
      v58[-1] = swift_getWitnessTable();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v45, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)&v58[-4], v28, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v47);
      uint64_t v48 = (void (*)(uint64_t, uint64_t))v59;
      v59((char *)v45, v28);
      uint64_t v49 = *(int *)(v42 + 48);
      v66((char *)v45, v17, v28);
      *(unsigned char *)(v45 + v49) = v17[v46];
      char v50 = GesturePhase.isTerminal.getter(v28);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v17, v42);
      v48(v45, v28);
      if (v50)
      {
        long long v51 = 0;
        uint64_t v52 = 0;
        uint64_t v53 = v68;
        uint64_t v54 = v65;
        uint64_t v55 = (uint64_t)v63;
      }
      else
      {
        uint64_t v55 = (uint64_t)v63;
        uint64_t v54 = v65;
        long long v51 = implicit closure #1 in CallbacksPhase.updateValue()((uint64_t)v63, v65, v61);
        uint64_t v52 = v56;
        uint64_t v53 = v68;
      }
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v55, v54);
      long long v57 = (uint64_t *)(v53 + *(int *)(v70 + 52));
      uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*v57);
      uint64_t *v57 = (uint64_t)v51;
      v57[1] = v52;
    }
    else if (AGGraphGetOutputValue())
    {
      return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v17, v62);
    }
    else
    {
      uint64_t v38 = v62;
      uint64_t v39 = *(int *)(v62 + 48);
      uint64_t v40 = v66(v14, v17, v28);
      v14[v39] = 0;
      MEMORY[0x270FA5388](v40);
      v58[-2] = v70;
      v58[-1] = swift_getWitnessTable();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v14, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v58[-4], v28, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v41);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v17, v38);
      return ((uint64_t (*)(char *, uint64_t))v59)(v14, v28);
    }
  }
  return result;
}

uint64_t closure #1 in CallbacksPhase.updateValue()(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CallbacksPhase();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v24 - v8;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  int v13 = v9[12];
  swift_retain();
  if (v13 == 1)
  {
    uint64_t v14 = specialized static GestureGraph.current.getter();
    if (MEMORY[0x24C527E00](v14 + 192))
    {
      uint64_t v15 = *(void *)(v14 + 200);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v15 + 8))(partial apply for thunk for @escaping @callee_guaranteed () -> (@out ()), v12, ObjectType, v15);
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
      swift_release();
    }
  }
  else
  {
    v24[1] = v3;
    specialized static Update.begin()();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
    *(void *)(v17 + 24) = v12;
    uint64_t v18 = one-time initialization token for actions;
    swift_retain();
    if (v18 != -1) {
      swift_once();
    }
    uint64_t v19 = static Update.actions;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    }
    unint64_t v21 = v19[2];
    unint64_t v20 = v19[3];
    if (v21 >= v20 >> 1) {
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v19);
    }
    v19[2] = v21 + 1;
    char v22 = &v19[2 * v21];
    v22[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
    void v22[5] = v17;
    static Update.actions = v19;
    swift_bridgeObjectRelease();
    static Update.end()();
    swift_release();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t (*implicit closure #1 in CallbacksPhase.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  double v7 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v5 + 16))(v8, v7);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, v8, a2);
  return partial apply for implicit closure #2 in implicit closure #1 in CallbacksPhase.updateValue();
}

uint64_t static CallbacksPhase.willRemove(attribute:)()
{
  AGGraphGetAttributeInfo();
  uint64_t v0 = type metadata accessor for CallbacksPhase();
  return CallbacksPhase.resetPhase()(v0);
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.getter in conformance CallbacksPhase<A>(uint64_t a1)
{
  return *(unsigned int *)(v1 + *(int *)(a1 + 56));
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance CallbacksPhase<A>(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(v2 + *(int *)(a2 + 56)) = result;
  return result;
}

uint64_t (*protocol witness for ResettableGestureRule.lastResetSeed.modify in conformance CallbacksPhase<A>())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance CallbacksPhase<A>()
{
  return static CallbacksPhase.willRemove(attribute:)();
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance CallbacksPhase<A>@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t FullGestureCallbacks.StateType.init()@<X0>(unsigned char *a1@<X8>)
{
  *a1 = 0;
  uint64_t v1 = &a1[*(int *)(type metadata accessor for FullGestureCallbacks.StateType() + 36)];
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t v3 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

uint64_t protocol witness for GestureStateProtocol.init() in conformance FullGestureCallbacks<A>.StateType@<X0>(unsigned char *a1@<X8>)
{
  return FullGestureCallbacks.StateType.init()(a1);
}

uint64_t key path getter for FullGestureCallbacks.possible : <A>FullGestureCallbacks<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1)
  {
    uint64_t v7 = a3 + a2;
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 - 16);
    *(void *)(v8 + 32) = v5;
    *(void *)(v8 + 40) = v6;
    unint64_t v9 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?) -> ();
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  *a4 = v9;
  a4[1] = (uint64_t (*)())v8;

  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v5);
}

uint64_t key path setter for FullGestureCallbacks.possible : <A>FullGestureCallbacks<A>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1)
  {
    uint64_t v7 = a4 + a3;
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 - 16);
    *(void *)(v8 + 32) = v5;
    *(void *)(v8 + 40) = v6;
    unint64_t v9 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?) -> (@out ());
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v10 = *a2;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v5);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v10);
  *a2 = (uint64_t)v9;
  a2[1] = v8;
  return result;
}

uint64_t FullGestureCallbacks.possible.getter()
{
  uint64_t v1 = *v0;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*v0);
  return v1;
}

uint64_t FullGestureCallbacks.possible.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*v2);
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*FullGestureCallbacks.possible.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for FullGestureCallbacks.changed : <A>FullGestureCallbacks<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  if (v5)
  {
    uint64_t v7 = a3 + a2;
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 - 16);
    *(void *)(v8 + 32) = v5;
    *(void *)(v8 + 40) = v6;
    unint64_t v9 = thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ()partial apply;
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  *a4 = v9;
  a4[1] = (uint64_t (*)())v8;

  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v5);
}

uint64_t key path setter for FullGestureCallbacks.changed : <A>FullGestureCallbacks<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1)
  {
    uint64_t v7 = a4 + a3;
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 - 16);
    *(void *)(v8 + 32) = v5;
    *(void *)(v8 + 40) = v6;
    unint64_t v9 = thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ())partial apply;
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v10 = *(void *)(a2 + 16);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v5);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v10);
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v8;
  return result;
}

uint64_t FullGestureCallbacks.changed.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
  return v1;
}

uint64_t FullGestureCallbacks.changed.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(void *)(v2 + 16));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*FullGestureCallbacks.changed.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for FullGestureCallbacks.ended : <A>FullGestureCallbacks<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)(uint64_t a1)@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v5)
  {
    uint64_t v7 = a3 + a2;
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 - 16);
    *(void *)(v8 + 32) = v5;
    *(void *)(v8 + 40) = v6;
    unint64_t v9 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ();
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  *a4 = v9;
  a4[1] = (uint64_t (*)(uint64_t))v8;

  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v5);
}

uint64_t key path setter for FullGestureCallbacks.ended : <A>FullGestureCallbacks<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1)
  {
    uint64_t v7 = a4 + a3;
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 - 16);
    *(void *)(v8 + 32) = v5;
    *(void *)(v8 + 40) = v6;
    unint64_t v9 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ());
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v10 = *(void *)(a2 + 32);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v5);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v10);
  *(void *)(a2 + 32) = v9;
  *(void *)(a2 + 40) = v8;
  return result;
}

uint64_t FullGestureCallbacks.ended.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
  return v1;
}

uint64_t FullGestureCallbacks.ended.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(void *)(v2 + 32));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*FullGestureCallbacks.ended.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for FullGestureCallbacks.failed : <A>FullGestureCallbacks<A>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;

  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
}

uint64_t key path setter for FullGestureCallbacks.failed : <A>FullGestureCallbacks<A>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 48);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v7);
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = v5;
  return result;
}

uint64_t FullGestureCallbacks.failed.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
  return v1;
}

uint64_t FullGestureCallbacks.failed.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(void *)(v2 + 48));
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*FullGestureCallbacks.failed.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t FullGestureCallbacks.init(possible:changed:ended:failed:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  return result;
}

uint64_t (*FullGestureCallbacks.dispatch(phase:state:)(uint64_t a1, unsigned char *a2, uint64_t a3))()
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v67 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v62 = (char *)v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55[1] = v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v66 = (char *)v55 - v11;
  uint64_t v60 = type metadata accessor for Optional();
  uint64_t v59 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  long long v58 = (char *)v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v56 = (char *)v55 - v14;
  uint64_t v15 = type metadata accessor for GesturePhase();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v64 = (char *)v55 - v17;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  unint64_t v21 = (char *)v55 - v20;
  long long v22 = v4[1];
  long long v73 = *v4;
  long long v74 = v22;
  long long v23 = v4[3];
  long long v75 = v4[2];
  long long v76 = v23;
  uint64_t v24 = *(void *)(a3 + 24);
  uint64_t v25 = *(int *)(type metadata accessor for FullGestureCallbacks.StateType() + 36);
  long long v63 = a2;
  uint64_t v26 = &a2[v25];
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, v26, v18);
  uint64_t v69 = v8;
  uint64_t v70 = v24;
  uint64_t v61 = v24;
  uint64_t v65 = a1;
  uint64_t v71 = a1;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in FullGestureCallbacks.dispatch(phase:state:), (uint64_t)v68, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], v27, (uint64_t)&v72);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v19 + 8);
  v28(v21, v18);
  if (v72 == 2 || (long long v29 = 0, (v72 & 1) != 0))
  {
    v28(v26, v18);
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    uint64_t v31 = v65;
    v30(v26, v65, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v26, 0, 1, v15);
    uint64_t v32 = v64;
    v30(v64, v31, v15);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    uint64_t v34 = v66;
    uint64_t v35 = v67;
    switch(EnumCaseMultiPayload)
    {
      case 1:
        uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
        v46(v66, v32, v8);
        *long long v63 = 1;
        uint64_t v47 = v74;
        if ((void)v74)
        {
          uint64_t v48 = *((void *)&v74 + 1);
          uint64_t v49 = v62;
          v46(v62, v34, v8);
          unint64_t v50 = (*(unsigned __int8 *)(v35 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
          long long v51 = (char *)swift_allocObject();
          uint64_t v52 = v61;
          *((void *)v51 + 2) = v8;
          *((void *)v51 + 3) = v52;
          *((void *)v51 + 4) = v47;
          *((void *)v51 + 5) = v48;
          v46(&v51[v50], v49, v8);
          swift_retain();
          long long v29 = partial apply for closure #3 in FullGestureCallbacks.dispatch(phase:state:);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v8);
          long long v29 = 0;
        }
        break;
      case 2:
        uint64_t v53 = (uint64_t)v62;
        (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v62, v32, v8);
        long long v29 = bind<A>(_:_:)(v75, *((uint64_t *)&v75 + 1), v53, v8);
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v53, v8);
        break;
      case 3:
        long long v29 = (uint64_t (*)())v76;
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v76);
        break;
      default:
        uint64_t v37 = v59 + 32;
        uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
        uint64_t v38 = v56;
        uint64_t v39 = v60;
        v36(v56, v32, v60);
        *long long v63 = 0;
        uint64_t v40 = v58;
        v36(v58, v38, v39);
        unint64_t v41 = (*(unsigned __int8 *)(v37 + 48) + 96) & ~(unint64_t)*(unsigned __int8 *)(v37 + 48);
        uint64_t v42 = swift_allocObject();
        uint64_t v43 = v61;
        *(void *)(v42 + 16) = v8;
        *(void *)(v42 + 24) = v43;
        long long v44 = v74;
        *(_OWORD *)(v42 + 32) = v73;
        *(_OWORD *)(v42 + 48) = v44;
        long long v45 = v76;
        *(_OWORD *)(v42 + 64) = v75;
        *(_OWORD *)(v42 + 80) = v45;
        v36((char *)(v42 + v41), v40, v39);
        outlined retain of FullGestureCallbacks<A>((uint64_t *)&v73);
        long long v29 = partial apply for closure #2 in FullGestureCallbacks.dispatch(phase:state:);
        break;
    }
  }
  return v29;
}

uint64_t closure #3 in FullGestureCallbacks.dispatch(phase:state:)()
{
  swift_getKeyPath();
  swift_setAtWritableKeyPath();
  uint64_t v0 = swift_retain();
  specialized closure #1 in withTransaction<A>(_:_:)(v0, (void (*)(void *))partial apply for closure #1 in closure #2 in ChangedCallbacks.dispatch(phase:state:));
  swift_release();
  return swift_release_n();
}

uint64_t FullGestureCallbacks.cancel(state:)()
{
  uint64_t v0 = specialized FullGestureCallbacks.cancel(state:)();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v0);
  return v0;
}

uint64_t protocol witness for static GestureCallbacks.initialState.getter in conformance FullGestureCallbacks<A>(uint64_t a1, uint64_t a2)
{
  return static GestureCallbacks<>.initialState.getter(a1, a2, (uint64_t)&protocol witness table for FullGestureCallbacks<A>.StateType);
}

uint64_t protocol witness for GestureCallbacks.cancel(state:) in conformance FullGestureCallbacks<A>()
{
  uint64_t v0 = specialized FullGestureCallbacks.cancel(state:)();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v0);
  return v0;
}

uint64_t Gesture.onFailed(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  swift_getAssociatedTypeWitness();
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v8 = type metadata accessor for FailedCallbacks();
  swift_retain();
  swift_getWitnessTable();
  Gesture.callbacks<A>(_:)((uint64_t)v10, a3, v8, a4);
  return swift_release();
}

uint64_t Gesture<>.onChanged(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for ChangedCallbacks();
  swift_getWitnessTable();
  type metadata accessor for CallbacksGesture();
  double v15[2] = swift_getWitnessTable();
  v15[3] = a4;
  uint64_t v11 = type metadata accessor for ModifierGesture();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v15 - v12;
  v15[0] = a1;
  v15[1] = a2;
  swift_retain();
  Gesture.callbacks<A>(_:)((uint64_t)v15, a3, v10, (uint64_t)v13);
  swift_release();
  return _ChangedGesture.init(_body:)((uint64_t)v13, a5);
}

uint64_t _ChangedGesture.init(_body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for ChangedCallbacks();
  swift_getWitnessTable();
  type metadata accessor for CallbacksGesture();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for ModifierGesture();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t Gesture<>.callbacks(possible:changed:ended:failed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  swift_getAssociatedTypeWitness();
  v21[0] = a1;
  v21[1] = a2;
  uint64_t v21[2] = a3;
  v21[3] = a4;
  v21[4] = a5;
  v21[5] = a6;
  v21[6] = a7;
  v21[7] = a8;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a1);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a3);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a5);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a7);
  uint64_t v18 = type metadata accessor for FullGestureCallbacks();
  swift_getWitnessTable();
  Gesture.callbacks<A>(_:)((uint64_t)v21, a10, v18, a9);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a1);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a3);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a5);
  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a7);
}

double static _EndedGesture._makeGesture(gesture:inputs:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v8 = *a1;
  long long v9 = *(_OWORD *)(a2 + 80);
  long long v41 = *(_OWORD *)(a2 + 64);
  long long v42 = v9;
  long long v43 = *(_OWORD *)(a2 + 96);
  uint64_t v44 = *(void *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v37 = *(_OWORD *)a2;
  long long v38 = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v39 = *(_OWORD *)(a2 + 32);
  long long v40 = v11;
  int v12 = *(_DWORD *)(a2 + 120);
  swift_getAssociatedTypeWitness();
  type metadata accessor for EndedCallbacks();
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for CallbacksGesture();
  uint64_t WitnessTable = swift_getWitnessTable();
  *((void *)&v25 + 1) = a3;
  *(void *)&long long v26 = WitnessTable;
  *((void *)&v26 + 1) = a4;
  uint64_t v15 = type metadata accessor for ModifierGesture();
  *(void *)&long long v25 = __PAIR64__(HIDWORD(v13), v8);
  type metadata accessor for _EndedGesture();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _EndedGesture._makeGesture(gesture:inputs:), v15, v22);
  long long v29 = v41;
  long long v30 = v42;
  long long v31 = v43;
  uint64_t v32 = v44;
  long long v25 = v37;
  long long v26 = v38;
  long long v27 = v39;
  long long v28 = v40;
  int v33 = v12;
  static ModifierGesture._makeGesture(gesture:inputs:)((int *)v22, &v25, v13, a3, WitnessTable, a4, (uint64_t)&v34);
  if ((v12 & 8) != 0 && !(swift_conformsToProtocol2() ? v15 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol()) {
      char v17 = 2;
    }
    else {
      char v17 = 1;
    }
    char v24 = v17;
    long long v29 = v41;
    long long v30 = v42;
    long long v31 = v43;
    uint64_t v32 = v44;
    long long v25 = v37;
    long long v26 = v38;
    long long v27 = v39;
    long long v28 = v40;
    int v33 = v12;
    *(double *)long long v22 = v34;
    v22[1] = v35;
    int v23 = v36;
    type metadata accessor for _GestureOutputs();
    unint64_t v18 = _GestureOutputs.debugData.getter();
    LOBYTE(v22[0]) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v15, &v24, 0x100000000, &v25, v18 | ((HIDWORD(v18) & 1) << 32), 0x100000000);
  }
  uint64_t v19 = v35;
  int v20 = v36;
  double result = v34;
  *(double *)a5 = v34;
  *(void *)(a5 + 8) = v19;
  *(_DWORD *)(a5 + 16) = v20;
  return result;
}

uint64_t closure #1 in static _EndedGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[2] = type metadata accessor for _EndedGesture();
  swift_getAssociatedTypeWitness();
  type metadata accessor for EndedCallbacks();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for CallbacksGesture();
  uint64_t v12 = a2;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = a3;
  uint64_t v10 = type metadata accessor for ModifierGesture();
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, v10, MEMORY[0x263F8E628], v6, MEMORY[0x263F8E658], v7);
  return v11;
}

double protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance _EndedGesture<A>@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static _EndedGesture._makeGesture(gesture:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

double static _ChangedGesture._makeGesture(gesture:inputs:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v8 = *a1;
  long long v9 = *(_OWORD *)(a2 + 80);
  long long v41 = *(_OWORD *)(a2 + 64);
  long long v42 = v9;
  long long v43 = *(_OWORD *)(a2 + 96);
  uint64_t v44 = *(void *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v37 = *(_OWORD *)a2;
  long long v38 = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v39 = *(_OWORD *)(a2 + 32);
  long long v40 = v11;
  int v12 = *(_DWORD *)(a2 + 120);
  swift_getAssociatedTypeWitness();
  type metadata accessor for ChangedCallbacks();
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for CallbacksGesture();
  uint64_t WitnessTable = swift_getWitnessTable();
  *((void *)&v25 + 1) = a3;
  *(void *)&long long v26 = WitnessTable;
  *((void *)&v26 + 1) = a4;
  uint64_t v15 = type metadata accessor for ModifierGesture();
  *(void *)&long long v25 = __PAIR64__(HIDWORD(v13), v8);
  type metadata accessor for _ChangedGesture();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _ChangedGesture._makeGesture(gesture:inputs:), v15, v22);
  long long v29 = v41;
  long long v30 = v42;
  long long v31 = v43;
  uint64_t v32 = v44;
  long long v25 = v37;
  long long v26 = v38;
  long long v27 = v39;
  long long v28 = v40;
  int v33 = v12;
  static ModifierGesture._makeGesture(gesture:inputs:)((int *)v22, &v25, v13, a3, WitnessTable, a4, (uint64_t)&v34);
  if ((v12 & 8) != 0 && !(swift_conformsToProtocol2() ? v15 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol()) {
      char v17 = 2;
    }
    else {
      char v17 = 1;
    }
    char v24 = v17;
    long long v29 = v41;
    long long v30 = v42;
    long long v31 = v43;
    uint64_t v32 = v44;
    long long v25 = v37;
    long long v26 = v38;
    long long v27 = v39;
    long long v28 = v40;
    int v33 = v12;
    *(double *)long long v22 = v34;
    v22[1] = v35;
    int v23 = v36;
    type metadata accessor for _GestureOutputs();
    unint64_t v18 = _GestureOutputs.debugData.getter();
    LOBYTE(v22[0]) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v15, &v24, 0x100000000, &v25, v18 | ((HIDWORD(v18) & 1) << 32), 0x100000000);
  }
  uint64_t v19 = v35;
  int v20 = v36;
  double result = v34;
  *(double *)a5 = v34;
  *(void *)(a5 + 8) = v19;
  *(_DWORD *)(a5 + 16) = v20;
  return result;
}

uint64_t closure #1 in static _ChangedGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[2] = type metadata accessor for _ChangedGesture();
  swift_getAssociatedTypeWitness();
  type metadata accessor for ChangedCallbacks();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for CallbacksGesture();
  uint64_t v12 = a2;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = a3;
  uint64_t v10 = type metadata accessor for ModifierGesture();
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v9, v10, MEMORY[0x263F8E628], v6, MEMORY[0x263F8E658], v7);
  return v11;
}

double protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance _ChangedGesture<A>@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static _ChangedGesture._makeGesture(gesture:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t (*EndedCallbacks.dispatch(phase:state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v26 = a3;
  uint64_t v8 = type metadata accessor for GesturePhase();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v12 = *(void *)(a5 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v14);
  uint64_t v15 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v25 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, v8, v17);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    int v20 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v20(v19, v11, a5);
    v20(v15, v19, a5);
    unint64_t v21 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    long long v22 = (char *)swift_allocObject();
    uint64_t v23 = v26;
    *((void *)v22 + 2) = a5;
    *((void *)v22 + 3) = v23;
    *((void *)v22 + 4) = a4;
    v20(&v22[v21], v15, a5);
    swift_retain();
    return partial apply for closure #1 in bind<A>(_:_:);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return 0;
  }
}

uint64_t (*protocol witness for GestureCallbacks.dispatch(phase:state:) in conformance EndedCallbacks<A>(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  return EndedCallbacks.dispatch(phase:state:)(a1, a2, *v3, v3[1], *(void *)(a3 + 16));
}

uint64_t FailedCallbacks.failed.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t FailedCallbacks.dispatch(phase:state:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for GesturePhase();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v11 - v6;
  uint64_t v8 = *v1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)&v11 - v6, a1, v3, v5);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  uint64_t result = 0;
  if (EnumCaseMultiPayload == 3)
  {
    swift_retain();
    return v8;
  }
  return result;
}

uint64_t FailedCallbacks.cancel(state:)()
{
  uint64_t v0 = specialized FailedCallbacks.cancel(state:)();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v0);
  return v0;
}

uint64_t protocol witness for GestureCallbacks.cancel(state:) in conformance FailedCallbacks<A>()
{
  uint64_t v0 = specialized FailedCallbacks.cancel(state:)();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v0);
  return v0;
}

uint64_t protocol witness for GestureStateProtocol.init() in conformance ChangedCallbacks<A>.StateType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return variable initialization expression of CodableOptional.base(*(void *)(a1 + 16), a2);
}

uint64_t (*ChangedCallbacks.dispatch(phase:state:)(uint64_t *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))()
{
  long long v42 = a2;
  uint64_t v43 = a6;
  uint64_t v40 = a3;
  uint64_t v41 = a4;
  uint64_t v44 = a1;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v35 - v9;
  uint64_t v11 = type metadata accessor for GesturePhase();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v35 - v13;
  uint64_t v15 = *(void *)(a5 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x270FA5388](v17);
  long long v39 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v19 = MEMORY[0x270FA5388](v18);
  unint64_t v21 = (char *)&v35 - v20;
  (*(void (**)(char *, uint64_t *, uint64_t, double))(v12 + 16))(v14, v44, v11, v19);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return 0;
  }
  uint64_t v38 = v15;
  int v36 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v36(v21, v14, a5);
  long long v22 = v42;
  uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 16))(v10, v42, v7);
  uint64_t v44 = &v35;
  MEMORY[0x270FA5388](v23);
  uint64_t v24 = v43;
  *(&v35 - 4) = a5;
  *(&v35 - 3) = v24;
  *(&v35 - 2) = (uint64_t)v21;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ChangedCallbacks.dispatch(phase:state:), (uint64_t)(&v35 - 6), MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], v25, (uint64_t)&v45);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v37 = v8 + 8;
  v26(v10, v7);
  if (v45 != 2 && (v45 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v21, a5);
    return 0;
  }
  v26(v22, v7);
  uint64_t v28 = v38;
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v22, v21, a5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v22, 0, 1, a5);
  long long v29 = v39;
  long long v30 = v21;
  long long v31 = v36;
  v36(v39, v30, a5);
  unint64_t v32 = (*(unsigned __int8 *)(v28 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  int v33 = (char *)swift_allocObject();
  *((void *)v33 + 2) = a5;
  *((void *)v33 + 3) = v24;
  uint64_t v34 = v41;
  *((void *)v33 + 4) = v40;
  *((void *)v33 + 5) = v34;
  v31(&v33[v32], v29, a5);
  swift_retain();
  return partial apply for closure #3 in FullGestureCallbacks.dispatch(phase:state:);
}

uint64_t protocol witness for static GestureCallbacks.initialState.getter in conformance ChangedCallbacks<A>(uint64_t a1, uint64_t a2)
{
  return static GestureCallbacks<>.initialState.getter(a1, a2, (uint64_t)&protocol witness table for ChangedCallbacks<A>.StateType);
}

uint64_t (*protocol witness for GestureCallbacks.dispatch(phase:state:) in conformance ChangedCallbacks<A>(uint64_t *a1, char *a2, uint64_t a3))()
{
  return ChangedCallbacks.dispatch(phase:state:)(a1, a2, *v3, v3[1], *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t type metadata accessor for FullGestureCallbacks.StateType()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in FullGestureCallbacks.dispatch(phase:state:)@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result = static GesturePhase<A>.== infix(_:_:)(a1, *(char **)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24));
  *a2 = (result & 1) == 0;
  return result;
}

uint64_t partial apply for closure #3 in FullGestureCallbacks.dispatch(phase:state:)()
{
  return partial apply for closure #3 in FullGestureCallbacks.dispatch(phase:state:)((uint64_t (*)(void, void, char *))closure #3 in FullGestureCallbacks.dispatch(phase:state:));
}

uint64_t sub_245CB8554()
{
  uint64_t v1 = *((void *)v0 + 2);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for Optional() - 8) + 80);
  if (*((void *)v0 + 4)) {
    swift_release();
  }
  if (*((void *)v0 + 6)) {
    swift_release();
  }
  if (*((void *)v0 + 8)) {
    swift_release();
  }
  uint64_t v3 = (v2 + 96) & ~v2;
  if (*((void *)v0 + 10)) {
    swift_release();
  }
  uint64_t v4 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(&v0[v3], 1, v1)) {
    (*(void (**)(char *, uint64_t))(v4 + 8))(&v0[v3], v1);
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in FullGestureCallbacks.dispatch(phase:state:)()
{
  uint64_t v1 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v1 - 8);
  uint64_t result = v1 - 8;
  uint64_t v3 = v4;
  double v5 = *(uint64_t (**)(unint64_t))(v0 + 32);
  if (v5) {
    return v5(v0 + ((*(unsigned __int8 *)(v3 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
  }
  return result;
}

uint64_t *outlined retain of FullGestureCallbacks<A>(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[6];
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*a1);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v2);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v4);
  return a1;
}

uint64_t specialized FailedCallbacks.cancel(state:)()
{
  return *(void *)v0;
}

uint64_t specialized FullGestureCallbacks.cancel(state:)()
{
  return *(void *)(v0 + 48);
}

uint64_t type metadata accessor for FullGestureCallbacks()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in static _EndedGesture._makeGesture(gesture:inputs:)(uint64_t a1)
{
  return closure #1 in static _EndedGesture._makeGesture(gesture:inputs:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in static _ChangedGesture._makeGesture(gesture:inputs:)(uint64_t a1)
{
  return closure #1 in static _ChangedGesture._makeGesture(gesture:inputs:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t instantiation function for generic protocol witness table for _EndedGesture<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for _ChangedGesture<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_245CB8860()
{
  return 16;
}

__n128 sub_245CB886C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_245CB8880()
{
  return 16;
}

__n128 sub_245CB888C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_245CB88A0()
{
  return 16;
}

__n128 sub_245CB88AC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_245CB88C0()
{
  return 16;
}

__n128 sub_245CB88CC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of static GestureCallbacks.initialState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of GestureCallbacks.dispatch(phase:state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of GestureCallbacks.cancel(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t getEnumTagSinglePayload for CallbacksGesture(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for CallbacksGesture(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245CB8C88);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

void *destroy for FullGestureCallbacks(void *result)
{
  uint64_t v1 = result;
  if (*result) {
    __n128 result = (void *)swift_release();
  }
  if (v1[2]) {
    __n128 result = (void *)swift_release();
  }
  if (v1[4]) {
    __n128 result = (void *)swift_release();
  }
  if (v1[6])
  {
    return (void *)swift_release();
  }
  return result;
}

void *initializeWithCopy for FullGestureCallbacks(void *a1, void *a2)
{
  if (*a2)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  uint64_t v5 = a2[2];
  if (v5)
  {
    uint64_t v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  uint64_t v7 = a2[4];
  if (v7)
  {
    uint64_t v8 = a2[5];
    a1[4] = v7;
    a1[5] = v8;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  }
  uint64_t v9 = a2[6];
  if (v9)
  {
    uint64_t v10 = a2[7];
    a1[6] = v9;
    a1[7] = v10;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  }
  return a1;
}

void *assignWithCopy for FullGestureCallbacks(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  uint64_t v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      uint64_t v8 = a2[3];
      a1[2] = v7;
      a1[3] = v8;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = a2[3];
    a1[2] = v7;
    a1[3] = v9;
    swift_retain();
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
LABEL_15:
  uint64_t v10 = a2[4];
  if (a1[4])
  {
    if (v10)
    {
      uint64_t v11 = a2[5];
      a1[4] = v10;
      a1[5] = v11;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    uint64_t v12 = a2[5];
    a1[4] = v10;
    a1[5] = v12;
    swift_retain();
    goto LABEL_22;
  }
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
LABEL_22:
  uint64_t v13 = a2[6];
  if (!a1[6])
  {
    if (v13)
    {
      uint64_t v15 = a2[7];
      a1[6] = v13;
      a1[7] = v15;
      swift_retain();
      return a1;
    }
LABEL_28:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    return a1;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_28;
  }
  uint64_t v14 = a2[7];
  a1[6] = v13;
  a1[7] = v14;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for FullGestureCallbacks(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  uint64_t v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      uint64_t v8 = a2[3];
      a1[2] = v7;
      a1[3] = v8;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = a2[3];
    a1[2] = v7;
    a1[3] = v9;
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
LABEL_15:
  uint64_t v10 = a2[4];
  if (a1[4])
  {
    if (v10)
    {
      uint64_t v11 = a2[5];
      a1[4] = v10;
      a1[5] = v11;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    uint64_t v12 = a2[5];
    a1[4] = v10;
    a1[5] = v12;
    goto LABEL_22;
  }
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
LABEL_22:
  uint64_t v13 = a2[6];
  if (!a1[6])
  {
    if (v13)
    {
      uint64_t v15 = a2[7];
      a1[6] = v13;
      a1[7] = v15;
      return a1;
    }
LABEL_28:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    return a1;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_28;
  }
  uint64_t v14 = a2[7];
  a1[6] = v13;
  a1[7] = v14;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FullGestureCallbacks(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FullGestureCallbacks(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

uint64_t type metadata completion function for FullGestureCallbacks.StateType()
{
  type metadata accessor for GesturePhase();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FullGestureCallbacks.StateType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  unint64_t v9 = ~(unint64_t)v7;
  size_t v10 = *(void *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84)) {
    size_t v11 = *(void *)(v5 + 64);
  }
  else {
    size_t v11 = v10 + 1;
  }
  if (v10 <= v11) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = *(void *)(v5 + 64);
  }
  unint64_t v13 = v12 + 1 + ((v7 + 1) & ~(unint64_t)v7);
  int v14 = v7 & 0x100000;
  if (v8 > 7 || v14 != 0 || v13 > 0x18)
  {
    uint64_t v17 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v17 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v18 = (unsigned char *)(((unint64_t)a1 + v8 + 1) & v9);
    double v19 = (unsigned __int8 *)(((unint64_t)a2 + v8 + 1) & v9);
    unsigned int v20 = v19[v12];
    unsigned int v21 = v20 - 3;
    if (v20 > 3) {
      goto LABEL_34;
    }
    if (v20 == 3)
    {
      if (v12 <= 3) {
        uint64_t v22 = v12;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *v19;
          break;
        case 2:
          int v23 = *(unsigned __int16 *)v19;
          break;
        case 3:
          int v23 = *(unsigned __int16 *)v19 | (v19[2] << 16);
          break;
        case 4:
          int v23 = *(_DWORD *)v19;
          break;
        default:
          goto LABEL_34;
      }
      int v24 = (v23 | (v21 << (8 * v12))) + 3;
      unsigned int v20 = v23 + 3;
      if (v12 < 4) {
        unsigned int v20 = v24;
      }
    }
    if (v20 == 2)
    {
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 16))(v18, v19, v4);
      v18[v12] = 2;
      return v3;
    }
    if (v20 == 1)
    {
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 16))(v18, v19, v4);
      v18[v12] = 1;
      return v3;
    }
    if (v20)
    {
LABEL_34:
      memcpy(v18, v19, v12 + 1);
    }
    else
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(v19, 1, v4))
      {
        memcpy(v18, v19, v11);
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 16))(v18, v19, v4);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v4);
      }
      v18[v12] = 0;
    }
  }
  return v3;
}

uint64_t destroy for FullGestureCallbacks.StateType(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = (unsigned __int8 *)((result + *(unsigned __int8 *)(v3 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  unint64_t v5 = *(void *)(v3 + 64);
  if (*(_DWORD *)(v3 + 84)) {
    unint64_t v6 = *(void *)(v3 + 64);
  }
  else {
    unint64_t v6 = v5 + 1;
  }
  if (v5 > v6) {
    unint64_t v6 = *(void *)(v3 + 64);
  }
  unsigned int v7 = v4[v6];
  unsigned int v8 = v7 - 3;
  if (v7 <= 3)
  {
    if (v7 == 3)
    {
      if (v6 <= 3) {
        uint64_t v9 = v6;
      }
      else {
        uint64_t v9 = 4;
      }
      switch(v9)
      {
        case 1:
          int v10 = *v4;
          goto LABEL_16;
        case 2:
          int v10 = *(unsigned __int16 *)v4;
          goto LABEL_16;
        case 3:
          int v10 = *(unsigned __int16 *)v4 | (v4[2] << 16);
          goto LABEL_16;
        case 4:
          int v10 = *(_DWORD *)v4;
LABEL_16:
          int v11 = (v10 | (v8 << (8 * v6))) + 3;
          unsigned int v7 = v10 + 3;
          if (v6 < 4) {
            unsigned int v7 = v11;
          }
          break;
        default:
          return result;
      }
    }
    if (v7 - 1 < 2
      || !v7
      && (uint64_t v13 = *(void *)(*(void *)(a2 + 16) - 8),
          uint64_t result = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2),
          uint64_t v3 = v13,
          !result))
    {
      size_t v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v3 + 8);
      return v12(v4, v2);
    }
  }
  return result;
}

unsigned char *initializeWithCopy for FullGestureCallbacks.StateType(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  unsigned int v7 = (unsigned char *)((unint64_t)&a1[v6 + 1] & ~v6);
  unsigned int v8 = (unsigned __int8 *)((unint64_t)&a2[v6 + 1] & ~v6);
  size_t v9 = *(void *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84)) {
    size_t v10 = *(void *)(v5 + 64);
  }
  else {
    size_t v10 = v9 + 1;
  }
  if (v9 <= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = *(void *)(v5 + 64);
  }
  unsigned int v12 = v8[v11];
  unsigned int v13 = v12 - 3;
  if (v12 > 3) {
    goto LABEL_25;
  }
  if (v12 == 3)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *v8;
        break;
      case 2:
        int v15 = *(unsigned __int16 *)v8;
        break;
      case 3:
        int v15 = *(unsigned __int16 *)((unint64_t)&a2[v6 + 1] & ~v6) | (*(unsigned __int8 *)(((unint64_t)&a2[v6 + 1] & ~v6)
                                                                                               + 2) << 16);
        break;
      case 4:
        int v15 = *(_DWORD *)v8;
        break;
      default:
        goto LABEL_25;
    }
    int v16 = (v15 | (v13 << (8 * v11))) + 3;
    unsigned int v12 = v15 + 3;
    if (v11 < 4) {
      unsigned int v12 = v16;
    }
  }
  if (v12 == 2)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(v7, v8, v4);
    v7[v11] = 2;
    return a1;
  }
  if (v12 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(v7, v8, v4);
    v7[v11] = 1;
    return a1;
  }
  if (v12)
  {
LABEL_25:
    memcpy(v7, v8, v11 + 1);
  }
  else
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
    {
      memcpy(v7, v8, v10);
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(v7, v8, v4);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    }
    v7[v11] = 0;
  }
  return a1;
}

unsigned char *assignWithCopy for FullGestureCallbacks.StateType(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  unsigned int v8 = (unsigned __int8 *)((unint64_t)&a1[v7 + 1] & ~v7);
  size_t v9 = (unsigned __int8 *)((unint64_t)&a2[v7 + 1] & ~v7);
  size_t v10 = *(void *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84)) {
    size_t v11 = *(void *)(v5 + 64);
  }
  else {
    size_t v11 = v10 + 1;
  }
  if (v10 <= v11) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = *(void *)(v5 + 64);
  }
  unsigned int v13 = v8[v12];
  unsigned int v14 = v9[v12];
  if (v13 <= 3)
  {
    if (v14 > 3)
    {
      unsigned int v20 = v13 - 3;
      if (v13 >= 3)
      {
        if (v12 <= 3) {
          uint64_t v21 = v12;
        }
        else {
          uint64_t v21 = 4;
        }
        switch(v21)
        {
          case 1:
            int v22 = *v8;
            goto LABEL_44;
          case 2:
            int v22 = *(unsigned __int16 *)v8;
            goto LABEL_44;
          case 3:
            int v22 = *(unsigned __int16 *)v8 | (v8[2] << 16);
            goto LABEL_44;
          case 4:
            int v22 = *(_DWORD *)v8;
LABEL_44:
            int v24 = (v22 | (v20 << (8 * v12))) + 3;
            unsigned int v13 = v22 + 3;
            if (v12 < 4) {
              unsigned int v13 = v24;
            }
            break;
          default:
            break;
        }
      }
      if (v13 - 1 < 2
        || !v13 && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(v8, 1, v4))
      {
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v8, v4);
      }
      goto LABEL_50;
    }
    if (v8 == v9) {
      return a1;
    }
    unsigned int v15 = v13 - 3;
    if (v13 >= 3)
    {
      if (v12 <= 3) {
        uint64_t v16 = v12;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *v8;
          goto LABEL_54;
        case 2:
          int v17 = *(unsigned __int16 *)v8;
          goto LABEL_54;
        case 3:
          int v17 = *(unsigned __int16 *)v8 | (v8[2] << 16);
          goto LABEL_54;
        case 4:
          int v17 = *(_DWORD *)v8;
LABEL_54:
          int v25 = (v17 | (v15 << (8 * v12))) + 3;
          unsigned int v13 = v17 + 3;
          if (v12 < 4) {
            unsigned int v13 = v25;
          }
          break;
        default:
          break;
      }
    }
    if (v13 - 1 < 2
      || !v13 && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(v8, 1, v4))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v8, v4);
    }
    unsigned int v14 = v9[v12];
    unsigned int v26 = v14 - 3;
    if (v14 >= 3)
    {
      if (v12 <= 3) {
        uint64_t v27 = v12;
      }
      else {
        uint64_t v27 = 4;
      }
      switch(v27)
      {
        case 1:
          int v28 = *v9;
          goto LABEL_69;
        case 2:
          int v28 = *(unsigned __int16 *)v9;
          goto LABEL_69;
        case 3:
          int v28 = *(unsigned __int16 *)v9 | (v9[2] << 16);
          goto LABEL_69;
        case 4:
          int v28 = *(_DWORD *)v9;
LABEL_69:
          int v29 = (v28 | (v26 << (8 * v12))) + 3;
          unsigned int v14 = v28 + 3;
          if (v12 < 4) {
            unsigned int v14 = v29;
          }
          break;
        default:
          break;
      }
    }
    if (v14 != 2)
    {
      if (v14 == 1) {
        goto LABEL_73;
      }
      goto LABEL_36;
    }
LABEL_74:
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(v8, v9, v4);
    char v30 = 2;
    goto LABEL_75;
  }
  if (v14 > 3)
  {
LABEL_50:
    memcpy(v8, v9, v12 + 1);
    return a1;
  }
  if (v14 == 3)
  {
    if (v12 <= 3) {
      uint64_t v18 = v12;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *v9;
        break;
      case 2:
        int v19 = *(unsigned __int16 *)v9;
        break;
      case 3:
        int v19 = *(unsigned __int16 *)v9 | (v9[2] << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)v9;
        break;
      default:
        goto LABEL_50;
    }
    unsigned int v14 = v19 + 3;
    unsigned int v23 = v19 + 3;
    if (v12 >= 4) {
      unsigned int v14 = v23;
    }
  }
  if (v14 == 2) {
    goto LABEL_74;
  }
  if (v14 == 1)
  {
LABEL_73:
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(v8, v9, v4);
    char v30 = 1;
LABEL_75:
    v8[v12] = v30;
    return a1;
  }
LABEL_36:
  if (v14) {
    goto LABEL_50;
  }
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(v9, 1, v4))
  {
    memcpy(v8, v9, v11);
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(v8, v9, v4);
    (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v4);
  }
  v8[v12] = 0;
  return a1;
}

unsigned char *initializeWithTake for FullGestureCallbacks.StateType(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (unsigned char *)((unint64_t)&a1[v6 + 1] & ~v6);
  unsigned int v8 = (unsigned __int8 *)((unint64_t)&a2[v6 + 1] & ~v6);
  size_t v9 = *(void *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84)) {
    size_t v10 = *(void *)(v5 + 64);
  }
  else {
    size_t v10 = v9 + 1;
  }
  if (v9 <= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = *(void *)(v5 + 64);
  }
  unsigned int v12 = v8[v11];
  unsigned int v13 = v12 - 3;
  if (v12 > 3) {
    goto LABEL_25;
  }
  if (v12 == 3)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *v8;
        break;
      case 2:
        int v15 = *(unsigned __int16 *)v8;
        break;
      case 3:
        int v15 = *(unsigned __int16 *)((unint64_t)&a2[v6 + 1] & ~v6) | (*(unsigned __int8 *)(((unint64_t)&a2[v6 + 1] & ~v6)
                                                                                               + 2) << 16);
        break;
      case 4:
        int v15 = *(_DWORD *)v8;
        break;
      default:
        goto LABEL_25;
    }
    int v16 = (v15 | (v13 << (8 * v11))) + 3;
    unsigned int v12 = v15 + 3;
    if (v11 < 4) {
      unsigned int v12 = v16;
    }
  }
  if (v12 == 2)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(v7, v8, v4);
    v7[v11] = 2;
    return a1;
  }
  if (v12 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(v7, v8, v4);
    v7[v11] = 1;
    return a1;
  }
  if (v12)
  {
LABEL_25:
    memcpy(v7, v8, v11 + 1);
  }
  else
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
    {
      memcpy(v7, v8, v10);
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(v7, v8, v4);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    }
    v7[v11] = 0;
  }
  return a1;
}

unsigned char *assignWithTake for FullGestureCallbacks.StateType(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (unsigned __int8 *)((unint64_t)&a1[v6 + 1] & ~v6);
  unsigned int v8 = (unsigned __int8 *)((unint64_t)&a2[v6 + 1] & ~v6);
  size_t v9 = *(void *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84)) {
    size_t v10 = *(void *)(v5 + 64);
  }
  else {
    size_t v10 = v9 + 1;
  }
  if (v9 <= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = *(void *)(v5 + 64);
  }
  unsigned int v12 = v7[v11];
  unsigned int v13 = v8[v11];
  if (v12 <= 3)
  {
    if (v13 > 3)
    {
      unsigned int v19 = v12 - 3;
      if (v12 >= 3)
      {
        if (v11 <= 3) {
          uint64_t v20 = v11;
        }
        else {
          uint64_t v20 = 4;
        }
        switch(v20)
        {
          case 1:
            int v21 = *v7;
            goto LABEL_44;
          case 2:
            int v21 = *(unsigned __int16 *)v7;
            goto LABEL_44;
          case 3:
            int v21 = *(unsigned __int16 *)((unint64_t)&a1[v6 + 1] & ~v6) | (*(unsigned __int8 *)(((unint64_t)&a1[v6 + 1] & ~v6) + 2) << 16);
            goto LABEL_44;
          case 4:
            int v21 = *(_DWORD *)v7;
LABEL_44:
            int v23 = (v21 | (v19 << (8 * v11))) + 3;
            unsigned int v12 = v21 + 3;
            if (v11 < 4) {
              unsigned int v12 = v23;
            }
            break;
          default:
            break;
        }
      }
      if (v12 - 1 < 2
        || !v12 && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4))
      {
        (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(v7, v4);
      }
      goto LABEL_50;
    }
    if (v7 == v8) {
      return a1;
    }
    unsigned int v14 = v12 - 3;
    if (v12 >= 3)
    {
      if (v11 <= 3) {
        uint64_t v15 = v11;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *v7;
          goto LABEL_54;
        case 2:
          int v16 = *(unsigned __int16 *)v7;
          goto LABEL_54;
        case 3:
          int v16 = *(unsigned __int16 *)((unint64_t)&a1[v6 + 1] & ~v6) | (*(unsigned __int8 *)(((unint64_t)&a1[v6 + 1] & ~v6)
                                                                                                 + 2) << 16);
          goto LABEL_54;
        case 4:
          int v16 = *(_DWORD *)v7;
LABEL_54:
          int v24 = (v16 | (v14 << (8 * v11))) + 3;
          unsigned int v12 = v16 + 3;
          if (v11 < 4) {
            unsigned int v12 = v24;
          }
          break;
        default:
          break;
      }
    }
    if (v12 - 1 < 2
      || !v12 && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(v7, v4);
    }
    unsigned int v13 = v8[v11];
    unsigned int v25 = v13 - 3;
    if (v13 >= 3)
    {
      if (v11 <= 3) {
        uint64_t v26 = v11;
      }
      else {
        uint64_t v26 = 4;
      }
      switch(v26)
      {
        case 1:
          int v27 = *v8;
          goto LABEL_69;
        case 2:
          int v27 = *(unsigned __int16 *)v8;
          goto LABEL_69;
        case 3:
          int v27 = *(unsigned __int16 *)v8 | (v8[2] << 16);
          goto LABEL_69;
        case 4:
          int v27 = *(_DWORD *)v8;
LABEL_69:
          int v28 = (v27 | (v25 << (8 * v11))) + 3;
          unsigned int v13 = v27 + 3;
          if (v11 < 4) {
            unsigned int v13 = v28;
          }
          break;
        default:
          break;
      }
    }
    if (v13 != 2)
    {
      if (v13 == 1) {
        goto LABEL_73;
      }
      goto LABEL_36;
    }
LABEL_74:
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(v7, v8, v4);
    char v29 = 2;
    goto LABEL_75;
  }
  if (v13 > 3)
  {
LABEL_50:
    memcpy(v7, v8, v11 + 1);
    return a1;
  }
  if (v13 == 3)
  {
    if (v11 <= 3) {
      uint64_t v17 = v11;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *v8;
        break;
      case 2:
        int v18 = *(unsigned __int16 *)v8;
        break;
      case 3:
        int v18 = *(unsigned __int16 *)((unint64_t)&a2[v6 + 1] & ~v6) | (*(unsigned __int8 *)(((unint64_t)&a2[v6 + 1] & ~v6)
                                                                                               + 2) << 16);
        break;
      case 4:
        int v18 = *(_DWORD *)v8;
        break;
      default:
        goto LABEL_50;
    }
    unsigned int v13 = v18 + 3;
    unsigned int v22 = v18 + 3;
    if (v11 >= 4) {
      unsigned int v13 = v22;
    }
  }
  if (v13 == 2) {
    goto LABEL_74;
  }
  if (v13 == 1)
  {
LABEL_73:
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(v7, v8, v4);
    char v29 = 1;
LABEL_75:
    v7[v11] = v29;
    return a1;
  }
LABEL_36:
  if (v13) {
    goto LABEL_50;
  }
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    memcpy(v7, v8, v10);
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  v7[v11] = 0;
  return a1;
}

uint64_t getEnumTagSinglePayload for FullGestureCallbacks.StateType(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  if (*(_DWORD *)(v3 + 84)) {
    unint64_t v5 = *(void *)(v3 + 64);
  }
  else {
    unint64_t v5 = v4 + 1;
  }
  if (v4 > v5) {
    unint64_t v5 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_25;
  }
  unint64_t v6 = v5 + ((*(unsigned __int8 *)(v3 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + 1;
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((a2 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v10))
    {
      int v8 = *(_DWORD *)&a1[v6];
      if (!v8) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v10 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)&a1[v6];
      if (!*(_WORD *)&a1[v6]) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v10 < 2)
    {
LABEL_25:
      unsigned int v12 = *a1;
      BOOL v13 = v12 >= 2;
      int v14 = (v12 + 2147483646) & 0x7FFFFFFF;
      if (v13) {
        return (v14 + 1);
      }
      else {
        return 0;
      }
    }
  }
  int v8 = a1[v6];
  if (!a1[v6]) {
    goto LABEL_25;
  }
LABEL_17:
  int v11 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v6) = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *a1;
        break;
    }
  }
  return (v6 | v11) + 255;
}

void storeEnumTagSinglePayload for FullGestureCallbacks.StateType(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84)) {
    unint64_t v7 = *(void *)(v5 + 64);
  }
  else {
    unint64_t v7 = v6 + 1;
  }
  if (v6 > v7) {
    unint64_t v7 = *(void *)(v5 + 64);
  }
  size_t v8 = v7 + ((*(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + 1;
  if (a3 < 0xFF)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v10 = a2 - 255;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_37:
        __break(1u);
        JUMPOUT(0x245CBA7A8);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_25;
      case 3:
        goto LABEL_37;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      default:
LABEL_25:
        if (a2) {
LABEL_26:
        }
          *a1 = a2 + 1;
        break;
    }
  }
}

uint64_t assignWithTake for _EndedGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _EndedGesture(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245CBA9ACLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for _EndedGesture(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x245CBABA0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          int v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *int v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata completion function for CallbacksPhase()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CallbacksPhase(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((((v7 + ((v6 + 13) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4) > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    unsigned int v11 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v12 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *unsigned int v11 = *v12;
    unint64_t v13 = ((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v14 = ((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)unint64_t v13 = *(_DWORD *)v14;
    *(unsigned char *)(v13 + 4) = *(unsigned char *)(v14 + 4);
    uint64_t v15 = (v13 + v6 + 5) & ~v6;
    uint64_t v16 = (v14 + v6 + 5) & ~v6;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v15, v16, AssociatedTypeWitness);
    unint64_t v17 = (v7 + v15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = (v7 + v16) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v18 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
    }
    else
    {
      uint64_t v19 = *(void *)(v18 + 8);
      *(void *)unint64_t v17 = *(void *)v18;
      *(void *)(v17 + 8) = v19;
      swift_retain();
    }
    *(_DWORD *)((v17 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)((v18 + 19) & 0xFFFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for CallbacksPhase(uint64_t a1)
{
  unint64_t v1 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = v3 + 8;
  unint64_t v5 = (v1 + *(unsigned __int8 *)(v3 + 80) + 5) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  if (*(void *)((*(void *)(v4 + 56) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

_DWORD *initializeWithCopy for CallbacksPhase(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  unint64_t v5 = ((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v6 = ((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v5 = *(_DWORD *)v6;
  *(unsigned char *)(v5 + 4) = *(unsigned char *)(v6 + 4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 5 + v5) & ~v10;
  uint64_t v12 = (v10 + 5 + v6) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = *(void *)(v9 + 48) + 7;
  unint64_t v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v15 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v16 = *(void *)(v15 + 8);
    *(void *)unint64_t v14 = *(void *)v15;
    *(void *)(v14 + 8) = v16;
    swift_retain();
  }
  *(_DWORD *)((v14 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)((v15 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithCopy for CallbacksPhase(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  unint64_t v5 = ((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v6 = ((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v5 = *(_DWORD *)v6;
  *(unsigned char *)(v5 + 4) = *(unsigned char *)(v6 + 4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 5 + v5) & ~v10;
  uint64_t v12 = (v10 + 5 + v6) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = *(void *)(v9 + 40) + 7;
  unint64_t v14 = (void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (unint64_t *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = *v15;
  if (*v14 < 0xFFFFFFFFuLL)
  {
    if (v16 >= 0xFFFFFFFF)
    {
      unint64_t v18 = v15[1];
      *unint64_t v14 = v16;
      v14[1] = v18;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
    goto LABEL_8;
  }
  if (v16 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v17 = v15[1];
  *unint64_t v14 = v16;
  v14[1] = v17;
  swift_retain();
  swift_release();
LABEL_8:
  *(_DWORD *)(((unint64_t)v14 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v15 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *initializeWithTake for CallbacksPhase(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  unint64_t v5 = ((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v6 = ((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v5 = *(_DWORD *)v6;
  *(unsigned char *)(v5 + 4) = *(unsigned char *)(v6 + 4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 5 + v5) & ~v10;
  uint64_t v12 = (v10 + 5 + v6) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = *(void *)(v9 + 32) + 7;
  unint64_t v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v15 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v16 = *(void *)(v15 + 8);
    *(void *)unint64_t v14 = *(void *)v15;
    *(void *)(v14 + 8) = v16;
  }
  *(_DWORD *)((v14 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)((v15 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for CallbacksPhase(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  unint64_t v5 = ((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v6 = ((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v5 = *(_DWORD *)v6;
  *(unsigned char *)(v5 + 4) = *(unsigned char *)(v6 + 4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 5 + v5) & ~v10;
  uint64_t v12 = (v10 + 5 + v6) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = *(void *)(v9 + 24) + 7;
  unint64_t v14 = (void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (unint64_t *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = *v15;
  if (*v14 < 0xFFFFFFFFuLL)
  {
    if (v16 >= 0xFFFFFFFF)
    {
      unint64_t v18 = v15[1];
      *unint64_t v14 = v16;
      v14[1] = v18;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
    goto LABEL_8;
  }
  if (v16 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v17 = v15[1];
  *unint64_t v14 = v16;
  v14[1] = v17;
  swift_release();
LABEL_8:
  *(_DWORD *)(((unint64_t)v14 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v15 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CallbacksPhase(_DWORD *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  if (v6 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  uint64_t v10 = v9 + 7;
  if (v7 < a2
    && *((unsigned char *)a1 + ((((v10 + ((v8 + 13) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4)))
  {
    return v7 + *a1 + 1;
  }
  unint64_t v12 = ((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v8 + 5) & ~v8;
  if (v6 < 0x7FFFFFFE)
  {
    unint64_t v14 = *(void *)((v10 + v12) & 0xFFFFFFFFFFFFFFF8);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    if ((v14 + 1) >= 2) {
      return v14;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v13 = *(uint64_t (**)(unint64_t))(v5 + 48);
    return v13(v12);
  }
}

void storeEnumTagSinglePayload for CallbacksPhase(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v11 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + 7;
  size_t v12 = (((v11 + ((v9 + 13) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4;
  if (v10 >= a2)
  {
    if (v10 < a3) {
      *((unsigned char *)a1 + v12) = 0;
    }
    if (a2)
    {
      unint64_t v13 = ((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 5) & ~v9;
      if (v8 < 0x7FFFFFFE)
      {
        unint64_t v15 = (void *)((v11 + v13) & 0xFFFFFFFFFFFFFFF8);
        if (a2 > 0x7FFFFFFE)
        {
          *unint64_t v15 = 0;
          v15[1] = 0;
          *(_DWORD *)unint64_t v15 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *unint64_t v15 = a2;
        }
      }
      else
      {
        unint64_t v14 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
        v14(v13, a2);
      }
    }
  }
  else
  {
    bzero(a1, v12);
    *a1 = ~v10 + a2;
    if (v10 < a3) {
      *((unsigned char *)a1 + v12) = 1;
    }
  }
}

uint64_t instantiation function for generic protocol witness table for CallbacksPhase<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in CallbacksPhase<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_245CBB78C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245CBB7C4()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in CallbacksPhase.updateValue()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 40))();
}

uint64_t sub_245CBB8B8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in FullGestureCallbacks.dispatch(phase:state:)(uint64_t (*a1)(void, void, char *))
{
  return a1(*((void *)v1 + 4), *((void *)v1 + 5), &v1[(*(unsigned __int8 *)(*(void *)(*((void *)v1 + 2) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*((void *)v1 + 2) - 8) + 80)]);
}

uint64_t partial apply for closure #1 in closure #2 in ChangedCallbacks.dispatch(phase:state:)()
{
  return partial apply for closure #1 in closure #2 in ChangedCallbacks.dispatch(phase:state:)();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))(*(void *)(v0 + 48));
}

uint64_t sub_245CBB9EC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ())(uint64_t a1)
{
  return specialized closure #1 in LayoutComputer.withMutableEngine<A, B>(type:do:)(a1, *(uint64_t (**)(void))(v1 + 32));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t getEnumTagSinglePayload for ChangedCallbacks.StateType(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ChangedCallbacks.StateType(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x245CBBE6CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          unint64_t v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ChangedCallbacks.StateType()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_245CBBF1C()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

uint64_t sub_245CBBF88()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void *type metadata accessor for CoreMaterialCache()
{
  return &unk_26FA56C80;
}

uint64_t ResolvedStyledText.updatesAsynchronously.getter()
{
  uint64_t v1 = *(void **)(v0 + 216);
  if (v1 && (uint64_t)objc_msgSend(*(id *)(v0 + 216), sel_length) >= 1)
  {
    if (one-time initialization token for updateSchedule != -1) {
      swift_once();
    }
    uint64_t v2 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v1, sel_length);
    if (objc_msgSend(v1, sel_attribute_atIndex_effectiveRange_, v2, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_5((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_3);
      return *(unsigned char *)(v0 + 256) & 1;
    }
    memset(v4, 0, sizeof(v4));
    _sypSgWOhTm_5((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_3);
  }
  return 0;
}

uint64_t ResolvedStyledText.draw(in:with:applyingMarginOffsets:context:renderer:)(char a1, uint64_t a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  unint64_t v13 = a9.n128_u64[0];
  unint64_t v14 = a8.n128_u64[0];
  unint64_t v15 = a7.n128_u64[0];
  unint64_t v16 = a6.n128_u64[0];
  unint64_t v17 = a5.n128_u64[0];
  unint64_t v18 = a4.n128_u64[0];
  if (v9[27]) {
    BOOL v19 = NSAttributedString.isDynamic.getter();
  }
  else {
    BOOL v19 = 0;
  }
  uint64_t v20 = *(uint64_t (**)(void, BOOL, uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128, __n128))(*v9 + 288);
  a4.n128_u64[0] = v18;
  a5.n128_u64[0] = v17;
  a6.n128_u64[0] = v16;
  a7.n128_u64[0] = v15;
  a8.n128_u64[0] = v14;
  a9.n128_u64[0] = v13;

  return v20(a1 & 1, v19, a2, a3, a4, a5, a6, a7, a8, a9);
}

double TextLayoutProperties.init(_:)@<D0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v3, (uint64_t)v10);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    v9[0] = *a1;
    v9[1] = 0;
    swift_retain();
    TextLayoutProperties.init(from:)(v9, (uint64_t)v10);
    swift_release();
  }
  long long v4 = v10[7];
  *(_OWORD *)(a2 + 96) = v10[6];
  *(_OWORD *)(a2 + 112) = v4;
  *(_OWORD *)(a2 + 128) = v10[8];
  *(unsigned char *)(a2 + 144) = v11;
  long long v5 = v10[3];
  *(_OWORD *)(a2 + 32) = v10[2];
  *(_OWORD *)(a2 + 48) = v5;
  long long v6 = v10[5];
  *(_OWORD *)(a2 + 64) = v10[4];
  *(_OWORD *)(a2 + 80) = v6;
  double result = *(double *)v10;
  long long v8 = v10[1];
  *(_OWORD *)a2 = v10[0];
  *(_OWORD *)(a2 + 16) = v8;
  return result;
}

uint64_t _ViewInputs.widgetAuxiliaryMetadataAsAttachment.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2) {
    uint64_t v3 = *(unsigned __int8 *)(v2 + 72);
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return v3;
}

uint64_t Text.MakeRepresentableContext.value.getter@<X0>(void *a1@<X8>)
{
  int v33 = a1;
  type metadata accessor for Date?(0);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ResolvableStringResolutionContext();
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v32 + 64);
  MEMORY[0x270FA5388](v4);
  long long v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unsigned int v9 = (char *)&v31 - v8;
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(WeakValue, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for Date?);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v3, 1, 1, v11);
  }
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v13 = *Value;
  uint64_t v14 = Value[1];
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v6, 1, 1, v15);
  unint64_t v16 = &v6[*(int *)(v4 + 24)];
  *(void *)unint64_t v16 = 0;
  v16[8] = 1;
  swift_retain();
  swift_retain();
  outlined assign with take of ResolvedTextHelper.NextUpdate((uint64_t)v3, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Date?);
  unint64_t v17 = &v6[*(int *)(v4 + 20)];
  *(void *)unint64_t v17 = v13;
  *((void *)v17 + 1) = v14;
  *(void *)unint64_t v16 = 0;
  v16[8] = 1;
  _s7SwiftUI33ResolvableStringResolutionContextVWObTm_0((uint64_t)v6, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
  type metadata accessor for ResolvedStyledText();
  uint64_t v18 = AGGraphGetValue();
  uint64_t v19 = *(void *)v18;
  id v20 = *(id *)(*(void *)v18 + 216);
  if (!v20) {
    goto LABEL_15;
  }
  swift_retain();
  id v21 = v20;
  if (NSAttributedString.isDynamic.getter() && (*(unsigned char *)(v19 + 256) & 1) != 0)
  {
    objc_msgSend(v21, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
    if (swift_dynamicCast())
    {
      int v23 = (void *)aBlock[6];
      if (one-time initialization token for resolvableTextSegment != -1) {
        swift_once();
      }
      id v24 = objc_msgSend(v23, sel_length, static NSAttributedStringKey.resolvableTextSegment);
      _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
      unint64_t v25 = (*(unsigned __int8 *)(v32 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = v23;
      _s7SwiftUI33ResolvableStringResolutionContextVWObTm_0((uint64_t)v6, v26 + v25, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = _s7SwiftUI30ResolvableTextSegmentAttributeO6update_2inySo25NSMutableAttributedStringC_AA0cK17ResolutionContextVtFZyypSg_So8_NSRangeVSpy10ObjectiveC8ObjCBoolVGtXEfU_TA_0;
      *(void *)(v27 + 24) = v26;
      aBlock[4] = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
      aBlock[5] = v27;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
      aBlock[3] = &block_descriptor_83;
      int v28 = _Block_copy(aBlock);
      id v20 = v23;
      swift_retain();
      swift_release();
      objc_msgSend(v20, sel_enumerateAttribute_inRange_options_usingBlock_, v31, 0, v24, 2, v28);
      _Block_release(v28);
      LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
      swift_release();

      swift_release();
      swift_release();
      if ((v28 & 1) == 0) {
        goto LABEL_8;
      }
      __break(1u);
    }
    swift_release();

LABEL_15:
    uint64_t v29 = *(void *)AGGraphGetValue();
    swift_retain();
    _s10Foundation4DateVSgWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
    id v20 = *(id *)(v29 + 216);
    id v30 = v20;
    uint64_t result = swift_release();
    goto LABEL_16;
  }
  swift_release();
LABEL_8:
  uint64_t result = _s10Foundation4DateVSgWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
LABEL_16:
  *int v33 = v20;
  return result;
}

id ResolvedStyledText.resolvedContent(in:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ResolvableStringResolutionContext();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = *(void **)(v1 + 216);
  if (!v7) {
    return 0;
  }
  id v8 = v7;
  if (NSAttributedString.isDynamic.getter() && (*(unsigned char *)(v2 + 256) & 1) != 0)
  {
    objc_msgSend(v8, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
    if (!swift_dynamicCast())
    {
LABEL_9:

      return 0;
    }
    id v9 = v20;
    if (one-time initialization token for resolvableTextSegment != -1) {
      swift_once();
    }
    uint64_t v10 = static NSAttributedStringKey.resolvableTextSegment;
    id v11 = objc_msgSend(v20, sel_length);
    _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(a1, (uint64_t)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
    unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v9;
    _s7SwiftUI33ResolvableStringResolutionContextVWObTm_0((uint64_t)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = _s7SwiftUI30ResolvableTextSegmentAttributeO6update_2inySo25NSMutableAttributedStringC_AA0cK17ResolutionContextVtFZyypSg_So8_NSRangeVSpy10ObjectiveC8ObjCBoolVGtXEfU_TA_0;
    *(void *)(v14 + 24) = v13;
    aBlock[4] = _sypSgSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgnyy_AacGIegnyy_TRTA_0;
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    aBlock[3] = &block_descriptor_10;
    uint64_t v15 = _Block_copy(aBlock);
    id v16 = v9;
    swift_retain();
    swift_release();
    objc_msgSend(v16, sel_enumerateAttribute_inRange_options_usingBlock_, v10, 0, v11, 2, v15);
    _Block_release(v15);
    LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();

    swift_release();
    swift_release();
    id v8 = v16;
    if (v15)
    {
      __break(1u);
      goto LABEL_9;
    }
  }
  return v8;
}

void protocol witness for static Rule.initialValue.getter in conformance Text.MakeRepresentableContext(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for Rule.value.getter in conformance Text.MakeRepresentableContext@<X0>(void *a1@<X8>)
{
  return Text.MakeRepresentableContext.value.getter(a1);
}

uint64_t static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(void *a1, unint64_t *a2, char *a3, char a4, __int16 *a5, long long *a6, uint64_t *a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13, unsigned __int8 *a14, char a15)
{
  return specialized static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t TextChildQuery.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

uint64_t AccessibilityStyledTextContentView.init(text:unresolvedText:renderer:needsDrawingGroup:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  *(void *)a8 = result;
  *(void *)(a8 + 8) = a2;
  *(void *)(a8 + 16) = a3;
  *(unsigned char *)(a8 + 24) = a4 & 1;
  *(void *)(a8 + 32) = a5;
  *(void *)(a8 + 40) = a6;
  *(unsigned char *)(a8 + 48) = a7;
  return result;
}

uint64_t static TextChildQuery.scrapeContent(from:)@<X0>(uint64_t a1@<X8>)
{
  AGGraphGetAttributeInfo();
  uint64_t v3 = v2;
  uint64_t v4 = swift_allocObject();
  int v5 = *((_DWORD *)v3 + 8);
  long long v6 = v3[1];
  long long v21 = *v3;
  long long v22 = v6;
  LODWORD(v23) = v5;
  type metadata accessor for TextChildQuery();
  *(void *)(v4 + 16) = TextChildQuery.unresolvedText.getter();
  *(void *)(v4 + 24) = v7;
  *(unsigned char *)(v4 + 32) = v8 & 1;
  *(void *)(v4 + 40) = v9;
  type metadata accessor for ResolvedStyledText();
  int v10 = *(_DWORD *)v3;
  *(void *)(v4 + 48) = *(void *)AGGraphGetValue();
  int v11 = *((_DWORD *)v3 + 8);
  LODWORD(v12) = v10;
  DWORD1(v12) = *((_DWORD *)v3 + 1);
  *((void *)&v12 + 1) = *((void *)v3 + 1);
  long long v13 = v3[1];
  long long v21 = v12;
  long long v22 = v13;
  LODWORD(v23) = v11;
  TextChildQuery.environment.getter((void *)(v4 + 56));
  uint64_t v20 = v4;
  int v18 = *((_DWORD *)v3 + 8);
  int v19 = 0;
  ScrapeableContent.Item.init(_:ids:_:position:size:transform:)(&v20, &v19, &v18, (uint64_t)&v21);
  uint64_t v14 = v25;
  long long v15 = v22;
  *(_OWORD *)a1 = v21;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = v24;
  *(_OWORD *)(a1 + 32) = v23;
  *(_OWORD *)(a1 + 48) = v16;
  *(void *)(a1 + 64) = v14;

  return swift_retain();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance TextChildQuery<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for static ScrapeableAttribute.scrapeContent(from:) in conformance TextChildQuery<A>@<X0>(uint64_t a1@<X8>)
{
  return static TextChildQuery.scrapeContent(from:)(a1);
}

uint64_t protocol witness for LayoutEngine.debugContentDescription.getter in conformance StyledTextLayoutEngine()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 216);
  if (!v1) {
    return 0;
  }
  id v2 = objc_msgSend(v1, sel_string);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t AccessibilityStyledTextContentView.text.getter()
{
  return swift_retain();
}

uint64_t AccessibilityStyledTextContentView.text.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*AccessibilityStyledTextContentView.text.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityStyledTextContentView.unresolvedText.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  outlined copy of Text.Storage(v1, *(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityStyledTextContentView.unresolvedText.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  outlined consume of Text.Storage(*(void *)(v4 + 8), *(void *)(v4 + 16), *(unsigned char *)(v4 + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v4 + 8) = a1;
  *(void *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 24) = a3 & 1;
  *(void *)(v4 + 32) = a4;
  return result;
}

uint64_t (*AccessibilityStyledTextContentView.unresolvedText.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityStyledTextContentView.renderer.getter()
{
  return swift_retain();
}

uint64_t AccessibilityStyledTextContentView.renderer.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*AccessibilityStyledTextContentView.renderer.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityStyledTextContentView.needsDrawingGroup.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t AccessibilityStyledTextContentView.needsDrawingGroup.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result;
  return result;
}

uint64_t (*AccessibilityStyledTextContentView.needsDrawingGroup.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t StyledTextContentView.init(text:renderer:needsDrawingGroup:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = a3;
  return result;
}

uint64_t StyledTextContentView.text.getter()
{
  return swift_retain();
}

uint64_t StyledTextContentView.text.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*StyledTextContentView.text.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t StyledTextContentView.renderer.getter()
{
  return swift_retain();
}

uint64_t StyledTextContentView.renderer.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*StyledTextContentView.renderer.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t StyledTextContentView.needsDrawingGroup.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t StyledTextContentView.needsDrawingGroup.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*StyledTextContentView.needsDrawingGroup.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static StyledTextContentView.animatesSize.getter()
{
  return 0;
}

double StyledTextContentView.shape(in:)(uint64_t a1, CGFloat a2, CGFloat a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = v3[1];
  uint64_t v9 = *((unsigned __int8 *)v3 + 16);
  if (v8)
  {
    int v10 = *(double (**)(uint64_t))(*(void *)v8 + 112);
    uint64_t v11 = swift_retain();
    double v12 = v10(v11);
    double v16 = CGRect.outset(by:)(v12, v13, v14, v15, 0.0, 0.0, a2, a3);
    swift_release();
  }
  else
  {
    double v16 = 0.0;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0x200000;
  swift_retain();
  swift_retain();
  return v16;
}

uint64_t StyledTextContentView.ArchivedTransitionEnvironment.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  uint64_t v4 = Value[1];
  uint64_t v34 = *Value;
  uint64_t v35 = v4;
  uint64_t v5 = *(void *)AGGraphGetValue();
  if (v4)
  {
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v26);
    swift_release_n();
    uint64_t v6 = swift_release_n();
    unint64_t v7 = v26;
    unint64_t v8 = v27 | ((unint64_t)v28 << 32);
    uint64_t v9 = v29;
    if (v29)
    {
LABEL_13:
      swift_release();
      goto LABEL_14;
    }
  }
  else
  {
    swift_retain_n();
    swift_retain();
    uint64_t v10 = specialized find<A>(_:key:)(v3);
    uint64_t v25 = a1;
    if (v10)
    {
      unint64_t v7 = *(void *)(v10 + 72);
      unint64_t v8 = *(unsigned int *)(v10 + 80) | ((unint64_t)*(unsigned __int8 *)(v10 + 84) << 32);
      uint64_t v9 = *(unsigned __int8 *)(v10 + 85);
      unsigned __int8 v11 = *(unsigned char *)(v10 + 86);
      unsigned __int8 v12 = *(unsigned char *)(v10 + 87);
      uint64_t v13 = *(void *)(v10 + 88);
      int v14 = *(_DWORD *)(v10 + 96);
      outlined copy of ContentTransition.Storage(v7, v8, v9);
      swift_retain();
    }
    else
    {
      uint64_t v9 = 0;
      unsigned __int8 v11 = 0;
      unsigned __int8 v12 = 0;
      uint64_t v13 = 0;
      int v14 = 0;
      unint64_t v8 = 0x302000000;
      unint64_t v7 = 0x8000000000;
    }
    unsigned __int8 v30 = v11;
    unsigned __int8 v31 = v12;
    uint64_t v32 = v13;
    int v33 = v14;
    uint64_t v6 = swift_release_n();
    a1 = v25;
    if (v9) {
      goto LABEL_13;
    }
  }
  if ((v7 & 0xC000000000) != 0x4000000000 || (v7 & 0xFF0000000000) != 0x20000000000) {
    goto LABEL_13;
  }
  char v15 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 200))(v6);
  swift_release();
  if (v15) {
    unint64_t v7 = v7 & 0xFFFF0001FFFFFFFFLL | 0x4000000000;
  }
  else {
    unint64_t v7 = v7 & 0xFFFF0001FFFFFFFFLL | 0x14000000000;
  }
LABEL_14:
  int v16 = v30;
  uint64_t v17 = v32;
  int v18 = v33;
  uint64_t v19 = v31;
  swift_retain_n();
  outlined copy of ContentTransition.Storage(v7, v8, v9);
  uint64_t v20 = 0x1000000000000;
  if (!v16) {
    uint64_t v20 = 0;
  }
  unint64_t v21 = v8 & 0xFFFFFFFFFFLL | (v9 << 40) | v20 | (v19 << 56);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(&v34, v7, v21, v17, v18);
  swift_release();
  outlined consume of ContentTransition.Storage(v7, v8, v9);
  swift_release();
  if (v4)
  {
    uint64_t v22 = v34;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v22);
    swift_release();
    swift_release();
    swift_release();
    outlined consume of ContentTransition.Storage(v7, v8, v9);
    uint64_t result = swift_release();
  }
  else
  {
    swift_release();
    outlined consume of ContentTransition.Storage(v7, v8, v9);
    uint64_t result = swift_release();
    uint64_t v22 = v34;
  }
  uint64_t v24 = v35;
  *a1 = v22;
  a1[1] = v24;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance StyledTextContentView.ArchivedTransitionEnvironment@<X0>(uint64_t *a1@<X8>)
{
  return StyledTextContentView.ArchivedTransitionEnvironment.value.getter(a1);
}

double protocol witness for ShapeStyledLeafView.shape(in:) in conformance StyledTextContentView(uint64_t a1, CGFloat a2, CGFloat a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = v3[1];
  uint64_t v9 = *((unsigned __int8 *)v3 + 16);
  if (v8)
  {
    uint64_t v10 = *(double (**)(uint64_t))(*(void *)v8 + 112);
    uint64_t v11 = swift_retain();
    double v12 = v10(v11);
    double v16 = CGRect.outset(by:)(v12, v13, v14, v15, 0.0, 0.0, a2, a3);
    swift_release();
  }
  else
  {
    double v16 = 0.0;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0x200000;
  swift_retain();
  swift_retain();
  return v16;
}

uint64_t TextLayoutQuery.value.getter(unint64_t a1, uint64_t a2)
{
  void (*v8)(unint64_t *__return_ptr, void, double, double, double, double, double, double);
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  long long v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  type metadata accessor for ResolvedStyledText();
  uint64_t v4 = *(void *)AGGraphGetValue();
  type metadata accessor for CGSize(0);
  uint64_t Value = (double *)AGGraphGetValue();
  double v6 = *Value;
  double v7 = Value[1];
  uint64_t v8 = *(void (**)(unint64_t *__return_ptr, void, double, double, double, double, double, double))(*(void *)v4 + 296);
  swift_retain();
  v8(&v22, 0, 0.0, 0.0, v6, v7, v6, v7);
  swift_release();
  uint64_t v9 = v22;
  if (!v22) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v10 = HIDWORD(a1);
  double v12 = v23;
  uint64_t v11 = v24;
  if (one-time initialization token for topLeading != -1) {
    swift_once();
  }
  double v13 = static UnitPoint.topLeading;
  double v14 = (double *)AGGraphGetValue();
  double v15 = *(double *)&v13 * *v14;
  double v16 = *((double *)&v13 + 1) * v14[1];
  uint64_t v22 = __PAIR64__(a2, v10);
  LODWORD(v23) = HIDWORD(a2);
  uint64_t v17 = CGPoint.prepare(geometry:)(v15, v16);
  uint64_t v19 = v18;
  type metadata accessor for InterfaceIdiomBox<PhoneInterfaceIdiom>(0, &lazy cache variable for type metadata for AnchorValueBox<UnitPoint>, (uint64_t)&type metadata for UnitPoint, (uint64_t)&protocol witness table for UnitPoint, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnchorValueBox);
  uint64_t v20 = swift_allocObject();
  *(double *)(v20 + 16) = v17;
  *(void *)(v20 + 24) = v19;
  _sypSgMaTm_3(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.LayoutKey.AnchoredLayout>, (uint64_t)&type metadata for Text.LayoutKey.AnchoredLayout, MEMORY[0x263F8E0F8]);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_2461B9DC0;
  *(void *)(result + 32) = v20;
  *(void *)(result + 40) = v9;
  *(unsigned char *)(result + 48) = v12 & 1;
  *(void *)(result + 56) = v11;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance TextLayoutQuery@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TextLayoutQuery.value.getter(*(void *)v1, *(void *)(v1 + 8));
  *a1 = result;
  return result;
}

uint64_t static ResolvedStyledText.defaultTransition.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v2 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    uint64_t result = dyld_program_sdk_at_least();
  }
  else {
    uint64_t result = static Semantics.forced >= v2;
  }
  uint64_t v4 = 0x8000000001;
  if (result) {
    uint64_t v4 = 0;
  }
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
  return result;
}

uint64_t ResolvedStyledText.requiresTransition(to:)(uint64_t a1)
{
  if (v1 == a1) {
    return 0;
  }
  if ((*(_WORD *)(v1 + 260) & 0x80) == 0) {
    return 1;
  }
  unsigned int v2 = *(void **)(v1 + 216);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = *(void **)(a1 + 216);
  if (!v3) {
    return 1;
  }
  double v16 = 0;
  id v4 = v2;
  id v5 = v3;
  id v6 = objc_msgSend(v4, sel_length);
  double v7 = (void *)swift_allocObject();
  _OWORD v7[2] = &v16;
  v7[3] = v5;
  v7[4] = v4;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = partial apply for closure #1 in ResolvedStyledText.requiresTransition(to:);
  *(void *)(v8 + 24) = v7;
  aBlock[4] = _sSDySo21NSAttributedStringKeyaypGSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIggyy_AceIIeggyy_TRTA_0;
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_12_1;
  uint64_t v9 = _Block_copy(aBlock);
  id v10 = v4;
  id v11 = v5;
  swift_retain();
  swift_release();
  objc_msgSend(v10, sel_enumerateAttributesInRange_options_usingBlock_, 0, v6, 0, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    id v13 = v16;
    id v14 = objc_msgSend(v11, sel_length);
    swift_release();

    return v13 != v14;
  }
  return result;
}

uint64_t closure #1 in ResolvedStyledText.requiresTransition(to:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t *a5, void *a6, void *a7)
{
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v12 = type metadata accessor for AttributeContainer();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  double v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = *a5;
  uint64_t result = (uint64_t)objc_msgSend(a6, sel_length, v17);
  if (v20 >= result)
  {
    *a4 = 1;
    return result;
  }
  uint64_t v41 = a4;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  id v22 = objc_msgSend(a6, sel_attributesAtIndex_effectiveRange_, *a5, &v45);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type ResolvedTextFilter and conformance ResolvedTextFilter(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  AttributeContainer.init(_:)();
  AttributeContainer.init(_:)();
  LOBYTE(v22) = static AttributeContainer.== infix(_:_:)();
  long long v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v15, v12);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v19, v12);
  if ((v22 & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v24 = MEMORY[0x24C522820](0xD00000000000001DLL, 0x800000024621F120);
  uint64_t v25 = (void *)v24;
  if (*(void *)(a1 + 16))
  {
    uint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24);
    unsigned int v27 = a7;
    if (v28)
    {
      outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v26, (uint64_t)&v47);
    }
    else
    {
      long long v47 = 0u;
      long long v48 = 0u;
    }
  }
  else
  {
    long long v47 = 0u;
    long long v48 = 0u;
    unsigned int v27 = a7;
  }
  uint64_t v29 = MEMORY[0x263F8EE58];

  if (!*((void *)&v48 + 1))
  {
    _sypSgWOhTm_5((uint64_t)&v47, (uint64_t)&lazy cache variable for type metadata for Any?, v29 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_3);
LABEL_14:
    id v30 = objc_msgSend(v27, sel_attributedSubstringFromRange_, v42, v43);
    id v31 = objc_msgSend(v30, sel_string);

    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;

    id v35 = objc_msgSend(a6, sel_attributedSubstringFromRange_, v45, v46);
    id v36 = objc_msgSend(v35, sel_string);

    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v39 = v38;

    if (v32 == v37 && v34 == v39)
    {
      uint64_t result = swift_bridgeObjectRelease_n();
      goto LABEL_18;
    }
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v40) {
      goto LABEL_18;
    }
LABEL_20:
    *uint64_t v41 = 1;
    return result;
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0 || (v44 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_18:
  if (__OFADD__(*a5, v46)) {
    __break(1u);
  }
  *a5 += v46;
  return result;
}

uint64_t ResolvedStyledText.appliesTransitionsForSizeChanges.getter()
{
  return 1;
}

uint64_t ResolvedStyledText.addsDrawingGroup.getter()
{
  return (*(unsigned __int16 *)(v0 + 260) >> 3) & 1;
}

uint64_t protocol witness for static InterpolatableContent.defaultTransition.getter in conformance ResolvedStyledText@<X0>(uint64_t a1@<X8>)
{
  return static ResolvedStyledText.defaultTransition.getter(a1);
}

uint64_t protocol witness for InterpolatableContent.requiresTransition(to:) in conformance ResolvedStyledText(uint64_t *a1)
{
  return ResolvedStyledText.requiresTransition(to:)(*a1) & 1;
}

uint64_t protocol witness for InterpolatableContent.addsDrawingGroup.getter in conformance ResolvedStyledText()
{
  return (*(unsigned __int16 *)(*(void *)v0 + 260) >> 3) & 1;
}

void protocol witness for InterpolatableContent.modifyTransition(state:to:) in conformance ResolvedStyledText(uint64_t a1, uint64_t *a2)
{
}

uint64_t StyledTextLayoutComputer.updateValue()()
{
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v1 = Value[1];
  v5[0] = *Value;
  v5[1] = v1;
  id v4 = v5;
  swift_retain();
  swift_retain();
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v3, (void (*)(uint64_t *__return_ptr))_s14AttributeGraph12StatefulRuleP7SwiftUIAD14LayoutComputerV5ValueRtzrlE6update2toyqd___tAD0G6EngineRd__lFqd__yXEfU0_AD010StyledTextgH033_641995D812913A47B866B20B88782376LLV_AD0mngL0VTG5TA_0);
  swift_release();
  return swift_release();
}

uint64_t TextLayoutProperties.lineLimit.getter()
{
  return *(void *)v0;
}

uint64_t TextLayoutProperties.lineLimit.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*TextLayoutProperties.lineLimit.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t TextLayoutProperties.lowerLineLimit.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t TextLayoutProperties.lowerLineLimit.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*TextLayoutProperties.lowerLineLimit.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void TextLayoutProperties.truncationMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 25);
}

unsigned char *TextLayoutProperties.truncationMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 25) = *result;
  return result;
}

uint64_t (*TextLayoutProperties.truncationMode.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t TextLayoutProperties.multilineTextAlignment.getter()
{
  return *(unsigned __int8 *)(v0 + 26);
}

uint64_t TextLayoutProperties.multilineTextAlignment.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 26) = result;
  return result;
}

uint64_t (*TextLayoutProperties.multilineTextAlignment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void TextLayoutProperties.layoutDirection.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 27);
}

unsigned char *TextLayoutProperties.layoutDirection.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 27) = *result;
  return result;
}

uint64_t (*TextLayoutProperties.layoutDirection.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void TextLayoutProperties.transitionStyle.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 28);
}

unsigned char *TextLayoutProperties.transitionStyle.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 28) = *result;
  return result;
}

uint64_t (*TextLayoutProperties.transitionStyle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double TextLayoutProperties.minScaleFactor.getter()
{
  return *(double *)(v0 + 32);
}

void TextLayoutProperties.minScaleFactor.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*TextLayoutProperties.minScaleFactor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double TextLayoutProperties.lineSpacing.getter()
{
  return *(double *)(v0 + 40);
}

void TextLayoutProperties.lineSpacing.setter(double a1)
{
  *(double *)(v1 + 40) = a1;
}

uint64_t (*TextLayoutProperties.lineSpacing.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double TextLayoutProperties.lineHeightMultiple.getter()
{
  return *(double *)(v0 + 48);
}

void TextLayoutProperties.lineHeightMultiple.setter(double a1)
{
  *(double *)(v1 + 48) = a1;
}

uint64_t (*TextLayoutProperties.lineHeightMultiple.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double TextLayoutProperties.maximumLineHeight.getter()
{
  return *(double *)(v0 + 56);
}

void TextLayoutProperties.maximumLineHeight.setter(double a1)
{
  *(double *)(v1 + 56) = a1;
}

uint64_t (*TextLayoutProperties.maximumLineHeight.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double TextLayoutProperties.minimumLineHeight.getter()
{
  return *(double *)(v0 + 64);
}

void TextLayoutProperties.minimumLineHeight.setter(double a1)
{
  *(double *)(v1 + 64) = a1;
}

uint64_t (*TextLayoutProperties.minimumLineHeight.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double TextLayoutProperties.hyphenationFactor.getter()
{
  return *(double *)(v0 + 72);
}

void TextLayoutProperties.hyphenationFactor.setter(double a1)
{
  *(double *)(v1 + 72) = a1;
}

uint64_t (*TextLayoutProperties.hyphenationFactor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t TextLayoutProperties.hyphenationDisabled.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t TextLayoutProperties.hyphenationDisabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 80) = result;
  return result;
}

uint64_t (*TextLayoutProperties.hyphenationDisabled.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void TextLayoutProperties.writingMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 81);
}

unsigned char *TextLayoutProperties.writingMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 81) = *result;
  return result;
}

uint64_t (*TextLayoutProperties.writingMode.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double TextLayoutProperties.bodyHeadOutdent.getter()
{
  return *(double *)(v0 + 88);
}

void TextLayoutProperties.bodyHeadOutdent.setter(double a1)
{
  *(double *)(v1 + 88) = a1;
}

uint64_t (*TextLayoutProperties.bodyHeadOutdent.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double TextLayoutProperties.pixelLength.getter()
{
  return *(double *)(v0 + 96);
}

void TextLayoutProperties.pixelLength.setter(double a1)
{
  *(double *)(v1 + 96) = a1;
}

uint64_t (*TextLayoutProperties.pixelLength.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t TextLayoutProperties.textSizing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 112);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 104);
  *(void *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t TextLayoutProperties.textSizing.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)(v1 + 104) = v2;
  *(void *)(v1 + 112) = v3;
  return result;
}

uint64_t (*TextLayoutProperties.textSizing.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 TextLayoutProperties.textShape.getter@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = *(void *)(v1 + 136);
  __n128 result = *(__n128 *)(v1 + 120);
  *a1 = result;
  a1[1].n128_u64[0] = v2;
  return result;
}

__n128 TextLayoutProperties.textShape.setter(__n128 *a1)
{
  unint64_t v2 = a1[1].n128_u64[0];
  __n128 result = *a1;
  *(__n128 *)(v1 + 120) = *a1;
  *(void *)(v1 + 136) = v2;
  return result;
}

uint64_t (*TextLayoutProperties.textShape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t TextLayoutProperties.widthIsFlexible.getter()
{
  return *(unsigned char *)(v0 + 144) & 1;
}

uint64_t TextLayoutProperties.widthIsFlexible.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 144) = *(unsigned char *)(v1 + 144) & 0xFE | result;
  return result;
}

unsigned char *(*TextLayoutProperties.widthIsFlexible.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 144) & 1;
  return TextLayoutProperties.widthIsFlexible.modify;
}

unsigned char *TextLayoutProperties.widthIsFlexible.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 144) = *(unsigned char *)(*(void *)result + 144) & 0xFE | result[8];
  return result;
}

uint64_t TextLayoutProperties.sizeFitting.getter()
{
  return (*(unsigned __int8 *)(v0 + 144) >> 1) & 1;
}

uint64_t TextLayoutProperties.sizeFitting.setter(uint64_t result)
{
  if (result) {
    char v2 = 2;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(v1 + 144) = *(unsigned char *)(v1 + 144) & 0xFD | v2;
  return result;
}

unsigned char *(*TextLayoutProperties.sizeFitting.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + 144) & 2) != 0;
  return TextLayoutProperties.sizeFitting.modify;
}

unsigned char *TextLayoutProperties.sizeFitting.modify(unsigned char *result)
{
  if (result[8]) {
    char v1 = 2;
  }
  else {
    char v1 = 0;
  }
  *(unsigned char *)(*(void *)result + 144) = *(unsigned char *)(*(void *)result + 144) & 0xFD | v1;
  return result;
}

uint64_t TextLayoutProperties.init()@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = static MaximumLineHeightKey.defaultValue;
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v3 = static MinimumLineHeightKey.defaultValue;
  if (one-time initialization token for standard != -1) {
    swift_once();
  }
  char v4 = static Text.Sizing.standard;
  uint64_t v5 = qword_26B0F0F48;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 25) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0x3FF0000000000000;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_2461C55F0;
  *(unsigned char *)(a1 + 104) = v4;
  *(void *)(a1 + 112) = v5;
  *(void *)(a1 + 120) = 2;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;

  return swift_bridgeObjectRetain();
}

uint64_t TextLayoutProperties.update(_:from:)(uint64_t *a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  int v62 = *(unsigned __int8 *)(a2 + 25);
  int v70 = *(unsigned __int8 *)(a2 + 26);
  int v72 = *(unsigned __int8 *)(a2 + 27);
  int v76 = *(unsigned __int8 *)(a2 + 28);
  double v8 = *(double *)(a2 + 32);
  double v7 = *(double *)(a2 + 40);
  double v63 = *(double *)(a2 + 48);
  double v64 = *(double *)(a2 + 56);
  double v9 = *(double *)(a2 + 72);
  double v66 = *(double *)(a2 + 64);
  int v74 = *(unsigned __int8 *)(a2 + 80);
  int v61 = *(unsigned __int8 *)(a2 + 81);
  int v77 = *(unsigned __int8 *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  uint64_t v58 = *(void *)(a2 + 112);
  double v56 = *(double *)(a2 + 136);
  double v57 = *(double *)(a2 + 128);
  uint64_t v11 = *(void *)v2;
  char v12 = *(unsigned char *)(v2 + 8);
  uint64_t v13 = *(void *)(v2 + 16);
  char v14 = *(unsigned char *)(v2 + 24);
  int v15 = *(unsigned __int8 *)(v2 + 25);
  int v78 = *(unsigned __int8 *)(v2 + 26);
  int v71 = *(unsigned __int8 *)(v2 + 27);
  int v75 = *(unsigned __int8 *)(v2 + 28);
  double v17 = *(double *)(v2 + 32);
  double v16 = *(double *)(v2 + 40);
  double v19 = *(double *)(v2 + 48);
  double v18 = *(double *)(v2 + 56);
  double v20 = *(double *)(v2 + 72);
  double v65 = *(double *)(v2 + 64);
  int v73 = *(unsigned __int8 *)(v2 + 80);
  int v68 = *(unsigned __int8 *)(v2 + 81);
  int v79 = *(unsigned __int8 *)(v2 + 104);
  unint64_t v67 = *(void *)(v2 + 112);
  uint64_t v69 = *(void *)(v2 + 120);
  uint64_t v60 = *(uint64_t *)(v2 + 128);
  uint64_t v59 = *(uint64_t *)(v2 + 136);
  if (v12)
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_14:
    int v23 = *(void *)(a2 + 120);
    int v24 = *(unsigned __int8 *)(v2 + 26);
    if ((*(unsigned char *)(v2 + 24) & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
  if (v11 != *(void *)a2) {
    char v4 = 1;
  }
  if ((v4 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_3:
  uint64_t v54 = *(void *)(a2 + 16);
  char v55 = *(unsigned char *)(a2 + 24);
  uint64_t v21 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v11, v12);
  swift_release();
  if (a1[1])
  {
    uint64_t v22 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v21, v22);
    swift_release();
    swift_release();
  }
  swift_release();
  int v23 = v10;
  int v24 = v78;
  char v6 = v55;
  uint64_t v5 = v54;
  if ((v14 & 1) == 0)
  {
LABEL_6:
    if (v13 == v5) {
      char v25 = v6;
    }
    else {
      char v25 = 1;
    }
    if ((v25 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
LABEL_15:
  if (v6) {
    goto LABEL_19;
  }
LABEL_16:
  uint64_t v26 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v13, v14);
  swift_release();
  if (a1[1])
  {
    uint64_t v27 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v26, v27);
    swift_release();
    int v24 = v78;
    swift_release();
  }
  swift_release();
LABEL_19:
  if (v15 != v62)
  {
    uint64_t v28 = *a1;
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(a1, v15);
    swift_release();
    if (a1[1])
    {
      uint64_t v29 = *a1;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v28, v29);
      swift_release();
      swift_release();
    }
    swift_release();
  }
  if (v24 != v70)
  {
    uint64_t v30 = *a1;
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(a1, v24);
    swift_release();
    if (a1[1])
    {
      uint64_t v31 = *a1;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v30, v31);
      swift_release();
      swift_release();
    }
    swift_release();
  }
  if (v72 == v71)
  {
    if (v17 == v8) {
      goto LABEL_29;
    }
LABEL_34:
    EnvironmentValues.minimumScaleFactor.setter(v17);
    if (v16 == v7) {
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  uint64_t v32 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v71);
  swift_release();
  if (a1[1])
  {
    uint64_t v33 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v32, v33);
    swift_release();
    swift_release();
  }
  swift_release();
  if (v17 != v8) {
    goto LABEL_34;
  }
LABEL_29:
  if (v16 == v7) {
    goto LABEL_38;
  }
LABEL_35:
  uint64_t v34 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v16);
  swift_release();
  if (a1[1])
  {
    uint64_t v35 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v34, v35);
    swift_release();
    swift_release();
  }
  swift_release();
LABEL_38:
  if (v19 != v63)
  {
    uint64_t v36 = *a1;
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(a1, v19);
    swift_release();
    if (a1[1])
    {
      uint64_t v37 = *a1;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v36, v37);
      swift_release();
      swift_release();
    }
    swift_release();
  }
  if (v18 != v64)
  {
    uint64_t v38 = *a1;
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(a1, v18);
    swift_release();
    if (a1[1])
    {
      uint64_t v39 = *a1;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v38, v39);
      swift_release();
      swift_release();
    }
    swift_release();
  }
  if (v65 == v66)
  {
    if (v20 == v9) {
      goto LABEL_55;
    }
    goto LABEL_52;
  }
  uint64_t v40 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v65);
  swift_release();
  if (a1[1])
  {
    uint64_t v41 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v40, v41);
    swift_release();
    swift_release();
  }
  swift_release();
  if (v20 != v9)
  {
LABEL_52:
    uint64_t v42 = *a1;
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(a1, v20);
    swift_release();
    if (a1[1])
    {
      uint64_t v43 = *a1;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v42, v43);
      swift_release();
      swift_release();
    }
    swift_release();
  }
LABEL_55:
  if (v74 != v73)
  {
    uint64_t v44 = *a1;
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(a1, v73);
    swift_release();
    if (a1[1])
    {
      uint64_t v45 = *a1;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v44, v45);
      swift_release();
      swift_release();
    }
    swift_release();
  }
  if (v75 != v76)
  {
    unsigned __int8 v80 = v75;
    EnvironmentValues.contentTransitionStyle.setter(&v80);
  }
  if (v79 == v77
    && (swift_bridgeObjectRetain(),
        swift_bridgeObjectRetain(),
        char v46 = specialized static Array<A>.== infix(_:_:)(v67, v58),
        swift_bridgeObjectRelease(),
        uint64_t result = swift_bridgeObjectRelease(),
        (v46 & 1) != 0))
  {
    if (v61 == v68) {
      goto LABEL_72;
    }
  }
  else
  {
    uint64_t v48 = *a1;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    specialized closure #1 in PropertyList.subscript.setter(a1, v79, v67);
    swift_bridgeObjectRelease();
    swift_release();
    if (a1[1])
    {
      uint64_t v49 = *a1;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v48, v49);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t result = swift_release();
    if (v61 == v68) {
      goto LABEL_72;
    }
  }
  uint64_t v50 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v68);
  swift_release();
  if (a1[1])
  {
    uint64_t v51 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v50, v51);
    swift_release();
    swift_release();
  }
  uint64_t result = swift_release();
LABEL_72:
  if (v69 == 2)
  {
    if (v23 == 2) {
      return result;
    }
  }
  else if (v23 != 2 {
         && ((v69 ^ v23) & 1) == 0
  }
         && v57 == *(double *)&v60
         && v56 == *(double *)&v59)
  {
    return result;
  }
  uint64_t v52 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v69, v60, v59);
  swift_release();
  if (a1[1])
  {
    uint64_t v53 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v52, v53);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void TextLayoutProperties.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)v3;
  char v6 = *(unsigned char *)(v3 + 8);
  uint64_t v7 = *(void *)(v3 + 16);
  char v8 = *(unsigned char *)(v3 + 24);
  uint64_t v9 = *(unsigned __int8 *)(v3 + 25);
  uint64_t v10 = *(unsigned __int8 *)(v3 + 26);
  int v11 = *(unsigned __int8 *)(v3 + 28);
  double v13 = *(double *)(v3 + 32);
  double v12 = *(double *)(v3 + 40);
  double v15 = *(double *)(v3 + 48);
  double v14 = *(double *)(v3 + 56);
  double v17 = *(double *)(v3 + 64);
  double v16 = *(double *)(v3 + 72);
  char v73 = *(unsigned char *)(v3 + 80);
  char v74 = *(unsigned char *)(v3 + 27);
  char v70 = *(unsigned char *)(v3 + 81);
  double v76 = *(double *)(v3 + 88);
  double v75 = *(double *)(v3 + 96);
  Swift::UInt v71 = *(unsigned __int8 *)(v3 + 104);
  char v72 = *(unsigned char *)(v3 + 144);
  if (v9 != 1)
  {
    Swift::UInt v18 = v9 + 1;
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v18);
  }
  if (v5 == 0x7FFFFFFFFFFFFFFFLL) {
    char v19 = 1;
  }
  else {
    char v19 = v6;
  }
  if ((v19 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)((2 * v5) ^ (v5 >> 63));
  }
  if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
    char v20 = 1;
  }
  else {
    char v20 = v8;
  }
  if ((v20 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)((2 * v7) ^ (v7 >> 63));
  }
  if (v13 != 1.0)
  {
    double v21 = fabs(v13);
    if (v21 >= 65536.0) {
      Swift::UInt v22 = 33;
    }
    else {
      Swift::UInt v22 = 37;
    }
    ProtobufEncoder.encodeVarint(_:)(v22);
    if (v21 >= 65536.0)
    {
      uint64_t v25 = a1[1];
      int64_t v26 = v25 + 8;
      if (__OFADD__(v25, 8))
      {
        __break(1u);
      }
      else if (a1[2] >= v26)
      {
        a1[1] = v26;
        *(double *)(*a1 + v25) = v13;
        goto LABEL_24;
      }
      *(double *)ProtobufEncoder.growBufferSlow(to:)(v26) = v13;
    }
    else
    {
      uint64_t v23 = a1[1];
      int64_t v24 = v23 + 4;
      if (__OFADD__(v23, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&double v13 = v13;
        if (a1[2] >= v24)
        {
          a1[1] = v24;
          *(_DWORD *)(*a1 + v23) = LODWORD(v13);
          goto LABEL_24;
        }
      }
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v24) = LODWORD(v13);
    }
  }
LABEL_24:
  if (v12 == 0.0) {
    goto LABEL_35;
  }
  double v27 = fabs(v12);
  if (v27 >= 65536.0) {
    Swift::UInt v28 = 41;
  }
  else {
    Swift::UInt v28 = 45;
  }
  ProtobufEncoder.encodeVarint(_:)(v28);
  if (v27 >= 65536.0)
  {
    uint64_t v31 = a1[1];
    int64_t v32 = v31 + 8;
    if (__OFADD__(v31, 8))
    {
      __break(1u);
    }
    else if (a1[2] >= v32)
    {
      a1[1] = v32;
      *(double *)(*a1 + v31) = v12;
      goto LABEL_35;
    }
    *(double *)ProtobufEncoder.growBufferSlow(to:)(v32) = v12;
  }
  else
  {
    uint64_t v29 = a1[1];
    int64_t v30 = v29 + 4;
    if (__OFADD__(v29, 4))
    {
      __break(1u);
    }
    else
    {
      *(float *)&double v12 = v12;
      if (a1[2] >= v30)
      {
        a1[1] = v30;
        *(_DWORD *)(*a1 + v29) = LODWORD(v12);
        goto LABEL_35;
      }
    }
    *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v30) = LODWORD(v12);
  }
LABEL_35:
  if (v15 == 0.0) {
    goto LABEL_46;
  }
  double v33 = fabs(v15);
  if (v33 >= 65536.0) {
    Swift::UInt v34 = 49;
  }
  else {
    Swift::UInt v34 = 53;
  }
  ProtobufEncoder.encodeVarint(_:)(v34);
  if (v33 >= 65536.0)
  {
    uint64_t v37 = a1[1];
    int64_t v38 = v37 + 8;
    if (__OFADD__(v37, 8))
    {
      __break(1u);
    }
    else if (a1[2] >= v38)
    {
      a1[1] = v38;
      *(double *)(*a1 + v37) = v15;
      goto LABEL_46;
    }
    *(double *)ProtobufEncoder.growBufferSlow(to:)(v38) = v15;
  }
  else
  {
    uint64_t v35 = a1[1];
    int64_t v36 = v35 + 4;
    if (__OFADD__(v35, 4))
    {
      __break(1u);
    }
    else
    {
      *(float *)&double v15 = v15;
      if (a1[2] >= v36)
      {
        a1[1] = v36;
        *(_DWORD *)(*a1 + v35) = LODWORD(v15);
        goto LABEL_46;
      }
    }
    *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v36) = LODWORD(v15);
  }
LABEL_46:
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  if (v14 != *(double *)&static MaximumLineHeightKey.defaultValue)
  {
    double v39 = fabs(v14);
    if (v39 >= 65536.0) {
      Swift::UInt v40 = 57;
    }
    else {
      Swift::UInt v40 = 61;
    }
    ProtobufEncoder.encodeVarint(_:)(v40);
    if (v39 >= 65536.0)
    {
      uint64_t v43 = a1[1];
      int64_t v44 = v43 + 8;
      if (__OFADD__(v43, 8))
      {
        __break(1u);
      }
      else if (a1[2] >= v44)
      {
        a1[1] = v44;
        *(double *)(*a1 + v43) = v14;
        goto LABEL_59;
      }
      *(double *)ProtobufEncoder.growBufferSlow(to:)(v44) = v14;
    }
    else
    {
      uint64_t v41 = a1[1];
      int64_t v42 = v41 + 4;
      if (__OFADD__(v41, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&double v14 = v14;
        if (a1[2] >= v42)
        {
          a1[1] = v42;
          *(_DWORD *)(*a1 + v41) = LODWORD(v14);
          goto LABEL_59;
        }
      }
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v42) = LODWORD(v14);
    }
  }
LABEL_59:
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  if (v17 != *(double *)&static MinimumLineHeightKey.defaultValue)
  {
    double v45 = fabs(v17);
    if (v45 >= 65536.0) {
      Swift::UInt v46 = 65;
    }
    else {
      Swift::UInt v46 = 69;
    }
    ProtobufEncoder.encodeVarint(_:)(v46);
    if (v45 >= 65536.0)
    {
      uint64_t v49 = a1[1];
      int64_t v50 = v49 + 8;
      if (__OFADD__(v49, 8))
      {
        __break(1u);
      }
      else if (a1[2] >= v50)
      {
        a1[1] = v50;
        *(double *)(*a1 + v49) = v17;
        goto LABEL_72;
      }
      *(double *)ProtobufEncoder.growBufferSlow(to:)(v50) = v17;
    }
    else
    {
      uint64_t v47 = a1[1];
      int64_t v48 = v47 + 4;
      if (__OFADD__(v47, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&double v17 = v17;
        if (a1[2] >= v48)
        {
          a1[1] = v48;
          *(_DWORD *)(*a1 + v47) = LODWORD(v17);
          goto LABEL_72;
        }
      }
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v48) = LODWORD(v17);
    }
  }
LABEL_72:
  if (v16 == 0.0) {
    goto LABEL_83;
  }
  double v51 = fabs(v16);
  if (v51 >= 65536.0) {
    Swift::UInt v52 = 73;
  }
  else {
    Swift::UInt v52 = 77;
  }
  ProtobufEncoder.encodeVarint(_:)(v52);
  if (v51 >= 65536.0)
  {
    uint64_t v55 = a1[1];
    int64_t v56 = v55 + 8;
    if (__OFADD__(v55, 8))
    {
      __break(1u);
    }
    else if (a1[2] >= v56)
    {
      a1[1] = v56;
      *(double *)(*a1 + v55) = v16;
      goto LABEL_83;
    }
    *(double *)ProtobufEncoder.growBufferSlow(to:)(v56) = v16;
  }
  else
  {
    uint64_t v53 = a1[1];
    int64_t v54 = v53 + 4;
    if (__OFADD__(v53, 4))
    {
      __break(1u);
    }
    else
    {
      *(float *)&double v16 = v16;
      if (a1[2] >= v54)
      {
        a1[1] = v54;
        *(_DWORD *)(*a1 + v53) = LODWORD(v16);
        goto LABEL_83;
      }
    }
    *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v54) = LODWORD(v16);
  }
LABEL_83:
  if (v76 == 0.0) {
    goto LABEL_94;
  }
  double v57 = fabs(v76);
  float v58 = 0.0;
  if (v57 >= 65536.0) {
    Swift::UInt v59 = 81;
  }
  else {
    Swift::UInt v59 = 85;
  }
  ProtobufEncoder.encodeVarint(_:)(v59);
  if (v57 >= 65536.0)
  {
    uint64_t v62 = a1[1];
    int64_t v63 = v62 + 8;
    if (__OFADD__(v62, 8))
    {
      __break(1u);
    }
    else if (a1[2] >= v63)
    {
      a1[1] = v63;
      *(double *)(*a1 + v62) = v76;
      goto LABEL_94;
    }
    *(double *)ProtobufEncoder.growBufferSlow(to:)(v63) = v76;
  }
  else
  {
    uint64_t v60 = a1[1];
    int64_t v61 = v60 + 4;
    if (__OFADD__(v60, 4))
    {
      __break(1u);
    }
    else
    {
      float v58 = v76;
      if (a1[2] >= v61)
      {
        a1[1] = v61;
        *(float *)(*a1 + v60) = v58;
        goto LABEL_94;
      }
    }
    *(float *)ProtobufEncoder.growBufferSlow(to:)(v61) = v58;
  }
LABEL_94:
  if (v75 == 1.0) {
    goto LABEL_105;
  }
  double v64 = fabs(v75);
  if (v64 >= 65536.0) {
    Swift::UInt v65 = 89;
  }
  else {
    Swift::UInt v65 = 93;
  }
  ProtobufEncoder.encodeVarint(_:)(v65);
  if (v64 >= 65536.0)
  {
    uint64_t v68 = a1[1];
    int64_t v69 = v68 + 8;
    if (__OFADD__(v68, 8))
    {
      __break(1u);
    }
    else if (a1[2] >= v69)
    {
      a1[1] = v69;
      *(double *)(*a1 + v68) = v75;
      goto LABEL_105;
    }
    *(double *)ProtobufEncoder.growBufferSlow(to:)(v69) = v75;
  }
  else
  {
    uint64_t v66 = a1[1];
    int64_t v67 = v66 + 4;
    if (__OFADD__(v66, 4))
    {
      __break(1u);
    }
    else
    {
      *(float *)&double v64 = v75;
      if (a1[2] >= v67)
      {
        a1[1] = v67;
        *(_DWORD *)(*a1 + v66) = LODWORD(v64);
        goto LABEL_105;
      }
    }
    *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v67) = LODWORD(v64);
  }
LABEL_105:
  if (v10)
  {
    ProtobufEncoder.encodeVarint(_:)(0x60uLL);
    ProtobufEncoder.encodeVarint(_:)(v10 + 1);
  }
  if (v74)
  {
    ProtobufEncoder.encodeVarint(_:)(0x68uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if (!v11 || (specialized ProtobufEncoder.messageField<A>(_:_:)(14), !v2))
  {
    if (v70)
    {
      ProtobufEncoder.encodeVarint(_:)(0x80uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    if (v72)
    {
      ProtobufEncoder.encodeVarint(_:)(0x88uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    if (v71)
    {
      ProtobufEncoder.encodeVarint(_:)(0x90uLL);
      ProtobufEncoder.encodeVarint(_:)(v71);
    }
    if ((v72 & 2) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x98uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    if (v73)
    {
      ProtobufEncoder.encodeVarint(_:)(0xA0uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
  }
}

uint64_t TextLayoutProperties.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double v6 = *(double *)&static MaximumLineHeightKey.defaultValue;
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double v7 = *(double *)&static MinimumLineHeightKey.defaultValue;
  if (one-time initialization token for standard != -1) {
    swift_once();
  }
  uint64_t v8 = static Text.Sizing.standard;
  uint64_t v9 = qword_26B0F0F48;
  char v10 = 1;
  char v143 = 1;
  char v142 = 1;
  char v141 = 1;
  char v139 = 1;
  unint64_t v11 = a1[1];
  unint64_t v12 = a1[2];
  uint64_t result = swift_bridgeObjectRetain();
  if (v11 >= v12)
  {
    char v20 = 0;
    char v21 = 0;
    LOBYTE(v14) = 0;
    char v22 = 0;
    char v23 = 0;
    char v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    double v18 = 0.0;
    double v19 = 1.0;
    double v17 = 0.0;
    double v15 = 0.0;
    char v27 = 1;
    double v16 = 1.0;
    char v28 = 1;
    goto LABEL_10;
  }
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  uint64_t v100 = 0;
  uint64_t v14 = 0;
  uint64_t v103 = 0;
  uint64_t v97 = a1 + 5;
  double v15 = 0.0;
  double v16 = 1.0;
  char v98 = 0;
  char v99 = 1;
  double v17 = 0.0;
  double v18 = 0.0;
  double v19 = 1.0;
  while (2)
  {
    uint64_t result = a1[3];
    if (!result) {
      goto LABEL_19;
    }
    unint64_t v29 = a1[4];
    if (v11 >= v29)
    {
      if (v29 < v11) {
        goto LABEL_219;
      }
      a1[3] = 0;
LABEL_19:
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v3) {
        goto LABEL_220;
      }
      if ((unint64_t)result <= 7) {
        goto LABEL_219;
      }
    }
    switch((unint64_t)result >> 3)
    {
      case 1uLL:
        if ((result & 7) == 0) {
          goto LABEL_28;
        }
        if ((result & 7) != 2) {
          goto LABEL_219;
        }
        uint64_t v30 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        if (v30 < 0) {
          goto LABEL_227;
        }
        unint64_t v31 = a1[1] + v30;
        if (v12 < v31) {
          goto LABEL_219;
        }
        a1[3] = 8;
        a1[4] = v31;
LABEL_28:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        if (result == 1)
        {
          char v99 = 0;
        }
        else if (result == 3)
        {
          char v99 = 2;
        }
        else
        {
          char v99 = 1;
        }
        goto LABEL_14;
      case 2uLL:
        if ((result & 7) == 0) {
          goto LABEL_38;
        }
        if ((result & 7) != 2) {
          goto LABEL_219;
        }
        uint64_t v32 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        if (v32 < 0) {
          goto LABEL_228;
        }
        unint64_t v33 = a1[1] + v32;
        if (v12 < v33) {
          goto LABEL_219;
        }
        a1[3] = 16;
        a1[4] = v33;
LABEL_38:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        uint64_t v101 = -(result & 1) ^ (result >> 1);
        char v141 = 0;
        goto LABEL_14;
      case 3uLL:
        if ((result & 7) == 0) {
          goto LABEL_46;
        }
        if ((result & 7) != 2) {
          goto LABEL_219;
        }
        uint64_t v34 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        if (v34 < 0) {
          goto LABEL_229;
        }
        unint64_t v35 = a1[1] + v34;
        if (v12 < v35) {
          goto LABEL_219;
        }
        a1[3] = 24;
        a1[4] = v35;
LABEL_46:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        uint64_t v102 = -(result & 1) ^ (result >> 1);
        char v139 = 0;
        goto LABEL_14;
      case 4uLL:
        uint64_t v36 = result & 7;
        if (v36 == 5)
        {
          uint64_t v81 = (float *)a1[1];
          if (v12 < (unint64_t)(v81 + 1)) {
            goto LABEL_219;
          }
          float v82 = *v81;
          a1[1] = v81 + 1;
          double v16 = v82;
        }
        else
        {
          if (v36 == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_220;
            }
            if (result < 0) {
              goto LABEL_237;
            }
            uint64_t v37 = (double *)a1[1];
            if (v12 < (unint64_t)v37 + result) {
              goto LABEL_219;
            }
            a1[3] = 33;
            a1[4] = (char *)v37 + result;
          }
          else
          {
            if (v36 != 1) {
              goto LABEL_219;
            }
            uint64_t v37 = (double *)a1[1];
          }
          if (v12 < (unint64_t)(v37 + 1)) {
            goto LABEL_219;
          }
          double v16 = *v37;
          a1[1] = v37 + 1;
        }
        goto LABEL_14;
      case 5uLL:
        uint64_t v38 = result & 7;
        if (v38 == 5)
        {
          long long v83 = (float *)a1[1];
          if (v12 < (unint64_t)(v83 + 1)) {
            goto LABEL_219;
          }
          float v84 = *v83;
          a1[1] = v83 + 1;
          double v15 = v84;
        }
        else
        {
          if (v38 == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_220;
            }
            if (result < 0) {
              goto LABEL_238;
            }
            double v39 = (double *)a1[1];
            if (v12 < (unint64_t)v39 + result) {
              goto LABEL_219;
            }
            a1[3] = 41;
            a1[4] = (char *)v39 + result;
          }
          else
          {
            if (v38 != 1) {
              goto LABEL_219;
            }
            double v39 = (double *)a1[1];
          }
          if (v12 < (unint64_t)(v39 + 1)) {
            goto LABEL_219;
          }
          double v15 = *v39;
          a1[1] = v39 + 1;
        }
        goto LABEL_14;
      case 7uLL:
        uint64_t v40 = result & 7;
        if (v40 == 5)
        {
          long long v85 = (float *)a1[1];
          if (v12 < (unint64_t)(v85 + 1)) {
            goto LABEL_219;
          }
          float v86 = *v85;
          a1[1] = v85 + 1;
          double v6 = v86;
        }
        else
        {
          if (v40 == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_220;
            }
            if (result < 0) {
              goto LABEL_239;
            }
            uint64_t v41 = (double *)a1[1];
            if (v12 < (unint64_t)v41 + result) {
              goto LABEL_219;
            }
            a1[3] = 57;
            a1[4] = (char *)v41 + result;
          }
          else
          {
            if (v40 != 1) {
              goto LABEL_219;
            }
            uint64_t v41 = (double *)a1[1];
          }
          if (v12 < (unint64_t)(v41 + 1)) {
            goto LABEL_219;
          }
          double v6 = *v41;
          a1[1] = v41 + 1;
        }
        goto LABEL_14;
      case 8uLL:
        uint64_t v42 = result & 7;
        if (v42 == 5)
        {
          long long v87 = (float *)a1[1];
          if (v12 < (unint64_t)(v87 + 1)) {
            goto LABEL_219;
          }
          float v88 = *v87;
          a1[1] = v87 + 1;
          double v7 = v88;
        }
        else
        {
          if (v42 == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_220;
            }
            if (result < 0) {
              goto LABEL_240;
            }
            uint64_t v43 = (double *)a1[1];
            if (v12 < (unint64_t)v43 + result) {
              goto LABEL_219;
            }
            a1[3] = 65;
            a1[4] = (char *)v43 + result;
          }
          else
          {
            if (v42 != 1) {
              goto LABEL_219;
            }
            uint64_t v43 = (double *)a1[1];
          }
          if (v12 < (unint64_t)(v43 + 1)) {
            goto LABEL_219;
          }
          double v7 = *v43;
          a1[1] = v43 + 1;
        }
        goto LABEL_14;
      case 9uLL:
        uint64_t v44 = result & 7;
        if (v44 == 5)
        {
          long long v89 = (float *)a1[1];
          if (v12 < (unint64_t)(v89 + 1)) {
            goto LABEL_219;
          }
          float v90 = *v89;
          a1[1] = v89 + 1;
          double v17 = v90;
        }
        else
        {
          if (v44 == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_220;
            }
            if (result < 0) {
              goto LABEL_241;
            }
            double v45 = (double *)a1[1];
            if (v12 < (unint64_t)v45 + result) {
              goto LABEL_219;
            }
            a1[3] = 73;
            a1[4] = (char *)v45 + result;
          }
          else
          {
            if (v44 != 1) {
              goto LABEL_219;
            }
            double v45 = (double *)a1[1];
          }
          if (v12 < (unint64_t)(v45 + 1)) {
            goto LABEL_219;
          }
          double v17 = *v45;
          a1[1] = v45 + 1;
        }
        goto LABEL_14;
      case 0xAuLL:
        uint64_t v46 = result & 7;
        if (v46 == 5)
        {
          long long v91 = (float *)a1[1];
          if (v12 < (unint64_t)(v91 + 1)) {
            goto LABEL_219;
          }
          float v92 = *v91;
          a1[1] = v91 + 1;
          double v18 = v92;
        }
        else
        {
          if (v46 == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_220;
            }
            if (result < 0) {
              goto LABEL_242;
            }
            uint64_t v47 = (double *)a1[1];
            if (v12 < (unint64_t)v47 + result) {
              goto LABEL_219;
            }
            a1[3] = 81;
            a1[4] = (char *)v47 + result;
          }
          else
          {
            if (v46 != 1) {
              goto LABEL_219;
            }
            uint64_t v47 = (double *)a1[1];
          }
          if (v12 < (unint64_t)(v47 + 1)) {
            goto LABEL_219;
          }
          double v18 = *v47;
          a1[1] = v47 + 1;
        }
        goto LABEL_14;
      case 0xBuLL:
        uint64_t v48 = result & 7;
        if (v48 == 5)
        {
          uint64_t v93 = (float *)a1[1];
          if (v12 < (unint64_t)(v93 + 1)) {
            goto LABEL_219;
          }
          float v94 = *v93;
          a1[1] = v93 + 1;
          double v19 = v94;
        }
        else
        {
          if (v48 == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_220;
            }
            if (result < 0) {
              goto LABEL_243;
            }
            uint64_t v49 = (double *)a1[1];
            if (v12 < (unint64_t)v49 + result) {
              goto LABEL_219;
            }
            a1[3] = 89;
            a1[4] = (char *)v49 + result;
          }
          else
          {
            if (v48 != 1) {
              goto LABEL_219;
            }
            uint64_t v49 = (double *)a1[1];
          }
          if (v12 < (unint64_t)(v49 + 1)) {
            goto LABEL_219;
          }
          double v19 = *v49;
          a1[1] = v49 + 1;
        }
        goto LABEL_14;
      case 0xCuLL:
        if ((result & 7) == 0) {
          goto LABEL_85;
        }
        if ((result & 7) != 2) {
          goto LABEL_219;
        }
        uint64_t v50 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        if (v50 < 0) {
          goto LABEL_230;
        }
        unint64_t v51 = a1[1] + v50;
        if (v12 < v51) {
          goto LABEL_219;
        }
        a1[3] = 96;
        a1[4] = v51;
LABEL_85:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        char v52 = result == 2;
        if (result == 3) {
          char v52 = 2;
        }
        LOBYTE(v100) = v52;
        goto LABEL_14;
      case 0xDuLL:
        if ((result & 7) == 0) {
          goto LABEL_95;
        }
        if ((result & 7) != 2) {
          goto LABEL_219;
        }
        uint64_t v53 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        if (v53 < 0) {
          goto LABEL_231;
        }
        unint64_t v54 = a1[1] + v53;
        if (v12 < v54) {
          goto LABEL_219;
        }
        a1[3] = 104;
        a1[4] = v54;
LABEL_95:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        BYTE4(v100) = result != 0;
        goto LABEL_14;
      case 0xEuLL:
        if ((result & 7) != 2) {
          goto LABEL_219;
        }
        uint64_t v55 = v9;
        uint64_t v56 = v14;
        double v57 = (void *)*v97;
        uint64_t v14 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57[2] + 1, 1, v57);
        }
        unint64_t v59 = v57[2];
        unint64_t v58 = v57[3];
        unint64_t v60 = v59 + 1;
        if (v59 >= v58 >> 1)
        {
          uint64_t v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v58 > 1), v59 + 1, 1, v57);
          unint64_t v60 = v59 + 1;
          double v57 = v96;
        }
        v57[2] = v60;
        v57[v59 + 4] = v12;
        a1[5] = v57;
        uint64_t v61 = ProtobufDecoder.decodeVarint()();
        if (v3)
        {
          LOBYTE(v8) = v14;
          LOBYTE(v14) = v56;
LABEL_224:
          uint64_t v9 = v55;
LABEL_220:
          uint64_t v104 = v101;
          char v105 = v141;
          *(_DWORD *)int v106 = *(_DWORD *)v140;
          *(_DWORD *)&v106[3] = *(_DWORD *)&v140[3];
          uint64_t v107 = v102;
          char v108 = v139;
          char v109 = v99;
          char v110 = v100;
          char v111 = BYTE4(v100);
          char v112 = v98;
          __int16 v113 = v137;
          char v114 = v138;
          double v115 = v16;
          double v116 = v15;
          uint64_t v117 = 0;
          double v118 = v6;
          double v119 = v7;
          double v120 = v17;
          char v121 = BYTE4(v103);
          char v122 = v103;
          int v123 = v135;
          __int16 v124 = v136;
          double v125 = v18;
          double v126 = v19;
          char v127 = v8;
          *(_DWORD *)&v128[3] = *(_DWORD *)&v134[3];
          *(_DWORD *)int64_t v128 = *(_DWORD *)v134;
          uint64_t v129 = v9;
          uint64_t v130 = 2;
          uint64_t v131 = 0;
          uint64_t v132 = 0;
          char v133 = v14;
          return outlined release of TextLayoutProperties((uint64_t)&v104);
        }
        if (v61 < 0)
        {
          __break(1u);
LABEL_226:
          __break(1u);
LABEL_227:
          __break(1u);
LABEL_228:
          __break(1u);
LABEL_229:
          __break(1u);
LABEL_230:
          __break(1u);
LABEL_231:
          __break(1u);
LABEL_232:
          __break(1u);
LABEL_233:
          __break(1u);
LABEL_234:
          __break(1u);
LABEL_235:
          __break(1u);
LABEL_236:
          __break(1u);
LABEL_237:
          __break(1u);
LABEL_238:
          __break(1u);
LABEL_239:
          __break(1u);
LABEL_240:
          __break(1u);
LABEL_241:
          __break(1u);
LABEL_242:
          __break(1u);
LABEL_243:
          __break(1u);
LABEL_244:
          __break(1u);
          __break(1u);
          JUMPOUT(0x245CC070CLL);
        }
        uint64_t v8 = v14;
        unint64_t v62 = a1[1] + v61;
        uint64_t v14 = v56;
        if (v12 < v62)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_224;
        }
        a1[2] = v62;
        ContentTransition.Style.init(from:)((unint64_t)a1, (char *)&v104);
        uint64_t v9 = v55;
        int64_t v63 = (void *)*v97;
        if (!*(void *)(*v97 + 16)) {
          goto LABEL_226;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          uint64_t v64 = v63[2];
          if (!v64) {
            goto LABEL_218;
          }
          goto LABEL_108;
        }
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v63);
        int64_t v63 = (void *)result;
        uint64_t v64 = *(void *)(result + 16);
        if (!v64)
        {
LABEL_218:
          __break(1u);
LABEL_219:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_220;
        }
LABEL_108:
        uint64_t v65 = v64 - 1;
        uint64_t v66 = v63[v65 + 4];
        v63[2] = v65;
        a1[5] = v63;
        a1[2] = v66;
        char v98 = v104;
LABEL_14:
        unint64_t v11 = a1[1];
        unint64_t v12 = a1[2];
        if (v11 < v12) {
          continue;
        }
        char v27 = v141;
        char v10 = v139;
        char v20 = v103;
        char v21 = BYTE4(v103);
        char v24 = v100;
        char v23 = BYTE4(v100);
        uint64_t v26 = v101;
        uint64_t v25 = v102;
        char v22 = v98;
        char v28 = v99;
LABEL_10:
        a1[3] = 0;
        *(_DWORD *)(a2 + 9) = *(_DWORD *)v140;
        *(_DWORD *)(a2 + 12) = *(_DWORD *)&v140[3];
        *(_WORD *)(a2 + 29) = v137;
        *(unsigned char *)(a2 + 31) = v138;
        *(_DWORD *)(a2 + 82) = v135;
        *(_WORD *)(a2 + 86) = v136;
        *(_DWORD *)(a2 + 108) = *(_DWORD *)&v134[3];
        *(_DWORD *)(a2 + 105) = *(_DWORD *)v134;
        *(void *)a2 = v26;
        *(unsigned char *)(a2 + 8) = v27;
        *(void *)(a2 + 16) = v25;
        *(unsigned char *)(a2 + 24) = v10;
        *(unsigned char *)(a2 + 25) = v28;
        *(unsigned char *)(a2 + 26) = v24;
        *(unsigned char *)(a2 + 27) = v23;
        *(unsigned char *)(a2 + 28) = v22;
        *(double *)(a2 + 32) = v16;
        *(double *)(a2 + 40) = v15;
        *(void *)(a2 + 48) = 0;
        *(double *)(a2 + 56) = v6;
        *(double *)(a2 + 64) = v7;
        *(double *)(a2 + 72) = v17;
        *(unsigned char *)(a2 + 80) = v21;
        *(unsigned char *)(a2 + 81) = v20;
        *(double *)(a2 + 88) = v18;
        *(double *)(a2 + 96) = v19;
        *(unsigned char *)(a2 + 104) = v8;
        *(void *)(a2 + 112) = v9;
        *(void *)(a2 + 120) = 2;
        *(void *)(a2 + 128) = 0;
        *(void *)(a2 + 136) = 0;
        *(unsigned char *)(a2 + 144) = v14;
        return result;
      case 0x10uLL:
        if ((result & 7) == 0) {
          goto LABEL_115;
        }
        if ((result & 7) != 2) {
          goto LABEL_219;
        }
        uint64_t v67 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        if (v67 < 0) {
          goto LABEL_232;
        }
        unint64_t v68 = a1[1] + v67;
        if (v12 < v68) {
          goto LABEL_219;
        }
        a1[3] = 128;
        a1[4] = v68;
LABEL_115:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        LOBYTE(v103) = result == 1;
        goto LABEL_14;
      case 0x11uLL:
        if ((result & 7) == 0) {
          goto LABEL_123;
        }
        if ((result & 7) != 2) {
          goto LABEL_219;
        }
        uint64_t v69 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        if (v69 < 0) {
          goto LABEL_233;
        }
        unint64_t v70 = a1[1] + v69;
        if (v12 < v70) {
          goto LABEL_219;
        }
        a1[3] = 136;
        a1[4] = v70;
LABEL_123:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        unsigned int v71 = v14 & 0xFFFFFFFE;
        unsigned int v72 = v14 | 1;
        goto LABEL_11;
      case 0x12uLL:
        if ((result & 7) == 0) {
          goto LABEL_131;
        }
        if ((result & 7) != 2) {
          goto LABEL_219;
        }
        uint64_t v73 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        if (v73 < 0) {
          goto LABEL_234;
        }
        unint64_t v74 = a1[1] + v73;
        if (v12 < v74) {
          goto LABEL_219;
        }
        a1[3] = 144;
        a1[4] = v74;
LABEL_131:
        char v75 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        char v76 = v75;
        uint64_t result = swift_bridgeObjectRelease();
        if (v76 == 2) {
          uint64_t v8 = 2;
        }
        else {
          uint64_t v8 = v76 == 1;
        }
        uint64_t v9 = MEMORY[0x263F8EE78];
        goto LABEL_14;
      case 0x13uLL:
        if ((result & 7) == 0) {
          goto LABEL_142;
        }
        if ((result & 7) != 2) {
          goto LABEL_219;
        }
        uint64_t v77 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        if (v77 < 0) {
          goto LABEL_235;
        }
        unint64_t v78 = a1[1] + v77;
        if (v12 < v78) {
          goto LABEL_219;
        }
        a1[3] = 152;
        a1[4] = v78;
LABEL_142:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        unsigned int v71 = v14 & 0xFFFFFFFD;
        unsigned int v72 = v14 | 2;
LABEL_11:
        if (result) {
          uint64_t v14 = v72;
        }
        else {
          uint64_t v14 = v71;
        }
        goto LABEL_14;
      case 0x14uLL:
        if ((result & 7) == 0) {
          goto LABEL_150;
        }
        if ((result & 7) != 2) {
          goto LABEL_219;
        }
        uint64_t v79 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        if (v79 < 0) {
          goto LABEL_236;
        }
        unint64_t v80 = a1[1] + v79;
        if (v12 < v80) {
          goto LABEL_219;
        }
        a1[3] = 160;
        a1[4] = v80;
LABEL_150:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_220;
        }
        BYTE4(v103) = result != 0;
        goto LABEL_14;
      default:
        switch(result & 7)
        {
          case 0:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_220;
            }
            goto LABEL_14;
          case 1:
            unint64_t v95 = a1[1] + 8;
            goto LABEL_214;
          case 2:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_220;
            }
            if (result < 0) {
              goto LABEL_244;
            }
            unint64_t v95 = a1[1] + result;
LABEL_214:
            if (v12 < v95) {
              goto LABEL_219;
            }
            a1[1] = v95;
            break;
          case 5:
            unint64_t v95 = a1[1] + 4;
            goto LABEL_214;
          default:
            goto LABEL_219;
        }
        goto LABEL_14;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance TextLayoutProperties(void *a1)
{
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance TextLayoutProperties@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TextLayoutProperties.init(from:)(a1, a2);
}

uint64_t closure #1 in NSAttributedString.allFonts()(uint64_t a1)
{
  outlined init with copy of Any?(a1, (uint64_t)&v4);
  if (!v5) {
    return _sypSgWOhTm_5((uint64_t)&v4, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_3);
  }
  outlined init with take of Any(&v4, v6);
  outlined init with copy of Any((uint64_t)v6, (uint64_t)&v4);
  type metadata accessor for CTFontRef(0);
  swift_dynamicCast();
  specialized Set._Variant.insert(_:)(&v3, v2);

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t ResolvedStyledText.layoutProperties.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  long long v3 = *(_OWORD *)(v1 + 96);
  long long v21 = *(_OWORD *)(v1 + 112);
  long long v4 = *(_OWORD *)(v1 + 112);
  long long v5 = *(_OWORD *)(v1 + 144);
  long long v22 = *(_OWORD *)(v1 + 128);
  long long v6 = v22;
  long long v23 = v5;
  long long v7 = *(_OWORD *)(v1 + 64);
  long long v9 = *(_OWORD *)(v1 + 32);
  long long v17 = *(_OWORD *)(v1 + 48);
  long long v8 = v17;
  long long v18 = v7;
  long long v10 = *(_OWORD *)(v1 + 64);
  long long v11 = *(_OWORD *)(v1 + 96);
  long long v19 = *(_OWORD *)(v1 + 80);
  long long v12 = v19;
  long long v20 = v11;
  long long v13 = *(_OWORD *)(v1 + 32);
  v16[0] = *(_OWORD *)(v1 + 16);
  long long v14 = v16[0];
  v16[1] = v13;
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v3;
  char v24 = *(unsigned char *)(v1 + 160);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(v1 + 160);
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v9;
  return outlined retain of TextLayoutProperties((uint64_t)v16);
}

uint64_t ResolvedStyledText.layoutProperties.setter(uint64_t a1)
{
  swift_beginAccess();
  long long v3 = *(_OWORD *)(v1 + 112);
  long long v4 = *(_OWORD *)(v1 + 144);
  v13[7] = *(_OWORD *)(v1 + 128);
  v13[8] = v4;
  char v14 = *(unsigned char *)(v1 + 160);
  long long v5 = *(_OWORD *)(v1 + 64);
  v13[2] = *(_OWORD *)(v1 + 48);
  void v13[3] = v5;
  long long v6 = *(_OWORD *)(v1 + 96);
  v13[4] = *(_OWORD *)(v1 + 80);
  v13[5] = v6;
  v13[6] = v3;
  long long v7 = *(_OWORD *)(v1 + 32);
  v13[0] = *(_OWORD *)(v1 + 16);
  v13[1] = v7;
  long long v8 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v1 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v1 + 128) = v8;
  *(_OWORD *)(v1 + 144) = *(_OWORD *)(a1 + 128);
  *(unsigned char *)(v1 + 160) = *(unsigned char *)(a1 + 144);
  long long v9 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 64) = v9;
  long long v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 96) = v10;
  long long v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 32) = v11;
  return outlined release of TextLayoutProperties((uint64_t)v13);
}

uint64_t (*ResolvedStyledText.layoutProperties.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

double ResolvedStyledText.layoutMargins.getter()
{
  swift_beginAccess();
  return *(double *)(v0 + 168);
}

uint64_t ResolvedStyledText.layoutMargins.setter(double a1, double a2, double a3, double a4)
{
  uint64_t result = swift_beginAccess();
  v4[21] = a1;
  v4[22] = a2;
  v4[23] = a3;
  v4[24] = a4;
  return result;
}

uint64_t (*ResolvedStyledText.layoutMargins.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t ResolvedStyledText.scaleFactorOverride.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 200);
}

uint64_t ResolvedStyledText.scaleFactorOverride.setter(uint64_t a1, char a2)
{
  uint64_t v5 = swift_beginAccess();
  *(void *)(v2 + 200) = a1;
  *(unsigned char *)(v2 + 208) = a2 & 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v5);
}

uint64_t (*ResolvedStyledText.scaleFactorOverride.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return ResolvedStyledText.scaleFactorOverride.modify;
}

uint64_t ResolvedStyledText.scaleFactorOverride.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t))(**(void **)(a1 + 24) + 168))(result);
  }
  return result;
}

Swift::Void __swiftcall ResolvedStyledText.resetCache()()
{
}

void *ResolvedStyledText.storage.getter()
{
  uint64_t v1 = *(void **)(v0 + 216);
  id v2 = v1;
  return v1;
}

double ResolvedStyledText.stylePadding.getter()
{
  return *(double *)(v0 + 224);
}

double ResolvedStyledText.drawingMargins.getter()
{
  return 0.0;
}

uint64_t ResolvedStyledText.isCollapsible.getter()
{
  return *(unsigned __int8 *)(v0 + 258);
}

void ResolvedStyledText.features.getter(_WORD *a1@<X8>)
{
  *a1 = *(_WORD *)(v1 + 260);
}

uint64_t ResolvedStyledText.styles.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ResolvedStyledText.transitions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ResolvedStyledText.maxFontMetrics.getter@<X0>(void *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 344))
  {
    if (*(void *)(v1 + 216))
    {
      uint64_t result = NSAttributedString.maxFontMetrics.getter((uint64_t)v12);
      uint64_t v5 = v12[0];
      uint64_t v4 = v12[1];
      uint64_t v7 = v12[2];
      uint64_t v6 = v12[3];
      uint64_t v8 = v12[4];
      uint64_t v9 = v12[5];
      uint64_t v10 = v12[6];
      uint64_t v11 = v12[7];
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v4 = 0;
      uint64_t v5 = 0;
    }
    *(void *)(v1 + 280) = v5;
    *(void *)(v1 + 288) = v4;
    *(void *)(v1 + 296) = v7;
    *(void *)(v1 + 304) = v6;
    *(void *)(v1 + 312) = v8;
    *(void *)(v1 + 320) = v9;
    *(void *)(v1 + 328) = v10;
    *(void *)(v1 + 336) = v11;
    *(unsigned char *)(v1 + 344) = 0;
  }
  else
  {
    uint64_t v10 = *(void *)(v1 + 328);
    uint64_t v11 = *(void *)(v1 + 336);
    uint64_t v8 = *(void *)(v1 + 312);
    uint64_t v9 = *(void *)(v1 + 320);
    uint64_t v7 = *(void *)(v1 + 296);
    uint64_t v6 = *(void *)(v1 + 304);
    uint64_t v5 = *(void *)(v1 + 280);
    uint64_t v4 = *(void *)(v1 + 288);
  }
  *a1 = v5;
  a1[1] = v4;
  a1[2] = v7;
  a1[3] = v6;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  return result;
}

uint64_t ResolvedStyledText.__allocating_init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, long long *a2, uint64_t a3, __int16 *a4, char a5, __int16 *a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14)
{
  return specialized ResolvedStyledText.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a8, a13, a14);
}

uint64_t ResolvedStyledText.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, long long *a2, uint64_t a3, __int16 *a4, char a5, __int16 *a6, uint64_t a7, double a8, double a9, double a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return specialized ResolvedStyledText.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void ResolvedStyledText.majorAxis.getter()
{
}

void ResolvedStyledText.drawingScale(size:)()
{
}

SwiftUI::Spacing __swiftcall ResolvedStyledText.spacing()()
{
  result.minima._rawuint64_t Value = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void ResolvedStyledText.sizeThatFits(_:)()
{
}

CGSize __swiftcall ResolvedStyledText.size(in:)(CGSize in)
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  result.height = v2;
  result.width = v1;
  return result;
}

void ResolvedStyledText.metrics(in:layoutMargins:)()
{
}

void ResolvedStyledText.size(in:context:)()
{
}

void ResolvedStyledText.explicitAlignment(_:at:)()
{
}

void ResolvedStyledText.linkURL(at:in:)()
{
}

void ResolvedStyledText.draw(in:with:applyingMarginOffsets:containsResolvable:context:renderer:)()
{
}

void ResolvedStyledText.layoutValue(in:with:applyingMarginOffsets:)(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t ResolvedStyledText.resolvingContent(in:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ResolvableStringResolutionContext();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = *(void **)(v1 + 216);
  if (!v7) {
    goto LABEL_9;
  }
  id v8 = v7;
  if (!NSAttributedString.isDynamic.getter()
    || (objc_msgSend(v8, sel_mutableCopy),
        _bridgeAnyObjectToAny(_:)(),
        swift_unknownObjectRelease(),
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString), (swift_dynamicCast() & 1) == 0))
  {

LABEL_9:
    swift_retain();
    return v2;
  }
  id v9 = v56;
  if (one-time initialization token for resolvableTextSegment != -1) {
    swift_once();
  }
  id v10 = objc_msgSend(v56, sel_length, static NSAttributedStringKey.resolvableTextSegment);
  _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(a1, (uint64_t)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v9;
  _s7SwiftUI33ResolvableStringResolutionContextVWObTm_0((uint64_t)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = _s7SwiftUI30ResolvableTextSegmentAttributeO6update_2inySo25NSMutableAttributedStringC_AA0cK17ResolutionContextVtFZyypSg_So8_NSRangeVSpy10ObjectiveC8ObjCBoolVGtXEfU_TA_0;
  *(void *)(v13 + 24) = v12;
  *(void *)&long long v48 = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  *((void *)&v48 + 1) = v13;
  *(void *)&long long v46 = MEMORY[0x263EF8330];
  *((void *)&v46 + 1) = 1107296256;
  *(void *)&long long v47 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *((void *)&v47 + 1) = &block_descriptor_33;
  char v14 = _Block_copy(&v46);
  id v15 = v9;
  swift_retain();
  swift_release();
  objc_msgSend(v15, sel_enumerateAttribute_inRange_options_usingBlock_, v37[0], 0, v10, 2, v14);
  _Block_release(v14);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if ((v14 & 1) == 0)
  {
    swift_beginAccess();
    long long v17 = *(_OWORD *)(v2 + 128);
    long long v18 = *(_OWORD *)(v2 + 96);
    long long v52 = *(_OWORD *)(v2 + 112);
    long long v53 = v17;
    long long v19 = *(_OWORD *)(v2 + 128);
    long long v54 = *(_OWORD *)(v2 + 144);
    long long v20 = *(_OWORD *)(v2 + 64);
    long long v21 = *(_OWORD *)(v2 + 32);
    long long v48 = *(_OWORD *)(v2 + 48);
    long long v49 = v20;
    long long v22 = *(_OWORD *)(v2 + 64);
    long long v23 = *(_OWORD *)(v2 + 96);
    long long v50 = *(_OWORD *)(v2 + 80);
    long long v51 = v23;
    long long v24 = *(_OWORD *)(v2 + 32);
    long long v46 = *(_OWORD *)(v2 + 16);
    long long v47 = v24;
    v44[6] = v52;
    v44[7] = v19;
    v44[8] = *(_OWORD *)(v2 + 144);
    char v55 = *(unsigned char *)(v2 + 160);
    char v45 = *(unsigned char *)(v2 + 160);
    v44[2] = v48;
    v44[3] = v22;
    v44[4] = v50;
    v44[5] = v18;
    v44[0] = v46;
    v44[1] = v21;
    memset(v57, 0, sizeof(v57));
    char v58 = 1;
    double v25 = *(double *)(v2 + 224);
    double v26 = *(double *)(v2 + 232);
    double v27 = *(double *)(v2 + 240);
    double v28 = *(double *)(v2 + 248);
    __int16 v43 = *(_WORD *)(v2 + 256);
    char v29 = *(unsigned char *)(v2 + 258);
    __int16 v42 = *(_WORD *)(v2 + 260);
    memset(v39, 0, sizeof(v39));
    long long v41 = xmmword_24619B530;
    uint64_t v38 = MEMORY[0x263F8EE78];
    *(_OWORD *)uint64_t v37 = *(_OWORD *)(v2 + 264);
    uint64_t v40 = 0;
    swift_beginAccess();
    double v30 = *(double *)(v2 + 200);
    char v31 = *(unsigned char *)(v2 + 208);
    id v32 = v15;
    outlined retain of TextLayoutProperties((uint64_t)&v46);
    uint64_t v2 = specialized static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(v15, v44, (uint64_t)v57, (char *)&v43, v29, &v42, (uint64_t)v39, &v38, v25, v26, v27, v28, v33, v34, v35, v36, v37[0], v37[1], v30,
           v31);

    outlined release of TextLayoutProperties((uint64_t)&v46);
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, long long *a2, uint64_t a3, char *a4, char a5, __int16 *a6, uint64_t a7, uint64_t *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, double a19, char a20)
{
  return specialized static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, *(double *)&a17, a14, a15, a16, a17, a18, a19,
           a20 & 1);
}

uint64_t ResolvedStyledText.description.getter()
{
  uint64_t v1 = *(void **)(v0 + 216);
  if (!v1) {
    return 0;
  }
  id v2 = objc_msgSend(v1, sel_string);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void (*ResolvedStyledText.cgStyleHandler.getter())(uint64_t a1, unint64_t a2)
{
  uint64_t v1 = *(void *)(v0 + 272);
  if (!*(void *)(v1 + 16)) {
    return 0;
  }
  swift_beginAccess();
  char v2 = *(unsigned char *)(v0 + 43);
  char v3 = *(unsigned char *)(v0 + 44);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  *(unsigned char *)(v4 + 24) = v3;
  *(unsigned char *)(v4 + 25) = v2;
  swift_bridgeObjectRetain();
  return partial apply for closure #1 in ResolvedStyledText.cgStyleHandler.getter;
}

void closure #1 in ResolvedStyledText.cgStyleHandler.getter(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, char a5)
{
  if ((a2 & 0x8000000000000000) == 0 && *(void *)(a3 + 16) > a2)
  {
    uint64_t v5 = a3 + 16 * a2;
    uint64_t v6 = *(void *)(v5 + 32);
    unint64_t v7 = *(unsigned int *)(v5 + 40) | ((unint64_t)*(unsigned __int8 *)(v5 + 44) << 32);
    int v8 = *(unsigned __int8 *)(v5 + 45);
    if (*(unsigned char *)(v5 + 45))
    {
      if (v8 == 1)
      {
        if (BYTE4(v7) == 2) {
          char v9 = a5;
        }
        else {
          char v9 = BYTE4(v7) & 1;
        }
        if (v9) {
          uint64_t v10 = 0x100000000;
        }
        else {
          uint64_t v10 = 0;
        }
        outlined copy of ContentTransition.Storage(v6, v7, 1);
        unint64_t v7 = v10 & 0xFFFFFFFF00000000 | v7;
      }
    }
    else
    {
      if (BYTE4(v7) == 3) {
        uint64_t v11 = a4;
      }
      else {
        uint64_t v11 = BYTE4(v7);
      }
      if ((v7 & 0xFF000000) == 0x2000000) {
        char v12 = a5;
      }
      else {
        char v12 = BYTE3(v7) & 1;
      }
      BOOL v13 = (v12 & 1) == 0;
      uint64_t v14 = 0x1000000;
      if (v13) {
        uint64_t v14 = 0;
      }
      unint64_t v7 = v14 & 0xFFFFFFFFFF000000 | v7 & 0xFFFFFF | (v11 << 32);
    }
    id v15 = ContentTransition.rbTransition.getter();
    RBDrawingStateSetTransition();

    if (v8)
    {
      outlined consume of ContentTransition.Storage(v6, v7, v8);
    }
    else if ((v6 & 0xC100000000) == 0x4100000000)
    {
      Class isa = Float._bridgeToObjectiveC()().super.super.isa;
      RBDrawingStateSetAttribute();
    }
  }
}

uint64_t ResolvedStyledText.deinit()
{
  long long v1 = *(_OWORD *)(v0 + 128);
  v6[6] = *(_OWORD *)(v0 + 112);
  v6[7] = v1;
  v6[8] = *(_OWORD *)(v0 + 144);
  char v7 = *(unsigned char *)(v0 + 160);
  long long v2 = *(_OWORD *)(v0 + 64);
  _OWORD v6[2] = *(_OWORD *)(v0 + 48);
  v6[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 96);
  v6[4] = *(_OWORD *)(v0 + 80);
  v6[5] = v3;
  long long v4 = *(_OWORD *)(v0 + 32);
  v6[0] = *(_OWORD *)(v0 + 16);
  v6[1] = v4;
  outlined release of TextLayoutProperties((uint64_t)v6);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ResolvedStyledText.__deallocating_deinit()
{
  long long v1 = *(_OWORD *)(v0 + 128);
  v6[6] = *(_OWORD *)(v0 + 112);
  v6[7] = v1;
  v6[8] = *(_OWORD *)(v0 + 144);
  char v7 = *(unsigned char *)(v0 + 160);
  long long v2 = *(_OWORD *)(v0 + 64);
  _OWORD v6[2] = *(_OWORD *)(v0 + 48);
  v6[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 96);
  v6[4] = *(_OWORD *)(v0 + 80);
  v6[5] = v3;
  long long v4 = *(_OWORD *)(v0 + 32);
  v6[0] = *(_OWORD *)(v0 + 16);
  v6[1] = v4;
  outlined release of TextLayoutProperties((uint64_t)v6);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvedStyledText()
{
  long long v1 = *(void **)(*(void *)v0 + 216);
  if (!v1) {
    return 0;
  }
  id v2 = objc_msgSend(v1, sel_string);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

Swift::tuple_UInt_optional_CGSize __swiftcall ResolvedStyledText.textSizeCacheMetrics(in:)(CGSize in)
{
  memset(v10, 0, sizeof(v10));
  char v11 = 1;
  (*(void (**)(void *__return_ptr, _OWORD *, unsigned __int128, unsigned __int128))(*(void *)v1 + 256))(v8, v10, __PAIR128__(v2, *(unint64_t *)&in.width), __PAIR128__(v3, *(unint64_t *)&in.height));
  Swift::UInt v4 = v8[7];
  Swift::Bool v5 = v9;
  double v6 = *(double *)v8;
  double v7 = *(double *)&v8[1];
  result._1.height = v7;
  result._1.width = v6;
  result._0.value = v4;
  result._0.is_nil = v5;
  return result;
}

double ResolvedStyledText.linkURLMetrics(in:layoutMargins:)(double a1, double a2, double a3, double a4, double a5, double a6)
{
  *(double *)Swift::Bool v9 = a3;
  *(double *)&v9[1] = a4;
  *(double *)&uint64_t v9[2] = a5;
  *(double *)&void v9[3] = a6;
  char v10 = 0;
  (*(void (**)(void *__return_ptr, void *))(*(void *)v6 + 256))(v8, v9);
  return *(double *)&v8[2];
}

void CodableResolvedStyledText.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x270FA5388](v5 - 8);
  double v7 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  char v10 = (char *)&v94 - v9;
  char v11 = *(void **)(a2 + 216);
  if (!v11
    || (id v12 = v11,
        specialized ProtobufEncoder.messageField<A>(_:_:)(1, (uint64_t)v12),
        v12,
        !v2))
  {
    if ((double v13 = *(double *)(a2 + 224),
          double v14 = *(double *)(a2 + 232),
          double v15 = *(double *)(a2 + 240),
          double v16 = *(double *)(a2 + 248),
          v13 == 0.0)
      && v14 == 0.0
      && v15 == 0.0
      && v16 == 0.0
      || (ProtobufEncoder.encodeVarint(_:)(0x12uLL),
          specialized ProtobufEncoder.encodeMessage<A>(_:)(v13, v14, v15, v16),
          !v2))
    {
      if ((swift_beginAccess(),
            double v17 = *(double *)(a2 + 168),
            double v18 = *(double *)(a2 + 176),
            double v19 = *(double *)(a2 + 184),
            double v20 = *(double *)(a2 + 192),
            v17 == 0.0)
        && v18 == 0.0
        && v19 == 0.0
        && v20 == 0.0
        || (ProtobufEncoder.encodeVarint(_:)(0x1AuLL),
            specialized ProtobufEncoder.encodeMessage<A>(_:)(v17, v18, v19, v20),
            !v2))
      {
        if (!v11
          || (NSAttributedString.resolvableAttributeConfiguration.getter((uint64_t)v7),
              _s7SwiftUI33ResolvableStringResolutionContextVWObTm_0((uint64_t)v7, (uint64_t)v10, type metadata accessor for ResolvableAttributeConfiguration), specialized ProtobufEncoder.codableField<A>(_:_:)(4, (uint64_t)v10), _s10Foundation4DateVSgWOhTm_0((uint64_t)v10, type metadata accessor for ResolvableAttributeConfiguration), !v2))
        {
          swift_beginAccess();
          long long v21 = *(_OWORD *)(a2 + 128);
          v103[6] = *(_OWORD *)(a2 + 112);
          v103[7] = v21;
          v103[8] = *(_OWORD *)(a2 + 144);
          char v104 = *(unsigned char *)(a2 + 160);
          long long v22 = *(_OWORD *)(a2 + 64);
          v103[2] = *(_OWORD *)(a2 + 48);
          v103[3] = v22;
          long long v23 = *(_OWORD *)(a2 + 96);
          v103[4] = *(_OWORD *)(a2 + 80);
          v103[5] = v23;
          long long v24 = *(_OWORD *)(a2 + 32);
          v103[0] = *(_OWORD *)(a2 + 16);
          v103[1] = v24;
          outlined retain of TextLayoutProperties((uint64_t)v103);
          specialized ProtobufEncoder.messageField<A>(_:_:)(5);
          outlined release of TextLayoutProperties((uint64_t)v103);
          if (!v2)
          {
            uint64_t v25 = *(void *)(*(void *)(a2 + 272) + 16);
            if (v25)
            {
              uint64_t v94 = a2;
              uint64_t v95 = swift_bridgeObjectRetain();
              double v26 = (unsigned __int8 *)(v95 + 46);
              while (1)
              {
                uint64_t v27 = *(void *)(v26 - 14);
                unint64_t v28 = *(unsigned int *)(v26 - 6) | ((unint64_t)*(v26 - 2) << 32);
                int v29 = *(v26 - 1);
                int v30 = *v26;
                int64_t v31 = a1[1];
                int64_t v32 = a1[2];
                unint64_t v105 = v28;
                uint64_t v98 = v25;
                int v99 = v30;
                if (v31 >= v32)
                {
                  int64_t v75 = v31 + 1;
                  if (__OFADD__(v31, 1)) {
                    goto LABEL_134;
                  }
                  if (v32 < v75)
                  {
                    outlined copy of ContentTransition.Storage(v27, v28, v29);
                    char v76 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v75);
                  }
                  else
                  {
                    a1[1] = v75;
                    char v76 = (unsigned char *)(*a1 + v31);
                    outlined copy of ContentTransition.Storage(v27, v28, v29);
                  }
                  int v34 = v29;
                  uint64_t v33 = v27;
                  *char v76 = 50;
                }
                else
                {
                  *(unsigned char *)(*a1 + v31) = 50;
                  a1[1] = v31 + 1;
                  uint64_t v33 = v27;
                  int v34 = v29;
                  outlined copy of ContentTransition.Storage(v27, v28, v29);
                }
                uint64_t v35 = a1[1];
                double v36 = (void *)a1[3];
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  double v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
                }
                unint64_t v38 = v36[2];
                unint64_t v37 = v36[3];
                if (v38 >= v37 >> 1) {
                  double v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v36);
                }
                v36[2] = v38 + 1;
                v36[v38 + 4] = v35;
                a1[3] = v36;
                int64_t v39 = v35 + 1;
                if (__OFADD__(v35, 1)) {
                  break;
                }
                a1[1] = v39;
                int v97 = v34;
                if (v34)
                {
                  uint64_t v40 = v105;
                  if (v34 == 1)
                  {
                    int64_t v41 = a1[2];
                    if (v39 >= v41)
                    {
                      int64_t v79 = v35 + 2;
                      if (__OFADD__(v39, 1)) {
                        goto LABEL_137;
                      }
                      if (v41 < v79)
                      {
                        outlined copy of ContentTransition.Storage(v33, v105, 1);
                        unint64_t v80 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v79);
                      }
                      else
                      {
                        a1[1] = v79;
                        unint64_t v80 = (unsigned char *)(*a1 + v39);
                        outlined copy of ContentTransition.Storage(v33, v40, 1);
                      }
                      *unint64_t v80 = 18;
                    }
                    else
                    {
                      *(unsigned char *)(*a1 + v39) = 18;
                      a1[1] = v35 + 2;
                      outlined copy of ContentTransition.Storage(v33, v40, 1);
                    }
                    uint64_t v96 = v33;
                    uint64_t v100 = v33;
                    int v101 = v40;
                    char v102 = BYTE4(v40);
                    uint64_t v42 = a1[1];
                    __int16 v43 = (void *)a1[3];
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      __int16 v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
                    }
                    unint64_t v45 = v43[2];
                    unint64_t v44 = v43[3];
                    if (v45 >= v44 >> 1) {
                      __int16 v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v44 > 1), v45 + 1, 1, v43);
                    }
                    _OWORD v43[2] = v45 + 1;
                    v43[v45 + 4] = v42;
                    a1[3] = v43;
                    if (__OFADD__(v42, 1)) {
                      goto LABEL_130;
                    }
                    a1[1] = v42 + 1;
                    ContentTransition.CustomTransition.encode(to:)(a1);
                    ProtobufEncoder.endLengthDelimited()();
                    uint64_t v33 = v96;
                    uint64_t v46 = v105;
                    outlined consume of ContentTransition.Storage(v96, v105, 1);
                  }
                  else
                  {
                    int64_t v52 = a1[2];
                    if (v39 >= v52)
                    {
                      int64_t v83 = v35 + 2;
                      if (__OFADD__(v39, 1)) {
                        goto LABEL_139;
                      }
                      if (v52 < v83)
                      {
                        float v84 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v83);
                      }
                      else
                      {
                        a1[1] = v83;
                        float v84 = (unsigned char *)(*a1 + v39);
                      }
                      *float v84 = 34;
                      uint64_t v53 = a1[1];
                    }
                    else
                    {
                      *(unsigned char *)(*a1 + v39) = 34;
                      uint64_t v53 = v35 + 2;
                      a1[1] = v39 + 1;
                    }
                    long long v54 = (void *)a1[3];
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      long long v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54[2] + 1, 1, v54);
                    }
                    unint64_t v56 = v54[2];
                    unint64_t v55 = v54[3];
                    if (v56 >= v55 >> 1) {
                      long long v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v55 > 1), v56 + 1, 1, v54);
                    }
                    v54[2] = v56 + 1;
                    v54[v56 + 4] = v53;
                    a1[3] = v54;
                    int64_t v57 = v53 + 1;
                    if (__OFADD__(v53, 1)) {
                      goto LABEL_132;
                    }
                    a1[1] = v57;
                    Swift::UInt v58 = v33;
                    uint64_t v46 = v105;
                    if (v33)
                    {
                      int64_t v59 = a1[2];
                      if (v57 >= v59)
                      {
                        int64_t v85 = v57 + 1;
                        if (__OFADD__(v57, 1)) {
                          goto LABEL_140;
                        }
                        if (v59 < v85)
                        {
                          float v86 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v85);
                        }
                        else
                        {
                          a1[1] = v85;
                          float v86 = (unsigned char *)(*a1 + v57);
                        }
                        unsigned char *v86 = 8;
                        Swift::UInt v58 = v33;
                        uint64_t v46 = v105;
                      }
                      else
                      {
                        *(unsigned char *)(*a1 + v57) = 8;
                        a1[1] = v57 + 1;
                      }
                      ProtobufEncoder.encodeVarint(_:)(v58);
                    }
                    if ((v33 & 0x100000000) == 0)
                    {
                      int64_t v60 = a1[1];
                      int64_t v61 = a1[2];
                      if (v60 >= v61)
                      {
                        int64_t v87 = v60 + 1;
                        if (__OFADD__(v60, 1)) {
                          goto LABEL_141;
                        }
                        if (v61 < v87)
                        {
                          float v88 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v87);
                        }
                        else
                        {
                          a1[1] = v87;
                          float v88 = (unsigned char *)(*a1 + v60);
                        }
                        unsigned char *v88 = 16;
                        int64_t v62 = a1[1];
                        uint64_t v46 = v105;
                      }
                      else
                      {
                        *(unsigned char *)(*a1 + v60) = 16;
                        int64_t v62 = v60 + 1;
                        a1[1] = v62;
                      }
                      int64_t v63 = a1[2];
                      if (v62 >= v63)
                      {
                        int64_t v89 = v62 + 1;
                        if (__OFADD__(v62, 1)) {
                          goto LABEL_142;
                        }
                        if (v63 < v89)
                        {
                          float v90 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v89);
                        }
                        else
                        {
                          a1[1] = v89;
                          float v90 = (unsigned char *)(*a1 + v62);
                        }
                        unsigned char *v90 = 0;
                        uint64_t v46 = v105;
                      }
                      else
                      {
                        *(unsigned char *)(*a1 + v62) = 0;
                        a1[1] = v62 + 1;
                      }
                    }
                    if (*(float *)&v46 != 1.0)
                    {
                      int64_t v64 = a1[1];
                      int64_t v65 = a1[2];
                      if (v64 >= v65)
                      {
                        int64_t v91 = v64 + 1;
                        if (__OFADD__(v64, 1)) {
                          goto LABEL_143;
                        }
                        if (v65 < v91)
                        {
                          float v92 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v91);
                        }
                        else
                        {
                          a1[1] = v91;
                          float v92 = (unsigned char *)(*a1 + v64);
                        }
                        unsigned char *v92 = 29;
                        int64_t v66 = a1[1];
                        uint64_t v46 = v105;
                        int64_t v67 = v66 + 4;
                        if (__OFADD__(v66, 4)) {
                          goto LABEL_133;
                        }
                      }
                      else
                      {
                        *(unsigned char *)(*a1 + v64) = 29;
                        int64_t v66 = v64 + 1;
                        a1[1] = v66;
                        int64_t v67 = v66 + 4;
                        if (__OFADD__(v66, 4)) {
                          goto LABEL_133;
                        }
                      }
                      if (a1[2] < v67)
                      {
                        unint64_t v68 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v67);
                      }
                      else
                      {
                        a1[1] = v67;
                        unint64_t v68 = (_DWORD *)(*a1 + v66);
                      }
                      _DWORD *v68 = v46;
                    }
                    ProtobufEncoder.endLengthDelimited()();
                  }
                }
                else
                {
                  int64_t v47 = a1[2];
                  if (v39 >= v47)
                  {
                    int64_t v81 = v35 + 2;
                    if (__OFADD__(v39, 1)) {
                      goto LABEL_138;
                    }
                    if (v47 < v81)
                    {
                      float v82 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v81);
                    }
                    else
                    {
                      a1[1] = v81;
                      float v82 = (unsigned char *)(*a1 + v39);
                    }
                    unsigned char *v82 = 10;
                    uint64_t v48 = a1[1];
                  }
                  else
                  {
                    *(unsigned char *)(*a1 + v39) = 10;
                    uint64_t v48 = v35 + 2;
                    a1[1] = v39 + 1;
                  }
                  uint64_t v100 = v33;
                  int v101 = v105;
                  char v102 = BYTE4(v105);
                  long long v49 = (void *)a1[3];
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    long long v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
                  }
                  unint64_t v51 = v49[2];
                  unint64_t v50 = v49[3];
                  if (v51 >= v50 >> 1) {
                    long long v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v49);
                  }
                  v49[2] = v51 + 1;
                  v49[v51 + 4] = v48;
                  a1[3] = v49;
                  if (__OFADD__(v48, 1)) {
                    goto LABEL_131;
                  }
                  a1[1] = v48 + 1;
                  ContentTransition.NamedTransition.encode(to:)((uint64_t)a1);
                  ProtobufEncoder.endLengthDelimited()();
                  uint64_t v46 = v105;
                }
                if (v99)
                {
                  int64_t v69 = a1[1];
                  int64_t v70 = a1[2];
                  if (v69 >= v70)
                  {
                    int64_t v77 = v69 + 1;
                    if (__OFADD__(v69, 1)) {
                      goto LABEL_136;
                    }
                    if (v70 < v77)
                    {
                      unint64_t v78 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v77);
                    }
                    else
                    {
                      a1[1] = v77;
                      unint64_t v78 = (unsigned char *)(*a1 + v69);
                    }
                    *unint64_t v78 = 24;
                    int64_t v71 = a1[1];
                  }
                  else
                  {
                    *(unsigned char *)(*a1 + v69) = 24;
                    int64_t v71 = v69 + 1;
                    a1[1] = v71;
                  }
                  int64_t v72 = a1[2];
                  if (v71 < v72)
                  {
                    *(unsigned char *)(*a1 + v71) = 1;
                    a1[1] = v71 + 1;
                  }
                  else
                  {
                    int64_t v73 = v71 + 1;
                    if (__OFADD__(v71, 1)) {
                      goto LABEL_135;
                    }
                    if (v72 < v73)
                    {
                      unint64_t v74 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v73);
                    }
                    else
                    {
                      a1[1] = v73;
                      unint64_t v74 = (unsigned char *)(*a1 + v71);
                    }
                    *unint64_t v74 = 1;
                  }
                }
                v26 += 16;
                ProtobufEncoder.endLengthDelimited()();
                outlined consume of ContentTransition.Storage(v33, v46, v97);
                uint64_t v25 = v98 - 1;
                if (v98 == 1)
                {
                  swift_bridgeObjectRelease();
                  a2 = v94;
                  goto LABEL_126;
                }
              }
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
            }
            else
            {
LABEL_126:
              Swift::UInt v93 = *(unsigned __int16 *)(a2 + 260);
              if (v93)
              {
                ProtobufEncoder.encodeVarint(_:)(0x38uLL);
                ProtobufEncoder.encodeVarint(_:)(v93);
              }
            }
          }
        }
      }
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableResolvedStyledText(void *a1)
{
  CodableResolvedStyledText.encode(to:)(a1, *v1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableResolvedStyledText@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = specialized CodableResolvedStyledText.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t ResolvedStyledText.firstBaseline(in:)(double a1, double a2)
{
  if (one-time initialization token for firstTextBaseline != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(uint64_t, double, double))(*(void *)v2 + 272))(static VerticalAlignment.firstTextBaseline, a1, a2);
}

uint64_t ResolvedStyledText.lastBaseline(in:)(double a1, double a2)
{
  if (one-time initialization token for lastTextBaseline != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(uint64_t, double, double))(*(void *)v2 + 272))(static VerticalAlignment.lastTextBaseline, a1, a2);
}

CGSize __swiftcall ResolvedStyledText.frameOffset()()
{
  double v1 = (*(double (**)(void))(*(void *)v0 + 176))();
  double v3 = v2;
  swift_beginAccess();
  double v4 = *(double *)(v0 + 168);
  double v5 = -(v3 - *(double *)(v0 + 176));
  swift_beginAccess();
  if ((*(unsigned char *)(v0 + 43) & 1) == 0) {
    double v5 = v5 - *(double *)(v0 + 104);
  }
  double v6 = -(v1 - v4);
  double v7 = v5;
  result.height = v6;
  result.width = v7;
  return result;
}

uint64_t property wrapper backing initializer of TextDrawingContext.ctx@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for AtomicBuffer<NSStringDrawingContext>();
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *a2 = result;
  return result;
}

unint64_t closure #2 in closure #1 in TextDrawingContext.withStringDrawingContext<A>(minScaleFactor:lineLimit:kitCache:useNSLayoutManager:do:)(unint64_t a1)
{
  if (!a1) {
    a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  unint64_t v5 = a1;
  uint64_t v1 = one-time initialization token for kitForegroundColor;
  swift_bridgeObjectRetain();
  if (v1 != -1) {
    swift_once();
  }
  id v2 = (id)static NSAttributedStringKey.kitForegroundColor;
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v2, v4);

  _sypSgWOhTm_5((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_3);
  return v5;
}

uint64_t TextDrawingContext.deinit()
{
  swift_release();
  return v0;
}

uint64_t TextDrawingContext.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

void *protocol witness for _DisplayList_ViewFactory.makeView() in conformance DynamicTextViewFactory()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  type metadata accessor for InterfaceIdiomBox<PhoneInterfaceIdiom>(0, &lazy cache variable for type metadata for AnyViewStorage<DynamicTextView>, (uint64_t)&type metadata for DynamicTextView, (uint64_t)&protocol witness table for DynamicTextView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnyViewStorage);
  double v4 = (void *)swift_allocObject();
  _OWORD v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  swift_retain();
  return v4;
}

void protocol witness for _DisplayList_ViewFactory.identity.getter in conformance DynamicTextViewFactory(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 24);
}

ValueMetadata *protocol witness for AnyViewFactory.viewType.getter in conformance DynamicTextViewFactory()
{
  return &type metadata for DynamicTextView;
}

double static DynamicTextView._makeView(view:inputs:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  long long v49 = a3;
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v46 = type metadata accessor for DynamicTextView.DynamicTextEnvironment(0);
  MEMORY[0x270FA5388](v46);
  double v6 = &v42[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for DynamicTextView.DynamicTextFilter(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unsigned int v10 = *a1;
  uint64_t v11 = *(void *)a2;
  int v12 = *(_DWORD *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 16);
  int v14 = *(_DWORD *)(a2 + 24);
  int v55 = *(_DWORD *)(a2 + 28);
  int v56 = v14;
  int v57 = *(_DWORD *)(a2 + 32);
  int v58 = v12;
  int v48 = *(_DWORD *)(a2 + 36);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 48);
  int v17 = *(_DWORD *)(a2 + 56);
  int v53 = *(_DWORD *)(a2 + 60);
  int v54 = v17;
  LODWORD(v8) = *(_DWORD *)(a2 + 64);
  *(void *)&long long v18 = *(void *)(a2 + 68);
  long long v51 = v18;
  int v47 = *(_DWORD *)(a2 + 76);
  int v52 = *(_DWORD *)(a2 + 80);
  int v50 = v10;
  *(void *)&long long v61 = __PAIR64__(v8, v10);
  int v43 = v8;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type DynamicTextView.DynamicTextFrame and conformance DynamicTextView.DynamicTextFrame();
  Attribute.init<A>(body:value:flags:update:)();
  swift_beginAccess();
  int v45 = *(_DWORD *)(v13 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v19 = specialized find<A>(_:key:)(v11);
  if (v19) {
    *(void *)&long long v20 = *(void *)(v19 + 72);
  }
  else {
    long long v20 = 0uLL;
  }
  long long v44 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  *((void *)v9 + 3) = 0;
  type metadata accessor for PropertyList.Tracker();
  uint64_t v22 = swift_allocObject();
  _sypSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v23 = swift_allocObject();
  *(_DWORD *)(v23 + 16) = 0;
  uint64_t v24 = MEMORY[0x263F8EE80];
  *(void *)(v23 + 24) = 0;
  *(void *)(v23 + 32) = v24;
  uint64_t v25 = MEMORY[0x263F8EE78];
  *(void *)(v23 + 40) = v24;
  *(void *)(v23 + 48) = v25;
  *(unsigned char *)(v23 + 56) = 0;
  *(void *)(v22 + 16) = v23;
  *((void *)v9 + 4) = v22;
  *((void *)v9 + 5) = 0;
  static Date.distantPast.getter();
  *(_DWORD *)uint64_t v9 = v45;
  *(void *)(v9 + 4) = v44;
  *((_DWORD *)v9 + 3) = v58;
  *((_DWORD *)v9 + 4) = OffsetAttribute2;
  *((_DWORD *)v9 + 5) = v50;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for DynamicTextView.DynamicTextFilter.Value(0);
  lazy protocol witness table accessor for type ResolvedTextFilter and conformance ResolvedTextFilter(&lazy protocol witness table cache variable for type DynamicTextView.DynamicTextFilter and conformance DynamicTextView.DynamicTextFilter, (void (*)(uint64_t))type metadata accessor for DynamicTextView.DynamicTextFilter);
  int v50 = Attribute.init<A>(body:value:flags:update:)();
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v9, type metadata accessor for DynamicTextView.DynamicTextFilter);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v45 = AGGraphCreateOffsetAttribute2();
  LODWORD(v44) = AGGraphCreateOffsetAttribute2();
  LODWORD(v22) = *(_DWORD *)(v13 + 16);
  type metadata accessor for Date();
  int v26 = AGGraphCreateOffsetAttribute2();
  static Date.distantPast.getter();
  int v27 = v55;
  *double v6 = v22;
  v6[1] = v27;
  _OWORD v6[2] = v26;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ResolvedTextFilter and conformance ResolvedTextFilter(&lazy protocol witness table cache variable for type DynamicTextView.DynamicTextEnvironment and conformance DynamicTextView.DynamicTextEnvironment, (void (*)(uint64_t))type metadata accessor for DynamicTextView.DynamicTextEnvironment);
  int v28 = Attribute.init<A>(body:value:flags:update:)();
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v6, type metadata accessor for DynamicTextView.DynamicTextEnvironment);
  uint64_t v29 = MEMORY[0x263F8EE78];
  unint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  _sypSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v31 = swift_allocObject();
  *(_DWORD *)(v31 + 16) = v28;
  *(void *)(v31 + 24) = v29;
  *(_OWORD *)(v31 + 32) = 0u;
  *(_OWORD *)(v31 + 48) = 0u;
  *(_OWORD *)(v31 + 64) = 0u;
  *(_WORD *)(v31 + 80) = 256;
  *(void *)(v31 + 88) = v30;
  swift_release();
  int v32 = v57 | 0x38;
  unsigned int v59 = AGGraphCreateOffsetAttribute2();
  *(void *)&long long v61 = v11;
  DWORD2(v61) = v58;
  uint64_t v62 = v31;
  int v63 = v56;
  int v64 = v27;
  int v33 = v48;
  int v65 = v32;
  int v66 = v48;
  uint64_t v67 = v15;
  uint64_t v68 = v16;
  int v69 = v54;
  int v70 = v53;
  int v71 = v45;
  unint64_t v72 = __PAIR64__(v44, v51);
  int v34 = v47;
  int v73 = v47;
  int v74 = v52;
  static StyledTextContentView._makeView(view:inputs:)(&v59, &v61, &v60);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v35 = specialized find<A>(_:key:)(v11);
  if (v35)
  {
    uint64_t v36 = *(void *)(v35 + 72);
    uint64_t v37 = *(void *)(v35 + 80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    uint64_t v38 = swift_release_n();
    if (v36)
    {
      DWORD2(v61) = v58;
      *(void *)&long long v61 = v11;
      uint64_t v62 = v13;
      int v63 = v56;
      int v64 = v55;
      int v65 = v57;
      int v66 = v33;
      uint64_t v67 = v15;
      uint64_t v68 = v16;
      int v69 = v54;
      int v70 = v53;
      int v71 = v43;
      unint64_t v72 = v51;
      int v73 = v34;
      int v74 = v52;
      double v39 = MEMORY[0x270FA5388](v38);
      *(_DWORD *)&v42[-16] = v50;
      (*(void (**)(long long *, uint64_t (*)(), double))(v37 + 8))(&v61, partial apply for implicit closure #1 in static DynamicTextView._makeView(view:inputs:), v39);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  uint64_t v40 = v49;
  void *v49 = v60;
  double result = *((double *)&v60 + 1);
  v40[1] = *((void *)&v60 + 1);
  return result;
}

uint64_t DynamicTextView.DynamicTextFilter.textManager.getter()
{
  if (*(void *)(v0 + 24))
  {
    uint64_t v1 = *(void *)(v0 + 24);
  }
  else
  {
    uint64_t v1 = DynamicTextView.DynamicTextFilter.makeTextManager()();
    *(void *)(v0 + 24) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t DynamicTextView.DynamicTextFilter.makeTextManager()()
{
  type metadata accessor for Date?(0);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = &v20[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for ResolvableStringResolutionContext();
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v7 = *Value;
  uint64_t v8 = Value[1];
  uint64_t v9 = Value[2];
  unsigned int v10 = (uint64_t *)AGGraphGetValue();
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v5, 1, 1, v13);
  int v14 = &v5[*(int *)(v3 + 24)];
  *(void *)int v14 = 0;
  char v14[8] = 1;
  swift_retain_n();
  if (v11)
  {
    swift_retain_n();
    swift_retain();
    specialized PropertyList.Tracker.value<A>(_:for:)(v12, (uint64_t)v2);
  }
  else
  {
    swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v2);
  }
  swift_release_n();
  swift_release_n();
  outlined assign with take of ResolvedTextHelper.NextUpdate((uint64_t)v2, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Date?);
  uint64_t v15 = (uint64_t *)&v5[*(int *)(v3 + 20)];
  *uint64_t v15 = v12;
  v15[1] = v11;
  *(void *)int v14 = 0;
  char v14[8] = 1;
  type metadata accessor for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>(0, &lazy cache variable for type metadata for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>, (uint64_t (*)(void, void *))type metadata accessor for SizeFittingTextCache);
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = MEMORY[0x263F8EE78];
  *(void *)(v16 + 16) = 10;
  *(void *)(v16 + 24) = v17;
  *(unsigned char *)(v16 + 32) = 0;
  type metadata accessor for _ContiguousArrayStorage<SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry>();
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2461B9DC0;
  *(void *)(v18 + 32) = v7;
  *(void *)(v18 + 40) = v8;
  *(void *)(v18 + 48) = v9;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(unsigned char *)(v18 + 104) = 0;
  *(void *)(v16 + 40) = v18;
  *(_WORD *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_WORD *)(v16 + 88) = 256;
  _s7SwiftUI33ResolvableStringResolutionContextVWObTm_0((uint64_t)v5, v16 + *(void *)(*(void *)v16 + 144), (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
  return v16;
}

uint64_t DynamicTextView.DynamicTextFilter.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v132 = *MEMORY[0x263EF8340];
  uint64_t v121 = type metadata accessor for DynamicTextView.DynamicTextFilter.Value(0);
  MEMORY[0x270FA5388](v121);
  double v120 = (char *)&v108 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for ResolvableStringResolutionContext();
  MEMORY[0x270FA5388](v113);
  char v114 = (char *)&v108 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v119 = (uint64_t)&v108 - v5;
  type metadata accessor for Date?(0);
  uint64_t v117 = v6;
  MEMORY[0x270FA5388](v6);
  char v112 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v110 = (uint64_t)&v108 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v111 = (uint64_t)&v108 - v11;
  MEMORY[0x270FA5388](v12);
  double v118 = (char *)&v108 - v13;
  MEMORY[0x270FA5388](v14);
  char v122 = (void (*)(char *, char *, uint64_t))((char *)&v108 - v15);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v108 - v17;
  MEMORY[0x270FA5388](v19);
  long long v21 = (char *)&v108 - v20;
  uint64_t v115 = 0;
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v127 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  double v116 = (void (*)(char *, uint64_t))((char *)&v108 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v24);
  int v26 = (char *)&v108 - v25;
  MEMORY[0x270FA5388](v27);
  int v123 = (char *)&v108 - v28;
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)&v108 - v30;
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  char v34 = v33;
  uint64_t v36 = *Value;
  uint64_t v35 = Value[1];
  uint64_t v37 = *(void *)AGGraphGetValue();
  uint64_t v124 = v35;
  uint64_t v125 = v36;
  uint64_t v126 = v37;
  if (v38)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    char v39 = 1;
    if (!*(void *)(v37 + 216))
    {
LABEL_14:
      uint64_t v46 = type metadata accessor for DynamicTextView.DynamicTextFilter(0);
      uint64_t v44 = v127;
      (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v31, v1 + *(int *)(v46 + 48), v22);
      int v47 = 0;
      if ((v39 & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
  }
  else if (v34)
  {
    swift_retain();
    uint64_t v40 = v126;
    swift_retain();
    uint64_t v41 = swift_retain_n();
    char v39 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v41);
    uint64_t v37 = v40;
    swift_release();
    if (!*(void *)(v40 + 216)) {
      goto LABEL_14;
    }
  }
  else
  {
    swift_retain();
    uint64_t v37 = v126;
    swift_retain();
    swift_retain();
    char v39 = 0;
    if (!*(void *)(v37 + 216)) {
      goto LABEL_14;
    }
  }
  swift_retain();
  BOOL v42 = NSAttributedString.isDynamic.getter();
  swift_release();
  if (!v42) {
    goto LABEL_14;
  }
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(WeakValue, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for Date?);
    _s7SwiftUI33ResolvableStringResolutionContextVWObTm_0((uint64_t)v21, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Date?);
    uint64_t v44 = v127;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48))(v18, 1, v22) != 1) {
      goto LABEL_61;
    }
    _s10Foundation4DateVSgWOhTm_0((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Date?);
  }
  if (*(double *)AGGraphGetValue() >= *(double *)(v1 + 40))
  {
    uint64_t v44 = v127;
    if (v124)
    {
      uint64_t v104 = v125;
      swift_retain_n();
      swift_retain_n();
      unint64_t v105 = v122;
      specialized PropertyList.Tracker.value<A>(_:for:)(v104, (uint64_t)v122);
    }
    else
    {
      uint64_t v106 = swift_retain_n();
      unint64_t v105 = v122;
      uint64_t v107 = v115;
      specialized closure #1 in PropertyList.subscript.getter(v106, (uint64_t)v122);
      uint64_t v115 = v107;
      uint64_t v37 = v126;
    }
    swift_release_n();
    swift_release_n();
    if ((*(unsigned int (**)(void, uint64_t, uint64_t))(v44 + 48))(v105, 1, v22) == 1)
    {
      uint64_t v18 = v123;
      static Date.now.getter();
      _s10Foundation4DateVSgWOhTm_0((uint64_t)v105, (uint64_t (*)(void))type metadata accessor for Date?);
    }
    else
    {
      uint64_t v18 = v123;
      (*(void (**)(char *, void, uint64_t))(v44 + 32))(v123, v105, v22);
    }
  }
  else
  {
    uint64_t v45 = type metadata accessor for DynamicTextView.DynamicTextFilter(0);
    uint64_t v44 = v127;
    uint64_t v18 = v123;
    (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v123, v1 + *(int *)(v45 + 48), v22);
  }
LABEL_61:
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v31, v18, v22);
  int v47 = 1;
  if (v39)
  {
LABEL_15:
    uint64_t v48 = DynamicTextView.DynamicTextFilter.makeTextManager()();
    swift_release();
    *(void *)(v1 + 24) = v48;
  }
LABEL_16:
  uint64_t v49 = v44;
  int v50 = (char *)(v44 + 16);
  long long v51 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v51(v26, v31, v22);
  char v122 = v51;
  int v123 = v50;
  if (v39)
  {
    int v52 = *(void (**)(char *, uint64_t))(v49 + 8);
    v52(v26, v22);
LABEL_22:
    uint64_t v58 = (uint64_t)v31;
    uint64_t v59 = v125;
LABEL_23:
    uint64_t v60 = *(void *)(v1 + 32);
    PropertyList.Tracker.reset()();
    double v116 = v52;
    if (v47)
    {
      if (v59) {
        uint64_t v61 = *(void *)(v59 + 64);
      }
      else {
        uint64_t v61 = 0;
      }
      uint64_t v63 = *(void *)(v60 + 16);
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v63 + 16));
      *(void *)(v63 + 24) = v61;
      os_unfair_lock_unlock((os_unfair_lock_t)(v63 + 16));
      swift_release();
      swift_release();
      swift_release();
      uint64_t v130 = v59;
      uint64_t v131 = v60;
      uint64_t v64 = (uint64_t)v118;
      v122(v118, (char *)v58, v22);
      char v108 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v127 + 56);
      v108((char *)v64, 0, 1, v22);
      uint64_t v65 = v111;
      _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(v64, v111, (uint64_t (*)(void))type metadata accessor for Date?);
      uint64_t v66 = v110;
      _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(v65, v110, (uint64_t (*)(void))type metadata accessor for Date?);
      swift_retain_n();
      uint64_t v67 = v115;
      specialized closure #1 in PropertyList.subscript.setter(&v130, v66);
      swift_release();
      _s10Foundation4DateVSgWOhTm_0(v66, (uint64_t (*)(void))type metadata accessor for Date?);
      uint64_t v68 = v131;
      if (v131)
      {
        uint64_t v69 = v130;
        swift_retain();
        swift_retain();
        specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v59, v69);
        swift_release();
        swift_release();
      }
      swift_release();
      _s10Foundation4DateVSgWOhTm_0(v65, (uint64_t (*)(void))type metadata accessor for Date?);
      _s10Foundation4DateVSgWOhTm_0((uint64_t)v118, (uint64_t (*)(void))type metadata accessor for Date?);
      __int16 v70 = *(_WORD *)(v126 + 260);
      swift_release();
      if ((v70 & 4) != 0)
      {
        uint64_t v72 = v130;
        swift_retain_n();
        specialized closure #1 in PropertyList.subscript.setter(&v130, 1);
        uint64_t v115 = v67;
        swift_release();
        uint64_t v68 = v131;
        if (v131)
        {
          uint64_t v73 = v130;
          swift_retain();
          swift_retain();
          specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v72, v73);
          swift_release();
          swift_release();
        }
        uint64_t v71 = (uint64_t)v112;
        swift_release();
      }
      else
      {
        uint64_t v115 = v67;
        uint64_t v71 = (uint64_t)v112;
      }
      LODWORD(v118) = v47;
      uint64_t v74 = AGGraphGetWeakValue();
      uint64_t v75 = v108;
      uint64_t v109 = v58;
      if (v74)
      {
        _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(v74, v71, (uint64_t (*)(void))type metadata accessor for Date?);
      }
      else
      {
        v108((char *)v71, 1, 1, v22);
        uint64_t v68 = v131;
      }
      uint64_t v76 = v71;
      int64_t v77 = v75;
      uint64_t v78 = v130;
      uint64_t v79 = *(void *)AGGraphGetValue();
      uint64_t v80 = (uint64_t)v114;
      v77(v114, 1, 1, v22);
      uint64_t v81 = v113;
      uint64_t v82 = v80 + *(int *)(v113 + 24);
      *(void *)uint64_t v82 = 0;
      *(unsigned char *)(v82 + 8) = 1;
      swift_retain();
      swift_retain();
      outlined assign with take of ResolvedTextHelper.NextUpdate(v76, v80, (uint64_t (*)(void))type metadata accessor for Date?);
      int64_t v83 = (uint64_t *)(v80 + *(int *)(v81 + 20));
      *int64_t v83 = v78;
      v83[1] = v68;
      *(void *)uint64_t v82 = v79;
      *(unsigned char *)(v82 + 8) = 0;
      uint64_t v84 = v119;
      _s7SwiftUI33ResolvableStringResolutionContextVWObTm_0(v80, v119, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
      int64_t v85 = (void *)DynamicTextView.DynamicTextFilter.textManager.getter();
      float v86 = (double *)AGGraphGetValue();
      double v87 = *v86;
      double v88 = v86[1];
      double v89 = v86[2];
      double v90 = v86[3];
      _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(v84, v80, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
      specialized SizeFittingTextCache.input.setter(v80, 1);
      if ((~*(void *)&v89 & 0x7FF0000000000000) == 0 && (*(void *)&v89 & 0xFFFFFFFFFFFFFLL) != 0) {
        double v91 = 0.0;
      }
      else {
        double v91 = v89;
      }
      if ((~*(void *)&v90 & 0x7FF0000000000000) == 0 && (*(void *)&v90 & 0xFFFFFFFFFFFFFLL) != 0) {
        uint64_t v92 = 0;
      }
      else {
        uint64_t v92 = *(void *)&v90;
      }
      LOBYTE(v129) = (~*(void *)&v89 & 0x7FF0000000000000) == 0 && (*(void *)&v89 & 0xFFFFFFFFFFFFFLL) != 0;
      LOBYTE(v128) = (~*(void *)&v90 & 0x7FF0000000000000) == 0 && (*(void *)&v90 & 0xFFFFFFFFFFFFFLL) != 0;
      uint64_t v62 = specialized SizeFittingTextCache.withValue<A>(for:compute:)(*(void **)&v91, v129, v92, v128, v85);
      swift_retain();
      LOBYTE(v129) = (~*(void *)&v89 & 0x7FF0000000000000) == 0 && (*(void *)&v89 & 0xFFFFFFFFFFFFFLL) != 0;
      LOBYTE(v128) = (~*(void *)&v90 & 0x7FF0000000000000) == 0 && (*(void *)&v90 & 0xFFFFFFFFFFFFFLL) != 0;
      specialized SizeFittingTextCache.withResolver<A>(for:compute:)(*(uint64_t *)&v91, v129, v92, v128, (uint64_t)v85, (uint64_t)v85, v87, v88, v89, v90);
      swift_release();
      swift_release();
      uint64_t v93 = v125;
      if (v124)
      {
        swift_retain_n();
        swift_retain_n();
        swift_retain();
        char v94 = specialized PropertyList.Tracker.value<A>(_:for:)(v93);
      }
      else
      {
        swift_retain_n();
        swift_retain();
        char v94 = specialized closure #1 in PropertyList.subscript.getter(v93);
      }
      uint64_t v58 = v109;
      int v47 = (int)v118;
      swift_release_n();
      swift_release_n();
      uint64_t v128 = *(void *)AGGraphGetValue();
      ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)((double *)&v128, v58, v94 & 1, (double *)&v129);
      swift_release();
      _s10Foundation4DateVSgWOhTm_0(v119, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
      swift_release();
      swift_release();
      *(void *)(v1 + 40) = v129;
    }
    else
    {
      swift_retain();
      uint64_t v62 = v37;
    }
    uint64_t v95 = type metadata accessor for DynamicTextView.DynamicTextFilter(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 24))(v1 + *(int *)(v95 + 48), v58, v22);
    uint64_t v96 = v121;
    uint64_t v97 = (uint64_t)v120;
    v122(&v120[*(int *)(v121 + 20)], (char *)v58, v22);
    uint64_t v98 = v97 + *(int *)(v96 + 24);
    swift_retain();
    ResolvedStyledText.schedule.getter(v98);
    *(void *)uint64_t v97 = v62;
    *(void *)(v97 + 8) = 0;
    *(unsigned char *)(v97 + 16) = 0;
    AGGraphSetOutputValue();
    swift_release();
    _s10Foundation4DateVSgWOhTm_0(v97, type metadata accessor for DynamicTextView.DynamicTextFilter.Value);
    int v52 = v116;
    if (!v47) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  uint64_t v53 = type metadata accessor for DynamicTextView.DynamicTextFilter(0);
  int v54 = (char *)v116;
  v51((char *)v116, (char *)(v1 + *(int *)(v53 + 48)), v22);
  lazy protocol witness table accessor for type ResolvedTextFilter and conformance ResolvedTextFilter(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v52 = *(void (**)(char *, uint64_t))(v49 + 8);
  v52(v54, v22);
  v52(v26, v22);
  if ((v55 & 1) == 0) {
    goto LABEL_22;
  }
  Outputuint64_t Value = AGGraphGetOutputValue();
  uint64_t v58 = (uint64_t)v31;
  uint64_t v59 = v125;
  if (!OutputValue) {
    goto LABEL_23;
  }
  if (!v47) {
    goto LABEL_53;
  }
LABEL_49:
  double v99 = *(double *)(v1 + 40);
  v57.n128_u64[0] = *(void *)AGGraphGetValue();
  if (v57.n128_f64[0] >= v99)
  {
LABEL_53:
    ((void (*)(uint64_t, uint64_t, __n128))v52)(v58, v22, v57);
    swift_release();
    swift_release();
    return swift_release();
  }
  uint64_t v100 = specialized static ViewGraph.current.getter();
  swift_release();
  swift_release();
  swift_release();
  v52((char *)v58, v22);
  double v101 = *(double *)(v1 + 40);
  swift_beginAccess();
  double v102 = *(double *)(v100 + 376);
  if (v101 < v102) {
    double v102 = v101;
  }
  *(double *)(v100 + 376) = v102;
  return swift_release();
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance DynamicTextView.DynamicTextFilter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DynamicTextView.DynamicTextFilter.Value(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t DynamicTextView.DynamicTextHelper.widthAdaptedText.getter()
{
  if (v0[3])
  {
    uint64_t v1 = v0[3];
  }
  else
  {
    uint64_t v1 = closure #1 in DynamicTextView.DynamicTextHelper.widthAdaptedText.getter(v0);
    v0[3] = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t closure #1 in DynamicTextView.DynamicTextHelper.widthAdaptedText.getter(void *a1)
{
  BOOL v2 = a1[4] == 0;
  BOOL v59 = a1[4] == 0;
  uint64_t v3 = *a1;
  swift_beginAccess();
  if ((*(unsigned char *)(v3 + 160) & 2) == 0)
  {
    uint64_t v4 = *a1;
    __int16 v5 = *(_WORD *)(*a1 + 260);
LABEL_12:
    uint64_t v18 = *(void **)(v4 + 216);
    id v17 = v18;
    id v14 = 0;
    goto LABEL_13;
  }
  uint64_t v6 = *(void *)(v3 + 216);
  if (!v6) {
    goto LABEL_9;
  }
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F089B8]), sel_initWithAttributedString_, v6);
  if (one-time initialization token for resolvableTextSegment != -1) {
    swift_once();
  }
  uint64_t v8 = static NSAttributedStringKey.resolvableTextSegment;
  id v9 = v7;
  id v10 = objc_msgSend(v9, sel_length);

  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = v9;
  void v11[3] = a1;
  v11[4] = &v59;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = partial apply for closure #1 in closure #1 in closure #1 in DynamicTextView.DynamicTextHelper.widthAdaptedText.getter;
  *(void *)(v12 + 24) = v11;
  *(void *)&long long v51 = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  *((void *)&v51 + 1) = v12;
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v50 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *((void *)&v50 + 1) = &block_descriptor_104;
  uint64_t v13 = _Block_copy(&aBlock);
  id v14 = v9;
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_enumerateAttribute_inRange_options_usingBlock_, v8, 0, v10, 0, v13);
  _Block_release(v13);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v8)
  {
    __break(1u);
    return result;
  }
  if (v14)
  {
    id v16 = v14;
    NSMutableAttributedString.resolveUpdateSchedule(recalculate:)(1, (uint64_t)&aBlock);
  }
  else
  {
LABEL_9:
    id v14 = 0;
    *(void *)&long long v51 = 0;
    long long aBlock = 0u;
    long long v50 = 0u;
  }
  _sypSgWOhTm_5((uint64_t)&aBlock, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule?, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule, (uint64_t)&protocol descriptor for TimelineSchedule, (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
  uint64_t v4 = *a1;
  __int16 v5 = *(_WORD *)(*a1 + 260);
  BOOL v2 = v59;
  if (!v14) {
    goto LABEL_12;
  }
  id v17 = v14;
  uint64_t v18 = v14;
LABEL_13:
  if (v2) {
    __int16 v19 = 256;
  }
  else {
    __int16 v19 = 0;
  }
  __int16 v20 = v5 & 0xFEFF | v19;
  swift_beginAccess();
  long long v21 = *(_OWORD *)(v4 + 128);
  long long v55 = *(_OWORD *)(v4 + 112);
  long long v56 = v21;
  long long v57 = *(_OWORD *)(v4 + 144);
  char v58 = *(unsigned char *)(v4 + 160);
  long long v22 = *(_OWORD *)(v4 + 64);
  long long v51 = *(_OWORD *)(v4 + 48);
  long long v52 = v22;
  long long v23 = *(_OWORD *)(v4 + 96);
  long long v53 = *(_OWORD *)(v4 + 80);
  long long v54 = v23;
  long long v24 = *(_OWORD *)(v4 + 32);
  long long aBlock = *(_OWORD *)(v4 + 16);
  long long v50 = v24;
  v47[6] = v55;
  v47[7] = v56;
  v47[8] = v57;
  char v48 = v58;
  _OWORD v47[2] = v51;
  v47[3] = v52;
  v47[4] = v53;
  v47[5] = v54;
  v47[0] = aBlock;
  v47[1] = v24;
  swift_beginAccess();
  long long v25 = *(_OWORD *)(v4 + 184);
  v60[0] = *(_OWORD *)(v4 + 168);
  v60[1] = v25;
  char v61 = 0;
  double v26 = *(double *)(v4 + 224);
  double v27 = *(double *)(v4 + 232);
  double v28 = *(double *)(v4 + 240);
  double v29 = *(double *)(v4 + 248);
  __int16 v46 = *(_WORD *)(v4 + 256);
  char v30 = *(unsigned char *)(v4 + 258);
  __int16 v45 = v20;
  uint64_t v43 = 0;
  memset(v42, 0, sizeof(v42));
  long long v44 = xmmword_24619B530;
  uint64_t v41 = MEMORY[0x263F8EE78];
  uint64_t v32 = *(void *)(v4 + 264);
  uint64_t v31 = *(void *)(v4 + 272);
  swift_beginAccess();
  double v33 = *(double *)(v4 + 200);
  char v34 = *(unsigned char *)(v4 + 208);
  id v35 = v14;
  outlined retain of TextLayoutProperties((uint64_t)&aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v40 = specialized static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(v18, v47, (uint64_t)v60, (char *)&v46, v30, &v45, (uint64_t)v42, &v41, v26, v27, v28, v29, v36, v37, v38, v39, v32, v31, v33,
          v34);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of TextLayoutProperties((uint64_t)&aBlock);

  return v40;
}

uint64_t closure #1 in closure #1 in closure #1 in DynamicTextView.DynamicTextHelper.widthAdaptedText.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unsigned char *a7)
{
  type metadata accessor for ResolvableTextSegmentAttribute.Value?(0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  __int16 v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any?(a1, (uint64_t)v36);
  if (!v37)
  {
    _sypSgWOhTm_5((uint64_t)v36, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_3);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
    return _s10Foundation4DateVSgWOhTm_0((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  }
  uint64_t v30 = a3;
  uint64_t v20 = MEMORY[0x263F8EE58];
  int v21 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v15, v21 ^ 1u, 1, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1) {
    return _s10Foundation4DateVSgWOhTm_0((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  }
  _s7SwiftUI33ResolvableStringResolutionContextVWObTm_0((uint64_t)v15, (uint64_t)v19, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  uint64_t v22 = *(int *)(v16 + 20);
  if (objc_msgSend(a5, sel_attribute_atIndex_effectiveRange_, *(void *)&v19[v22], a2, 0))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v31, 0, sizeof(v31));
  }
  _sypSgWObTm_3((uint64_t)v31, (uint64_t)v32, (unint64_t *)&lazy cache variable for type metadata for Any?, v20 + 8);
  if (v32[3])
  {
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ResolvableStringAttribute);
    if (swift_dynamicCast())
    {
      if (*((void *)&v34 + 1))
      {
        outlined init with take of ScrollStateRequest(&v33, (uint64_t)v36);
        uint64_t v24 = v37;
        uint64_t v25 = v38;
        double v29 = __swift_project_boxed_opaque_existential_1(v36, v37);
        v32[0] = *(void *)(a6 + 32);
        double v28 = *(uint64_t (**)(void))(v25 + 72);
        *((void *)&v34 + 1) = v24;
        uint64_t v35 = v25;
        __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v33);
        *a7 = (v28() | *a7) & 1;
        id v26 = *(id *)&v19[v22];
        objc_msgSend(a5, sel_addAttribute_value_range_, v26, _bridgeAnythingToObjectiveC<A>(_:)(), a2, v30);

        swift_unknownObjectRelease();
        _s10Foundation4DateVSgWOhTm_0((uint64_t)v19, type metadata accessor for ResolvableTextSegmentAttribute.Value);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
      }
    }
    else
    {
      uint64_t v35 = 0;
      long long v33 = 0u;
      long long v34 = 0u;
    }
  }
  else
  {
    _sypSgWOhTm_5((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v20 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_3);
    long long v33 = 0u;
    long long v34 = 0u;
    uint64_t v35 = 0;
  }
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v19, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  return _sypSgWOhTm_5((uint64_t)&v33, (uint64_t)&lazy cache variable for type metadata for ResolvableStringAttribute?, (uint64_t)&lazy cache variable for type metadata for ResolvableStringAttribute, (uint64_t)&protocol descriptor for ResolvableStringAttribute, (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
}

uint64_t DynamicTextView.DynamicTextHelper.value(for:)(uint64_t a1)
{
  DynamicTextView.DynamicTextHelper.widthAdaptedText.getter();
  uint64_t v2 = ResolvedStyledText.resolvingContent(in:)(a1);
  swift_release();
  char v3 = *(unsigned char *)(v2 + 257);
  char v4 = *(unsigned char *)(v2 + 256) & 0xFE;
  __int16 v5 = *(void **)(v2 + 216);
  swift_beginAccess();
  long long v6 = *(_OWORD *)(v2 + 128);
  v36[6] = *(_OWORD *)(v2 + 112);
  v36[7] = v6;
  v36[8] = *(_OWORD *)(v2 + 144);
  char v37 = *(unsigned char *)(v2 + 160);
  long long v7 = *(_OWORD *)(v2 + 64);
  v36[2] = *(_OWORD *)(v2 + 48);
  void v36[3] = v7;
  long long v8 = *(_OWORD *)(v2 + 96);
  v36[4] = *(_OWORD *)(v2 + 80);
  v36[5] = v8;
  long long v9 = *(_OWORD *)(v2 + 32);
  v36[0] = *(_OWORD *)(v2 + 16);
  v36[1] = v9;
  long long v10 = *(_OWORD *)(v2 + 128);
  v34[6] = *(_OWORD *)(v2 + 112);
  v34[7] = v10;
  v34[8] = *(_OWORD *)(v2 + 144);
  char v35 = *(unsigned char *)(v2 + 160);
  long long v11 = *(_OWORD *)(v2 + 64);
  v34[2] = *(_OWORD *)(v2 + 48);
  v34[3] = v11;
  long long v12 = *(_OWORD *)(v2 + 96);
  v34[4] = *(_OWORD *)(v2 + 80);
  v34[5] = v12;
  long long v13 = *(_OWORD *)(v2 + 32);
  v34[0] = *(_OWORD *)(v2 + 16);
  v34[1] = v13;
  swift_beginAccess();
  long long v14 = *(_OWORD *)(v2 + 184);
  v38[0] = *(_OWORD *)(v2 + 168);
  v38[1] = v14;
  char v39 = 0;
  double v15 = *(double *)(v2 + 224);
  double v16 = *(double *)(v2 + 232);
  double v17 = *(double *)(v2 + 240);
  double v18 = *(double *)(v2 + 248);
  v33[0] = v4;
  v33[1] = v3;
  char v19 = *(unsigned char *)(v2 + 258);
  __int16 v32 = *(_WORD *)(v2 + 260);
  memset(v29, 0, sizeof(v29));
  long long v31 = xmmword_24619B530;
  uint64_t v28 = MEMORY[0x263F8EE78];
  long long v27 = *(_OWORD *)(v2 + 264);
  uint64_t v30 = 0;
  swift_beginAccess();
  double v20 = *(double *)(v2 + 200);
  char v21 = *(unsigned char *)(v2 + 208);
  outlined retain of TextLayoutProperties((uint64_t)v36);
  specialized static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(v5, v34, (uint64_t)v38, v33, v19, &v32, (uint64_t)v29, &v28, v15, v16, v17, v18, v22, v23, v24, v25, v27, *((uint64_t *)&v27 + 1), v20,
    v21);
  outlined release of TextLayoutProperties((uint64_t)v36);
  return v2;
}

uint64_t protocol witness for SizeFittingTextResolver.shouldUpdate(for:inputChanged:) in conformance DynamicTextView.DynamicTextHelper(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t protocol witness for SizeFittingTextResolver.value(for:) in conformance DynamicTextView.DynamicTextHelper@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = DynamicTextView.DynamicTextHelper.value(for:)(a1);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return result;
}

uint64_t protocol witness for SizeFittingTextResolver.narrowerVariant.getter in conformance DynamicTextView.DynamicTextHelper@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  BOOL v3 = __OFADD__(v2, 1);
  uint64_t v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(void *)a1 = *(void *)v1;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = v4;
    return swift_retain();
  }
  return result;
}

uint64_t DynamicTextView.DynamicTextEnvironment.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for DynamicTextView.DynamicTextEnvironment(0);
  uint64_t v3 = v2 - 8;
  MEMORY[0x270FA5388](v2);
  uint64_t v45 = (uint64_t)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  long long v8 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  long long v11 = (char *)v44 - v10;
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v13 = Value[1];
  uint64_t v52 = *Value;
  uint64_t v53 = v13;
  uint64_t v14 = AGGraphGetValue();
  double v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v15(v11, v14, v5);
  uint64_t v46 = v1 + *(int *)(v3 + 36);
  ((void (*)(char *))v15)(v8);
  lazy protocol witness table accessor for type ResolvedTextFilter and conformance ResolvedTextFilter(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  swift_retain();
  swift_retain();
  char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v47 = v6;
  uint64_t v17 = v6;
  uint64_t v18 = v5;
  char v19 = *(void (**)(char *, uint64_t))(v17 + 8);
  v19(v8, v5);
  v19(v11, v5);
  if (v16) {
    goto LABEL_20;
  }
  AGGraphClearUpdate();
  uint64_t v20 = v45;
  _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(v1, v45, type metadata accessor for DynamicTextView.DynamicTextEnvironment);
  v44[2] = *(void *)AGGraphGetValue();
  swift_retain();
  _s10Foundation4DateVSgWOhTm_0(v20, type metadata accessor for DynamicTextView.DynamicTextEnvironment);
  AGGraphSetUpdate();
  uint64_t v21 = v52;
  uint64_t v45 = v53;
  v44[1] = v1;
  if (!v53)
  {
    uint64_t v23 = swift_retain_n();
    uint64_t v24 = specialized find<A>(_:key:)(v23);
    if (v24)
    {
      uint64_t v25 = *(void *)(v24 + 72);
      unint64_t v26 = *(unsigned int *)(v24 + 80) | ((unint64_t)*(unsigned __int8 *)(v24 + 84) << 32);
      char v27 = *(unsigned char *)(v24 + 85);
      char v28 = *(unsigned char *)(v24 + 86);
      char v29 = *(unsigned char *)(v24 + 87);
      uint64_t v22 = *(void *)(v24 + 88);
      int v30 = *(_DWORD *)(v24 + 96);
      outlined copy of ContentTransition.Storage(v25, v26, v27);
      swift_retain();
    }
    else
    {
      char v27 = 0;
      char v28 = 0;
      char v29 = 0;
      uint64_t v22 = 0;
      int v30 = 0;
      unint64_t v26 = 0x302000000;
      uint64_t v25 = 0x8000000000;
    }
    uint64_t v48 = v25;
    LODWORD(v49) = v26;
    BYTE4(v49) = BYTE4(v26);
    BYTE5(v49) = v27;
    BYTE6(v49) = v28;
    HIBYTE(v49) = v29;
    uint64_t v50 = v22;
    int v51 = v30;
    swift_release_n();
    if (v22) {
      goto LABEL_15;
    }
LABEL_9:
    uint64_t v31 = swift_retain();
    char v32 = specialized closure #1 in PropertyList.subscript.getter(v31);
    swift_release();
    if ((v32 & 1) != 0 || HIBYTE(v49) - 1 >= 2)
    {
      uint64_t v22 = 0;
    }
    else
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v22 = static Animation.default;
      swift_retain();
    }
    goto LABEL_15;
  }
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v21, (uint64_t)&v48);
  swift_release_n();
  swift_release_n();
  uint64_t v22 = v50;
  if (!v50) {
    goto LABEL_9;
  }
LABEL_15:
  uint64_t v33 = v48;
  unint64_t v34 = v49 | ((unint64_t)BYTE4(v49) << 32);
  uint64_t v35 = BYTE5(v49);
  int v36 = BYTE6(v49);
  int v37 = v51;
  uint64_t v38 = HIBYTE(v49);
  swift_retain_n();
  outlined copy of ContentTransition.Storage(v33, v34, v35);
  uint64_t v39 = 0x1000000000000;
  if (!v36) {
    uint64_t v39 = 0;
  }
  unint64_t v40 = v34 | (v35 << 40) | v39 | (v38 << 56);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(&v52, v33, v40, v22, v37);
  swift_release();
  outlined consume of ContentTransition.Storage(v33, v34, v35);
  swift_release();
  if (v45)
  {
    uint64_t v41 = v52;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v21, v41);
    swift_release();
    swift_release();
  }
  swift_release();
  outlined consume of ContentTransition.Storage(v33, v34, v35);
  swift_release();
  swift_release();
LABEL_20:
  uint64_t v42 = AGGraphGetValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 24))(v46, v42, v18);
  uint64_t v48 = v52;
  uint64_t v49 = v53;
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

double DynamicTextView.DynamicTextFrame.value.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  double v3 = *(double *)(Value + 8);
  double v4 = *(double *)(Value + 16);
  swift_retain();
  ResolvedStyledText.frame(in:renderer:)(0, v3, v4);
  double v6 = v5;
  double v8 = v7;
  swift_release();
  uint64_t v9 = (double *)AGGraphGetValue();
  double v10 = *v9 - v6;
  double v11 = v9[1] - v8;
  uint64_t v12 = AGGraphGetValue();
  double result = *(double *)(v12 + 8);
  uint64_t v14 = *(void *)(v12 + 16);
  *(double *)a1 = v10;
  *(double *)(a1 + 8) = v11;
  *(double *)(a1 + 16) = result;
  *(void *)(a1 + 24) = v14;
  *(double *)(a1 + 32) = result;
  *(void *)(a1 + 40) = v14;
  return result;
}

double protocol witness for Rule.value.getter in conformance DynamicTextView.DynamicTextFrame@<D0>(uint64_t a1@<X8>)
{
  return DynamicTextView.DynamicTextFrame.value.getter(a1);
}

uint64_t static ResolvedStyledText.styledText(storage:stylePadding:layoutProperties:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:)(void *a1, uint64_t a2, __int16 *a3, char a4, __int16 *a5, uint64_t a6, uint64_t *a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17)
{
  long long v17 = *(_OWORD *)(a2 + 112);
  v33[6] = *(_OWORD *)(a2 + 96);
  v33[7] = v17;
  v33[8] = *(_OWORD *)(a2 + 128);
  char v34 = *(unsigned char *)(a2 + 144);
  long long v18 = *(_OWORD *)(a2 + 48);
  char v33[2] = *(_OWORD *)(a2 + 32);
  v33[3] = v18;
  long long v19 = *(_OWORD *)(a2 + 80);
  v33[4] = *(_OWORD *)(a2 + 64);
  v33[5] = v19;
  long long v20 = *(_OWORD *)(a2 + 16);
  v33[0] = *(_OWORD *)a2;
  v33[1] = v20;
  __int16 v21 = *a3;
  __int16 v22 = *a5;
  uint64_t v23 = *(void *)(a6 + 48);
  uint64_t v24 = *a7;
  memset(v35, 0, 32);
  v35[32] = 1;
  __int16 v32 = v21;
  __int16 v31 = v22;
  long long v25 = *(_OWORD *)(a6 + 16);
  v28[0] = *(_OWORD *)a6;
  v28[1] = v25;
  long long v29 = *(_OWORD *)(a6 + 32);
  uint64_t v30 = v23;
  uint64_t v27 = v24;
  return specialized static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, v33, (uint64_t)v35, (char *)&v32, a4, &v31, (uint64_t)v28, &v27, a9, a10, a11, a12, *(double *)&v29, *(double *)&v25, a15, a16, a8, a17, 0.0,
           1);
}

unint64_t lazy protocol witness table accessor for type Text.MakeRepresentableContext and conformance Text.MakeRepresentableContext()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.MakeRepresentableContext and conformance Text.MakeRepresentableContext;
  if (!lazy protocol witness table cache variable for type Text.MakeRepresentableContext and conformance Text.MakeRepresentableContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.MakeRepresentableContext and conformance Text.MakeRepresentableContext);
  }
  return result;
}

uint64_t sub_245CC58F0()
{
  return swift_deallocObject();
}

unint64_t specialized CodableResolvedStyledText.init(from:)(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v124 = *MEMORY[0x263EF8340];
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v4 = static MaximumLineHeightKey.defaultValue;
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v5 = static MinimumLineHeightKey.defaultValue;
  if (one-time initialization token for standard != -1) {
    swift_once();
  }
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  if (v6 >= v7)
  {
    *(void *)(a1 + 24) = 0;
    goto LABEL_101;
  }
  *(void *)&long long v113 = 0;
  BYTE8(v113) = 1;
  *(void *)&long long v114 = 0;
  BYTE8(v114) = 1;
  *(_DWORD *)((char *)&v114 + 9) = 1;
  *(void *)&long long v116 = 0;
  long long v115 = 0x3FF0000000000000uLL;
  *((void *)&v116 + 1) = v4;
  long long v117 = (unint64_t)v5;
  *(_WORD *)double v118 = 0;
  *(_OWORD *)&v118[8] = xmmword_2461C55F0;
  v118[24] = static Text.Sizing.standard;
  *(void *)&long long v119 = qword_26B0F0F48;
  *((void *)&v119 + 1) = 2;
  char v121 = 0;
  long long v120 = 0uLL;
  swift_bridgeObjectRetain();
  double v8 = 0;
  uint64_t v9 = 0;
  double v10 = 0.0;
  double v11 = 0.0;
  double v12 = 0.0;
  double v13 = 0.0;
  uint64_t v80 = (void *)MEMORY[0x263F8EE78];
  long long v78 = 0u;
  long long v79 = 0u;
  unint64_t v14 = *(void *)(a1 + 24);
  if (v14) {
    goto LABEL_9;
  }
  while (2)
  {
    unint64_t v16 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_103;
    }
    unint64_t v14 = v16;
    if (v16 < 8)
    {
LABEL_102:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
LABEL_103:
      swift_bridgeObjectRelease();

      outlined release of TextLayoutProperties((uint64_t)&v113);
      return a1;
    }
LABEL_14:
    switch(v14 >> 3)
    {
      case 1uLL:
        if ((v14 & 7) != 2) {
          goto LABEL_102;
        }
        ProtobufDecoder.beginMessage()();
        if (v2) {
          goto LABEL_103;
        }
        CodableAttributedString.init(from:)((id *)a1, (id **)&v84);
        uint64_t v2 = 0;
        long long v17 = *(void **)(a1 + 40);
        if (!v17[2]) {
          goto LABEL_125;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v18 = v17[2];
          if (!v18) {
            goto LABEL_127;
          }
        }
        else
        {
          long long v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
          uint64_t v18 = v17[2];
          if (!v18) {
            goto LABEL_127;
          }
        }
        uint64_t v19 = v18 - 1;
        uint64_t v20 = v17[v19 + 4];
        uint64_t v17[2] = v19;

        *(void *)(a1 + 40) = v17;
        *(void *)(a1 + 16) = v20;
        double v8 = (void *)v84;
        goto LABEL_85;
      case 2uLL:
        if ((v14 & 7) != 2) {
          goto LABEL_102;
        }
        __int16 v21 = *(void **)(a1 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          __int16 v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
        }
        unint64_t v23 = v21[2];
        unint64_t v22 = v21[3];
        if (v23 >= v22 >> 1) {
          __int16 v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v21);
        }
        uint64_t v21[2] = v23 + 1;
        v21[v23 + 4] = v7;
        *(void *)(a1 + 40) = v21;
        uint64_t v24 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_103;
        }
        if (v24 < 0)
        {
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          __break(1u);
          __int16 v70 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
          uint64_t v74 = v70[2];
          if (v74) {
            goto LABEL_120;
          }
          __break(1u);
          __int16 v70 = *(void **)(a1 + 40);
          if (v70[2])
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v71 = v70[2];
              if (v71)
              {
LABEL_113:
                uint64_t v72 = v71 - 1;
                uint64_t v73 = v70[v72 + 4];
                v70[2] = v72;
                swift_bridgeObjectRelease();

LABEL_121:
                *(void *)(a1 + 40) = v70;
                *(void *)(a1 + 16) = v73;
                return a1;
              }
LABEL_140:
              __break(1u);
              __break(1u);
              __int16 v70 = specialized _ArrayBuffer._consumeAndCreateNew()(v70);
              uint64_t v74 = v70[2];
              if (v74) {
                goto LABEL_120;
              }
              __break(1u);
              __int16 v70 = *(void **)(a1 + 40);
              if (v70[2])
              {
                if (swift_isUniquelyReferenced_nonNull_native())
                {
                  uint64_t v74 = v70[2];
                  if (v74)
                  {
LABEL_120:
                    uint64_t v75 = v74 - 1;
                    uint64_t v73 = v70[v75 + 4];
                    v70[2] = v75;
                    swift_bridgeObjectRelease();

                    outlined release of TextLayoutProperties((uint64_t)&v113);
                    goto LABEL_121;
                  }
LABEL_117:
                  __break(1u);
                  __int16 v70 = *(void **)(a1 + 40);
                  if (v70[2])
                  {
                    if (swift_isUniquelyReferenced_nonNull_native())
                    {
                      uint64_t v74 = v70[2];
                      if (v74) {
                        goto LABEL_120;
                      }
LABEL_147:
                      __break(1u);
                    }
                  }
                  else
                  {
                    __break(1u);
                  }
                  __int16 v70 = specialized _ArrayBuffer._consumeAndCreateNew()(v70);
                  uint64_t v74 = v70[2];
                  if (v74) {
                    goto LABEL_120;
                  }
                  goto LABEL_147;
                }
              }
              else
              {
                __break(1u);
              }
              __int16 v70 = specialized _ArrayBuffer._consumeAndCreateNew()(v70);
              uint64_t v74 = v70[2];
              if (v74) {
                goto LABEL_120;
              }
              goto LABEL_117;
            }
          }
          else
          {
            __break(1u);
          }
          __int16 v70 = specialized _ArrayBuffer._consumeAndCreateNew()(v70);
          uint64_t v71 = v70[2];
          if (v71) {
            goto LABEL_113;
          }
          goto LABEL_140;
        }
        unint64_t v25 = *(void *)(a1 + 8) + v24;
        if (v7 < v25) {
          goto LABEL_102;
        }
        *(void *)(a1 + 16) = v25;
        long long v84 = 0u;
        long long v85 = 0u;
        closure #1 in EdgeInsets.init(from:)((unint64_t)&v84, (void *)a1, &v81);
        unint64_t v26 = *(void **)(a1 + 40);
        if (!v26[2]) {
          goto LABEL_129;
        }
        double v11 = *((double *)&v84 + 1);
        double v10 = *(double *)&v84;
        double v13 = *((double *)&v85 + 1);
        double v12 = *(double *)&v85;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v27 = v26[2];
          if (!v27) {
            goto LABEL_132;
          }
        }
        else
        {
          unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew()(v26);
          uint64_t v27 = v26[2];
          if (!v27) {
            goto LABEL_132;
          }
        }
LABEL_44:
        uint64_t v33 = v27 - 1;
        uint64_t v34 = v26[v33 + 4];
        v26[2] = v33;
        *(void *)(a1 + 40) = v26;
        *(void *)(a1 + 16) = v34;
LABEL_85:
        long long v99 = *(_OWORD *)&v118[16];
        long long v100 = v119;
        long long v101 = v120;
        char v102 = v121;
        long long v95 = v115;
        long long v96 = v116;
        long long v97 = v117;
        long long v98 = *(_OWORD *)v118;
        long long v39 = v113;
        long long v40 = v114;
LABEL_86:
        long long v93 = v39;
        long long v94 = v40;
LABEL_87:
        unint64_t v6 = *(void *)(a1 + 8);
        unint64_t v7 = *(void *)(a1 + 16);
        if (v6 < v7)
        {
          *(_OWORD *)&v118[16] = v99;
          long long v119 = v100;
          long long v120 = v101;
          char v121 = v102;
          long long v115 = v95;
          long long v116 = v96;
          long long v117 = v97;
          *(_OWORD *)double v118 = v98;
          long long v113 = v93;
          long long v114 = v94;
          unint64_t v14 = *(void *)(a1 + 24);
          if (!v14) {
            continue;
          }
LABEL_9:
          unint64_t v15 = *(void *)(a1 + 32);
          if (v6 < v15) {
            goto LABEL_14;
          }
          if (v15 < v6) {
            goto LABEL_102;
          }
          *(void *)(a1 + 24) = 0;
          continue;
        }
        *(void *)(a1 + 24) = 0;
        long long v109 = v99;
        long long v110 = v100;
        long long v111 = v101;
        char v112 = v102;
        long long v105 = v95;
        long long v106 = v96;
        long long v107 = v97;
        long long v108 = v98;
        long long v103 = v93;
        long long v104 = v94;
        if (v8)
        {
          long long v99 = v109;
          long long v100 = v110;
          long long v101 = v111;
          char v102 = v112;
          long long v95 = v105;
          long long v96 = v106;
          long long v97 = v107;
          long long v98 = v108;
          long long v93 = v103;
          long long v94 = v104;
          v122[0] = v79;
          v122[1] = v78;
          char v123 = 0;
          __int16 v83 = 513;
          __int16 v82 = (__int16)v9;
          *(void *)float v86 = 0;
          long long v84 = 0u;
          long long v85 = 0u;
          *(_OWORD *)&v86[8] = xmmword_24619B530;
          uint64_t v64 = MEMORY[0x263F8EE78];
          uint64_t v81 = MEMORY[0x263F8EE78];
          id v65 = v8;
          a1 = specialized static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(v8, &v93, (uint64_t)v122, (char *)&v83, 0, &v82, (uint64_t)&v84, &v81, v10, v11, v12, v13, v66, v67, v68, v69, v64, (uint64_t)v80, 0.0,
                 1);

          swift_bridgeObjectRelease();
          outlined release of TextLayoutProperties((uint64_t)&v103);
          return a1;
        }
        swift_bridgeObjectRelease();
        outlined release of TextLayoutProperties((uint64_t)&v103);
LABEL_101:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return a1;
      case 3uLL:
        if ((v14 & 7) != 2) {
          goto LABEL_102;
        }
        char v28 = *(void **)(a1 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
        }
        unint64_t v30 = v28[2];
        unint64_t v29 = v28[3];
        if (v30 >= v29 >> 1) {
          char v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v28);
        }
        _OWORD v28[2] = v30 + 1;
        v28[v30 + 4] = v7;
        *(void *)(a1 + 40) = v28;
        uint64_t v31 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_103;
        }
        if (v31 < 0) {
          goto LABEL_123;
        }
        unint64_t v32 = *(void *)(a1 + 8) + v31;
        if (v7 < v32) {
          goto LABEL_102;
        }
        *(void *)(a1 + 16) = v32;
        long long v84 = 0u;
        long long v85 = 0u;
        closure #1 in EdgeInsets.init(from:)((unint64_t)&v84, (void *)a1, &v81);
        unint64_t v26 = *(void **)(a1 + 40);
        if (!v26[2]) {
          goto LABEL_130;
        }
        long long v78 = v85;
        long long v79 = v84;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v27 = v26[2];
          if (!v27) {
            goto LABEL_133;
          }
        }
        else
        {
          unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew()(v26);
          uint64_t v27 = v26[2];
          if (!v27) {
            goto LABEL_133;
          }
        }
        goto LABEL_44;
      case 5uLL:
        outlined release of TextLayoutProperties((uint64_t)&v113);
        if ((v14 & 7) != 2)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_109:
          swift_bridgeObjectRelease();

          return a1;
        }
        ProtobufDecoder.beginMessage()();
        if (v2) {
          goto LABEL_109;
        }
        TextLayoutProperties.init(from:)((void *)a1, (uint64_t)&v84);
        uint64_t v2 = 0;
        uint64_t v35 = *(void **)(a1 + 40);
        if (!v35[2]) {
          goto LABEL_126;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v36 = v35[2];
          if (!v36) {
            goto LABEL_128;
          }
        }
        else
        {
          uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
          uint64_t v36 = v35[2];
          if (!v36) {
            goto LABEL_128;
          }
        }
        uint64_t v37 = v36 - 1;
        uint64_t v38 = v35[v37 + 4];
        void v35[2] = v37;
        *(void *)(a1 + 40) = v35;
        *(void *)(a1 + 16) = v38;
        long long v99 = v89;
        long long v100 = v90;
        long long v101 = v91;
        char v102 = v92;
        long long v95 = *(_OWORD *)v86;
        long long v96 = *(_OWORD *)&v86[16];
        long long v97 = v87;
        long long v98 = v88;
        long long v39 = v84;
        long long v40 = v85;
        goto LABEL_86;
      case 6uLL:
        if ((v14 & 7) != 2) {
          goto LABEL_102;
        }
        uint64_t v41 = *(void **)(a1 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41[2] + 1, 1, v41);
        }
        unint64_t v43 = v41[2];
        unint64_t v42 = v41[3];
        if (v43 >= v42 >> 1) {
          uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, v41);
        }
        v41[2] = v43 + 1;
        v41[v43 + 4] = v7;
        *(void *)(a1 + 40) = v41;
        uint64_t v44 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_103;
        }
        if (v44 < 0) {
          goto LABEL_124;
        }
        unint64_t v45 = *(void *)(a1 + 8) + v44;
        if (v7 < v45) {
          goto LABEL_102;
        }
        *(void *)(a1 + 16) = v45;
        ContentTransition.init(from:)(a1, (uint64_t)&v84);
        uint64_t v46 = *(void **)(a1 + 40);
        if (!v46[2]) {
          goto LABEL_131;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v47 = v46[2];
          if (!v47) {
            goto LABEL_134;
          }
        }
        else
        {
          uint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew()(v46);
          uint64_t v47 = v46[2];
          if (!v47) {
            goto LABEL_134;
          }
        }
        uint64_t v76 = v9;
        uint64_t v48 = v47 - 1;
        uint64_t v49 = v46[v48 + 4];
        v46[2] = v48;
        *(void *)(a1 + 40) = v46;
        *(void *)(a1 + 16) = v49;
        uint64_t v50 = v84;
        uint64_t v51 = BYTE12(v84);
        uint64_t v52 = DWORD2(v84);
        char v53 = BYTE13(v84);
        char v54 = BYTE14(v84);
        int64_t v77 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v80[2] + 1, 1, v80);
        }
        unint64_t v56 = v80[2];
        unint64_t v55 = v80[3];
        if (v56 >= v55 >> 1) {
          uint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v55 > 1), v56 + 1, 1, v80);
        }
        v80[2] = v56 + 1;
        long long v57 = &v80[2 * v56];
        v57[4] = v50;
        *((_DWORD *)v57 + 10) = v52;
        *((unsigned char *)v57 + 44) = (v52 | (unint64_t)(v51 << 32)) >> 32;
        *((unsigned char *)v57 + 45) = v53;
        *((unsigned char *)v57 + 46) = v54;
        long long v93 = v113;
        long long v94 = v114;
        long long v95 = v115;
        long long v96 = v116;
        long long v97 = v117;
        long long v98 = *(_OWORD *)v118;
        long long v99 = *(_OWORD *)&v118[16];
        long long v100 = v119;
        long long v101 = v120;
        char v102 = v121;
        uint64_t v9 = v76;
        double v8 = v77;
        goto LABEL_87;
      case 7uLL:
        if ((v14 & 7) == 0) {
          goto LABEL_76;
        }
        if ((v14 & 7) != 2) {
          goto LABEL_102;
        }
        uint64_t v58 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_103;
        }
        if (v58 < 0) {
          goto LABEL_135;
        }
        unint64_t v59 = *(void *)(a1 + 8) + v58;
        if (v7 < v59) {
          goto LABEL_102;
        }
        *(void *)(a1 + 24) = 56;
        *(void *)(a1 + 32) = v59;
LABEL_76:
        uint64_t v60 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_103;
        }
        uint64_t v9 = (void *)v60;
        goto LABEL_85;
      default:
        switch(v14 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_103;
            }
            goto LABEL_85;
          case 1uLL:
            unint64_t v61 = *(void *)(a1 + 8) + 8;
            goto LABEL_83;
          case 2uLL:
            uint64_t v62 = ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_103;
            }
            if (v62 < 0) {
              goto LABEL_136;
            }
            unint64_t v61 = *(void *)(a1 + 8) + v62;
LABEL_83:
            if (v7 < v61) {
              goto LABEL_102;
            }
            *(void *)(a1 + 8) = v61;
            break;
          case 5uLL:
            unint64_t v61 = *(void *)(a1 + 8) + 4;
            goto LABEL_83;
          default:
            goto LABEL_102;
        }
        goto LABEL_85;
    }
  }
}

unint64_t lazy protocol witness table accessor for type TextLayoutQuery and conformance TextLayoutQuery()
{
  unint64_t result = lazy protocol witness table cache variable for type TextLayoutQuery and conformance TextLayoutQuery;
  if (!lazy protocol witness table cache variable for type TextLayoutQuery and conformance TextLayoutQuery)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextLayoutQuery and conformance TextLayoutQuery);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyledTextContentView.ArchivedTransitionEnvironment and conformance StyledTextContentView.ArchivedTransitionEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type StyledTextContentView.ArchivedTransitionEnvironment and conformance StyledTextContentView.ArchivedTransitionEnvironment;
  if (!lazy protocol witness table cache variable for type StyledTextContentView.ArchivedTransitionEnvironment and conformance StyledTextContentView.ArchivedTransitionEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyledTextContentView.ArchivedTransitionEnvironment and conformance StyledTextContentView.ArchivedTransitionEnvironment);
  }
  return result;
}

uint64_t sub_245CC6698()
{
  return swift_deallocObject();
}

uint64_t sub_245CC66D8()
{
  return swift_deallocObject();
}

uint64_t sub_245CC66EC()
{
  return swift_deallocObject();
}

uint64_t sub_245CC66FC()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in ResolvedStyledText.cgStyleHandler.getter(uint64_t a1, unint64_t a2)
{
  closure #1 in ResolvedStyledText.cgStyleHandler.getter(a1, a2, *(void *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), *(unsigned char *)(v2 + 25));
}

uint64_t associated type witness table accessor for View.Body : View in AccessibilityStyledTextContentView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_245CC6788@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 144) & 1;
  return result;
}

unsigned char *sub_245CC6798(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 144) = *(unsigned char *)(a2 + 144) & 0xFE | *result;
  return result;
}

uint64_t sub_245CC67B0@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(unsigned char *)(result + 144) & 2) != 0;
  return result;
}

unsigned char *sub_245CC67C0(unsigned char *result, uint64_t a2)
{
  if (*result) {
    char v2 = 2;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(a2 + 144) = *(unsigned char *)(a2 + 144) & 0xFD | v2;
  return result;
}

uint64_t sub_245CC67E4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 208);
  *(void *)a2 = *(void *)(v3 + 200);
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_245CC6834(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = swift_beginAccess();
  *(void *)(v4 + 200) = v2;
  *(unsigned char *)(v4 + 208) = v3;
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 168))(v5);
}

uint64_t destroy for AccessibilityStyledTextContentView(uint64_t a1)
{
  swift_release();
  outlined consume of Text.Storage(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityStyledTextContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  swift_retain();
  outlined copy of Text.Storage(v4, v5, v6);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityStyledTextContentView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of Text.Storage(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for AccessibilityStyledTextContentView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityStyledTextContentView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityStyledTextContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t assignWithTake for StyledTextContentView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for TextLayoutProperties(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 25) = *((unsigned char *)a2 + 25);
  *(unsigned char *)(a1 + 26) = *((unsigned char *)a2 + 26);
  *(unsigned char *)(a1 + 27) = *((unsigned char *)a2 + 27);
  *(unsigned char *)(a1 + 28) = *((unsigned char *)a2 + 28);
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = a2[9];
  *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
  *(unsigned char *)(a1 + 81) = *((unsigned char *)a2 + 81);
  *(void *)(a1 + 88) = a2[11];
  *(void *)(a1 + 96) = a2[12];
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  *(void *)(a1 + 112) = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v6 = *(_OWORD *)(a2 + 15);
  *(void *)(a1 + 136) = a2[17];
  *(_OWORD *)(a1 + 120) = v6;
  *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
  return a1;
}

__n128 __swift_memcpy145_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for TextLayoutProperties(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 27);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextLayoutProperties(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 145)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 112);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextLayoutProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 144) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 145) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 112) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 145) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t method lookup function for ResolvedStyledText(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ResolvedStyledText);
}

uint64_t dispatch thunk of ResolvedStyledText.resetCache()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of ResolvedStyledText.drawingMargins.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of ResolvedStyledText.__allocating_init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = *(unsigned char *)(a3 + 32);
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(v3 + 184);
  long long v6 = *(_OWORD *)(a3 + 16);
  v8[0] = *(_OWORD *)a3;
  v8[1] = v6;
  char v9 = v4;
  return v5(a1, a2, v8);
}

uint64_t dispatch thunk of ResolvedStyledText.lineHeightScalingAdjustment(lineHeightMultiple:maximumLineHeight:minimumLineHeight:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of ResolvedStyledText.majorAxis.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))() & 1;
}

uint64_t dispatch thunk of ResolvedStyledText.drawingScale(size:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of ResolvedStyledText.spacing()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of ResolvedStyledText.sizeThatFits(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of ResolvedStyledText.size(in:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of ResolvedStyledText.frameSize(in:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of ResolvedStyledText.size(in:context:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of ResolvedStyledText.explicitAlignment(_:at:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of ResolvedStyledText.linkURL(at:in:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of ResolvedStyledText.draw(in:with:applyingMarginOffsets:containsResolvable:context:renderer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of ResolvedStyledText.layoutValue(in:with:applyingMarginOffsets:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t method lookup function for TextDrawingContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TextDrawingContext);
}

uint64_t sub_245CC7108()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

ValueMetadata *type metadata accessor for CodableResolvedStyledText()
{
  return &type metadata for CodableResolvedStyledText;
}

void *type metadata accessor for TextLayoutProperties.Flags()
{
  return &unk_26FA626F0;
}

uint64_t initializeWithCopy for DynamicTextViewFactory(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DynamicTextViewFactory(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for DynamicTextViewFactory(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicTextViewFactory(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 28)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicTextViewFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 28) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DynamicTextViewFactory()
{
  return &type metadata for DynamicTextViewFactory;
}

void *type metadata accessor for StyledTextContentView.ArchivedTransitionEnvironment()
{
  return &unk_26FA65100;
}

void *type metadata accessor for StyledTextLayoutComputer()
{
  return &unk_26FA6B4B0;
}

void *type metadata accessor for TextLayoutQuery()
{
  return &unk_26FA51828;
}

void *type metadata accessor for Text.MakeRepresentableContext()
{
  return &unk_26FA776B8;
}

void *initializeBufferWithCopyOfBuffer for ResolvedTextHelper.NextUpdate(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
      uint64_t v8 = v7;
      uint64_t v9 = *(int *)(v7 + 48);
      double v10 = (char *)a1 + v9;
      double v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      *((unsigned char *)a1 + *(int *)(v8 + 64)) = *((unsigned char *)a2 + *(int *)(v8 + 64));
      *(void *)((char *)a1 + *(int *)(v8 + 80)) = *(void *)((char *)a2 + *(int *)(v8 + 80));
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

void *assignWithCopy for ResolvedTextHelper.NextUpdate(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s10Foundation4DateVSgWOhTm_0((uint64_t)a1, type metadata accessor for ResolvedTextHelper.NextUpdate);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
      uint64_t v7 = v6;
      uint64_t v8 = *(int *)(v6 + 48);
      uint64_t v9 = (char *)a1 + v8;
      double v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      *((unsigned char *)a1 + *(int *)(v7 + 64)) = *((unsigned char *)a2 + *(int *)(v7 + 64));
      *(void *)((char *)a1 + *(int *)(v7 + 80)) = *(void *)((char *)a2 + *(int *)(v7 + 80));
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void *initializeWithTake for ResolvedTextHelper.NextUpdate(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    uint64_t v7 = v6;
    uint64_t v8 = *(int *)(v6 + 48);
    uint64_t v9 = (char *)a1 + v8;
    double v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    *((unsigned char *)a1 + *(int *)(v7 + 64)) = *((unsigned char *)a2 + *(int *)(v7 + 64));
    *(void *)((char *)a1 + *(int *)(v7 + 80)) = *(void *)((char *)a2 + *(int *)(v7 + 80));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ResolvedTextHelper.NextUpdate(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s10Foundation4DateVSgWOhTm_0((uint64_t)a1, type metadata accessor for ResolvedTextHelper.NextUpdate);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
      uint64_t v7 = v6;
      uint64_t v8 = *(int *)(v6 + 48);
      uint64_t v9 = (char *)a1 + v8;
      double v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      *((unsigned char *)a1 + *(int *)(v7 + 64)) = *((unsigned char *)a2 + *(int *)(v7 + 64));
      *(void *)((char *)a1 + *(int *)(v7 + 80)) = *(void *)((char *)a2 + *(int *)(v7 + 80));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for ResolvedTextHelper(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(void *)(a1 + 4) = *(uint64_t *)((char *)a2 + 4);
    *(_WORD *)(a1 + 12) = *((_WORD *)a2 + 6);
    *(_DWORD *)(a1 + 14) = *(_DWORD *)((char *)a2 + 14);
    *(unsigned char *)(a1 + 18) = *((unsigned char *)a2 + 18);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(void *)(a1 + 40) = a2[5];
    uint64_t v7 = a2[9];
    swift_retain();
    if (v7)
    {
      uint64_t v8 = a2[6];
      uint64_t v9 = a2[7];
      char v10 = *((unsigned char *)a2 + 64);
      outlined copy of Text.Storage(v8, v9, v10);
      *(void *)(v4 + 48) = v8;
      *(void *)(v4 + 56) = v9;
      *(unsigned char *)(v4 + 64) = v10;
      *(void *)(v4 + 72) = v7;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v12 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(v4 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(v4 + 64) = v12;
    }
    uint64_t v13 = *(int *)(a3 + 56);
    unint64_t v14 = (void *)(v4 + v13);
    unint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *unint64_t v14 = *v15;
      type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
      uint64_t v18 = v17;
      uint64_t v19 = *(int *)(v17 + 48);
      uint64_t v20 = (char *)v14 + v19;
      __int16 v21 = (char *)v15 + v19;
      uint64_t v22 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
      *((unsigned char *)v14 + *(int *)(v18 + 64)) = *((unsigned char *)v15 + *(int *)(v18 + 64));
      *(void *)((char *)v14 + *(int *)(v18 + 80)) = *(void *)((char *)v15 + *(int *)(v18 + 80));
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(void *)(*(void *)(Update - 8) + 64));
    }
    *(void *)(v4 + *(int *)(a3 + 60)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 60));
  }
  return v4;
}

uint64_t assignWithCopy for ResolvedTextHelper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 13);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(a1 + 15) = *(unsigned char *)(a2 + 15);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  uint64_t v6 = (_OWORD *)(a1 + 48);
  uint64_t v7 = (_OWORD *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a2 + 48);
      uint64_t v10 = *(void *)(a2 + 56);
      char v11 = *(unsigned char *)(a2 + 64);
      outlined copy of Text.Storage(v9, v10, v11);
      uint64_t v12 = *(void *)(a1 + 48);
      uint64_t v13 = *(void *)(a1 + 56);
      char v14 = *(unsigned char *)(a1 + 64);
      *(void *)(a1 + 48) = v9;
      *(void *)(a1 + 56) = v10;
      *(unsigned char *)(a1 + 64) = v11;
      outlined consume of Text.Storage(v12, v13, v14);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (a1 == a2) {
        goto LABEL_14;
      }
    }
    else
    {
      outlined destroy of Text(a1 + 48);
      long long v18 = *(_OWORD *)(a2 + 64);
      *uint64_t v6 = *v7;
      *(_OWORD *)(a1 + 64) = v18;
      if (a1 == a2) {
        goto LABEL_14;
      }
    }
  }
  else if (v8)
  {
    uint64_t v15 = *(void *)(a2 + 48);
    uint64_t v16 = *(void *)(a2 + 56);
    char v17 = *(unsigned char *)(a2 + 64);
    outlined copy of Text.Storage(v15, v16, v17);
    *(void *)(a1 + 48) = v15;
    *(void *)(a1 + 56) = v16;
    *(unsigned char *)(a1 + 64) = v17;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    swift_bridgeObjectRetain();
    if (a1 == a2) {
      goto LABEL_14;
    }
  }
  else
  {
    long long v19 = *(_OWORD *)(a2 + 64);
    *uint64_t v6 = *v7;
    *(_OWORD *)(a1 + 64) = v19;
    if (a1 == a2) {
      goto LABEL_14;
    }
  }
  uint64_t v20 = *(int *)(a3 + 56);
  __int16 v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  _s10Foundation4DateVSgWOhTm_0(a1 + v20, type metadata accessor for ResolvedTextHelper.NextUpdate);
  uint64_t Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *__int16 v21 = *v22;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    uint64_t v25 = v24;
    uint64_t v26 = *(int *)(v24 + 48);
    uint64_t v27 = (char *)v21 + v26;
    char v28 = (char *)v22 + v26;
    uint64_t v29 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
    *((unsigned char *)v21 + *(int *)(v25 + 64)) = *((unsigned char *)v22 + *(int *)(v25 + 64));
    *(void *)((char *)v21 + *(int *)(v25 + 80)) = *(void *)((char *)v22 + *(int *)(v25 + 80));
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v21, v22, *(void *)(*(void *)(Update - 8) + 64));
  }
LABEL_14:
  *(void *)(a1 + *(int *)(a3 + 60)) = *(void *)(a2 + *(int *)(a3 + 60));
  return a1;
}

uint64_t outlined destroy of Text(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for ResolvedTextHelper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 14) = *(_DWORD *)(a2 + 14);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 64);
  uint64_t v7 = *(int *)(a3 + 56);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  uint64_t Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v8 = *v9;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    uint64_t v12 = v11;
    uint64_t v13 = *(int *)(v11 + 48);
    char v14 = (char *)v8 + v13;
    uint64_t v15 = (char *)v9 + v13;
    uint64_t v16 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
    *((unsigned char *)v8 + *(int *)(v12 + 64)) = *((unsigned char *)v9 + *(int *)(v12 + 64));
    *(void *)((char *)v8 + *(int *)(v12 + 80)) = *(void *)((char *)v9 + *(int *)(v12 + 80));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(Update - 8) + 64));
  }
  *(void *)(a1 + *(int *)(a3 + 60)) = *(void *)(a2 + *(int *)(a3 + 60));
  return a1;
}

uint64_t assignWithTake for ResolvedTextHelper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 13);
  *(_DWORD *)(a1 + 14) = *(_DWORD *)(a2 + 14);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  if (!*(void *)(a1 + 72))
  {
LABEL_6:
    long long v11 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v11;
    if (a1 == a2) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 72);
  if (!v6)
  {
    outlined destroy of Text(a1 + 48);
    goto LABEL_6;
  }
  char v7 = *(unsigned char *)(a2 + 64);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  char v10 = *(unsigned char *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = v7;
  outlined consume of Text.Storage(v8, v9, v10);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  if (a1 == a2) {
    goto LABEL_10;
  }
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 56);
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = (void *)(a2 + v12);
  _s10Foundation4DateVSgWOhTm_0(a1 + v12, type metadata accessor for ResolvedTextHelper.NextUpdate);
  uint64_t Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v13 = *v14;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    uint64_t v17 = v16;
    uint64_t v18 = *(int *)(v16 + 48);
    long long v19 = (char *)v13 + v18;
    uint64_t v20 = (char *)v14 + v18;
    uint64_t v21 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
    *((unsigned char *)v13 + *(int *)(v17 + 64)) = *((unsigned char *)v14 + *(int *)(v17 + 64));
    *(void *)((char *)v13 + *(int *)(v17 + 80)) = *(void *)((char *)v14 + *(int *)(v17 + 80));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(Update - 8) + 64));
  }
LABEL_10:
  *(void *)(a1 + *(int *)(a3 + 60)) = *(void *)(a2 + *(int *)(a3 + 60));
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedTextHelper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245CC8024);
}

uint64_t sub_245CC8024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Update - 8) + 48);
    uint64_t v10 = Update;
    uint64_t v11 = a1 + *(int *)(a3 + 56);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ResolvedTextHelper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245CC80E8);
}

uint64_t sub_245CC80E8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Update - 8) + 56);
    uint64_t v9 = Update;
    uint64_t v10 = v5 + *(int *)(a4 + 56);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ResolvedTextFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_70Tm);
}

uint64_t storeEnumTagSinglePayload for ResolvedTextFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_71Tm);
}

uint64_t instantiation function for generic protocol witness table for ResolvedTextFilter(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type ResolvedTextFilter and conformance ResolvedTextFilter(&lazy protocol witness table cache variable for type ResolvedTextFilter and conformance ResolvedTextFilter, (void (*)(uint64_t))type metadata accessor for ResolvedTextFilter);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ResolvedTextFilter()
{
  return lazy protocol witness table accessor for type ResolvedTextFilter and conformance ResolvedTextFilter(&lazy protocol witness table cache variable for type ResolvedTextFilter and conformance ResolvedTextFilter, (void (*)(uint64_t))type metadata accessor for ResolvedTextFilter);
}

unint64_t instantiation function for generic protocol witness table for Text.MakeRepresentableContext(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Text.MakeRepresentableContext and conformance Text.MakeRepresentableContext();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for TextLayoutQuery(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type TextLayoutQuery and conformance TextLayoutQuery();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for StyledTextLayoutComputer(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type StyledTextLayoutComputer and conformance StyledTextLayoutComputer();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for StyledTextContentView.ArchivedTransitionEnvironment(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type StyledTextContentView.ArchivedTransitionEnvironment and conformance StyledTextContentView.ArchivedTransitionEnvironment();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags()
{
  unint64_t result = lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags;
  if (!lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags;
  if (!lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags;
  if (!lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags;
  if (!lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags);
  }
  return result;
}

uint64_t outlined assign with take of ResolvedTextHelper.NextUpdate(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_245CC84EC()
{
  return swift_deallocObject();
}

double sub_245CC84FC@<D0>(uint64_t a1@<X8>)
{
  return ResolvedStyledText.schedule.getter(a1);
}

ValueMetadata *type metadata accessor for TextLayoutProperties.Key()
{
  return &type metadata for TextLayoutProperties.Key;
}

uint64_t getEnumTagSinglePayload for TextChildQuery(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 36)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TextChildQuery(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 36) = v3;
  return result;
}

void *initializeBufferWithCopyOfBuffer for ResolvedTextFilter(void *a1, void *a2, uint64_t a3)
{
  char v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *char v3 = *a2;
    char v3 = (void *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = (char *)a1 + v5;
    char v7 = (char *)a2 + v5;
    *(_DWORD *)uint64_t v6 = *(_DWORD *)((char *)a2 + v5);
    *(void *)(v6 + 4) = *(void *)((char *)a2 + v5 + 4);
    *((_WORD *)v6 + 6) = *(_WORD *)((char *)a2 + v5 + 12);
    *(_DWORD *)(v6 + 14) = *(_DWORD *)((char *)a2 + v5 + 14);
    v6[18] = *((unsigned char *)a2 + v5 + 18);
    *(_OWORD *)(v6 + 24) = *(_OWORD *)((char *)a2 + v5 + 24);
    *((void *)v6 + 5) = *(void *)((char *)a2 + v5 + 40);
    uint64_t v8 = *(void *)((char *)a2 + v5 + 72);
    swift_retain();
    if (v8)
    {
      uint64_t v9 = *((void *)v7 + 6);
      uint64_t v10 = *((void *)v7 + 7);
      char v11 = v7[64];
      outlined copy of Text.Storage(v9, v10, v11);
      *((void *)v6 + 6) = v9;
      *((void *)v6 + 7) = v10;
      v6[64] = v11;
      *((void *)v6 + 9) = v8;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v13 = *((_OWORD *)v7 + 4);
      *((_OWORD *)v6 + 3) = *((_OWORD *)v7 + 3);
      *((_OWORD *)v6 + 4) = v13;
    }
    uint64_t v14 = type metadata accessor for ResolvedTextHelper(0);
    uint64_t v15 = *(int *)(v14 + 56);
    uint64_t v16 = &v6[v15];
    uint64_t v17 = &v7[v15];
    uint64_t Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)uint64_t v16 = *(void *)v17;
      type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
      uint64_t v20 = v19;
      uint64_t v21 = *(int *)(v19 + 48);
      uint64_t v22 = &v16[v21];
      unint64_t v23 = &v17[v21];
      uint64_t v24 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
      v16[*(int *)(v20 + 64)] = v17[*(int *)(v20 + 64)];
      *(void *)&v16[*(int *)(v20 + 80)] = *(void *)&v17[*(int *)(v20 + 80)];
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v16, v17, *(void *)(*(void *)(Update - 8) + 64));
    }
    *(void *)&v6[*(int *)(v14 + 60)] = *(void *)&v7[*(int *)(v14 + 60)];
  }
  return v3;
}

_DWORD *assignWithCopy for ResolvedTextFilter(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  char v7 = (char *)a2 + v5;
  *(_DWORD *)uint64_t v6 = *(_DWORD *)((char *)a2 + v5);
  *((_DWORD *)v6 + 1) = *(_DWORD *)((char *)a2 + v5 + 4);
  *((_DWORD *)v6 + 2) = *(_DWORD *)((char *)a2 + v5 + 8);
  v6[12] = *((unsigned char *)a2 + v5 + 12);
  v6[13] = *((unsigned char *)a2 + v5 + 13);
  v6[14] = *((unsigned char *)a2 + v5 + 14);
  v6[15] = *((unsigned char *)a2 + v5 + 15);
  *((_WORD *)v6 + 8) = *(_WORD *)((char *)a2 + v5 + 16);
  v6[18] = *((unsigned char *)a2 + v5 + 18);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)((char *)a2 + v5 + 24);
  *((void *)v6 + 5) = *(void *)((char *)a2 + v5 + 40);
  swift_retain();
  swift_release();
  uint64_t v8 = v6 + 48;
  uint64_t v9 = v7 + 48;
  uint64_t v10 = *((void *)v7 + 9);
  if (*((void *)v6 + 9))
  {
    if (v10)
    {
      uint64_t v11 = *((void *)v7 + 6);
      uint64_t v12 = *((void *)v7 + 7);
      char v13 = v7[64];
      outlined copy of Text.Storage(v11, v12, v13);
      uint64_t v14 = *((void *)v6 + 6);
      uint64_t v15 = *((void *)v6 + 7);
      char v16 = v6[64];
      *((void *)v6 + 6) = v11;
      *((void *)v6 + 7) = v12;
      v6[64] = v13;
      outlined consume of Text.Storage(v14, v15, v16);
      *((void *)v6 + 9) = *((void *)v7 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text((uint64_t)(v6 + 48));
      long long v20 = *((_OWORD *)v7 + 4);
      *uint64_t v8 = *v9;
      *((_OWORD *)v6 + 4) = v20;
    }
  }
  else if (v10)
  {
    uint64_t v17 = *((void *)v7 + 6);
    uint64_t v18 = *((void *)v7 + 7);
    char v19 = v7[64];
    outlined copy of Text.Storage(v17, v18, v19);
    *((void *)v6 + 6) = v17;
    *((void *)v6 + 7) = v18;
    v6[64] = v19;
    *((void *)v6 + 9) = *((void *)v7 + 9);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v21 = *((_OWORD *)v7 + 4);
    *uint64_t v8 = *v9;
    *((_OWORD *)v6 + 4) = v21;
  }
  uint64_t v22 = type metadata accessor for ResolvedTextHelper(0);
  uint64_t v23 = v22;
  if (a1 != a2)
  {
    uint64_t v24 = *(int *)(v22 + 56);
    uint64_t v25 = &v6[v24];
    uint64_t v26 = &v7[v24];
    _s10Foundation4DateVSgWOhTm_0((uint64_t)&v6[v24], type metadata accessor for ResolvedTextHelper.NextUpdate);
    uint64_t Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)uint64_t v25 = *(void *)v26;
      type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
      uint64_t v29 = v28;
      uint64_t v30 = *(int *)(v28 + 48);
      uint64_t v31 = &v25[v30];
      unint64_t v32 = &v26[v30];
      uint64_t v33 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
      v25[*(int *)(v29 + 64)] = v26[*(int *)(v29 + 64)];
      *(void *)&v25[*(int *)(v29 + 80)] = *(void *)&v26[*(int *)(v29 + 80)];
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v25, v26, *(void *)(*(void *)(Update - 8) + 64));
    }
  }
  *(void *)&v6[*(int *)(v23 + 60)] = *(void *)&v7[*(int *)(v23 + 60)];
  return a1;
}

void *initializeWithTake for ResolvedTextFilter(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *(_DWORD *)uint64_t v5 = *(_DWORD *)((char *)a2 + v4);
  *(void *)(v5 + 4) = *(void *)((char *)a2 + v4 + 4);
  *((_WORD *)v5 + 6) = *(_WORD *)((char *)a2 + v4 + 12);
  *(_DWORD *)(v5 + 14) = *(_DWORD *)((char *)a2 + v4 + 14);
  v5[18] = *((unsigned char *)a2 + v4 + 18);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)((char *)a2 + v4 + 24);
  *((void *)v5 + 5) = *(void *)((char *)a2 + v4 + 40);
  long long v7 = *(_OWORD *)((char *)a2 + v4 + 64);
  *((_OWORD *)v5 + 3) = *(_OWORD *)((char *)a2 + v4 + 48);
  *((_OWORD *)v5 + 4) = v7;
  uint64_t v8 = type metadata accessor for ResolvedTextHelper(0);
  uint64_t v9 = *(int *)(v8 + 56);
  uint64_t v10 = &v5[v9];
  uint64_t v11 = &v6[v9];
  uint64_t Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(void *)uint64_t v10 = *(void *)v11;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    uint64_t v14 = v13;
    uint64_t v15 = *(int *)(v13 + 48);
    char v16 = &v10[v15];
    uint64_t v17 = &v11[v15];
    uint64_t v18 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
    v10[*(int *)(v14 + 64)] = v11[*(int *)(v14 + 64)];
    *(void *)&v10[*(int *)(v14 + 80)] = *(void *)&v11[*(int *)(v14 + 80)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(void *)(*(void *)(Update - 8) + 64));
  }
  *(void *)&v5[*(int *)(v8 + 60)] = *(void *)&v6[*(int *)(v8 + 60)];
  return a1;
}

void *assignWithTake for ResolvedTextFilter(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  long long v7 = (char *)a2 + v5;
  *(void *)uint64_t v6 = *(void *)((char *)a2 + v5);
  *((_DWORD *)v6 + 2) = *(_DWORD *)((char *)a2 + v5 + 8);
  v6[12] = *((unsigned char *)a2 + v5 + 12);
  v6[13] = *((unsigned char *)a2 + v5 + 13);
  *(_DWORD *)(v6 + 14) = *(_DWORD *)((char *)a2 + v5 + 14);
  v6[18] = *((unsigned char *)a2 + v5 + 18);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)((char *)a2 + v5 + 24);
  *((void *)v6 + 5) = *(void *)((char *)a2 + v5 + 40);
  swift_release();
  if (*((void *)v6 + 9))
  {
    uint64_t v8 = *((void *)v7 + 9);
    if (v8)
    {
      char v9 = v7[64];
      uint64_t v10 = *((void *)v6 + 6);
      uint64_t v11 = *((void *)v6 + 7);
      char v12 = v6[64];
      *((_OWORD *)v6 + 3) = *((_OWORD *)v7 + 3);
      v6[64] = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *((void *)v6 + 9) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text((uint64_t)(v6 + 48));
  }
  long long v13 = *((_OWORD *)v7 + 4);
  *((_OWORD *)v6 + 3) = *((_OWORD *)v7 + 3);
  *((_OWORD *)v6 + 4) = v13;
LABEL_6:
  uint64_t v14 = type metadata accessor for ResolvedTextHelper(0);
  uint64_t v15 = v14;
  if (a1 != a2)
  {
    uint64_t v16 = *(int *)(v14 + 56);
    uint64_t v17 = &v6[v16];
    uint64_t v18 = &v7[v16];
    _s10Foundation4DateVSgWOhTm_0((uint64_t)&v6[v16], type metadata accessor for ResolvedTextHelper.NextUpdate);
    uint64_t Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)uint64_t v17 = *(void *)v18;
      type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
      uint64_t v21 = v20;
      uint64_t v22 = *(int *)(v20 + 48);
      uint64_t v23 = &v17[v22];
      uint64_t v24 = &v18[v22];
      uint64_t v25 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
      v17[*(int *)(v21 + 64)] = v18[*(int *)(v21 + 64)];
      *(void *)&v17[*(int *)(v21 + 80)] = *(void *)&v18[*(int *)(v21 + 80)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v17, v18, *(void *)(*(void *)(Update - 8) + 64));
    }
  }
  *(void *)&v6[*(int *)(v15 + 60)] = *(void *)&v7[*(int *)(v15 + 60)];
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedOptionalTextFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245CC8DCC);
}

uint64_t __swift_get_extra_inhabitant_index_70Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = type metadata accessor for ResolvedTextHelper(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for ResolvedOptionalTextFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245CC8E54);
}

uint64_t __swift_store_extra_inhabitant_index_71Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = type metadata accessor for ResolvedTextHelper(0);
  long long v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

ValueMetadata *type metadata accessor for DynamicTextView()
{
  return &type metadata for DynamicTextView;
}

ValueMetadata *type metadata accessor for StyledTextLayoutEngine()
{
  return &type metadata for StyledTextLayoutEngine;
}

uint64_t instantiation function for generic protocol witness table for ResolvedOptionalTextFilter(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type ResolvedTextFilter and conformance ResolvedTextFilter((unint64_t *)&lazy protocol witness table cache variable for type ResolvedOptionalTextFilter and conformance ResolvedOptionalTextFilter, (void (*)(uint64_t))type metadata accessor for ResolvedOptionalTextFilter);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ResolvedOptionalTextFilter()
{
  return lazy protocol witness table accessor for type ResolvedTextFilter and conformance ResolvedTextFilter((unint64_t *)&lazy protocol witness table cache variable for type ResolvedOptionalTextFilter and conformance ResolvedOptionalTextFilter, (void (*)(uint64_t))type metadata accessor for ResolvedOptionalTextFilter);
}

uint64_t type metadata accessor for DynamicTextView.DynamicTextEnvironment(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for DynamicTextView.DynamicTextEnvironment);
}

uint64_t type metadata accessor for DynamicTextView.DynamicTextFilter(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for DynamicTextView.DynamicTextFilter);
}

unint64_t lazy protocol witness table accessor for type DynamicTextView.DynamicTextFrame and conformance DynamicTextView.DynamicTextFrame()
{
  unint64_t result = lazy protocol witness table cache variable for type DynamicTextView.DynamicTextFrame and conformance DynamicTextView.DynamicTextFrame;
  if (!lazy protocol witness table cache variable for type DynamicTextView.DynamicTextFrame and conformance DynamicTextView.DynamicTextFrame)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicTextView.DynamicTextFrame and conformance DynamicTextView.DynamicTextFrame);
  }
  return result;
}

uint64_t type metadata accessor for DynamicTextView.DynamicTextFilter.Value(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for DynamicTextView.DynamicTextFilter.Value);
}

uint64_t partial apply for implicit closure #1 in static DynamicTextView._makeView(view:inputs:)()
{
  type metadata accessor for DynamicTextView.DynamicTextFilter.Value(0);

  return AGGraphCreateOffsetAttribute2();
}

void type metadata accessor for _ContiguousArrayStorage<SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry>)
  {
    type metadata accessor for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>(255, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(void, void *))type metadata accessor for SizeFittingTextCache.CacheEntry);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry>);
    }
  }
}

void type metadata accessor for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void *))
{
  if (!*a2)
  {
    v6[0] = &type metadata for DynamicTextView.DynamicTextHelper;
    v6[1] = &type metadata for StickyTextSizeFittingLogic;
    _OWORD v6[2] = &protocol witness table for DynamicTextView.DynamicTextHelper;
    v6[3] = &protocol witness table for StickyTextSizeFittingLogic;
    unint64_t v4 = a3(0, v6);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_245CC9174()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in DynamicTextView.DynamicTextHelper.widthAdaptedText.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in closure #1 in closure #1 in DynamicTextView.DynamicTextHelper.widthAdaptedText.getter(a1, a2, a3, a4, *(void **)(v4 + 16), *(void *)(v4 + 24), *(unsigned char **)(v4 + 32));
}

uint64_t sub_245CC91B8()
{
  return swift_deallocObject();
}

uint64_t sub_245CC91C8()
{
  outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t destroy for DynamicTextView.DynamicTextHelper()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for DynamicTextView.DynamicTextHelper(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for DynamicTextView.DynamicTextHelper(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for DynamicTextView.DynamicTextHelper(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for DynamicTextView.DynamicTextHelper()
{
  return &type metadata for DynamicTextView.DynamicTextHelper;
}

uint64_t initializeBufferWithCopyOfBuffer for DynamicTextView.DynamicTextFilter.Value(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    char v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_retain();
    swift_retain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = v7 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    uint64_t v16 = *(uint64_t *)((char *)a2 + v13 + 24);
    if (v16)
    {
      uint64_t v17 = *(void *)(v15 + 32);
      *(void *)(v14 + 24) = v16;
      *(void *)(v14 + 32) = v17;
      (**(void (***)(void))(v16 - 8))();
    }
    else
    {
      long long v18 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *(_OWORD *)(v14 + 16) = v18;
      *(void *)(v14 + 32) = *(void *)(v15 + 32);
    }
  }
  return v7;
}

uint64_t destroy for DynamicTextView.DynamicTextFilter.Value(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t result = a1 + *(int *)(a2 + 24);
  if (*(void *)(result + 24)) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

uint64_t initializeWithCopy for DynamicTextView.DynamicTextFilter.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_retain();
  swift_retain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = *(void *)(a2 + v12 + 24);
  if (v15)
  {
    uint64_t v16 = *(void *)(v14 + 32);
    *(void *)(v13 + 24) = v15;
    *(void *)(v13 + 32) = v16;
    (**(void (***)(void))(v15 - 8))();
  }
  else
  {
    long long v17 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    *(_OWORD *)(v13 + 16) = v17;
    *(void *)(v13 + 32) = *(void *)(v14 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for DynamicTextView.DynamicTextFilter.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (long long *)(a2 + v10);
  uint64_t v13 = *((void *)v12 + 3);
  if (!*(void *)(a1 + v10 + 24))
  {
    if (v13)
    {
      *(void *)(v11 + 24) = v13;
      *(void *)(v11 + 32) = *((void *)v12 + 4);
      (**(void (***)(uint64_t, long long *))(v13 - 8))(v11, v12);
      return a1;
    }
LABEL_7:
    long long v14 = *v12;
    long long v15 = v12[1];
    *(void *)(v11 + 32) = *((void *)v12 + 4);
    *(_OWORD *)uint64_t v11 = v14;
    *(_OWORD *)(v11 + 16) = v15;
    return a1;
  }
  if (!v13)
  {
    __swift_destroy_boxed_opaque_existential_1(v11);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v11, (uint64_t *)v12);
  return a1;
}

uint64_t initializeWithTake for DynamicTextView.DynamicTextFilter.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  long long v13 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v13;
  *(void *)(v11 + 32) = *(void *)(v12 + 32);
  return a1;
}

uint64_t assignWithTake for DynamicTextView.DynamicTextFilter.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v10;
  if (*(void *)(a1 + v10 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + v10);
  }
  long long v12 = *(_OWORD *)(a2 + v10 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)(a2 + v10);
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 32) = *(void *)(a2 + v10 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicTextView.DynamicTextFilter.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245CC996C);
}

uint64_t sub_245CC996C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DynamicTextView.DynamicTextFilter.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245CC9A30);
}

void *sub_245CC9A30(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for DynamicTextView.DynamicTextFilter.Value()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *type metadata accessor for DynamicTextView.DynamicTextFrame()
{
  return &unk_26FA4F850;
}

void *initializeBufferWithCopyOfBuffer for DynamicTextView.DynamicTextFilter(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(void *)(a1 + 4) = *(uint64_t *)((char *)a2 + 4);
    *(void *)(a1 + 12) = *(uint64_t *)((char *)a2 + 12);
    *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
    uint64_t v5 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v5;
    uint64_t v6 = *(int *)(a3 + 48);
    uint64_t v7 = (uint64_t)a2 + v6;
    uint64_t v8 = a1 + v6;
    *(void *)(a1 + 40) = a2[5];
    uint64_t v9 = type metadata accessor for Date();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_retain();
    swift_retain();
    v10(v8, v7, v9);
  }
  return v3;
}

uint64_t destroy for DynamicTextView.DynamicTextFilter(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for DynamicTextView.DynamicTextFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(void *)(a1 + 12) = *(void *)(a2 + 12);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(int *)(a3 + 48);
  uint64_t v6 = a2 + v5;
  uint64_t v7 = a1 + v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_retain();
  swift_retain();
  v9(v7, v6, v8);
  return a1;
}

uint64_t assignWithCopy for DynamicTextView.DynamicTextFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 48);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for DynamicTextView.DynamicTextFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(void *)(a1 + 12) = *(void *)(a2 + 12);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 48);
  uint64_t v5 = a2 + v4;
  uint64_t v6 = a1 + v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, v5, v7);
  return a1;
}

uint64_t assignWithTake for DynamicTextView.DynamicTextFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 48);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicTextView.DynamicTextFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245CCA038);
}

uint64_t sub_245CCA038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 48);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DynamicTextView.DynamicTextFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245CCA0FC);
}

uint64_t sub_245CCA0FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 48);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for DynamicTextView.DynamicTextFilter()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for DynamicTextView.DynamicTextEnvironment(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for DynamicTextView.DynamicTextEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = type metadata accessor for Date();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t initializeWithCopy for DynamicTextView.DynamicTextEnvironment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for DynamicTextView.DynamicTextEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for DynamicTextView.DynamicTextEnvironment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for DynamicTextView.DynamicTextEnvironment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicTextView.DynamicTextEnvironment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245CCA5DC);
}

uint64_t sub_245CCA5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for DynamicTextView.DynamicTextEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245CCA660);
}

uint64_t sub_245CCA660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 28);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t type metadata completion function for DynamicTextView.DynamicTextEnvironment()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for DynamicTextView.DynamicTextEnvironment(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type ResolvedTextFilter and conformance ResolvedTextFilter(&lazy protocol witness table cache variable for type DynamicTextView.DynamicTextEnvironment and conformance DynamicTextView.DynamicTextEnvironment, (void (*)(uint64_t))type metadata accessor for DynamicTextView.DynamicTextEnvironment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in DynamicTextView.DynamicTextEnvironment()
{
  return lazy protocol witness table accessor for type ResolvedTextFilter and conformance ResolvedTextFilter(&lazy protocol witness table cache variable for type DynamicTextView.DynamicTextEnvironment and conformance DynamicTextView.DynamicTextEnvironment, (void (*)(uint64_t))type metadata accessor for DynamicTextView.DynamicTextEnvironment);
}

uint64_t instantiation function for generic protocol witness table for DynamicTextView.DynamicTextFilter(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type ResolvedTextFilter and conformance ResolvedTextFilter(&lazy protocol witness table cache variable for type DynamicTextView.DynamicTextFilter and conformance DynamicTextView.DynamicTextFilter, (void (*)(uint64_t))type metadata accessor for DynamicTextView.DynamicTextFilter);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in DynamicTextView.DynamicTextFilter()
{
  return lazy protocol witness table accessor for type ResolvedTextFilter and conformance ResolvedTextFilter(&lazy protocol witness table cache variable for type DynamicTextView.DynamicTextFilter and conformance DynamicTextView.DynamicTextFilter, (void (*)(uint64_t))type metadata accessor for DynamicTextView.DynamicTextFilter);
}

unint64_t instantiation function for generic protocol witness table for DynamicTextView.DynamicTextFrame(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type DynamicTextView.DynamicTextFrame and conformance DynamicTextView.DynamicTextFrame();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for SizeFittingTextResolver.Engine : LayoutEngine in DynamicTextView.DynamicTextHelper()
{
  return &protocol witness table for StyledTextLayoutEngine;
}

void *type metadata accessor for DynamicTextView.TextManager()
{
  return &unk_26FA4F808;
}

uint64_t AttributeCountTestInfo.merge(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v1;
  *unint64_t v1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v2, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v9);
  *unint64_t v1 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  char v6 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = v1[1];
  v1[1] = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v6, &v9);
  v1[1] = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  char v7 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = v1[2];
  v1[2] = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v4, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v7, &v9);
  v1[2] = v9;

  return swift_bridgeObjectRelease();
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 16);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 16) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t specialized static AttributeCountTestInfo.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v5 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v6 = a2[3];
  if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v2, v5) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v4, v7) & 1) == 0)
  {
    return 0;
  }

  return specialized static Dictionary<>.== infix(_:_:)(v3, v6);
}

uint64_t destroy for AttributeCountTestInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AttributeCountTestInfo(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AttributeCountTestInfo(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for AttributeCountTestInfo(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AttributeCountTestInfo()
{
  return &type metadata for AttributeCountTestInfo;
}

uint64_t static GestureStateProtocol.gesture<A, B>(content:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  v8[0] = a1;
  v8[1] = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for StateContainerGesture();
  swift_getWitnessTable();
  return Gesture.modifier<A>(_:)((uint64_t)v8, a3, v6, a4);
}

uint64_t StateContainerGesture.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t type metadata accessor for StateContainerGesture()
{
  return swift_getGenericMetadata();
}

uint64_t StateContainerGesture.body.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t StateContainerGesture.body.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*StateContainerGesture.body.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static StateContainerGesture._makeGesture(modifier:inputs:body:)@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v36 = a7;
  uint64_t v37 = a6;
  uint64_t v10 = a5;
  uint64_t v38 = a4;
  *(void *)&long long v41 = a3;
  uint64_t v40 = a9;
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  long long v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v48 = v16;
  *((void *)&v48 + 1) = v17;
  *(void *)&long long v49 = v18;
  *((void *)&v49 + 1) = v19;
  uint64_t v20 = type metadata accessor for StateContainerPhase();
  uint64_t v39 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v35 - v21;
  int v23 = *a1;
  long long v24 = a2[5];
  long long v52 = a2[4];
  long long v53 = v24;
  long long v54 = a2[6];
  long long v25 = a2[1];
  long long v48 = *a2;
  long long v49 = v25;
  long long v26 = a2[3];
  long long v50 = a2[2];
  long long v51 = v26;
  uint64_t v28 = *(void *)((char *)a2 + 116);
  int v55 = *((_DWORD *)a2 + 28);
  int v27 = v55;
  uint64_t v56 = v28;
  ((void (*)(void *__return_ptr, long long *))v41)(v42, &v48);
  uint64_t v29 = v42[1];
  LODWORD(v38) = v43;
  *(void *)&long long v30 = v42[0];
  long long v41 = v30;
  (*(void (**)(uint64_t, uint64_t))(a8 + 8))(v10, a8);
  *(_DWORD *)uint64_t v22 = v23;
  *((_DWORD *)v22 + 1) = v41;
  *((_DWORD *)v22 + 2) = v27;
  *(void *)&long long v48 = v10;
  *((void *)&v48 + 1) = v36;
  *(void *)&long long v49 = v37;
  *((void *)&v49 + 1) = a8;
  uint64_t v31 = type metadata accessor for StateContainerPhase();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v22[*(int *)(v31 + 60)], v15, v10);
  *(_DWORD *)&v22[*(int *)(v31 + 64)] = 0;
  uint64_t v45 = type metadata accessor for GesturePhase();
  uint64_t v46 = v20;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v32 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v22, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v44, v20, MEMORY[0x263F8E628], v32, MEMORY[0x263F8E658], v33);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v22, v20);
  LODWORD(v10) = v48;
  *(void *)&long long v48 = v41;
  *((void *)&v48 + 1) = v29;
  LODWORD(v49) = v38;
  type metadata accessor for _GestureOutputs();
  _GestureOutputs.withPhase<A>(_:)(v10, v40);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for StateContainerPhase()
{
  return swift_getGenericMetadata();
}

uint64_t StateContainerPhase.modifier.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for StateContainerGesture();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  return swift_retain();
}

uint64_t StateContainerPhase.childPhase.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance StateContainerGesture<A, B, C>@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  return static StateContainerGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a5[5], a6);
}

uint64_t StateContainerPhase.resetPhase()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, double))(*(void *)(v9 + 40) + 8))(v4, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 40))(v2 + *(int *)(a1 + 60), v8, v4);
}

uint64_t StateContainerPhase.updateValue()(uint64_t a1)
{
  _OWORD v16[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for GesturePhase();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  double v6 = (char *)&v16[-1] - v5;
  uint64_t v7 = type metadata accessor for GesturePhase();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v16[-1] - v9;
  swift_getWitnessTable();
  uint64_t result = ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    StateContainerPhase.modifier.getter(v16);
    long long v12 = (void (*)(uint64_t, char *))v16[0];
    StateContainerPhase.childPhase.getter((uint64_t)v6);
    v12(v1 + *(int *)(a1 + 60), v6);
    swift_release();
    uint64_t v13 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    MEMORY[0x270FA5388](v13);
    *(&v15 - 2) = a1;
    *(&v15 - 1) = swift_getWitnessTable();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v10, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v15 - 4), v7, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v14);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return result;
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.getter in conformance StateContainerPhase<A, B, C>(uint64_t a1)
{
  return *(unsigned int *)(v1 + *(int *)(a1 + 64));
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance StateContainerPhase<A, B, C>(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(v2 + *(int *)(a2 + 64)) = result;
  return result;
}

uint64_t (*protocol witness for ResettableGestureRule.lastResetSeed.modify in conformance StateContainerPhase<A, B, C>())(void, void)
{
  return _ViewInputs.base.modify;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance StateContainerPhase<A, B, C>()
{
  return specialized StateContainerPhase.description.getter();
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance StateContainerPhase<A, B, C>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_245CCBD04@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_245CCBD10(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_retain();
  uint64_t result = swift_release();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_245CCBD54()
{
  return 32;
}

__n128 sub_245CCBD60(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t dispatch thunk of GestureStateProtocol.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata completion function for StateContainerPhase()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StateContainerPhase(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + 3;
  if ((v5 | 3uLL) > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 12) & ~v5)) & 0xFFFFFFFFFFFFFFFCLL) + 4 > 0x18)
  {
    uint64_t v9 = *a2;
    *long long v3 = *a2;
    long long v3 = (uint64_t *)(v9 + ((v5 + 16) & ~(v5 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v10 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v11 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v10 = *v11;
    long long v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *long long v12 = *v13;
    uint64_t v14 = ((unint64_t)v12 + v5 + 4) & ~v5;
    uint64_t v15 = ((unint64_t)v13 + v5 + 4) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v14, v15);
    *(_DWORD *)((v6 + v14) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((v6 + v15) & 0xFFFFFFFFFFFFFFFCLL);
  }
  return v3;
}

_DWORD *initializeWithCopy for StateContainerPhase(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 4) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 4) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  *(_DWORD *)((*(void *)(v9 + 48) + 3 + v11) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v9 + 48) + 3 + v12) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *assignWithCopy for StateContainerPhase(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 4) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 4) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  *(_DWORD *)((*(void *)(v9 + 40) + 3 + v11) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v9 + 40) + 3 + v12) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *initializeWithTake for StateContainerPhase(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 4) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 4) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  *(_DWORD *)((*(void *)(v9 + 32) + 3 + v11) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v9 + 32) + 3 + v12) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *assignWithTake for StateContainerPhase(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 4) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 4) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  *(_DWORD *)((*(void *)(v9 + 24) + 3 + v11) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v9 + 24) + 3 + v12) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for StateContainerPhase(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v7 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 12) & ~v6) + 3) & 0xFFFFFFFFFFFFFFFCLL)
       + 4;
    unsigned int v8 = a2 - v5;
    uint64_t v9 = v7 & 0xFFFFFFFC;
    if ((v7 & 0xFFFFFFFC) != 0) {
      unsigned int v10 = 2;
    }
    else {
      unsigned int v10 = v8 + 1;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = *((unsigned __int8 *)a1 + v7);
        if (!v13) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v13 = *(unsigned __int16 *)((char *)a1 + v7);
        if (v13) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245CCC3B8);
      case 4:
        int v13 = *(_DWORD *)((char *)a1 + v7);
        if (!v13) {
          break;
        }
LABEL_18:
        int v14 = v13 - 1;
        if (v9)
        {
          int v14 = 0;
          LODWORD(v9) = *a1;
        }
        return v5 + (v9 | v14) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL)
  }
                                                                    + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                  + v6
                                                                  + 4) & ~v6);
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for StateContainerPhase(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v9 = ((*(void *)(v6 + 64) + ((v8 + 12) & ~v8) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if (v7 >= a3)
  {
    int v13 = 0;
    int v14 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v13)
      {
        case 1:
          a1[v9] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v9] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v9] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            unint64_t v17 = (((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v8 + 4) & ~v8;
            uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
            v18(v17);
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v10 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + ((v8 + 12) & ~v8) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v11 < 0x100) {
      int v12 = 1;
    }
    if (v11 >= 2) {
      int v13 = v12;
    }
    else {
      int v13 = 0;
    }
    int v14 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + ((v8 + 12) & ~v8) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC) {
    int v15 = v14;
  }
  else {
    int v15 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + ((v8 + 12) & ~v8) + 3) & 0xFFFFFFFC) != 0xFFFFFFFC)
  {
    unsigned int v16 = ~v7 + a2;
    bzero(a1, ((*(void *)(v6 + 64) + ((v8 + 12) & ~v8) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    *(_DWORD *)a1 = v16;
  }
  switch(v13)
  {
    case 1:
      a1[v9] = v15;
      break;
    case 2:
      *(_WORD *)&a1[v9] = v15;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245CCC5A4);
    case 4:
      *(_DWORD *)&a1[v9] = v15;
      break;
    default:
      return;
  }
}

uint64_t instantiation function for generic protocol witness table for StateContainerPhase<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in StateContainerPhase<A, B, C>()
{
  return swift_getWitnessTable();
}

unint64_t specialized StateContainerPhase.description.getter()
{
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x86E2206574617453;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI34CodableAccessibilityVersionStorageOyAF0F18ResolvedStyledTextVAF0gL0VGG_AF0L0Vs5NeverOTg503_s7d4UI43fg54DataSeriesConfigurationV04AxisG0V13configurationAA0defu9VADVvgAA4l8VAA0cD14hi8OyAA0c14jK62J0VAA0dJ0VGcfu_32f6f9bf4b0141814c023ba9cad627274bArKTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v26 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = v26;
    unsigned int v5 = (unsigned char *)(a1 + 50);
    while (1)
    {
      uint64_t v6 = *(void **)(v5 - 18);
      uint64_t v7 = *(void *)(v5 - 10);
      __int16 v8 = *((_WORD *)v5 - 1);
      if (*v5)
      {
        type metadata accessor for AccessibilityTextStorage();
        uint64_t v9 = swift_allocObject();
        *(void *)(v9 + 16) = v6;
        *(void *)(v9 + 24) = v7;
        *(unsigned char *)(v9 + 32) = v8 & 1;
        *(unsigned char *)(v9 + 33) = HIBYTE(v8) & 1;
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v6, v7, v8, 1);
      }
      else
      {
        unsigned int v10 = (void *)v6[27];
        if (v10)
        {
          unint64_t v25 = type metadata accessor for NSAttributedString();
          *(void *)&long long v24 = v10;
          char v23 = 0;
          uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v6, v7, v8, 0);
          unsigned int v19 = objc_msgSend(v10, sel_isKindOfClass_, ObjCClassFromMetadata);
          if (v19)
          {
            outlined init with take of Any(&v24, v22);
            swift_dynamicCast();
            uint64_t v12 = 0;
            uint64_t v18 = v20;
            char v13 = v23;
          }
          else
          {
            outlined init with copy of Any((uint64_t)&v24, (uint64_t)v22);
            if ((swift_dynamicCast() & 1) == 0)
            {
              uint64_t result = _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              return result;
            }
            uint64_t v12 = v21;
            uint64_t v18 = v20;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
            char v13 = 0;
          }
          type metadata accessor for AccessibilityTextStorage();
          uint64_t v9 = swift_allocObject();
          *(void *)(v9 + 16) = v18;
          *(void *)(v9 + 24) = v12;
          *(unsigned char *)(v9 + 32) = v19;
          *(unsigned char *)(v9 + 33) = v13;
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v6, v7, v8, 0);
          uint64_t v2 = MEMORY[0x263F8EE78];
        }
        else
        {
          type metadata accessor for LocalizedTextStorage();
          uint64_t v9 = swift_allocObject();
          *(void *)(v9 + 16) = 0;
          *(void *)(v9 + 24) = 0xE000000000000000;
          *(unsigned char *)(v9 + 32) = 0;
          *(void *)(v9 + 40) = v2;
          *(void *)(v9 + 48) = 0;
          *(void *)(v9 + 56) = 0;
          *(void *)(v9 + 64) = 0;
        }
      }
      uint64_t v26 = v4;
      unint64_t v15 = *(void *)(v4 + 16);
      unint64_t v14 = *(void *)(v4 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        uint64_t v4 = v26;
      }
      v5 += 24;
      *(void *)(v4 + 16) = v15 + 1;
      uint64_t v16 = v4 + 32 * v15;
      *(void *)(v16 + 32) = v9;
      *(void *)(v16 + 40) = 0;
      *(unsigned char *)(v16 + 48) = 1;
      *(void *)(v16 + 56) = v2;
      if (!--v1) {
        return v4;
      }
    }
  }
  return MEMORY[0x263F8EE78];
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI43CodableAccessibilityDataSeriesConfigurationV16ValueDescriptionVG_AF0ghiJ0VAIVs5NeverOTg503_s7d4UI43fghij31V04AxisG0V13configurationAA0defr10VADVvgAH16kL58VAcJVcfu0_33_21c9bbe930dcb26c694134c0e56303c8AlKTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v31 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = v31;
    for (i = (_OWORD *)(a1 + 56); ; i = (_OWORD *)((char *)i + 40))
    {
      uint64_t v7 = (void *)*((void *)i - 3);
      uint64_t v6 = *((void *)i - 2);
      unsigned int v8 = *((unsigned __int16 *)i - 4) | (*((unsigned __int8 *)i - 6) << 16);
      long long v24 = *i;
      if (*((unsigned __int8 *)i - 6) == 255)
      {
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v7, v6, v8);
        long long v13 = xmmword_2461D6590;
      }
      else if (((*((unsigned __int8 *)i - 6) << 16) & 0x10000) != 0)
      {
        type metadata accessor for AccessibilityTextStorage();
        uint64_t v14 = swift_allocObject();
        *(void *)(v14 + 16) = v7;
        *(void *)(v14 + 24) = v6;
        *(unsigned char *)(v14 + 32) = v8 & 1;
        *(unsigned char *)(v14 + 33) = BYTE1(v8) & 1;
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v7, v6, v8);
        long long v13 = (unint64_t)v14;
      }
      else
      {
        uint64_t v9 = (void *)v7[27];
        if (v9)
        {
          unint64_t v30 = type metadata accessor for NSAttributedString();
          *(void *)&long long v29 = v9;
          char v28 = 0;
          uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v7, v6, v8);
          unsigned int v22 = objc_msgSend(v9, sel_isKindOfClass_, ObjCClassFromMetadata);
          if (v22)
          {
            outlined init with take of Any(&v29, v27);
            swift_dynamicCast();
            uint64_t v11 = 0;
            uint64_t v21 = v25;
            char v12 = v28;
          }
          else
          {
            outlined init with copy of Any((uint64_t)&v29, (uint64_t)v27);
            if ((swift_dynamicCast() & 1) == 0)
            {
              uint64_t result = _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              return result;
            }
            uint64_t v11 = v26;
            uint64_t v21 = v25;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
            char v12 = 0;
          }
          type metadata accessor for AccessibilityTextStorage();
          uint64_t v16 = swift_allocObject();
          *(void *)(v16 + 16) = v21;
          *(void *)(v16 + 24) = v11;
          *(unsigned char *)(v16 + 32) = v22;
          *(unsigned char *)(v16 + 33) = v12;
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v7, v6, v8);
          long long v13 = (unint64_t)v16;
          uint64_t v2 = MEMORY[0x263F8EE78];
        }
        else
        {
          type metadata accessor for LocalizedTextStorage();
          uint64_t v15 = swift_allocObject();
          *(void *)(v15 + 16) = 0;
          *(void *)(v15 + 24) = 0xE000000000000000;
          *(unsigned char *)(v15 + 32) = 0;
          *(void *)(v15 + 40) = v2;
          *(void *)(v15 + 48) = 0;
          *(void *)(v15 + 56) = 0;
          *(void *)(v15 + 64) = 0;
          long long v13 = (unint64_t)v15;
        }
      }
      uint64_t v31 = v4;
      unint64_t v18 = *(void *)(v4 + 16);
      unint64_t v17 = *(void *)(v4 + 24);
      if (v18 >= v17 >> 1)
      {
        long long v23 = v13;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        long long v13 = v23;
        uint64_t v4 = v31;
      }
      *(void *)(v4 + 16) = v18 + 1;
      uint64_t v19 = v4 + 48 * v18;
      *(_OWORD *)(v19 + 32) = v13;
      *(unsigned char *)(v19 + 48) = v8 < 0xFF0000;
      *(void *)(v19 + 56) = v2;
      *(_OWORD *)(v19 + 64) = v24;
      if (!--v1) {
        return v4;
      }
    }
  }
  return MEMORY[0x263F8EE78];
}

uint64_t AccessibilityDataSeriesConfiguration.ValueDescription.description.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Text.Storage(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityDataSeriesConfiguration.ValueDescription.description.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  outlined consume of Text.Storage(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v4 = a1;
  *(void *)(v4 + 8) = a2;
  *(unsigned char *)(v4 + 16) = a3 & 1;
  *(void *)(v4 + 24) = a4;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.ValueDescription.description.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double AccessibilityDataSeriesConfiguration.ValueDescription.effectiveValueRange.getter()
{
  return *(double *)(v0 + 32);
}

void AccessibilityDataSeriesConfiguration.ValueDescription.effectiveValueRange.setter(double a1, double a2)
{
  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*AccessibilityDataSeriesConfiguration.ValueDescription.effectiveValueRange.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.ValueDescription.init(description:effectiveValueRange:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  *(void *)a5 = result;
  *(void *)(a5 + 8) = a2;
  *(unsigned char *)(a5 + 16) = a3 & 1;
  *(void *)(a5 + 24) = a4;
  *(double *)(a5 + 32) = a6;
  *(double *)(a5 + 40) = a7;
  return result;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.title.getter()
{
  uint64_t v1 = *v0;
  outlined copy of Text?(*v0, v0[1], v0[2], v0[3]);
  return v1;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.title.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = outlined consume of Text?(*v4, v4[1], v4[2], v4[3]);
  *uint64_t v4 = a1;
  v4[1] = a2;
  _OWORD v4[2] = a3;
  v4[3] = a4;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.AxisConfiguration.title.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.unitLabel.getter()
{
  uint64_t v1 = v0[4];
  outlined copy of Text?(v1, v0[5], v0[6], v0[7]);
  return v1;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.unitLabel.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = outlined consume of Text?(v4[4], v4[5], v4[6], v4[7]);
  v4[4] = a1;
  v4[5] = a2;
  v4[6] = a3;
  v4[7] = a4;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.AxisConfiguration.unitLabel.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.categoryLabels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.categoryLabels.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 64) = a1;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.AxisConfiguration.categoryLabels.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.minimumValue.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.minimumValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 72) = result;
  *(unsigned char *)(v2 + 80) = a2 & 1;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.AxisConfiguration.minimumValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.maximumValue.getter()
{
  return *(void *)(v0 + 88);
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.maximumValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 88) = result;
  *(unsigned char *)(v2 + 96) = a2 & 1;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.AxisConfiguration.maximumValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.gridlinePositions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.gridlinePositions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 104) = a1;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.AxisConfiguration.gridlinePositions.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.values.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.values.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 112) = a1;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.AxisConfiguration.values.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.valueDescriptions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.valueDescriptions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 120) = a1;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.AxisConfiguration.valueDescriptions.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 AccessibilityDataSeriesConfiguration.AxisConfiguration.init(title:unitLabel:categoryLabels:minimumValue:maximumValue:gridlinePositions:values:valueDescriptions:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, __n128 a15, uint64_t a16)
{
  __n128 result = a15;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = a10;
  *(void *)(a9 + 72) = a11;
  *(unsigned char *)(a9 + 80) = a12 & 1;
  *(void *)(a9 + 88) = a13;
  *(unsigned char *)(a9 + 96) = a14 & 1;
  *(__n128 *)(a9 + 104) = a15;
  *(void *)(a9 + 120) = a16;
  return result;
}

SwiftUI::AccessibilityDataSeriesConfiguration::DataSeriesType_optional __swiftcall AccessibilityDataSeriesConfiguration.DataSeriesType.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (SwiftUI::AccessibilityDataSeriesConfiguration::DataSeriesType_optional)rawValue;
}

uint64_t AccessibilityDataSeriesConfiguration.DataSeriesType.rawValue.getter()
{
  return *v0;
}

SwiftUI::AccessibilityDataSeriesConfiguration::DataSeriesType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityDataSeriesConfiguration.DataSeriesType(Swift::Int *a1)
{
  return AccessibilityDataSeriesConfiguration.DataSeriesType.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityDataSeriesConfiguration.DataSeriesType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityDataSeriesConfiguration.DataSeriesType()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t AccessibilityDataSeriesConfiguration.name.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Text.Storage(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityDataSeriesConfiguration.name.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  outlined consume of Text.Storage(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v4 = a1;
  *(void *)(v4 + 8) = a2;
  *(unsigned char *)(v4 + 16) = a3 & 1;
  *(void *)(v4 + 24) = a4;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.name.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void AccessibilityDataSeriesConfiguration.type.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 32);
}

unsigned char *AccessibilityDataSeriesConfiguration.type.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 32) = *result;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.type.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.supportsSonification.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t AccessibilityDataSeriesConfiguration.supportsSonification.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 33) = result;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.supportsSonification.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.sonificationDuration.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t AccessibilityDataSeriesConfiguration.sonificationDuration.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 40) = result;
  *(unsigned char *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.sonificationDuration.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.includesTrendlineInSonification.getter()
{
  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t AccessibilityDataSeriesConfiguration.includesTrendlineInSonification.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 49) = result;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.includesTrendlineInSonification.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.supportsSummarization.getter()
{
  return *(unsigned __int8 *)(v0 + 50);
}

uint64_t AccessibilityDataSeriesConfiguration.supportsSummarization.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 50) = result;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.supportsSummarization.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void *AccessibilityDataSeriesConfiguration.xAxisConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v1 + 56, (uint64_t)v4);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v4, a1);
  return outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
}

uint64_t outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityDataSeriesConfiguration.AxisConfiguration?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AccessibilityDataSeriesConfiguration.xAxisConfiguration.setter(uint64_t a1)
{
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a1, (uint64_t)v3);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v1 + 56, (uint64_t)v4);
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  return outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v3, v1 + 56);
}

void *outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t (*AccessibilityDataSeriesConfiguration.xAxisConfiguration.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void *AccessibilityDataSeriesConfiguration.yAxisConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v1 + 184, (uint64_t)v4);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v4, a1);
  return outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
}

uint64_t AccessibilityDataSeriesConfiguration.yAxisConfiguration.setter(uint64_t a1)
{
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a1, (uint64_t)v3);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v1 + 184, (uint64_t)v4);
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  return outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v3, v1 + 184);
}

uint64_t (*AccessibilityDataSeriesConfiguration.yAxisConfiguration.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void *AccessibilityDataSeriesConfiguration.init(name:type:supportsSonification:sonificationDuration:includesTrendlineInSonification:supportsSummarization:xAxisConfiguration:yAxisConfiguration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char *a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, void *a9@<X8>, __int16 a10, uint64_t a11, uint64_t a12)
{
  char v18 = *a5;
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a11, (uint64_t)v22);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a12, (uint64_t)v23);
  __src[0] = a1;
  __src[1] = a2;
  LOBYTE(__src[2]) = a3 & 1;
  __src[3] = a4;
  LOBYTE(__src[4]) = v18;
  BYTE1(__src[4]) = a6;
  __src[5] = a7;
  LOBYTE(__src[6]) = a8 & 1;
  *(_WORD *)((char *)&__src[6] + 1) = a10;
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v22, (uint64_t)&__src[7]);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v23, (uint64_t)&__src[23]);
  return memcpy(a9, __src, 0x138uLL);
}

unint64_t lazy protocol witness table accessor for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType;
  if (!lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType;
  if (!lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType;
  if (!lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType;
  if (!lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType);
  }
  return result;
}

uint64_t destroy for AccessibilityDataSeriesConfiguration(uint64_t a1)
{
  outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 120))
  {
    if (*(void *)(a1 + 80))
    {
      outlined consume of Text.Storage(*(void *)(a1 + 56), *(void *)(a1 + 64), *(unsigned char *)(a1 + 72));
      swift_bridgeObjectRelease();
    }
    if (*(void *)(a1 + 112))
    {
      outlined consume of Text.Storage(*(void *)(a1 + 88), *(void *)(a1 + 96), *(unsigned char *)(a1 + 104));
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 248))
  {
    if (*(void *)(a1 + 208))
    {
      outlined consume of Text.Storage(*(void *)(a1 + 184), *(void *)(a1 + 192), *(unsigned char *)(a1 + 200));
      swift_bridgeObjectRelease();
    }
    if (*(void *)(a1 + 240))
    {
      outlined consume of Text.Storage(*(void *)(a1 + 216), *(void *)(a1 + 224), *(unsigned char *)(a1 + 232));
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityDataSeriesConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 49);
  uint64_t v7 = (_OWORD *)(a1 + 56);
  unsigned int v8 = (_OWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  if (!v9)
  {
    long long v18 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v18;
    long long v19 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v19;
    long long v20 = *(_OWORD *)(a2 + 72);
    *uint64_t v7 = *v8;
    *(_OWORD *)(a1 + 72) = v20;
    long long v21 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v21;
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(a2 + 80);
  if (!v10)
  {
    long long v22 = *(_OWORD *)(a2 + 72);
    *uint64_t v7 = *v8;
    *(_OWORD *)(a1 + 72) = v22;
    uint64_t v14 = *(void *)(a2 + 112);
    if (v14) {
      goto LABEL_4;
    }
LABEL_7:
    long long v23 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v23;
    goto LABEL_8;
  }
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 64);
  char v13 = *(unsigned char *)(a2 + 72);
  outlined copy of Text.Storage(v11, v12, v13);
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v12;
  *(unsigned char *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v10;
  swift_bridgeObjectRetain();
  uint64_t v14 = *(void *)(a2 + 112);
  if (!v14) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  char v17 = *(unsigned char *)(a2 + 104);
  outlined copy of Text.Storage(v15, v16, v17);
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(unsigned char *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v14;
  swift_bridgeObjectRetain();
LABEL_8:
  uint64_t v24 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = v9;
  *(void *)(a1 + 128) = v24;
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  uint64_t v25 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v25;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_9:
  uint64_t v26 = (_OWORD *)(a1 + 184);
  int v27 = (_OWORD *)(a2 + 184);
  uint64_t v28 = *(void *)(a2 + 248);
  if (v28)
  {
    uint64_t v29 = *(void *)(a2 + 208);
    if (v29)
    {
      uint64_t v30 = *(void *)(a2 + 184);
      uint64_t v31 = *(void *)(a2 + 192);
      char v32 = *(unsigned char *)(a2 + 200);
      outlined copy of Text.Storage(v30, v31, v32);
      *(void *)(a1 + 184) = v30;
      *(void *)(a1 + 192) = v31;
      *(unsigned char *)(a1 + 200) = v32;
      *(void *)(a1 + 208) = v29;
      swift_bridgeObjectRetain();
      uint64_t v33 = *(void *)(a2 + 240);
      if (v33)
      {
LABEL_12:
        uint64_t v34 = *(void *)(a2 + 216);
        uint64_t v35 = *(void *)(a2 + 224);
        char v36 = *(unsigned char *)(a2 + 232);
        outlined copy of Text.Storage(v34, v35, v36);
        *(void *)(a1 + 216) = v34;
        *(void *)(a1 + 224) = v35;
        *(unsigned char *)(a1 + 232) = v36;
        *(void *)(a1 + 240) = v33;
        swift_bridgeObjectRetain();
LABEL_16:
        uint64_t v43 = *(void *)(a2 + 256);
        *(void *)(a1 + 248) = v28;
        *(void *)(a1 + 256) = v43;
        *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
        *(void *)(a1 + 272) = *(void *)(a2 + 272);
        *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
        uint64_t v44 = *(void *)(a2 + 296);
        *(void *)(a1 + 288) = *(void *)(a2 + 288);
        *(void *)(a1 + 296) = v44;
        *(void *)(a1 + 304) = *(void *)(a2 + 304);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return a1;
      }
    }
    else
    {
      long long v41 = *(_OWORD *)(a2 + 200);
      *uint64_t v26 = *v27;
      *(_OWORD *)(a1 + 200) = v41;
      uint64_t v33 = *(void *)(a2 + 240);
      if (v33) {
        goto LABEL_12;
      }
    }
    long long v42 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v42;
    goto LABEL_16;
  }
  long long v37 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = v37;
  long long v38 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v38;
  long long v39 = *(_OWORD *)(a2 + 200);
  *uint64_t v26 = *v27;
  *(_OWORD *)(a1 + 200) = v39;
  long long v40 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v40;
  return a1;
}

uint64_t assignWithCopy for AccessibilityDataSeriesConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v10 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  uint64_t v11 = (long long *)(a1 + 56);
  uint64_t v12 = (long long *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 120);
  if (!*(void *)(a1 + 120))
  {
    if (!v13)
    {
      long long v36 = *v12;
      long long v37 = *(_OWORD *)(a2 + 72);
      long long v38 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v38;
      *uint64_t v11 = v36;
      *(_OWORD *)(a1 + 72) = v37;
      long long v39 = *(_OWORD *)(a2 + 120);
      long long v40 = *(_OWORD *)(a2 + 136);
      long long v41 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v41;
      *(_OWORD *)(a1 + 120) = v39;
      *(_OWORD *)(a1 + 136) = v40;
      goto LABEL_27;
    }
    if (*(void *)(a2 + 80))
    {
      uint64_t v21 = *(void *)(a2 + 56);
      uint64_t v22 = *(void *)(a2 + 64);
      char v23 = *(unsigned char *)(a2 + 72);
      outlined copy of Text.Storage(v21, v22, v23);
      *(void *)(a1 + 56) = v21;
      *(void *)(a1 + 64) = v22;
      *(unsigned char *)(a1 + 72) = v23;
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      if (*(void *)(a2 + 112))
      {
LABEL_9:
        uint64_t v24 = *(void *)(a2 + 88);
        uint64_t v25 = *(void *)(a2 + 96);
        char v26 = *(unsigned char *)(a2 + 104);
        outlined copy of Text.Storage(v24, v25, v26);
        *(void *)(a1 + 88) = v24;
        *(void *)(a1 + 96) = v25;
        *(unsigned char *)(a1 + 104) = v26;
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        swift_bridgeObjectRetain();
LABEL_17:
        *(void *)(a1 + 120) = *(void *)(a2 + 120);
        uint64_t v45 = *(void *)(a2 + 128);
        *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
        *(void *)(a1 + 128) = v45;
        uint64_t v46 = *(void *)(a2 + 144);
        *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
        *(void *)(a1 + 144) = v46;
        *(void *)(a1 + 160) = *(void *)(a2 + 160);
        *(void *)(a1 + 168) = *(void *)(a2 + 168);
        *(void *)(a1 + 176) = *(void *)(a2 + 176);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_27;
      }
    }
    else
    {
      long long v43 = *(_OWORD *)(a2 + 72);
      *uint64_t v11 = *v12;
      *(_OWORD *)(a1 + 72) = v43;
      if (*(void *)(a2 + 112)) {
        goto LABEL_9;
      }
    }
    long long v44 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v44;
    goto LABEL_17;
  }
  if (v13)
  {
    uint64_t v14 = *(void *)(a2 + 80);
    if (*(void *)(a1 + 80))
    {
      if (v14)
      {
        uint64_t v15 = *(void *)(a2 + 56);
        uint64_t v16 = *(void *)(a2 + 64);
        char v17 = *(unsigned char *)(a2 + 72);
        outlined copy of Text.Storage(v15, v16, v17);
        uint64_t v18 = *(void *)(a1 + 56);
        uint64_t v19 = *(void *)(a1 + 64);
        char v20 = *(unsigned char *)(a1 + 72);
        *(void *)(a1 + 56) = v15;
        *(void *)(a1 + 64) = v16;
        *(unsigned char *)(a1 + 72) = v17;
        outlined consume of Text.Storage(v18, v19, v20);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 56);
        long long v42 = *(_OWORD *)(a2 + 72);
        *uint64_t v11 = *v12;
        *(_OWORD *)(a1 + 72) = v42;
      }
    }
    else if (v14)
    {
      uint64_t v33 = *(void *)(a2 + 56);
      uint64_t v34 = *(void *)(a2 + 64);
      char v35 = *(unsigned char *)(a2 + 72);
      outlined copy of Text.Storage(v33, v34, v35);
      *(void *)(a1 + 56) = v33;
      *(void *)(a1 + 64) = v34;
      *(unsigned char *)(a1 + 72) = v35;
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v47 = *(_OWORD *)(a2 + 72);
      *uint64_t v11 = *v12;
      *(_OWORD *)(a1 + 72) = v47;
    }
    long long v48 = (_OWORD *)(a1 + 88);
    long long v49 = (_OWORD *)(a2 + 88);
    uint64_t v50 = *(void *)(a2 + 112);
    if (*(void *)(a1 + 112))
    {
      if (v50)
      {
        uint64_t v51 = *(void *)(a2 + 88);
        uint64_t v52 = *(void *)(a2 + 96);
        char v53 = *(unsigned char *)(a2 + 104);
        outlined copy of Text.Storage(v51, v52, v53);
        uint64_t v54 = *(void *)(a1 + 88);
        uint64_t v55 = *(void *)(a1 + 96);
        char v56 = *(unsigned char *)(a1 + 104);
        *(void *)(a1 + 88) = v51;
        *(void *)(a1 + 96) = v52;
        *(unsigned char *)(a1 + 104) = v53;
        outlined consume of Text.Storage(v54, v55, v56);
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 88);
        long long v60 = *(_OWORD *)(a2 + 104);
        *long long v48 = *v49;
        *(_OWORD *)(a1 + 104) = v60;
      }
    }
    else if (v50)
    {
      uint64_t v57 = *(void *)(a2 + 88);
      uint64_t v58 = *(void *)(a2 + 96);
      char v59 = *(unsigned char *)(a2 + 104);
      outlined copy of Text.Storage(v57, v58, v59);
      *(void *)(a1 + 88) = v57;
      *(void *)(a1 + 96) = v58;
      *(unsigned char *)(a1 + 104) = v59;
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v61 = *(_OWORD *)(a2 + 104);
      *long long v48 = *v49;
      *(_OWORD *)(a1 + 104) = v61;
    }
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v62 = *(void *)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *(void *)(a1 + 128) = v62;
    LOBYTE(v62) = *(unsigned char *)(a2 + 152);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(unsigned char *)(a1 + 152) = v62;
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 56);
    long long v27 = *(_OWORD *)(a2 + 104);
    long long v29 = *v12;
    long long v28 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v27;
    *uint64_t v11 = v29;
    *(_OWORD *)(a1 + 72) = v28;
    long long v30 = *(_OWORD *)(a2 + 168);
    long long v32 = *(_OWORD *)(a2 + 120);
    long long v31 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v30;
    *(_OWORD *)(a1 + 120) = v32;
    *(_OWORD *)(a1 + 136) = v31;
  }
LABEL_27:
  uint64_t v63 = (long long *)(a1 + 184);
  uint64_t v64 = (long long *)(a2 + 184);
  uint64_t v65 = *(void *)(a2 + 248);
  if (!*(void *)(a1 + 248))
  {
    if (!v65)
    {
      long long v88 = *v64;
      long long v89 = *(_OWORD *)(a2 + 200);
      long long v90 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = v90;
      *uint64_t v63 = v88;
      *(_OWORD *)(a1 + 200) = v89;
      long long v91 = *(_OWORD *)(a2 + 248);
      long long v92 = *(_OWORD *)(a2 + 264);
      long long v93 = *(_OWORD *)(a2 + 296);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 296) = v93;
      *(_OWORD *)(a1 + 248) = v91;
      *(_OWORD *)(a1 + 264) = v92;
      return a1;
    }
    if (*(void *)(a2 + 208))
    {
      uint64_t v73 = *(void *)(a2 + 184);
      uint64_t v74 = *(void *)(a2 + 192);
      char v75 = *(unsigned char *)(a2 + 200);
      outlined copy of Text.Storage(v73, v74, v75);
      *(void *)(a1 + 184) = v73;
      *(void *)(a1 + 192) = v74;
      *(unsigned char *)(a1 + 200) = v75;
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      swift_bridgeObjectRetain();
      if (*(void *)(a2 + 240))
      {
LABEL_35:
        uint64_t v76 = *(void *)(a2 + 216);
        uint64_t v77 = *(void *)(a2 + 224);
        char v78 = *(unsigned char *)(a2 + 232);
        outlined copy of Text.Storage(v76, v77, v78);
        *(void *)(a1 + 216) = v76;
        *(void *)(a1 + 224) = v77;
        *(unsigned char *)(a1 + 232) = v78;
        *(void *)(a1 + 240) = *(void *)(a2 + 240);
        swift_bridgeObjectRetain();
LABEL_43:
        *(void *)(a1 + 248) = *(void *)(a2 + 248);
        uint64_t v97 = *(void *)(a2 + 256);
        *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
        *(void *)(a1 + 256) = v97;
        uint64_t v98 = *(void *)(a2 + 272);
        *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
        *(void *)(a1 + 272) = v98;
        *(void *)(a1 + 288) = *(void *)(a2 + 288);
        *(void *)(a1 + 296) = *(void *)(a2 + 296);
        *(void *)(a1 + 304) = *(void *)(a2 + 304);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return a1;
      }
    }
    else
    {
      long long v95 = *(_OWORD *)(a2 + 200);
      *uint64_t v63 = *v64;
      *(_OWORD *)(a1 + 200) = v95;
      if (*(void *)(a2 + 240)) {
        goto LABEL_35;
      }
    }
    long long v96 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v96;
    goto LABEL_43;
  }
  if (v65)
  {
    uint64_t v66 = *(void *)(a2 + 208);
    if (*(void *)(a1 + 208))
    {
      if (v66)
      {
        uint64_t v67 = *(void *)(a2 + 184);
        uint64_t v68 = *(void *)(a2 + 192);
        char v69 = *(unsigned char *)(a2 + 200);
        outlined copy of Text.Storage(v67, v68, v69);
        uint64_t v70 = *(void *)(a1 + 184);
        uint64_t v71 = *(void *)(a1 + 192);
        char v72 = *(unsigned char *)(a1 + 200);
        *(void *)(a1 + 184) = v67;
        *(void *)(a1 + 192) = v68;
        *(unsigned char *)(a1 + 200) = v69;
        outlined consume of Text.Storage(v70, v71, v72);
        *(void *)(a1 + 208) = *(void *)(a2 + 208);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 184);
        long long v94 = *(_OWORD *)(a2 + 200);
        *uint64_t v63 = *v64;
        *(_OWORD *)(a1 + 200) = v94;
      }
    }
    else if (v66)
    {
      uint64_t v85 = *(void *)(a2 + 184);
      uint64_t v86 = *(void *)(a2 + 192);
      char v87 = *(unsigned char *)(a2 + 200);
      outlined copy of Text.Storage(v85, v86, v87);
      *(void *)(a1 + 184) = v85;
      *(void *)(a1 + 192) = v86;
      *(unsigned char *)(a1 + 200) = v87;
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v99 = *(_OWORD *)(a2 + 200);
      *uint64_t v63 = *v64;
      *(_OWORD *)(a1 + 200) = v99;
    }
    long long v100 = (_OWORD *)(a1 + 216);
    long long v101 = (_OWORD *)(a2 + 216);
    uint64_t v102 = *(void *)(a2 + 240);
    if (*(void *)(a1 + 240))
    {
      if (v102)
      {
        uint64_t v103 = *(void *)(a2 + 216);
        uint64_t v104 = *(void *)(a2 + 224);
        char v105 = *(unsigned char *)(a2 + 232);
        outlined copy of Text.Storage(v103, v104, v105);
        uint64_t v106 = *(void *)(a1 + 216);
        uint64_t v107 = *(void *)(a1 + 224);
        char v108 = *(unsigned char *)(a1 + 232);
        *(void *)(a1 + 216) = v103;
        *(void *)(a1 + 224) = v104;
        *(unsigned char *)(a1 + 232) = v105;
        outlined consume of Text.Storage(v106, v107, v108);
        *(void *)(a1 + 240) = *(void *)(a2 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 216);
        long long v112 = *(_OWORD *)(a2 + 232);
        *long long v100 = *v101;
        *(_OWORD *)(a1 + 232) = v112;
      }
    }
    else if (v102)
    {
      uint64_t v109 = *(void *)(a2 + 216);
      uint64_t v110 = *(void *)(a2 + 224);
      char v111 = *(unsigned char *)(a2 + 232);
      outlined copy of Text.Storage(v109, v110, v111);
      *(void *)(a1 + 216) = v109;
      *(void *)(a1 + 224) = v110;
      *(unsigned char *)(a1 + 232) = v111;
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v113 = *(_OWORD *)(a2 + 232);
      *long long v100 = *v101;
      *(_OWORD *)(a1 + 232) = v113;
    }
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v114 = *(void *)(a2 + 256);
    *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
    *(void *)(a1 + 256) = v114;
    LOBYTE(v114) = *(unsigned char *)(a2 + 280);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(unsigned char *)(a1 + 280) = v114;
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 184);
    long long v79 = *(_OWORD *)(a2 + 232);
    long long v81 = *v64;
    long long v80 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v79;
    *uint64_t v63 = v81;
    *(_OWORD *)(a1 + 200) = v80;
    long long v82 = *(_OWORD *)(a2 + 296);
    long long v84 = *(_OWORD *)(a2 + 248);
    long long v83 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 296) = v82;
    *(_OWORD *)(a1 + 248) = v84;
    *(_OWORD *)(a1 + 264) = v83;
  }
  return a1;
}

uint64_t outlined destroy of AccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy312_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x138uLL);
}

uint64_t assignWithTake for AccessibilityDataSeriesConfiguration(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  uint64_t v8 = (_OWORD *)(a1 + 56);
  char v9 = (_OWORD *)(a2 + 56);
  if (!*(void *)(a1 + 120)) {
    goto LABEL_7;
  }
  if (!*(void *)(a2 + 120))
  {
    outlined destroy of AccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 56);
LABEL_7:
    long long v14 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v14;
    long long v15 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v15;
    long long v16 = *(_OWORD *)(a2 + 72);
    *uint64_t v8 = *v9;
    *(_OWORD *)(a1 + 72) = v16;
    long long v17 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v17;
    goto LABEL_16;
  }
  if (*(void *)(a1 + 80))
  {
    if (*(void *)(a2 + 80))
    {
      char v10 = *(unsigned char *)(a2 + 72);
      uint64_t v11 = *(void *)(a1 + 56);
      uint64_t v12 = *(void *)(a1 + 64);
      char v13 = *(unsigned char *)(a1 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(unsigned char *)(a1 + 72) = v10;
      outlined consume of Text.Storage(v11, v12, v13);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    outlined destroy of Text(a1 + 56);
  }
  long long v18 = *(_OWORD *)(a2 + 72);
  *uint64_t v8 = *v9;
  *(_OWORD *)(a1 + 72) = v18;
LABEL_10:
  if (!*(void *)(a1 + 112))
  {
LABEL_14:
    long long v23 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v23;
    goto LABEL_15;
  }
  if (!*(void *)(a2 + 112))
  {
    outlined destroy of Text(a1 + 88);
    goto LABEL_14;
  }
  char v19 = *(unsigned char *)(a2 + 104);
  uint64_t v20 = *(void *)(a1 + 88);
  uint64_t v21 = *(void *)(a1 + 96);
  char v22 = *(unsigned char *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = v19;
  outlined consume of Text.Storage(v20, v21, v22);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
LABEL_15:
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRelease();
LABEL_16:
  uint64_t v24 = (_OWORD *)(a1 + 184);
  uint64_t v25 = (_OWORD *)(a2 + 184);
  if (*(void *)(a1 + 248))
  {
    if (*(void *)(a2 + 248))
    {
      if (*(void *)(a1 + 208))
      {
        if (*(void *)(a2 + 208))
        {
          char v26 = *(unsigned char *)(a2 + 200);
          uint64_t v27 = *(void *)(a1 + 184);
          uint64_t v28 = *(void *)(a1 + 192);
          char v29 = *(unsigned char *)(a1 + 200);
          *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
          *(unsigned char *)(a1 + 200) = v26;
          outlined consume of Text.Storage(v27, v28, v29);
          *(void *)(a1 + 208) = *(void *)(a2 + 208);
          swift_bridgeObjectRelease();
          goto LABEL_25;
        }
        outlined destroy of Text(a1 + 184);
      }
      long long v34 = *(_OWORD *)(a2 + 200);
      _OWORD *v24 = *v25;
      *(_OWORD *)(a1 + 200) = v34;
LABEL_25:
      if (*(void *)(a1 + 240))
      {
        if (*(void *)(a2 + 240))
        {
          char v35 = *(unsigned char *)(a2 + 232);
          uint64_t v36 = *(void *)(a1 + 216);
          uint64_t v37 = *(void *)(a1 + 224);
          char v38 = *(unsigned char *)(a1 + 232);
          *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
          *(unsigned char *)(a1 + 232) = v35;
          outlined consume of Text.Storage(v36, v37, v38);
          *(void *)(a1 + 240) = *(void *)(a2 + 240);
          swift_bridgeObjectRelease();
LABEL_30:
          *(void *)(a1 + 248) = *(void *)(a2 + 248);
          swift_bridgeObjectRelease();
          *(void *)(a1 + 256) = *(void *)(a2 + 256);
          *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
          *(void *)(a1 + 272) = *(void *)(a2 + 272);
          *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
          *(void *)(a1 + 288) = *(void *)(a2 + 288);
          swift_bridgeObjectRelease();
          *(void *)(a1 + 296) = *(void *)(a2 + 296);
          swift_bridgeObjectRelease();
          *(void *)(a1 + 304) = *(void *)(a2 + 304);
          swift_bridgeObjectRelease();
          return a1;
        }
        outlined destroy of Text(a1 + 216);
      }
      long long v39 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = v39;
      goto LABEL_30;
    }
    outlined destroy of AccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 184);
  }
  long long v30 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = v30;
  long long v31 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v31;
  long long v32 = *(_OWORD *)(a2 + 200);
  _OWORD *v24 = *v25;
  *(_OWORD *)(a1 + 200) = v32;
  long long v33 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v33;
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityDataSeriesConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 312)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityDataSeriesConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 312) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 312) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityDataSeriesConfiguration()
{
  return &type metadata for AccessibilityDataSeriesConfiguration;
}

uint64_t initializeWithCopy for AccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for AccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityDataSeriesConfiguration.ValueDescription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityDataSeriesConfiguration.ValueDescription()
{
  return &type metadata for AccessibilityDataSeriesConfiguration.ValueDescription;
}

uint64_t destroy for AccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 56))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[3];
  if (!v4)
  {
    long long v12 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    uint64_t v8 = a2[7];
    if (v8) {
      goto LABEL_3;
    }
LABEL_5:
    long long v13 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v13;
    goto LABEL_6;
  }
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  char v7 = *((unsigned char *)a2 + 16);
  outlined copy of Text.Storage(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRetain();
  uint64_t v8 = a2[7];
  if (!v8) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[5];
  char v11 = *((unsigned char *)a2 + 48);
  outlined copy of Text.Storage(v9, v10, v11);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRetain();
LABEL_6:
  uint64_t v14 = a2[9];
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = v14;
  *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
  *(void *)(a1 + 88) = a2[11];
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  uint64_t v15 = a2[14];
  *(void *)(a1 + 104) = a2[13];
  *(void *)(a1 + 112) = v15;
  *(void *)(a1 + 120) = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)a2;
      uint64_t v6 = *(void *)(a2 + 8);
      char v7 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v6, v7);
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = *(void *)(a1 + 8);
      char v10 = *(unsigned char *)(a1 + 16);
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v6;
      *(unsigned char *)(a1 + 16) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      long long v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
  }
  else if (v4)
  {
    uint64_t v11 = *(void *)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    char v13 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v12, v13);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    *(unsigned char *)(a1 + 16) = v13;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  long long v16 = (_OWORD *)(a1 + 32);
  long long v17 = (_OWORD *)(a2 + 32);
  uint64_t v18 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v18)
    {
      uint64_t v19 = *(void *)(a2 + 32);
      uint64_t v20 = *(void *)(a2 + 40);
      char v21 = *(unsigned char *)(a2 + 48);
      outlined copy of Text.Storage(v19, v20, v21);
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v23 = *(void *)(a1 + 40);
      char v24 = *(unsigned char *)(a1 + 48);
      *(void *)(a1 + 32) = v19;
      *(void *)(a1 + 40) = v20;
      *(unsigned char *)(a1 + 48) = v21;
      outlined consume of Text.Storage(v22, v23, v24);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 32);
      long long v28 = *(_OWORD *)(a2 + 48);
      *long long v16 = *v17;
      *(_OWORD *)(a1 + 48) = v28;
    }
  }
  else if (v18)
  {
    uint64_t v25 = *(void *)(a2 + 32);
    uint64_t v26 = *(void *)(a2 + 40);
    char v27 = *(unsigned char *)(a2 + 48);
    outlined copy of Text.Storage(v25, v26, v27);
    *(void *)(a1 + 32) = v25;
    *(void *)(a1 + 40) = v26;
    *(unsigned char *)(a1 + 48) = v27;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v29 = *(_OWORD *)(a2 + 48);
    *long long v16 = *v17;
    *(_OWORD *)(a1 + 48) = v29;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v30;
  LOBYTE(v30) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = v30;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void *)(a2 + 24);
    if (v4)
    {
      char v5 = *(unsigned char *)(a2 + 16);
      uint64_t v6 = *(void *)a1;
      uint64_t v7 = *(void *)(a1 + 8);
      char v8 = *(unsigned char *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = v5;
      outlined consume of Text.Storage(v6, v7, v8);
      *(void *)(a1 + 24) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1);
  }
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
LABEL_6:
  if (!*(void *)(a1 + 56))
  {
LABEL_10:
    long long v15 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v15;
    goto LABEL_11;
  }
  uint64_t v10 = *(void *)(a2 + 56);
  if (!v10)
  {
    outlined destroy of Text(a1 + 32);
    goto LABEL_10;
  }
  char v11 = *(unsigned char *)(a2 + 48);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  char v14 = *(unsigned char *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = v11;
  outlined consume of Text.Storage(v12, v13, v14);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease();
LABEL_11:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityDataSeriesConfiguration.AxisConfiguration()
{
  return &type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityDataSeriesConfiguration.DataSeriesType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245CCEF9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityDataSeriesConfiguration.DataSeriesType()
{
  return &type metadata for AccessibilityDataSeriesConfiguration.DataSeriesType;
}

id outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(void *a1, uint64_t a2, char a3, char a4)
{
  if (a4) {
    return outlined copy of AccessibilityText.Storage(a1, a2, a3 & 1);
  }
  else {
    return (id)swift_retain();
  }
}

uint64_t destroy for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 18) != 255)
  {
    int v2 = *(unsigned __int16 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 18) << 16);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)a1, *(void *)(a1 + 8), v2, BYTE2(v2) & 1);
  }
  if (*(unsigned __int8 *)(a1 + 42) != 255)
  {
    int v3 = *(unsigned __int16 *)(a1 + 40) | (*(unsigned __int8 *)(a1 + 42) << 16);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 24), *(void *)(a1 + 32), v3, BYTE2(v3) & 1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1, uint64_t *a2)
{
  if (*((unsigned __int8 *)a2 + 18) == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 15) = *(_DWORD *)((char *)a2 + 15);
  }
  else
  {
    int v4 = *((unsigned __int16 *)a2 + 8) | (*((unsigned __int8 *)a2 + 18) << 16);
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>((void *)*a2, v6, *((_WORD *)a2 + 8), BYTE2(v4) & 1);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(_WORD *)(a1 + 16) = v4;
    *(unsigned char *)(a1 + 18) = BYTE2(v4) & 1;
  }
  if (*((unsigned __int8 *)a2 + 42) == 255)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_DWORD *)(a1 + 39) = *(_DWORD *)((char *)a2 + 39);
  }
  else
  {
    int v7 = *((unsigned __int16 *)a2 + 20) | (*((unsigned __int8 *)a2 + 42) << 16);
    char v8 = (void *)a2[3];
    uint64_t v9 = a2[4];
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v8, v9, *((_WORD *)a2 + 20), BYTE2(v7) & 1);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v9;
    *(_WORD *)(a1 + 40) = v7;
    *(unsigned char *)(a1 + 42) = BYTE2(v7) & 1;
  }
  uint64_t v10 = a2[7];
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
  *(void *)(a1 + 72) = a2[9];
  *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
  uint64_t v11 = a2[12];
  *(void *)(a1 + 88) = a2[11];
  *(void *)(a1 + 96) = v11;
  *(void *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1, long long *a2)
{
  int v4 = *((unsigned __int16 *)a2 + 8) | (*((unsigned __int8 *)a2 + 18) << 16);
  if (*(unsigned __int8 *)(a1 + 18) == 255)
  {
    if (BYTE2(v4) == 255)
    {
      long long v5 = *a2;
      *(_DWORD *)(a1 + 15) = *(_DWORD *)((char *)a2 + 15);
      *(_OWORD *)a1 = v5;
    }
    else
    {
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = *((void *)a2 + 1);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)a2, v8, v4, BYTE2(v4) & 1);
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      *(_WORD *)(a1 + 16) = v4;
      *(unsigned char *)(a1 + 18) = BYTE2(v4) & 1;
    }
  }
  else if (BYTE2(v4) == 255)
  {
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1);
    int v6 = *(_DWORD *)((char *)a2 + 15);
    *(_OWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 15) = v6;
  }
  else
  {
    uint64_t v9 = *(void **)a2;
    uint64_t v10 = *((void *)a2 + 1);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)a2, v10, v4, BYTE2(v4) & 1);
    uint64_t v11 = *(void **)a1;
    uint64_t v12 = *(void *)(a1 + 8);
    char v13 = *(unsigned char *)(a1 + 18);
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v10;
    __int16 v14 = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v4;
    *(unsigned char *)(a1 + 18) = BYTE2(v4) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v11, v12, v14, v13);
  }
  long long v15 = (long long *)(a1 + 24);
  long long v16 = (long long *)((char *)a2 + 24);
  int v17 = *((unsigned __int16 *)a2 + 20) | (*((unsigned __int8 *)a2 + 42) << 16);
  if (*(unsigned __int8 *)(a1 + 42) == 255)
  {
    if (BYTE2(v17) == 255)
    {
      long long v18 = *v16;
      *(_DWORD *)(a1 + 39) = *(_DWORD *)((char *)a2 + 39);
      *long long v15 = v18;
    }
    else
    {
      uint64_t v20 = (void *)*((void *)a2 + 3);
      uint64_t v21 = *((void *)a2 + 4);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v20, v21, *((_WORD *)a2 + 20), BYTE2(v17) & 1);
      *(void *)(a1 + 24) = v20;
      *(void *)(a1 + 32) = v21;
      *(_WORD *)(a1 + 40) = v17;
      *(unsigned char *)(a1 + 42) = BYTE2(v17) & 1;
    }
  }
  else if (BYTE2(v17) == 255)
  {
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 24);
    int v19 = *(_DWORD *)((char *)a2 + 39);
    *long long v15 = *v16;
    *(_DWORD *)(a1 + 39) = v19;
  }
  else
  {
    uint64_t v22 = (void *)*((void *)a2 + 3);
    uint64_t v23 = *((void *)a2 + 4);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v22, v23, *((_WORD *)a2 + 20), BYTE2(v17) & 1);
    char v24 = *(void **)(a1 + 24);
    uint64_t v25 = *(void *)(a1 + 32);
    char v26 = *(unsigned char *)(a1 + 42);
    *(void *)(a1 + 24) = v22;
    *(void *)(a1 + 32) = v23;
    __int16 v27 = *(_WORD *)(a1 + 40);
    *(_WORD *)(a1 + 40) = v17;
    *(unsigned char *)(a1 + 42) = BYTE2(v17) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v24, v25, v27, v26);
  }
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = *((void *)a2 + 7);
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
  *(void *)(a1 + 56) = v28;
  LOBYTE(v28) = *((unsigned char *)a2 + 80);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(unsigned char *)(a1 + 80) = v28;
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(uint64_t a1)
{
  type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 18) == 255) {
    goto LABEL_4;
  }
  unsigned int v4 = *(unsigned __int16 *)(a2 + 16) | (*(unsigned __int8 *)(a2 + 18) << 16);
  if (HIWORD(v4) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
    goto LABEL_6;
  }
  int v5 = *(unsigned __int16 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 18) << 16);
  int v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 18) = BYTE2(v4) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v6, v7, v5, BYTE2(v5) & 1);
LABEL_6:
  uint64_t v8 = (_OWORD *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 42) != 255)
  {
    unsigned int v9 = *(unsigned __int16 *)(a2 + 40) | (*(unsigned __int8 *)(a2 + 42) << 16);
    if (HIWORD(v9) <= 0xFEu)
    {
      int v10 = *(unsigned __int16 *)(a1 + 40) | (*(unsigned __int8 *)(a1 + 42) << 16);
      uint64_t v11 = *(void **)(a1 + 24);
      uint64_t v12 = *(void *)(a1 + 32);
      *(_OWORD *)(a1 + 24) = *v8;
      *(_WORD *)(a1 + 40) = v9;
      *(unsigned char *)(a1 + 42) = BYTE2(v9) & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v11, v12, v10, BYTE2(v10) & 1);
      goto LABEL_11;
    }
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *v8;
  *(_DWORD *)(a1 + 39) = *(_DWORD *)(a2 + 39);
LABEL_11:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration()
{
  return &type metadata for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration;
}

void destroy for CodableAccessibilityDataSeriesConfiguration(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 18) != 255)
  {
    int v2 = *(unsigned __int16 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 18) << 16);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)a1, *(void *)(a1 + 8), v2, BYTE2(v2) & 1);
  }
  if (*(void *)(a1 + 88))
  {
    if (*(unsigned __int8 *)(a1 + 58) != 255)
    {
      int v3 = *(unsigned __int16 *)(a1 + 56) | (*(unsigned __int8 *)(a1 + 58) << 16);
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 40), *(void *)(a1 + 48), v3, BYTE2(v3) & 1);
    }
    if (*(unsigned __int8 *)(a1 + 82) != 255)
    {
      int v4 = *(unsigned __int16 *)(a1 + 80) | (*(unsigned __int8 *)(a1 + 82) << 16);
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 64), *(void *)(a1 + 72), v4, BYTE2(v4) & 1);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 200))
  {
    if (*(unsigned __int8 *)(a1 + 170) != 255)
    {
      int v5 = *(unsigned __int16 *)(a1 + 168) | (*(unsigned __int8 *)(a1 + 170) << 16);
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 152), *(void *)(a1 + 160), v5, BYTE2(v5) & 1);
    }
    if (*(unsigned __int8 *)(a1 + 194) != 255)
    {
      int v6 = *(unsigned __int16 *)(a1 + 192) | (*(unsigned __int8 *)(a1 + 194) << 16);
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 176), *(void *)(a1 + 184), v6, BYTE2(v6) & 1);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for CodableAccessibilityDataSeriesConfiguration(uint64_t a1, uint64_t *a2)
{
  if (*((unsigned __int8 *)a2 + 18) == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 15) = *(_DWORD *)((char *)a2 + 15);
  }
  else
  {
    int v4 = *((unsigned __int16 *)a2 + 8) | (*((unsigned __int8 *)a2 + 18) << 16);
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>((void *)*a2, v6, *((_WORD *)a2 + 8), BYTE2(v4) & 1);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(_WORD *)(a1 + 16) = v4;
    *(unsigned char *)(a1 + 18) = BYTE2(v4) & 1;
  }
  *(_WORD *)(a1 + 19) = *(_WORD *)((char *)a2 + 19);
  *(void *)(a1 + 24) = a2[3];
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)((char *)a2 + 33);
  uint64_t v7 = (_OWORD *)(a1 + 40);
  uint64_t v8 = a2 + 5;
  uint64_t v9 = a2[11];
  if (v9)
  {
    if (*((unsigned __int8 *)a2 + 58) == 255)
    {
      *uint64_t v7 = *v8;
      *(_DWORD *)(a1 + 55) = *(_DWORD *)((char *)a2 + 55);
    }
    else
    {
      int v13 = *((unsigned __int16 *)a2 + 28) | (*((unsigned __int8 *)a2 + 58) << 16);
      __int16 v14 = (void *)a2[5];
      uint64_t v15 = a2[6];
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v14, v15, *((_WORD *)a2 + 28), BYTE2(v13) & 1);
      *(void *)(a1 + 40) = v14;
      *(void *)(a1 + 48) = v15;
      *(_WORD *)(a1 + 56) = v13;
      *(unsigned char *)(a1 + 58) = BYTE2(v13) & 1;
    }
    if (*((unsigned __int8 *)a2 + 82) == 255)
    {
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_DWORD *)(a1 + 79) = *(_DWORD *)((char *)a2 + 79);
    }
    else
    {
      int v16 = *((unsigned __int16 *)a2 + 40) | (*((unsigned __int8 *)a2 + 82) << 16);
      int v17 = (void *)a2[8];
      uint64_t v18 = a2[9];
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v17, v18, *((_WORD *)a2 + 40), BYTE2(v16) & 1);
      *(void *)(a1 + 64) = v17;
      *(void *)(a1 + 72) = v18;
      *(_WORD *)(a1 + 80) = v16;
      *(unsigned char *)(a1 + 82) = BYTE2(v16) & 1;
    }
    uint64_t v19 = a2[12];
    *(void *)(a1 + 88) = v9;
    *(void *)(a1 + 96) = v19;
    *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
    *(void *)(a1 + 112) = a2[14];
    *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
    uint64_t v20 = a2[17];
    *(void *)(a1 + 128) = a2[16];
    *(void *)(a1 + 136) = v20;
    *(void *)(a1 + 144) = a2[18];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(a1 + 120) = v10;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
    long long v11 = *(_OWORD *)(a2 + 7);
    *uint64_t v7 = *v8;
    *(_OWORD *)(a1 + 56) = v11;
    long long v12 = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 88) = v12;
  }
  uint64_t v21 = (_OWORD *)(a1 + 152);
  uint64_t v22 = a2 + 19;
  uint64_t v23 = a2[25];
  if (v23)
  {
    if (*((unsigned __int8 *)a2 + 170) == 255)
    {
      *uint64_t v21 = *v22;
      *(_DWORD *)(a1 + 167) = *(_DWORD *)((char *)a2 + 167);
    }
    else
    {
      int v27 = *((unsigned __int16 *)a2 + 84) | (*((unsigned __int8 *)a2 + 170) << 16);
      uint64_t v28 = (void *)a2[19];
      uint64_t v29 = a2[20];
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v28, v29, *((_WORD *)a2 + 84), BYTE2(v27) & 1);
      *(void *)(a1 + 152) = v28;
      *(void *)(a1 + 160) = v29;
      *(_WORD *)(a1 + 168) = v27;
      *(unsigned char *)(a1 + 170) = BYTE2(v27) & 1;
    }
    if (*((unsigned __int8 *)a2 + 194) == 255)
    {
      *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
      *(_DWORD *)(a1 + 191) = *(_DWORD *)((char *)a2 + 191);
    }
    else
    {
      int v30 = *((unsigned __int16 *)a2 + 96) | (*((unsigned __int8 *)a2 + 194) << 16);
      long long v31 = (void *)a2[22];
      uint64_t v32 = a2[23];
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v31, v32, *((_WORD *)a2 + 96), BYTE2(v30) & 1);
      *(void *)(a1 + 176) = v31;
      *(void *)(a1 + 184) = v32;
      *(_WORD *)(a1 + 192) = v30;
      *(unsigned char *)(a1 + 194) = BYTE2(v30) & 1;
    }
    uint64_t v33 = a2[26];
    *(void *)(a1 + 200) = v23;
    *(void *)(a1 + 208) = v33;
    *(unsigned char *)(a1 + 216) = *((unsigned char *)a2 + 216);
    *(void *)(a1 + 224) = a2[28];
    *(unsigned char *)(a1 + 232) = *((unsigned char *)a2 + 232);
    uint64_t v34 = a2[31];
    *(void *)(a1 + 240) = a2[30];
    *(void *)(a1 + 248) = v34;
    *(void *)(a1 + 256) = a2[32];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v24 = *(_OWORD *)(a2 + 29);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
    *(_OWORD *)(a1 + 232) = v24;
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
    long long v25 = *(_OWORD *)(a2 + 21);
    *uint64_t v21 = *v22;
    *(_OWORD *)(a1 + 168) = v25;
    long long v26 = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 23);
    *(_OWORD *)(a1 + 200) = v26;
  }
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityDataSeriesConfiguration(uint64_t a1, long long *a2)
{
  int v4 = *((unsigned __int16 *)a2 + 8) | (*((unsigned __int8 *)a2 + 18) << 16);
  if (*(unsigned __int8 *)(a1 + 18) == 255)
  {
    if (BYTE2(v4) == 255)
    {
      long long v5 = *a2;
      *(_DWORD *)(a1 + 15) = *(_DWORD *)((char *)a2 + 15);
      *(_OWORD *)a1 = v5;
    }
    else
    {
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = *((void *)a2 + 1);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)a2, v8, v4, BYTE2(v4) & 1);
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      *(_WORD *)(a1 + 16) = v4;
      *(unsigned char *)(a1 + 18) = BYTE2(v4) & 1;
    }
  }
  else if (BYTE2(v4) == 255)
  {
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1);
    int v6 = *(_DWORD *)((char *)a2 + 15);
    *(_OWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 15) = v6;
  }
  else
  {
    uint64_t v9 = *(void **)a2;
    uint64_t v10 = *((void *)a2 + 1);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)a2, v10, v4, BYTE2(v4) & 1);
    long long v11 = *(void **)a1;
    uint64_t v12 = *(void *)(a1 + 8);
    char v13 = *(unsigned char *)(a1 + 18);
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v10;
    __int16 v14 = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v4;
    *(unsigned char *)(a1 + 18) = BYTE2(v4) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v11, v12, v14, v13);
  }
  *(unsigned char *)(a1 + 19) = *((unsigned char *)a2 + 19);
  *(unsigned char *)(a1 + 20) = *((unsigned char *)a2 + 20);
  uint64_t v15 = *((void *)a2 + 3);
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(void *)(a1 + 24) = v15;
  *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
  *(unsigned char *)(a1 + 34) = *((unsigned char *)a2 + 34);
  int v16 = (long long *)(a1 + 40);
  int v17 = (long long *)((char *)a2 + 40);
  uint64_t v18 = *((void *)a2 + 11);
  if (*(void *)(a1 + 88))
  {
    if (v18)
    {
      int v19 = *((unsigned __int16 *)a2 + 28) | (*((unsigned __int8 *)a2 + 58) << 16);
      if (*(unsigned __int8 *)(a1 + 58) == 255)
      {
        if (*((unsigned __int8 *)a2 + 58) == 255)
        {
          long long v20 = *v17;
          *(_DWORD *)(a1 + 55) = *(_DWORD *)((char *)a2 + 55);
          *int v16 = v20;
        }
        else
        {
          long long v42 = (void *)*((void *)a2 + 5);
          uint64_t v43 = *((void *)a2 + 6);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v42, v43, *((_WORD *)a2 + 28), BYTE2(v19) & 1);
          *(void *)(a1 + 40) = v42;
          *(void *)(a1 + 48) = v43;
          *(_WORD *)(a1 + 56) = v19;
          *(unsigned char *)(a1 + 58) = BYTE2(v19) & 1;
        }
      }
      else if (*((unsigned __int8 *)a2 + 58) == 255)
      {
        outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 40);
        int v27 = *(_DWORD *)((char *)a2 + 55);
        *int v16 = *v17;
        *(_DWORD *)(a1 + 55) = v27;
      }
      else
      {
        long long v44 = (void *)*((void *)a2 + 5);
        uint64_t v45 = *((void *)a2 + 6);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v44, v45, *((_WORD *)a2 + 28), BYTE2(v19) & 1);
        uint64_t v46 = *(void **)(a1 + 40);
        uint64_t v47 = *(void *)(a1 + 48);
        char v48 = *(unsigned char *)(a1 + 58);
        *(void *)(a1 + 40) = v44;
        *(void *)(a1 + 48) = v45;
        __int16 v49 = *(_WORD *)(a1 + 56);
        *(_WORD *)(a1 + 56) = v19;
        *(unsigned char *)(a1 + 58) = BYTE2(v19) & 1;
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v46, v47, v49, v48);
      }
      uint64_t v50 = (long long *)(a1 + 64);
      uint64_t v51 = a2 + 4;
      int v52 = *((unsigned __int16 *)a2 + 40) | (*((unsigned __int8 *)a2 + 82) << 16);
      if (*(unsigned __int8 *)(a1 + 82) == 255)
      {
        if (*((unsigned __int8 *)a2 + 82) == 255)
        {
          long long v53 = *v51;
          *(_DWORD *)(a1 + 79) = *(_DWORD *)((char *)a2 + 79);
          *uint64_t v50 = v53;
        }
        else
        {
          uint64_t v55 = (void *)*((void *)a2 + 8);
          uint64_t v56 = *((void *)a2 + 9);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v55, v56, *((_WORD *)a2 + 40), BYTE2(v52) & 1);
          *(void *)(a1 + 64) = v55;
          *(void *)(a1 + 72) = v56;
          *(_WORD *)(a1 + 80) = v52;
          *(unsigned char *)(a1 + 82) = BYTE2(v52) & 1;
        }
      }
      else if (*((unsigned __int8 *)a2 + 82) == 255)
      {
        outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 64);
        int v54 = *(_DWORD *)((char *)a2 + 79);
        *uint64_t v50 = *v51;
        *(_DWORD *)(a1 + 79) = v54;
      }
      else
      {
        uint64_t v57 = (void *)*((void *)a2 + 8);
        uint64_t v58 = *((void *)a2 + 9);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v57, v58, *((_WORD *)a2 + 40), BYTE2(v52) & 1);
        char v59 = *(void **)(a1 + 64);
        uint64_t v60 = *(void *)(a1 + 72);
        char v61 = *(unsigned char *)(a1 + 82);
        *(void *)(a1 + 64) = v57;
        *(void *)(a1 + 72) = v58;
        __int16 v62 = *(_WORD *)(a1 + 80);
        *(_WORD *)(a1 + 80) = v52;
        *(unsigned char *)(a1 + 82) = BYTE2(v52) & 1;
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v59, v60, v62, v61);
      }
      *(void *)(a1 + 88) = *((void *)a2 + 11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v63 = *((void *)a2 + 12);
      *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
      *(void *)(a1 + 96) = v63;
      LOBYTE(v63) = *((unsigned char *)a2 + 120);
      *(void *)(a1 + 112) = *((void *)a2 + 14);
      *(unsigned char *)(a1 + 120) = v63;
      *(void *)(a1 + 128) = *((void *)a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 136) = *((void *)a2 + 17);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *((void *)a2 + 18);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 40);
      long long v23 = *(long long *)((char *)a2 + 56);
      long long v22 = *(long long *)((char *)a2 + 72);
      *int v16 = *v17;
      *(_OWORD *)(a1 + 56) = v23;
      *(_OWORD *)(a1 + 72) = v22;
      long long v24 = *(long long *)((char *)a2 + 136);
      long long v26 = *(long long *)((char *)a2 + 88);
      long long v25 = *(long long *)((char *)a2 + 104);
      *(_OWORD *)(a1 + 120) = *(long long *)((char *)a2 + 120);
      *(_OWORD *)(a1 + 136) = v24;
      *(_OWORD *)(a1 + 88) = v26;
      *(_OWORD *)(a1 + 104) = v25;
    }
  }
  else if (v18)
  {
    if (*((unsigned __int8 *)a2 + 58) == 255)
    {
      long long v21 = *v17;
      *(_DWORD *)(a1 + 55) = *(_DWORD *)((char *)a2 + 55);
      *int v16 = v21;
    }
    else
    {
      int v33 = *((unsigned __int16 *)a2 + 28) | (*((unsigned __int8 *)a2 + 58) << 16);
      uint64_t v34 = (void *)*((void *)a2 + 5);
      uint64_t v35 = *((void *)a2 + 6);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v34, v35, *((_WORD *)a2 + 28), BYTE2(v33) & 1);
      *(void *)(a1 + 40) = v34;
      *(void *)(a1 + 48) = v35;
      *(_WORD *)(a1 + 56) = v33;
      *(unsigned char *)(a1 + 58) = BYTE2(v33) & 1;
    }
    if (*((unsigned __int8 *)a2 + 82) == 255)
    {
      long long v36 = a2[4];
      *(_DWORD *)(a1 + 79) = *(_DWORD *)((char *)a2 + 79);
      *(_OWORD *)(a1 + 64) = v36;
    }
    else
    {
      int v37 = *((unsigned __int16 *)a2 + 40) | (*((unsigned __int8 *)a2 + 82) << 16);
      char v38 = (void *)*((void *)a2 + 8);
      uint64_t v39 = *((void *)a2 + 9);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v38, v39, *((_WORD *)a2 + 40), BYTE2(v37) & 1);
      *(void *)(a1 + 64) = v38;
      *(void *)(a1 + 72) = v39;
      *(_WORD *)(a1 + 80) = v37;
      *(unsigned char *)(a1 + 82) = BYTE2(v37) & 1;
    }
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    uint64_t v40 = *((void *)a2 + 12);
    *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
    *(void *)(a1 + 96) = v40;
    uint64_t v41 = *((void *)a2 + 14);
    *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
    *(void *)(a1 + 112) = v41;
    *(void *)(a1 + 128) = *((void *)a2 + 16);
    *(void *)(a1 + 136) = *((void *)a2 + 17);
    *(void *)(a1 + 144) = *((void *)a2 + 18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v28 = *v17;
    long long v29 = *(long long *)((char *)a2 + 72);
    *(_OWORD *)(a1 + 56) = *(long long *)((char *)a2 + 56);
    *(_OWORD *)(a1 + 72) = v29;
    *int v16 = v28;
    long long v30 = *(long long *)((char *)a2 + 88);
    long long v31 = *(long long *)((char *)a2 + 104);
    long long v32 = *(long long *)((char *)a2 + 136);
    *(_OWORD *)(a1 + 120) = *(long long *)((char *)a2 + 120);
    *(_OWORD *)(a1 + 136) = v32;
    *(_OWORD *)(a1 + 88) = v30;
    *(_OWORD *)(a1 + 104) = v31;
  }
  uint64_t v64 = (long long *)(a1 + 152);
  uint64_t v65 = (long long *)((char *)a2 + 152);
  uint64_t v66 = *((void *)a2 + 25);
  if (*(void *)(a1 + 200))
  {
    if (v66)
    {
      int v67 = *((unsigned __int16 *)a2 + 84) | (*((unsigned __int8 *)a2 + 170) << 16);
      if (*(unsigned __int8 *)(a1 + 170) == 255)
      {
        if (BYTE2(v67) == 255)
        {
          long long v68 = *v65;
          *(_DWORD *)(a1 + 167) = *(_DWORD *)((char *)a2 + 167);
          *uint64_t v64 = v68;
        }
        else
        {
          long long v90 = (void *)*((void *)a2 + 19);
          uint64_t v91 = *((void *)a2 + 20);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v90, v91, *((_WORD *)a2 + 84), BYTE2(v67) & 1);
          *(void *)(a1 + 152) = v90;
          *(void *)(a1 + 160) = v91;
          *(_WORD *)(a1 + 168) = v67;
          *(unsigned char *)(a1 + 170) = BYTE2(v67) & 1;
        }
      }
      else if (BYTE2(v67) == 255)
      {
        outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 152);
        int v75 = *(_DWORD *)((char *)a2 + 167);
        *uint64_t v64 = *v65;
        *(_DWORD *)(a1 + 167) = v75;
      }
      else
      {
        long long v92 = (void *)*((void *)a2 + 19);
        uint64_t v93 = *((void *)a2 + 20);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v92, v93, *((_WORD *)a2 + 84), BYTE2(v67) & 1);
        long long v94 = *(void **)(a1 + 152);
        uint64_t v95 = *(void *)(a1 + 160);
        char v96 = *(unsigned char *)(a1 + 170);
        *(void *)(a1 + 152) = v92;
        *(void *)(a1 + 160) = v93;
        __int16 v97 = *(_WORD *)(a1 + 168);
        *(_WORD *)(a1 + 168) = v67;
        *(unsigned char *)(a1 + 170) = BYTE2(v67) & 1;
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v94, v95, v97, v96);
      }
      uint64_t v98 = (long long *)(a1 + 176);
      long long v99 = a2 + 11;
      int v100 = *((unsigned __int16 *)a2 + 96) | (*((unsigned __int8 *)a2 + 194) << 16);
      if (*(unsigned __int8 *)(a1 + 194) == 255)
      {
        if (BYTE2(v100) == 255)
        {
          long long v101 = *v99;
          *(_DWORD *)(a1 + 191) = *(_DWORD *)((char *)a2 + 191);
          *uint64_t v98 = v101;
        }
        else
        {
          uint64_t v103 = (void *)*((void *)a2 + 22);
          uint64_t v104 = *((void *)a2 + 23);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v103, v104, *((_WORD *)a2 + 96), BYTE2(v100) & 1);
          *(void *)(a1 + 176) = v103;
          *(void *)(a1 + 184) = v104;
          *(_WORD *)(a1 + 192) = v100;
          *(unsigned char *)(a1 + 194) = BYTE2(v100) & 1;
        }
      }
      else if (BYTE2(v100) == 255)
      {
        outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 176);
        int v102 = *(_DWORD *)((char *)a2 + 191);
        *uint64_t v98 = *v99;
        *(_DWORD *)(a1 + 191) = v102;
      }
      else
      {
        char v105 = (void *)*((void *)a2 + 22);
        uint64_t v106 = *((void *)a2 + 23);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v105, v106, *((_WORD *)a2 + 96), BYTE2(v100) & 1);
        uint64_t v107 = *(void **)(a1 + 176);
        uint64_t v108 = *(void *)(a1 + 184);
        char v109 = *(unsigned char *)(a1 + 194);
        *(void *)(a1 + 176) = v105;
        *(void *)(a1 + 184) = v106;
        __int16 v110 = *(_WORD *)(a1 + 192);
        *(_WORD *)(a1 + 192) = v100;
        *(unsigned char *)(a1 + 194) = BYTE2(v100) & 1;
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v107, v108, v110, v109);
      }
      *(void *)(a1 + 200) = *((void *)a2 + 25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v111 = *((void *)a2 + 26);
      *(unsigned char *)(a1 + 216) = *((unsigned char *)a2 + 216);
      *(void *)(a1 + 208) = v111;
      LOBYTE(v111) = *((unsigned char *)a2 + 232);
      *(void *)(a1 + 224) = *((void *)a2 + 28);
      *(unsigned char *)(a1 + 232) = v111;
      *(void *)(a1 + 240) = *((void *)a2 + 30);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 248) = *((void *)a2 + 31);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 256) = *((void *)a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 152);
      long long v71 = *(long long *)((char *)a2 + 168);
      long long v70 = *(long long *)((char *)a2 + 184);
      *uint64_t v64 = *v65;
      *(_OWORD *)(a1 + 168) = v71;
      *(_OWORD *)(a1 + 184) = v70;
      long long v72 = *(long long *)((char *)a2 + 248);
      long long v74 = *(long long *)((char *)a2 + 200);
      long long v73 = *(long long *)((char *)a2 + 216);
      *(_OWORD *)(a1 + 232) = *(long long *)((char *)a2 + 232);
      *(_OWORD *)(a1 + 248) = v72;
      *(_OWORD *)(a1 + 200) = v74;
      *(_OWORD *)(a1 + 216) = v73;
    }
  }
  else if (v66)
  {
    if (*((unsigned __int8 *)a2 + 170) == 255)
    {
      long long v69 = *v65;
      *(_DWORD *)(a1 + 167) = *(_DWORD *)((char *)a2 + 167);
      *uint64_t v64 = v69;
    }
    else
    {
      int v81 = *((unsigned __int16 *)a2 + 84) | (*((unsigned __int8 *)a2 + 170) << 16);
      long long v82 = (void *)*((void *)a2 + 19);
      uint64_t v83 = *((void *)a2 + 20);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v82, v83, *((_WORD *)a2 + 84), BYTE2(v81) & 1);
      *(void *)(a1 + 152) = v82;
      *(void *)(a1 + 160) = v83;
      *(_WORD *)(a1 + 168) = v81;
      *(unsigned char *)(a1 + 170) = BYTE2(v81) & 1;
    }
    if (*((unsigned __int8 *)a2 + 194) == 255)
    {
      long long v84 = a2[11];
      *(_DWORD *)(a1 + 191) = *(_DWORD *)((char *)a2 + 191);
      *(_OWORD *)(a1 + 176) = v84;
    }
    else
    {
      int v85 = *((unsigned __int16 *)a2 + 96) | (*((unsigned __int8 *)a2 + 194) << 16);
      uint64_t v86 = (void *)*((void *)a2 + 22);
      uint64_t v87 = *((void *)a2 + 23);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v86, v87, *((_WORD *)a2 + 96), BYTE2(v85) & 1);
      *(void *)(a1 + 176) = v86;
      *(void *)(a1 + 184) = v87;
      *(_WORD *)(a1 + 192) = v85;
      *(unsigned char *)(a1 + 194) = BYTE2(v85) & 1;
    }
    *(void *)(a1 + 200) = *((void *)a2 + 25);
    uint64_t v88 = *((void *)a2 + 26);
    *(unsigned char *)(a1 + 216) = *((unsigned char *)a2 + 216);
    *(void *)(a1 + 208) = v88;
    uint64_t v89 = *((void *)a2 + 28);
    *(unsigned char *)(a1 + 232) = *((unsigned char *)a2 + 232);
    *(void *)(a1 + 224) = v89;
    *(void *)(a1 + 240) = *((void *)a2 + 30);
    *(void *)(a1 + 248) = *((void *)a2 + 31);
    *(void *)(a1 + 256) = *((void *)a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v76 = *v65;
    long long v77 = *(long long *)((char *)a2 + 184);
    *(_OWORD *)(a1 + 168) = *(long long *)((char *)a2 + 168);
    *(_OWORD *)(a1 + 184) = v77;
    *uint64_t v64 = v76;
    long long v78 = *(long long *)((char *)a2 + 200);
    long long v79 = *(long long *)((char *)a2 + 216);
    long long v80 = *(long long *)((char *)a2 + 248);
    *(_OWORD *)(a1 + 232) = *(long long *)((char *)a2 + 232);
    *(_OWORD *)(a1 + 248) = v80;
    *(_OWORD *)(a1 + 200) = v78;
    *(_OWORD *)(a1 + 216) = v79;
  }
  return a1;
}

uint64_t outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy264_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x108uLL);
}

uint64_t assignWithTake for CodableAccessibilityDataSeriesConfiguration(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 18) == 255) {
    goto LABEL_4;
  }
  unsigned int v4 = *(unsigned __int16 *)(a2 + 16) | (*(unsigned __int8 *)(a2 + 18) << 16);
  if (HIWORD(v4) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
    goto LABEL_6;
  }
  int v5 = *(unsigned __int16 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 18) << 16);
  int v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 18) = BYTE2(v4) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v6, v7, v5, BYTE2(v5) & 1);
LABEL_6:
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  uint64_t v8 = (_OWORD *)(a1 + 40);
  uint64_t v9 = (_OWORD *)(a2 + 40);
  if (!*(void *)(a1 + 88))
  {
LABEL_13:
    long long v11 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v11;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    long long v12 = *(_OWORD *)(a2 + 56);
    *uint64_t v8 = *v9;
    *(_OWORD *)(a1 + 56) = v12;
    long long v13 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v13;
    goto LABEL_21;
  }
  if (!*(void *)(a2 + 88))
  {
    outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 40);
    goto LABEL_13;
  }
  if (*(unsigned __int8 *)(a1 + 58) == 255)
  {
LABEL_11:
    *uint64_t v8 = *v9;
    *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
    goto LABEL_15;
  }
  unsigned int v10 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
  if (HIWORD(v10) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 40);
    goto LABEL_11;
  }
  int v14 = *(unsigned __int16 *)(a1 + 56) | (*(unsigned __int8 *)(a1 + 58) << 16);
  uint64_t v15 = *(void **)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *v9;
  *(_WORD *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 58) = BYTE2(v10) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v15, v16, v14, BYTE2(v14) & 1);
LABEL_15:
  int v17 = (_OWORD *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 82) != 255)
  {
    unsigned int v18 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
    if (HIWORD(v18) <= 0xFEu)
    {
      int v19 = *(unsigned __int16 *)(a1 + 80) | (*(unsigned __int8 *)(a1 + 82) << 16);
      long long v20 = *(void **)(a1 + 64);
      uint64_t v21 = *(void *)(a1 + 72);
      *(_OWORD *)(a1 + 64) = *v17;
      *(_WORD *)(a1 + 80) = v18;
      *(unsigned char *)(a1 + 82) = BYTE2(v18) & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v20, v21, v19, BYTE2(v19) & 1);
      goto LABEL_20;
    }
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 64);
  }
  *(_OWORD *)(a1 + 64) = *v17;
  *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
LABEL_20:
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
LABEL_21:
  long long v22 = (_OWORD *)(a1 + 152);
  long long v23 = (_OWORD *)(a2 + 152);
  if (*(void *)(a1 + 200))
  {
    if (*(void *)(a2 + 200))
    {
      if (*(unsigned __int8 *)(a1 + 170) != 255)
      {
        unsigned int v24 = *(unsigned __int16 *)(a2 + 168) | (*(unsigned __int8 *)(a2 + 170) << 16);
        if (HIWORD(v24) <= 0xFEu)
        {
          int v28 = *(unsigned __int16 *)(a1 + 168) | (*(unsigned __int8 *)(a1 + 170) << 16);
          long long v29 = *(void **)(a1 + 152);
          uint64_t v30 = *(void *)(a1 + 160);
          *(_OWORD *)(a1 + 152) = *v23;
          *(_WORD *)(a1 + 168) = v24;
          *(unsigned char *)(a1 + 170) = BYTE2(v24) & 1;
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v29, v30, v28, BYTE2(v28) & 1);
LABEL_30:
          long long v31 = (_OWORD *)(a2 + 176);
          if (*(unsigned __int8 *)(a1 + 194) != 255)
          {
            unsigned int v32 = *(unsigned __int16 *)(a2 + 192) | (*(unsigned __int8 *)(a2 + 194) << 16);
            if (HIWORD(v32) <= 0xFEu)
            {
              int v33 = *(unsigned __int16 *)(a1 + 192) | (*(unsigned __int8 *)(a1 + 194) << 16);
              uint64_t v34 = *(void **)(a1 + 176);
              uint64_t v35 = *(void *)(a1 + 184);
              *(_OWORD *)(a1 + 176) = *v31;
              *(_WORD *)(a1 + 192) = v32;
              *(unsigned char *)(a1 + 194) = BYTE2(v32) & 1;
              outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v34, v35, v33, BYTE2(v33) & 1);
              goto LABEL_35;
            }
            outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 176);
          }
          *(_OWORD *)(a1 + 176) = *v31;
          *(_DWORD *)(a1 + 191) = *(_DWORD *)(a2 + 191);
LABEL_35:
          *(void *)(a1 + 200) = *(void *)(a2 + 200);
          swift_bridgeObjectRelease();
          *(void *)(a1 + 208) = *(void *)(a2 + 208);
          *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
          *(void *)(a1 + 224) = *(void *)(a2 + 224);
          *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
          *(void *)(a1 + 240) = *(void *)(a2 + 240);
          swift_bridgeObjectRelease();
          *(void *)(a1 + 248) = *(void *)(a2 + 248);
          swift_bridgeObjectRelease();
          *(void *)(a1 + 256) = *(void *)(a2 + 256);
          swift_bridgeObjectRelease();
          return a1;
        }
        outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 152);
      }
      *long long v22 = *v23;
      *(_DWORD *)(a1 + 167) = *(_DWORD *)(a2 + 167);
      goto LABEL_30;
    }
    outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 152);
  }
  long long v25 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v25;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  long long v26 = *(_OWORD *)(a2 + 168);
  *long long v22 = *v23;
  *(_OWORD *)(a1 + 168) = v26;
  long long v27 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v27;
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityDataSeriesConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 264)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 88);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityDataSeriesConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 264) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 264) = 0;
    }
    if (a2) {
      *(void *)(result + 88) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableAccessibilityDataSeriesConfiguration()
{
  return &type metadata for CodableAccessibilityDataSeriesConfiguration;
}

uint64_t CodableAccessibilityDataSeriesConfiguration.ValueDescription.encode(to:)(void *a1)
{
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityDataSeriesConfiguration.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys, (uint64_t)&unk_26FA757C8, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v16 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  int v6 = (char *)&v15 - v5;
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  int v22 = *((unsigned __int16 *)v1 + 8);
  char v9 = *((unsigned char *)v1 + 18);
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  char v21 = v9;
  __int16 v20 = v22;
  char v23 = 0;
  type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>();
  lazy protocol witness table accessor for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>(&lazy protocol witness table cache variable for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>);
  uint64_t v12 = v17;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (v12) {
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v6, v4);
  }
  uint64_t v14 = v16;
  uint64_t v18 = v10;
  uint64_t v19 = v11;
  char v23 = 1;
  type metadata accessor for Range<Double>();
  lazy protocol witness table accessor for type Range<Double> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Double> and conformance <> Range<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v6, v4);
}

void CodableAccessibilityDataSeriesConfiguration.ValueDescription.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityDataSeriesConfiguration.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys, (uint64_t)&unk_26FA757C8, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v14 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    int v12 = 16711680;
  }
  else
  {
    uint64_t v14 = v6;
    uint64_t v9 = v15;
    type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>();
    char v19 = 0;
    lazy protocol witness table accessor for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>(&lazy protocol witness table cache variable for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v10 = *((void *)&v16 + 1);
    uint64_t v11 = (void *)v16;
    int v12 = v17 | (v18 << 16);
    type metadata accessor for Range<Double>();
    char v19 = 1;
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v11, v10, v12);
    lazy protocol witness table accessor for type Range<Double> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Double> and conformance <> Range<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v5);
    long long v13 = v16;
    *(void *)uint64_t v9 = v11;
    *(void *)(v9 + 8) = v10;
    *(unsigned char *)(v9 + 18) = BYTE2(v12);
    *(_WORD *)(v9 + 16) = v12;
    *(_OWORD *)(v9 + 24) = v13;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v11, v10, v12);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000013;
  }
  else {
    return 0x7470697263736564;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

void protocol witness for Decodable.init(from:) in conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription(void *a1)
{
  return CodableAccessibilityDataSeriesConfiguration.ValueDescription.encode(to:)(a1);
}

uint64_t CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.init(_:in:)@<X0>(long long *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = a1[5];
  long long v52 = a1[4];
  long long v53 = v4;
  long long v5 = a1[7];
  long long v54 = a1[6];
  long long v55 = v5;
  long long v6 = a1[1];
  long long v48 = *a1;
  long long v49 = v6;
  long long v7 = a1[3];
  long long v50 = a1[2];
  long long v51 = v7;
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v10 = *((void *)&v6 + 1);
  if (!*((void *)&v6 + 1)) {
    goto LABEL_3;
  }
  uint64_t v12 = *((void *)&v48 + 1);
  char v11 = v49;
  uint64_t v13 = v48;
  type metadata accessor for AccessibilityDataSeriesConfiguration.AxisConfiguration?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  *(void *)(inited + 32) = v13;
  *(void *)(inited + 40) = v12;
  *(unsigned char *)(inited + 48) = v11 & 1;
  *(void *)(inited + 56) = v10;
  uint64_t v42 = v8;
  uint64_t v43 = v9;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  swift_retain();
  swift_retain();
  outlined copy of Text?(v13, v12, v11, v10);
  CodableAccessibilityVersionStorage<>.init(texts:in:optional:idiom:)(inited, &v42, 0, &v40, (uint64_t)&v44);
  if (v47 != 255)
  {
    int v17 = v46 | (v47 << 16);
    uint64_t v15 = v44;
    uint64_t v16 = v45;
  }
  else
  {
LABEL_3:
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = 16711680;
  }
  uint64_t v18 = *((void *)&v51 + 1);
  uint64_t v39 = v16;
  uint64_t v32 = v8;
  if (!*((void *)&v51 + 1))
  {
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v15, v16, v17);
    goto LABEL_9;
  }
  uint64_t v20 = *((void *)&v50 + 1);
  char v19 = v51;
  uint64_t v21 = v50;
  type metadata accessor for AccessibilityDataSeriesConfiguration.AxisConfiguration?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
  uint64_t v22 = swift_initStackObject();
  *(_OWORD *)(v22 + 16) = xmmword_2461B9DC0;
  *(void *)(v22 + 32) = v21;
  *(void *)(v22 + 40) = v20;
  *(unsigned char *)(v22 + 48) = v19 & 1;
  *(void *)(v22 + 56) = v18;
  uint64_t v42 = v8;
  uint64_t v43 = v9;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  swift_retain();
  swift_retain();
  outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v15, v39, v17);
  outlined copy of Text?(v21, v20, v19, v18);
  CodableAccessibilityVersionStorage<>.init(texts:in:optional:idiom:)(v22, &v42, 0, &v40, (uint64_t)&v44);
  if (v47 == 255)
  {
LABEL_9:
    unsigned int v24 = 0;
    uint64_t v25 = 0;
    int v23 = 16711680;
    goto LABEL_10;
  }
  int v23 = v46 | (v47 << 16);
  unsigned int v24 = v44;
  uint64_t v25 = v45;
LABEL_10:
  uint64_t v33 = v25;
  swift_retain();
  swift_retain();
  outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v24, v25, v23);
  uint64_t v26 = swift_bridgeObjectRetain();
  long long v27 = specialized Sequence.compactMap<A>(_:)(v26, v32, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v38 = *((void *)&v52 + 1);
  char v37 = v53;
  uint64_t v36 = *((void *)&v53 + 1);
  char v35 = v54;
  uint64_t v34 = v55;
  uint64_t v28 = *((void *)&v54 + 1);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v29 = swift_bridgeObjectRetain();
  uint64_t v30 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI36AccessibilityDataSeriesConfigurationV16ValueDescriptionVG_AF07CodablefghI0VAIVs5NeverOTg503_s7d4UI43lfghi21V04AxisG0V_2inAeA0defr35VADV_AA17EnvironmentValuesVtcfcAC16jK11VAhLVXEfU0_AF0xY0VTf1cn_nTf4ng_n(v29, v32, v9);
  swift_release_n();
  swift_release_n();
  outlined release of AccessibilityDataSeriesConfiguration.AxisConfiguration((uint64_t *)&v48);
  swift_bridgeObjectRelease();
  outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v15, v39, v17);
  outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v24, v33, v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v24, v33, v23);
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v15, v39, v17);
  *(void *)a3 = v15;
  *(void *)(a3 + 8) = v39;
  *(unsigned char *)(a3 + 18) = BYTE2(v17);
  *(_WORD *)(a3 + 16) = v17;
  *(void *)(a3 + 24) = v24;
  *(void *)(a3 + 32) = v33;
  *(unsigned char *)(a3 + 42) = BYTE2(v23);
  *(_WORD *)(a3 + 40) = v23;
  *(void *)(a3 + 48) = v27;
  *(void *)(a3 + 56) = v38;
  *(unsigned char *)(a3 + 64) = v37;
  *(void *)(a3 + 72) = v36;
  *(unsigned char *)(a3 + 80) = v35;
  *(void *)(a3 + 88) = v28;
  *(void *)(a3 + 96) = v34;
  *(void *)(a3 + 104) = v30;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v15, v39, v17);
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v24, v33, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v3 = *(void **)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  int v5 = *(unsigned __int16 *)(v1 + 40) | (*(unsigned __int8 *)(v1 + 42) << 16);
  uint64_t v31 = *(void *)(v1 + 56);
  char v30 = *(unsigned char *)(v1 + 64);
  uint64_t v29 = *(void *)(v1 + 72);
  char v28 = *(unsigned char *)(v1 + 80);
  uint64_t v26 = *(void *)(v1 + 96);
  uint64_t v27 = *(void *)(v1 + 88);
  if (*(unsigned __int8 *)(v1 + 18) != 255)
  {
    long long v7 = *(void **)v1;
    uint64_t v6 = *(void *)(v1 + 8);
    int v8 = *(unsigned __int16 *)(v1 + 16) | (*(unsigned __int8 *)(v1 + 18) << 16);
    if (((*(unsigned __int8 *)(v1 + 18) << 16) & 0x10000) != 0)
    {
      type metadata accessor for AccessibilityTextStorage();
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = v7;
      *(void *)(v13 + 24) = v6;
      *(unsigned char *)(v13 + 32) = v8 & 1;
      *(unsigned char *)(v13 + 33) = BYTE1(v8) & 1;
      uint64_t v34 = 1;
      uint64_t v35 = v13;
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v7, v6, v8, 1);
      uint64_t v33 = 0;
      uint64_t v32 = MEMORY[0x263F8EE78];
    }
    else
    {
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)v1, *(void *)(v1 + 8), *(_WORD *)(v1 + 16), 0);
      uint64_t v9 = ResolvedStyledText.accessibilityText.getter();
      uint64_t v32 = v11;
      uint64_t v33 = v10;
      uint64_t v34 = v12 & 1;
      uint64_t v35 = v9;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v7, v6, v8);
    }
  }
  if (BYTE2(v5) == 255)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  else if ((v5 & 0x10000) != 0)
  {
    type metadata accessor for AccessibilityTextStorage();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v3;
    *(void *)(v14 + 24) = v4;
    *(unsigned char *)(v14 + 32) = v5 & 1;
    *(unsigned char *)(v14 + 33) = BYTE1(v5) & 1;
    uint64_t v16 = 1;
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v3, v4, v5, 1);
    uint64_t v15 = 0;
    uint64_t v17 = MEMORY[0x263F8EE78];
  }
  else
  {
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v3, v4, v5, 0);
    uint64_t v14 = ResolvedStyledText.accessibilityText.getter();
    uint64_t v15 = v18;
    uint64_t v17 = v19;
    uint64_t v16 = v20 & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v3, v4, v5);
  }
  uint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v22 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI34CodableAccessibilityVersionStorageOyAF0F18ResolvedStyledTextVAF0gL0VGG_AF0L0Vs5NeverOTg503_s7d4UI43fg54DataSeriesConfigurationV04AxisG0V13configurationAA0defu9VADVvgAA4l8VAA0cD14hi8OyAA0c14jK62J0VAA0dJ0VGcfu_32f6f9bf4b0141814c023ba9cad627274bArKTf3nnnpk_nTf1cn_n(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI43CodableAccessibilityDataSeriesConfigurationV16ValueDescriptionVG_AF0ghiJ0VAIVs5NeverOTg503_s7d4UI43fghij31V04AxisG0V13configurationAA0defr10VADVvgAH16kL58VAcJVcfu0_33_21c9bbe930dcb26c694134c0e56303c8AlKTf3nnnpk_nTf1cn_n(v23);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v35;
  *(void *)(a1 + 8) = v33;
  *(void *)(a1 + 16) = v34;
  *(void *)(a1 + 24) = v32;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = v15;
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = v17;
  *(void *)(a1 + 64) = v22;
  *(void *)(a1 + 72) = v31;
  *(unsigned char *)(a1 + 80) = v30;
  *(void *)(a1 + 88) = v29;
  *(unsigned char *)(a1 + 96) = v28;
  *(void *)(a1 + 104) = v27;
  *(void *)(a1 + 112) = v26;
  *(void *)(a1 + 120) = v24;
  return result;
}

uint64_t CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x656C746974;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6562614C74696E75;
      break;
    case 2:
      uint64_t result = 0x79726F6765746163;
      break;
    case 3:
      unsigned int v3 = 1768843629;
      goto LABEL_6;
    case 4:
      unsigned int v3 = 1769496941;
LABEL_6:
      uint64_t result = v3 | 0x566D756D00000000;
      break;
    case 5:
    case 7:
      uint64_t result = 0xD000000000000011;
      break;
    case 6:
      uint64_t result = 0x7365756C6176;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.encode(to:)(void *a1)
{
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityDataSeriesConfiguration.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys, (uint64_t)&unk_26FA75610, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v31 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v18 - v5;
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  int v37 = *((unsigned __int16 *)v1 + 8);
  char v9 = *((unsigned char *)v1 + 18);
  uint64_t v10 = v1[3];
  uint64_t v29 = v1[4];
  uint64_t v30 = v10;
  LODWORD(v10) = *((unsigned __int8 *)v1 + 42);
  int v27 = *((unsigned __int16 *)v1 + 20);
  int v28 = v10;
  uint64_t v11 = v1[6];
  uint64_t v25 = v1[7];
  uint64_t v26 = v11;
  LODWORD(v11) = *((unsigned __int8 *)v1 + 64);
  uint64_t v12 = v1[9];
  int v23 = *((unsigned __int8 *)v1 + 80);
  int v24 = v11;
  uint64_t v21 = v1[11];
  uint64_t v22 = v12;
  uint64_t v13 = v1[12];
  uint64_t v19 = v1[13];
  uint64_t v20 = v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v33 = v7;
  uint64_t v34 = v8;
  char v36 = v9;
  __int16 v35 = v37;
  char v38 = 0;
  type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>();
  lazy protocol witness table accessor for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>(&lazy protocol witness table cache variable for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>);
  uint64_t v14 = v32;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (v14) {
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v6, v4);
  }
  uint64_t v16 = v26;
  uint64_t v17 = v31;
  uint64_t v33 = v30;
  uint64_t v34 = v29;
  char v36 = (v27 | (v28 << 16)) >> 16;
  __int16 v35 = v27;
  char v38 = 1;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v33 = v16;
  char v38 = 2;
  type metadata accessor for [CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>]();
  lazy protocol witness table accessor for type [CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>] and conformance <A> [A](&lazy protocol witness table cache variable for type [CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>] and conformance <A> [A], &lazy protocol witness table cache variable for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v33) = 3;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v33) = 4;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  uint64_t v33 = v21;
  char v38 = 5;
  type metadata accessor for AccessibilityDataSeriesConfiguration.AxisConfiguration?(0, &lazy cache variable for type metadata for [Double], MEMORY[0x263F8D538], MEMORY[0x263F8D488]);
  lazy protocol witness table accessor for type [Double] and conformance <A> [A](&lazy protocol witness table cache variable for type [Double] and conformance <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v33 = v20;
  char v38 = 6;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v33 = v19;
  char v38 = 7;
  type metadata accessor for AccessibilityDataSeriesConfiguration.AxisConfiguration?(0, &lazy cache variable for type metadata for [CodableAccessibilityDataSeriesConfiguration.ValueDescription], (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration.ValueDescription, MEMORY[0x263F8D488]);
  lazy protocol witness table accessor for type [CodableAccessibilityDataSeriesConfiguration.ValueDescription] and conformance <A> [A](&lazy protocol witness table cache variable for type [CodableAccessibilityDataSeriesConfiguration.ValueDescription] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
}

void CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.init(from:)(void *a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityDataSeriesConfiguration.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys, (uint64_t)&unk_26FA75610, MEMORY[0x263F8E040]);
  id v42 = v5;
  uint64_t v6 = *((void *)v5 - 1);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v34 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  long long v44 = a1;
  if (v2)
  {
    uint64_t v43 = v2;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(0, 0, 16711680);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(0, 0, 16711680);
  }
  else
  {
    uint64_t v40 = v6;
    char v38 = a2;
    type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>();
    char v50 = 0;
    lazy protocol witness table accessor for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>(&lazy protocol witness table cache variable for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    id v9 = v45;
    uint64_t v10 = v46;
    int v11 = v47 | (v48 << 16);
    char v50 = 1;
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v45, v46, v11);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v49 = v11;
    id v12 = v9;
    id v13 = v45;
    uint64_t v14 = v46;
    LODWORD(v9) = v47 | (v48 << 16);
    type metadata accessor for [CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>]();
    char v50 = 2;
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v13, v14, (int)v9);
    lazy protocol witness table accessor for type [CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>] and conformance <A> [A](&lazy protocol witness table cache variable for type [CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>] and conformance <A> [A], &lazy protocol witness table cache variable for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    id v15 = v45;
    LOBYTE(v45) = 3;
    swift_bridgeObjectRetain();
    uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    id v39 = v15;
    int v36 = v17;
    uint64_t v37 = v16;
    LOBYTE(v45) = 4;
    uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    HIDWORD(v34) = v19;
    uint64_t v35 = v18;
    type metadata accessor for AccessibilityDataSeriesConfiguration.AxisConfiguration?(0, &lazy cache variable for type metadata for [Double], MEMORY[0x263F8D538], MEMORY[0x263F8D488]);
    uint64_t v21 = v20;
    char v50 = 5;
    uint64_t v22 = lazy protocol witness table accessor for type [Double] and conformance <A> [A](&lazy protocol witness table cache variable for type [Double] and conformance <A> [A]);
    uint64_t v43 = v21;
    uint64_t v41 = v22;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    id v23 = v45;
    char v50 = 6;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v41 = (uint64_t)v45;
    type metadata accessor for AccessibilityDataSeriesConfiguration.AxisConfiguration?(0, &lazy cache variable for type metadata for [CodableAccessibilityDataSeriesConfiguration.ValueDescription], (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration.ValueDescription, MEMORY[0x263F8D488]);
    char v50 = 7;
    lazy protocol witness table accessor for type [CodableAccessibilityDataSeriesConfiguration.ValueDescription] and conformance <A> [A](&lazy protocol witness table cache variable for type [CodableAccessibilityDataSeriesConfiguration.ValueDescription] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v43 = 0;
    (*(void (**)(char *, id))(v40 + 8))(v8, v42);
    id v42 = v45;
    id v24 = v23;
    uint64_t v25 = v12;
    uint64_t v26 = v12;
    uint64_t v27 = v10;
    uint64_t v28 = v10;
    LODWORD(v10) = v49;
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v26, v28, v49);
    uint64_t v29 = v14;
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v13, v14, (int)v9);
    id v30 = v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v13, v14, (int)v9);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v25, v27, v10);
    uint64_t v31 = v38;
    *char v38 = v25;
    v31[1] = v27;
    *((unsigned char *)v31 + 18) = BYTE2(v10);
    *((_WORD *)v31 + 8) = v10;
    v31[3] = v13;
    v31[4] = v14;
    *((unsigned char *)v31 + 42) = BYTE2(v9);
    *((_WORD *)v31 + 20) = (_WORD)v9;
    uint64_t v32 = v37;
    v31[6] = v30;
    v31[7] = v32;
    *((unsigned char *)v31 + 64) = v36 & 1;
    v31[9] = v35;
    *((unsigned char *)v31 + 80) = BYTE4(v34) & 1;
    uint64_t v33 = v41;
    v31[11] = v24;
    v31[12] = v33;
    v31[13] = v42;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v25, v27, v10);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v13, v29, (int)v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys()
{
  return CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

void protocol witness for Decodable.init(from:) in conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(void *a1@<X0>, void *a2@<X8>)
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(void *a1)
{
  return CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.encode(to:)(a1);
}

void *CodableAccessibilityDataSeriesConfiguration.init(_:in:)@<X0>(void *__src@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v6 = __dst[0];
  uint64_t v7 = __dst[1];
  char v8 = __dst[2];
  uint64_t v9 = __dst[3];
  type metadata accessor for AccessibilityDataSeriesConfiguration.AxisConfiguration?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_2461B9DC0;
  *(void *)(v10 + 32) = v6;
  *(void *)(v10 + 40) = v7;
  *(unsigned char *)(v10 + 48) = v8;
  *(void *)(v10 + 56) = v9;
  v80[0] = v5;
  v80[1] = v4;
  v78[0] = 0uLL;
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v6, v7, v8);
  swift_retain();
  swift_retain();
  CodableAccessibilityVersionStorage<>.init(texts:in:optional:idiom:)(v10, v80, 0, (uint64_t *)v78, (uint64_t)__srca);
  int v11 = *(void **)__srca;
  uint64_t v12 = *(void *)&__srca[8];
  int v13 = *(unsigned __int16 *)&__srca[16] | (__srca[18] << 16);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&__dst[7], (uint64_t)v80);
  id v45 = v11;
  uint64_t v50 = v12;
  int v49 = v13;
  if (_s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg((uint64_t)v80) == 1)
  {
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v11, v12, v13);
    uint64_t v53 = 0;
    long long v54 = 0;
    long long v51 = 0;
    unint64_t v52 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v47 = 0;
    unint64_t v48 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&__dst[7], (uint64_t)__srca);
    v78[4] = *(_OWORD *)&__srca[64];
    v78[5] = *(_OWORD *)&__srca[80];
    v78[6] = *(_OWORD *)&__srca[96];
    v78[7] = *(_OWORD *)&__srca[112];
    v78[0] = *(_OWORD *)__srca;
    v78[1] = *(_OWORD *)&__srca[16];
    v78[2] = *(_OWORD *)&__srca[32];
    v78[3] = *(_OWORD *)&__srca[48];
    *(void *)&long long v64 = v5;
    *((void *)&v64 + 1) = v4;
    swift_retain();
    swift_retain();
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v11, v12, v13);
    outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(&__dst[7], (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
    CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.init(_:in:)(v78, (uint64_t *)&v64, (uint64_t)&v56);
    uint64_t v53 = *((void *)&v56 + 1);
    long long v54 = (void *)v56;
    long long v51 = (void *)*((void *)&v57 + 1);
    unint64_t v52 = (unsigned __int16)v57 | ((unint64_t)BYTE2(v57) << 16);
    uint64_t v43 = v59;
    uint64_t v44 = v58;
    uint64_t v47 = *((void *)&v59 + 1);
    unint64_t v48 = WORD4(v58) | ((unint64_t)BYTE10(v58) << 16);
    uint64_t v14 = v60;
    uint64_t v15 = *((void *)&v60 + 1);
    uint64_t v16 = v61;
    uint64_t v17 = *((void *)&v61 + 1);
    uint64_t v19 = *((void *)&v62 + 1);
    uint64_t v18 = v62;
  }
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&__dst[23], (uint64_t)v78);
  uint64_t v41 = v19;
  uint64_t v42 = v15;
  uint64_t v39 = v17;
  uint64_t v40 = v18;
  if (_s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg((uint64_t)v78) == 1)
  {
    uint64_t v20 = v16;
    uint64_t v22 = v53;
    uint64_t v21 = v54;
    id v24 = v51;
    unint64_t v23 = v52;
    uint64_t v25 = v44;
    uint64_t v26 = v43;
    outlined copy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(v54, v53, v52, v51, v44, v48, v43);
    swift_release();
    swift_release();
    outlined release of AccessibilityDataSeriesConfiguration((uint64_t)__dst);
    unint64_t v27 = 0;
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    long long v35 = 0uLL;
    long long v36 = 0uLL;
    long long v37 = 0uLL;
  }
  else
  {
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&__dst[23], (uint64_t)__srca);
    long long v60 = *(_OWORD *)&__srca[64];
    long long v61 = *(_OWORD *)&__srca[80];
    long long v62 = *(_OWORD *)&__srca[96];
    long long v63 = *(_OWORD *)&__srca[112];
    long long v56 = *(_OWORD *)__srca;
    long long v57 = *(_OWORD *)&__srca[16];
    long long v58 = *(_OWORD *)&__srca[32];
    long long v59 = *(_OWORD *)&__srca[48];
    v55[0] = v5;
    v55[1] = v4;
    outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(&__dst[23], (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
    outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(&__dst[23], (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
    uint64_t v20 = v16;
    uint64_t v22 = v53;
    id v24 = v51;
    unint64_t v23 = v52;
    uint64_t v25 = v44;
    uint64_t v26 = v43;
    outlined copy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(v54, v53, v52, v51, v44, v48, v43);
    CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.init(_:in:)(&v56, v55, (uint64_t)&v64);
    outlined release of AccessibilityDataSeriesConfiguration((uint64_t)__dst);
    outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(&__dst[23], (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
    long long v35 = v64;
    unint64_t v27 = v65 | ((unint64_t)v66 << 16);
    long long v36 = v67;
    unint64_t v28 = v68 | ((unint64_t)v69 << 16);
    uint64_t v29 = v70;
    uint64_t v30 = v71;
    uint64_t v31 = v72;
    uint64_t v32 = v73;
    uint64_t v33 = v74;
    long long v37 = v75;
    uint64_t v21 = v54;
    uint64_t v34 = v76;
  }
  __srca[18] = BYTE2(v49);
  *(_WORD *)&__srca[19] = __dst[4];
  *(void *)&__srca[24] = __dst[5];
  *(_WORD *)&__srca[32] = __dst[6];
  __srca[34] = BYTE2(__dst[6]);
  *(void *)&__srca[168] = v27;
  *(void *)&__srca[192] = v28;
  *(void *)&__srca[200] = v29;
  *(void *)&__srca[208] = v30;
  *(void *)&__srca[216] = v31;
  *(void *)&__srca[224] = v32;
  *(_OWORD *)&__srca[152] = v35;
  *(_OWORD *)&__srca[176] = v36;
  *(_OWORD *)&__srca[240] = v37;
  *(void *)&__srca[232] = v33;
  *(void *)&__srca[256] = v34;
  *(void *)__srcCGFloat a = v45;
  *(void *)&__srca[8] = v50;
  *(_WORD *)&__srca[16] = v49;
  *(void *)&__srca[40] = v21;
  *(void *)&__srca[48] = v22;
  *(void *)&__srca[56] = v23;
  *(void *)&__srca[64] = v24;
  *(void *)&__srca[72] = v25;
  *(void *)&__srca[80] = v48;
  *(void *)&__srca[88] = v26;
  *(void *)&__srca[96] = v47;
  *(void *)&__srca[104] = v14;
  *(void *)&__srca[112] = v42;
  *(void *)&__srca[120] = v20;
  *(void *)&__srca[128] = v39;
  *(void *)&__srca[136] = v40;
  *(void *)&__srca[144] = v41;
  outlined retain of CodableAccessibilityDataSeriesConfiguration((uint64_t)__srca, (void (*)(void, void, void))outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))outlined copy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?);
  outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(v21, v22, v23, v24, v25, v48, v26);
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v45, v50, v49);
  outlined retain of CodableAccessibilityDataSeriesConfiguration((uint64_t)__srca, (void (*)(void, void, void))outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?);
  return memcpy(a3, __srca, 0x108uLL);
}

void *CodableAccessibilityDataSeriesConfiguration.configuration.getter@<X0>(void *a1@<X8>)
{
  unint64_t v2 = a1;
  char v51 = *(unsigned char *)(v1 + 19);
  char v50 = *(unsigned char *)(v1 + 20);
  uint64_t v49 = *(void *)(v1 + 24);
  char v47 = *(unsigned char *)(v1 + 33);
  char v48 = *(unsigned char *)(v1 + 32);
  char v3 = *(unsigned char *)(v1 + 34);
  long long v4 = *(_OWORD *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 56);
  long long v6 = *(_OWORD *)(v1 + 64);
  uint64_t v8 = *(void *)(v1 + 80);
  uint64_t v7 = *(void *)(v1 + 88);
  uint64_t v10 = *(void *)(v1 + 96);
  uint64_t v9 = *(void *)(v1 + 104);
  uint64_t v12 = *(void *)(v1 + 112);
  uint64_t v11 = *(void *)(v1 + 120);
  long long v13 = *(_OWORD *)(v1 + 128);
  uint64_t v14 = *(void *)(v1 + 144);
  uint64_t v15 = *(void *)(v1 + 168);
  long long v35 = *(_OWORD *)(v1 + 152);
  long long v36 = *(_OWORD *)(v1 + 176);
  uint64_t v16 = *(void *)(v1 + 200);
  uint64_t v37 = *(void *)(v1 + 192);
  uint64_t v38 = *(void *)(v1 + 208);
  uint64_t v39 = *(void *)(v1 + 216);
  uint64_t v40 = *(void *)(v1 + 224);
  uint64_t v41 = *(void *)(v1 + 232);
  long long v43 = *(_OWORD *)(v1 + 240);
  uint64_t v42 = *(void *)(v1 + 256);
  if (*(unsigned __int8 *)(v1 + 18) == 255)
  {
    uint64_t v17 = 0;
    char v46 = 0;
    unint64_t v44 = 0xE000000000000000;
    uint64_t v45 = MEMORY[0x263F8EE78];
    if (v7)
    {
LABEL_3:
      long long v66 = v4;
      __int16 v67 = v5;
      char v68 = BYTE2(v5);
      long long v69 = v6;
      __int16 v70 = v8;
      char v71 = BYTE2(v8);
      uint64_t v72 = v7;
      uint64_t v73 = v10;
      char v74 = v9 & 1;
      uint64_t v75 = v12;
      char v76 = v11 & 1;
      long long v77 = v13;
      uint64_t v78 = v14;
      CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.configuration.getter((uint64_t)__src);
      _ViewInputs.base.modify(__src);
      goto LABEL_9;
    }
  }
  else
  {
    long long v25 = *(_OWORD *)(v1 + 40);
    long long v26 = *(_OWORD *)(v1 + 64);
    uint64_t v27 = *(void *)(v1 + 96);
    uint64_t v28 = *(void *)(v1 + 104);
    uint64_t v29 = *(void *)(v1 + 112);
    uint64_t v30 = *(void *)(v1 + 120);
    uint64_t v31 = *(void *)(v1 + 144);
    long long v32 = *(_OWORD *)(v1 + 128);
    char v33 = *(unsigned char *)(v1 + 34);
    uint64_t v19 = *(void **)v1;
    uint64_t v18 = *(void *)(v1 + 8);
    int v20 = *(unsigned __int16 *)(v1 + 16) | (*(unsigned __int8 *)(v1 + 18) << 16);
    if (((*(unsigned __int8 *)(v1 + 18) << 16) & 0x10000) != 0)
    {
      type metadata accessor for AccessibilityTextStorage();
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v19;
      *(void *)(v17 + 24) = v18;
      *(unsigned char *)(v17 + 32) = v20 & 1;
      *(unsigned char *)(v17 + 33) = BYTE1(v20) & 1;
      char v46 = 1;
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v19, v18, v20, 1);
      unint64_t v44 = 0;
      uint64_t v45 = MEMORY[0x263F8EE78];
    }
    else
    {
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)v1, *(void *)(v1 + 8), *(_WORD *)(v1 + 16), 0);
      uint64_t v17 = ResolvedStyledText.accessibilityText.getter();
      unint64_t v44 = v21;
      uint64_t v45 = v22;
      char v46 = v23 & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v19, v18, v20);
    }
    unint64_t v2 = a1;
    char v3 = v33;
    long long v13 = v32;
    LOBYTE(v11) = v30;
    uint64_t v14 = v31;
    LOBYTE(v9) = v28;
    uint64_t v12 = v29;
    uint64_t v10 = v27;
    long long v4 = v25;
    long long v6 = v26;
    if (v7) {
      goto LABEL_3;
    }
  }
  _s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOi0_(__src);
LABEL_9:
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)__src, (uint64_t)&v66);
  if (v16)
  {
    long long v53 = v35;
    __int16 v54 = v15;
    char v55 = BYTE2(v15);
    long long v56 = v36;
    __int16 v57 = v37;
    char v58 = BYTE2(v37);
    uint64_t v59 = v16;
    uint64_t v60 = v38;
    char v61 = v39 & 1;
    uint64_t v62 = v40;
    char v63 = v41 & 1;
    long long v64 = v43;
    uint64_t v65 = v42;
    CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.configuration.getter((uint64_t)__src);
    _ViewInputs.base.modify(__src);
  }
  else
  {
    _s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOi0_(__src);
  }
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)__src, (uint64_t)&v53);
  *(void *)__srCGFloat c = v17;
  *(void *)&__src[8] = v44;
  __src[16] = v46;
  *(void *)&__src[24] = v45;
  __src[32] = v51;
  __src[33] = v50;
  *(void *)&void __src[40] = v49;
  __src[48] = v48;
  __src[49] = v47;
  __src[50] = v3;
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v66, (uint64_t)&__src[56]);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v53, (uint64_t)&__src[184]);
  return memcpy(v2, __src, 0x138uLL);
}

unint64_t CodableAccessibilityDataSeriesConfiguration.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 1701667182;
  switch(a1)
  {
    case 1:
      unint64_t result = 1701869940;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    case 6:
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t CodableAccessibilityDataSeriesConfiguration.encode(to:)(void *a1)
{
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityDataSeriesConfiguration.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityDataSeriesConfiguration.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys, (uint64_t)&unk_26FA75738, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v51 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  long long v6 = (char *)&v16 - v5;
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  int v67 = *((unsigned __int16 *)v1 + 8);
  char v9 = *((unsigned char *)v1 + 18);
  int v10 = *((unsigned __int8 *)v1 + 19);
  int v49 = *((unsigned __int8 *)v1 + 20);
  int v50 = v10;
  uint64_t v48 = v1[3];
  int v11 = *((unsigned __int8 *)v1 + 32);
  int v46 = *((unsigned __int8 *)v1 + 33);
  int v47 = v11;
  int v45 = *((unsigned __int8 *)v1 + 34);
  uint64_t v31 = v1[5];
  uint64_t v32 = v1[6];
  uint64_t v33 = v1[7];
  uint64_t v34 = v1[8];
  uint64_t v44 = v1[9];
  uint64_t v43 = v1[10];
  uint64_t v42 = v1[11];
  uint64_t v41 = v1[12];
  uint64_t v40 = v1[13];
  uint64_t v39 = v1[14];
  uint64_t v38 = v1[15];
  uint64_t v37 = v1[16];
  uint64_t v36 = v1[17];
  uint64_t v35 = v1[18];
  uint64_t v17 = v1[19];
  uint64_t v18 = v1[20];
  uint64_t v19 = v1[21];
  uint64_t v30 = v1[22];
  uint64_t v29 = v1[23];
  uint64_t v28 = v1[24];
  uint64_t v27 = v1[25];
  uint64_t v26 = v1[26];
  uint64_t v25 = v1[27];
  uint64_t v24 = v1[28];
  uint64_t v23 = v1[29];
  uint64_t v22 = v1[30];
  uint64_t v21 = v1[31];
  uint64_t v20 = v1[32];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys();
  uint64_t v12 = v6;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v53 = v7;
  uint64_t v54 = v8;
  BYTE2(v55) = v9;
  LOWORD(v55) = v67;
  char v68 = 0;
  type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>();
  lazy protocol witness table accessor for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>(&lazy protocol witness table cache variable for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>);
  uint64_t v13 = v52;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (v13) {
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v6, v4);
  }
  uint64_t v15 = v51;
  LOBYTE(v53) = v50;
  char v68 = 1;
  lazy protocol witness table accessor for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v53) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v53) = 3;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v53) = 4;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v53) = 5;
  KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v53 = v31;
  uint64_t v54 = v32;
  uint64_t v55 = v33;
  uint64_t v56 = v34;
  uint64_t v57 = v44;
  uint64_t v58 = v43;
  uint64_t v59 = v42;
  uint64_t v60 = v41;
  uint64_t v61 = v40;
  uint64_t v62 = v39;
  uint64_t v63 = v38;
  uint64_t v64 = v37;
  uint64_t v65 = v36;
  uint64_t v66 = v35;
  char v68 = 6;
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v53 = v17;
  uint64_t v54 = v18;
  uint64_t v55 = v19;
  uint64_t v56 = v30;
  uint64_t v57 = v29;
  uint64_t v58 = v28;
  uint64_t v59 = v27;
  uint64_t v60 = v26;
  uint64_t v61 = v25;
  uint64_t v62 = v24;
  uint64_t v63 = v23;
  uint64_t v64 = v22;
  uint64_t v65 = v21;
  uint64_t v66 = v20;
  char v68 = 7;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v12, v4);
}

void *CodableAccessibilityDataSeriesConfiguration.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for KeyedDecodingContainer<CodableAccessibilityDataSeriesConfiguration.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityDataSeriesConfiguration.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys, (uint64_t)&unk_26FA75738, MEMORY[0x263F8E040]);
  uint64_t v55 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v29 - v7;
  char v119 = 1;
  uint64_t v9 = a1[3];
  uint64_t v58 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys();
  uint64_t v56 = v8;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    unint64_t v57 = v2;
    uint64_t v122 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v63 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(0, 0, 16711680);
    outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(v63, v59, v60, v64, v65, (int)v66, v61);
    return outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(0, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    uint64_t v53 = a2;
    uint64_t v54 = v6;
    type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>();
    LOBYTE(v68[0]) = 0;
    lazy protocol witness table accessor for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>(&lazy protocol witness table cache variable for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>);
    uint64_t v10 = v55;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v12 = v69;
    uint64_t v13 = v70;
    unsigned int v14 = (unsigned __int16)v71 | (BYTE2(v71) << 16);
    LOBYTE(v68[0]) = 1;
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v69, v70, v14);
    lazy protocol witness table accessor for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v15 = (uint64_t)v58;
    int v16 = v69;
    LOBYTE(v69) = 2;
    LODWORD(v52) = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v69) = 3;
    uint64_t v51 = (void *)KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v119 = v17 & 1;
    LOBYTE(v69) = 4;
    unsigned int v50 = v17;
    LODWORD(v48) = KeyedDecodingContainer.decode(_:forKey:)();
    int v49 = v16;
    LOBYTE(v69) = 5;
    LODWORD(v46) = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v68[0]) = 6;
    unint64_t v57 = lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v18 = v79;
    char v102 = 7;
    uint64_t v47 = v82;
    uint64_t v45 = v81;
    uint64_t v44 = v80;
    uint64_t v122 = v78;
    uint64_t v67 = v77;
    uint64_t v63 = v69;
    uint64_t v64 = v72;
    uint64_t v59 = v70;
    uint64_t v60 = v71;
    uint64_t v65 = v73;
    uint64_t v66 = v74;
    uint64_t v61 = v75;
    uint64_t v62 = v76;
    outlined copy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(v69, v70, v71, v72, v73, (int)v74, v75);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    unint64_t v57 = 0;
    int v40 = v52 & 1;
    int v43 = v48 & 1;
    char v19 = v46 & 1;
    int v32 = v46 & 1;
    (*(void (**)(void *, uint64_t))(v54 + 8))(v56, v10);
    uint64_t v20 = v104;
    uint64_t v21 = v105;
    uint64_t v55 = v107;
    uint64_t v56 = v106;
    uint64_t v54 = v108;
    uint64_t v52 = v109;
    uint64_t v48 = v110;
    uint64_t v34 = v103;
    uint64_t v35 = v111;
    uint64_t v36 = v112;
    uint64_t v37 = v113;
    uint64_t v38 = v114;
    uint64_t v39 = v115;
    uint64_t v41 = v116;
    uint64_t v33 = v104;
    uint64_t v46 = v105;
    outlined copy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(v103, v104, v105, v106, v107, v108, v109);
    outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(0, 0, 0, 0, 0, 0, 0);
    uint64_t v30 = v13;
    uint64_t v31 = v12;
    v68[0] = v12;
    v68[1] = v13;
    uint64_t v42 = v18;
    LOBYTE(v68[4]) = v50 & 1;
    HIDWORD(v29) = v14;
    unsigned int v50 = HIWORD(v14);
    BYTE2(v68[2]) = BYTE2(v14);
    LOWORD(v68[2]) = v14;
    BYTE3(v68[2]) = v49;
    BYTE4(v68[2]) = v40;
    v68[3] = v51;
    BYTE1(v68[4]) = v43;
    BYTE2(v68[4]) = v19;
    v68[5] = v63;
    v68[6] = v59;
    v68[7] = v60;
    v68[8] = v64;
    v68[9] = v65;
    v68[10] = v66;
    v68[11] = v61;
    v68[12] = v62;
    v68[13] = v67;
    v68[14] = v122;
    v68[15] = v18;
    char v68[16] = v44;
    v68[17] = v45;
    uint64_t v22 = v34;
    v68[18] = v47;
    v68[19] = v34;
    v68[20] = v20;
    v68[21] = v21;
    v68[22] = v56;
    v68[23] = v55;
    v68[24] = v54;
    v68[25] = v52;
    v68[26] = v48;
    v68[27] = v35;
    v68[28] = v36;
    v68[29] = v37;
    v68[30] = v38;
    v68[31] = v39;
    v68[32] = v41;
    outlined retain of CodableAccessibilityDataSeriesConfiguration((uint64_t)v68, (void (*)(void, void, void))outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))outlined copy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?);
    outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(v22, v33, v46, v56, v55, v54, v52);
    uint64_t v23 = v59;
    uint64_t v24 = v60;
    uint64_t v25 = v61;
    uint64_t v26 = v62;
    outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(v63, v59, v60, v64, v65, (int)v66, v61);
    uint64_t v28 = v30;
    uint64_t v27 = v31;
    LOWORD(v18) = WORD2(v29);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v31, v30, SHIDWORD(v29));
    memcpy(v53, v68, 0x108uLL);
    __swift_destroy_boxed_opaque_existential_1(v15);
    long long v69 = v27;
    uint64_t v70 = v28;
    BYTE2(v71) = v50;
    LOWORD(v71) = (_WORD)v18;
    BYTE3(v71) = v49;
    BYTE4(v71) = v40;
    uint64_t v72 = v51;
    BYTE1(v73) = v43;
    *(_WORD *)((char *)&v71 + 5) = v120;
    HIBYTE(v71) = v121;
    LOBYTE(v73) = v119;
    BYTE2(v73) = v32;
    *(_DWORD *)((char *)&v73 + 3) = v117;
    HIBYTE(v73) = v118;
    char v74 = v63;
    uint64_t v75 = v23;
    uint64_t v76 = v24;
    uint64_t v77 = (uint64_t)v64;
    uint64_t v78 = v65;
    long long v79 = v66;
    uint64_t v80 = v25;
    uint64_t v81 = v26;
    uint64_t v82 = v67;
    uint64_t v83 = v122;
    long long v84 = v42;
    uint64_t v85 = v44;
    uint64_t v86 = v45;
    uint64_t v87 = v47;
    uint64_t v88 = v34;
    uint64_t v89 = v33;
    uint64_t v90 = v46;
    uint64_t v91 = v56;
    uint64_t v92 = v55;
    uint64_t v93 = v54;
    uint64_t v94 = v52;
    uint64_t v95 = v48;
    uint64_t v96 = v35;
    uint64_t v97 = v36;
    uint64_t v98 = v37;
    uint64_t v99 = v38;
    uint64_t v100 = v39;
    uint64_t v101 = v41;
    return (void *)outlined retain of CodableAccessibilityDataSeriesConfiguration((uint64_t)&v69, (void (*)(void, void, void))outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?);
  }
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys()
{
  return CodableAccessibilityDataSeriesConfiguration.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CodableAccessibilityDataSeriesConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

void *protocol witness for Decodable.init(from:) in conformance CodableAccessibilityDataSeriesConfiguration@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return CodableAccessibilityDataSeriesConfiguration.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityDataSeriesConfiguration(void *a1)
{
  return CodableAccessibilityDataSeriesConfiguration.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys);
  }
  return result;
}

void outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(void *a1, uint64_t a2, int a3)
{
  if (BYTE2(a3) != 255) {
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1, a2, a3, BYTE2(a3) & 1);
  }
}

void *outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(void *result, uint64_t a2, int a3, void *a4, uint64_t a5, int a6, uint64_t a7)
{
  if (a7)
  {
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(result, a2, a3);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(a4, a5, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

id outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(id result, uint64_t a2, int a3)
{
  if (BYTE2(a3) != 255) {
    return outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(result, a2, a3, BYTE2(a3) & 1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration);
  }
  return result;
}

void *outlined copy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(void *result, uint64_t a2, int a3, void *a4, uint64_t a5, int a6, uint64_t a7)
{
  if (a7)
  {
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(result, a2, a3);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(a4, a5, a6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of CodableAccessibilityDataSeriesConfiguration(uint64_t a1, void (*a2)(void, void, void), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))
{
  uint64_t v19 = *(void *)(a1 + 48);
  uint64_t v20 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 96);
  long long v14 = *(_OWORD *)(a1 + 120);
  long long v15 = *(_OWORD *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 136);
  uint64_t v10 = *(void *)(a1 + 144);
  uint64_t v27 = *(void *)(a1 + 160);
  uint64_t v28 = *(void *)(a1 + 152);
  uint64_t v25 = *(void *)(a1 + 176);
  uint64_t v26 = *(void *)(a1 + 168);
  uint64_t v23 = *(void *)(a1 + 192);
  uint64_t v24 = *(void *)(a1 + 184);
  uint64_t v21 = *(void *)(a1 + 208);
  uint64_t v22 = *(void *)(a1 + 200);
  long long v16 = *(_OWORD *)(a1 + 232);
  long long v17 = *(_OWORD *)(a1 + 216);
  uint64_t v11 = *(void *)(a1 + 248);
  uint64_t v12 = *(void *)(a1 + 256);
  a2(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 18) << 16));
  a3(v20, v19, v18, v4, v5, v6, v7, v8, v15, *((void *)&v15 + 1), v14, *((void *)&v14 + 1), v9, v10);
  a3(v28, v27, v26, v25, v24, v23, v22, v21, v17, *((void *)&v17 + 1), v16, *((void *)&v16 + 1), v11, v12);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [CodableAccessibilityDataSeriesConfiguration.ValueDescription] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AccessibilityDataSeriesConfiguration.AxisConfiguration?(255, &lazy cache variable for type metadata for [CodableAccessibilityDataSeriesConfiguration.ValueDescription], (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration.ValueDescription, MEMORY[0x263F8D488]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Double] and conformance <A> [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AccessibilityDataSeriesConfiguration.AxisConfiguration?(255, &lazy cache variable for type metadata for [Double], MEMORY[0x263F8D538], MEMORY[0x263F8D488]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for AccessibilityDataSeriesConfiguration.AxisConfiguration?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t _s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t outlined release of AccessibilityDataSeriesConfiguration(uint64_t a1)
{
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 112);
  long long v7 = *(_OWORD *)(a1 + 120);
  uint64_t v19 = *(void *)(a1 + 192);
  uint64_t v20 = *(void *)(a1 + 184);
  uint64_t v17 = *(void *)(a1 + 208);
  uint64_t v18 = *(void *)(a1 + 200);
  uint64_t v15 = *(void *)(a1 + 224);
  uint64_t v16 = *(void *)(a1 + 216);
  uint64_t v13 = *(void *)(a1 + 240);
  uint64_t v14 = *(void *)(a1 + 232);
  long long v8 = *(_OWORD *)(a1 + 248);
  outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v12, v11, v10, v9, v2, v3, v4, v5, v7);
  outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v20, v19, v18, v17, v16, v15, v14, v13, v8);
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI36AccessibilityDataSeriesConfigurationV16ValueDescriptionVG_AF07CodablefghI0VAIVs5NeverOTg503_s7d4UI43lfghi21V04AxisG0V_2inAeA0defr35VADV_AA17EnvironmentValuesVtcfcAC16jK11VAhLVXEfU0_AF0xY0VTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v30 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v30;
    type metadata accessor for AccessibilityDataSeriesConfiguration.AxisConfiguration?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
    uint64_t v6 = (void *)(a1 + 72);
    do
    {
      int64_t v24 = v3;
      uint64_t v7 = *(v6 - 5);
      uint64_t v8 = *(v6 - 4);
      char v9 = *((unsigned char *)v6 - 24);
      uint64_t v10 = *(v6 - 2);
      uint64_t v11 = *(v6 - 1);
      uint64_t v12 = *v6;
      initeCGFloat d = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
      *(void *)(inited + 32) = v7;
      *(void *)(inited + 40) = v8;
      *(unsigned char *)(inited + 48) = v9;
      *(void *)(inited + 56) = v10;
      v26[0] = a2;
      v26[1] = a3;
      v25[0] = 0;
      v25[1] = 0;
      outlined copy of Text.Storage(v7, v8, v9);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v7, v8, v9);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      CodableAccessibilityVersionStorage<>.init(texts:in:optional:idiom:)(inited, v26, 0, v25, (uint64_t)v27);
      uint64_t v14 = v27[0];
      uint64_t v23 = v27[1];
      int v15 = v29;
      int v16 = v28;
      outlined consume of Text.Storage(v7, v8, v9);
      swift_bridgeObjectRelease();
      uint64_t v30 = v4;
      unint64_t v18 = *(void *)(v4 + 16);
      unint64_t v17 = *(void *)(v4 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        uint64_t v4 = v30;
      }
      *(void *)(v4 + 16) = v18 + 1;
      uint64_t v19 = v4 + 40 * v18;
      *(void *)(v19 + 32) = v14;
      *(void *)(v19 + 40) = v23;
      *(unsigned char *)(v19 + 50) = (v16 | (v15 << 16)) >> 16;
      *(_WORD *)(v19 + 48) = v16;
      *(void *)(v19 + 56) = v11;
      *(void *)(v19 + 64) = v12;
      v6 += 6;
      int64_t v3 = v24 - 1;
    }
    while (v24 != 1);
  }
  return v4;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return (void *)MEMORY[0x263F8EE78];
  }
  type metadata accessor for AccessibilityDataSeriesConfiguration.AxisConfiguration?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)(a1 + 56);
  uint64_t v6 = (void *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v27 = v6;
    uint64_t v7 = *v5;
    char v8 = *((unsigned char *)v5 - 8);
    uint64_t v9 = *(v5 - 3);
    uint64_t v10 = *(v5 - 2);
    initeCGFloat d = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
    *(void *)(inited + 32) = v9;
    *(void *)(inited + 40) = v10;
    *(unsigned char *)(inited + 48) = v8;
    *(void *)(inited + 56) = v7;
    v23[0] = a2;
    v23[1] = a3;
    v22[0] = 0;
    v22[1] = 0;
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v9, v10, v8);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v9, v10, v8);
    swift_retain();
    swift_retain();
    CodableAccessibilityVersionStorage<>.init(texts:in:optional:idiom:)(inited, v23, 0, v22, (uint64_t)&v24);
    outlined consume of Text.Storage(v9, v10, v8);
    swift_bridgeObjectRelease();
    unsigned __int8 v12 = v26;
    if (v26 == 255)
    {
      uint64_t v6 = v27;
    }
    else
    {
      long long v19 = v24;
      int v13 = v25;
      uint64_t v6 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
      }
      unint64_t v15 = v6[2];
      unint64_t v14 = v6[3];
      if (v15 >= v14 >> 1) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v6);
      }
      unsigned int v16 = v13 & 0xFF00FFFF | (v12 << 16);
      _OWORD v6[2] = v15 + 1;
      unint64_t v17 = &v6[3 * v15];
      *((_OWORD *)v17 + 2) = v19;
      *((_WORD *)v17 + 24) = v16;
      *((unsigned char *)v17 + 50) = BYTE2(v16) & 1;
    }
    v5 += 4;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t *outlined release of AccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  outlined consume of Text?(*a1, a1[1], a1[2], a1[3]);
  outlined consume of Text?(v2, v3, v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys()
{
  return &unk_26FA75610;
}

unsigned char *storeEnumTagSinglePayload for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245CD4E9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CodableAccessibilityDataSeriesConfiguration.CodingKeys()
{
  return &unk_26FA75738;
}

void destroy for CodableAccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 18) != 255)
  {
    int v1 = *(unsigned __int16 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 18) << 16);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)a1, *(void *)(a1 + 8), v1, BYTE2(v1) & 1);
  }
}

uint64_t initializeWithCopy for CodableAccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1, uint64_t *a2)
{
  if (*((unsigned __int8 *)a2 + 18) == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 15) = *(_DWORD *)((char *)a2 + 15);
  }
  else
  {
    int v4 = *((unsigned __int16 *)a2 + 8) | (*((unsigned __int8 *)a2 + 18) << 16);
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>((void *)*a2, v6, *((_WORD *)a2 + 8), BYTE2(v4) & 1);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(_WORD *)(a1 + 16) = v4;
    *(unsigned char *)(a1 + 18) = BYTE2(v4) & 1;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1, long long *a2)
{
  int v4 = *((unsigned __int16 *)a2 + 8) | (*((unsigned __int8 *)a2 + 18) << 16);
  if (*(unsigned __int8 *)(a1 + 18) == 255)
  {
    if (BYTE2(v4) == 255)
    {
      long long v5 = *a2;
      *(_DWORD *)(a1 + 15) = *(_DWORD *)((char *)a2 + 15);
      *(_OWORD *)a1 = v5;
    }
    else
    {
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = *((void *)a2 + 1);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)a2, v8, v4, BYTE2(v4) & 1);
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      *(_WORD *)(a1 + 16) = v4;
      *(unsigned char *)(a1 + 18) = BYTE2(v4) & 1;
    }
  }
  else if (BYTE2(v4) == 255)
  {
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1);
    int v6 = *(_DWORD *)((char *)a2 + 15);
    *(_OWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 15) = v6;
  }
  else
  {
    uint64_t v9 = *(void **)a2;
    uint64_t v10 = *((void *)a2 + 1);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)a2, v10, v4, BYTE2(v4) & 1);
    uint64_t v11 = *(void **)a1;
    uint64_t v12 = *(void *)(a1 + 8);
    char v13 = *(unsigned char *)(a1 + 18);
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v10;
    __int16 v14 = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v4;
    *(unsigned char *)(a1 + 18) = BYTE2(v4) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v11, v12, v14, v13);
  }
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 18) != 255)
  {
    unsigned int v4 = *(unsigned __int16 *)(a2 + 16) | (*(unsigned __int8 *)(a2 + 18) << 16);
    if (HIWORD(v4) <= 0xFEu)
    {
      int v5 = *(unsigned __int16 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 18) << 16);
      int v6 = *(void **)a1;
      uint64_t v7 = *(void *)(a1 + 8);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = v4;
      *(unsigned char *)(a1 + 18) = BYTE2(v4) & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v6, v7, v5, BYTE2(v5) & 1);
      goto LABEL_6;
    }
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
LABEL_6:
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 18);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityDataSeriesConfiguration.ValueDescription(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 18) = ~(_BYTE)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableAccessibilityDataSeriesConfiguration.ValueDescription()
{
  return &type metadata for CodableAccessibilityDataSeriesConfiguration.ValueDescription;
}

uint64_t specialized CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000024621F290)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6562614C74696E75 && a2 == 0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xEE00736C6562614CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x566D756D696E696DLL && a2 == 0xEC00000065756C61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x566D756D6978616DLL && a2 == 0xEC00000065756C61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024621F250 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7365756C6176 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024621F270)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t specialized CodableAccessibilityDataSeriesConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000024621F190 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000024621F1B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001FLL && a2 == 0x800000024621F1D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000024621F1F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024621F210 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024621F230)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys);
  }
  return result;
}

void type metadata accessor for Range<Double>()
{
  if (!lazy cache variable for type metadata for Range<Double>)
  {
    unint64_t v0 = type metadata accessor for Range();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Range<Double>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type Range<Double> and conformance <> Range<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Range<Double>();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for KeyedDecodingContainer<CodableAccessibilityDataSeriesConfiguration.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245CD5DACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys()
{
  return &unk_26FA757C8;
}

uint64_t Text.Effect.ClusterTransformMap.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v5 = 0uLL;
  if (!*(void *)(a3 + 16))
  {
    char v10 = 1;
    long long v12 = 0uLL;
    long long v13 = 0uLL;
    long long v14 = 0uLL;
    goto LABEL_8;
  }
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(result);
  if ((v8 & 1) == 0)
  {
    char v10 = 1;
    long long v12 = 0uLL;
    long long v13 = 0uLL;
    long long v14 = 0uLL;
    long long v5 = 0uLL;
    goto LABEL_8;
  }
  unint64_t v9 = *(void *)(*(void *)(a3 + 56) + 8 * result);
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v9 < *(void *)(a2 + 16))
  {
    char v10 = 0;
    uint64_t v11 = (_OWORD *)(a2 + (v9 << 6));
    long long v5 = v11[2];
    long long v12 = v11[3];
    long long v13 = v11[4];
    long long v14 = v11[5];
LABEL_8:
    *(_OWORD *)a4 = v5;
    *(_OWORD *)(a4 + 16) = v12;
    *(_OWORD *)(a4 + 32) = v13;
    *(_OWORD *)(a4 + 48) = v14;
    *(unsigned char *)(a4 + 64) = v10;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Text.Effect.ClusterTransformMap.byWords(fragment:)(uint64_t a1)
{
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, MEMORY[0x263F8EDA0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unsigned int v6 = (char *)&v66 - v5;
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_1(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  double v10 = MEMORY[0x270FA5388](v7);
  long long v12 = (char *)&v66 - v11;
  uint64_t v67 = a1;
  uint64_t v13 = *(void *)(a1 + 24);
  long long v14 = *(void **)(v13 + 80);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v6, v13+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v3, v10);
  CFAttributedStringRef v15 = v14;
  RangeSet.ranges.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (RangeSet.Ranges.count.getter() == 1)
  {
    RangeSet.Ranges.subscript.getter();
    CFIndex v16 = v80;
    RangeSet.Ranges.subscript.getter();
    CFIndex v17 = v79 - (void)v78;
    if (__OFSUB__(v79, v78))
    {
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    CFIndex v17 = 0;
    CFIndex v16 = -1;
  }
  unint64_t v18 = (id)CFAttributedStringGetString(v15);
  if (!v18) {
    goto LABEL_69;
  }
  v84.location = v16;
  v84.length = v17;
  CFIndex v19 = specialized Text.Effect.Tokenizer.init(_:range:)(v18, v84);

  uint64_t v20 = *(void *)(v19 + 16);
  if (v20)
  {
    uint64_t v21 = *(void *)(v13 + 96);
    unint64_t v22 = *(void *)(v21 + 16);
    CFIndex v74 = v19 + 32;
    uint64_t v23 = v21 + 32;
    uint64_t v24 = swift_bridgeObjectRetain();
    unint64_t v25 = 0;
    unsigned __int8 v26 = (void *)MEMORY[0x263F8EE78];
    uint64_t v27 = (void *)MEMORY[0x263F8EE80];
    uint64_t v28 = v67;
    uint64_t v70 = v20;
    CFIndex v71 = v19;
    uint64_t v69 = v24;
    unint64_t v68 = v22;
    do
    {
      if (v25 >= *(void *)(v19 + 16)) {
        goto LABEL_63;
      }
      if (v22)
      {
        uint64_t v29 = 0;
        uint64_t v30 = (uint64_t *)(v74 + 16 * v25);
        uint64_t v32 = *v30;
        uint64_t v31 = v30[1];
        uint64_t v77 = v26[2];
        unint64_t v33 = *(void *)(v24 + 16);
        unint64_t v34 = v22;
        do
        {
          unint64_t v35 = v34 >> 1;
          unint64_t v36 = v29 + (v34 >> 1);
          if (__OFADD__(v29, v34 >> 1))
          {
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
            goto LABEL_68;
          }
          if (v36 >= v33) {
            goto LABEL_56;
          }
          v34 += ~v35;
          if (*(void *)(v23 + 24 * v36) < v32) {
            uint64_t v29 = v36 + 1;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while ((uint64_t)v34 > 0);
        uint64_t v37 = 0;
        unint64_t v38 = v22;
        do
        {
          unint64_t v39 = v38 >> 1;
          unint64_t v40 = v37 + (v38 >> 1);
          if (__OFADD__(v37, v38 >> 1)) {
            goto LABEL_57;
          }
          if (v40 >= v33) {
            goto LABEL_58;
          }
          v38 += ~v39;
          if (*(void *)(v23 + 24 * v40) < v31) {
            uint64_t v37 = v40 + 1;
          }
          else {
            unint64_t v38 = v39;
          }
        }
        while ((uint64_t)v38 > 0);
        if (v29 < v37)
        {
          uint64_t v75 = v26;
          uint64_t v41 = *(void *)(v28 + 48);
          uint64_t v42 = v29 + v41;
          if (__OFADD__(v29, v41)) {
            goto LABEL_64;
          }
          uint64_t v43 = v37 + v41;
          if (__OFADD__(v37, v41)) {
            goto LABEL_65;
          }
          if (v43 < v42) {
            goto LABEL_66;
          }
          unint64_t v76 = v25;
          Text.Effect.BaseFragment.typographicBounds(for:)(v42, v43, (uint64_t)&v80);
          CFIndex v44 = v80;
          long long v72 = v82;
          long long v73 = v81;
          uint64_t v45 = v83;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v75[2] + 1, 1, v75);
          }
          unint64_t v25 = v76;
          unint64_t v47 = v75[2];
          unint64_t v46 = v75[3];
          if (v47 >= v46 >> 1)
          {
            uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v46 > 1), v47 + 1, 1, v75);
            unint64_t v25 = v76;
            uint64_t v75 = v64;
          }
          uint64_t v48 = v75;
          void v75[2] = v47 + 1;
          int v49 = &v48[8 * v47];
          v49[4] = v42;
          v49[5] = v43;
          v49[6] = v44;
          *(_OWORD *)(v49 + 7) = v73;
          *(_OWORD *)(v49 + 9) = v72;
          v49[11] = v45;
          if (__OFSUB__(v43, v42)) {
            goto LABEL_67;
          }
          if (v43 != v42)
          {
            uint64_t v50 = v37 - v29;
            while (1)
            {
              if (v42 >= v43) {
                goto LABEL_59;
              }
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v78 = v27;
              unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v42);
              uint64_t v54 = v27[2];
              BOOL v55 = (v52 & 1) == 0;
              uint64_t v56 = v54 + v55;
              if (__OFADD__(v54, v55)) {
                goto LABEL_60;
              }
              char v57 = v52;
              if (v27[3] >= v56)
              {
                if (isUniquelyReferenced_nonNull_native)
                {
                  uint64_t v27 = v78;
                  if ((v52 & 1) == 0) {
                    goto LABEL_47;
                  }
                }
                else
                {
                  specialized _NativeDictionary.copy()();
                  uint64_t v27 = v78;
                  if ((v57 & 1) == 0) {
                    goto LABEL_47;
                  }
                }
              }
              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v56, isUniquelyReferenced_nonNull_native);
                uint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v42);
                if ((v57 & 1) != (v59 & 1)) {
                  goto LABEL_70;
                }
                unint64_t v53 = v58;
                uint64_t v27 = v78;
                if ((v57 & 1) == 0)
                {
LABEL_47:
                  v27[(v53 >> 6) + 8] |= 1 << v53;
                  uint64_t v60 = 8 * v53;
                  *(void *)(v27[6] + v60) = v42;
                  *(void *)(v27[7] + v60) = v77;
                  uint64_t v61 = v27[2];
                  BOOL v62 = __OFADD__(v61, 1);
                  uint64_t v63 = v61 + 1;
                  if (v62) {
                    goto LABEL_62;
                  }
                  void v27[2] = v63;
                  goto LABEL_49;
                }
              }
              *(void *)(v27[7] + 8 * v53) = v77;
LABEL_49:
              swift_bridgeObjectRelease();
              if (__OFSUB__(v43, v42 + 1)) {
                goto LABEL_61;
              }
              ++v42;
              --v50;
              unint64_t v25 = v76;
              if (!v50)
              {
                uint64_t v28 = v67;
                break;
              }
            }
          }
          uint64_t v20 = v70;
          CFIndex v19 = v71;
          unsigned __int8 v26 = v75;
          uint64_t v24 = v69;
          unint64_t v22 = v68;
        }
      }
      ++v25;
    }
    while (v25 != v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return (uint64_t)v26;
}

void _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
    unint64_t v7 = a3(a1, &type metadata for Text.Layout.CharacterIndex, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

ValueMetadata *type metadata accessor for Text.Effect.ClusterTransformMap.Element()
{
  return &type metadata for Text.Effect.ClusterTransformMap.Element;
}

ValueMetadata *type metadata accessor for Text.Effect.ClusterTransformMap()
{
  return &type metadata for Text.Effect.ClusterTransformMap;
}

uint64_t Gesture.requiredTapCount(_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v10 = a1;
  char v11 = a2 & 1;
  uint64_t v8 = type metadata accessor for RequiredTapCountWriter();
  swift_getWitnessTable();
  return Gesture.modifier<A>(_:)((uint64_t)&v10, a3, v8, a4);
}

uint64_t type metadata accessor for RequiredTapCountWriter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_245CD671C()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for RequiredTapCountKey()
{
  return &type metadata for RequiredTapCountKey;
}

void *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance RequiredTapCountKey(uint64_t *a1, void *(*a2)(uint64_t *__return_ptr))
{
  if (a1[1])
  {
    uint64_t result = a2(&v7);
    uint64_t v4 = v7;
    char v5 = v8;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t result = a2(&v7);
    char v5 = 0;
    uint64_t v4 = v7;
    if (v7 <= v6) {
      uint64_t v4 = v6;
    }
    if (v8) {
      uint64_t v4 = v6;
    }
  }
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  return result;
}

double static RequiredTapCountWriter._makeGesture(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void *(*a3)(double *__return_ptr, _OWORD *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  int v5 = *a1;
  long long v6 = *(_OWORD *)(a2 + 48);
  v30[2] = *(_OWORD *)(a2 + 32);
  v30[3] = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  v30[4] = *(_OWORD *)(a2 + 64);
  v30[5] = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  v30[0] = *(_OWORD *)a2;
  v30[1] = v8;
  uint64_t v9 = *(void *)(a2 + 96);
  int v10 = *(_DWORD *)(a2 + 104);
  long long v33 = *(_OWORD *)(a2 + 108);
  uint64_t v31 = v9;
  int v32 = v10;
  char v11 = a3(&v27, v30);
  uint64_t v12 = *(void *)(v9 + 16);
  if (v12)
  {
    uint64_t v13 = 32;
    while (*(ValueMetadata **)(v9 + v13) != &type metadata for RequiredTapCountKey)
    {
      v13 += 16;
      if (!--v12) {
        goto LABEL_13;
      }
    }
    LODWORD(v30[0]) = v5;
    MEMORY[0x270FA5388](v11);
    uint64_t v24 = type metadata accessor for RequiredTapCountWriter.Child();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<(_:)>();
    uint64_t v15 = v14;
    swift_bridgeObjectRetain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v30, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_8, (uint64_t)&v23, v24, MEMORY[0x263F8E628], v15, MEMORY[0x263F8E658], v16);
    uint64_t v17 = *(void *)(v28 + 16);
    if (v17)
    {
      unint64_t v18 = (ValueMetadata **)(v28 + 48);
      while (*(v18 - 2) != &type metadata for RequiredTapCountKey)
      {
        v18 += 3;
        if (!--v17)
        {
          unint64_t v18 = (ValueMetadata **)MEMORY[0x263F288F8];
          break;
        }
      }
    }
    else
    {
      unint64_t v18 = (ValueMetadata **)MEMORY[0x263F288F8];
    }
    *(void *)&v30[0] = __PAIR64__(*(_DWORD *)v18, v26);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for Int?();
    type metadata accessor for PreferenceTransform<RequiredTapCountKey>();
    lazy protocol witness table accessor for type PreferenceTransform<RequiredTapCountKey> and conformance PreferenceTransform<A>();
    unsigned int v19 = Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v30[0]) = 0;
    PreferencesOutputs.subscript.setter(v19, &type metadata for RequiredTapCountKey, (uint64_t)&protocol witness table for RequiredTapCountKey);
    swift_bridgeObjectRelease();
  }
LABEL_13:
  uint64_t v20 = v28;
  int v21 = v29;
  double result = v27;
  *(double *)a4 = v27;
  *(void *)(a4 + 8) = v20;
  *(_DWORD *)(a4 + 16) = v21;
  return result;
}

uint64_t *(*RequiredTapCountWriter.Child.value.getter())(uint64_t *result)
{
  type metadata accessor for RequiredTapCountWriter();
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  char v2 = *(unsigned char *)(Value + 8);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(unsigned char *)(v3 + 24) = v2;
  return partial apply for closure #1 in RequiredTapCountWriter.Child.value.getter;
}

uint64_t *closure #1 in RequiredTapCountWriter.Child.value.getter(uint64_t *result, uint64_t a2, char a3)
{
  if (result[1])
  {
    char v3 = a3 & 1;
  }
  else
  {
    char v3 = 0;
    if (*result <= a2) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = *result;
    }
    if (a3) {
      a2 = *result;
    }
    else {
      a2 = v4;
    }
  }
  *double result = a2;
  *((unsigned char *)result + 8) = v3;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance RequiredTapCountWriter<A>.Child@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  char v2 = RequiredTapCountWriter.Child.value.getter();
  uint64_t v4 = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = v4;
  *a1 = partial apply for specialized closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:);
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

double protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance RequiredTapCountWriter<A>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void *(*a3)(double *__return_ptr, _OWORD *)@<X2>, uint64_t a4@<X8>)
{
  return static RequiredTapCountWriter._makeGesture(modifier:inputs:body:)(a1, a2, a3, a4);
}

uint64_t type metadata accessor for RequiredTapCountWriter.Child()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for PreferenceTransform<RequiredTapCountKey>()
{
  if (!lazy cache variable for type metadata for PreferenceTransform<RequiredTapCountKey>)
  {
    unint64_t v0 = type metadata accessor for PreferenceTransform();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PreferenceTransform<RequiredTapCountKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PreferenceTransform<RequiredTapCountKey> and conformance PreferenceTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PreferenceTransform<RequiredTapCountKey> and conformance PreferenceTransform<A>;
  if (!lazy protocol witness table cache variable for type PreferenceTransform<RequiredTapCountKey> and conformance PreferenceTransform<A>)
  {
    type metadata accessor for PreferenceTransform<RequiredTapCountKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceTransform<RequiredTapCountKey> and conformance PreferenceTransform<A>);
  }
  return result;
}

uint64_t sub_245CD6DA4()
{
  return swift_deallocObject();
}

uint64_t *partial apply for closure #1 in RequiredTapCountWriter.Child.value.getter(uint64_t *result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  int v3 = *(unsigned __int8 *)(v1 + 24);
  if ((result[1] & 1) == 0)
  {
    if (*result > v2) {
      uint64_t v2 = *result;
    }
    BOOL v4 = v3 == 0;
    LOBYTE(v3) = 0;
    if (!v4) {
      uint64_t v2 = *result;
    }
  }
  *unint64_t result = v2;
  *((unsigned char *)result + 8) = v3;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in RequiredTapCountWriter<A>.Child()
{
  return swift_getWitnessTable();
}

uint64_t sub_245CD6E04()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t dispatch thunk of SceneStorageHost.sceneStorageDidChange()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

double PanEvent.location.getter()
{
  return *(double *)v0;
}

void PanEvent.location.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
  v2[7] = a1;
  v2[8] = a2;
}

__n128 (*PanEvent.location.modify(void *a1))(__n128 **a1, char a2)
{
  *a1 = v1;
  return PanEvent.location.modify;
}

__n128 PanEvent.location.modify(__n128 **a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    __n128 result = **a1;
    *(__n128 *)((char *)*a1 + 56) = result;
  }
  return result;
}

double PanEvent.globalLocation.getter()
{
  return *(double *)(v0 + 16);
}

void PanEvent.globalLocation.setter(double a1, double a2)
{
  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*PanEvent.globalLocation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void PanEvent.phase.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 32);
}

unsigned char *PanEvent.phase.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 32) = *result;
  return result;
}

uint64_t (*PanEvent.phase.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double PanEvent.timestamp.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 40);
  *a1 = result;
  return result;
}

double PanEvent.timestamp.setter(double *a1)
{
  double result = *a1;
  *(double *)(v1 + 40) = *a1;
  return result;
}

uint64_t (*PanEvent.timestamp.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t PanEvent.binding.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 48);
  return swift_retain();
}

uint64_t PanEvent.binding.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 48) = v2;
  return result;
}

uint64_t (*PanEvent.binding.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double PanEvent.translation.getter()
{
  return *(double *)(v0 + 56);
}

void PanEvent.translation.setter(double a1, double a2)
{
  *(double *)(v2 + 56) = a1;
  *(double *)(v2 + 64) = a2;
}

uint64_t (*PanEvent.translation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double PanEvent.globalTranslation.getter()
{
  return *(double *)(v0 + 72);
}

void PanEvent.globalTranslation.setter(double a1, double a2)
{
  *(double *)(v2 + 72) = a1;
  *(double *)(v2 + 80) = a2;
}

uint64_t (*PanEvent.globalTranslation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void PanEvent.touchType.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 88);
}

unsigned char *PanEvent.touchType.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 88) = *result;
  return result;
}

uint64_t (*PanEvent.touchType.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t PanEvent.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(v4 + 8) + 8))(&v28, v5);
  char v6 = v28;
  uint64_t v8 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(v7 + 8) + 16))(&v28, v8);
  uint64_t v9 = v28;
  uint64_t v11 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(v10 + 8) + 24))(&v28, v11);
  uint64_t v12 = v28;
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  uint64_t v15 = *(double (**)(uint64_t, uint64_t))(v14 + 24);
  swift_retain();
  double v16 = v15(v13, v14);
  uint64_t v18 = v17;
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v19);
  double v21 = (*(double (**)(uint64_t, uint64_t))(v20 + 32))(v19, v20);
  uint64_t v23 = v22;
  uint64_t v25 = a1[3];
  uint64_t v24 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v25);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(v24 + 16) + 8))(&v28, v25);
  char v26 = v28;
  *(double *)a2 = v16;
  *(void *)(a2 + 8) = v18;
  *(double *)(a2 + 16) = v21;
  *(void *)(a2 + 24) = v23;
  *(unsigned char *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v9;
  *(void *)(a2 + 48) = v12;
  *(double *)(a2 + 56) = v16;
  *(void *)(a2 + 64) = v18;
  *(double *)(a2 + 72) = v21;
  *(void *)(a2 + 80) = v23;
  *(unsigned char *)(a2 + 88) = v26;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  return swift_release();
}

char *PanEvent.init(globalLocation:phase:timestamp:globalTranslation:touchType:)@<X0>(char *result@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  char v8 = *result;
  uint64_t v9 = *a2;
  char v10 = *a3;
  *(double *)a4 = a5;
  *(double *)(a4 + 8) = a6;
  *(double *)(a4 + 16) = a5;
  *(double *)(a4 + 24) = a6;
  *(unsigned char *)(a4 + 32) = v8;
  *(void *)(a4 + 40) = v9;
  *(void *)(a4 + 48) = 0;
  *(double *)(a4 + 56) = a7;
  *(double *)(a4 + 64) = a8;
  *(double *)(a4 + 72) = a7;
  *(double *)(a4 + 80) = a8;
  *(unsigned char *)(a4 + 88) = v10;
  return result;
}

uint64_t PanEvent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v12);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for PanEventType);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v21);
    outlined init with copy of AnyTrackedValue((uint64_t)v21, (uint64_t)v19);
    PanEvent.init(_:)(v19, (uint64_t)v12);
    __swift_destroy_boxed_opaque_existential_1(a1);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    uint64_t v5 = v13;
    uint64_t v6 = v14;
    long long v7 = v15;
    long long v8 = v16;
    uint64_t v9 = v17;
    char v10 = v18;
    long long v11 = v12[1];
    *(_OWORD *)a2 = v12[0];
    *(_OWORD *)(a2 + 16) = v11;
    *(void *)(a2 + 32) = v5;
    *(void *)(a2 + 40) = v6;
  }
  else
  {
    uint64_t v20 = 0;
    memset(v19, 0, sizeof(v19));
    __swift_destroy_boxed_opaque_existential_1(a1);
    uint64_t result = outlined destroy of PanEventType?((uint64_t)v19);
    long long v8 = 0uLL;
    uint64_t v9 = 0;
    char v10 = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    long long v7 = xmmword_24619B520;
  }
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 64) = v8;
  *(void *)(a2 + 80) = v9;
  *(unsigned char *)(a2 + 88) = v10;
  return result;
}

uint64_t outlined destroy of PanEventType?(uint64_t a1)
{
  type metadata accessor for PanEventType?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PanEventType?()
{
  if (!lazy cache variable for type metadata for PanEventType?)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for PanEventType);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PanEventType?);
    }
  }
}

double PanEvent.radius.getter()
{
  return 0.0;
}

void PanEvent.kind.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

double protocol witness for PanEventType.translation.getter in conformance PanEvent()
{
  return *(double *)(v0 + 56);
}

double protocol witness for PanEventType.globalTranslation.getter in conformance PanEvent()
{
  return *(double *)(v0 + 72);
}

void protocol witness for SpatialEventType.globalLocation.setter in conformance PanEvent(double a1, double a2)
{
  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

double protocol witness for SpatialEventType.location.getter in conformance PanEvent()
{
  return *(double *)v0;
}

void protocol witness for SpatialEventType.location.setter in conformance PanEvent(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
  v2[7] = a1;
  v2[8] = a2;
}

uint64_t (*protocol witness for SpatialEventType.location.modify in conformance PanEvent(void *a1))()
{
  *a1 = v1;
  return protocol witness for SpatialEventType.location.modify in conformance PanEvent;
}

void protocol witness for EventType.phase.getter in conformance PanEvent(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 32);
}

double protocol witness for EventType.timestamp.getter in conformance PanEvent@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 40);
  *a1 = result;
  return result;
}

uint64_t protocol witness for EventType.binding.getter in conformance PanEvent@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 48);
  return swift_retain();
}

uint64_t protocol witness for EventType.binding.setter in conformance PanEvent(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 48) = v2;
  return result;
}

void protocol witness for TouchTypeProviding.touchType.getter in conformance PanEvent(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 88);
}

BOOL specialized static PanEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)a1, *(float64x2_t *)a2), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16)))), 0xFuLL))) & 1) == 0|| *(double *)(a1 + 40) != *(double *)(a2 + 40)|| *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
  {
    return result;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  double v6 = *(double *)(a1 + 56);
  double v5 = *(double *)(a1 + 64);
  double v8 = *(double *)(a1 + 72);
  double v7 = *(double *)(a1 + 80);
  int v9 = *(unsigned __int8 *)(a1 + 88);
  uint64_t v10 = *(void *)(a2 + 48);
  double v11 = *(double *)(a2 + 56);
  if (v4)
  {
    if (v10)
    {
      BOOL result = 0;
      if (v4 != v10 || v6 != v11) {
        return result;
      }
      goto LABEL_14;
    }
    swift_retain();
LABEL_12:
    swift_release();
    return 0;
  }
  if (v10) {
    goto LABEL_12;
  }
  BOOL result = 0;
  if (v6 != v11) {
    return result;
  }
LABEL_14:
  if (v5 == *(double *)(a2 + 64) && v8 == *(double *)(a2 + 72) && v7 == *(double *)(a2 + 80)) {
    return v9 == *(unsigned __int8 *)(a2 + 88);
  }
  return result;
}

__n128 sub_245CD760C@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_245CD7618(uint64_t a1, uint64_t a2)
{
  double result = *(double *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v3;
  *(double *)(a2 + 56) = result;
  *(void *)(a2 + 64) = v3;
  return result;
}

uint64_t dispatch thunk of PanEventType.translation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PanEventType.globalTranslation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t initializeWithCopy for PanEvent(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PanEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for PanEvent(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for PanEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 89)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PanEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)double result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 89) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PanEvent()
{
  return &type metadata for PanEvent;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI4TextVAFE6EffectO15ChunkCollectionV_AJ6TimingV0H033_EA19070B6A02390AF2C0CF68765CF6B2LLVs5NeverOTg5(void (*a1)(long long *__return_ptr, _OWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v23;
    for (i = (long long *)(a3 + 48); ; i += 2)
    {
      long long v10 = *i;
      v19[0] = *(i - 1);
      v19[1] = v10;
      a1(&v20, v19);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      long long v11 = v20;
      uint64_t v12 = v21;
      uint64_t v13 = v22;
      uint64_t v23 = v6;
      unint64_t v15 = *(void *)(v6 + 16);
      unint64_t v14 = *(void *)(v6 + 24);
      if (v15 >= v14 >> 1)
      {
        long long v18 = v20;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        long long v11 = v18;
        uint64_t v6 = v23;
      }
      *(void *)(v6 + 16) = v15 + 1;
      uint64_t v16 = v6 + 32 * v15;
      *(_OWORD *)(v16 + 32) = v11;
      *(void *)(v16 + 48) = v12;
      *(void *)(v16 + 56) = v13;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy7SwiftUI19CAHostingLayerEventV11MouseButtonVG_AH8ResolvedVs5NeverOTg5(void (*a1)(_OWORD *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (!v5) {
    return v6;
  }
  uint64_t v7 = a3;
  uint64_t v26 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
  uint64_t v6 = v26;
  uint64_t result = specialized Set.startIndex.getter(v7);
  int64_t v9 = result;
  int v11 = v10;
  char v13 = v12 & 1;
  uint64_t v22 = v7 + 56;
  while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(unsigned char *)(v7 + 32))
  {
    if (((*(void *)(v22 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
      goto LABEL_15;
    }
    if (*(_DWORD *)(v7 + 36) != v11) {
      goto LABEL_16;
    }
    uint64_t v24 = *(void *)(*(void *)(v7 + 48) + 8 * v9);
    a1(v25, &v24);
    if (v4)
    {
      swift_release();
      return v6;
    }
    uint64_t v14 = v7;
    uint64_t v26 = v6;
    unint64_t v16 = *(void *)(v6 + 16);
    unint64_t v15 = *(void *)(v6 + 24);
    if (v16 >= v15 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      uint64_t v6 = v26;
    }
    *(void *)(v6 + 16) = v16 + 1;
    uint64_t v17 = (_OWORD *)(v6 + 48 * v16);
    long long v18 = v25[0];
    long long v19 = v25[2];
    v17[3] = v25[1];
    v17[4] = v19;
    uint64_t v17[2] = v18;
    uint64_t v7 = v14;
    uint64_t result = specialized _NativeSet.index(after:)(v9, v11, v13 & 1, v14);
    int64_t v9 = result;
    int v11 = v20;
    char v13 = v21 & 1;
    --v5;
    uint64_t v4 = 0;
    if (!v5)
    {
      outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(result, v20, v21 & 1);
      return v6;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()()
{
  return os_signpost(_:dso:log:name:signpostID:_:_:)();
}

void _DynamicPropertyBuffer.getState<A>(type:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Binding();
  uint64_t v23 = type metadata accessor for Optional();
  v7.n128_f64[0] = MEMORY[0x270FA5388](v23);
  int64_t v9 = (char *)&v21 - v8;
  int v10 = *((_DWORD *)v2 + 3);
  if (!v10)
  {
    uint64_t v17 = *(void *)(v5 - 8);
LABEL_11:
    uint64_t v18 = v17;
    uint64_t v20 = 1;
    goto LABEL_13;
  }
  uint64_t v22 = a2;
  uint64_t v11 = *v2;
  if (*v2)
  {
    int v12 = 0;
    char v13 = (void (**)(char *, uint64_t))(v6 + 8);
    int v14 = v10 - 1;
    uint64_t v21 = (v5 - 8) & 0xFFFFFFFFFFFFLL | 0x2E3F000000000000;
    while (1)
    {
      unint64_t v15 = (uint64_t *)(v11 + v12);
      if (v14) {
        v12 += *((_DWORD *)v15 + 2);
      }
      else {
        int v12 = 0;
      }
      uint64_t v16 = *v15;
      uint64_t v24 = v15;
      (*(void (**)(uint64_t **, uint64_t, uint64_t, __n128))(v16 + 128))(&v24, a1, a1, v7);
      uint64_t v17 = *(void *)(v5 - 8);
      uint64_t v18 = v17;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, v5) != 1) {
        break;
      }
      int v19 = v14 | v12;
      (*v13)(v9, v23);
      --v14;
      if (!v19)
      {
        a2 = v22;
        goto LABEL_11;
      }
    }
    a2 = v22;
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v22, v9, v5);
    uint64_t v20 = 0;
LABEL_13:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(a2, v20, 1, v5);
    return;
  }
  __break(1u);
}

void _DynamicPropertyBuffer.init()(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double _DynamicPropertyBuffer.init<A>(fields:container:inputs:baseOffset:)@<D0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  char v9 = *((unsigned char *)a1 + 16);
  int v10 = *((_DWORD *)a1 + 5);
  int v11 = *a2;
  uint64_t v17 = 0;
  double v18 = 0.0;
  v14[0] = v7;
  v14[1] = v8;
  char v15 = v9;
  int v16 = v10;
  int v13 = v11;
  _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)((uint64_t)v14, &v13, a3, a4, a5);
  outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a6 = v17;
  double result = v18;
  a6[1] = v18;
  return result;
}

BOOL _DynamicPropertyBuffer.isEmpty.getter()
{
  return *(_DWORD *)(v0 + 12) == 0;
}

Swift::Void __swiftcall _DynamicPropertyBuffer.reset()()
{
  int v1 = *((_DWORD *)v0 + 3);
  if (v1)
  {
    uint64_t v2 = *v0;
    if (*v0)
    {
      int v3 = 0;
      int v4 = v1 - 1;
      do
      {
        uint64_t v7 = (uint64_t *)(v2 + v3);
        if (v4) {
          v3 += *((_DWORD *)v7 + 2);
        }
        else {
          int v3 = 0;
        }
        int v5 = v4 | v3;
        uint64_t v6 = *v7;
        uint64_t v8 = v7;
        (*(void (**)(uint64_t **))(v6 + 112))(&v8);
        --v4;
      }
      while (v5);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t _DynamicPropertyBuffer.applyChanged(to:)(uint64_t result)
{
  int v2 = *((_DWORD *)v1 + 3);
  if (v2)
  {
    uint64_t v3 = *v1;
    if (*v1)
    {
      int v4 = (uint64_t (*)(void))result;
      int v5 = 0;
      int v6 = v2 - 1;
      while (1)
      {
        uint64_t v8 = v3 + v5;
        if (v6)
        {
          v5 += *(_DWORD *)(v8 + 8);
          int v9 = *(_DWORD *)(v8 + 12);
          if (v9 < 0) {
            goto LABEL_9;
          }
        }
        else
        {
          int v5 = 0;
          int v9 = *(_DWORD *)(v8 + 12);
          if (v9 < 0) {
LABEL_9:
          }
            double result = v4(v9 & 0x7FFFFFFF);
        }
        if (!(v6-- | v5)) {
          return result;
        }
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t static BoxVTableBase.getState<A>(elt:type:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Binding();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

BOOL static BoxVTable.hasType<A>(_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(v2 + 136) == a2;
}

uint64_t static BoxVTable.reset(elt:)()
{
  uint64_t v1 = *(void *)(v0 + 136);
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  return (*(uint64_t (**)(uint64_t))(*(void *)(v0 + 144) + 32))(v1);
}

uint64_t static BoxVTable.getState<A>(elt:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(v3 + 136);
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 144) + 48))(a2, a3, v6);
}

uint64_t static EnumVTable.reset(elt:)(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  if ((*(unsigned char *)(*(void *)result + 40) & 1) == 0)
  {
    unint64_t v2 = *(void *)(v1 + 32);
    if ((v2 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v3 = *(void *)(v1 + 16);
      if (v2 < *(void *)(v3 + 16))
      {
        uint64_t v4 = v3 + 24 * v2;
        int v5 = *(_DWORD *)(v4 + 52);
        if (!v5)
        {
LABEL_11:
          *(void *)(v1 + 24) = 0;
          *(void *)(v1 + 32) = 0;
          *(unsigned char *)(v1 + 40) = 1;
          return result;
        }
        uint64_t v6 = *(void *)(v4 + 40);
        if (v6)
        {
          int v7 = 0;
          int v8 = v5 - 1;
          do
          {
            int v11 = (uint64_t *)(v6 + v7);
            if (v8) {
              v7 += *((_DWORD *)v11 + 2);
            }
            else {
              int v7 = 0;
            }
            int v9 = v8 | v7;
            uint64_t v10 = *v11;
            int v12 = v11;
            double result = (*(uint64_t (**)(uint64_t **))(v10 + 112))(&v12);
            --v8;
          }
          while (v9);
          goto LABEL_11;
        }
LABEL_15:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

void static EnumVTable.getState<A>(elt:type:)(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  if (*(unsigned char *)(*a1 + 40))
  {
    uint64_t v5 = type metadata accessor for Binding();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    v6(a3, 1, 1, v5);
  }
  else
  {
    unint64_t v7 = *(void *)(v4 + 32);
    if ((v7 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v7 < *(void *)(*(void *)(v4 + 16) + 16))
    {
      _DynamicPropertyBuffer.getState<A>(type:)(a2, a3);
      return;
    }
    __break(1u);
  }
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  int v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (double result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _DynamicPropertyBuffer()
{
  return &type metadata for _DynamicPropertyBuffer;
}

uint64_t specialized _DynamicPropertyBuffer.applyChanged(to:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  int v5 = *(_DWORD *)(result + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)result;
    if (*(void *)result)
    {
      char v8 = a4;
      int v11 = 0;
      unint64_t v12 = a4 & 0xFFFFFFFF00000000;
      int v13 = v5 - 1;
      while (1)
      {
        uint64_t v15 = v6 + v11;
        if (v13)
        {
          v11 += *(_DWORD *)(v15 + 8);
          int v16 = *(_DWORD *)(v15 + 12);
          if (v16 < 0) {
            goto LABEL_9;
          }
        }
        else
        {
          int v11 = 0;
          int v16 = *(_DWORD *)(v15 + 12);
          if (v16 < 0) {
LABEL_9:
          }
            double result = closure #2 in changedBodyProperties<A>(of:)(v16 & 0x7FFFFFFF, a2, a3, v12 | v8 & 1, a5);
        }
        if (!(v13-- | v11)) {
          return result;
        }
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t assignWithCopy for EnumBox(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  return a1;
}

void *type metadata accessor for EnumBox()
{
  return &unk_26FA7EF58;
}

AXChartDescriptor __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AccessibilityChartDescriptorStorage.resolve()()
{
  result.super.Class isa = (Class)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AccessibilityChartDescriptorStorage.isEqual(to:)()
{
  return 0;
}

uint64_t static AccessibilityChartDescriptorStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a2) & 1;
}

uint64_t AccessibilityChartDescriptorStorage.deinit()
{
  return v0;
}

uint64_t AccessibilityChartDescriptorStorage.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityChartDescriptorStorage(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 88))(*a2) & 1;
}

uint64_t RepresentableChartDescriptorStorage.__allocating_init(_:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 56) = 0;
  *(unsigned char *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 68) = 0;
  outlined init with take of ScrollStateRequest(a1, v2 + 16);
  return v2;
}

uint64_t RepresentableChartDescriptorStorage.init(_:)(long long *a1)
{
  *(void *)(v1 + 56) = 0;
  *(unsigned char *)(v1 + 64) = 0;
  *(_DWORD *)(v1 + 68) = 0;
  outlined init with take of ScrollStateRequest(a1, v1 + 16);
  return v1;
}

Swift::Void __swiftcall RepresentableChartDescriptorStorage.reset()()
{
  *(_DWORD *)(v0 + 68) = 0;
  *(unsigned char *)(v0 + 64) = 0;
  uint64_t v1 = *(void **)(v0 + 56);
  *(void *)(v0 + 56) = 0;
}

uint64_t RepresentableChartDescriptorStorage.markNeedsUpdate(_:)(uint64_t *a1)
{
  swift_beginAccess();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v1 + 16), a1);
  uint64_t result = swift_endAccess();
  int v4 = *(_DWORD *)(v1 + 68);
  BOOL v5 = __CFADD__(v4, 1);
  int v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v1 + 68) = v6;
    *(unsigned char *)(v1 + 64) = 1;
  }
  return result;
}

AXChartDescriptor __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RepresentableChartDescriptorStorage.resolve()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 56);
  if (v2)
  {
    if (*(unsigned char *)(v0 + 64) == 1)
    {
      swift_beginAccess();
      outlined init with copy of AnyTrackedValue(v0 + 16, (uint64_t)v12);
      uint64_t v3 = v14;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      int v4 = *(void (**)(void))(v3 + 16);
      id v5 = v2;
      v4();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      *(unsigned char *)(v0 + 64) = 0;
      return (AXChartDescriptor)v5;
    }
    else
    {
      return (AXChartDescriptor)v2;
    }
  }
  else
  {
    swift_beginAccess();
    outlined init with copy of AnyTrackedValue(v0 + 16, (uint64_t)v12);
    uint64_t v7 = v13;
    uint64_t v8 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    unint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    unint64_t v10 = *(void **)(v1 + 56);
    *(void *)(v1 + 56) = v9;
    id v11 = v9;

    *(unsigned char *)(v1 + 64) = 0;
    return (AXChartDescriptor)v11;
  }
}

uint64_t RepresentableChartDescriptorStorage.isEqual(to:)()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v1 = swift_dynamicCastClass();
  uint64_t v2 = v1;
  if (v1)
  {
    if (*(_DWORD *)(v0 + 68) == *(_DWORD *)(v1 + 68))
    {
      swift_beginAccess();
      outlined init with copy of AnyTrackedValue(v0 + 16, (uint64_t)v5);
      swift_beginAccess();
      outlined init with copy of AnyTrackedValue(v2 + 16, (uint64_t)v4);
      type metadata accessor for AXChartDescriptorRepresentable();
      uint64_t v2 = AGCompareValues();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

unint64_t type metadata accessor for AXChartDescriptorRepresentable()
{
  unint64_t result = lazy cache variable for type metadata for AXChartDescriptorRepresentable;
  if (!lazy cache variable for type metadata for AXChartDescriptorRepresentable)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AXChartDescriptorRepresentable);
  }
  return result;
}

void RepresentableChartDescriptorStorage.__ivar_destroyer()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 56);
}

uint64_t RepresentableChartDescriptorStorage.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return v0;
}

uint64_t RepresentableChartDescriptorStorage.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t CodableAXChartDescriptor.storage.getter()
{
  return swift_retain();
}

uint64_t CodableAXChartDescriptor.storage.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*CodableAXChartDescriptor.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableAXChartDescriptor.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CodableAXChartDescriptor.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CodableAXChartDescriptor.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CodableAXChartDescriptor.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CodableAXChartDescriptor.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance CodableAXChartDescriptor.CodingKeys, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CodableAXChartDescriptor.CodingKeys(char *a1@<X8>)
{
  a1[15] = -18;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAXChartDescriptor.CodingKeys()
{
  return 0x616E6F6974636964;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAXChartDescriptor.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance CodableAXChartDescriptor.CodingKeys, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAXChartDescriptor.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAXChartDescriptor.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t CodableAXChartDescriptor.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for KeyedDecodingContainer<CodableAXChartDescriptor.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAXChartDescriptor.CodingKeys>, MEMORY[0x263F8E040]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v9 = (char *)v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v10 = v14[0];
    uint64_t v11 = v14[1];
    type metadata accessor for AccessibilitySpecificChartDescriptorStorage();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v10;
    *(void *)(v12 + 24) = v11;
    *a2 = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for AccessibilitySpecificChartDescriptorStorage()
{
  return self;
}

uint64_t CodableAXChartDescriptor.encode(to:)(void *a1)
{
  uint64_t v25[2] = *(id *)MEMORY[0x263EF8340];
  type metadata accessor for KeyedDecodingContainer<CodableAXChartDescriptor.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAXChartDescriptor.CodingKeys>, MEMORY[0x263F8E0C0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v25[-1] - v7;
  uint64_t v9 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys();
  uint64_t v10 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 80))(v10);
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v13 = v11;
  uint64_t v24 = v5;
  id v14 = objc_msgSend(v11, sel_dictionaryRepresentation);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v15 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v25[0] = 0;
  id v17 = objc_msgSend(v15, sel_archivedDataWithRootObject_requiringSecureCoding_error_, isa, 1, v25);

  id v18 = v25[0];
  if (v17)
  {
    int v19 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    v25[0] = v19;
    v25[1] = v21;
    lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t v22 = v24;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v22);

    return outlined consume of Data._Representation((uint64_t)v19, (unint64_t)v21);
  }
  else
  {
    uint64_t v23 = v18;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v24);
  }
}

void type metadata accessor for KeyedDecodingContainer<CodableAXChartDescriptor.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys();
    unint64_t v7 = a3(a1, &unk_26FA6AAC0, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAXChartDescriptor@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return CodableAXChartDescriptor.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAXChartDescriptor(void *a1)
{
  return CodableAXChartDescriptor.encode(to:)(a1);
}

uint64_t dispatch thunk of AXChartDescriptorRepresentable.makeChartDescriptor()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AXChartDescriptorRepresentable.updateChartDescriptor(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t type metadata accessor for AccessibilityChartDescriptorStorage()
{
  return self;
}

uint64_t method lookup function for AccessibilityChartDescriptorStorage(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AccessibilityChartDescriptorStorage);
}

uint64_t dispatch thunk of AccessibilityChartDescriptorStorage.resolve()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of AccessibilityChartDescriptorStorage.isEqual(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t type metadata accessor for RepresentableChartDescriptorStorage()
{
  return self;
}

uint64_t method lookup function for RepresentableChartDescriptorStorage(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for RepresentableChartDescriptorStorage);
}

uint64_t dispatch thunk of RepresentableChartDescriptorStorage.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

ValueMetadata *type metadata accessor for CodableAXChartDescriptor()
{
  return &type metadata for CodableAXChartDescriptor;
}

AXChartDescriptor __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AccessibilitySpecificChartDescriptorStorage.resolve()()
{
  uint64_t v1 = *(void **)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  if ((v2 & 0x2000000000000000) != 0) {
    return (AXChartDescriptor)v1;
  }
  outlined copy of Data._Representation(*(void *)(v0 + 16), *(void *)(v0 + 24));
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v4 = (id)_AXSwiftUIUnarchiveChartDescriptor((uint64_t)isa);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  outlined init with take of Any?((uint64_t)v12, (uint64_t)v13);
  if (!v14)
  {
    outlined destroy of Any?((uint64_t)v13);
    goto LABEL_11;
  }
  type metadata accessor for [AnyHashable : Any]();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    lazy protocol witness table accessor for type AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError and conformance AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError();
    swift_allocError();
    swift_willThrow();
    outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage((uint64_t)v1, v2);
    return result;
  }
  id v6 = objc_allocWithZone(MEMORY[0x263EFABC8]);
  Class v7 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithDictionary_, v7);

  outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage((uint64_t)v1, v2);
  uint64_t v9 = *(void *)(v0 + 16);
  unint64_t v10 = *(void *)(v0 + 24);
  *(void *)(v0 + 16) = v8;
  *(void *)(v0 + 24) = 0x2000000000000000;
  id v11 = v8;
  outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(v9, v10);
  return (AXChartDescriptor)v11;
}

uint64_t AccessibilitySpecificChartDescriptorStorage.isEqual(to:)()
{
  uint64_t v1 = swift_dynamicCastClass();
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 16);
    unint64_t v3 = *(void *)(v0 + 24);
    uint64_t v5 = *(void *)(v1 + 16);
    unint64_t v4 = *(void *)(v1 + 24);
    if (((v3 | v4) & 0x2000000000000000) == 0)
    {
      outlined copy of AccessibilitySpecificChartDescriptorStorage.Storage(*(void *)(v1 + 16), v4);
      outlined copy of AccessibilitySpecificChartDescriptorStorage.Storage(v2, v3);
      outlined copy of AccessibilitySpecificChartDescriptorStorage.Storage(v2, v3);
      outlined copy of AccessibilitySpecificChartDescriptorStorage.Storage(v5, v4);
      swift_retain();
      char v6 = specialized static Data.== infix(_:_:)(v2, v3, v5, v4);
      outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(v5, v4);
      outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(v2, v3);
      outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(v2, v3);
      outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(v5, v4);
      swift_release();
      return v6 & 1;
    }
    outlined copy of AccessibilitySpecificChartDescriptorStorage.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24));
    outlined copy of AccessibilitySpecificChartDescriptorStorage.Storage(v5, v4);
    swift_retain();
    outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(v2, v3);
    outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(v5, v4);
    v8.super.Class isa = AccessibilitySpecificChartDescriptorStorage.resolve()().super.isa;
    if (v9.super.isa)
    {
    }
    else
    {
      Class isa = v8.super.isa;
      v11.super.Class isa = AccessibilitySpecificChartDescriptorStorage.resolve()().super.isa;
      if (!v12.super.isa)
      {
        Class v13 = v11.super.isa;
        id v14 = [(objc_class *)isa dictionaryRepresentation];
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        id v15 = [(objc_class *)v13 dictionaryRepresentation];
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        type metadata accessor for NSObject();
        Class v16 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        Class v17 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        char v6 = static NSObject.== infix(_:_:)();
        swift_release();

        return v6 & 1;
      }
    }
    swift_release();
  }
  return 0;
}

void AccessibilitySpecificChartDescriptorStorage.__ivar_destroyer()
{
  outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t AccessibilitySpecificChartDescriptorStorage.__deallocating_deinit()
{
  outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return swift_deallocClassInstance();
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of AccessibilitySpecificChartDescriptorStorage.Storage(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

id outlined copy of AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    return (id)a1;
  }
  else {
    return (id)outlined copy of Data._Representation(a1, a2);
  }
}

void destroy for AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t a1)
{
}

void outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {

  }
  else {
    outlined consume of Data._Representation(a1, a2);
  }
}

uint64_t *assignWithCopy for AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of AccessibilitySpecificChartDescriptorStorage.Storage(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(v5, v6);
  return a1;
}

uint64_t *assignWithTake for AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 3 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 3);
  }
  unsigned int v3 = ((2 * ((*(void *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(void *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(void *)AXChartDescriptor result = a2 - 3;
    *(void *)(result + 8) = 0;
    if (a3 >= 3) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 3) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)AXChartDescriptor result = 0;
      *(void *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t getEnumTag for AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t a1)
{
  return (*(void *)(a1 + 8) >> 61) & 1;
}

uint64_t destructiveProjectEnumData for AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t result)
{
  *(void *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t destructiveInjectEnumTag for AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t result, char a2)
{
  *(void *)(result + 8) = *(void *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

void *type metadata accessor for AccessibilitySpecificChartDescriptorStorage.Storage()
{
  return &unk_26FA754F0;
}

void *type metadata accessor for CodableAXChartDescriptor.CodingKeys()
{
  return &unk_26FA6AAC0;
}

uint64_t closure #1 in static Data.== infix(_:_:)@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  Class v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      outlined copy of Data._Representation(a2, a3);
      unint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x245CD9E8CLL);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = outlined consume of Data._Representation(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      Class v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  __s1[2] = *MEMORY[0x263EF8340];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      outlined copy of Data._Representation(a1, a2);
      char v5 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
      outlined consume of Data._Representation(a1, a2);
      goto LABEL_6;
    case 2uLL:
      uint64_t v10 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      char v5 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v11, v12, v10, a3, a4);
      swift_release();
      swift_release();
LABEL_6:
      outlined consume of Data._Representation(a3, a4);
      return v5 & 1;
    case 3uLL:
      memset(__s1, 0, 14);
      goto LABEL_8;
    default:
      __s1[0] = a1;
      LOWORD(__s1[1]) = a2;
      BYTE2(__s1[1]) = BYTE2(a2);
      BYTE3(__s1[1]) = BYTE3(a2);
      BYTE4(__s1[1]) = BYTE4(a2);
      BYTE5(__s1[1]) = BYTE5(a2);
LABEL_8:
      closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, a3, a4, &v14);
      outlined consume of Data._Representation(a3, a4);
      if (!v4) {
        char v5 = v14;
      }
      return v5 & 1;
  }
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  closure #1 in static Data.== infix(_:_:)(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t specialized static Data.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        JUMPOUT(0x245CDA2C0);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_20;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v15 = 1;
            }
            else
            {
              outlined copy of Data._Representation(a3, a4);
              char v15 = specialized Data._Representation.withUnsafeBytes<A>(_:)(a1, a2, a3, a4);
            }
          }
          else
          {
            char v15 = 0;
          }
          return v15 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_21;
        case 3uLL:
          char v15 = v8 == 0;
          return v15 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_19;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError and conformance AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError and conformance AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError;
  if (!lazy protocol witness table cache variable for type AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError and conformance AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError and conformance AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError and conformance AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError;
  if (!lazy protocol witness table cache variable for type AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError and conformance AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError and conformance AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CodableAXChartDescriptor.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x245CDA43CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError()
{
  return &type metadata for AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError;
}

uint64_t Text.LineStyle.nsUnderlineStyleValue.getter()
{
  return *(void *)v0;
}

uint64_t (*Text.LineStyle.nsUnderlineStyleValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.LineStyle.color.getter()
{
  return swift_retain();
}

uint64_t Text.LineStyle.color.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*Text.LineStyle.color.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.LineStyle.nsUnderlineStyle.getter()
{
  return *(void *)v0;
}

uint64_t Text.LineStyle.nsUnderlineStyle.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Text.LineStyle.nsUnderlineStyle.modify(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

void *Text.LineStyle.init(pattern:color:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = *result | 1;
  a3[1] = a2;
  return result;
}

void static Text.LineStyle.Pattern.dot.getter(void *a1@<X8>)
{
  *a1 = 256;
}

void static Text.LineStyle.Pattern.dash.getter(void *a1@<X8>)
{
  *a1 = 512;
}

void static Text.LineStyle.Pattern.dashDot.getter(void *a1@<X8>)
{
  *a1 = 768;
}

void static Text.LineStyle.Pattern.dashDotDot.getter(void *a1@<X8>)
{
  *a1 = 1024;
}

double static Text.LineStyle.single.getter@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 1;
  *a1 = xmmword_24619B520;
  return result;
}

uint64_t Text.LineStyle.init(_nsUnderlineStyle:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  BOOL v3 = (~(_BYTE)result & 9) == 0 || result == 0 || (result & 0x8002) != 0;
  if (v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = result;
  }
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t Text.LineStyle.Resolved.nsUnderlineStyle.getter()
{
  return *(void *)v0;
}

uint64_t Text.LineStyle.Resolved.nsUnderlineStyle.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Text.LineStyle.Resolved.nsUnderlineStyle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.LineStyle.Resolved.color.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t Text.LineStyle.Resolved.color.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 8) = result;
  *(void *)(v3 + 16) = a2;
  *(unsigned char *)(v3 + 24) = a3 & 1;
  return result;
}

uint64_t (*Text.LineStyle.Resolved.color.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Text.LineStyle.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::UInt v4 = v2[1];
  Hasher._combine(_:)(*v2);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    uint64_t v5 = *(void (**)(uint64_t))(*(void *)v4 + 136);
    swift_retain();
    v5(a1);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int Text.LineStyle.hashValue.getter()
{
  Swift::UInt v2 = *v0;
  Swift::UInt v1 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    uint64_t v3 = *(void (**)(unsigned char *))(*(void *)v1 + 136);
    swift_retain();
    v3(v5);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.LineStyle()
{
  Swift::UInt v2 = *v0;
  Swift::UInt v1 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    uint64_t v3 = *(void (**)(unsigned char *))(*(void *)v1 + 136);
    swift_retain();
    v3(v5);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Text.LineStyle(uint64_t a1)
{
  Swift::UInt v2 = v1;
  Swift::UInt v4 = v2[1];
  Hasher._combine(_:)(*v2);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    uint64_t v5 = *(void (**)(uint64_t))(*(void *)v4 + 136);
    swift_retain();
    v5(a1);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.LineStyle()
{
  Hasher.init(_seed:)();
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    Swift::UInt v2 = *(void (**)(unsigned char *))(*(void *)v1 + 136);
    swift_retain();
    v2(v4);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t EnvironmentValues.underlineStyle.getter()
{
  return EnvironmentValues.underlineStyle.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t View.strikethrough(_:pattern:color:)(char a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.underline(_:pattern:color:)(a1, a2, a3, a4, a5);
}

uint64_t EnvironmentValues.strikethroughStyle.getter()
{
  return EnvironmentValues.underlineStyle.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.underlineStyle.getter(void (*a1)(uint64_t), void (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    a1(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    a2(v6, &v8);
  }
  return swift_release_n();
}

uint64_t specialized static Text.LineStyle.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2)
  {
    uint64_t v2 = a1[1];
    uint64_t v3 = a2[1];
    if (v2)
    {
      if (v3)
      {
        if (v2 == v3) {
          return 1;
        }
        Swift::UInt v4 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 88);
        swift_retain();
        swift_retain();
        LOBYTE(v4) = v4(v3);
        swift_release();
        swift_release();
        if (v4) {
          return 1;
        }
      }
    }
    else if (!v3)
    {
      return 1;
    }
  }
  return 0;
}

double sub_245CDAB70@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  return key path getter for EnvironmentValues.underlineStyle : EnvironmentValues(a1, (void (*)(long long *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(long long *__return_ptr, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245CDABB0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.underlineStyle : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))specialized EnvironmentValues.subscript.setter);
}

double sub_245CDABDC@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  return key path getter for EnvironmentValues.underlineStyle : EnvironmentValues(a1, (void (*)(long long *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(long long *__return_ptr, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245CDAC1C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.underlineStyle : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))specialized EnvironmentValues.subscript.setter);
}

unint64_t lazy protocol witness table accessor for type Text.LineStyle and conformance Text.LineStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.LineStyle and conformance Text.LineStyle;
  if (!lazy protocol witness table cache variable for type Text.LineStyle and conformance Text.LineStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.LineStyle and conformance Text.LineStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.LineStyle and conformance Text.LineStyle;
  if (!lazy protocol witness table cache variable for type Text.LineStyle and conformance Text.LineStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.LineStyle and conformance Text.LineStyle);
  }
  return result;
}

void *sub_245CDACA0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void *sub_245CDACAC(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *assignWithCopy for Text.LineStyle(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for Text.LineStyle(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Text.LineStyle.Pattern()
{
  return &type metadata for Text.LineStyle.Pattern;
}

ValueMetadata *type metadata accessor for Text.LineStyle.Resolved()
{
  return &type metadata for Text.LineStyle.Resolved;
}

uint64_t sub_245CDAD50()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Text.LineStyle?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.LineStyle?>)
  {
    type metadata accessor for Text.LineStyle?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.LineStyle?>);
    }
  }
}

void type metadata accessor for Text.LineStyle?()
{
  if (!lazy cache variable for type metadata for Text.LineStyle?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Text.LineStyle?);
    }
  }
}

ValueMetadata *type metadata accessor for UnderlineStyleKey()
{
  return &type metadata for UnderlineStyleKey;
}

ValueMetadata *type metadata accessor for StrikethroughStyleKey()
{
  return &type metadata for StrikethroughStyleKey;
}

ValueMetadata *type metadata accessor for ShakeHorizontalTextEffect()
{
  return &type metadata for ShakeHorizontalTextEffect;
}

unint64_t lazy protocol witness table accessor for type ShakeHorizontalTextEffect.LayoutState and conformance ShakeHorizontalTextEffect.LayoutState()
{
  unint64_t result = lazy protocol witness table cache variable for type ShakeHorizontalTextEffect.LayoutState and conformance ShakeHorizontalTextEffect.LayoutState;
  if (!lazy protocol witness table cache variable for type ShakeHorizontalTextEffect.LayoutState and conformance ShakeHorizontalTextEffect.LayoutState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeHorizontalTextEffect.LayoutState and conformance ShakeHorizontalTextEffect.LayoutState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShakeHorizontalTextEffect.LayoutState and conformance ShakeHorizontalTextEffect.LayoutState;
  if (!lazy protocol witness table cache variable for type ShakeHorizontalTextEffect.LayoutState and conformance ShakeHorizontalTextEffect.LayoutState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeHorizontalTextEffect.LayoutState and conformance ShakeHorizontalTextEffect.LayoutState);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for Text.Effect.Base.Timing : Text.Effect.DurationProvider in ShakeHorizontalTextEffect()
{
  return &protocol witness table for Text.Effect.Timing;
}

id closure #1 in ShakeHorizontalTextEffect.configuration(_:)(void *a1, uint64_t a2)
{
  type metadata accessor for Text.Effect.ConcreteLayoutState<ShakeHorizontalTextEffect>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<WeightDeltaModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type WeightDeltaModifier and conformance WeightDeltaModifier, (uint64_t)&type metadata for WeightDeltaModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyDynamicFontModifier);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2461D73C0;
  *(void *)(v4 + 32) = 0x408F400000000000;
  id v5 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_retain();
  MEMORY[0x24C522D60](v6);
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();
  return v5;
}

uint64_t closure #2 in ShakeHorizontalTextEffect.configuration(_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v59 = *(void *)(a1 + 24);
  uint64_t v60 = *(void *)(a1 + 16);
  uint64_t v57 = *(void *)(a1 + 40);
  uint64_t v58 = *(void *)(a1 + 32);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)a2);
  double v5 = 0.0;
  specialized Text.Effect.PathInterpolator.init<A>(_:quantization:default:options:body:)((uint64_t)a2, a3, 1, (uint64_t)a2, v64, 0.0);
  Swift::UInt64 v6 = a2[1];
  uint64_t v62 = *a2;
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v9 = a2[5];
  v69[0] = v7;
  CFIndex v11 = *(void *)(v7 + 16);
  uint64_t v10 = *(void *)(v7 + 24);
  swift_retain_n();
  if (v11 != v10)
  {
    double v12 = 0.0;
    do
    {
      uint64_t v14 = *(void **)(v7 + 32);
      uint64_t v13 = *(void *)(v7 + 40);
      if (*(unsigned char *)(v7 + 48))
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v7 + 32), *(void *)(v7 + 40), 1);
        id v15 = (id)_NSTextLineFragmentGetCTLine(v14);
        if (!v15) {
          goto LABEL_62;
        }
        id v16 = v15;
        outlined consume of Text.Layout.Line.Line(v14, v13, 1);
        uint64_t v14 = v16;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v7 + 32), *(void *)(v7 + 40), 0);
        outlined copy of Text.Layout.Line.Line(v14, v13, 0);

        swift_release();
      }
      if (v11 < *(void *)(v7 + 16) || v11 >= *(void *)(v7 + 24)) {
        goto LABEL_57;
      }
      CFIndex v17 = v11 + 1;
      swift_retain();
      uint64_t v18 = v14;
      BOOL v19 = (id)_CTLineGetRunAtIndex(v18, v11);
      int64_t v20 = (const __CTFont *)(id)CTRunGetFont();
      swift_release();

      double Size = CTFontGetSize(v20);
      swift_release();

      if (v12 <= Size) {
        double v12 = Size;
      }
      CFIndex v11 = v17;
    }
    while (v17 != *(void *)(v7 + 24));
    double v5 = v12 * 0.25;
  }
  outlined release of ViewTransform((uint64_t)v69);
  outlined release of ViewTransform((uint64_t)v69);
  if (v9 < 0) {
    goto LABEL_58;
  }
  if (v9)
  {
    unint64_t v22 = 0;
    uint64_t v61 = (uint64_t *)(v62 + 48);
    double v23 = INFINITY;
    double v24 = -INFINITY;
    do
    {
      if (v22 == v9) {
        goto LABEL_52;
      }
      swift_beginAccess();
      uint64_t v25 = *v61;
      if (!*(void *)(*v61 + 16)) {
        goto LABEL_64;
      }
      uint64_t v26 = v9;
      swift_retain_n();
      swift_retain();
      unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v8);
      if ((v28 & 1) == 0)
      {
        swift_release();
        goto LABEL_66;
      }
      uint64_t v29 = *(void *)(*(void *)(v25 + 56) + 16 * v27);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_release();
      unint64_t v30 = *(void *)(v29 + 16);
      if (v22 >= v30) {
        goto LABEL_53;
      }
      uint64_t v31 = *(void *)(v29 + 32 + 8 * v22);
      if (v22)
      {
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        while (1)
        {
          uint64_t v34 = *(void *)(*(void *)(*(void *)(v29 + 32 + 8 * v32) + 96) + 16);
          BOOL v35 = __OFADD__(v33, v34);
          v33 += v34;
          if (v35) {
            break;
          }
          if (v22 == ++v32) {
            goto LABEL_27;
          }
        }
        __break(1u);
        goto LABEL_50;
      }
      uint64_t v33 = 0;
LABEL_27:
      swift_retain();
      swift_bridgeObjectRelease();
      v69[1] = v62;
      v69[2] = v6;
      Swift::UInt64 v36 = v6;
      v69[3] = v8;
      v69[4] = v31;
      v69[5] = v22;
      v69[6] = v30;
      v69[7] = v33;
      uint64_t v37 = *(void *)(*(void *)(v31 + 96) + 16);
      uint64_t v38 = v33 + v37;
      if (__OFADD__(v33, v37)) {
        goto LABEL_54;
      }
      if (v38 < v33) {
        goto LABEL_55;
      }
      if (__OFSUB__(v38, v33)) {
        goto LABEL_56;
      }
      if (v38 != v33)
      {
        while (v33 < v38)
        {
          Text.Effect.BaseFragment.typographicBounds(for:)(v33, v33 + 1, (uint64_t)v66);
          *(void *)&v73.origin.double x = v66[0];
          *(void *)&v73.size.width = v66[2];
          v73.origin.double y = *(double *)&v66[1] - v67;
          v73.size.height = v67 + v68;
          double MidX = CGRectGetMidX(v73);
          if (__OFSUB__(v38, v33 + 1)) {
            goto LABEL_51;
          }
          if (v24 <= MidX) {
            double v24 = MidX;
          }
          if (MidX < v23) {
            double v23 = MidX;
          }
          ++v33;
          if (!--v37) {
            goto LABEL_16;
          }
        }
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
LABEL_16:
      swift_release();
      ++v22;
      swift_release();
      swift_release();
      uint64_t v9 = v26;
      Swift::UInt64 v6 = v36;
    }
    while (v26 != v22);
    if (v23 > v24) {
      goto LABEL_63;
    }
    uint64_t v70 = v60;
    uint64_t v71 = v59;
    uint64_t v72 = v58;
    v63[0] = v57;
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = *(_OWORD *)a1;
    *(void *)(v40 + 32) = v60;
    *(void *)(v40 + 40) = v59;
    *(void *)(v40 + 48) = v58;
    *(void *)(v40 + 56) = v57;
    *(double *)(v40 + 64) = v5;
    *(double *)(v40 + 72) = v24 - v23;
    *(double *)(v40 + 80) = v23;
    *(double *)(v40 + 88) = v24;
    uint64_t v41 = swift_allocObject();
    __n128 v42 = v64[3];
    *(__n128 *)(v41 + 48) = v64[2];
    *(__n128 *)(v41 + 64) = v42;
    *(__n128 *)(v41 + 80) = v64[4];
    uint64_t v43 = v65;
    __n128 v44 = v64[1];
    *(__n128 *)(v41 + 16) = v64[0];
    *(__n128 *)(v41 + 32) = v44;
    *(void *)(v41 + 96) = v43;
    *(void *)(v41 + 104) = partial apply for closure #2 in closure #2 in ShakeHorizontalTextEffect.configuration(_:);
    *(void *)(v41 + 112) = v40;
    type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_2461B9DC0;
    *(void *)(v45 + 32) = partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:);
    unint64_t v46 = v45 + 32;
    *(void *)(v45 + 40) = v41;
    type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>);
    initeCGFloat d = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
    *(void *)(inited + 32) = v45;
    int64_t v48 = *(void *)(v45 + 16);
    outlined retain of LinearGradient((uint64_t)&v70);
    outlined retain of LinearGradient((uint64_t)&v71);
    outlined retain of LinearGradient((uint64_t)&v72);
    outlined retain of LinearGradient((uint64_t)v63);
    outlined retain of Text.Effect.PathInterpolator((uint64_t)v64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48, 1, MEMORY[0x263F8EE78]);
    uint64_t v50 = v49;
    if (!*(void *)(v45 + 16))
    {
      if (v48) {
        goto LABEL_59;
      }
      goto LABEL_48;
    }
    uint64_t v51 = v49[2];
    if ((v49[3] >> 1) - v51 < v48) {
      goto LABEL_60;
    }
    unint64_t v52 = (unint64_t)&v49[2 * v51 + 4];
    if (v46 >= v52 + 16 * v48 || v52 >= v46 + 16 * v48)
    {
      swift_arrayInitWithCopy();
      if (v48)
      {
        uint64_t v53 = v50[2];
        BOOL v35 = __OFADD__(v53, v48);
        uint64_t v54 = v53 + v48;
        if (v35) {
          goto LABEL_61;
        }
        v50[2] = v54;
      }
LABEL_48:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      swift_arrayDestroy();
      outlined release of Text.Effect.PathInterpolator((uint64_t)v64);
      return (uint64_t)v50;
    }
  }
  else
  {
LABEL_63:
    __break(1u);
LABEL_64:
    swift_retain();
    swift_retain();
LABEL_66:
    swift_endAccess();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #2 in ShakeHorizontalTextEffect.configuration(_:)(void *a1, uint64_t a2)
{
  Swift::UInt64 v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 32);
  type metadata accessor for Text.Effect.ConcreteLayoutState<ShakeHorizontalTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcreteLayoutState<ShakeHorizontalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect, (uint64_t)&type metadata for ShakeHorizontalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.ConcreteLayoutState);
  uint64_t v5 = swift_allocObject();
  *(unsigned char *)(v5 + 16) = 0;
  uint64_t v6 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v6, v3, v5, v4, v13);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v13);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14[0] = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, isUniquelyReferenced_nonNull_native, 0.0);
  *a1 = v14[0];
  swift_bridgeObjectRelease();
  outlined release of Text.Effect.BaseFragment((uint64_t)v13);
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = 1;
  uint64_t v9 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v9, v3, v8, v4, v14);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v14);
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, v10, 1.0);
  *a1 = v12;
  swift_bridgeObjectRelease();
  return outlined release of Text.Effect.BaseFragment((uint64_t)v14);
}

void closure #2 in closure #2 in ShakeHorizontalTextEffect.configuration(_:)(unint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  double v11 = *(double *)(a2 + 64);
  double v12 = *(double *)(a2 + 40) - *(double *)(a2 + 32);
  if (v12 >= 0.0)
  {
    double v15 = v12 / v11;
    double v13 = 0.0;
    if (v15 >= 0.0)
    {
      if (v15 <= 1.0) {
        double v13 = v15;
      }
      else {
        double v13 = 1.0;
      }
    }
  }
  else
  {
    double v13 = 0.0;
    double v14 = 0.0 / v11;
    if (v14 >= 0.0)
    {
      double v13 = v14;
      if (v14 > 1.0) {
        double v13 = 1.0;
      }
    }
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (*(void *)(*(void *)(a3 + 16) + 16) <= a1)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v16 = *(void *)(a3 + 32);
  if (*(void *)(v16 + 16) <= a1)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return;
  }
  uint64_t v17 = v16 + 40 * a1;
  long long v40 = *(_OWORD *)(v17 + 48);
  uint64_t v18 = *(void *)(v17 + 64);
  double v19 = 0.0;
  if (v13 < 1.0)
  {
    double v20 = sin(v13 * -6.0 * 3.0);
    double v19 = pow(2.71828183, -v13) * v20;
  }
  if (__OFSUB__(*(void *)a2, a1)) {
    goto LABEL_34;
  }
  double v21 = *(double *)(a2 + 232);
  double v23 = *(double *)(a2 + 216);
  double v22 = *(double *)(a2 + 224);
  double v24 = *(double *)(a2 + 208);
  double v25 = 0.0;
  if (*(void *)a2 == a1)
  {
    double v26 = *(double *)(a2 + 240);
  }
  else
  {
    double v24 = 0.0;
    double v23 = 0.0;
    double v22 = 0.0;
    double v21 = 0.0;
    double v26 = 0.0;
  }
  double v27 = v23 - v21;
  double v28 = v26 + v21;
  double MidX = CGRectGetMidX(*(CGRect *)&v24);
  double v30 = 0.5;
  if (a5 > 0.0) {
    double v30 = (MidX - a6) / a5;
  }
  if (v30 < 0.0) {
    double v31 = 0.0;
  }
  else {
    double v31 = v30;
  }
  if (v31 <= 1.0) {
    double v32 = v31;
  }
  else {
    double v32 = 1.0;
  }
  if (v13 >= 1.0 || (v33 = sin(v13 * -6.0 * 3.0), double v25 = pow(2.71828183, -v13) * v33, v25 <= 0.0)) {
    double v34 = v32 * fabs(v25);
  }
  else {
    double v34 = (1.0 - v32) * v25;
  }
  *(double *)__n128 v44 = v34;
  *(double *)&v44[1] = v19 * a4;
  long long v45 = 0u;
  long long v46 = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  long long v47 = _Q0;
  uint64_t v48 = 0x3FF0000000000000;
  char v49 = 0;
  long long v41 = v40;
  uint64_t v42 = v18;
  Text.Effect.TransformContext.record(target:for:spring:)((uint64_t)v44, *(double *)&a1, (double *)&v41, (uint64_t)v43);
  Text.Effect.TransformContext.draw(state:keyPath:)((uint64_t)v43, 0, 0, 0, 1);
}

uint64_t protocol witness for static TextEffect.staticUnitProgress.getter in conformance ShakeHorizontalTextEffect()
{
  return 0x3FE8000000000000;
}

uint64_t protocol witness for static TextEffect.name.getter in conformance ShakeHorizontalTextEffect()
{
  return 0x726F48656B616873;
}

void *protocol witness for static Text.Effect.Base.states.getter in conformance ShakeHorizontalTextEffect()
{
  return &outlined read-only object #0 of protocol witness for static Text.Effect.Base.states.getter in conformance ShakeHorizontalTextEffect;
}

double protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance ShakeHorizontalTextEffect@<D0>(uint64_t a1@<X0>, double a2@<X5>, char a3@<W6>, _OWORD *a4@<X8>)
{
  type metadata accessor for Text.Effect.ConcreteLayoutState<ShakeHorizontalTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeHorizontalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect, (uint64_t)&type metadata for ShakeHorizontalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
  MEMORY[0x270FA5388](v8 - 8);
  char v10 = (char *)v15 - v9;
  char v35 = 1;
  char v34 = 1;
  char v33 = 0;
  long long v17 = xmmword_2461D73D0;
  char v18 = 1;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 2;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  char v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  char v28 = 1;
  uint64_t v29 = MEMORY[0x263F8EE78];
  char v30 = 0;
  long long v31 = xmmword_2461BD450;
  char v32 = 0;
  if (one-time initialization token for spring != -1) {
    swift_once();
  }
  long long v11 = static ShakeHorizontalTextEffect.spring;
  double v12 = *(double *)&qword_268F73540;
  outlined init with copy of Text.Effect.DrawableContent<ShakeHorizontalTextEffect>(a1, (uint64_t)v10);
  specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)((uint64_t)&v17, a2, a3 & 1, (uint64_t)v10, (double *)v15, *(double *)&v11, *((double *)&v11 + 1), v12);
  long long v13 = v15[1];
  *a4 = v15[0];
  a4[1] = v13;
  double result = *(double *)&v16;
  a4[2] = v16;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ShakeHorizontalTextEffect(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect();
  unint64_t result = lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect();
  *(void *)(a1 + 16) = result;
  return result;
}

void *specialized ShakeHorizontalTextEffect.configuration(_:)()
{
  unint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  if (v2 >= v1 >> 1) {
    unint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v1 > 1), v2 + 1, 1, v0);
  }
  v0[2] = v2 + 1;
  Swift::UInt64 v3 = &v0[4 * v2];
  v3[4] = 1;
  v3[5] = closure #1 in ShakeHorizontalTextEffect.configuration(_:);
  v3[6] = 0;
  *((unsigned char *)v3 + 56) = 1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = partial apply for closure #2 in ShakeHorizontalTextEffect.configuration(_:);
  *(void *)(v4 + 24) = 0;
  uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  void v5[2] = v7 + 1;
  uint64_t v8 = &v5[2 * v7];
  v8[4] = partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  v8[5] = v4;
  return v0;
}

uint64_t sub_245CDBF18()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245CDBF50()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #2 in closure #2 in ShakeHorizontalTextEffect.configuration(_:)(unint64_t a1, uint64_t a2)
{
  closure #2 in closure #2 in ShakeHorizontalTextEffect.configuration(_:)(a1, a2, (uint64_t)(v2 + 2), v2[8], v2[9], v2[10]);
}

uint64_t sub_245CDBFB0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 96) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type WeightDeltaModifier and conformance WeightDeltaModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type WeightDeltaModifier and conformance WeightDeltaModifier;
  if (!lazy protocol witness table cache variable for type WeightDeltaModifier and conformance WeightDeltaModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WeightDeltaModifier and conformance WeightDeltaModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WeightDeltaModifier and conformance WeightDeltaModifier;
  if (!lazy protocol witness table cache variable for type WeightDeltaModifier and conformance WeightDeltaModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WeightDeltaModifier and conformance WeightDeltaModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WeightDeltaModifier and conformance WeightDeltaModifier;
  if (!lazy protocol witness table cache variable for type WeightDeltaModifier and conformance WeightDeltaModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WeightDeltaModifier and conformance WeightDeltaModifier);
  }
  return result;
}

void type metadata accessor for Text.Effect.ConcreteLayoutState<ShakeHorizontalTextEffect>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t outlined init with copy of Text.Effect.DrawableContent<ShakeHorizontalTextEffect>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Text.Effect.ConcreteLayoutState<ShakeHorizontalTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeHorizontalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect, (uint64_t)&type metadata for ShakeHorizontalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for ShakeHorizontalTextEffect.LayoutState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245CDC23CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShakeHorizontalTextEffect.LayoutState()
{
  return &type metadata for ShakeHorizontalTextEffect.LayoutState;
}

uint64_t _GraphValue.subscript.getter@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  int v6 = *v2;
  uint64_t v7 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v8)
  {
    int v16 = v6;
    long long v17 = a1;
    MEMORY[0x270FA5388](v7);
    _OWORD v12[2] = *(void *)(*MEMORY[0x263F8EA20] + v5 + 8);
    uint64_t v13 = type metadata accessor for Focus();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v10 = type metadata accessor for Attribute();
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v16, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v12, v13, MEMORY[0x263F8E628], v10, MEMORY[0x263F8E658], v11);
    swift_release();
    uint64_t result = v15;
  }
  else
  {
    uint64_t result = AGGraphCreateOffsetAttribute2();
  }
  *a2 = result;
  return result;
}

uint64_t _GraphValue.value.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*_GraphValue.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _GraphValue.unsafeCast<A>(to:)(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL static _GraphValue.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

ValueMetadata *type metadata accessor for _Graph()
{
  return &type metadata for _Graph;
}

uint64_t Transaction.init()()
{
  return 0;
}

uint64_t static TransactionKey<>._valuesEqual(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static TransactionKey._valuesEqual(_:_:) in conformance Transaction.AnimationListenerKey()
{
  return protocol witness for static TransactionKey._valuesEqual(_:_:) in conformance Transaction.AnimationListenerKey();
}

{
  type metadata accessor for AnimationListener?();
  return AGCompareValues();
}

uint64_t static TransactionKey._valuesEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = a2;
  int v9 = 3;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)&v6, AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v4);
  return v10;
}

{
  return static TransactionKey._valuesEqual(_:_:)(a1, a2) & 1;
}

uint64_t Transaction.plist.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *unint64_t v1 = a1;
  return result;
}

uint64_t (*Transaction.plist.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Transaction.ID.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static Transaction.ID.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int Transaction.ID.hashValue.getter()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static Transaction.id.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = _threadTransactionID();
  *a1 = result;
  return result;
}

uint64_t static Transaction._core_barrier()()
{
  return _threadTransactionID();
}

void (*Transaction.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  int v9 = malloc(0x40uLL);
  *a1 = v9;
  uint64_t v9[2] = a4;
  void v9[3] = v4;
  *int v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  void v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  uint64_t v13 = malloc(v12);
  v9[7] = v13;
  Transaction.subscript.getter((uint64_t)v13, *v4);
  return Transaction.subscript.modify;
}

void Transaction.subscript.modify(uint64_t a1, char a2)
{
  unint64_t v2 = *(void **)a1;
  int v3 = *(void **)(*(void *)a1 + 48);
  uint64_t v4 = *(void **)(*(void *)a1 + 56);
  uint64_t v5 = *(void *)(*(void *)a1 + 32);
  uint64_t v6 = *(void *)(*(void *)a1 + 40);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 48), v4, v5);
    specialized Transaction.subscript.setter((uint64_t)v3);
    uint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    specialized Transaction.subscript.setter(*(void *)(*(void *)a1 + 56));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

BOOL Transaction.isEmpty.getter(uint64_t a1)
{
  return a1 == 0;
}

BOOL Transaction.mayConcatenate(with:)(unint64_t a1, unint64_t a2)
{
  BOOL v2 = (a2 | a1) == 0;
  if (a2 && a1)
  {
    uint64_t v6 = MEMORY[0x263F8EE78];
    swift_retain();
    swift_retain();
    BOOL v2 = compareLists(_:_:ignoredTypes:)(a2, a1, (uint64_t)&v6);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t Transaction.set(_:)(uint64_t result)
{
  uint64_t v2 = result;
  if (!*v1)
  {
    if (!result) {
      return result;
    }
    goto LABEL_6;
  }
  if (!result || *v1 != result)
  {
LABEL_6:
    swift_retain();
    uint64_t result = swift_release();
    *Swift::UInt32 v1 = v2;
  }
  return result;
}

Swift::UInt Transaction.current.getter(void *a1)
{
  swift_retain();
  if (_threadTransactionData())
  {
    type metadata accessor for PropertyList.Element();
    swift_unknownObjectRetain();
    uint64_t v2 = swift_dynamicCastClassUnconditional();
    uint64_t v3 = v2;
    if (a1)
    {
      if (v2)
      {
        if (a1[3])
        {
          type metadata accessor for TypedElement<EmptyKey>();
          swift_allocObject();
          return PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for EmptyKey, v3, (uint64_t)a1).value;
        }
        else
        {
          uint64_t v4 = a1[4];
          uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*a1 + 216);
          swift_retain();
          uint64_t v6 = swift_retain();
          uint64_t v7 = v5(v6, v4);
          swift_release();
          swift_release_n();
          swift_release();
          return v7;
        }
      }
    }
    else
    {
      return v2;
    }
  }
  return (Swift::UInt)a1;
}

void Transaction.forEach<A>(keyType:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for TransactionPropertyKey();
  v13[2] = a5;
  void v13[3] = a6;
  v13[4] = a2;
  v13[5] = a3;
  uint64_t WitnessTable = swift_getWitnessTable();
  PropertyList.forEach<A>(keyType:_:)(v11, (uint64_t)partial apply for closure #1 in Transaction.forEach<A>(keyType:_:), (uint64_t)v13, a4, v11, WitnessTable);
}

uint64_t specialized closure #1 in withTransaction<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _threadTransactionData();
  uint64_t v6 = one-time initialization token for v5;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  unsigned int v7 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504 == 1)
  {
    if ((dyld_program_minos_at_least() & 1) == 0) {
      goto LABEL_13;
    }
  }
  else if (dword_26B0F4500 < v7)
  {
    goto LABEL_13;
  }
  if (_threadTransactionData())
  {
    swift_unknownObjectRetain();
    swift_release();
    type metadata accessor for PropertyList.Element();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_release();
  }
  PropertyList.merge(_:)(a1);
LABEL_13:
  _setThreadTransactionData();
  closure #1 in closure #2 in ScrollStateEnqueueRequests.enqueueRequests(_:)(a2, a3);
  _setThreadTransactionData();
  swift_release();
  return outlined release of ScrollStateEnqueueRequests(a2);
}

uint64_t specialized closure #1 in withTransaction<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _threadTransactionData();
  uint64_t v6 = one-time initialization token for v5;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  unsigned int v7 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504 != 1)
  {
    if (dword_26B0F4500 < v7) {
      goto LABEL_13;
    }
LABEL_9:
    if (_threadTransactionData())
    {
      swift_unknownObjectRetain();
      swift_release();
      type metadata accessor for PropertyList.Element();
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_release();
    }
    PropertyList.merge(_:)(a1);
    goto LABEL_13;
  }
  if (dyld_program_minos_at_least()) {
    goto LABEL_9;
  }
LABEL_13:
  _setThreadTransactionData();
  uint64_t v8 = *(void *)(a4 + 16);
  if (v8)
  {
    int v9 = (void *)(a4 + 32);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v10 = v9[3];
      uint64_t v11 = v9[4];
      __swift_project_boxed_opaque_existential_1(v9, v10);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
      v9 += 5;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  _setThreadTransactionData();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t static Transaction.barrier()()
{
  return _threadTransactionID();
}

uint64_t Transaction.synchronized<A>(_:)(void (*a1)(uint64_t))
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v2 = static Update._lock;
  uint64_t v3 = _MovableLockLock(static Update._lock);
  a1(v3);
  return _MovableLockUnlock(v2);
}

uint64_t protocol witness for static TransactionKey._valuesEqual(_:_:) in conformance Transaction.ScrollTargetAnchorKey(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 16);
  uint64_t result = *(unsigned __int8 *)(a2 + 16);
  if ((v3 & 1) == 0)
  {
    double v5 = *(double *)(a1 + 8);
    unsigned int v6 = (*(double *)a1 == *(double *)a2) & ~result;
    if (v5 == *(double *)(a2 + 8)) {
      return v6;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for static TransactionKey._valuesEqual(_:_:) in conformance Transaction.ScrollContentAdjustmentBehaviorKey()
{
  return AGCompareValues();
}

uint64_t protocol witness for static TransactionKey._valuesEqual(_:_:) in conformance AnimationReasonKey(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 4);
  uint64_t result = *(unsigned __int8 *)(a2 + 4);
  if ((v3 & 1) == 0) {
    return (*(_DWORD *)a1 == *(_DWORD *)a2) & ~result;
  }
  return result;
}

uint64_t partial apply for closure #1 in Transaction.forEach<A>(keyType:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

unint64_t lazy protocol witness table accessor for type Transaction.ID and conformance Transaction.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type Transaction.ID and conformance Transaction.ID;
  if (!lazy protocol witness table cache variable for type Transaction.ID and conformance Transaction.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Transaction.ID and conformance Transaction.ID);
  }
  return result;
}

uint64_t dispatch thunk of static TransactionKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static TransactionKey._valuesEqual(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

ValueMetadata *type metadata accessor for Transaction.ID()
{
  return &type metadata for Transaction.ID;
}

void type metadata accessor for AnimationListener?()
{
  if (!lazy cache variable for type metadata for AnimationListener?)
  {
    type metadata accessor for AnimationListener();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimationListener?);
    }
  }
}

uint64_t outlined release of ScrollStateEnqueueRequests(uint64_t a1)
{
  return a1;
}

Swift::Void __swiftcall Stack.popAll()()
{
  swift_release();
  *unint64_t v0 = 0;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Stack<A>()
{
  return MEMORY[0x270F9D960]();
}

uint64_t Stack<A>.tryToReuse(by:indirectMap:testOnly:)(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a4;
  uint64_t v43 = a2;
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void *)(a4 + 16);
  uint64_t v11 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v11 - 8);
  long long v47 = &v37[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v13);
  unsigned int v15 = &v37[-v14];
  uint64_t v48 = v10;
  MEMORY[0x270FA5388](v16);
  uint64_t v42 = &v37[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v18);
  long long v46 = &v37[-v19];
  uint64_t v20 = *v5;
  uint64_t v50 = *a1;
  uint64_t v51 = v20;
  uint64_t v22 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v44 = a5;
  long long v45 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v21 + 32);
  unint64_t v39 = (void (**)(unsigned char *, uint64_t))(v21 + 8);
  uint64_t v40 = a5 + 24;
  swift_retain();
  swift_retain();
  unsigned int v38 = a3 & 1;
  long long v41 = v15;
  uint64_t v24 = v45;
  uint64_t v23 = v46;
  while (1)
  {
    uint64_t v25 = v51;
    uint64_t v49 = v51;
    BOOL v26 = Stack.isEmpty.getter(v7);
    uint64_t v27 = v50;
    if (v26) {
      break;
    }
    uint64_t v49 = v50;
    if (Stack.isEmpty.getter(v7)) {
      break;
    }
    Stack.pop()(v7, (uint64_t)v15);
    char v28 = *v22;
    uint64_t v29 = v48;
    if ((*v22)(v15, 1, v48) == 1)
    {
      __break(1u);
LABEL_14:
      __break(1u);
    }
    char v30 = *v24;
    (*v24)(v23, v15, v29);
    long long v31 = v47;
    uint64_t v32 = v7;
    Stack.pop()(v7, (uint64_t)v47);
    if (v28(v31, 1, v29) == 1) {
      goto LABEL_14;
    }
    char v33 = v42;
    v30(v42, v31, v29);
    char v34 = (*(uint64_t (**)(unsigned char *, uint64_t, void, uint64_t))(v44 + 24))(v33, v43, v38, v29);
    char v35 = *v39;
    (*v39)(v33, v29);
    v35(v23, v29);
    unsigned int v15 = v41;
    uint64_t v7 = v32;
    if ((v34 & 1) == 0) {
      goto LABEL_12;
    }
  }
  if (!(v25 | v27)) {
    return 1;
  }
  swift_beginAccess();
  if (static ReuseTrace.recorder) {
    AGGraphAddTraceEvent();
  }
LABEL_12:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for GraphReusable.tryToReuse(by:indirectMap:testOnly:) in conformance <A> Stack<A>(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return Stack<A>.tryToReuse(by:indirectMap:testOnly:)(a1, a2, a3, a4, *(void *)(a5 - 8));
}

uint64_t Stack3.pop()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v60 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v57 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v59 = (char *)&v53 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v53 - v10;
  uint64_t v12 = *(void **)(v3 - 8);
  MEMORY[0x270FA5388](v13);
  unsigned int v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v53 - v17;
  double v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v53 - v21;
  uint64_t v23 = v5;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v62 = v2;
  uint64_t v58 = v24;
  ((void (*)(char *, uint64_t, uint64_t, double))v24)(v11, v2, v4, v20);
  uint64_t v25 = (uint64_t (*)(char *, uint64_t, uint64_t))v12[6];
  uint64_t v61 = v3;
  uint64_t v26 = v3;
  uint64_t v27 = v25;
  if (v25(v11, 1, v26) == 1)
  {
    uint64_t v54 = v15;
    BOOL v55 = v18;
    uint64_t v56 = v12;
    char v28 = *(void (**)(char *, uint64_t))(v5 + 8);
    v28(v11, v4);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    char v30 = (char *)(v62 + *(int *)(TupleTypeMetadata3 + 48));
    long long v31 = v59;
    v58(v59, (uint64_t)v30, v4);
    uint64_t v32 = v61;
    if (v27(v31, 1, v61) == 1)
    {
      v28(v59, v4);
      char v33 = (char *)(v62 + *(int *)(TupleTypeMetadata3 + 64));
      char v34 = v57;
      v58(v57, (uint64_t)v33, v4);
      int v35 = v27(v34, 1, v32);
      Swift::UInt64 v36 = v60;
      uint64_t v37 = v56;
      if (v35 == 1)
      {
        v28(v34, v4);
        return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v37[7])(v36, 1, 1, v32);
      }
      else
      {
        uint64_t v49 = v54;
        uint64_t v50 = v34;
        uint64_t v51 = (void (*)(char *, char *, uint64_t))v56[4];
        v51(v54, v50, v32);
        v28(v33, v4);
        uint64_t v52 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v37[7];
        v52((uint64_t)v33, 1, 1, v32);
        v51(v36, v49, v32);
        return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v52)(v36, 0, 1, v32);
      }
    }
    else
    {
      long long v45 = v55;
      uint64_t v44 = v56;
      long long v46 = (void (*)(char *, char *, uint64_t))v56[4];
      v46(v55, v59, v32);
      v28(v30, v4);
      long long v47 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v44[7];
      v47((uint64_t)v30, 1, 1, v32);
      uint64_t v48 = v60;
      v46(v60, v45, v32);
      return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v47)(v48, 0, 1, v32);
    }
  }
  else
  {
    unint64_t v39 = (void (*)(char *, char *, uint64_t))v12[4];
    uint64_t v40 = v61;
    v39(v22, v11, v61);
    uint64_t v41 = v62;
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v62, v4);
    uint64_t v42 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12[7];
    v42(v41, 1, 1, v40);
    uint64_t v43 = v60;
    v39(v60, v22, v40);
    return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v42)(v43, 0, 1, v40);
  }
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Stack<A>()
{
  return swift_getWitnessTable();
}

uint64_t *initializeBufferWithCopyOfBuffer for Stack3(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  size_t v10 = v7 + v8;
  if (v8 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8) + v7 > 0x18)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    uint64_t v14 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48);
    if (v14(a2, 1, v5))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    unsigned int v15 = (void *)(((unint64_t)a2 + v10) & v9);
    if (v14(v15, 1, v5))
    {
      memcpy((void *)(((unint64_t)a1 + v10) & v9), v15, v7);
    }
    else
    {
      (*(void (**)(unint64_t, void *, uint64_t))(v6 + 16))(((unint64_t)a1 + v10) & v9, v15, v5);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v6 + 56))(((unint64_t)a1 + v10) & v9, 0, 1, v5);
    }
    uint64_t v16 = (void *)((v10 + (((unint64_t)a1 + v10) & v9)) & v9);
    uint64_t v17 = (void *)(((unint64_t)v15 + v10) & v9);
    if (v14(v17, 1, v5))
    {
      memcpy(v16, v17, v7);
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v16, v17, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
    }
  }
  return a1;
}

uint64_t destroy for Stack3(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(v3 - 8);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (!v4(a1, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v3);
  }
  if (*(_DWORD *)(v13 + 84)) {
    uint64_t v5 = *(void *)(v13 + 64);
  }
  else {
    uint64_t v5 = *(void *)(v13 + 64) + 1;
  }
  uint64_t v6 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v7 = v5 + v6;
  uint64_t v8 = ~v6;
  uint64_t v9 = (v5 + v6 + a1) & ~v6;
  if (!v4(v9, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v9, v3);
  }
  uint64_t v10 = (v7 + v9) & v8;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v4)(v10, 1, v3);
  if (!result)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
    return v12(v10, v3);
  }
  return result;
}

void *initializeWithCopy for Stack3(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v7(a2, 1, v5))
  {
    int v8 = *(_DWORD *)(v6 + 84);
    size_t v9 = *(void *)(v6 + 64);
    if (v8) {
      size_t v10 = *(void *)(v6 + 64);
    }
    else {
      size_t v10 = v9 + 1;
    }
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    int v8 = *(_DWORD *)(v6 + 84);
    size_t v9 = *(void *)(v6 + 64);
  }
  if (v8) {
    size_t v11 = v9;
  }
  else {
    size_t v11 = v9 + 1;
  }
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  size_t v13 = v11 + v12;
  uint64_t v14 = ~v12;
  unsigned int v15 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  uint64_t v16 = (const void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  if (v7(v16, 1, v5))
  {
    memcpy(v15, v16, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v15, v16, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  uint64_t v17 = (void *)(((unint64_t)v15 + v13) & v14);
  uint64_t v18 = (const void *)(((unint64_t)v16 + v13) & v14);
  if (v7(v18, 1, v5))
  {
    memcpy(v17, v18, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v17, v18, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for Stack3(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    size_t v13 = *(void *)(v6 + 64);
  }
  else {
    size_t v13 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  size_t v15 = v13 + v14;
  uint64_t v26 = a1;
  uint64_t v16 = ~v14;
  uint64_t v17 = (void *)(((unint64_t)a1 + v13 + v14) & ~v14);
  uint64_t v18 = (void *)(((unint64_t)a2 + v13 + v14) & ~v14);
  int v19 = v7(v17, 1, v5);
  int v20 = v7(v18, 1, v5);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v17, v18, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v17, v5);
LABEL_20:
    memcpy(v17, v18, v13);
    goto LABEL_21;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v17, v18, v5);
LABEL_21:
  uint64_t v21 = (void *)(((unint64_t)v17 + v15) & v16);
  uint64_t v22 = (void *)(((unint64_t)v18 + v15) & v16);
  int v23 = v7(v21, 1, v5);
  int v24 = v7(v22, 1, v5);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v21, v22, v5);
      return v26;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v21, v5);
    goto LABEL_26;
  }
  if (v24)
  {
LABEL_26:
    memcpy(v21, v22, v13);
    return v26;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v21, v22, v5);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v21, 0, 1, v5);
  return v26;
}

void *initializeWithTake for Stack3(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v7(a2, 1, v5))
  {
    int v8 = *(_DWORD *)(v6 + 84);
    size_t v9 = *(void *)(v6 + 64);
    if (v8) {
      size_t v10 = *(void *)(v6 + 64);
    }
    else {
      size_t v10 = v9 + 1;
    }
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    int v8 = *(_DWORD *)(v6 + 84);
    size_t v9 = *(void *)(v6 + 64);
  }
  if (v8) {
    size_t v11 = v9;
  }
  else {
    size_t v11 = v9 + 1;
  }
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  size_t v13 = v11 + v12;
  uint64_t v14 = ~v12;
  size_t v15 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  uint64_t v16 = (const void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  if (v7(v16, 1, v5))
  {
    memcpy(v15, v16, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v15, v16, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  uint64_t v17 = (void *)(((unint64_t)v15 + v13) & v14);
  uint64_t v18 = (const void *)(((unint64_t)v16 + v13) & v14);
  if (v7(v18, 1, v5))
  {
    memcpy(v17, v18, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v17, v18, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for Stack3(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    size_t v13 = *(void *)(v6 + 64);
  }
  else {
    size_t v13 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  size_t v15 = v13 + v14;
  uint64_t v26 = a1;
  uint64_t v16 = ~v14;
  uint64_t v17 = (void *)(((unint64_t)a1 + v13 + v14) & ~v14);
  uint64_t v18 = (void *)(((unint64_t)a2 + v13 + v14) & ~v14);
  int v19 = v7(v17, 1, v5);
  int v20 = v7(v18, 1, v5);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v17, v18, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v17, v5);
LABEL_20:
    memcpy(v17, v18, v13);
    goto LABEL_21;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v17, v18, v5);
LABEL_21:
  uint64_t v21 = (void *)(((unint64_t)v17 + v15) & v16);
  uint64_t v22 = (void *)(((unint64_t)v18 + v15) & v16);
  int v23 = v7(v21, 1, v5);
  int v24 = v7(v22, 1, v5);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v21, v22, v5);
      return v26;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v21, v5);
    goto LABEL_26;
  }
  if (v24)
  {
LABEL_26:
    memcpy(v21, v22, v13);
    return v26;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v21, v22, v5);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v21, 0, 1, v5);
  return v26;
}

uint64_t getEnumTagSinglePayload for Stack3(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v9 = ((v7
         + *(unsigned __int8 *)(v4 + 80)
         + ((v7 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
       + v7;
    char v10 = 8 * v9;
    if (v9 > 3) {
      goto LABEL_8;
    }
    unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (v11) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v12 <= 0xFF)
      {
        if (v12 < 2) {
          goto LABEL_23;
        }
LABEL_8:
        int v11 = *((unsigned __int8 *)a1 + v9);
        if (!*((unsigned char *)a1 + v9)) {
          goto LABEL_23;
        }
LABEL_15:
        int v13 = (v11 - 1) << v10;
        if (v9 > 3) {
          int v13 = 0;
        }
        if (v9)
        {
          if (v9 > 3) {
            LODWORD(v9) = 4;
          }
          switch((int)v9)
          {
            case 2:
              LODWORD(v9) = *a1;
              break;
            case 3:
              LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              LODWORD(v9) = *(_DWORD *)a1;
              break;
            default:
              LODWORD(v9) = *(unsigned __int8 *)a1;
              break;
          }
        }
        return v6 + (v9 | v13) + 1;
      }
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_15;
      }
    }
  }
LABEL_23:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v15 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v15 >= 2) {
    return v15 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for Stack3(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v10;
  }
  size_t v11 = ((v10
        + *(unsigned __int8 *)(v7 + 80)
        + ((v10 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + v10;
  BOOL v12 = a3 >= v9;
  unsigned int v13 = a3 - v9;
  if (v13 == 0 || !v12)
  {
LABEL_14:
    if (v9 < a2) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
  if (v11 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
  unsigned int v14 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
  if (!HIWORD(v14))
  {
    if (v14 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v14 > 1;
    }
    goto LABEL_14;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_15:
    unsigned int v15 = ~v9 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * v11)) + 1;
      if (v11)
      {
        int v17 = v15 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v11] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v16;
        return;
      case 3:
        goto LABEL_40;
      case 4:
        *(_DWORD *)&a1[v11] = v16;
        return;
      default:
        return;
    }
  }
LABEL_22:
  switch(v6)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_40:
      __break(1u);
      JUMPOUT(0x245CDEF64);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v8 >= 2)
        {
          uint64_t v18 = *(void (**)(void))(v7 + 56);
          v18();
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for ExplodeTextEffect()
{
  return &type metadata for ExplodeTextEffect;
}

unint64_t lazy protocol witness table accessor for type NoTextEffectState and conformance NoTextEffectState()
{
  unint64_t result = lazy protocol witness table cache variable for type NoTextEffectState and conformance NoTextEffectState;
  if (!lazy protocol witness table cache variable for type NoTextEffectState and conformance NoTextEffectState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NoTextEffectState and conformance NoTextEffectState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NoTextEffectState and conformance NoTextEffectState;
  if (!lazy protocol witness table cache variable for type NoTextEffectState and conformance NoTextEffectState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NoTextEffectState and conformance NoTextEffectState);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI4TextVAFE6EffectO19SubcomponentKeyPathVG_So6CGRectVs5NeverOTg503_s7d11UI17Explodefg91V13configurationyAA0D0VAAE0E0O13ConfigurationVy__ACGSSFAH8DrawableVAH6TimingV_AH0H8Fragmentw78__ACGAH19QuantizationContextVtcfU_yAH12ClusterIndexV_AH09TransformL0VztcfU_So6k5VAH19hiJ6VXEfU_AJ16TransformContextVTf1cn_n(uint64_t a1, void *a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v24 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  uint64_t v3 = v24;
  int v6 = (unint64_t *)(a1 + 48);
  while (a2[34])
  {
    uint64_t v7 = a2[42];
    uint64_t v8 = *(v6 - 2);
    BOOL v9 = __OFSUB__(v8, v7);
    unint64_t v10 = v8 - v7;
    if (v9)
    {
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      break;
    }
    if ((v10 & 0x8000000000000000) != 0) {
      goto LABEL_14;
    }
    uint64_t v11 = a2[43];
    if (v10 >= *(void *)(v11 + 16)) {
      goto LABEL_15;
    }
    unint64_t v12 = *(v6 - 1);
    if ((v12 & 0x8000000000000000) != 0) {
      goto LABEL_16;
    }
    if (v12 >= *(void *)(*(void *)(v11 + 56 * v10 + 56) + 16)) {
      goto LABEL_17;
    }
    double v13 = Text.Effect.PathInterpolator.Glyph.bounds(for:)(*v6);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    unint64_t v21 = *(void *)(v24 + 16);
    unint64_t v20 = *(void *)(v24 + 24);
    if (v21 >= v20 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
    }
    v6 += 3;
    *(void *)(v24 + 16) = v21 + 1;
    uint64_t v22 = (double *)(v24 + 32 * v21);
    v22[4] = v13;
    *((void *)v22 + 5) = v15;
    *((void *)v22 + 6) = v17;
    *((void *)v22 + 7) = v19;
    if (!--v2) {
      return v3;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

double one-time initialization function for defaultSpring()
{
  double result = 15.612495;
  static ExplodeTextEffect.defaultSpring = xmmword_2461D7770;
  qword_268F73560 = 0x3FF0000000000000;
  return result;
}

uint64_t closure #1 in ExplodeTextEffect.configuration(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a2);
  specialized Text.Effect.PathInterpolator.init<A>(_:quantization:options:)(a2, a3, 6, v29);
  uint64_t v31 = v6;
  uint64_t v32 = v7;
  uint64_t v33 = v8;
  uint64_t v34 = v9;
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a1;
  *(void *)(v10 + 32) = v6;
  *(void *)(v10 + 40) = v7;
  *(void *)(v10 + 48) = v8;
  *(void *)(v10 + 56) = v9;
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v10 + 64) = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 80) = v11;
  *(_OWORD *)(v10 + 96) = *(_OWORD *)(a2 + 32);
  *(void *)(v10 + 112) = *(void *)(a2 + 48);
  uint64_t v12 = swift_allocObject();
  __n128 v13 = v29[3];
  *(__n128 *)(v12 + 48) = v29[2];
  *(__n128 *)(v12 + 64) = v13;
  *(__n128 *)(v12 + 80) = v29[4];
  uint64_t v14 = v30;
  __n128 v15 = v29[1];
  *(__n128 *)(v12 + 16) = v29[0];
  *(__n128 *)(v12 + 32) = v15;
  *(void *)(v12 + 96) = v14;
  *(void *)(v12 + 104) = partial apply for closure #1 in closure #1 in ExplodeTextEffect.configuration(_:);
  *(void *)(v12 + 112) = v10;
  uint64_t v16 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8E0F8];
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVACE6EffectO8DrawableV8FragmentOGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>, (uint64_t)&type metadata for Text.Effect.Drawable.Fragment, MEMORY[0x263F8E0F8]);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_2461B9DC0;
  *(void *)(v17 + 32) = partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:);
  unint64_t v18 = v17 + 32;
  *(void *)(v17 + 40) = v12;
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVACE6EffectO8DrawableV8FragmentOGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>, (uint64_t)&type metadata for Text.Effect.Drawable, v16);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  *(void *)(inited + 32) = v17;
  int64_t v20 = *(void *)(v17 + 16);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a2);
  outlined retain of LinearGradient((uint64_t)&v31);
  outlined retain of LinearGradient((uint64_t)&v32);
  outlined retain of LinearGradient((uint64_t)&v33);
  outlined retain of LinearGradient((uint64_t)&v34);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)v29);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 1, MEMORY[0x263F8EE78]);
  uint64_t v22 = v21;
  if (!*(void *)(v17 + 16))
  {
    if (!v20) {
      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v23 = v21[2];
  if ((v21[3] >> 1) - v23 < v20)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v24 = (unint64_t)&v21[2 * v23 + 4];
  if (v18 < v24 + 16 * v20 && v24 < v18 + 16 * v20) {
    goto LABEL_13;
  }
  swift_arrayInitWithCopy();
  if (!v20)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    outlined release of Text.Effect.PathInterpolator((uint64_t)v29);
    return (uint64_t)v22;
  }
  uint64_t v25 = v22[2];
  BOOL v26 = __OFADD__(v25, v20);
  uint64_t v27 = v25 + v20;
  if (!v26)
  {
    uint64_t v22[2] = v27;
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
LABEL_13:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

__n128 specialized Text.Effect.PathInterpolator.init<A>(_:quantization:options:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, __n128 *a4@<X8>)
{
  long long v8 = *(_OWORD *)(a1 + 16);
  v27[0] = *(_OWORD *)a1;
  v27[1] = v8;
  __n128 v25 = *(__n128 *)(a1 + 16);
  void v27[2] = *(_OWORD *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 48);
  unint64_t v28 = v9;
  unint64_t v10 = *(void *)a1;
  unint64_t v22 = *(void *)(a1 + 8);
  unint64_t v23 = *(void *)(a1 + 32);
  unint64_t v24 = *(void *)(a1 + 40);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v27);
  uint64_t v11 = MEMORY[0x263F8EE80];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v27, isUniquelyReferenced_nonNull_native, 0.0);
  swift_bridgeObjectRelease();
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a1);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a1);
  swift_bridgeObjectRetain();
  uint64_t v13 = specialized static Text.Effect.stopMarkers(_:)((uint64_t)v27);
  uint64_t v15 = v14;
  outlined release of Text.Effect.BaseFragment(a1);
  uint64_t v16 = Text.Effect.PathInterpolator.Map.computeFragment(quantization:stopMarkers:defaultKey:options:)(a2, v13, v15, a3, v11, 0.0);
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = swift_bridgeObjectRetain();
  BOOL v26 = specialized _copyCollectionToContiguousArray<A>(_:)(v19);
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v26);
  swift_bridgeObjectRelease();
  uint64_t v20 = (uint64_t)v26;
  if (specialized static Array<A>.== infix(_:_:)((uint64_t)&outlined read-only object #0 of Text.Effect.PathInterpolator.MapKeys.init(_:), (uint64_t)v26))
  {
    swift_release();
    outlined release of Text.Effect.BaseFragment(a1);
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else if (specialized static Array<A>.== infix(_:_:)((uint64_t)&outlined read-only object #1 of Text.Effect.PathInterpolator.MapKeys.init(_:), v20))
  {
    swift_release();
    outlined release of Text.Effect.BaseFragment(a1);
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  else if (specialized static Array<A>.== infix(_:_:)((uint64_t)&outlined read-only object #2 of Text.Effect.PathInterpolator.MapKeys.init(_:), v20))
  {
    swift_release();
    outlined release of Text.Effect.BaseFragment(a1);
    swift_bridgeObjectRelease();
    uint64_t v20 = 2;
  }
  else
  {
    outlined release of Text.Effect.BaseFragment(a1);
    swift_bridgeObjectRelease();
  }
  a4->n128_u64[0] = v10;
  a4->n128_u64[1] = v22;
  __n128 result = v25;
  a4[1] = v25;
  a4[2].n128_u64[0] = v23;
  a4[2].n128_u64[1] = v24;
  a4[3].n128_u64[0] = v9;
  a4[3].n128_u64[1] = 0;
  a4[4].n128_u64[0] = v16;
  a4[4].n128_u64[1] = v18;
  a4[5].n128_u64[0] = v20;
  return result;
}

uint64_t closure #1 in closure #1 in ExplodeTextEffect.configuration(_:)(unint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v157 = v16;
  uint64_t v141 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  long long v156 = (char *)&v139 - v17;
  uint64_t v18 = a1;
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_2(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
  MEMORY[0x270FA5388](v19);
  unint64_t v23 = (char *)&v139 - v22;
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  uint64_t v24 = *(void *)(a3 + 16);
  if (*(void *)(v24 + 16) <= a1)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  uint64_t v25 = *(void *)(a3 + 32);
  if (*(void *)(v25 + 16) <= a1)
  {
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  CGFloat v146 = *(double *)&a4;
  long long v154 = v23;
  uint64_t v155 = v20;
  uint64_t v26 = v24 + 32 * a1;
  uint64_t v4 = *(void (***)(char *, uint64_t))(v26 + 48);
  double v27 = *(double *)(v25 + 40 * a1 + 32);
  double v28 = a2[4];
  double v29 = a2[5];
  long long v161 = a2;
  double v30 = v29 - v28;
  uint64_t v140 = v21;
  if (v29 - v28 >= 0.0)
  {
    double v158 = 0.0;
    if (v30 <= v27) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  double v30 = 0.0;
  double v158 = 0.0;
  if (v27 < 0.0) {
LABEL_8:
  }
    double v158 = v30 - v27;
LABEL_9:
  double v166 = *(double *)(v26 + 32);
  uint64_t v31 = v161;
  char v32 = *((unsigned char *)v161 + 16);
  uint64_t v33 = *((void *)v161 + 3);
  uint64_t v34 = *((void *)v161 + 6);
  uint64_t v35 = *((void *)v161 + 8);
  char v36 = *((unsigned char *)v161 + 72);
  uint64_t v37 = *((void *)v161 + 12);
  unsigned int v38 = (void (**)(char *, uint64_t))*((void *)v161 + 13);
  double v7 = v161[26];
  double v8 = v161[27];
  double v9 = v161[28];
  double v39 = v161[29];
  double v41 = v161[30];
  double v40 = v161[31];
  uint64_t v42 = *((void *)v161 + 32);
  unsigned int v5 = (double *)*((void *)v161 + 33);
  unint64_t v6 = *((void *)v161 + 34);
  unint64_t v43 = *((void *)v161 + 35);
  uint64_t v44 = *((void *)v161 + 36);
  uint64_t v45 = *((uint64_t *)v161 + 37);
  CGFloat v46 = v161[38];
  a4 = *((uint64_t *)v161 + 39);
  uint64_t v47 = *((void *)v161 + 40);
  CGFloat v48 = v161[41];
  uint64_t v49 = *((void *)v161 + 42);
  uint64_t v50 = (void (**)(char *, uint64_t, uint64_t))*((void *)v161 + 43);
  uint64_t v51 = *((void *)v161 + 46);
  char v52 = *((unsigned char *)v161 + 376);
  char v171 = *((unsigned char *)v161 + 56);
  char v170 = v52;
  long long v151 = *(_OWORD *)v161;
  v169[0] = v151;
  LOBYTE(v169[1]) = v32;
  *((void *)&v169[1] + 1) = v33;
  *(double *)&v169[2] = v28;
  *((double *)&v169[2] + 1) = v29;
  *(void *)&v169[3] = v34;
  BYTE8(v169[3]) = v171;
  *(void *)&v169[4] = v35;
  BYTE8(v169[4]) = v36;
  v169[5] = *((_OWORD *)v161 + 5);
  *(void *)&v169[6] = v37;
  *((void *)&v169[6] + 1) = v38;
  long long v147 = v38;
  long long v53 = *((_OWORD *)v161 + 8);
  v169[7] = *((_OWORD *)v161 + 7);
  v169[8] = v53;
  long long v54 = *((_OWORD *)v161 + 10);
  v169[9] = *((_OWORD *)v161 + 9);
  v169[10] = v54;
  long long v55 = *((_OWORD *)v161 + 12);
  v169[11] = *((_OWORD *)v161 + 11);
  v169[12] = v55;
  *(double *)&v169[13] = v7;
  *((double *)&v169[13] + 1) = v8;
  *(double *)&v169[14] = v9;
  *((double *)&v169[14] + 1) = v39;
  *(double *)&v169[15] = v41;
  *((double *)&v169[15] + 1) = v40;
  *(void *)&v169[16] = v42;
  *((void *)&v169[16] + 1) = v5;
  *(void *)&v169[17] = v6;
  a1 = v43;
  *((void *)&v169[17] + 1) = v43;
  uint64_t v162 = v45;
  v163.i64[0] = v44;
  *(void *)&v169[18] = v44;
  *((void *)&v169[18] + 1) = v45;
  CGFloat v152 = v48;
  CGFloat v153 = v46;
  *(CGFloat *)&v169[19] = v46;
  *((void *)&v169[19] + 1) = a4;
  v164.i64[0] = v47;
  *(void *)&v169[20] = v47;
  *((CGFloat *)&v169[20] + 1) = v48;
  long long v148 = v50;
  uint64_t v149 = v49;
  *(void *)&v169[21] = v49;
  *((void *)&v169[21] + 1) = v50;
  long long v145 = *((_OWORD *)v161 + 22);
  v169[22] = v145;
  *(void *)&v169[23] = v51;
  BYTE8(v169[23]) = v52;
  swift_bridgeObjectRetain();
  double v165 = *(double *)&v18;
  *(double *)&uint64_t v18 = COERCE_DOUBLE(Text.Effect.TransformContext.subcomponents(for:)(v18));
  uint64_t v56 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI4TextVAFE6EffectO19SubcomponentKeyPathVG_So6CGRectVs5NeverOTg503_s7d11UI17Explodefg91V13configurationyAA0D0VAAE0E0O13ConfigurationVy__ACGSSFAH8DrawableVAH6TimingV_AH0H8Fragmentw78__ACGAH19QuantizationContextVtcfU_yAH12ClusterIndexV_AH09TransformL0VztcfU_So6k5VAH19hiJ6VXEfU_AJ16TransformContextVTf1cn_n(v18, v31);
  swift_bridgeObjectRelease();
  double v10 = *MEMORY[0x263F001A0];
  CGFloat v11 = *(double *)(MEMORY[0x263F001A0] + 8);
  double v57 = *(double *)(MEMORY[0x263F001A0] + 16);
  CGFloat v159 = *(double *)(MEMORY[0x263F001A0] + 24);
  CGFloat v160 = v57;
  uint64_t v58 = *(void *)(v56 + 16);
  if (v58)
  {
    swift_bridgeObjectRetain();
    uint64_t v59 = v56 + 56;
    double v61 = v159;
    double v60 = v160;
    do
    {
      double v62 = v10;
      CGFloat v63 = v11;
      *(CGRect *)(&v60 - 2) = CGRectUnion(*(CGRect *)(&v60 - 2), *(CGRect *)(v59 - 24));
      double v10 = v64;
      CGFloat v11 = v65;
      v59 += 32;
      --v58;
    }
    while (v58);
    CGFloat v159 = v61;
    CGFloat v160 = v60;
    swift_bridgeObjectRelease();
  }
  double v66 = v165;
  swift_bridgeObjectRelease();
  uint64_t v67 = v151;
  if (__OFSUB__((void)v151, *(void *)&v66)) {
    goto LABEL_67;
  }
  char v142 = v4;
  double v68 = 0.0;
  if ((void)v151 == *(void *)&v66) {
    double v69 = v7;
  }
  else {
    double v69 = 0.0;
  }
  if ((void)v151 == *(void *)&v66) {
    double v7 = v8;
  }
  else {
    double v7 = 0.0;
  }
  if ((void)v151 == *(void *)&v66) {
    double v70 = v9;
  }
  else {
    double v70 = 0.0;
  }
  if ((void)v151 == *(void *)&v66) {
    double v8 = v39;
  }
  else {
    double v8 = 0.0;
  }
  if ((void)v151 == *(void *)&v66) {
    double v9 = v41;
  }
  else {
    double v9 = 0.0;
  }
  CGFloat v150 = v70;
  *(double *)&long long v151 = v69;
  v174[0] = v69;
  v174[1] = v7;
  _DWORD v174[2] = v70;
  v174[3] = v8;
  if (v67 == *(void *)&v66) {
    double v68 = v40;
  }
  v174[4] = v9;
  v174[5] = v68;
  if (v6)
  {
    unint64_t v71 = v145;
    uint64_t v4 = (void (**)(char *, uint64_t))v162;
    uint64_t v18 = v163.i64[0];
    outlined copy of Text.Effect.TransformContext.DrawingMode(v6, a1, v163.i64[0], v162, *(uint64_t *)&v153, a4, v164.i64[0], *(uint64_t *)&v152, v149, (uint64_t)v148, v145);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    *(void *)&long long v145 = v71;
    outlined copy of Text.Effect.PathInterpolator.MapKeys(v71);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v72 = v5;
LABEL_34:
      unint64_t v73 = v6;
      unint64_t v75 = *((void *)v72 + 2);
      unint64_t v74 = *((void *)v72 + 3);
      *(void *)&double v144 = v75 + 1;
      uint64_t v76 = a4;
      if (v75 >= v74 >> 1) {
        uint64_t v72 = (double *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v74 > 1), v75 + 1, 1, v72);
      }
      *(void *)&v169[0] = v73;
      *((void *)&v169[0] + 1) = a1;
      *(void *)&v169[1] = v18;
      *((void *)&v169[1] + 1) = v4;
      uint64_t v77 = *(void *)&v152;
      uint64_t v78 = *(void *)&v153;
      *(CGFloat *)&v169[2] = v153;
      *((void *)&v169[2] + 1) = v76;
      *(void *)&v169[3] = v164.i64[0];
      *((CGFloat *)&v169[3] + 1) = v152;
      uint64_t v143 = a1;
      CFIndex v80 = v148;
      uint64_t v79 = v149;
      *(void *)&v169[4] = v149;
      *((void *)&v169[4] + 1) = v148;
      *(_OWORD *)((char *)&v169[5] + 8) = 0u;
      *(_OWORD *)((char *)&v169[6] + 8) = 0u;
      *(_OWORD *)((char *)&v169[7] + 8) = 0u;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)((char *)&v169[8] + 8) = _Q0;
      unint64_t v86 = v145;
      *(void *)&v169[5] = v145;
      *((void *)&v169[9] + 1) = 0x3FF0000000000000;
      LOBYTE(v169[10]) = 0;
      _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi1_((uint64_t)v169);
      v72[2] = v144;
      outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v169, (uint64_t)&v72[27 * v75 + 4]);
      outlined consume of Text.Effect.TransformContext.DrawingMode(v73, v143, v163.i64[0], v162, v78, v76, v164.i64[0], v77, v79, (uint64_t)v80, v86);
      *((void *)v161 + 33) = v72;
      goto LABEL_37;
    }
LABEL_68:
    uint64_t v72 = (double *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
    goto LABEL_34;
  }
LABEL_37:
  uint64_t v87 = v161;
  if (v147)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_2(0, &lazy cache variable for type metadata for Text.Effect.ConcreteConfiguration<ExplodeTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect, (uint64_t)&type metadata for ExplodeTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.ConcreteConfiguration);
    uint64_t v88 = swift_dynamicCastClass();
    if (v88)
    {
      if ((*(unsigned char *)(v88 + 32) & 1) == 0)
      {
        uint64_t v89 = *(void *)(v88 + 36);
        uint64_t v90 = *(void *)(v88 + 44);
        char v91 = *(unsigned char *)(v88 + 52);
        float32x4_t v164 = *(float32x4_t *)(v88 + 16);
        if (one-time initialization token for legacyInterpolation != -1) {
          swift_once();
        }
        swift_beginAccess();
        if ((static Color.Resolved.legacyInterpolation & 1) == 0)
        {
          LOBYTE(v172[0]) = 2;
          ResolvedGradient.ColorSpace.convertIn(_:)((float *)v169, (int8x16_t)v164, v164.f32[1], v164.u32[2], v164.f32[3], v92);
          float32x4_t v164 = (float32x4_t)v169[0];
        }
        if ((v91 & 1) == 0)
        {
          v93.i64[0] = 0x4300000043000000;
          v93.i64[1] = 0x4300000043000000;
          v94.i64[0] = v89;
          v94.i64[1] = v90;
          if ((static Color.Resolved.legacyInterpolation & 1) == 0)
          {
            LOBYTE(v172[0]) = 2;
            ResolvedGradient.ColorSpace.convertIn(_:)((float *)v169, (int8x16_t)v94, *((float *)&v89 + 1), v90, *((float *)&v90 + 1), v92);
            v93.i64[0] = 0x4300000043000000;
            v93.i64[1] = 0x4300000043000000;
            float32x4_t v94 = (float32x4_t)v169[0];
          }
          v95.i64[0] = 0x4300000043000000;
          v95.i64[1] = 0x4300000043000000;
          float32x4_t v163 = vmulq_f32(v94, v95);
          float32x4_t v164 = vmulq_f32(v164, v93);
          if (one-time initialization token for color != -1) {
            swift_once();
          }
          specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.color, v158);
          *(float *)&double v96 = v96;
          v97.i64[0] = 0x3C0000003C000000;
          v97.i64[1] = 0x3C0000003C000000;
          float32x4_t v98 = vmulq_f32(vaddq_f32(v164, vmulq_n_f32(vsubq_f32(v163, v164), *(float *)&v96)), v97);
          if (static Color.Resolved.legacyInterpolation)
          {
            unsigned __int32 v99 = v98.u32[1];
            unsigned __int32 v101 = v98.u32[3];
            unsigned __int32 v100 = v98.u32[2];
          }
          else
          {
            LOBYTE(v172[0]) = 2;
            v169[0] = v98;
            v98.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)((float *)v169);
          }
          *((void *)v87 + 45) = v98.u32[0] | ((unint64_t)v99 << 32);
          *((void *)v87 + 46) = v100 | ((unint64_t)v101 << 32);
          *((unsigned char *)v87 + 376) = 0;
        }
      }
    }
  }
  CGFloat v152 = v11;
  CGFloat v153 = v10;
  memcpy(v169, v87, 0x179uLL);
  uint64_t v143 = Text.Effect.TransformContext.subcomponents(for:)(*(uint64_t *)&v165);
  a1 = *(unint64_t *)(v143 + 16);
  if (*(double *)&a1 != 0.0)
  {
    uint64_t v102 = *(void *)(*(void *)&v146 + 24);
    CGFloat v146 = v7 - v8;
    double v144 = v166 + -0.5 + v166 + -0.5;
    *(double *)&long long v145 = v8 + v9;
    uint64_t v149 = v102
         + OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges;
    long long v147 = (void (**)(char *, uint64_t))(v141 + 8);
    long long v148 = (void (**)(char *, uint64_t, uint64_t))(v141 + 16);
    uint64_t v4 = (void (**)(char *, uint64_t))(v140 + 8);
    unsigned int v5 = (double *)(v143 + 48);
    uint64_t v103 = v154;
    double v10 = v158;
    do
    {
      unint64_t v6 = *((void *)v5 - 2);
      unint64_t v104 = *((void *)v5 - 1);
      uint64_t v18 = *(uint64_t *)v5;
      memcpy(v169, v87, 0x179uLL);
      Text.Effect.TransformContext.subcomponentBounds(for:)(v6, v104, v18);
      CGFloat v11 = v105;
      double v8 = v106;
      double v7 = v107;
      double v9 = v108;
      uint64_t v109 = v156;
      uint64_t v110 = v157;
      (*v148)(v156, v149, v157);
      RangeSet.ranges.getter();
      (*v147)(v109, v110);
      a4 = v155;
      uint64_t v111 = RangeSet.Ranges.count.getter();
      double v165 = v7;
      *(double *)v164.i64 = v9;
      if (v111 == 1)
      {
        RangeSet.Ranges.subscript.getter();
        RangeSet.Ranges.subscript.getter();
        uint64_t v112 = v168 - v167;
        double v113 = v166;
        if (__OFSUB__(v168, v167))
        {
          __break(1u);
          goto LABEL_64;
        }
        (*v4)(v103, a4);
      }
      else
      {
        (*v4)(v103, a4);
        uint64_t v112 = 0;
        double v113 = v166;
      }
      specialized ExplodeTextEffect.Target.amplitude(for:at:of:)(v112, v113);
      double v115 = v114;
      v175.size.width = v150;
      *(void *)&v175.origin.double x = v151;
      v175.origin.double y = v146;
      *(void *)&v175.size.height = v145;
      double Height = CGRectGetHeight(v175);
      if (one-time initialization token for z != -1) {
        swift_once();
      }
      v5 += 3;
      uint64_t v117 = static ExplodeTextEffect.Target.z;
      specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.z, v10);
      double v119 = exp(Height * 3.0 * (v115 * 1.5 + 0.25) * v118 / Height);
      *(double *)&uint64_t v162 = ExplodeTextEffect.Target.translation(for:at:of:)(v174, v112, v113, v10);
      v163.i64[0] = v120;
      ExplodeTextEffect.Target.vibration(for:at:)(v174, v113, v10);
      double v122 = v121;
      double v124 = v123;
      v176.origin.double x = v11;
      v176.origin.double y = v8;
      v176.size.width = v165;
      *(void *)&v176.size.height = v164.i64[0];
      CGFloat v125 = v152;
      CGFloat v126 = v153;
      v179.origin.double x = v153;
      v179.origin.double y = v152;
      CGFloat v128 = v159;
      CGFloat v127 = v160;
      v179.size.width = v160;
      v179.size.height = v159;
      CGSize v129 = ExplodeTextEffect.Target.subcomponentTranslation(for:in:)(v176, v179);
      *(double *)v164.i64 = v119 * (*(double *)&v162 + v122 + v129.width) + 0.0;
      double v130 = v119 * (*(double *)v163.i64 + v124 + v129.height) + 0.0;
      v177.origin.double x = v126;
      v177.origin.double y = v125;
      v177.size.width = v127;
      v177.size.height = v128;
      double v165 = CGRectGetMidX(v177) + *(double *)v164.i64;
      v178.origin.double x = v126;
      v178.origin.double y = v125;
      v178.size.width = v127;
      v178.size.height = v128;
      CGFloat v131 = CGRectGetMidY(v178) + v130;
      double v132 = v166;
      specialized ExplodeTextEffect.Target.amplitude(for:at:of:)(v112, v166);
      double v134 = v144 * (v133 + 0.5) * 10.0;
      specialized ExplodeTextEffect.Timeline.value(at:)(v117, v10);
      double v136 = v135 * v134;
      double v137 = ExplodeTextEffect.Target.opacity(for:at:of:)(v174, v112, v132, v10);
      v172[0] = 0;
      v172[1] = v164.i64[0];
      *(double *)&v172[2] = v130;
      *(double *)&v172[3] = v136;
      *(double *)&v172[4] = v165;
      *(CGFloat *)&v172[5] = v131;
      *(double *)&v172[6] = v119;
      *(double *)&v172[7] = v119;
      *(double *)&v172[8] = v137;
      char v173 = 0;
      uint64_t v87 = v161;
      Text.Effect.TransformContext.draw(position:for:)((uint64_t)v172, v6, v104, v18);
      --a1;
    }
    while (*(double *)&a1 != 0.0);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized ExplodeTextEffect.Timeline.value(at:)(uint64_t result, double a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    double v3 = *(double *)(result + 48);
    if (v3 >= a2)
    {
      unint64_t v6 = (void (**)(uint64_t, double))(result + 56);
LABEL_11:
      double v7 = *v6;
      double v8 = a2 / v3;
      uint64_t v9 = swift_retain();
      v7(v9, v8);
      return swift_release();
    }
    uint64_t v4 = v2 - 1;
    if (v2 != 1)
    {
      a2 = a2 - v3;
      for (uint64_t i = result + 104; ; i += 40)
      {
        double v3 = *(double *)(i - 16);
        if (v3 >= a2) {
          break;
        }
        a2 = a2 - v3;
        if (!--v4) {
          return result;
        }
      }
      unint64_t v6 = (void (**)(uint64_t, double))(i - 8);
      goto LABEL_11;
    }
  }
  return result;
}

double ExplodeTextEffect.Target.translation(for:at:of:)(CGFloat *a1, uint64_t a2, double a3, double a4)
{
  v14.origin.double x = *a1;
  v14.size.width = a1[2];
  double v7 = a1[3];
  v14.origin.double y = a1[1] - v7;
  v14.size.height = v7 + a1[4];
  double Height = CGRectGetHeight(v14);
  specialized ExplodeTextEffect.Target.amplitude(for:at:of:)(a2, a3);
  double v10 = v9;
  if (one-time initialization token for x != -1) {
    swift_once();
  }
  specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.x, a4);
  double v12 = v11;
  if (one-time initialization token for y != -1) {
    swift_once();
  }
  specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.y, a4);
  return (1.0 - v10) * ((a3 + -0.5 + a3 + -0.5) * (Height * 3.0) * v12);
}

uint64_t ExplodeTextEffect.Target.vibration(for:at:)(CGFloat *a1, double a2, double a3)
{
  if (one-time initialization token for vibration != -1) {
    swift_once();
  }
  specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.vibration, a3);
  v14.origin.double x = *a1;
  v14.size.width = a1[2];
  double v5 = a1[3];
  v14.origin.double y = a1[1] - v5;
  v14.size.height = v5 + a1[4];
  CGRectGetHeight(v14);
  uint64_t result = Double.hashValue.getter();
  if (__OFADD__(result, 123))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v12 = result + 123;
  unint64_t v13 = 0xDA3E39CB94B95BDBLL;
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)((unint64_t *)&v12, 0.0, 1.0);
  uint64_t result = Double.hashValue.getter();
  if (__OFADD__(result, 123))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v12 = result + 123;
  unint64_t v13 = 0xDA3E39CB94B95BDBLL;
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)((unint64_t *)&v12, 0.0, 1.0);
  uint64_t result = Double.hashValue.getter();
  if (__OFADD__(result, 123))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v12 = result + 123;
  unint64_t v13 = 0xDA3E39CB94B95BDBLL;
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)((unint64_t *)&v12, 0.0, 1.0);
  uint64_t result = Double.hashValue.getter();
  if (!__OFADD__(result, 123))
  {
    uint64_t v12 = result + 123;
    unint64_t v13 = 0xDA3E39CB94B95BDBLL;
    uint64_t result = (uint64_t)specialized static BinaryFloatingPoint<>.random<A>(in:using:)((unint64_t *)&v12, 0.0, 1.0);
    __asm { FMOV            V1.2D, #-1.0 }
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

CGSize __swiftcall ExplodeTextEffect.Target.subcomponentTranslation(for:in:)(__C::CGRect a1, __C::CGRect in)
{
  CGFloat y = a1.origin.y;
  CGFloat x = a1.origin.x;
  double v4 = 0.0;
  if (v30 >= 2.38333333)
  {
    double v13 = 0.0;
  }
  else
  {
    CGFloat height = in.size.height;
    CGFloat width = in.size.width;
    CGFloat v7 = in.origin.y;
    CGFloat v8 = a1.size.height;
    CGFloat v9 = a1.size.width;
    CGFloat v10 = in.origin.x;
    double MidX = CGRectGetMidX((CGRect)a1);
    v31.origin.CGFloat x = v10;
    v31.origin.CGFloat y = v7;
    v31.size.CGFloat width = width;
    v31.size.CGFloat height = height;
    double v27 = CGRectGetMidX(v31);
    v32.origin.CGFloat x = x;
    v32.origin.CGFloat y = y;
    v32.size.CGFloat width = v9;
    v32.size.CGFloat height = v8;
    double MidY = CGRectGetMidY(v32);
    CGFloat rect = v10;
    v33.origin.CGFloat x = v10;
    CGFloat v26 = v7;
    v33.origin.CGFloat y = v7;
    v33.size.CGFloat width = width;
    v33.size.CGFloat height = height;
    double v12 = CGRectGetMidY(v33);
    if (vabdd_f64(MidX, v27) < 0.001)
    {
      double v13 = 0.0;
      double v4 = 0.0;
    }
    else
    {
      double v13 = 0.0;
      double v4 = 0.0;
      if (vabdd_f64(MidY, v12) >= 0.001)
      {
        double v14 = MidX - v27;
        double v15 = MidY - v12;
        double v16 = sqrt(v14 * v14 + v15 * v15);
        v34.origin.CGFloat x = rect;
        v34.origin.CGFloat y = v26;
        v34.size.CGFloat width = width;
        v34.size.CGFloat height = height;
        double v17 = CGRectGetWidth(v34);
        if (one-time initialization token for x != -1) {
          swift_once();
        }
        double v18 = v14 / v16;
        double v19 = v15 / v16;
        specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.x, v30);
        double v21 = v17 * v20 * 0.4;
        v35.origin.CGFloat x = rect;
        v35.origin.CGFloat y = v26;
        v35.size.CGFloat width = width;
        v35.size.CGFloat height = height;
        double v22 = CGRectGetHeight(v35);
        if (one-time initialization token for y != -1) {
          swift_once();
        }
        double v4 = v18 * v21;
        specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.y, v30);
        double v13 = v19 * (v22 * v23);
      }
    }
  }
  double v24 = v4;
  result.CGFloat height = v13;
  result.CGFloat width = v24;
  return result;
}

double ExplodeTextEffect.Target.opacity(for:at:of:)(CGFloat *a1, uint64_t a2, double a3, double a4)
{
  specialized ExplodeTextEffect.Target.amplitude(for:at:of:)(a2, a3);
  double v7 = v6;
  v23.origin.CGFloat x = *a1;
  v23.size.CGFloat width = a1[2];
  double v8 = a1[3];
  v23.origin.CGFloat y = a1[1] - v8;
  v23.size.CGFloat height = v8 + a1[4];
  double Height = CGRectGetHeight(v23);
  double v10 = (v7 * 1.5 + 0.25) * (Height * 3.0);
  if (one-time initialization token for z != -1) {
    swift_once();
  }
  specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.z, a4);
  double v12 = exp(v10 * v11 / Height);
  if (v12 >= 4.0)
  {
    double v15 = v12 + -4.0;
    double v16 = v15 * 0.5;
    if (v15 < 0.0) {
      double v16 = 0.0;
    }
    if (v15 <= 2.0) {
      double v17 = v16;
    }
    else {
      double v17 = 1.0;
    }
    if (one-time initialization token for alpha != -1) {
      swift_once();
    }
    specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.alpha, a4);
    double v19 = 1.0 - v17 * v17;
    if (v19 < 0.0) {
      double v20 = 0.0;
    }
    else {
      double v20 = 1.0 - v17 * v17;
    }
    if (v19 <= 1.0) {
      double v21 = v20;
    }
    else {
      double v21 = 1.0;
    }
    return v21 * v18;
  }
  else
  {
    if (one-time initialization token for alpha != -1) {
      swift_once();
    }
    uint64_t v13 = static ExplodeTextEffect.Target.alpha;
    specialized ExplodeTextEffect.Timeline.value(at:)(v13, a4);
  }
  return result;
}

double one-time initialization function for alpha()
{
  type metadata accessor for _ContiguousArrayStorage<ExplodeTextEffect.Timeline<Double>.Keyframe>();
  uint64_t v0 = swift_allocObject();
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(v0 + 16) = xmmword_2461C6AA0;
  *(_OWORD *)(v0 + 32) = _Q1;
  *(void *)(v0 + 48) = 0x3FEB333333333333;
  *(void *)(v0 + 56) = _ViewInputs.base.modify;
  *(void *)(v0 + 64) = 0;
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_2461D7780;
  *(_OWORD *)(v6 + 32) = xmmword_2461D7790;
  *(unsigned char *)(v6 + 48) = 0;
  *(_OWORD *)(v0 + 72) = xmmword_2461BCA80;
  *(void *)(v0 + 88) = 0x3FEF74BC6A7EF9DBLL;
  *(void *)(v0 + 96) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(void *)(v0 + 104) = v6;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = 0x3FE6E147AE147AE1;
  *(void *)(v0 + 136) = _ViewInputs.base.modify;
  *(void *)(v0 + 144) = 0;
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_2461D7780;
  *(_OWORD *)(v7 + 32) = xmmword_2461D7790;
  *(unsigned char *)(v7 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 + 152) = xmmword_2461C55F0;
  *(void *)(v0 + 168) = 0x3FBDB22D0E560419;
  *(void *)(v0 + 176) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(void *)(v0 + 184) = v7;
  static ExplodeTextEffect.Target.alphCGFloat a = v0;
  return result;
}

double one-time initialization function for color()
{
  type metadata accessor for _ContiguousArrayStorage<ExplodeTextEffect.Timeline<Double>.Keyframe>();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2461C6AA0;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0x3FE8000000000000;
  *(void *)(v0 + 56) = _ViewInputs.base.modify;
  *(void *)(v0 + 64) = 0;
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2461D7780;
  *(_OWORD *)(v1 + 32) = xmmword_2461D7790;
  *(unsigned char *)(v1 + 48) = 0;
  *(_OWORD *)(v0 + 72) = xmmword_2461C55F0;
  *(void *)(v0 + 88) = 0x3FEF74BC6A7EF9DBLL;
  *(void *)(v0 + 96) = partial apply for implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:);
  *(void *)(v0 + 104) = v1;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v0 + 112) = _Q0;
  *(void *)(v0 + 128) = 0x3FE6E147AE147AE1;
  *(void *)(v0 + 136) = _ViewInputs.base.modify;
  *(void *)(v0 + 144) = 0;
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_2461D7780;
  *(_OWORD *)(v7 + 32) = xmmword_2461D7790;
  *(unsigned char *)(v7 + 48) = 0;
  double result = 1.0;
  *(_OWORD *)(v0 + 152) = xmmword_2461BCA80;
  *(void *)(v0 + 168) = 0x3FBDB22D0E560419;
  *(void *)(v0 + 176) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(void *)(v0 + 184) = v7;
  static ExplodeTextEffect.Target.color = v0;
  return result;
}

double one-time initialization function for vibration()
{
  type metadata accessor for _ContiguousArrayStorage<ExplodeTextEffect.Timeline<Double>.Keyframe>();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2461C6AA0;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0x3FC999999999999ALL;
  *(void *)(v0 + 56) = _ViewInputs.base.modify;
  *(void *)(v0 + 64) = 0;
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2461C2050;
  *(_OWORD *)(v1 + 32) = xmmword_2461D77A0;
  *(unsigned char *)(v1 + 48) = 0;
  *(_OWORD *)(v0 + 72) = xmmword_2461C55F0;
  *(void *)(v0 + 88) = 0x3FE083126E978D50;
  *(void *)(v0 + 96) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(void *)(v0 + 104) = v1;
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2461D77B0;
  *(_OWORD *)(v2 + 32) = xmmword_2461D77C0;
  *(unsigned char *)(v2 + 48) = 0;
  double result = 1.0;
  *(_OWORD *)(v0 + 112) = xmmword_2461BCA80;
  *(void *)(v0 + 128) = 0x3FE10E5604189375;
  *(void *)(v0 + 136) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(void *)(v0 + 144) = v2;
  *(void *)(v0 + 152) = 0;
  *(void *)(v0 + 160) = 0;
  *(void *)(v0 + 168) = 0x3FF11EB851EB851FLL;
  *(void *)(v0 + 176) = _ViewInputs.base.modify;
  *(void *)(v0 + 184) = 0;
  static ExplodeTextEffect.Target.vibration = v0;
  return result;
}

double one-time initialization function for x()
{
  type metadata accessor for _ContiguousArrayStorage<ExplodeTextEffect.Timeline<Double>.Keyframe>();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2461BE290;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0x3FCDD2F1A9FBE76DLL;
  *(void *)(v0 + 56) = _ViewInputs.base.modify;
  *(void *)(v0 + 64) = 0;
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2461D77D0;
  *(_OWORD *)(v1 + 32) = xmmword_2461C0DD0;
  *(unsigned char *)(v1 + 48) = 0;
  *(_OWORD *)(v0 + 72) = xmmword_2461D77E0;
  *(void *)(v0 + 88) = 0x3FCDD2F1A9FBE76DLL;
  *(void *)(v0 + 96) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(void *)(v0 + 104) = v1;
  *(int64x2_t *)(v0 + 112) = vdupq_n_s64(0xBFA999999999999ALL);
  *(void *)(v0 + 128) = 0x3FD0000000000000;
  *(void *)(v0 + 136) = _ViewInputs.base.modify;
  *(void *)(v0 + 144) = 0;
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2461D77F0;
  *(_OWORD *)(v2 + 32) = xmmword_2461D7790;
  *(unsigned char *)(v2 + 48) = 0;
  *(_OWORD *)(v0 + 152) = xmmword_2461D7800;
  *(void *)(v0 + 168) = 0x3FF1DB22D0E56042;
  *(void *)(v0 + 176) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(void *)(v0 + 184) = v2;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v0 + 192) = _Q0;
  *(void *)(v0 + 208) = 0x3FD54FDF3B645A1DLL;
  *(void *)(v0 + 216) = _ViewInputs.base.modify;
  *(void *)(v0 + 224) = 0;
  double result = 1.0;
  *(_OWORD *)(v0 + 232) = xmmword_2461BCA80;
  *(void *)(v0 + 248) = 0x3FD883126E978D50;
  *(void *)(v0 + 256) = _ViewInputs.base.modify;
  *(void *)(v0 + 264) = 0;
  static ExplodeTextEffect.Target.CGFloat x = v0;
  return result;
}

double one-time initialization function for y()
{
  type metadata accessor for _ContiguousArrayStorage<ExplodeTextEffect.Timeline<Double>.Keyframe>();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2461D7810;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0x3FCDD2F1A9FBE76DLL;
  *(void *)(v0 + 56) = _ViewInputs.base.modify;
  *(void *)(v0 + 64) = 0;
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2461D7780;
  *(_OWORD *)(v1 + 32) = xmmword_2461D7790;
  *(unsigned char *)(v1 + 48) = 0;
  *(_OWORD *)(v0 + 72) = xmmword_2461D7820;
  *(void *)(v0 + 88) = 0x3FCDD2F1A9FBE76DLL;
  *(void *)(v0 + 96) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(void *)(v0 + 104) = v1;
  *(int64x2_t *)(v0 + 112) = vdupq_n_s64(0xBFB999999999999ALL);
  *(void *)(v0 + 128) = 0x3FD0000000000000;
  *(void *)(v0 + 136) = _ViewInputs.base.modify;
  *(void *)(v0 + 144) = 0;
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2461D77F0;
  *(_OWORD *)(v2 + 32) = xmmword_2461C0DD0;
  *(unsigned char *)(v2 + 48) = 0;
  *(_OWORD *)(v0 + 152) = xmmword_2461D7830;
  *(void *)(v0 + 168) = 0x3FD76C8B43958106;
  *(void *)(v0 + 176) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(void *)(v0 + 184) = v2;
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_2461D77D0;
  *(_OWORD *)(v3 + 32) = xmmword_2461D7840;
  *(unsigned char *)(v3 + 48) = 0;
  *(_OWORD *)(v0 + 192) = xmmword_2461D7850;
  *(void *)(v0 + 208) = 0x3FD21CAC083126E9;
  *(void *)(v0 + 216) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(void *)(v0 + 224) = v3;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2461D7860;
  *(_OWORD *)(v4 + 32) = xmmword_2461D7870;
  *(unsigned char *)(v4 + 48) = 0;
  *(_OWORD *)(v0 + 232) = xmmword_2461D7880;
  *(void *)(v0 + 248) = 0x3FCDD2F1A9FBE76DLL;
  *(void *)(v0 + 256) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(void *)(v0 + 264) = v4;
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2461D77D0;
  *(_OWORD *)(v5 + 32) = xmmword_2461D7840;
  *(unsigned char *)(v5 + 48) = 0;
  *(_OWORD *)(v0 + 272) = xmmword_2461D7890;
  *(void *)(v0 + 288) = 0x3FCDD2F1A9FBE76DLL;
  *(void *)(v0 + 296) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(void *)(v0 + 304) = v5;
  *(void *)(v0 + 312) = 0xBFE3333333333333;
  *(_OWORD *)(v0 + 320) = xmmword_2461D78A0;
  *(void *)(v0 + 336) = _ViewInputs.base.modify;
  *(void *)(v0 + 344) = 0;
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_2461D7780;
  *(_OWORD *)(v6 + 32) = xmmword_2461D7790;
  *(unsigned char *)(v6 + 48) = 0;
  double result = -0.6;
  *(_OWORD *)(v0 + 352) = xmmword_2461D78B0;
  *(void *)(v0 + 368) = 0x3FBDB22D0E560419;
  *(void *)(v0 + 376) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(void *)(v0 + 384) = v6;
  static ExplodeTextEffect.Target.CGFloat y = v0;
  return result;
}

double one-time initialization function for z()
{
  type metadata accessor for _ContiguousArrayStorage<ExplodeTextEffect.Timeline<Double>.Keyframe>();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2461BE290;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0x3FCDD2F1A9FBE76DLL;
  *(void *)(v0 + 56) = _ViewInputs.base.modify;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = 0;
  *(void *)(v0 + 88) = 0x3FCDD2F1A9FBE76DLL;
  *(void *)(v0 + 96) = _ViewInputs.base.modify;
  *(void *)(v0 + 104) = 0;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = 0x3FD0000000000000;
  *(void *)(v0 + 136) = _ViewInputs.base.modify;
  *(void *)(v0 + 144) = 0;
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2461D77F0;
  *(_OWORD *)(v1 + 32) = xmmword_2461D7790;
  *(unsigned char *)(v1 + 48) = 0;
  *(_OWORD *)(v0 + 152) = xmmword_2461C55F0;
  *(void *)(v0 + 168) = 0x3FF1DB22D0E56042;
  *(void *)(v0 + 176) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(void *)(v0 + 184) = v1;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v0 + 192) = _Q0;
  *(void *)(v0 + 208) = 0x3FD54FDF3B645A1DLL;
  *(void *)(v0 + 216) = _ViewInputs.base.modify;
  *(void *)(v0 + 224) = 0;
  double result = 1.0;
  *(_OWORD *)(v0 + 232) = xmmword_2461BCA80;
  *(void *)(v0 + 248) = 0x3FD883126E978D50;
  *(void *)(v0 + 256) = _ViewInputs.base.modify;
  *(void *)(v0 + 264) = 0;
  static ExplodeTextEffect.Target.z = v0;
  return result;
}

unint64_t *specialized static BinaryFloatingPoint<>.random<A>(in:using:)(unint64_t *result, double a2, double a3)
{
  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  unint64_t v4 = *result;
  unint64_t v3 = result[1];
  do
  {
    unint64_t v5 = v3 + 0x5851F42D4C957F2DLL * v4;
    unint64_t v6 = __ROR4__((v5 >> 45) ^ (v5 >> 27), v5 >> 59) | ((unint64_t)(__ROR4__((v4 >> 45) ^ (v4 >> 27), v4 >> 59) & 0x1FFFFF) << 32);
    unint64_t v4 = v3 + 0x5851F42D4C957F2DLL * v5;
  }
  while ((a3 - a2) * ((double)v6 * 1.11022302e-16) + a2 == a3);
  *double result = v4;
  return result;
}

uint64_t protocol witness for static TextEffect.staticUnitProgress.getter in conformance ExplodeTextEffect()
{
  return 0x3FB999999999999ALL;
}

uint64_t protocol witness for static TextEffect.name.getter in conformance ExplodeTextEffect()
{
  return 0x65646F6C707865;
}

uint64_t protocol witness for static Text.Effect.Base.animatorConfiguration(from:) in conformance ExplodeTextEffect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized static ExplodeTextEffect.animatorConfiguration(from:)(a1, (uint64_t)v4);
  return outlined init with take of ExplodeTextEffect.AnimatorConfiguration?((uint64_t)v4, a2);
}

double protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance ExplodeTextEffect@<D0>(uint64_t a1@<X0>, double a2@<X5>, char a3@<W6>, _OWORD *a4@<X8>)
{
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_2(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ExplodeTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect, (uint64_t)&type metadata for ExplodeTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
  MEMORY[0x270FA5388](v8 - 8);
  double v10 = (char *)v15 - v9;
  char v35 = 0;
  char v34 = 1;
  char v33 = 0;
  long long v17 = xmmword_2461D78C0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 2;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  char v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  char v28 = 1;
  uint64_t v29 = MEMORY[0x263F8EE78];
  char v30 = 0;
  long long v31 = xmmword_2461BD450;
  char v32 = 0;
  if (one-time initialization token for defaultSpring != -1) {
    swift_once();
  }
  long long v11 = static ExplodeTextEffect.defaultSpring;
  double v12 = *(double *)&qword_268F73560;
  outlined init with copy of Text.Effect.DrawableContent<ExplodeTextEffect>(a1, (uint64_t)v10);
  specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)((uint64_t)&v17, a2, a3 & 1, (uint64_t)v10, (double *)v15, *(double *)&v11, *((double *)&v11 + 1), v12);
  long long v13 = v15[1];
  *a4 = v15[0];
  a4[1] = v13;
  double result = *(double *)&v16;
  a4[2] = v16;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ExplodeTextEffect(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect();
  unint64_t result = lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  long long v5 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v5;
  _OWORD v10[2] = *(_OWORD *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 48);
  long long v6 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v6;
  uint64_t v13 = *(void *)(a3 + 32);
  long long v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  uint64_t v9[2] = a1[2];
  uint64_t result = closure #1 in ExplodeTextEffect.configuration(_:)((uint64_t)v9, (uint64_t)v10, (uint64_t)v12);
  *a4 = result;
  return result;
}

{
  long long v5;
  long long v6;
  long long v7;
  uint64_t result;
  _OWORD v9[3];
  _OWORD v10[3];
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  long long v5 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v5;
  _OWORD v10[2] = *(_OWORD *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 48);
  long long v6 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v6;
  uint64_t v13 = *(void *)(a3 + 32);
  long long v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  uint64_t v9[2] = a1[2];
  uint64_t result = closure #1 in SomersaultTextEffect.configuration(_:)((uint64_t)v9, (uint64_t)v10, (uint64_t)v12);
  *a4 = result;
  return result;
}

{
  long long v5;
  long long v6;
  long long v7;
  uint64_t result;
  _OWORD v9[3];
  _OWORD v10[3];
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  long long v5 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v5;
  _OWORD v10[2] = *(_OWORD *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 48);
  long long v6 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v6;
  uint64_t v13 = *(void *)(a3 + 32);
  long long v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  uint64_t v9[2] = a1[2];
  uint64_t result = closure #3 in BigTextEffect.configuration(_:)((uint64_t)v9, (uint64_t)v10, (uint64_t)v12);
  *a4 = result;
  return result;
}

void specialized static ExplodeTextEffect.animatorConfiguration(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v28 = 1;
  char v27 = 1;
  if (!*(void *)(a1 + 16)
    || (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F43656372756F73, 0xEB00000000726F6CLL), (v5 & 1) == 0)
    || (outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)v26),
        type metadata accessor for NSObject(),
        (swift_dynamicCast() & 1) == 0))
  {
LABEL_8:
    uint64_t v9 = 0;
    unint64_t v7 = 0;
    if (!*(void *)(a1 + 16)) {
      goto LABEL_14;
    }
    goto LABEL_9;
  }
  id v6 = (id)CGColorForCoreColor(0, v25);
  if (!v6)
  {

    goto LABEL_8;
  }
  unint64_t v7 = specialized Color.Resolved.init(failableCGColor:)(v6);
  uint64_t v9 = v8;
  char v11 = v10;

  unsigned __int8 v28 = v11 & 1;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_14;
  }
LABEL_9:
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F43746567726174, 0xEB00000000726F6CLL);
  if (v13)
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v26);
    type metadata accessor for NSObject();
    if (swift_dynamicCast())
    {
      id v14 = (id)CGColorForCoreColor(0, v25);
      if (v14)
      {
        unint64_t v15 = specialized Color.Resolved.init(failableCGColor:)(v14);
        uint64_t v17 = v16;
        char v19 = v18;

        char v27 = v19 & 1;
        goto LABEL_15;
      }
    }
  }
LABEL_14:
  unint64_t v15 = 0;
  uint64_t v17 = 0;
LABEL_15:
  unint64_t v20 = v28 | (v15 << 32);
  *((void *)&v22 + 1) = v17;
  *(void *)&long long v22 = v15;
  uint64_t v21 = v22 >> 32;
  BOOL v23 = v27 == 0;
  char v24 = 1;
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v9;
  if (v23) {
    char v24 = 0;
  }
  *(void *)(a2 + 16) = v20;
  *(void *)(a2 + 24) = v21;
  *(_DWORD *)(a2 + 32) = HIDWORD(v17);
  *(unsigned char *)(a2 + 36) = v24;
  *(unsigned char *)(a2 + 37) = 0;
}

uint64_t specialized ExplodeTextEffect.configuration(_:)()
{
  uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  if (v2 >= v1 >> 1) {
    uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v1 > 1), v2 + 1, 1, v0);
  }
  v0[2] = v2 + 1;
  unint64_t v3 = &v0[2 * v2];
  v3[4] = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  v3[5] = 0;
  return MEMORY[0x263F8EE78];
}

uint64_t sub_245CE24AC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ExplodeTextEffect.configuration(_:)(unint64_t a1, double *a2)
{
  return closure #1 in closure #1 in ExplodeTextEffect.configuration(_:)(a1, a2, v2 + 16, v2 + 64);
}

uint64_t sub_245CE2520()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 96) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

void specialized ExplodeTextEffect.Target.amplitude(for:at:of:)(uint64_t a1, double a2)
{
  uint64_t v4 = Double.hashValue.getter();
  if (__OFADD__(v4, 123))
  {
    __break(1u);
  }
  else
  {
    v8[0] = v4 + 123;
    v8[1] = 0xDA3E39CB94B95BDBLL;
    specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v8, 0.0, 1.0);
    double v6 = v5 * 0.02 + a2;
    sin(v6 * 3.14159265);
    double v7 = (double)a1 + -1.0;
    sin(v7 * 3.14159265 * 0.5 * v6);
    sin(v7 * 3.14159265 * (v6 + -1.0));
    sin((v7 * 0.75 + -1.0) * 3.14159265 * v6);
    sin(v6 * 6.28318531);
  }
}

void type metadata accessor for _ContiguousArrayStorage<ExplodeTextEffect.Timeline<Double>.Keyframe>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ExplodeTextEffect.Timeline<Double>.Keyframe>)
  {
    type metadata accessor for ExplodeTextEffect.Timeline<Double>.Keyframe();
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ExplodeTextEffect.Timeline<Double>.Keyframe>);
    }
  }
}

void type metadata accessor for ExplodeTextEffect.Timeline<Double>.Keyframe()
{
  if (!lazy cache variable for type metadata for ExplodeTextEffect.Timeline<Double>.Keyframe)
  {
    unint64_t v0 = type metadata accessor for ExplodeTextEffect.Timeline.Keyframe();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ExplodeTextEffect.Timeline<Double>.Keyframe);
    }
  }
}

uint64_t type metadata accessor for ExplodeTextEffect.Timeline.Keyframe()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_245CE278C()
{
  return swift_deallocObject();
}

Swift::Double partial apply for implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)(Swift::Double a1)
{
  return UnitCurve.value(at:)(a1);
}

uint64_t sub_245CE27D8()
{
  return swift_deallocObject();
}

uint64_t sub_245CE27E8()
{
  return swift_deallocObject();
}

uint64_t sub_245CE27F8()
{
  return swift_deallocObject();
}

uint64_t sub_245CE2808()
{
  return swift_deallocObject();
}

uint64_t sub_245CE2818()
{
  return swift_deallocObject();
}

uint64_t sub_245CE2828()
{
  return swift_deallocObject();
}

uint64_t sub_245CE2838()
{
  return swift_deallocObject();
}

uint64_t sub_245CE2848()
{
  return swift_deallocObject();
}

uint64_t sub_245CE2858()
{
  return swift_deallocObject();
}

uint64_t sub_245CE2868()
{
  return swift_deallocObject();
}

uint64_t sub_245CE2878()
{
  return swift_deallocObject();
}

uint64_t sub_245CE2888()
{
  return swift_deallocObject();
}

uint64_t sub_245CE2898()
{
  return swift_deallocObject();
}

uint64_t sub_245CE28A8()
{
  return swift_deallocObject();
}

void _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t outlined init with copy of Text.Effect.DrawableContent<ExplodeTextEffect>(uint64_t a1, uint64_t a2)
{
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_2(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ExplodeTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect, (uint64_t)&type metadata for ExplodeTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ExplodeTextEffect.AnimatorConfiguration?(uint64_t a1, uint64_t a2)
{
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVACE6EffectO8DrawableV8FragmentOGMaTm_0(0, &lazy cache variable for type metadata for ExplodeTextEffect.AnimatorConfiguration?, (uint64_t)&type metadata for ExplodeTextEffect.AnimatorConfiguration, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata completion function for ExplodeTextEffect.Timeline.Keyframe()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ExplodeTextEffect.Timeline.Keyframe(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = v6 + 7;
  unint64_t v10 = ((((v6 + 7 + ((v6 + v7) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v7 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || v10 > 0x18)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  else
  {
    uint64_t v14 = AssociatedTypeWitness;
    uint64_t v15 = ~v7;
    uint64_t v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v16(a1, a2, AssociatedTypeWitness);
    unint64_t v17 = ((unint64_t)a2 + v8) & v15;
    v16((uint64_t *)(((unint64_t)a1 + v8) & v15), (uint64_t *)v17, v14);
    char v18 = (void *)((v9 + (((unint64_t)a1 + v8) & v15)) & 0xFFFFFFFFFFFFFFF8);
    char v19 = (void *)((v9 + v17) & 0xFFFFFFFFFFFFFFF8);
    *char v18 = *v19;
    unint64_t v20 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = v20[1];
    long long v22 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    *long long v22 = *v20;
    v22[1] = v21;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for ExplodeTextEffect.Timeline.Keyframe(unint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(void (**)(unint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = v3 + 8;
  v4(a1, AssociatedTypeWitness);
  v4((*(void *)(v5 + 56) + a1 + *(unsigned __int8 *)(v5 + 72)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 72), AssociatedTypeWitness);

  return swift_release();
}

uint64_t initializeWithCopy for ExplodeTextEffect.Timeline.Keyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 64);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v6(v10, v11, AssociatedTypeWitness);
  unint64_t v12 = (void *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v12 = *v13;
  uint64_t v14 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  unint64_t v17 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v17 = v16;
  v17[1] = v15;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ExplodeTextEffect.Timeline.Keyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = v5 + 24;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 56);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v6(v10, v11, AssociatedTypeWitness);
  unint64_t v12 = (void *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v12 = *v13;
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for ExplodeTextEffect.Timeline.Keyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 48);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v6(v10, v11, AssociatedTypeWitness);
  unint64_t v12 = (void *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v12 = *v13;
  *(_OWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ExplodeTextEffect.Timeline.Keyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 40);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v6(v10, v11, AssociatedTypeWitness);
  unint64_t v12 = (void *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v12 = *v13;
  *(_OWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExplodeTextEffect.Timeline.Keyframe(int *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = v8 + v9;
  uint64_t v11 = v8 + 7;
  if (v7 < a2)
  {
    unint64_t v12 = ((((v11 + (v10 & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v13 = v12 & 0xFFFFFFF8;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = a2 - v7 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v12);
        if (!v17) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v12);
        if (v17) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245CE330CLL);
      case 4:
        int v17 = *(int *)((char *)a1 + v12);
        if (!v17) {
          break;
        }
LABEL_22:
        int v19 = v17 - 1;
        if (v13)
        {
          int v19 = 0;
          int v20 = *a1;
        }
        else
        {
          int v20 = 0;
        }
        return v7 + (v20 | v19) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v22 = *(void *)((((v11 + (((unint64_t)a1 + v10) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v22 >= 0xFFFFFFFF) {
      LODWORD(v22) = -1;
    }
    return (v22 + 1);
  }
  else
  {
    uint64_t v21 = *(uint64_t (**)(int *))(v5 + 48);
    return v21(a1);
  }
}

void storeEnumTagSinglePayload for ExplodeTextEffect.Timeline.Keyframe(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = v8 + v10;
  uint64_t v12 = (v8 + v10) & ~v10;
  uint64_t v13 = v8 + 7;
  size_t v14 = ((((v13 + v12) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v9 >= a3)
  {
    int v17 = 0;
    int v18 = a2 - v9;
    if (a2 <= v9)
    {
LABEL_17:
      switch(v17)
      {
        case 1:
          *((unsigned char *)a1 + v14) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)((char *)a1 + v14) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)((char *)a1 + v14) = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v22 = (void *)((((v13 + (((unint64_t)a1 + v11) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v23 = a2 ^ 0x80000000;
                v22[1] = 0;
              }
              else
              {
                uint64_t v23 = (a2 - 1);
              }
              *unint64_t v22 = v23;
            }
            else
            {
              uint64_t v21 = *(void (**)(_DWORD *, uint64_t))(v6 + 56);
              v21(a1, a2);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((((v13 + v12) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v15 = a3 - v9 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v17 = v16;
    }
    else {
      int v17 = 0;
    }
    int v18 = a2 - v9;
    if (a2 <= v9) {
      goto LABEL_17;
    }
  }
  if (v14) {
    int v19 = 1;
  }
  else {
    int v19 = v18;
  }
  if (v14)
  {
    int v20 = ~v9 + a2;
    bzero(a1, v14);
    *a1 = v20;
  }
  switch(v17)
  {
    case 1:
      *((unsigned char *)a1 + v14) = v19;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v14) = v19;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x245CE3558);
    case 4:
      *(_DWORD *)((char *)a1 + v14) = v19;
      break;
    default:
      return;
  }
}

ValueMetadata *type metadata accessor for ExplodeTextEffect.AnimatorConfiguration()
{
  return &type metadata for ExplodeTextEffect.AnimatorConfiguration;
}

uint64_t type metadata accessor for ExplodeTextEffect.Timeline()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t EnvironmentValues.redactionReasons.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.redactionReasons : EnvironmentValues(uint64_t *a1)
{
  uint64_t v2 = *a1;
  return EnvironmentValues.redactionReasons.setter(&v2);
}

uint64_t View.unredacted()(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  uint64_t v6 = 0;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v6, a1, a2);
  return swift_release();
}

uint64_t RedactionReasons.rawValue.getter()
{
  return *(void *)v0;
}

SwiftUI::RedactionReasons __swiftcall RedactionReasons.init(rawValue:)(SwiftUI::RedactionReasons rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

void static RedactionReasons.privacy.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static RedactionReasons.invalidated.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static RedactionReasons.screencaptureProhibited.getter(void *a1@<X8>)
{
  *a1 = 8;
}

uint64_t EnvironmentValues.unredactSymbolImage.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5 & 1;
  }
}

uint64_t key path getter for EnvironmentValues.unredactSymbolImage : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    char v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  uint64_t result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

uint64_t EnvironmentValues.unredactSymbolImage.setter(char a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.unredactSymbolImage.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.unredactSymbolImage.modify;
}

void EnvironmentValues.unredactSymbolImage.modify(uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  char v2 = *(uint64_t **)(*(void *)a1 + 24);
  char v3 = *(unsigned char *)(*(void *)a1 + 40);
  uint64_t v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

uint64_t EnvironmentValues.shouldRedactSymbolImages.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v2 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    v7[0] = *v0;
    v7[1] = 0;
    swift_retain_n();
    if (specialized static ShouldRedactContentKey.value(in:)(v7))
    {
      uint64_t v4 = swift_retain_n();
      char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
      swift_release_n();
      char v6 = v5 ^ 1;
    }
    else
    {
      swift_release_n();
      char v6 = 0;
    }
    swift_release();
    return v6 & 1;
  }
}

void GraphicsImage.redact(in:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = swift_allocObject();
  if (one-time initialization token for foreground != -1) {
    swift_once();
  }
  v8[0] = v2;
  v8[1] = v3;
  *(float *)(v4 + 16) = (*(float (**)(void *))(*(void *)static Color.foreground + 104))(v8);
  *(_DWORD *)(v4 + 20) = v6;
  *(_DWORD *)(v4 + 24) = v7;
  *(float *)(v4 + 28) = v5 * 0.16;
  outlined consume of GraphicsImage.Contents?(*(void **)v1, *(unsigned char *)(v1 + 8));
  *(void *)uint64_t v1 = v4;
  *(unsigned char *)(v1 + 8) = 4;
}

uint64_t one-time initialization function for redacted()
{
  type metadata accessor for ImageProviderBox<Image.RedactedImageProvider>();
  uint64_t result = swift_allocObject();
  static Image.redacteCGFloat d = result;
  return result;
}

uint64_t static Image.redacted.getter()
{
  if (one-time initialization token for redacted != -1) {
    swift_once();
  }

  return swift_retain();
}

__n128 Image.RedactedImageProvider.resolve(in:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = one-time initialization token for foreground;
  swift_retain();
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v18 = v3;
  uint64_t v19 = v4;
  *(float *)(v5 + 16) = (*(float (**)(uint64_t *))(*(void *)static Color.foreground + 104))(&v18);
  *(_DWORD *)(v5 + 20) = v7;
  *(_DWORD *)(v5 + 24) = v9;
  *(float *)(v5 + 28) = v8 * 0.16;
  swift_release();
  swift_release();
  if (one-time initialization token for resizable != -1) {
    swift_once();
  }
  uint64_t v18 = v5;
  LOBYTE(v19) = 4;
  __asm { FMOV            V0.2D, #1.0 }
  long long v20 = _Q0;
  uint64_t v21 = 0x3FF0000000000000;
  char v22 = 0;
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  char v25 = 1;
  long long v26 = static Image.ResizingInfo.resizable;
  long long v27 = xmmword_268EEEF70;
  char v28 = byte_268EEEF80;
  __int16 v29 = 257;
  char v30 = 3;
  v17[0] = 0uLL;
  v17[1] = xmmword_24619B540;
  unsigned __int8 v16 = 3;
  Image.Resolved.init(image:decorative:label:basePlatformItemImage:backgroundShape:backgroundCornerRadius:)(&v18, 1, v17, 0, &v16, 0.0, 1, a2);
  return result;
}

uint64_t sub_245CE3ED4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  return EnvironmentValues.redactionReasons.setter(&v2);
}

uint64_t sub_245CE3F0C()
{
  return swift_deallocObject();
}

uint64_t sub_245CE3F1C()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type RedactionReasons and conformance RedactionReasons()
{
  unint64_t result = lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons;
  if (!lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons;
  if (!lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons;
  if (!lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons;
  if (!lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons);
  }
  return result;
}

uint64_t sub_245CE4090(char *a1)
{
  return EnvironmentValues.unredactSymbolImage.setter(*a1);
}

uint64_t sub_245CE40B8(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA32_EnvironmentKeyTransformModifierVyAA16RedactionReasonsVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<RedactionReasons>, (uint64_t (*)(void, ValueMetadata *))type metadata accessor for _EnvironmentKeyTransformModifier);
}

uint64_t sub_245CE40E0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA32_EnvironmentKeyTransformModifierVyAA16RedactionReasonsVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RedactionReasons>, (uint64_t (*)(void, ValueMetadata *))type metadata accessor for _EnvironmentKeyWritingModifier);
}

ValueMetadata *type metadata accessor for RedactionReasonsKey()
{
  return &type metadata for RedactionReasonsKey;
}

void type metadata accessor for ImageProviderBox<Image.RedactedImageProvider>()
{
  if (!lazy cache variable for type metadata for ImageProviderBox<Image.RedactedImageProvider>)
  {
    lazy protocol witness table accessor for type Image.RedactedImageProvider and conformance Image.RedactedImageProvider();
    unint64_t v0 = type metadata accessor for ImageProviderBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.RedactedImageProvider>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Image.RedactedImageProvider and conformance Image.RedactedImageProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.RedactedImageProvider and conformance Image.RedactedImageProvider;
  if (!lazy protocol witness table cache variable for type Image.RedactedImageProvider and conformance Image.RedactedImageProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.RedactedImageProvider and conformance Image.RedactedImageProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Image.RedactedImageProvider and conformance Image.RedactedImageProvider;
  if (!lazy protocol witness table cache variable for type Image.RedactedImageProvider and conformance Image.RedactedImageProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &lazy protocol witness table cache variable for type Image.RedactedImageProvider and conformance Image.RedactedImageProvider);
  }
  return result;
}

ValueMetadata *type metadata accessor for ShouldRedactContentKey()
{
  return &type metadata for ShouldRedactContentKey;
}

ValueMetadata *type metadata accessor for UnredactSymbolImage()
{
  return &type metadata for UnredactSymbolImage;
}

ValueMetadata *type metadata accessor for ShouldRedactSymbolImagesKey()
{
  return &type metadata for ShouldRedactSymbolImagesKey;
}

void *type metadata accessor for Image.RedactedImageProvider()
{
  return &unk_26FA7DD80;
}

unint64_t instantiation function for generic protocol witness table for Image.RedactedImageProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Image.RedactedImageProvider and conformance Image.RedactedImageProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

void static SemanticFeature.requirement.getter(unsigned char *a1@<X8>)
{
}

{
  *a1 = 0;
}

void *static SemanticFeature.prior.getter@<X0>(uint64_t a1@<X1>, _DWORD *a2@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(a1 + 16))(&v4);
  if (v4) {
    *a2 = v4 - 1;
  }
  else {
    __break(1u);
  }
  return result;
}

void *static _SemanticFeature_v2.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v2.introduced, a1);
}

void *static _SemanticFeature_v2_1.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v2_1.introduced, a1);
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v2_1@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v2_1.introduced, a1);
}

void *static _SemanticFeature_v2_3.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v2_3.introduced, a1);
}

void *static _SemanticFeature_v3.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v3.introduced, a1);
}

void *static _SemanticFeature_v4.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v4.introduced, a1);
}

void *static _SemanticFeature_v4_4.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v4_4.introduced, a1);
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v4_4@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v4_4.introduced, a1);
}

void *static _SemanticFeature_v5.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v5.introduced, a1);
}

void *static _SemanticFeature_v5_2.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v5_2.introduced, a1);
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v5_2@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v5_2.introduced, a1);
}

void *static _SemanticFeature_v6.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v6.introduced, a1);
}

void *static _SemanticFeature_v6_1.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v6_1.introduced, a1);
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v6_1@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v6_1.introduced, a1);
}

void *static Semantics.DismissPopsInNavigationSplitViewRoots.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static Semantics.DismissPopsInNavigationSplitViewRoots.introduced, a1);
}

void static Semantics.DismissPopsInNavigationSplitViewRoots.requirement.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static DisabledFeature.introduced.getter(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

uint64_t static DisabledFeature.isEnabled.getter()
{
  return 0;
}

void protocol witness for static SemanticFeature.introduced.getter in conformance DisabledFeature(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

void *static EnabledFeature.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static EnabledFeature.introduced, a1);
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v2()
{
  return &protocol witness table for _SemanticFeature_v2;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v2_1()
{
  return &protocol witness table for _SemanticFeature_v2_1;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v2_3()
{
  return &protocol witness table for _SemanticFeature_v2_3;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v3()
{
  return &protocol witness table for _SemanticFeature_v3;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v4()
{
  return &protocol witness table for _SemanticFeature_v4;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v4_4()
{
  return &protocol witness table for _SemanticFeature_v4_4;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v5()
{
  return &protocol witness table for _SemanticFeature_v5;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v5_2()
{
  return &protocol witness table for _SemanticFeature_v5_2;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v6()
{
  return &protocol witness table for _SemanticFeature_v6;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v6_1()
{
  return &protocol witness table for _SemanticFeature_v6_1;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in Semantics.DismissPopsInNavigationSplitViewRoots()
{
  return &protocol witness table for Semantics.DismissPopsInNavigationSplitViewRoots;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in DisabledFeature()
{
  return &protocol witness table for DisabledFeature;
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance EnabledFeature@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static EnabledFeature.introduced, a1);
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in EnabledFeature()
{
  return &protocol witness table for EnabledFeature;
}

uint64_t dispatch thunk of static SemanticFeature.introduced.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static SemanticFeature.requirement.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for _SemanticFeature_v2()
{
  return &type metadata for _SemanticFeature_v2;
}

ValueMetadata *type metadata accessor for _SemanticFeature_v2_1()
{
  return &type metadata for _SemanticFeature_v2_1;
}

ValueMetadata *type metadata accessor for _SemanticFeature_v2_3()
{
  return &type metadata for _SemanticFeature_v2_3;
}

ValueMetadata *type metadata accessor for _SemanticFeature_v5_2()
{
  return &type metadata for _SemanticFeature_v5_2;
}

ValueMetadata *type metadata accessor for _SemanticFeature_v6_1()
{
  return &type metadata for _SemanticFeature_v6_1;
}

ValueMetadata *type metadata accessor for EnabledFeature()
{
  return &type metadata for EnabledFeature;
}

uint64_t static WindowDragGestureIsActiveKey.defaultValue.getter()
{
  return 0;
}

uint64_t static WindowDragGestureIsActiveKey.reduce(value:nextValue:)(unsigned char *a1, uint64_t (*a2)(void))
{
  if (*a1) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = a2();
  }
  *a1 = result & 1;
  return result;
}

char *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance WindowDragGestureIsActiveKey(char *result, void *(*a2)(uint64_t *__return_ptr))
{
  uint64_t v2 = result;
  if (*result)
  {
    char v3 = 1;
  }
  else
  {
    uint64_t result = (char *)a2(&v4);
    char v3 = v4;
  }
  *uint64_t v2 = v3;
  return result;
}

ValueMetadata *type metadata accessor for WindowDragGestureIsActiveKey()
{
  return &type metadata for WindowDragGestureIsActiveKey;
}

void *static ControlSize.allCases.getter()
{
  return &outlined read-only object #0 of static ControlSize.allCases.getter;
}

void ControlSize.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ControlSize.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance ControlSize(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ControlSize;
}

uint64_t (*EnvironmentValues.controlSize.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  EnvironmentValues.controlSize.getter((char *)(a1 + 24));
  return EnvironmentValues.controlSize.modify;
}

uint64_t EnvironmentValues.explicitControlSize.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.explicitControlSize : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t (*EnvironmentValues.explicitControlSize.modify(uint64_t a1))()
{
  uint64_t v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ControlSizeKey>();
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 5;
    }
    *uint64_t v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.controlSize.modify;
}

uint64_t EnvironmentValues.controlSize.modify(uint64_t a1)
{
  unsigned __int8 v2 = *(unsigned char *)(a1 + 24);
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    uint64_t v5 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t View.controlSize(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  View.environment<A>(_:_:)(KeyPath, a1, a2, a3);

  return swift_release();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance ControlSizeKey(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_245CE4C84@<X0>(char *a1@<X8>)
{
  return EnvironmentValues.controlSize.getter(a1);
}

uint64_t sub_245CE4CA8(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.controlSize.setter(&v2);
}

unint64_t lazy protocol witness table accessor for type ControlSize and conformance ControlSize()
{
  unint64_t result = lazy protocol witness table cache variable for type ControlSize and conformance ControlSize;
  if (!lazy protocol witness table cache variable for type ControlSize and conformance ControlSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlSize and conformance ControlSize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ControlSize] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ControlSize] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ControlSize] and conformance [A])
  {
    type metadata accessor for [ControlSize](255, &lazy cache variable for type metadata for [ControlSize], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ControlSize] and conformance [A]);
  }
  return result;
}

uint64_t sub_245CE4DB0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.controlSize.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_245CE4DF4(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.controlSize.setter(&v2);
}

uint64_t sub_245CE4E30(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.controlSize.setter(&v2);
}

uint64_t sub_245CE4E90()
{
  return swift_getWitnessTable();
}

void type metadata accessor for [ControlSize](uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for ControlSize);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

ValueMetadata *type metadata accessor for ControlSizeKey()
{
  return &type metadata for ControlSizeKey;
}

uint64_t static FormatStyle<>.offset(to:allowedFields:maxFieldCount:sign:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a5, a1, v10);
  uint64_t v11 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
  uint64_t v12 = a5 + v11[7];
  uint64_t v13 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v12, a4, v13);
  *(void *)(a5 + v11[8]) = 0;
  swift_bridgeObjectRetain();
  static Locale.autoupdatingCurrent.getter();
  uint64_t result = static Calendar.autoupdatingCurrent.getter();
  *(unsigned char *)(a5 + v11[11]) = 0;
  *(unsigned char *)(a5 + v11[12]) = 0;
  *(unsigned char *)(a5 + v11[13]) = 0;
  *(void *)(a5 + v11[5]) = a2;
  *(void *)(a5 + v11[6]) = a3;
  return result;
}

uint64_t SystemFormatStyle.DateOffset.init(to:allowedFields:maxFieldCount:sign:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
  *(void *)(a5 + v10[8]) = 0;
  static Locale.autoupdatingCurrent.getter();
  static Calendar.autoupdatingCurrent.getter();
  *(unsigned char *)(a5 + v10[11]) = 0;
  *(unsigned char *)(a5 + v10[12]) = 0;
  *(unsigned char *)(a5 + v10[13]) = 0;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(a5, a1, v11);
  *(void *)(a5 + v10[5]) = a2;
  *(void *)(a5 + v10[6]) = a3;
  uint64_t v12 = a5 + v10[7];
  uint64_t v13 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  size_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32);

  return v14(v12, a4, v13);
}

uint64_t type metadata accessor for SystemFormatStyle.DateOffset()
{
  uint64_t result = type metadata singleton initialization cache for SystemFormatStyle.DateOffset;
  if (!type metadata singleton initialization cache for SystemFormatStyle.DateOffset) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SystemFormatStyle.DateOffset.calendar(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of SystemFormatStyle.DateOffset(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v5 = a2 + *(int *)(type metadata accessor for SystemFormatStyle.DateOffset() + 40);
  uint64_t v6 = type metadata accessor for Calendar();
  char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);

  return v7(v5, a1, v6);
}

unint64_t SystemFormatStyle.DateOffset.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x726F68636E61;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x466465776F6C6C61;
      break;
    case 2:
      unint64_t result = 0x646C65694678616DLL;
      break;
    case 3:
      unint64_t result = 1852270963;
      break;
    case 4:
      unint64_t result = 0x69726156657A6973;
      break;
    case 5:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 6:
      unint64_t result = 0x7261646E656C6163;
      break;
    case 7:
      unint64_t result = 0x7246657461647075;
      break;
    case 8:
      unint64_t result = 0x6964496863746177;
      break;
    case 9:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SystemFormatStyle.DateOffset.CodingKeys()
{
  return SystemFormatStyle.DateOffset.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SystemFormatStyle.DateOffset.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SystemFormatStyle.DateOffset.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemFormatStyle.DateOffset.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SystemFormatStyle.DateOffset.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SystemFormatStyle.DateOffset.format(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v184 = a1;
  uint64_t v179 = a2;
  uint64_t v158 = type metadata accessor for DateComponents();
  uint64_t v157 = *(void *)(v158 - 8);
  MEMORY[0x270FA5388](v158);
  long long v156 = (char *)&v156 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = type metadata accessor for Calendar.Component();
  uint64_t v163 = *(void *)(v159 - 8);
  MEMORY[0x270FA5388](v159);
  uint64_t v162 = (uint64_t)&v156 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttributeContainer();
  MEMORY[0x270FA5388](v6 - 8);
  long long v161 = (char *)&v156 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<Date>();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v160 = (uint64_t)&v156 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void (*)(uint64_t))MEMORY[0x263F07408];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07408], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v178 = (uint64_t)&v156 - v12;
  type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v10);
  double v165 = v13;
  MEMORY[0x270FA5388](v13);
  float32x4_t v164 = (char *)&v156 - v14;
  uint64_t v15 = type metadata accessor for Date.ComponentsFormatStyle();
  uint64_t v171 = *(void *)(v15 - 8);
  uint64_t v172 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v168 = (char *)&v156 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WhitespaceRemovingFormatStyle<Duration.UnitsFormatStyle.Attributed, AttributeScopes.FoundationAttributes.MeasurementAttribute>();
  uint64_t v166 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v167 = (char *)&v156 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  CGRect v175 = *(char **)(v19 - 8);
  uint64_t v176 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v174 = (char *)&v156 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  char v173 = (char *)&v156 - v22;
  uint64_t v23 = (void (*)(uint64_t))MEMORY[0x263F07EA0];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x270FA5388](v24 - 8);
  long long v26 = (char *)&v156 - v25;
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), v23);
  uint64_t v28 = v27;
  uint64_t v29 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  CGRect v177 = (char *)&v156 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v180 = (char *)&v156 - v32;
  uint64_t v33 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v182 = v33;
  uint64_t v183 = v34;
  MEMORY[0x270FA5388](v33);
  char v170 = (char *)&v156 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v36);
  Swift::String v169 = (void (*)(uint64_t, char *, uint64_t))((char *)&v156 - v37);
  uint64_t v181 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x270FA5388](v181);
  double v39 = (char *)&v156 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(0);
  MEMORY[0x270FA5388](v40 - 8);
  uint64_t v42 = (char *)&v156 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)();
  uint64_t v44 = v43;
  uint64_t v45 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v47 = (char *)&v156 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!SystemFormatStyle.DateOffset.canUseTimeStyle.getter())
  {
LABEL_4:
    uint64_t v48 = v184;
    SystemFormatStyle.DateOffset.unitsStyle(for:)(v184, (uint64_t)v26);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v26, 1, v28) == 1)
    {
      outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v26, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
      uint64_t v49 = v178;
      SystemFormatStyle.DateOffset.componentsStyle(for:)(v48, v178);
      type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07408]);
      uint64_t v51 = v50;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 48))(v49, 1, v50) == 1)
      {
        outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(v49, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07408], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
        uint64_t v52 = (uint64_t)v169;
        static Date.ComponentsFormatStyle.Field.minute.getter();
        char v53 = SystemFormatStyle.DateOffset.needsSign(for:smallestFieldShown:)(v48, v52);
        (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v52, v182);
        char v54 = static Date.< infix(_:_:)();
        uint64_t v55 = v179;
        uint64_t result = SystemFormatStyle.DateOffset.smallerOneMinuteString.getter(v179);
        if (v53)
        {
          if (v54)
          {
            double v57 = "A negative time value (argument provides the value as localized by\n"
                  "ICU, either in a form like \"1 day, 2 hours\", or \"1:23:45\")";
            uint64_t v58 = v55;
            uint64_t v59 = 3;
            uint64_t v60 = 9603298;
            double v61 = (void *)0xA300000000000000;
          }
          else
          {
            double v57 = "A positive time value (argument provides the value as localized by\n"
                  "ICU, either in a form like \"1 day, 2 hours\", or \"1:23:45\")";
            uint64_t v58 = v55;
            uint64_t v59 = 1;
            uint64_t v60 = 43;
            double v61 = (void *)0xE100000000000000;
          }
          return SystemFormatStyle.DateOffset.addNegativeSign(to:)(v58, v59, v60, v61, (uint64_t)v57);
        }
        return result;
      }
      CGRect v177 = (char *)(v49 + *(int *)(v51 + 48));
      uint64_t v180 = (char *)(v49 + *(int *)(v51 + 64));
      float32x4_t v94 = v165;
      float32x4_t v95 = v164;
      double v96 = &v164[*((int *)v165 + 12)];
      CGRect v175 = &v164[*((int *)v165 + 16)];
      uint64_t v97 = v172;
      float32x4_t v98 = *(void (**)(char *, uint64_t, uint64_t))(v171 + 32);
      v98(v164, v49, v172);
      uint64_t v99 = v183;
      uint64_t v176 = v2;
      unsigned __int32 v100 = *(void (**)(char *, char *, uint64_t))(v183 + 32);
      unsigned __int32 v101 = v96;
      uint64_t v102 = v182;
      v100(v101, v177, v182);
      v100(v175, v180, v102);
      uint64_t v180 = &v95[*((int *)v94 + 12)];
      uint64_t v103 = &v95[*((int *)v94 + 16)];
      unint64_t v104 = v168;
      v98(v168, (uint64_t)v95, v97);
      uint64_t v105 = (uint64_t)v170;
      v100(v170, v103, v102);
      double v106 = *(void (**)(char *, uint64_t))(v99 + 8);
      uint64_t v183 = v99 + 8;
      v106(v180, v102);
      uint64_t v107 = v184;
      char v108 = SystemFormatStyle.DateOffset.needsSign(for:smallestFieldShown:)(v184, v105);
      if (Date.ComponentsFormatStyle.isPositive.getter())
      {
        uint64_t v109 = v160;
        SystemFormatStyle.DateOffset.dateRange(for:)(v107, v160);
        Date.ComponentsFormatStyle.format(_:)();
        _sSny10Foundation4DateVGWOhTm_0(v109, (uint64_t (*)(void))type metadata accessor for Range<Date>);
        AttributeContainer.init()();
        uint64_t v110 = v179;
        AttributedString.init(_:attributes:)();
        if (v108) {
          SystemFormatStyle.DateOffset.addNegativeSign(to:)(v110, 1, 43, (void *)0xE100000000000000, (uint64_t)"A positive time value (argument provides the value as localized by\nICU, either in a form like \"1 day, 2 hours\", or \"1:23:45\")");
        }
        v106(v170, v182);
        return (*(uint64_t (**)(char *, uint64_t))(v171 + 8))(v104, v172);
      }
      uint64_t v116 = v162;
      SystemFormatStyle.DateOffset.component(for:)(v105, v162);
      type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>, MEMORY[0x263F07908], MEMORY[0x263F8E0F8]);
      uint64_t v117 = v163;
      unint64_t v118 = (*(unsigned __int8 *)(v163 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v163 + 80);
      uint64_t v119 = swift_allocObject();
      *(_OWORD *)(v119 + 16) = xmmword_2461B9DC0;
      uint64_t v120 = v159;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v117 + 16))(v119 + v118, v116, v159);
      specialized Set.init(_nonEmptyArrayLiteral:)(v119);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      double v121 = v156;
      Calendar.dateComponents(_:from:to:)();
      swift_bridgeObjectRelease();
      uint64_t v122 = DateComponents.value(for:)();
      char v124 = v123;
      (*(void (**)(char *, uint64_t))(v157 + 8))(v121, v158);
      if (v124)
      {
        uint64_t v155 = v160;
        SystemFormatStyle.DateOffset.dateRange(for:)(v107, v160);
        CGFloat v126 = v168;
        Date.ComponentsFormatStyle.format(_:)();
        _sSny10Foundation4DateVGWOhTm_0(v155, (uint64_t (*)(void))type metadata accessor for Range<Date>);
        AttributeContainer.init()();
        uint64_t v127 = v179;
        AttributedString.init(_:attributes:)();
      }
      else
      {
        uint64_t v125 = v160;
        SystemFormatStyle.DateOffset.dateRange(for:)(v107, v160);
        CGFloat v126 = v168;
        Date.ComponentsFormatStyle.format(_:)();
        _sSny10Foundation4DateVGWOhTm_0(v125, (uint64_t (*)(void))type metadata accessor for Range<Date>);
        AttributeContainer.init()();
        uint64_t v127 = v179;
        AttributedString.init(_:attributes:)();
        if (!v122) {
          goto LABEL_50;
        }
      }
      SystemFormatStyle.DateOffset.removeNegativeSign(from:)(v127);
LABEL_50:
      if (v108) {
        SystemFormatStyle.DateOffset.addNegativeSign(to:)(v127, 3, 9603298, (void *)0xA300000000000000, (uint64_t)"A negative time value (argument provides the value as localized by\nICU, either in a form like \"1 day, 2 hours\", or \"1:23:45\")");
      }
      (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v162, v120);
      v106(v170, v182);
      return (*(uint64_t (**)(char *, uint64_t))(v171 + 8))(v126, v172);
    }
    uint64_t v62 = *(int *)(v28 + 48);
    uint64_t v63 = (uint64_t)v180;
    double v64 = &v180[v62];
    uint64_t v65 = *(int *)(v28 + 64);
    uint64_t v66 = (uint64_t)&v180[v65];
    uint64_t v67 = &v26[v62];
    double v68 = &v26[v65];
    uint64_t v69 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
    float32x4_t v164 = *(char **)(v69 - 8);
    double v70 = (void (*)(uint64_t, char *, uint64_t))*((void *)v164 + 4);
    uint64_t v178 = v69;
    uint64_t v168 = v164 + 32;
    Swift::String v169 = v70;
    ((void (*)(uint64_t, char *))v70)(v63, v26);
    unint64_t v71 = *(void (**)(char *, char *, uint64_t))(v183 + 32);
    double v165 = v64;
    uint64_t v72 = v67;
    uint64_t v73 = v182;
    v71(v64, v72, v182);
    v71((char *)v66, v68, v73);
    int v74 = SystemFormatStyle.DateOffset.needsSign(for:smallestFieldShown:)(v48, v66);
    LODWORD(v170) = static Date.< infix(_:_:)();
    Date.timeIntervalSince(_:)();
    uint64_t v75 = static Duration.seconds(_:)();
    uint64_t v77 = v76;
    static Duration.zero.getter();
    uint64_t v78 = v3;
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v79 = static Duration.zero.getter();
      uint64_t v171 = MEMORY[0x24C524FC0](v79);
      uint64_t v77 = v80;
    }
    else
    {
      uint64_t v171 = v75;
    }
    uint64_t v112 = v175;
    uint64_t v111 = v176;
    double v114 = v173;
    double v113 = v174;
    uint64_t v115 = *(void *)(v78 + v181[8]);
    LODWORD(v172) = v74;
    uint64_t v184 = v77;
    if (v115 > 1)
    {
      static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
    }
    else if (v115 == 1)
    {
      if (*(unsigned char *)(v78 + v181[12])) {
        static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
      }
      else {
        static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter();
      }
    }
    else
    {
      static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
    }
    static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
    char v132 = static Duration.UnitsFormatStyle.UnitWidth.== infix(_:_:)();
    double v133 = (void (*)(char *, uint64_t))*((void *)v112 + 1);
    v133(v113, v111);
    v133(v114, v111);
    if (v132)
    {
      uint64_t v181 = (int *)&v177[*(int *)(v28 + 48)];
      double v134 = v181;
      double v135 = &v177[*(int *)(v28 + 64)];
      CGRect v175 = v135;
      (*((void (**)(void))v164 + 2))();
      uint64_t v137 = v182;
      uint64_t v136 = v183;
      char v138 = *(void (**)(int *, char *, uint64_t))(v183 + 16);
      v138(v134, v165, v182);
      v138((int *)v135, (char *)v66, v137);
      uint64_t v139 = v166;
      uint64_t v140 = (uint64_t)v167;
      uint64_t v141 = &v167[*(int *)(v166 + 76)];
      uint64_t v142 = *MEMORY[0x263F06458];
      uint64_t v143 = type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component();
      uint64_t v144 = *(void *)(v143 - 8);
      uint64_t v176 = v78;
      long long v145 = *(void (**)(char *, uint64_t, uint64_t))(v144 + 104);
      v145(v141, v142, v143);
      CGFloat v146 = *(void (**)(char *, void, uint64_t, uint64_t))(v144 + 56);
      v146(v141, 0, 1, v143);
      uint64_t v147 = v140 + *(int *)(v139 + 80);
      v145((char *)v147, *MEMORY[0x263F06450], v143);
      v146((char *)v147, 0, 1, v143);
      v169(v140, v177, v178);
      long long v148 = *(void (**)(char *, uint64_t))(v136 + 8);
      v148(v175, v137);
      v148((char *)v181, v137);
      v185[0] = v171;
      v185[1] = v184;
      _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, MEMORY[0x263F07EA0]);
      uint64_t v149 = v179;
      dispatch thunk of FormatStyle.format(_:)();
      _sSny10Foundation4DateVGWOhTm_0(v140, (uint64_t (*)(void))type metadata accessor for WhitespaceRemovingFormatStyle<Duration.UnitsFormatStyle.Attributed, AttributeScopes.FoundationAttributes.MeasurementAttribute>);
      if ((v172 & 1) == 0) {
        return outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)((uint64_t)v180);
      }
    }
    else
    {
      uint64_t v149 = v179;
      Duration.UnitsFormatStyle.Attributed.format(_:)();
      if ((v172 & 1) == 0) {
        return outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)((uint64_t)v180);
      }
    }
    if (v170)
    {
      CGFloat v150 = "A negative time value (argument provides the value as localized by\n"
             "ICU, either in a form like \"1 day, 2 hours\", or \"1:23:45\")";
      uint64_t v151 = v149;
      uint64_t v152 = 3;
      uint64_t v153 = 9603298;
      long long v154 = (void *)0xA300000000000000;
    }
    else
    {
      CGFloat v150 = "A positive time value (argument provides the value as localized by\n"
             "ICU, either in a form like \"1 day, 2 hours\", or \"1:23:45\")";
      uint64_t v151 = v149;
      uint64_t v152 = 1;
      uint64_t v153 = 43;
      long long v154 = (void *)0xE100000000000000;
    }
    SystemFormatStyle.DateOffset.addNegativeSign(to:)(v151, v152, v153, v154, (uint64_t)v150);
    return outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)((uint64_t)v180);
  }
  outlined init with copy of SystemFormatStyle.DateOffset(v2, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  v39[v181[11]] = 0;
  SystemFormatStyle.DateOffset.timeStyle(for:)(v184, (uint64_t)v42);
  _sSny10Foundation4DateVGWOhTm_0((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v42, 1, v44) == 1)
  {
    _sSny10Foundation4DateVGWOhTm_0((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?);
    goto LABEL_4;
  }
  uint64_t v81 = *(int *)(v44 + 48);
  uint64_t v82 = (uint64_t)&v47[v81];
  uint64_t v83 = &v42[v81];
  uint64_t v84 = type metadata accessor for Duration.TimeFormatStyle.Attributed();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v84 - 8) + 32))(v47, v42, v84);
  (*(void (**)(uint64_t, char *, uint64_t))(v183 + 32))(v82, v83, v182);
  char v85 = SystemFormatStyle.DateOffset.needsSign(for:smallestFieldShown:)(v184, v82);
  char v86 = static Date.< infix(_:_:)();
  Date.timeIntervalSince(_:)();
  static Duration.seconds(_:)();
  static Duration.zero.getter();
  if (static Duration.< infix(_:_:)())
  {
    uint64_t v87 = static Duration.zero.getter();
    MEMORY[0x24C524FC0](v87);
  }
  uint64_t v88 = v179;
  Duration.TimeFormatStyle.Attributed.format(_:)();
  if (v85)
  {
    if (v86)
    {
      uint64_t v89 = "A negative time value (argument provides the value as localized by\n"
            "ICU, either in a form like \"1 day, 2 hours\", or \"1:23:45\")";
      uint64_t v90 = v88;
      uint64_t v91 = 3;
      uint64_t v92 = 9603298;
      float32x4_t v93 = (void *)0xA300000000000000;
    }
    else
    {
      uint64_t v89 = "A positive time value (argument provides the value as localized by\n"
            "ICU, either in a form like \"1 day, 2 hours\", or \"1:23:45\")";
      uint64_t v90 = v88;
      uint64_t v91 = 1;
      uint64_t v92 = 43;
      float32x4_t v93 = (void *)0xE100000000000000;
    }
    SystemFormatStyle.DateOffset.addNegativeSign(to:)(v90, v91, v92, v93, (uint64_t)v89);
  }
  CGFloat v128 = v181;
  uint64_t v129 = v181[11];
  if (*(unsigned __int8 *)(v3 + v129) >= 2u)
  {
    uint64_t v130 = *(void *)(v3 + v181[5]);
    uint64_t v131 = (uint64_t)v169;
    static Date.ComponentsFormatStyle.Field.second.getter();
    LOBYTE(v130) = specialized Set.contains(_:)(v131, v130);
    (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v131, v182);
    if (v130)
    {
      LOBYTE(v185[0]) = *(unsigned char *)(v3 + v129);
      AttributedString.redact(for:locale:)(v185, v3 + v128[9]);
    }
  }
  return _sSny10Foundation4DateVGWOhTm_0((uint64_t)v47, (uint64_t (*)(void))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field));
}

void type metadata accessor for WhitespaceRemovingFormatStyle<Duration.UnitsFormatStyle.Attributed, AttributeScopes.FoundationAttributes.MeasurementAttribute>()
{
  if (!lazy cache variable for type metadata for WhitespaceRemovingFormatStyle<Duration.UnitsFormatStyle.Attributed, AttributeScopes.FoundationAttributes.MeasurementAttribute>)
  {
    type metadata accessor for Duration.UnitsFormatStyle.Attributed();
    type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute();
    _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, MEMORY[0x263F07EA0]);
    unint64_t v0 = (void (*)(uint64_t))MEMORY[0x263F06498];
    _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute, MEMORY[0x263F06498]);
    _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute, v0);
    uint64_t v1 = (void (*)(uint64_t))MEMORY[0x263F06460];
    _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, MEMORY[0x263F06460]);
    _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, v1);
    unint64_t v2 = type metadata accessor for WhitespaceRemovingFormatStyle();
    if (!v3) {
      atomic_store(v2, (unint64_t *)&lazy cache variable for type metadata for WhitespaceRemovingFormatStyle<Duration.UnitsFormatStyle.Attributed, AttributeScopes.FoundationAttributes.MeasurementAttribute>);
    }
  }
}

void type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    a5(255, a3, a4);
    unint64_t v6 = type metadata accessor for Optional();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for Date.ComponentsFormatStyle.Field();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v5) {
      atomic_store(TupleTypeMetadata3, a2);
    }
  }
}

void type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(uint64_t a1)
{
}

void type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)()
{
  if (!lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field))
  {
    type metadata accessor for Duration.TimeFormatStyle.Attributed();
    type metadata accessor for Date.ComponentsFormatStyle.Field();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field));
    }
  }
}

BOOL SystemFormatStyle.DateOffset.canUseTimeStyle.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v13 - v6;
  char v9 = *(unsigned char *)(v1 + *(int *)(v8 + 52));
  outlined init with copy of SystemFormatStyle.DateOffset(v1, (uint64_t)&v13 - v6, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  if (v9)
  {
    _sSny10Foundation4DateVGWOhTm_0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    outlined init with copy of SystemFormatStyle.DateOffset(v1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  }
  else
  {
    char v10 = v7[*(int *)(v2 + 48)];
    _sSny10Foundation4DateVGWOhTm_0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    outlined init with copy of SystemFormatStyle.DateOffset(v1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    if ((v10 & 1) == 0)
    {
      BOOL v11 = 1;
      goto LABEL_6;
    }
  }
  BOOL v11 = v4[*(int *)(v2 + 44)] < 2u;
LABEL_6:
  _sSny10Foundation4DateVGWOhTm_0((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  return v11;
}

uint64_t SystemFormatStyle.DateOffset.updateFrequency(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = *a1;
  outlined init with copy of SystemFormatStyle.DateOffset(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t result = type metadata accessor for SystemFormatStyle.DateOffset();
  *(unsigned char *)(a2 + *(int *)(result + 44)) = v4;
  return result;
}

uint64_t SystemFormatStyle.DateOffset.timeStyle(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v79 = a1;
  uint64_t v90 = a2;
  uint64_t v3 = type metadata accessor for NumberFormatStyleConfiguration.Grouping();
  uint64_t v87 = *(void *)(v3 - 8);
  uint64_t v88 = v3;
  MEMORY[0x270FA5388](v3);
  char v86 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for Date();
  uint64_t v81 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  uint64_t v80 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x270FA5388](v91);
  uint64_t v82 = (uint64_t)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v77 = *(void *)(v7 - 8);
  uint64_t v78 = v7;
  MEMORY[0x270FA5388](v7);
  char v85 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v84 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v89 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Duration.TimeFormatStyle.Pattern();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Duration.TimeFormatStyle();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v67 - v22;
  MEMORY[0x270FA5388](v24);
  long long v26 = (char *)&v67 - v25;
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v67 - v28;
  SystemFormatStyle.DateOffset.unitsConfigurationAllowsTimeStyle.getter();
  if (v30)
  {
    uint64_t v72 = v26;
    uint64_t v73 = v16;
    int v74 = v13;
    uint64_t v75 = v11;
    double v68 = v29;
    uint64_t v69 = v20;
    uint64_t v70 = v18;
    unint64_t v71 = v23;
    unsigned int v31 = *(unsigned __int8 *)(v2 + *(int *)(v91 + 44));
    uint64_t v76 = v2;
    if (v31 >= 2)
    {
      uint64_t v57 = v89;
      uint64_t v58 = v74;
      uint64_t v49 = v75;
      (*(void (**)(char *, void, uint64_t))(v89 + 104))(v74, *MEMORY[0x263F8E1F8], v75);
      static Duration.TimeFormatStyle.Pattern.hourMinute(padHourToLength:roundSeconds:)();
      uint64_t v51 = v58;
      uint64_t v59 = v57;
      uint64_t v41 = v90;
      uint64_t v42 = v71;
      uint64_t v60 = v72;
      uint64_t v43 = v70;
      uint64_t v44 = v69;
      uint64_t v45 = v68;
LABEL_15:
      (*(void (**)(char *, uint64_t))(v59 + 8))(v51, v49);
      static Locale.autoupdatingCurrent.getter();
      Duration.TimeFormatStyle.init(pattern:locale:)();
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v45, v60, v17);
      type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)();
      uint64_t v63 = v62;
      uint64_t v64 = Duration.TimeFormatStyle.locale(_:)();
      uint64_t v65 = v86;
      MEMORY[0x24C520AC0](v64);
      Duration.TimeFormatStyle.grouping(_:)();
      (*(void (**)(char *, uint64_t))(v87 + 8))(v65, v88);
      uint64_t v66 = *(void (**)(char *, uint64_t))(v43 + 8);
      v66(v44, v17);
      Duration.TimeFormatStyle.attributed.getter();
      v66(v42, v17);
      static Date.ComponentsFormatStyle.Field.second.getter();
      v66(v45, v17);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v41, 0, 1, v63);
    }
    uint64_t v32 = v2;
    uint64_t v33 = *(void *)(v2 + *(int *)(v91 + 20));
    uint64_t v34 = (uint64_t)v85;
    static Date.ComponentsFormatStyle.Style.spellOut.getter();
    LOBYTE(v33) = specialized Set.contains(_:)(v34, v33);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v34, v78);
    uint64_t v35 = v32;
    uint64_t v36 = v82;
    outlined init with copy of SystemFormatStyle.DateOffset(v35, v82, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    uint64_t v38 = v80;
    uint64_t v37 = v81;
    uint64_t v39 = v83;
    (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v80, v79, v83);
    if (v33)
    {
      Date.timeIntervalSince(_:)();
      static Duration.seconds(_:)();
      static Duration.zero.getter();
      char v40 = static Duration.< infix(_:_:)();
      uint64_t v41 = v90;
      uint64_t v42 = v71;
      uint64_t v43 = v70;
      uint64_t v44 = v69;
      uint64_t v45 = v68;
      if (v40)
      {
        uint64_t v46 = static Duration.zero.getter();
        MEMORY[0x24C524FC0](v46);
      }
      char v47 = static Duration.< infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v83);
      _sSny10Foundation4DateVGWOhTm_0(v82, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      uint64_t v48 = v89;
      if ((v47 & 1) == 0)
      {
        uint64_t v50 = v74;
        uint64_t v49 = v75;
        (*(void (**)(char *, void, uint64_t))(v89 + 104))(v74, *MEMORY[0x263F8E1F8], v75);
        static Duration.TimeFormatStyle.Pattern.hourMinuteSecond(padHourToLength:fractionalSecondsLength:roundFractionalSeconds:)();
        uint64_t v51 = v50;
LABEL_14:
        uint64_t v59 = v89;
        uint64_t v60 = v72;
        goto LABEL_15;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
      _sSny10Foundation4DateVGWOhTm_0(v36, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      uint64_t v48 = v89;
      uint64_t v41 = v90;
      uint64_t v42 = v71;
      uint64_t v43 = v70;
      uint64_t v44 = v69;
      uint64_t v45 = v68;
    }
    double v61 = v74;
    uint64_t v49 = v75;
    (*(void (**)(char *, void, uint64_t))(v48 + 104))(v74, *MEMORY[0x263F8E1F8], v75);
    static Duration.TimeFormatStyle.Pattern.minuteSecond(padMinuteToLength:fractionalSecondsLength:roundFractionalSeconds:)();
    uint64_t v51 = v61;
    goto LABEL_14;
  }
  type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)();
  char v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56);
  uint64_t v54 = v52;
  uint64_t v55 = v90;

  return v53(v55, 1, 1, v54);
}

uint64_t SystemFormatStyle.DateOffset.needsSign(for:smallestFieldShown:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v31 = a2;
  uint64_t v37 = a1;
  uint64_t v4 = type metadata accessor for DateComponents();
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v33 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for Calendar.Component();
  uint64_t v32 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v30 - v13;
  uint64_t v15 = type metadata accessor for SystemFormatStyle.DateOffset();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, v3 + *(int *)(v15 + 28), v8);
  static NumberFormatStyleConfiguration.SignDisplayStrategy.never.getter();
  _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy, MEMORY[0x263F06DD8]);
  char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v11, v8);
  if (v16)
  {
    v17(v14, v8);
    char v18 = 0;
  }
  else
  {
    static NumberFormatStyleConfiguration.SignDisplayStrategy.automatic.getter();
    char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17(v11, v8);
    if (v19)
    {
      v17(v14, v8);
      char v18 = static Date.< infix(_:_:)();
    }
    else
    {
      static NumberFormatStyleConfiguration.SignDisplayStrategy.always(includingZero:)();
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      v17(v11, v8);
      if (v20)
      {
        v17(v14, v8);
        char v18 = 1;
      }
      else
      {
        static NumberFormatStyleConfiguration.SignDisplayStrategy.always(includingZero:)();
        char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
        v17(v11, v8);
        v17(v14, v8);
        char v18 = 0;
        if (v21)
        {
          SystemFormatStyle.DateOffset.component(for:)(v31, (uint64_t)v7);
          type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>, MEMORY[0x263F07908], MEMORY[0x263F8E0F8]);
          uint64_t v22 = v32;
          unint64_t v23 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
          uint64_t v24 = swift_allocObject();
          *(_OWORD *)(v24 + 16) = xmmword_2461B9DC0;
          uint64_t v25 = v34;
          (*(void (**)(unint64_t, char *, uint64_t))(v22 + 16))(v24 + v23, v7, v34);
          specialized Set.init(_nonEmptyArrayLiteral:)(v24);
          swift_setDeallocating();
          char v18 = 1;
          swift_arrayDestroy();
          swift_deallocClassInstance();
          long long v26 = v33;
          Calendar.dateComponents(_:from:to:)();
          swift_bridgeObjectRelease();
          uint64_t v27 = DateComponents.value(for:)();
          LOBYTE(v24) = v28;
          (*(void (**)(char *, uint64_t))(v35 + 8))(v26, v36);
          (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v25);
          if ((v24 & 1) == 0) {
            char v18 = v27 != 0;
          }
        }
      }
    }
  }
  return v18 & 1;
}

uint64_t SystemFormatStyle.DateOffset.addNegativeSign(to:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v46 = a5;
  uint64_t v40 = a1;
  uint64_t v7 = type metadata accessor for Locale.Language();
  uint64_t v48 = *(void *)(v7 - 8);
  uint64_t v49 = v7;
  MEMORY[0x270FA5388](v7);
  char v47 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v43 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v44 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for Locale();
  uint64_t v10 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v38 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for String.LocalizationValue();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v13 = type metadata accessor for AttributedString.InterpolationOptions();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  char v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v18 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v41 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v20._uint64_t countAndFlagsBits = a3;
  v20._object = a4;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v20);
  uint64_t v50 = MEMORY[0x263F8EE78];
  _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x263F06730]);
  char v21 = (uint64_t (*)(uint64_t))MEMORY[0x263F06730];
  type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for [AttributedString.InterpolationOptions], MEMORY[0x263F06730], MEMORY[0x263F8D488]);
  lazy protocol witness table accessor for type [AttributedString.InterpolationOptions] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &lazy cache variable for type metadata for [AttributedString.InterpolationOptions], v21);
  uint64_t v22 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
  uint64_t v23 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v22, v23);
  uint64_t v24 = v13;
  uint64_t v25 = v38;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v24);
  v26._uint64_t countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v26);
  String.LocalizationValue.init(stringInterpolation:)();
  uint64_t v27 = type metadata accessor for SystemFormatStyle.DateOffset();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v25, v42 + *(int *)(v27 + 36), v39);
  if (one-time initialization token for systemFormatStyle != -1) {
    swift_once();
  }
  id v28 = objc_msgSend((id)static NSBundle.systemFormatStyle, sel_bundleURL);
  uint64_t v29 = v44;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, void, uint64_t))(v43 + 104))(v29, *MEMORY[0x263F06D20], v45);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  swift_getKeyPath();
  type metadata accessor for AttributeScopes.AccessibilityAttributes();
  _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type AttributeScopes.AccessibilityAttributes and conformance AttributeScopes.AccessibilityAttributes, MEMORY[0x263EFAB78]);
  AttributedString.init<A>(localized:including:)();
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  *(&v37 - 2) = v31;
  swift_getKeyPath();
  uint64_t v32 = v47;
  Locale.language.getter();
  uint64_t v33 = Locale.Language.maximalIdentifier.getter();
  uint64_t v35 = v34;
  (*(void (**)(char *, uint64_t))(v48 + 8))(v32, v49);
  uint64_t v50 = v33;
  uint64_t v51 = v35;
  return AttributedString.subscript.setter();
}

uint64_t SystemFormatStyle.DateOffset.unitsStyle(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v193 = a1;
  uint64_t v169 = a2;
  uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v156 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v163 = (char *)&v146 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v162 = (char *)&v146 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v153 = (char *)&v146 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Duration.UnitsFormatStyle.Unit?(0);
  MEMORY[0x270FA5388](v9 - 8);
  CGRect v177 = (char *)&v146 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v194 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v176 = *(void *)(v194 - 8);
  MEMORY[0x270FA5388](v194);
  uint64_t v186 = (char *)&v146 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v146 - v13;
  uint64_t v15 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  MEMORY[0x270FA5388](v15 - 8);
  long long v154 = (char *)&v146 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v146 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v155 = (char *)&v146 - v21;
  MEMORY[0x270FA5388](v22);
  double v190 = (char *)&v146 - v23;
  uint64_t v161 = type metadata accessor for Duration.UnitsFormatStyle();
  uint64_t v160 = *(void *)(v161 - 8);
  MEMORY[0x270FA5388](v161);
  uint64_t v157 = (char *)&v146 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v158 = (char *)&v146 - v26;
  MEMORY[0x270FA5388](v27);
  uint64_t v159 = (char *)&v146 - v28;
  uint64_t v29 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v146 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = (void (**)(void, void, void, void))type metadata accessor for Calendar.Component();
  uint64_t v179 = (uint64_t)*(v180 - 1);
  MEMORY[0x270FA5388](v180);
  uint64_t v149 = (char *)&v146 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v178 = (void (**)(char *, uint64_t, uint64_t))type metadata accessor for DateComponents();
  uint64_t v148 = (uint64_t)*(v178 - 1);
  MEMORY[0x270FA5388](v178);
  uint64_t v147 = (char *)&v146 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v187 = type metadata accessor for Date();
  CGFloat v192 = *(void (***)(char *, uint64_t, uint64_t))(v187 - 8);
  MEMORY[0x270FA5388](v187);
  CGFloat v189 = (char *)&v146 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v36 = *(void *)(v173 - 8);
  MEMORY[0x270FA5388](v173);
  uint64_t v185 = (char *)&v146 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v38);
  v195 = (char *)&v146 - v39;
  MEMORY[0x270FA5388](v40);
  double v188 = (char *)&v146 - v41;
  uint64_t v42 = type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x270FA5388](v42);
  uint64_t v183 = (uint64_t *)((char *)&v146 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v44);
  uint64_t v46 = (char *)&v146 - v45;
  uint64_t v50 = SystemFormatStyle.DateOffset.applicableFields(for:)(v193);
  uint64_t v51 = *(int *)(v42 + 32);
  uint64_t v52 = *(void *)(v2 + v51);
  uint64_t v170 = v42;
  uint64_t result = *(void *)(v2 + *(int *)(v42 + 24));
  uint64_t v172 = v36;
  if (v52 >= 3)
  {
    uint64_t v54 = result + 2;
    if (__OFADD__(result, 2)) {
      goto LABEL_62;
    }
    BOOL v55 = __OFSUB__(v54, v52);
    uint64_t v56 = v54 - v52;
    if (v55)
    {
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    if (v56 <= 1) {
      uint64_t result = 1;
    }
    else {
      uint64_t result = v56;
    }
    uint64_t v36 = v172;
  }
  uint64_t v182 = v46;
  uint64_t v150 = v51;
  uint64_t v174 = v14;
  uint64_t v151 = v3;
  uint64_t v152 = v32;
  uint64_t v166 = v2;
  uint64_t v164 = v30;
  uint64_t v168 = v29;
  uint64_t v167 = v19;
  uint64_t v57 = specialized Collection.prefix(_:)(result, (uint64_t)v50, v47, v48, v49);
  uint64_t v59 = v58;
  uint64_t v61 = v60;
  uint64_t v63 = v62;
  uint64_t v64 = (uint64_t (*)(uint64_t))MEMORY[0x263F073D0];
  type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, MEMORY[0x263F073D0], MEMORY[0x263F8E0F8]);
  uint64_t v65 = *(void *)(v36 + 72);
  uint64_t v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = xmmword_2461BE2B0;
  static Date.ComponentsFormatStyle.Style.spellOut.getter();
  uint64_t v191 = v65;
  static Date.ComponentsFormatStyle.Field.minute.getter();
  static Date.ComponentsFormatStyle.Field.second.getter();
  v199 = v63;
  uint64_t v200 = v66;
  uint64_t v175 = v57;
  uint64_t v196 = v57;
  uint64_t v197 = v59;
  uint64_t v165 = v59;
  uint64_t v171 = v61;
  uint64_t v198 = v61;
  uint64_t v181 = v63;
  type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for [Date.ComponentsFormatStyle.Field], v64, MEMORY[0x263F8D488]);
  type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for ArraySlice<Date.ComponentsFormatStyle.Field>, v64, MEMORY[0x263F8DAC8]);
  lazy protocol witness table accessor for type [AttributedString.InterpolationOptions] and conformance [A](&lazy protocol witness table cache variable for type [Date.ComponentsFormatStyle.Field] and conformance [A], &lazy cache variable for type metadata for [Date.ComponentsFormatStyle.Field], v64);
  lazy protocol witness table accessor for type ArraySlice<Date.ComponentsFormatStyle.Field> and conformance ArraySlice<A>();
  uint64_t v67 = _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
  LOBYTE(v64) = Collection<>.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if ((v64 & 1) == 0)
  {
    type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v169, 1, 1, v78);
    return swift_unknownObjectRelease();
  }
  uint64_t v68 = v170;
  uint64_t v69 = v166;
  unsigned int v70 = *(unsigned __int8 *)(v166 + *(int *)(v170 + 44));
  unint64_t v71 = v182;
  outlined init with copy of SystemFormatStyle.DateOffset(v166, (uint64_t)v182, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v184 = v67;
  if (v70 < 2)
  {
    _sSny10Foundation4DateVGWOhTm_0((uint64_t)v71, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    uint64_t v72 = v183;
    outlined init with copy of SystemFormatStyle.DateOffset(v69, (uint64_t)v183, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    uint64_t v73 = v192;
    int v74 = v189;
    uint64_t v75 = v187;
    v192[2](v189, v193, v187);
    uint64_t v76 = v172;
    uint64_t v77 = v171;
LABEL_16:
    ((void (*)(char *, uint64_t))v73[1])(v74, v75);
    _sSny10Foundation4DateVGWOhTm_0((uint64_t)v72, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    goto LABEL_17;
  }
  uint64_t v79 = *(void *)&v71[*(int *)(v68 + 20)];
  uint64_t v80 = (uint64_t)v188;
  static Date.ComponentsFormatStyle.Field.second.getter();
  LOBYTE(v79) = specialized Set.contains(_:)(v80, v79);
  uint64_t v76 = v172;
  (*(void (**)(uint64_t, uint64_t))(v172 + 8))(v80, v173);
  _sSny10Foundation4DateVGWOhTm_0((uint64_t)v71, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v72 = v183;
  outlined init with copy of SystemFormatStyle.DateOffset(v69, (uint64_t)v183, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v73 = v192;
  int v74 = v189;
  uint64_t v75 = v187;
  v192[2](v189, v193, v187);
  uint64_t v77 = v171;
  if ((v79 & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v193 = (uint64_t)v72 + *(int *)(v68 + 40);
  type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>, MEMORY[0x263F07908], MEMORY[0x263F8E0F8]);
  uint64_t v81 = v179;
  unint64_t v82 = (*(unsigned __int8 *)(v179 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v179 + 80);
  uint64_t v83 = swift_allocObject();
  *(_OWORD *)(v83 + 16) = xmmword_2461B9DC0;
  uint64_t v84 = *MEMORY[0x263F078C0];
  uint64_t v182 = *(char **)(v81 + 104);
  char v85 = v180;
  ((void (*)(unint64_t, uint64_t))v182)(v83 + v82, v84);
  specialized Set.init(_nonEmptyArrayLiteral:)(v83);
  swift_setDeallocating();
  char v86 = v85;
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v87 = v147;
  Calendar.dateComponents(_:from:to:)();
  uint64_t v69 = v166;
  swift_bridgeObjectRelease();
  uint64_t v88 = v149;
  ((void (*)(char *, uint64_t, void (**)(void, void, void, void)))v182)(v149, v84, v86);
  uint64_t v77 = v171;
  uint64_t v76 = v172;
  uint64_t v193 = DateComponents.value(for:)();
  char v90 = v89;
  (*(void (**)(char *, void (**)(void, void, void, void)))(v81 + 8))(v88, v180);
  (*(void (**)(char *, void (**)(char *, uint64_t, uint64_t)))(v148 + 8))(v87, v178);
  ((void (*)(char *, uint64_t))v192[1])(v189, v75);
  _sSny10Foundation4DateVGWOhTm_0((uint64_t)v72, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  if ((v90 & 1) == 0 && !v193)
  {
    swift_unknownObjectRelease();
    type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v169, 1, 1, v91);
  }
LABEL_17:
  uint64_t v187 = (unint64_t)v181 >> 1;
  if (v77 != (unint64_t)v181 >> 1)
  {
    float32x4_t v95 = (void (**)(char *, uint64_t, uint64_t))(v76 + 16);
    unint64_t v96 = v76 + 56;
    uint64_t v181 = (void (**)(char *, char *, uint64_t))(v76 + 32);
    uint64_t v182 = (char *)(v76 + 48);
    uint64_t v97 = (void (**)(char *, uint64_t))(v76 + 8);
    uint64_t v180 = (void (**)(void, void, void, void))(v176 + 56);
    uint64_t v179 = v176 + 48;
    uint64_t v178 = (void (**)(char *, uint64_t, uint64_t))(v176 + 32);
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v98 = v165 + v77 * v191;
    uint64_t v99 = v77;
    uint64_t v193 = MEMORY[0x263F8EE78];
    uint64_t v183 = (void *)v96;
    uint64_t v149 = (char *)(v96 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000);
    uint64_t v100 = (uint64_t)v177;
    float32x4_t v93 = v190;
    uint64_t v101 = v187;
    uint64_t v94 = v173;
    CGFloat v192 = v95;
    while (1)
    {
      if (v99 >= v101)
      {
        __break(1u);
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      uint64_t v102 = *v95;
      (*v95)(v93, v98, v94);
      CGFloat v189 = (char *)*v183;
      ((void (*)(char *, void, uint64_t, uint64_t))v189)(v93, 0, 1, v94);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v182)(v93, 1, v94) == 1)
      {
        uint64_t v69 = v166;
        goto LABEL_42;
      }
      uint64_t v103 = v94;
      unint64_t v104 = v195;
      (*v181)(v195, v93, v103);
      uint64_t v105 = v185;
      double v106 = v104;
      uint64_t v107 = v188;
      v102(v185, (uint64_t)v106, v103);
      static Date.ComponentsFormatStyle.Style.spellOut.getter();
      char v108 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v109 = *v97;
      (*v97)(v107, v103);
      if (v108)
      {
        v109(v105, v103);
        static Duration.UnitsFormatStyle.Unit.hours.getter();
      }
      else
      {
        static Date.ComponentsFormatStyle.Field.minute.getter();
        char v110 = dispatch thunk of static Equatable.== infix(_:_:)();
        v109(v107, v103);
        if ((v110 & 1) == 0)
        {
          static Date.ComponentsFormatStyle.Field.second.getter();
          char v112 = dispatch thunk of static Equatable.== infix(_:_:)();
          v109(v105, v103);
          v109(v107, v103);
          uint64_t v94 = v103;
          if (v112)
          {
            static Duration.UnitsFormatStyle.Unit.seconds.getter();
            uint64_t v111 = 0;
          }
          else
          {
            uint64_t v111 = 1;
          }
          uint64_t v101 = v187;
          float32x4_t v95 = v192;
          goto LABEL_33;
        }
        v109(v105, v103);
        static Duration.UnitsFormatStyle.Unit.minutes.getter();
      }
      uint64_t v111 = 0;
      uint64_t v101 = v187;
      float32x4_t v95 = v192;
      uint64_t v94 = v103;
LABEL_33:
      uint64_t v113 = v194;
      (*v180)(v100, v111, 1, v194);
      v109(v195, v94);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v179)(v100, 1, v113) == 1)
      {
        uint64_t result = _sSny10Foundation4DateVGWOhTm_0(v100, (uint64_t (*)(void))type metadata accessor for Duration.UnitsFormatStyle.Unit?);
      }
      else
      {
        double v114 = *v178;
        uint64_t v115 = v174;
        (*v178)(v174, v100, v113);
        v114(v186, (uint64_t)v115, v113);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v193 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v193 + 16) + 1, 1, v193);
        }
        float32x4_t v95 = v192;
        unint64_t v117 = *(void *)(v193 + 16);
        unint64_t v116 = *(void *)(v193 + 24);
        if (v117 >= v116 >> 1) {
          uint64_t v193 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v116 > 1, v117 + 1, 1, v193);
        }
        uint64_t v119 = v193;
        uint64_t v118 = v194;
        *(void *)(v193 + 16) = v117 + 1;
        uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v114)(v119+ ((*(unsigned __int8 *)(v176 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80))+ *(void *)(v176 + 72) * v117, v186, v118);
        uint64_t v100 = (uint64_t)v177;
      }
      ++v99;
      float32x4_t v93 = v190;
      v98 += v191;
      if (v101 == v99)
      {
        uint64_t v69 = v166;
        uint64_t v92 = v189;
        goto LABEL_41;
      }
    }
  }
  uint64_t v92 = *(char **)(v76 + 56);
  swift_unknownObjectRetain();
  uint64_t v193 = MEMORY[0x263F8EE78];
  float32x4_t v93 = v190;
  uint64_t v94 = v173;
LABEL_41:
  CGFloat v189 = v92;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v92)(v93, 1, 1, v94);
LABEL_42:
  swift_unknownObjectRelease();
  specialized Set.init<A>(_:)(v193);
  swift_bridgeObjectRelease();
  uint64_t v120 = *(void *)(v69 + v150);
  if (v120 >= 2)
  {
    static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
    uint64_t v121 = v168;
    uint64_t v122 = v164;
    uint64_t v123 = v156;
  }
  else
  {
    uint64_t v121 = v168;
    uint64_t v122 = v164;
    uint64_t v123 = v156;
    if (v120 == 1)
    {
      if (*(unsigned char *)(v69 + *(int *)(v170 + 48))) {
        static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
      }
      else {
        static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter();
      }
    }
    else
    {
      static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
    }
  }
  static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.show(length:)();
  char v124 = v163;
  uint64_t v125 = v151;
  (*(void (**)(char *, void, uint64_t))(v123 + 104))(v163, *MEMORY[0x263F8E1F8], v151);
  static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide(rounded:)();
  (*(void (**)(char *, uint64_t))(v123 + 8))(v124, v125);
  CGFloat v126 = v157;
  Duration.UnitsFormatStyle.init(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)();
  uint64_t v127 = v158;
  Duration.UnitsFormatStyle.locale(_:)();
  uint64_t v128 = v160;
  uint64_t v129 = *(void (**)(char *, uint64_t))(v160 + 8);
  uint64_t v130 = v161;
  v129(v126, v161);
  uint64_t v131 = v159;
  (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v159, v127, v130);
  char v132 = v152;
  Duration.UnitsFormatStyle.attributed.getter();
  v129(v131, v130);
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0]);
  uint64_t v134 = v133;
  uint64_t v135 = v169;
  uint64_t v136 = v169 + *(int *)(v133 + 48);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v122 + 16))(v169, v132, v121);
  uint64_t v137 = v171;
  uint64_t v138 = v187;
  if (v171 == v187)
  {
    uint64_t v139 = v172;
    uint64_t v140 = (uint64_t)v155;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v189)(v155, 1, 1, v173);
    goto LABEL_53;
  }
  uint64_t v140 = (uint64_t)v155;
  uint64_t v139 = v172;
  if (v171 < v187)
  {
    uint64_t v141 = v173;
    (*(void (**)(char *, uint64_t, uint64_t))(v172 + 16))(v155, v165 + v191 * v171, v173);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v189)(v140, 0, 1, v141);
    int v142 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v139 + 48))(v140, 1, v141);
    uint64_t v122 = v164;
    if (v142 != 1)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v139 + 32))(v136, v140, v173);
      uint64_t v143 = v135 + *(int *)(v134 + 64);
LABEL_56:
      if (v138 > v137)
      {
        uint64_t v144 = (uint64_t)v167;
        uint64_t v145 = v173;
        (*(void (**)(char *, uint64_t, uint64_t))(v139 + 16))(v167, v165 + (v138 - 1) * v191, v173);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v189)(v144, 0, 1, v145);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v139 + 48))(v144, 1, v145) != 1)
        {
          (*(void (**)(char *, uint64_t))(v122 + 8))(v132, v168);
          swift_unknownObjectRelease();
          (*(void (**)(uint64_t, char *, uint64_t))(v139 + 32))(v143, v167, v145);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v134 - 8) + 56))(v135, 0, 1, v134);
        }
LABEL_58:
        static Date.ComponentsFormatStyle.Field.second.getter();
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v122 + 8))(v132, v168);
        _sSny10Foundation4DateVGWOhTm_0((uint64_t)v167, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v134 - 8) + 56))(v135, 0, 1, v134);
      }
      goto LABEL_64;
    }
LABEL_53:
    static Date.ComponentsFormatStyle.Field.second.getter();
    uint64_t result = _sSny10Foundation4DateVGWOhTm_0(v140, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    uint64_t v143 = v135 + *(int *)(v134 + 64);
    if (v137 == v138)
    {
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v189)(v167, 1, 1, v173);
      goto LABEL_58;
    }
    goto LABEL_56;
  }
LABEL_65:
  __break(1u);
  return result;
}

uint64_t SystemFormatStyle.DateOffset.componentsStyle(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v100 = a1;
  uint64_t v102 = a2;
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v101 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v91 = (char *)&v74 - v7;
  uint64_t v8 = type metadata accessor for Calendar();
  uint64_t v88 = *(void *)(v8 - 8);
  uint64_t v89 = v8;
  MEMORY[0x270FA5388](v8);
  char v90 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v84 = *(void *)(v10 - 8);
  uint64_t v85 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v87 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date.ComponentsFormatStyle.Style();
  MEMORY[0x270FA5388](v12 - 8);
  char v86 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Date.ComponentsFormatStyle();
  uint64_t v98 = *(void *)(v14 - 8);
  uint64_t v99 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v97 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Calendar.Component();
  uint64_t v82 = *(void *)(v16 - 8);
  uint64_t v83 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v80 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for DateComponents();
  uint64_t v79 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v78 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v93 - 8);
  MEMORY[0x270FA5388](v93);
  uint64_t v94 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v74 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v74 - v29;
  uint64_t v31 = (void *)swift_allocObject();
  *((_OWORD *)v31 + 1) = 0u;
  *((_OWORD *)v31 + 2) = 0u;
  unsigned int v32 = *(unsigned __int8 *)(v3 + v25[11]);
  outlined init with copy of SystemFormatStyle.DateOffset(v3, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v95 = v22;
  uint64_t v96 = v21;
  uint64_t v92 = v31;
  if (v32 < 2)
  {
    _sSny10Foundation4DateVGWOhTm_0((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    outlined init with copy of SystemFormatStyle.DateOffset(v3, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    uint64_t v33 = v93;
    uint64_t v34 = v94;
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v94, v100, v93);
    uint64_t v35 = v3;
LABEL_7:
    (*(void (**)(char *, uint64_t))(v19 + 8))(v34, v33);
    _sSny10Foundation4DateVGWOhTm_0((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    goto LABEL_8;
  }
  uint64_t v36 = *(void *)&v30[v25[5]];
  static Date.ComponentsFormatStyle.Field.second.getter();
  LOBYTE(v36) = specialized Set.contains(_:)((uint64_t)v24, v36);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  _sSny10Foundation4DateVGWOhTm_0((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  outlined init with copy of SystemFormatStyle.DateOffset(v3, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v33 = v93;
  uint64_t v34 = v94;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v94, v100, v93);
  uint64_t v35 = v3;
  if ((v36 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v77 = &v27[v25[10]];
  type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>, MEMORY[0x263F07908], MEMORY[0x263F8E0F8]);
  uint64_t v37 = v82;
  unint64_t v38 = (*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_2461B9DC0;
  unsigned int v76 = *MEMORY[0x263F078C0];
  uint64_t v75 = *(void (**)(unint64_t))(v37 + 104);
  uint64_t v40 = v83;
  v75(v39 + v38);
  specialized Set.init(_nonEmptyArrayLiteral:)(v39);
  swift_setDeallocating();
  uint64_t v74 = v19;
  uint64_t v41 = v40;
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v42 = v78;
  Calendar.dateComponents(_:from:to:)();
  uint64_t v31 = v92;
  swift_bridgeObjectRelease();
  uint64_t v43 = v80;
  ((void (*)(char *, void, uint64_t))v75)(v80, v76, v40);
  uint64_t v44 = DateComponents.value(for:)();
  LOBYTE(v40) = v45;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v43, v41);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v42, v81);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v94, v93);
  _sSny10Foundation4DateVGWOhTm_0((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  if ((v40 & 1) == 0 && !v44)
  {
    type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07408]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v102, 1, 1, v46);
    return swift_release();
  }
LABEL_8:
  uint64_t v47 = *(void *)(v35 + v25[8]);
  if (v47 > 1)
  {
    static Date.ComponentsFormatStyle.Style.narrow.getter();
    uint64_t v48 = v100;
    unint64_t v49 = v97;
    uint64_t v50 = v95;
  }
  else
  {
    uint64_t v48 = v100;
    unint64_t v49 = v97;
    uint64_t v50 = v95;
    if (v47 == 1)
    {
      if (*(unsigned char *)(v35 + v25[12])) {
        static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
      }
      else {
        static Date.ComponentsFormatStyle.Style.abbreviated.getter();
      }
    }
    else
    {
      static Date.ComponentsFormatStyle.Style.wide.getter();
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v87, v35 + v25[9], v85);
  (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v90, v35 + v25[10], v89);
  getter of fieldsToDisplay #1 in SystemFormatStyle.DateOffset.componentsStyle(for:)(v31, v35, v48);
  specialized Set.init<A>(_:)(v51, v52, v53);
  swift_unknownObjectRelease();
  Date.ComponentsFormatStyle.init(style:locale:calendar:fields:)();
  if (static Date.< infix(_:_:)()) {
    Date.ComponentsFormatStyle.isPositive.setter();
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v98 + 16))(v102, v49, v99);
  uint64_t result = getter of fieldsToDisplay #1 in SystemFormatStyle.DateOffset.componentsStyle(for:)(v31, v35, v48);
  if (v56 == v57 >> 1)
  {
    uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56);
    uint64_t v59 = (uint64_t)v91;
    uint64_t v60 = v96;
    v58(v91, 1, 1, v96);
  }
  else
  {
    uint64_t v59 = (uint64_t)v91;
    if (v56 >= (uint64_t)(v57 >> 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    uint64_t v60 = v96;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v91, v55 + *(void *)(v50 + 72) * v56, v96);
    uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56);
    v58((char *)v59, 0, 1, v60);
  }
  swift_unknownObjectRelease();
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07408]);
  uint64_t v62 = v61;
  uint64_t v63 = v102 + *(int *)(v61 + 48);
  uint64_t v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
  if (v64(v59, 1, v60) == 1)
  {
    static Date.ComponentsFormatStyle.Field.second.getter();
    _sSny10Foundation4DateVGWOhTm_0(v59, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v63, v59, v60);
  }
  uint64_t result = getter of fieldsToDisplay #1 in SystemFormatStyle.DateOffset.componentsStyle(for:)(v92, v35, v48);
  int64_t v68 = v67 >> 1;
  if (v66 == v67 >> 1)
  {
    uint64_t v69 = 1;
    uint64_t v70 = v95;
    uint64_t v71 = v96;
LABEL_29:
    uint64_t v72 = (uint64_t)v101;
    v58(v101, v69, 1, v71);
    swift_unknownObjectRelease();
    uint64_t v73 = v102 + *(int *)(v62 + 64);
    if (v64(v72, 1, v71) == 1)
    {
      static Date.ComponentsFormatStyle.Field.second.getter();
      (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v99);
      _sSny10Foundation4DateVGWOhTm_0((uint64_t)v101, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v99);
      (*(void (**)(uint64_t, char *, uint64_t))(v70 + 32))(v73, v101, v71);
    }
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v102, 0, 1, v62);
    return swift_release();
  }
  uint64_t v71 = v96;
  if (v68 > v66)
  {
    uint64_t v70 = v95;
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v101, v65 + *(void *)(v95 + 72) * (v68 - 1), v96);
    uint64_t v69 = 0;
    goto LABEL_29;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t SystemFormatStyle.DateOffset.dateRange(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v50 = a2;
  type metadata accessor for (lower: AttributedString.Index, upper: AttributedString.Index)(0, (unint64_t *)&lazy cache variable for type metadata for (lower: Date, upper: Date), MEMORY[0x263F07490]);
  uint64_t v51 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v46 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v48 = (char *)&v42 - v8;
  type metadata accessor for Range<Date>();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v9);
  unint64_t v49 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void **)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1;
  LOBYTE(a1) = static Date.< infix(_:_:)();
  uint64_t v17 = (void (*)(char *, uint64_t, uint64_t))v13[2];
  v17(v15, v3, v12);
  lazy protocol witness table accessor for type Date and conformance Date();
  uint64_t v47 = v10;
  if (a1)
  {
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v19 = *(int *)(v51 + 48);
      uint64_t v20 = v46;
      uint64_t v21 = v13;
      char v45 = v13;
      uint64_t v22 = v51;
      uint64_t v23 = v48;
      uint64_t v24 = &v48[v19];
      uint64_t v44 = &v48[v19];
      v17(v48, v16, v12);
      uint64_t v25 = (void (*)(char *, char *, uint64_t))v21[4];
      v25(v24, v15, v12);
      uint64_t v26 = &v20[*(int *)(v22 + 48)];
      v17(v20, (uint64_t)v23, v12);
      uint64_t v27 = v44;
      v17(v26, (uint64_t)v44, v12);
      uint64_t v28 = (uint64_t)v49;
      v25(v49, v20, v12);
      uint64_t v29 = (void (*)(char *, uint64_t))v45[1];
      v29(v26, v12);
      uint64_t v30 = &v20[*(int *)(v51 + 48)];
      v25(v20, v23, v12);
      v25(v30, v27, v12);
      v25((char *)(v28 + *(int *)(v47 + 36)), v30, v12);
      v29(v20, v12);
      return _s10Foundation4DateVSgWObTm_0(v28, v50, (uint64_t (*)(void))type metadata accessor for Range<Date>);
    }
    __break(1u);
  }
  else
  {
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v31 = v51;
      uint64_t v32 = *(int *)(v51 + 48);
      uint64_t v33 = v48;
      uint64_t v43 = v16;
      uint64_t v34 = &v48[v32];
      uint64_t v35 = (void (*)(char *, char *, uint64_t))v13[4];
      v35(v48, v15, v12);
      uint64_t v36 = v34;
      uint64_t v44 = v34;
      v17(v34, v43, v12);
      uint64_t v37 = *(int *)(v31 + 48);
      unint64_t v38 = v46;
      uint64_t v39 = &v46[v37];
      v17(v46, (uint64_t)v33, v12);
      v17(v39, (uint64_t)v36, v12);
      uint64_t v28 = (uint64_t)v49;
      v35(v49, v38, v12);
      uint64_t v40 = (void (*)(char *, uint64_t))v13[1];
      v40(v39, v12);
      uint64_t v41 = &v38[*(int *)(v51 + 48)];
      v35(v38, v33, v12);
      v35(v41, v44, v12);
      v35((char *)(v28 + *(int *)(v47 + 36)), v41, v12);
      v40(v38, v12);
      return _s10Foundation4DateVSgWObTm_0(v28, v50, (uint64_t (*)(void))type metadata accessor for Range<Date>);
    }
  }
  __break(1u);
  return result;
}

uint64_t SystemFormatStyle.DateOffset.component(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v28 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)v28 - v13, a1, v7, v12);
  static Date.ComponentsFormatStyle.Style.wide.getter();
  _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  if (v15)
  {
    v16(v14, v7);
    uint64_t v17 = (unsigned int *)MEMORY[0x263F078A0];
LABEL_15:
    uint64_t v24 = *v17;
    uint64_t v25 = type metadata accessor for Calendar.Component();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104))(a2, v24, v25);
  }
  static Date.ComponentsFormatStyle.Style.narrow.getter();
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  v16(v10, v7);
  if (v18)
  {
    v16(v14, v7);
    uint64_t v17 = (unsigned int *)MEMORY[0x263F078A8];
    goto LABEL_15;
  }
  static Date.ComponentsFormatStyle.Style.abbreviated.getter();
  char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  v16(v10, v7);
  if (v19)
  {
    v16(v14, v7);
    uint64_t v17 = (unsigned int *)MEMORY[0x263F07848];
    goto LABEL_15;
  }
  static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
  char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  v16(v10, v7);
  if (v20)
  {
    v16(v14, v7);
    uint64_t v17 = (unsigned int *)MEMORY[0x263F07870];
    goto LABEL_15;
  }
  static Date.ComponentsFormatStyle.Style.spellOut.getter();
  char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  v16(v10, v7);
  if (v21)
  {
    v16(v14, v7);
    uint64_t v17 = (unsigned int *)MEMORY[0x263F07890];
    goto LABEL_15;
  }
  static Date.ComponentsFormatStyle.Field.minute.getter();
  char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  v16(v10, v7);
  if (v22)
  {
    v16(v14, v7);
    uint64_t v17 = (unsigned int *)MEMORY[0x263F078C0];
    goto LABEL_15;
  }
  static Date.ComponentsFormatStyle.Field.second.getter();
  char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
  v16(v10, v7);
  if (v23)
  {
    v16(v14, v7);
    uint64_t v17 = (unsigned int *)MEMORY[0x263F078C8];
    goto LABEL_15;
  }
  outlined init with copy of SystemFormatStyle.DateOffset(v28[1], (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  _OWORD v28[2] = 0;
  v28[3] = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  v27._object = (void *)0x800000024621F5F0;
  v27._uint64_t countAndFlagsBits = 0xD000000000000029;
  String.append(_:)(v27);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SystemFormatStyle.DateOffset.removeNegativeSign(from:)(uint64_t a1)
{
  type metadata accessor for (lower: AttributedString.Index, upper: AttributedString.Index)(0, (unint64_t *)&lazy cache variable for type metadata for (lower: AttributedString.Index, upper: AttributedString.Index), MEMORY[0x263F067E8]);
  uint64_t v75 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v74 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v73 = (char *)&v66 - v5;
  type metadata accessor for ClosedRange<AttributedString.Index>(0);
  uint64_t v72 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v71 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v70 = (uint64_t)&v66 - v9;
  type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for AttributedString.Index?, MEMORY[0x263F067E8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  double v12 = (char *)&v66 - v11;
  uint64_t v13 = type metadata accessor for AttributedString.Index();
  uint64_t v87 = *(char **)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  char v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v89 = (char *)&v66 - v17;
  type metadata accessor for DefaultIndices<AttributedString.CharacterView>(0);
  uint64_t v19 = v18 - 8;
  MEMORY[0x270FA5388](v18);
  char v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v86 = *(void *)(v22 - 8);
  uint64_t v23 = v86;
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>(0, &lazy cache variable for type metadata for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>, MEMORY[0x263F8DF80]);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v88 = (char *)&v66 - v27;
  type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator(0);
  uint64_t v85 = (char *)(v28 - 8);
  MEMORY[0x270FA5388](v28 - 8);
  uint64_t v84 = (char **)((char *)&v66 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v66 - v31;
  uint64_t v90 = a1;
  AttributedString.characters.getter();
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v21, v25, v22);
  uint64_t v83 = v19;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v80 = *(void (**)(char *, uint64_t))(v86 + 8);
  uint64_t v81 = v25;
  uint64_t v92 = v22;
  v86 += 8;
  v80(v25, v22);
  uint64_t v33 = v88;
  _s10Foundation4DateVSgWObTm_0((uint64_t)v21, (uint64_t)v88, (uint64_t (*)(void))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  uint64_t v34 = v84;
  outlined init with copy of SystemFormatStyle.DateOffset((uint64_t)v33, (uint64_t)v84, (uint64_t (*)(void))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  uint64_t v35 = v83;
  uint64_t v36 = &v33[*(int *)(v83 + 48)];
  uint64_t v37 = v87;
  unint64_t v38 = v87 + 16;
  uint64_t v39 = v89;
  uint64_t v91 = (void (*)(char *, char *, uint64_t))*((void *)v87 + 2);
  v91(v89, v36, v13);
  uint64_t v40 = (uint64_t)v33;
  uint64_t v41 = v37;
  _sSny10Foundation4DateVGWOhTm_0(v40, (uint64_t (*)(void))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  uint64_t v42 = (uint64_t)v85;
  uint64_t v43 = (char *)v34 + *((int *)v85 + 11);
  uint64_t v88 = (char *)*((void *)v41 + 4);
  uint64_t v89 = v41 + 32;
  ((void (*)(char *, char *, uint64_t))v88)(v43, v39, v13);
  _s10Foundation4DateVSgWObTm_0((uint64_t)v34, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
  uint64_t v44 = &v32[*(int *)(v42 + 44)];
  uint64_t v45 = *(int *)(v35 + 44);
  uint64_t v85 = v32;
  uint64_t v46 = &v32[v45];
  uint64_t v78 = _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x263F067E8]);
  uint64_t v79 = v46;
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v83 = lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
    uint64_t v84 = v41 + 56;
    uint64_t v82 = (unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    uint64_t v77 = (void (**)(char *, uint64_t))(v41 + 8);
    uint64_t v69 = v12;
    int64_t v68 = v38;
    unint64_t v67 = v15;
    uint64_t v66 = v44;
    uint64_t v48 = v73;
    uint64_t v47 = v74;
    while (1)
    {
      dispatch thunk of BidirectionalCollection.formIndex(before:)();
      v91(v12, v44, v13);
      unint64_t v49 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*v84;
      ((void (*)(char *, void, uint64_t, uint64_t))*v84)(v12, 0, 1, v13);
      if ((*v82)(v12, 1, v13) == 1) {
        return _sSny10Foundation4DateVGWOhTm_0((uint64_t)v85, (uint64_t (*)(void))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
      }
      unsigned int v76 = v49;
      ((void (*)(char *, char *, uint64_t))v88)(v15, v12, v13);
      uint64_t v41 = v81;
      AttributedString.characters.getter();
      uint64_t v50 = AttributedString.CharacterView.subscript.getter();
      uint64_t v52 = v51;
      v80(v41, v92);
      if (v50 == 45 && v52 == 0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v50 == 9603298 && v52 == 0xA300000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v53 & 1) == 0)
        {
          (*v77)(v15, v13);
          goto LABEL_4;
        }
      }
      lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index();
      if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0)
      {
        __break(1u);
        break;
      }
      uint64_t v54 = v75;
      uint64_t v55 = &v48[*(int *)(v75 + 48)];
      uint64_t v56 = v91;
      v91(v48, v15, v13);
      uint64_t v87 = v55;
      v56(v55, v15, v13);
      unint64_t v57 = &v47[*(int *)(v54 + 48)];
      v56(v47, v48, v13);
      v56(v57, v55, v13);
      uint64_t v58 = v71;
      uint64_t v59 = v88;
      ((void (*)(char *, char *, uint64_t))v88)(v71, v47, v13);
      uint64_t v60 = *v77;
      (*v77)(v57, v13);
      uint64_t v61 = &v47[*(int *)(v54 + 48)];
      ((void (*)(char *, char *, uint64_t))v59)(v47, v48, v13);
      ((void (*)(char *, char *, uint64_t))v59)(v61, v87, v13);
      ((void (*)(char *, char *, uint64_t))v59)(&v58[*(int *)(v72 + 36)], v61, v13);
      uint64_t v44 = v66;
      v60(v47, v13);
      uint64_t v62 = (uint64_t)v58;
      uint64_t v63 = v70;
      _s10Foundation4DateVSgWObTm_0(v62, v70, (uint64_t (*)(void))type metadata accessor for ClosedRange<AttributedString.Index>);
      _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type ClosedRange<AttributedString.Index> and conformance ClosedRange<A>, type metadata accessor for ClosedRange<AttributedString.Index>);
      double v12 = v69;
      AttributedString.removeSubrange<A>(_:)();
      uint64_t v64 = v63;
      char v15 = v67;
      _sSny10Foundation4DateVGWOhTm_0(v64, (uint64_t (*)(void))type metadata accessor for ClosedRange<AttributedString.Index>);
      v60(v15, v13);
LABEL_4:
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        v76(v12, 1, 1, v13);
        return _sSny10Foundation4DateVGWOhTm_0((uint64_t)v85, (uint64_t (*)(void))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
      }
    }
  }
  (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v41 + 7))(v12, 1, 1, v13);
  return _sSny10Foundation4DateVGWOhTm_0((uint64_t)v85, (uint64_t (*)(void))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
}

uint64_t SystemFormatStyle.DateOffset.smallerOneMinuteString.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v71 = a1;
  type metadata accessor for WhitespaceRemovingFormatStyle<Duration.UnitsFormatStyle.Attributed, AttributeScopes.FoundationAttributes.MeasurementAttribute>();
  uint64_t v63 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v64 = (char *)&v63 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for AttributedString();
  uint64_t v69 = *(void *)(v3 - 8);
  uint64_t v70 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v73 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  uint64_t v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  MEMORY[0x270FA5388](v8 - 8);
  unsigned int v76 = (uint64_t (*)(char *, uint64_t))((char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v79 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  uint64_t v68 = *(void *)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  uint64_t v72 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  unint64_t v67 = (char *)&v63 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v66 = (char *)&v63 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v82 = (char *)&v63 - v17;
  uint64_t v18 = type metadata accessor for Duration.UnitsFormatStyle();
  uint64_t v74 = *(void *)(v18 - 8);
  uint64_t v75 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  uint64_t v77 = *(void *)(v21 - 8);
  uint64_t v78 = v21;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v80 = (char *)&v63 - v25;
  type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>, MEMORY[0x263F07EC8], MEMORY[0x263F8E0F8]);
  type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_2461B9DC0;
  static Duration.UnitsFormatStyle.Unit.minutes.getter();
  specialized Set.init(_nonEmptyArrayLiteral:)(v26);
  swift_setDeallocating();
  uint64_t v27 = v83;
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v81 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
  uint64_t v84 = v81[8];
  uint64_t v28 = *(void *)(v27 + v84);
  if (v28 > 1)
  {
    uint64_t v29 = v5;
    static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
    goto LABEL_7;
  }
  uint64_t v29 = v5;
  if (v28 != 1)
  {
    static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
LABEL_7:
    uint64_t v30 = v78;
    uint64_t v31 = v65;
    goto LABEL_8;
  }
  uint64_t v30 = v78;
  uint64_t v31 = v65;
  if (*(unsigned char *)(v27 + v81[12])) {
    static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
  }
  else {
    static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter();
  }
LABEL_8:
  static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.show(length:)();
  (*(void (**)(char *, void, uint64_t))(v29 + 104))(v7, *MEMORY[0x263F8E1F8], v31);
  static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide(rounded:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v31);
  Duration.UnitsFormatStyle.init(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)();
  Duration.UnitsFormatStyle.attributed.getter();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v20, v75);
  uint64_t v32 = v80;
  uint64_t v33 = v27 + v81[9];
  Duration.UnitsFormatStyle.Attributed.locale(_:)();
  uint64_t v34 = v77;
  uint64_t v35 = (char *)(v77 + 8);
  uint64_t v36 = *(void (**)(char *, uint64_t))(v77 + 8);
  v36(v23, v30);
  uint64_t v37 = *(void *)(v27 + v84);
  uint64_t v38 = v30;
  uint64_t v82 = v35;
  uint64_t v75 = v33;
  unsigned int v76 = (uint64_t (*)(char *, uint64_t))v36;
  if (v37 >= 2)
  {
    uint64_t v42 = v66;
    static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
  }
  else
  {
    if (v37 == 1)
    {
      uint64_t v39 = v79;
      uint64_t v40 = v67;
      uint64_t v41 = v68;
      uint64_t v42 = v66;
      if (*(unsigned char *)(v27 + v81[12])) {
        static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
      }
      else {
        static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter();
      }
      goto LABEL_15;
    }
    uint64_t v42 = v66;
    static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
  }
  uint64_t v39 = v79;
  uint64_t v40 = v67;
  uint64_t v41 = v68;
LABEL_15:
  static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
  char v43 = static Duration.UnitsFormatStyle.UnitWidth.== infix(_:_:)();
  uint64_t v44 = *(void (**)(char *, uint64_t))(v41 + 8);
  v44(v40, v39);
  v44(v42, v39);
  if (v43)
  {
    uint64_t v45 = v64;
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v64, v32, v38);
    uint64_t v46 = v63;
    uint64_t v47 = &v45[*(int *)(v63 + 76)];
    uint64_t v48 = *MEMORY[0x263F06458];
    uint64_t v49 = type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component();
    uint64_t v50 = *(void *)(v49 - 8);
    uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 104);
    v51(v47, v48, v49);
    uint64_t v52 = *(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56);
    v52(v47, 0, 1, v49);
    uint64_t v53 = *(int *)(v46 + 80);
    uint64_t v38 = v78;
    uint64_t v54 = &v45[v53];
    v51(&v45[v53], *MEMORY[0x263F06450], v49);
    uint64_t v32 = v80;
    v52(v54, 0, 1, v49);
    long long v85 = xmmword_2461D8700;
    _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, MEMORY[0x263F07EA0]);
    uint64_t v55 = (uint64_t)v73;
    dispatch thunk of FormatStyle.format(_:)();
    uint64_t v56 = (uint64_t)v45;
    uint64_t v39 = v79;
    _sSny10Foundation4DateVGWOhTm_0(v56, (uint64_t (*)(void))type metadata accessor for WhitespaceRemovingFormatStyle<Duration.UnitsFormatStyle.Attributed, AttributeScopes.FoundationAttributes.MeasurementAttribute>);
  }
  else
  {
    uint64_t v55 = (uint64_t)v73;
    Duration.UnitsFormatStyle.Attributed.format(_:)();
  }
  uint64_t v57 = (uint64_t)v72;
  uint64_t v58 = *(void *)(v83 + v84);
  if (v58 > 1)
  {
    static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
    goto LABEL_24;
  }
  if (v58 != 1)
  {
    static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
LABEL_24:
    uint64_t v60 = v70;
    uint64_t v59 = v71;
    uint64_t v61 = v69;
    goto LABEL_25;
  }
  uint64_t v60 = v70;
  uint64_t v59 = v71;
  uint64_t v61 = v69;
  if (*(unsigned char *)(v83 + v81[12])) {
    static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
  }
  else {
    static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter();
  }
LABEL_25:
  static SystemFormatStyle.lessThanOneMinuteString(_:locale:width:)(v55, v75, v57, v59);
  v44((char *)v57, v39);
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v55, v60);
  return v76(v32, v38);
}

uint64_t SystemFormatStyle.DateOffset.locale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of SystemFormatStyle.DateOffset(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v5 = a2 + *(int *)(type metadata accessor for SystemFormatStyle.DateOffset() + 36);
  uint64_t v6 = type metadata accessor for Locale();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);

  return v7(v5, a1, v6);
}

void SystemFormatStyle.DateOffset.hash(into:)(long long *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for Date();
  _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v4 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
  uint64_t v5 = *(void *)(v1 + v4[5]);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v5);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v2 + v4[6]));
  type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy, MEMORY[0x263F06DD8]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(v2 + v4[8]));
  type metadata accessor for Locale();
  _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Calendar();
  _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + v4[11]));
  Hasher._combine(_:)(*(unsigned char *)(v2 + v4[12]));
  Hasher._combine(_:)(*(unsigned char *)(v2 + v4[13]));
}

void specialized static Set.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (char *)&v34 - v9;
  v11.n128_f64[0] = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v34 - v12;
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  int64_t v14 = 0;
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v36 = a1;
  uint64_t v37 = a1 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  int64_t v38 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v42 = v5 + 32;
  uint64_t v43 = a2 + 56;
  uint64_t v44 = v5 + 16;
  uint64_t v19 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v34 = v13;
  uint64_t v35 = v5;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v40 = (v18 - 1) & v18;
  int64_t v41 = v14;
  for (unint64_t i = __clz(__rbit64(v18)) | (v14 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    uint64_t v25 = *(void *)(v5 + 72);
    uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16);
    v26(v13, *(void *)(a1 + 48) + v25 * i, v4, v11);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v45, v13, v4);
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field();
    uint64_t v27 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v28 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v29 = v27 & ~v28;
    if (((*(void *)(v43 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
    {
      (*v19)(v45, v4);
      return;
    }
    uint64_t v39 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v30 = a2;
    uint64_t v31 = ~v28;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v26)(v7, *(void *)(v30 + 48) + v29 * v25, v4);
      _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
      char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v33 = *v19;
      (*v19)(v7, v4);
      if (v32) {
        break;
      }
      unint64_t v29 = (v29 + 1) & v31;
      if (((*(void *)(v43 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
      {
        v33(v45, v4);
        return;
      }
    }
    v33(v45, v4);
    a2 = v30;
    uint64_t v5 = v35;
    a1 = v36;
    uint64_t v13 = v34;
    unint64_t v18 = v40;
    int64_t v14 = v41;
    if (v40) {
      goto LABEL_7;
    }
LABEL_9:
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v21 >= v38) {
      return;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v21);
    int64_t v23 = v14 + 1;
    if (!v22)
    {
      int64_t v23 = v14 + 2;
      if (v14 + 2 >= v38) {
        return;
      }
      unint64_t v22 = *(void *)(v37 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v14 + 3;
        if (v14 + 3 >= v38) {
          return;
        }
        unint64_t v22 = *(void *)(v37 + 8 * v23);
        if (!v22)
        {
          int64_t v23 = v14 + 4;
          if (v14 + 4 >= v38) {
            return;
          }
          unint64_t v22 = *(void *)(v37 + 8 * v23);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v40 = (v22 - 1) & v22;
    int64_t v41 = v23;
  }
  uint64_t v24 = v14 + 5;
  if (v14 + 5 >= v38) {
    return;
  }
  unint64_t v22 = *(void *)(v37 + 8 * v24);
  if (v22)
  {
    int64_t v23 = v14 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v38) {
      return;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_24;
    }
  }
LABEL_34:
  __break(1u);
}

uint64_t SystemFormatStyle.DateOffset.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.DateOffset.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SystemFormatStyle.DateOffset.CodingKeys>, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for Date();
  _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
    uint64_t v13 = *(void *)(v3 + v10[5]);
    HIBYTE(v12) = 1;
    type metadata accessor for Set<Date.ComponentsFormatStyle.Field>(0);
    lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>, type metadata accessor for Set<Date.ComponentsFormatStyle.Field>, (void (*)(void))lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 3;
    type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
    _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy, MEMORY[0x263F06DD8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v13 = *(void *)(v3 + v10[8]);
    HIBYTE(v12) = 4;
    lazy protocol witness table accessor for type TextSizeVariant and conformance TextSizeVariant();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 5;
    type metadata accessor for Locale();
    _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 6;
    type metadata accessor for Calendar();
    _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = *(unsigned char *)(v3 + v10[11]);
    HIBYTE(v12) = 7;
    lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int SystemFormatStyle.DateOffset.hashValue.getter()
{
  Hasher.init(_seed:)();
  SystemFormatStyle.DateOffset.hash(into:)(v1);
  return Hasher._finalize()();
}

uint64_t SystemFormatStyle.DateOffset.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = a2;
  uint64_t v3 = type metadata accessor for Calendar();
  uint64_t v59 = *(void *)(v3 - 8);
  uint64_t v60 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v47 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for Locale();
  uint64_t v65 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  uint64_t v48 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  uint64_t v50 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  uint64_t v49 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v54 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v51 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.DateOffset.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SystemFormatStyle.DateOffset.CodingKeys>, MEMORY[0x263F8E040]);
  uint64_t v52 = *(void *)(v9 - 8);
  uint64_t v53 = v9;
  MEMORY[0x270FA5388](v9);
  __n128 v11 = (char *)&v41 - v10;
  uint64_t v12 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x270FA5388](v12);
  int64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(int *)(v15 + 32);
  *(void *)&v14[v16] = 0;
  uint64_t v64 = &v14[*(int *)(v15 + 36)];
  static Locale.autoupdatingCurrent.getter();
  uint64_t v63 = &v14[v12[10]];
  static Calendar.autoupdatingCurrent.getter();
  uint64_t v17 = v12[11];
  v14[v17] = 0;
  uint64_t v18 = v12[12];
  v14[v18] = 0;
  uint64_t v55 = v12;
  uint64_t v19 = v12[13];
  uint64_t v62 = v14;
  v14[v19] = 0;
  uint64_t v20 = a1[3];
  uint64_t v57 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  lazy protocol witness table accessor for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys();
  uint64_t v56 = v11;
  uint64_t v21 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21)
  {
    uint64_t v22 = v59;
    uint64_t v23 = v61;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
    uint64_t v27 = v60;
    (*(void (**)(char *, uint64_t))(v65 + 8))(v64, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v63, v27);
  }
  else
  {
    uint64_t v45 = v16;
    uint64_t v44 = v17;
    uint64_t v43 = v18;
    uint64_t v42 = v19;
    LOBYTE(v68) = 0;
    _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    uint64_t v24 = v51;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v25 = v61;
    uint64_t v26 = v7;
    unint64_t v29 = v62;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v62, v24, v7);
    type metadata accessor for Set<Date.ComponentsFormatStyle.Field>(0);
    char v67 = 1;
    lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>, type metadata accessor for Set<Date.ComponentsFormatStyle.Field>, (void (*)(void))lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v30 = v55;
    *(void *)&v29[v55[5]] = v68;
    LOBYTE(v68) = 2;
    uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v32 = v59;
    uint64_t v58 = v26;
    *(void *)&v29[v30[6]] = v31;
    LOBYTE(v68) = 3;
    _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy, MEMORY[0x263F06DD8]);
    uint64_t v33 = v49;
    uint64_t v34 = v66;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(&v29[v30[7]], v33, v34);
    char v67 = 4;
    lazy protocol witness table accessor for type TextSizeVariant and conformance TextSizeVariant();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v29[v45] = v68;
    LOBYTE(v68) = 5;
    _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    uint64_t v35 = v48;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v65 + 40))(v64, v35, v25);
    LOBYTE(v68) = 6;
    _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
    uint64_t v36 = v47;
    uint64_t v37 = v60;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v32 + 40))(v63, v36, v37);
    char v67 = 7;
    lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v29[v44] = v68;
    LOBYTE(v68) = 8;
    v29[v43] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v68) = 9;
    char v38 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v56, v53);
    char v39 = v38 & 1;
    uint64_t v40 = (uint64_t)v62;
    v62[v42] = v39;
    outlined init with copy of SystemFormatStyle.DateOffset(v40, v46, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
    return _sSny10Foundation4DateVGWOhTm_0(v40, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  }
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance SystemFormatStyle.DateOffset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with copy of SystemFormatStyle.DateOffset(v3, a3, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v7 = a3 + *(int *)(a2 + 36);
  uint64_t v8 = type metadata accessor for Locale();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24);

  return v9(v7, a1, v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SystemFormatStyle.DateOffset@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SystemFormatStyle.DateOffset.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SystemFormatStyle.DateOffset(void *a1)
{
  return SystemFormatStyle.DateOffset.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SystemFormatStyle.DateOffset()
{
  Hasher.init(_seed:)();
  SystemFormatStyle.DateOffset.hash(into:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemFormatStyle.DateOffset()
{
  Hasher.init(_seed:)();
  SystemFormatStyle.DateOffset.hash(into:)(v1);
  return Hasher._finalize()();
}

uint64_t SystemFormatStyle.DateOffset.discreteInput(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v208 = a1;
  uint64_t v203 = a2;
  uint64_t v176 = type metadata accessor for Calendar.Component();
  uint64_t v175 = *(void *)(v176 - 8);
  MEMORY[0x270FA5388](v176);
  uint64_t v174 = (uint64_t)&v167 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v179 = (uint64_t)&v167 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = type metadata accessor for SystemFormatStyle.DateOffset();
  uint64_t v187 = *(void *)(v173 - 8);
  MEMORY[0x270FA5388](v173);
  uint64_t v191 = (uint64_t)&v167 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v188 = v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v189 = (uint64_t)&v167 - v9;
  type metadata accessor for Range<Date>();
  uint64_t v193 = v10;
  uint64_t v190 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v178 = (uint64_t)&v167 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v185 = (uint64_t)&v167 - v13;
  type metadata accessor for Range<Date>?(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v186 = (uint64_t)&v167 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v197 = (uint64_t)&v167 - v17;
  uint64_t v18 = (void (*)(uint64_t))MEMORY[0x263F07408];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07408], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x270FA5388](v19 - 8);
  CGFloat v202 = (void (*)(char *, uint64_t))((char *)&v167 - v20);
  type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v18);
  uint64_t v184 = v21;
  MEMORY[0x270FA5388](v21);
  uint64_t v183 = (char *)&v167 - v22;
  uint64_t v23 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v206 = v23;
  uint64_t v207 = v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v172 = (char *)&v167 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  v195 = (char *)&v167 - v27;
  uint64_t v28 = type metadata accessor for Date.ComponentsFormatStyle();
  uint64_t v199 = *(void *)(v28 - 8);
  uint64_t v200 = v28;
  MEMORY[0x270FA5388](v28);
  uint64_t v198 = (char *)&v167 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for Date();
  uint64_t v204 = *(void *)(v30 - 8);
  uint64_t v205 = v30;
  MEMORY[0x270FA5388](v30);
  uint64_t v170 = (char *)&v167 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v180 = (char *)&v167 - v33;
  type metadata accessor for Date?(0);
  MEMORY[0x270FA5388](v34 - 8);
  uint64_t v182 = (uint64_t)&v167 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v36);
  uint64_t v171 = (char *)&v167 - v37;
  MEMORY[0x270FA5388](v38);
  uint64_t v194 = (uint64_t)&v167 - v39;
  MEMORY[0x270FA5388](v40);
  CGFloat v192 = (char *)&v167 - v41;
  uint64_t v42 = MEMORY[0x263F07EA0];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x270FA5388](v43 - 8);
  uint64_t v45 = (char *)&v167 - v44;
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v42, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field));
  MEMORY[0x270FA5388](v46 - 8);
  uint64_t v48 = (char *)&v167 - v47;
  uint64_t v49 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  uint64_t v201 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v181 = (char *)&v167 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(0);
  MEMORY[0x270FA5388](v51 - 8);
  uint64_t v53 = (char *)&v167 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)?(0);
  MEMORY[0x270FA5388](v54 - 8);
  uint64_t v56 = (char *)&v167 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for Duration.TimeFormatStyle.Attributed();
  uint64_t v58 = *(void *)(v57 - 8);
  MEMORY[0x270FA5388](v57);
  uint64_t v60 = (char *)&v167 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v61 = SystemFormatStyle.DateOffset.canUseTimeStyle.getter();
  uint64_t v62 = v208;
  uint64_t v196 = (void (*)(void, void, void))v49;
  if (v61)
  {
    SystemFormatStyle.DateOffset.timeStyle(for:)(v208, (uint64_t)v53);
    type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)();
    uint64_t v64 = v63;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v63 - 8) + 48))(v53, 1, v63) == 1)
    {
      _sSny10Foundation4DateVGWOhTm_0((uint64_t)v53, (uint64_t (*)(void))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?);
      type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v56, 1, 1, v65);
    }
    else
    {
      uint64_t v169 = &v53[*(int *)(v64 + 48)];
      type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)();
      uint64_t v67 = v66;
      uint64_t v68 = *(int *)(v66 + 48);
      CGRect v177 = v3;
      uint64_t v69 = &v56[v68];
      uint64_t v168 = v58;
      uint64_t v70 = v53;
      uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
      v71(v56, v70, v57);
      uint64_t v72 = v69;
      uint64_t v3 = v177;
      (*(void (**)(char *, char *, uint64_t))(v207 + 32))(v72, v169, v206);
      uint64_t v73 = *(void *)(v67 - 8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v56, 0, 1, v67);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v56, 1, v67) != 1)
      {
        uint64_t v146 = &v56[*(int *)(v67 + 48)];
        v71(v60, v56, v57);
        (*(void (**)(char *, uint64_t))(v207 + 8))(v146, v206);
        Date.timeIntervalSince(_:)();
        static Duration.seconds(_:)();
        Duration.TimeFormatStyle.Attributed.discreteInput(before:)();
        char v132 = v147;
        (*(void (**)(char *, uint64_t))(v168 + 8))(v60, v57);
        goto LABEL_27;
      }
    }
    _sSny10Foundation4DateVGWOhTm_0((uint64_t)v56, (uint64_t (*)(void))type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)?);
    uint64_t v62 = v208;
    uint64_t v49 = (uint64_t)v196;
  }
  SystemFormatStyle.DateOffset.unitsStyle(for:)(v62, (uint64_t)v45);
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0]);
  uint64_t v75 = v74;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v74 - 8) + 48))(v45, 1, v74) == 1)
  {
    unsigned int v76 = (void (*)(uint64_t))MEMORY[0x263F07EA0];
    outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v45, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
    type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v76);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v48, 1, 1, v77);
    uint64_t v78 = (uint64_t)v202;
    goto LABEL_9;
  }
  uint64_t v79 = &v45[*(int *)(v75 + 48)];
  uint64_t v80 = &v45[*(int *)(v75 + 64)];
  type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0]);
  uint64_t v82 = v81;
  uint64_t v83 = v3;
  uint64_t v84 = &v48[*(int *)(v81 + 48)];
  long long v85 = &v48[*(int *)(v81 + 64)];
  CGRect v177 = *(void (**)(void, void, void))(v201 + 32);
  v177(v48, v45, v49);
  uint64_t v86 = *(void (**)(char *, char *, uint64_t))(v207 + 32);
  uint64_t v87 = v84;
  uint64_t v3 = v83;
  uint64_t v88 = v79;
  uint64_t v89 = v206;
  v86(v87, v88, v206);
  v86(v85, v80, v89);
  uint64_t v90 = *(void *)(v82 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v48, 0, 1, v82);
  int v91 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 48))(v48, 1, v82);
  uint64_t v78 = (uint64_t)v202;
  if (v91 != 1)
  {
    char v124 = &v48[*(int *)(v82 + 48)];
    uint64_t v125 = &v48[*(int *)(v82 + 64)];
    CGFloat v126 = v181;
    uint64_t v127 = v196;
    v177(v181, v48, v196);
    uint64_t v128 = *(void (**)(char *, uint64_t))(v207 + 8);
    uint64_t v129 = v125;
    uint64_t v130 = v206;
    v128(v129, v206);
    v128(v124, v130);
    Date.timeIntervalSince(_:)();
    static Duration.seconds(_:)();
    Duration.UnitsFormatStyle.Attributed.discreteInput(before:)();
    char v132 = v131;
    (*(void (**)(char *, void (*)(void, void, void)))(v201 + 8))(v126, v127);
LABEL_27:
    char v148 = static Date.> infix(_:_:)();
    uint64_t v150 = v204;
    uint64_t v149 = v205;
    uint64_t v151 = (uint64_t)v192;
    if (v148)
    {
      (*(void (**)(char *, void, uint64_t))(v204 + 16))(v192, v3, v205);
      uint64_t v152 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v150 + 56);
      v152(v151, 0, 1, v149);
    }
    else
    {
      uint64_t v152 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v204 + 56);
      v152((uint64_t)v192, 1, 1, v205);
    }
    if ((v132 & 1) == 0)
    {
      uint64_t v153 = v180;
      SystemFormatStyle.DateOffset.nextInputRoundingHigher(for:)((uint64_t)v180);
      uint64_t v154 = v203;
      specialized max<A>(_:ifPresent:)(v153, v151, v203);
      (*(void (**)(char *, uint64_t))(v150 + 8))(v153, v149);
      _sSny10Foundation4DateVGWOhTm_0(v151, (uint64_t (*)(void))type metadata accessor for Date?);
      return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v152)(v154, 0, 1, v149);
    }
    uint64_t v133 = v151;
    return _s10Foundation4DateVSgWObTm_0(v133, v203, (uint64_t (*)(void))type metadata accessor for Date?);
  }
LABEL_9:
  outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v48, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field));
  SystemFormatStyle.DateOffset.componentsStyle(for:)(v208, v78);
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07408]);
  uint64_t v93 = v92;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 48))(v78, 1, v92) == 1)
  {
    outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(v78, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07408], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
    if (static Date.< infix(_:_:)())
    {
      uint64_t v94 = v182;
      SystemFormatStyle.DateOffset.nextInputRoundingLower(for:)(v182);
      uint64_t v96 = v204;
      uint64_t v95 = v205;
    }
    else
    {
      Date.timeIntervalSinceReferenceDate.getter();
      uint64_t v94 = v182;
      uint64_t v96 = v204;
      uint64_t v95 = v205;
      Date.init(timeIntervalSinceReferenceDate:)();
    }
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v96 + 56))(v94, 0, 1, v95);
    uint64_t v133 = v94;
    return _s10Foundation4DateVSgWObTm_0(v133, v203, (uint64_t (*)(void))type metadata accessor for Date?);
  }
  uint64_t v97 = v78 + *(int *)(v93 + 48);
  CGFloat v202 = (void (*)(char *, uint64_t))(v78 + *(int *)(v93 + 64));
  uint64_t v98 = v184;
  uint64_t v99 = v183;
  uint64_t v100 = &v183[*(int *)(v184 + 48)];
  uint64_t v101 = &v183[*(int *)(v184 + 64)];
  CGRect v177 = v3;
  uint64_t v102 = *(void (**)(char *, uint64_t, uint64_t))(v199 + 32);
  uint64_t v103 = v78;
  uint64_t v104 = v200;
  v102(v183, v103, v200);
  uint64_t v106 = v207 + 32;
  uint64_t v105 = *(void (**)(char *, uint64_t, uint64_t))(v207 + 32);
  uint64_t v107 = v100;
  uint64_t v108 = v206;
  v105(v107, v97, v206);
  v105(v101, (uint64_t)v202, v108);
  uint64_t v109 = &v99[*(int *)(v98 + 48)];
  char v110 = &v99[*(int *)(v98 + 64)];
  v102(v198, (uint64_t)v99, v104);
  uint64_t v111 = v195;
  uint64_t v201 = v106;
  uint64_t v196 = (void (*)(void, void, void))v105;
  v105(v195, (uint64_t)v109, v108);
  CGFloat v202 = *(void (**)(char *, uint64_t))(v207 + 8);
  v202(v110, v108);
  uint64_t v112 = v185;
  uint64_t v113 = (uint64_t)v177;
  SystemFormatStyle.DateOffset.dateRange(for:)(v208, v185);
  uint64_t v114 = v197;
  Date.ComponentsFormatStyle.discreteInput(before:)();
  _sSny10Foundation4DateVGWOhTm_0(v112, (uint64_t (*)(void))type metadata accessor for Range<Date>);
  uint64_t v115 = (char *)v113;
  uint64_t v116 = v189;
  outlined init with copy of SystemFormatStyle.DateOffset(v113, v189, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v117 = v191;
  outlined init with copy of SystemFormatStyle.DateOffset(v116, v191, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  unint64_t v118 = (*(unsigned __int8 *)(v187 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v187 + 80);
  uint64_t v119 = swift_allocObject();
  _s10Foundation4DateVSgWObTm_0(v116, v119 + v118, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v120 = v186;
  outlined init with copy of SystemFormatStyle.DateOffset(v114, v186, (uint64_t (*)(void))type metadata accessor for Range<Date>?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v190 + 48))(v120, 1, v193) == 1)
  {
    uint64_t v121 = v205;
    uint64_t v122 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v204 + 56);
    uint64_t v123 = v194;
    v122(v194, 1, 1, v205);
  }
  else
  {
    uint64_t v134 = v120;
    uint64_t v135 = v178;
    _s10Foundation4DateVSgWObTm_0(v134, v178, (uint64_t (*)(void))type metadata accessor for Range<Date>);
    char v136 = static Date.== infix(_:_:)();
    uint64_t v137 = v135;
    uint64_t v138 = v204;
    uint64_t v121 = v205;
    uint64_t v123 = v194;
    if (v136) {
      uint64_t v137 = v135 + *(int *)(v193 + 36);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v204 + 16))(v194, v137, v205);
    _sSny10Foundation4DateVGWOhTm_0(v135, (uint64_t (*)(void))type metadata accessor for Range<Date>);
    uint64_t v122 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v138 + 56);
    v122(v123, 0, 1, v121);
  }
  _sSny10Foundation4DateVGWOhTm_0(v197, (uint64_t (*)(void))type metadata accessor for Range<Date>?);
  swift_release();
  _sSny10Foundation4DateVGWOhTm_0(v117, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v139 = static Date.> infix(_:_:)();
  if (v139)
  {
    uint64_t v140 = v203;
    specialized max<A>(_:ifPresent:)(v115, v123, v203);
    _sSny10Foundation4DateVGWOhTm_0(v123, (uint64_t (*)(void))type metadata accessor for Date?);
    (*(void (**)(char *, uint64_t))(v199 + 8))(v198, v200);
    v202(v111, v206);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v122)(v140, 0, 1, v121);
  }
  if (one-time initialization token for orderedFields != -1) {
    uint64_t v139 = swift_once();
  }
  uint64_t v142 = static Date.ComponentsFormatStyle.Field.orderedFields;
  MEMORY[0x270FA5388](v139);
  uint64_t v143 = v195;
  *(&v167 - 2) = (uint64_t)v115;
  *(&v167 - 1) = (uint64_t)v143;
  swift_bridgeObjectRetain();
  uint64_t v144 = v179;
  specialized BidirectionalCollection.last(where:)((uint64_t (*)(uint64_t))partial apply for closure #1 in SystemFormatStyle.DateOffset.discreteInput(before:), v142, v179);
  swift_bridgeObjectRelease();
  uint64_t v145 = v206;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v207 + 48))(v144, 1, v206) == 1)
  {
    (*(void (**)(char *, uint64_t))(v199 + 8))(v198, v200);
    v202(v143, v145);
    _sSny10Foundation4DateVGWOhTm_0(v144, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
LABEL_35:
    uint64_t v133 = v123;
    return _s10Foundation4DateVSgWObTm_0(v133, v203, (uint64_t (*)(void))type metadata accessor for Date?);
  }
  uint64_t v155 = (uint64_t)v172;
  v196(v172, v144, v145);
  uint64_t v156 = v174;
  SystemFormatStyle.DateOffset.component(for:)(v155, v174);
  uint64_t v157 = (uint64_t)v171;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  (*(void (**)(uint64_t, uint64_t))(v175 + 8))(v156, v176);
  uint64_t v159 = v204;
  uint64_t v158 = v205;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v204 + 48))(v157, 1, v205) == 1)
  {
    uint64_t v160 = v202;
    v202((char *)v155, v145);
    (*(void (**)(char *, uint64_t))(v199 + 8))(v198, v200);
    v160(v195, v145);
    _sSny10Foundation4DateVGWOhTm_0(v157, (uint64_t (*)(void))type metadata accessor for Date?);
    uint64_t v123 = v194;
    goto LABEL_35;
  }
  uint64_t v161 = v122;
  uint64_t v162 = v170;
  (*(void (**)(char *, uint64_t, uint64_t))(v159 + 32))(v170, v157, v158);
  uint64_t v163 = v203;
  uint64_t v164 = v194;
  specialized max<A>(_:ifPresent:)(v162, v194, v203);
  (*(void (**)(char *, uint64_t))(v159 + 8))(v162, v158);
  uint64_t v165 = v155;
  uint64_t v166 = v202;
  v202((char *)v165, v145);
  _sSny10Foundation4DateVGWOhTm_0(v164, (uint64_t (*)(void))type metadata accessor for Date?);
  (*(void (**)(char *, uint64_t))(v199 + 8))(v198, v200);
  v166(v195, v145);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v161)(v163, 0, 1, v158);
}

uint64_t SystemFormatStyle.DateOffset.nextInputRoundingHigher(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v15 - v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v15 - v10;
  Duration.components.getter();
  Date.addingTimeInterval(_:)();
  Date.timeIntervalSince(_:)();
  static Duration.seconds(_:)();
  if ((static Duration.< infix(_:_:)() & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v11, v2);
  }
  Date.timeIntervalSinceReferenceDate.getter();
  Date.init(timeIntervalSinceReferenceDate:)();
  Date.timeIntervalSince(_:)();
  static Date.+ infix(_:_:)();
  lazy protocol witness table accessor for type Date and conformance Date();
  if (dispatch thunk of static Comparable.>= infix(_:_:)()) {
    uint64_t v12 = v5;
  }
  else {
    uint64_t v12 = v8;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v12, v2);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v5, v2);
  v13(v8, v2);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, v2);
}

uint64_t SystemFormatStyle.DateOffset.nextInputRoundingLower(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v15 - v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v15 - v10;
  Duration.components.getter();
  Date.addingTimeInterval(_:)();
  Date.timeIntervalSince(_:)();
  static Duration.seconds(_:)();
  if ((static Duration.< infix(_:_:)() & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v11, v2);
  }
  Date.timeIntervalSinceReferenceDate.getter();
  Date.init(timeIntervalSinceReferenceDate:)();
  Date.timeIntervalSince(_:)();
  static Date.+ infix(_:_:)();
  lazy protocol witness table accessor for type Date and conformance Date();
  if (dispatch thunk of static Comparable.< infix(_:_:)()) {
    uint64_t v12 = v5;
  }
  else {
    uint64_t v12 = v8;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v12, v2);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v5, v2);
  v13(v8, v2);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, v2);
}

uint64_t SystemFormatStyle.DateOffset.discreteInput(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v209 = a1;
  uint64_t v204 = a2;
  uint64_t v177 = type metadata accessor for Calendar.Component();
  uint64_t v176 = *(void *)(v177 - 8);
  MEMORY[0x270FA5388](v177);
  uint64_t v175 = (uint64_t)&v168 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v180 = (uint64_t)&v168 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v174 = type metadata accessor for SystemFormatStyle.DateOffset();
  uint64_t v188 = *(void *)(v174 - 8);
  MEMORY[0x270FA5388](v174);
  uint64_t v194 = (uint64_t)&v168 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v189 = v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v190 = (uint64_t)&v168 - v8;
  type metadata accessor for Range<Date>();
  uint64_t v191 = *(void *)(v9 - 8);
  uint64_t v192 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v179 = (uint64_t)&v168 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v186 = (uint64_t)&v168 - v12;
  type metadata accessor for Range<Date>?(0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v187 = (uint64_t)&v168 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v193 = (char *)&v168 - v16;
  uint64_t v17 = (void (*)(uint64_t))MEMORY[0x263F07408];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07408], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v203 = (void (*)(char *, uint64_t))((char *)&v168 - v19);
  type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v17);
  uint64_t v185 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v184 = (char *)&v168 - v21;
  uint64_t v22 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v207 = v22;
  uint64_t v208 = v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v173 = (char *)&v168 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  CGFloat v202 = (char *)&v168 - v26;
  uint64_t v27 = type metadata accessor for Date.ComponentsFormatStyle();
  uint64_t v199 = *(void *)(v27 - 8);
  uint64_t v200 = v27;
  MEMORY[0x270FA5388](v27);
  uint64_t v198 = (char *)&v168 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for Date();
  uint64_t v205 = *(void *)(v29 - 8);
  uint64_t v206 = v29;
  MEMORY[0x270FA5388](v29);
  uint64_t v171 = (char *)&v168 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v181 = (char *)&v168 - v32;
  type metadata accessor for Date?(0);
  MEMORY[0x270FA5388](v33 - 8);
  uint64_t v183 = (uint64_t)&v168 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  uint64_t v172 = (char *)&v168 - v36;
  MEMORY[0x270FA5388](v37);
  uint64_t v196 = (uint64_t)&v168 - v38;
  MEMORY[0x270FA5388](v39);
  v195 = (char *)&v168 - v40;
  uint64_t v41 = MEMORY[0x263F07EA0];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x270FA5388](v42 - 8);
  uint64_t v44 = (char *)&v168 - v43;
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v41, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field));
  MEMORY[0x270FA5388](v45 - 8);
  uint64_t v47 = (char *)&v168 - v46;
  uint64_t v48 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  uint64_t v201 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v182 = (char *)&v168 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(0);
  MEMORY[0x270FA5388](v50 - 8);
  uint64_t v52 = (char *)&v168 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)?(0);
  MEMORY[0x270FA5388](v53 - 8);
  uint64_t v55 = (char *)&v168 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for Duration.TimeFormatStyle.Attributed();
  uint64_t v57 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  uint64_t v59 = (char *)&v168 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = v2;
  BOOL v61 = SystemFormatStyle.DateOffset.canUseTimeStyle.getter();
  uint64_t v62 = v209;
  uint64_t v197 = (void (*)(void, void, void))v48;
  if (v61)
  {
    SystemFormatStyle.DateOffset.timeStyle(for:)(v209, (uint64_t)v52);
    type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)();
    uint64_t v64 = v63;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v63 - 8) + 48))(v52, 1, v63) == 1)
    {
      _sSny10Foundation4DateVGWOhTm_0((uint64_t)v52, (uint64_t (*)(void))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?);
      type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v55, 1, 1, v65);
    }
    else
    {
      uint64_t v170 = &v52[*(int *)(v64 + 48)];
      type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)();
      uint64_t v67 = v66;
      uint64_t v68 = *(int *)(v66 + 48);
      uint64_t v178 = v60;
      uint64_t v69 = &v55[v68];
      uint64_t v169 = v57;
      uint64_t v70 = v52;
      uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
      v71(v55, v70, v56);
      uint64_t v72 = v69;
      uint64_t v60 = v178;
      (*(void (**)(char *, char *, uint64_t))(v208 + 32))(v72, v170, v207);
      uint64_t v73 = *(void *)(v67 - 8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v55, 0, 1, v67);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v55, 1, v67) != 1)
      {
        uint64_t v145 = &v55[*(int *)(v67 + 48)];
        v71(v59, v55, v56);
        (*(void (**)(char *, uint64_t))(v208 + 8))(v145, v207);
        Date.timeIntervalSince(_:)();
        static Duration.seconds(_:)();
        Duration.TimeFormatStyle.Attributed.discreteInput(after:)();
        char v133 = v146;
        (*(void (**)(char *, uint64_t))(v169 + 8))(v59, v56);
LABEL_27:
        uint64_t v147 = v205;
        char v148 = static Date.< infix(_:_:)();
        uint64_t v149 = (uint64_t)v195;
        if (v148)
        {
          uint64_t v150 = v206;
          (*(void (**)(char *, void, uint64_t))(v147 + 16))(v195, v60, v206);
          uint64_t v151 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v147 + 56);
          v151(v149, 0, 1, v150);
          if (v133)
          {
LABEL_29:
            uint64_t v152 = v149;
            return _s10Foundation4DateVSgWObTm_0(v152, v204, (uint64_t (*)(void))type metadata accessor for Date?);
          }
        }
        else
        {
          uint64_t v151 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v147 + 56);
          v151((uint64_t)v195, 1, 1, v206);
          if (v133) {
            goto LABEL_29;
          }
        }
        uint64_t v153 = v181;
        SystemFormatStyle.DateOffset.nextInputRoundingHigher(for:)((uint64_t)v181);
        uint64_t v154 = v204;
        specialized min<A>(_:ifPresent:)(v153, v149, v204);
        uint64_t v155 = v206;
        (*(void (**)(char *, uint64_t))(v147 + 8))(v153, v206);
        _sSny10Foundation4DateVGWOhTm_0(v149, (uint64_t (*)(void))type metadata accessor for Date?);
        return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v151)(v154, 0, 1, v155);
      }
    }
    _sSny10Foundation4DateVGWOhTm_0((uint64_t)v55, (uint64_t (*)(void))type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)?);
    uint64_t v62 = v209;
    uint64_t v48 = (uint64_t)v197;
  }
  SystemFormatStyle.DateOffset.unitsStyle(for:)(v62, (uint64_t)v44);
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0]);
  uint64_t v75 = v74;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v74 - 8) + 48))(v44, 1, v74) == 1)
  {
    unsigned int v76 = (void (*)(uint64_t))MEMORY[0x263F07EA0];
    outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v44, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
    type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v76);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v47, 1, 1, v77);
    uint64_t v78 = (uint64_t)v203;
    goto LABEL_9;
  }
  uint64_t v79 = &v44[*(int *)(v75 + 48)];
  uint64_t v80 = &v44[*(int *)(v75 + 64)];
  type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0]);
  uint64_t v82 = v81;
  uint64_t v83 = &v47[*(int *)(v81 + 48)];
  uint64_t v84 = v60;
  long long v85 = &v47[*(int *)(v81 + 64)];
  uint64_t v178 = *(void (**)(void, void, void))(v201 + 32);
  v178(v47, v44, v48);
  uint64_t v86 = *(void (**)(char *, char *, uint64_t))(v208 + 32);
  uint64_t v87 = v79;
  uint64_t v88 = v207;
  v86(v83, v87, v207);
  uint64_t v89 = v85;
  uint64_t v60 = v84;
  v86(v89, v80, v88);
  uint64_t v90 = *(void *)(v82 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v47, 0, 1, v82);
  int v91 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 48))(v47, 1, v82);
  uint64_t v78 = (uint64_t)v203;
  if (v91 != 1)
  {
    uint64_t v125 = &v47[*(int *)(v82 + 48)];
    CGFloat v126 = &v47[*(int *)(v82 + 64)];
    uint64_t v127 = v182;
    uint64_t v128 = v197;
    v178(v182, v47, v197);
    uint64_t v129 = *(void (**)(char *, uint64_t))(v208 + 8);
    uint64_t v130 = v126;
    uint64_t v131 = v207;
    v129(v130, v207);
    v129(v125, v131);
    Date.timeIntervalSince(_:)();
    static Duration.seconds(_:)();
    Duration.UnitsFormatStyle.Attributed.discreteInput(after:)();
    char v133 = v132;
    (*(void (**)(char *, void (*)(void, void, void)))(v201 + 8))(v127, v128);
    goto LABEL_27;
  }
LABEL_9:
  outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v47, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field));
  SystemFormatStyle.DateOffset.componentsStyle(for:)(v209, v78);
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07408]);
  uint64_t v93 = v92;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 48))(v78, 1, v92) == 1)
  {
    outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(v78, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07408], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
    char v94 = static Date.< infix(_:_:)();
    uint64_t v96 = v205;
    uint64_t v95 = v206;
    uint64_t v97 = v183;
    if (v94) {
      (*(void (**)(uint64_t, void, uint64_t))(v205 + 16))(v183, v60, v206);
    }
    else {
      SystemFormatStyle.DateOffset.nextInputRoundingHigher(for:)(v183);
    }
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v96 + 56))(v97, 0, 1, v95);
    goto LABEL_34;
  }
  uint64_t v98 = v78 + *(int *)(v93 + 48);
  uint64_t v203 = (void (*)(char *, uint64_t))(v78 + *(int *)(v93 + 64));
  uint64_t v99 = v185;
  uint64_t v100 = v184;
  uint64_t v101 = &v184[*(int *)(v185 + 48)];
  uint64_t v102 = &v184[*(int *)(v185 + 64)];
  uint64_t v103 = *(void (**)(char *, uint64_t, uint64_t))(v199 + 32);
  uint64_t v104 = v78;
  uint64_t v105 = v200;
  v103(v184, v104, v200);
  uint64_t v178 = v60;
  uint64_t v106 = v208 + 32;
  uint64_t v107 = *(void (**)(char *, uint64_t, uint64_t))(v208 + 32);
  uint64_t v108 = v101;
  uint64_t v109 = v207;
  v107(v108, v98, v207);
  v107(v102, (uint64_t)v203, v109);
  char v110 = &v100[*(int *)(v99 + 48)];
  uint64_t v111 = &v100[*(int *)(v99 + 64)];
  v103(v198, (uint64_t)v100, v105);
  uint64_t v201 = v106;
  uint64_t v197 = (void (*)(void, void, void))v107;
  v107(v202, (uint64_t)v110, v109);
  uint64_t v203 = *(void (**)(char *, uint64_t))(v208 + 8);
  v203(v111, v109);
  uint64_t v112 = v186;
  uint64_t v113 = (char *)v178;
  SystemFormatStyle.DateOffset.dateRange(for:)(v209, v186);
  uint64_t v114 = (uint64_t)v193;
  Date.ComponentsFormatStyle.discreteInput(after:)();
  _sSny10Foundation4DateVGWOhTm_0(v112, (uint64_t (*)(void))type metadata accessor for Range<Date>);
  uint64_t v115 = v113;
  uint64_t v116 = (uint64_t)v113;
  uint64_t v117 = v190;
  outlined init with copy of SystemFormatStyle.DateOffset(v116, v190, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v118 = v194;
  outlined init with copy of SystemFormatStyle.DateOffset(v117, v194, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  unint64_t v119 = (*(unsigned __int8 *)(v188 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v188 + 80);
  uint64_t v120 = swift_allocObject();
  _s10Foundation4DateVSgWObTm_0(v117, v120 + v119, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v121 = v187;
  outlined init with copy of SystemFormatStyle.DateOffset(v114, v187, (uint64_t (*)(void))type metadata accessor for Range<Date>?);
  uint64_t v122 = v192;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v191 + 48))(v121, 1, v192) == 1)
  {
    uint64_t v123 = v206;
    char v124 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v205 + 56);
    uint64_t v97 = v196;
    v124(v196, 1, 1, v206);
  }
  else
  {
    uint64_t v134 = v179;
    _s10Foundation4DateVSgWObTm_0(v121, v179, (uint64_t (*)(void))type metadata accessor for Range<Date>);
    char v135 = static Date.== infix(_:_:)();
    uint64_t v136 = v134;
    uint64_t v137 = v205;
    uint64_t v123 = v206;
    uint64_t v97 = v196;
    if (v135) {
      uint64_t v136 = v134 + *(int *)(v122 + 36);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v205 + 16))(v196, v136, v206);
    _sSny10Foundation4DateVGWOhTm_0(v134, (uint64_t (*)(void))type metadata accessor for Range<Date>);
    char v124 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v137 + 56);
    v124(v97, 0, 1, v123);
  }
  _sSny10Foundation4DateVGWOhTm_0(v114, (uint64_t (*)(void))type metadata accessor for Range<Date>?);
  swift_release();
  _sSny10Foundation4DateVGWOhTm_0(v118, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v138 = static Date.< infix(_:_:)();
  if (v138)
  {
    uint64_t v139 = v204;
    specialized min<A>(_:ifPresent:)(v115, v97, v204);
    _sSny10Foundation4DateVGWOhTm_0(v97, (uint64_t (*)(void))type metadata accessor for Date?);
    (*(void (**)(char *, uint64_t))(v199 + 8))(v198, v200);
    v203(v202, v207);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v124)(v139, 0, 1, v123);
  }
  if (one-time initialization token for orderedFields != -1) {
    uint64_t v138 = swift_once();
  }
  uint64_t v141 = static Date.ComponentsFormatStyle.Field.orderedFields;
  MEMORY[0x270FA5388](v138);
  uint64_t v142 = v202;
  *(&v168 - 2) = (uint64_t)v115;
  *(&v168 - 1) = (uint64_t)v142;
  swift_bridgeObjectRetain();
  uint64_t v143 = v180;
  specialized BidirectionalCollection.last(where:)((uint64_t (*)(uint64_t))partial apply for closure #1 in SystemFormatStyle.DateOffset.discreteInput(after:), v141, v180);
  swift_bridgeObjectRelease();
  uint64_t v144 = v207;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v208 + 48))(v143, 1, v207) == 1)
  {
    (*(void (**)(char *, uint64_t))(v199 + 8))(v198, v200);
    v203(v142, v144);
    _sSny10Foundation4DateVGWOhTm_0(v143, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
LABEL_34:
    uint64_t v152 = v97;
    return _s10Foundation4DateVSgWObTm_0(v152, v204, (uint64_t (*)(void))type metadata accessor for Date?);
  }
  uint64_t v156 = (uint64_t)v173;
  v197(v173, v143, v144);
  uint64_t v157 = v144;
  uint64_t v158 = v175;
  SystemFormatStyle.DateOffset.component(for:)(v156, v175);
  uint64_t v159 = (uint64_t)v172;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  (*(void (**)(uint64_t, uint64_t))(v176 + 8))(v158, v177);
  uint64_t v161 = v205;
  uint64_t v160 = v206;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v205 + 48))(v159, 1, v206) == 1)
  {
    uint64_t v162 = v203;
    v203((char *)v156, v157);
    (*(void (**)(char *, uint64_t))(v199 + 8))(v198, v200);
    v162(v202, v157);
    _sSny10Foundation4DateVGWOhTm_0(v159, (uint64_t (*)(void))type metadata accessor for Date?);
    uint64_t v97 = v196;
    goto LABEL_34;
  }
  uint64_t v163 = v171;
  (*(void (**)(char *, uint64_t, uint64_t))(v161 + 32))(v171, v159, v160);
  uint64_t v164 = v204;
  uint64_t v165 = v196;
  specialized min<A>(_:ifPresent:)(v163, v196, v204);
  (*(void (**)(char *, uint64_t))(v161 + 8))(v163, v160);
  uint64_t v166 = v156;
  uint64_t v167 = v203;
  v203((char *)v166, v157);
  _sSny10Foundation4DateVGWOhTm_0(v165, (uint64_t (*)(void))type metadata accessor for Date?);
  (*(void (**)(char *, uint64_t))(v199 + 8))(v198, v200);
  v167(v202, v157);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v124)(v164, 0, 1, v160);
}

BOOL closure #1 in SystemFormatStyle.DateOffset.discreteInput(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = type metadata accessor for SystemFormatStyle.DateOffset();
  LOBYTE(a2) = specialized Set.contains(_:)(a1, *(void *)(a2 + *(int *)(v13 + 20)));
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v14(v12, a1, v6);
  v14(v9, a3, v6);
  if (a2)
  {
    Date.ComponentsFormatStyle.Field.magnitude.getter(&v23);
    double v15 = v23;
    Date.ComponentsFormatStyle.Field.magnitude.getter(&v22);
    v16.n128_f64[0] = v22;
    BOOL v17 = v22 < v15;
    uint64_t v18 = *(void (**)(char *, uint64_t, __n128))(v7 + 8);
    v18(v9, v6, v16);
    ((void (*)(char *, uint64_t))v18)(v12, v6);
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
    v19(v9, v6);
    v19(v12, v6);
    return 0;
  }
  return v17;
}

uint64_t SystemFormatStyle.DateOffset.input(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v133 = a2;
  type metadata accessor for Range<Date>?(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v125 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<Date>();
  uint64_t v126 = v7;
  uint64_t v123 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v122 = (uint64_t)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v118 = (uint64_t)&v114 - v10;
  uint64_t v11 = (void (*)(uint64_t))MEMORY[0x263F07408];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07408], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v129 = (uint64_t)&v114 - v13;
  type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v11);
  uint64_t v121 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v120 = (char *)&v114 - v15;
  uint64_t v127 = type metadata accessor for Date.ComponentsFormatStyle();
  uint64_t v130 = *(void *)(v127 - 8);
  MEMORY[0x270FA5388](v127);
  char v124 = (char *)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x263F07EA0];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v114 - v19;
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v17, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field));
  MEMORY[0x270FA5388](v21 - 8);
  char v132 = (char *)&v114 - v22;
  uint64_t v23 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  uint64_t v131 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  unint64_t v119 = (char *)&v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(0);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)?(0);
  MEMORY[0x270FA5388](v28 - 8);
  uint64_t v30 = (char *)&v114 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for Duration.TimeFormatStyle.Attributed();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v114 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v35 = SystemFormatStyle.DateOffset.canUseTimeStyle.getter();
  uint64_t v134 = a1;
  uint64_t v128 = (char *)v23;
  if (v35)
  {
    SystemFormatStyle.DateOffset.timeStyle(for:)(a1, (uint64_t)v27);
    type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)();
    uint64_t v37 = v36;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48))(v27, 1, v36) == 1)
    {
      _sSny10Foundation4DateVGWOhTm_0((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?);
      type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v30, 1, 1, v38);
    }
    else
    {
      uint64_t v116 = &v27[*(int *)(v37 + 48)];
      type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)();
      uint64_t v40 = v39;
      uint64_t v41 = *(int *)(v39 + 48);
      uint64_t v117 = v3;
      uint64_t v42 = &v30[v41];
      uint64_t v115 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
      v115(v30, v27, v31);
      uint64_t v43 = type metadata accessor for Date.ComponentsFormatStyle.Field();
      uint64_t v44 = *(void *)(v43 - 8);
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v42, v116, v43);
      uint64_t v45 = *(void *)(v40 - 8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v30, 0, 1, v40);
      int v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48))(v30, 1, v40);
      uint64_t v3 = v117;
      if (v46 != 1)
      {
        uint64_t v109 = &v30[*(int *)(v40 + 48)];
        v115(v34, v30, v31);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v109, v43);
        Date.timeIntervalSince(_:)();
        static Duration.seconds(_:)();
        _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, MEMORY[0x263F07E58]);
        DiscreteFormatStyle<>.input(before:)();
        char v111 = v110;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
        uint64_t v102 = v133;
        if ((v111 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_20;
      }
    }
    _sSny10Foundation4DateVGWOhTm_0((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)?);
    a1 = v134;
    uint64_t v23 = (uint64_t)v128;
  }
  SystemFormatStyle.DateOffset.unitsStyle(for:)(a1, (uint64_t)v20);
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0]);
  uint64_t v48 = v47;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48))(v20, 1, v47) == 1)
  {
    uint64_t v49 = (void (*)(uint64_t))MEMORY[0x263F07EA0];
    outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v20, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
    type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v49);
    uint64_t v51 = (uint64_t)v132;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v132, 1, 1, v50);
    goto LABEL_9;
  }
  uint64_t v116 = &v20[*(int *)(v48 + 48)];
  uint64_t v117 = &v20[*(int *)(v48 + 64)];
  type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0]);
  uint64_t v53 = v52;
  uint64_t v54 = v3;
  uint64_t v51 = (uint64_t)v132;
  uint64_t v55 = &v132[*(int *)(v52 + 48)];
  uint64_t v56 = &v132[*(int *)(v52 + 64)];
  uint64_t v115 = *(void (**)(char *, char *, uint64_t))(v131 + 32);
  v115(v132, v20, v23);
  uint64_t v57 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
  uint64_t v60 = v55;
  uint64_t v3 = v54;
  v59(v60, v116, v57);
  BOOL v61 = v56;
  a1 = v134;
  v59(v61, v117, v57);
  uint64_t v62 = *(void *)(v53 - 8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v62 + 56))(v51, 0, 1, v53);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v51, 1, v53) != 1)
  {
    uint64_t v94 = v51 + *(int *)(v53 + 48);
    uint64_t v95 = v51 + *(int *)(v53 + 64);
    uint64_t v96 = v119;
    uint64_t v97 = v51;
    uint64_t v98 = v128;
    v115(v119, (char *)v97, (uint64_t)v128);
    uint64_t v99 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
    v99(v95, v57);
    v99(v94, v57);
    Date.timeIntervalSince(_:)();
    static Duration.seconds(_:)();
    _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, MEMORY[0x263F07EA0]);
    DiscreteFormatStyle<>.input(before:)();
    char v101 = v100;
    (*(void (**)(char *, char *))(v131 + 8))(v96, v98);
    uint64_t v102 = v133;
    if ((v101 & 1) == 0)
    {
LABEL_15:
      SystemFormatStyle.DateOffset.nextInputRoundingLower(for:)(v102);
      uint64_t v67 = type metadata accessor for Date();
      uint64_t v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56);
      uint64_t v69 = v102;
      goto LABEL_16;
    }
LABEL_20:
    uint64_t v67 = type metadata accessor for Date();
    uint64_t v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56);
    uint64_t v69 = v102;
    uint64_t v103 = 1;
    return v68(v69, v103, 1, v67);
  }
LABEL_9:
  outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(v51, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field));
  uint64_t v63 = v129;
  SystemFormatStyle.DateOffset.componentsStyle(for:)(a1, v129);
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07408]);
  uint64_t v65 = v64;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 48))(v63, 1, v64) == 1)
  {
    outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(v63, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07408], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
    Date.timeIntervalSinceReferenceDate.getter();
    uint64_t v66 = v133;
    Date.init(timeIntervalSinceReferenceDate:)();
    uint64_t v67 = type metadata accessor for Date();
    uint64_t v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56);
    uint64_t v69 = v66;
LABEL_16:
    uint64_t v103 = 0;
    return v68(v69, v103, 1, v67);
  }
  uint64_t v131 = v63 + *(int *)(v65 + 48);
  char v132 = (char *)(v63 + *(int *)(v65 + 64));
  uint64_t v71 = v120;
  uint64_t v70 = v121;
  uint64_t v72 = &v120[*(int *)(v121 + 48)];
  uint64_t v128 = &v120[*(int *)(v121 + 64)];
  uint64_t v117 = v3;
  uint64_t v73 = *(void (**)(char *, uint64_t, uint64_t))(v130 + 32);
  uint64_t v74 = v127;
  v73(v120, v63, v127);
  uint64_t v75 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v76 = *(void *)(v75 - 8);
  uint64_t v77 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 32);
  v77(v72, v131, v75);
  v77(v128, (uint64_t)v132, v75);
  uint64_t v78 = v74;
  uint64_t v79 = &v71[*(int *)(v70 + 48)];
  uint64_t v80 = &v71[*(int *)(v70 + 64)];
  uint64_t v81 = v124;
  v73(v124, (uint64_t)v71, v78);
  uint64_t v82 = v134;
  uint64_t v83 = v117;
  uint64_t v84 = *(void (**)(char *, uint64_t))(v76 + 8);
  v84(v80, v75);
  v84(v79, v75);
  uint64_t v85 = v122;
  SystemFormatStyle.DateOffset.dateRange(for:)(v82, v122);
  uint64_t v86 = (uint64_t)v125;
  Date.ComponentsFormatStyle.input(before:)();
  _sSny10Foundation4DateVGWOhTm_0(v85, (uint64_t (*)(void))type metadata accessor for Range<Date>);
  uint64_t v87 = v126;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v123 + 48))(v86, 1, v126) == 1)
  {
    _sSny10Foundation4DateVGWOhTm_0(v86, (uint64_t (*)(void))type metadata accessor for Range<Date>?);
    char v88 = static Date.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v130 + 8))(v81, v78);
    uint64_t v89 = type metadata accessor for Date();
    uint64_t v90 = *(void *)(v89 - 8);
    uint64_t v91 = v90;
    uint64_t v92 = v133;
    if (v88)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v90 + 16))(v133, v83, v89);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v91 + 56))(v92, 0, 1, v89);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v133, 1, 1, v89);
    }
  }
  else
  {
    uint64_t v104 = v118;
    _s10Foundation4DateVSgWObTm_0(v86, v118, (uint64_t (*)(void))type metadata accessor for Range<Date>);
    char v105 = static Date.== infix(_:_:)();
    uint64_t v106 = v133;
    if (v105)
    {
      uint64_t v107 = v104 + *(int *)(v87 + 36);
      uint64_t v108 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 16))(v106, v107, v108);
    }
    else
    {
      uint64_t v108 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 16))(v106, v104, v108);
    }
    uint64_t v112 = v127;
    uint64_t v113 = v130;
    _sSny10Foundation4DateVGWOhTm_0(v104, (uint64_t (*)(void))type metadata accessor for Range<Date>);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v81, v112);
    type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56))(v106, 0, 1, v108);
  }
}

uint64_t SystemFormatStyle.DateOffset.input(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v133 = a2;
  type metadata accessor for Range<Date>?(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v125 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<Date>();
  uint64_t v126 = v7;
  uint64_t v123 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v122 = (uint64_t)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v118 = (uint64_t)&v114 - v10;
  uint64_t v11 = (void (*)(uint64_t))MEMORY[0x263F07408];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07408], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v129 = (uint64_t)&v114 - v13;
  type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v11);
  uint64_t v121 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v120 = (char *)&v114 - v15;
  uint64_t v127 = type metadata accessor for Date.ComponentsFormatStyle();
  uint64_t v130 = *(void *)(v127 - 8);
  MEMORY[0x270FA5388](v127);
  char v124 = (char *)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x263F07EA0];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v114 - v19;
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v17, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field));
  MEMORY[0x270FA5388](v21 - 8);
  char v132 = (char *)&v114 - v22;
  uint64_t v23 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  uint64_t v131 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  unint64_t v119 = (char *)&v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(0);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)?(0);
  MEMORY[0x270FA5388](v28 - 8);
  uint64_t v30 = (char *)&v114 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for Duration.TimeFormatStyle.Attributed();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v114 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v35 = SystemFormatStyle.DateOffset.canUseTimeStyle.getter();
  uint64_t v134 = a1;
  uint64_t v128 = (char *)v23;
  if (v35)
  {
    SystemFormatStyle.DateOffset.timeStyle(for:)(a1, (uint64_t)v27);
    type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)();
    uint64_t v37 = v36;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48))(v27, 1, v36) == 1)
    {
      _sSny10Foundation4DateVGWOhTm_0((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?);
      type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v30, 1, 1, v38);
    }
    else
    {
      uint64_t v116 = &v27[*(int *)(v37 + 48)];
      type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)();
      uint64_t v40 = v39;
      uint64_t v41 = *(int *)(v39 + 48);
      uint64_t v117 = v3;
      uint64_t v42 = &v30[v41];
      uint64_t v115 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
      v115(v30, v27, v31);
      uint64_t v43 = type metadata accessor for Date.ComponentsFormatStyle.Field();
      uint64_t v44 = *(void *)(v43 - 8);
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v42, v116, v43);
      uint64_t v45 = *(void *)(v40 - 8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v30, 0, 1, v40);
      int v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48))(v30, 1, v40);
      uint64_t v3 = v117;
      if (v46 != 1)
      {
        uint64_t v109 = &v30[*(int *)(v40 + 48)];
        v115(v34, v30, v31);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v109, v43);
        Date.timeIntervalSince(_:)();
        static Duration.seconds(_:)();
        _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, MEMORY[0x263F07E58]);
        DiscreteFormatStyle<>.input(after:)();
        char v111 = v110;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
        uint64_t v102 = v133;
        if ((v111 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_20;
      }
    }
    _sSny10Foundation4DateVGWOhTm_0((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)?);
    a1 = v134;
    uint64_t v23 = (uint64_t)v128;
  }
  SystemFormatStyle.DateOffset.unitsStyle(for:)(a1, (uint64_t)v20);
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0]);
  uint64_t v48 = v47;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48))(v20, 1, v47) == 1)
  {
    uint64_t v49 = (void (*)(uint64_t))MEMORY[0x263F07EA0];
    outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v20, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
    type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v49);
    uint64_t v51 = (uint64_t)v132;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v132, 1, 1, v50);
    goto LABEL_9;
  }
  uint64_t v116 = &v20[*(int *)(v48 + 48)];
  uint64_t v117 = &v20[*(int *)(v48 + 64)];
  type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0]);
  uint64_t v53 = v52;
  uint64_t v54 = v3;
  uint64_t v51 = (uint64_t)v132;
  uint64_t v55 = &v132[*(int *)(v52 + 48)];
  uint64_t v56 = &v132[*(int *)(v52 + 64)];
  uint64_t v115 = *(void (**)(char *, char *, uint64_t))(v131 + 32);
  v115(v132, v20, v23);
  uint64_t v57 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
  uint64_t v60 = v55;
  uint64_t v3 = v54;
  v59(v60, v116, v57);
  BOOL v61 = v56;
  a1 = v134;
  v59(v61, v117, v57);
  uint64_t v62 = *(void *)(v53 - 8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v62 + 56))(v51, 0, 1, v53);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v51, 1, v53) != 1)
  {
    uint64_t v94 = v51 + *(int *)(v53 + 48);
    uint64_t v95 = v51 + *(int *)(v53 + 64);
    uint64_t v96 = v119;
    uint64_t v97 = v51;
    uint64_t v98 = v128;
    v115(v119, (char *)v97, (uint64_t)v128);
    uint64_t v99 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
    v99(v95, v57);
    v99(v94, v57);
    Date.timeIntervalSince(_:)();
    static Duration.seconds(_:)();
    _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, MEMORY[0x263F07EA0]);
    DiscreteFormatStyle<>.input(after:)();
    char v101 = v100;
    (*(void (**)(char *, char *))(v131 + 8))(v96, v98);
    uint64_t v102 = v133;
    if ((v101 & 1) == 0)
    {
LABEL_15:
      SystemFormatStyle.DateOffset.nextInputRoundingHigher(for:)(v102);
      uint64_t v67 = type metadata accessor for Date();
      uint64_t v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56);
      uint64_t v69 = v102;
      goto LABEL_16;
    }
LABEL_20:
    uint64_t v67 = type metadata accessor for Date();
    uint64_t v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56);
    uint64_t v69 = v102;
    uint64_t v103 = 1;
    return v68(v69, v103, 1, v67);
  }
LABEL_9:
  outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(v51, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field));
  uint64_t v63 = v129;
  SystemFormatStyle.DateOffset.componentsStyle(for:)(a1, v129);
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07408]);
  uint64_t v65 = v64;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 48))(v63, 1, v64) == 1)
  {
    outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(v63, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07408], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
    Date.timeIntervalSinceReferenceDate.getter();
    uint64_t v66 = v133;
    Date.init(timeIntervalSinceReferenceDate:)();
    uint64_t v67 = type metadata accessor for Date();
    uint64_t v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56);
    uint64_t v69 = v66;
LABEL_16:
    uint64_t v103 = 0;
    return v68(v69, v103, 1, v67);
  }
  uint64_t v131 = v63 + *(int *)(v65 + 48);
  char v132 = (char *)(v63 + *(int *)(v65 + 64));
  uint64_t v71 = v120;
  uint64_t v70 = v121;
  uint64_t v72 = &v120[*(int *)(v121 + 48)];
  uint64_t v128 = &v120[*(int *)(v121 + 64)];
  uint64_t v117 = v3;
  uint64_t v73 = *(void (**)(char *, uint64_t, uint64_t))(v130 + 32);
  uint64_t v74 = v127;
  v73(v120, v63, v127);
  uint64_t v75 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v76 = *(void *)(v75 - 8);
  uint64_t v77 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 32);
  v77(v72, v131, v75);
  v77(v128, (uint64_t)v132, v75);
  uint64_t v78 = v74;
  uint64_t v79 = &v71[*(int *)(v70 + 48)];
  uint64_t v80 = &v71[*(int *)(v70 + 64)];
  uint64_t v81 = v124;
  v73(v124, (uint64_t)v71, v78);
  uint64_t v82 = v134;
  uint64_t v83 = v117;
  uint64_t v84 = *(void (**)(char *, uint64_t))(v76 + 8);
  v84(v80, v75);
  v84(v79, v75);
  uint64_t v85 = v122;
  SystemFormatStyle.DateOffset.dateRange(for:)(v82, v122);
  uint64_t v86 = (uint64_t)v125;
  Date.ComponentsFormatStyle.input(after:)();
  _sSny10Foundation4DateVGWOhTm_0(v85, (uint64_t (*)(void))type metadata accessor for Range<Date>);
  uint64_t v87 = v126;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v123 + 48))(v86, 1, v126) == 1)
  {
    _sSny10Foundation4DateVGWOhTm_0(v86, (uint64_t (*)(void))type metadata accessor for Range<Date>?);
    char v88 = static Date.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v130 + 8))(v81, v78);
    uint64_t v89 = type metadata accessor for Date();
    uint64_t v90 = *(void *)(v89 - 8);
    uint64_t v91 = v90;
    uint64_t v92 = v133;
    if (v88)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v90 + 16))(v133, v83, v89);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v91 + 56))(v92, 0, 1, v89);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v133, 1, 1, v89);
    }
  }
  else
  {
    uint64_t v104 = v118;
    _s10Foundation4DateVSgWObTm_0(v86, v118, (uint64_t (*)(void))type metadata accessor for Range<Date>);
    char v105 = static Date.== infix(_:_:)();
    uint64_t v106 = v133;
    if (v105)
    {
      uint64_t v107 = v104 + *(int *)(v87 + 36);
      uint64_t v108 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 16))(v106, v107, v108);
    }
    else
    {
      uint64_t v108 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 16))(v106, v104, v108);
    }
    uint64_t v112 = v127;
    uint64_t v113 = v130;
    _sSny10Foundation4DateVGWOhTm_0(v104, (uint64_t (*)(void))type metadata accessor for Range<Date>);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v81, v112);
    type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56))(v106, 0, 1, v108);
  }
}

void SystemFormatStyle.DateOffset.unitsConfigurationAllowsTimeStyle.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v28 - v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v12 = *(void *)(v1 + *(int *)(v11 + 32));
  uint64_t v13 = *(void *)(v1 + *(int *)(v11 + 24));
  if (v12 >= 3)
  {
    uint64_t v14 = v13 + 2;
    if (__OFADD__(v13, 2))
    {
      __break(1u);
    }
    else
    {
      BOOL v15 = __OFSUB__(v14, v12);
      uint64_t v16 = v14 - v12;
      if (!v15)
      {
        if (v16 <= 1) {
          uint64_t v13 = 1;
        }
        else {
          uint64_t v13 = v16;
        }
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_7:
  outlined init with copy of SystemFormatStyle.DateOffset(v1, (uint64_t)&v28 - v9, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  if (v13 == 2)
  {
    uint64_t v17 = *(void *)&v10[v2[5]];
    type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, MEMORY[0x263F073D0], MEMORY[0x263F8E0F8]);
    type metadata accessor for Date.ComponentsFormatStyle.Field();
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_2461BDD50;
    static Date.ComponentsFormatStyle.Field.minute.getter();
    static Date.ComponentsFormatStyle.Field.second.getter();
    uint64_t v19 = specialized Set.init(_nonEmptyArrayLiteral:)(v18);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    specialized static Set.== infix(_:_:)(v17, v19);
    LOBYTE(v17) = v20;
    swift_bridgeObjectRelease();
    _sSny10Foundation4DateVGWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    outlined init with copy of SystemFormatStyle.DateOffset(v1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    if (v17)
    {
      uint64_t v4 = v7;
LABEL_20:
      _sSny10Foundation4DateVGWOhTm_0((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      return;
    }
  }
  else
  {
    _sSny10Foundation4DateVGWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    outlined init with copy of SystemFormatStyle.DateOffset(v1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  }
  uint64_t v21 = *(void *)&v7[v2[8]];
  uint64_t v22 = *(void *)&v7[v2[6]];
  if (v21 < 3)
  {
LABEL_17:
    outlined init with copy of SystemFormatStyle.DateOffset((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    if (v22 == 3)
    {
      uint64_t v25 = *(void *)&v4[v2[5]];
      type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, MEMORY[0x263F073D0], MEMORY[0x263F8E0F8]);
      type metadata accessor for Date.ComponentsFormatStyle.Field();
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_2461BE2B0;
      static Date.ComponentsFormatStyle.Style.spellOut.getter();
      static Date.ComponentsFormatStyle.Field.minute.getter();
      static Date.ComponentsFormatStyle.Field.second.getter();
      uint64_t v27 = specialized Set.init(_nonEmptyArrayLiteral:)(v26);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      specialized static Set.== infix(_:_:)(v25, v27);
      swift_bridgeObjectRelease();
    }
    _sSny10Foundation4DateVGWOhTm_0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    goto LABEL_20;
  }
  uint64_t v23 = v22 + 2;
  if (__OFADD__(v22, 2)) {
    goto LABEL_23;
  }
  BOOL v15 = __OFSUB__(v23, v21);
  uint64_t v24 = v23 - v21;
  if (!v15)
  {
    if (v24 <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v24;
    }
    goto LABEL_17;
  }
LABEL_24:
  __break(1u);
}

uint64_t getter of fieldsToDisplay #1 in SystemFormatStyle.DateOffset.componentsStyle(for:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[2];
  if (v4)
  {
    uint64_t v5 = v4;
LABEL_10:
    swift_unknownObjectRetain();
    return v5;
  }
  uint64_t v7 = SystemFormatStyle.DateOffset.applicableFields(for:)(a3);
  uint64_t v9 = v8;
  int64_t v11 = v10;
  unint64_t v13 = v12;
  uint64_t v14 = type metadata accessor for SystemFormatStyle.DateOffset();
  uint64_t v15 = *(void *)(a2 + *(int *)(v14 + 32));
  uint64_t result = *(void *)(a2 + *(int *)(v14 + 24));
  if (v15 < 3)
  {
LABEL_9:
    uint64_t v5 = specialized Collection.prefix(_:)(result, (uint64_t)v7, v9, v11, v13);
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    swift_beginAccess();
    a1[2] = v5;
    a1[3] = v21;
    a1[4] = v23;
    a1[5] = v25;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_10;
  }
  uint64_t v17 = result + 2;
  if (__OFADD__(result, 2))
  {
    __break(1u);
  }
  else
  {
    BOOL v18 = __OFSUB__(v17, v15);
    uint64_t v19 = v17 - v15;
    if (!v18)
    {
      if (v19 <= 1) {
        uint64_t result = 1;
      }
      else {
        uint64_t result = v19;
      }
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

void *SystemFormatStyle.DateOffset.applicableFields(for:)(uint64_t a1)
{
  uint64_t v35 = a1;
  uint64_t v34 = type metadata accessor for DateComponents();
  uint64_t v2 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v33 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Calendar.Component();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemFormatStyle.DateOffset();
  uint64_t v9 = *(void *)(v1 + *(int *)(v8 + 20));
  uint64_t v36 = v1;
  uint64_t v38 = v1;
  swift_bridgeObjectRetain();
  specialized _NativeSet.filter(_:)((uint64_t)partial apply for closure #1 in SystemFormatStyle.DateOffset.applicableFields(for:), (uint64_t)v37, v9);
  uint64_t v10 = swift_bridgeObjectRetain();
  int64_t v11 = (void *)specialized _copyCollectionToContiguousArray<A>(_:)(v10);
  swift_release();
  uint64_t v39 = v11;
  specialized MutableCollection<>.sort(by:)(&v39);
  swift_release();
  unint64_t v12 = v39;
  uint64_t v32 = v39[2];
  if (!v32) {
    goto LABEL_10;
  }
  unint64_t v13 = 0;
  uint64_t v14 = *(void *)(type metadata accessor for Date.ComponentsFormatStyle.Field() - 8);
  unint64_t v25 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v26 = v12;
  uint64_t v15 = (uint64_t)v12 + v25;
  uint64_t v31 = v36 + *(int *)(v8 + 40);
  uint64_t v27 = *(void *)(v14 + 72);
  uint64_t v16 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v29 = v5 + 8;
  uint64_t v30 = v5 + 16;
  long long v28 = xmmword_2461B9DC0;
  do
  {
    SystemFormatStyle.DateOffset.component(for:)(v15, (uint64_t)v7);
    type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>, MEMORY[0x263F07908], MEMORY[0x263F8E0F8]);
    unint64_t v17 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = v28;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v18 + v17, v7, v4);
    specialized Set.init(_nonEmptyArrayLiteral:)(v18);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v19 = v33;
    Calendar.dateComponents(_:from:to:)();
    swift_bridgeObjectRelease();
    uint64_t v20 = DateComponents.value(for:)();
    LOBYTE(v17) = v21;
    (*v16)(v19, v34);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if ((v17 & 1) == 0 && v20)
    {
      unint64_t v12 = v26;
      goto LABEL_9;
    }
    ++v13;
    v15 += v27;
  }
  while (v32 != v13);
  unint64_t v12 = v26;
  uint64_t v22 = v26[2];
  if (!v22) {
    goto LABEL_10;
  }
  unint64_t v13 = v22 - 1;
LABEL_9:
  if (v13 >= v12[2]) {
LABEL_10:
  }
    type metadata accessor for Date.ComponentsFormatStyle.Field();
  return v12;
}

BOOL closure #1 in SystemFormatStyle.DateOffset.applicableFields(for:)(uint64_t a1, uint64_t a2)
{
  Date.ComponentsFormatStyle.Field.magnitude.getter(&v5);
  double v3 = v5;
  return v3 >= 1.0
             / dbl_2461D8AB8[*(char *)(a2 + *(int *)(type metadata accessor for SystemFormatStyle.DateOffset() + 44))];
}

uint64_t protocol witness for UpdateFrequencyDependentFormatStyle.updateFrequency(_:) in conformance SystemFormatStyle.DateOffset@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  uint64_t result = outlined init with copy of SystemFormatStyle.DateOffset(v3, a3, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  *(unsigned char *)(a3 + *(int *)(a2 + 44)) = v6;
  return result;
}

uint64_t static SystemFormatStyle.DateOffset.representation<A>(of:for:)@<X0>(int *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v157 = a3;
  uint64_t v158 = a4;
  uint64_t v161 = a1;
  uint64_t v156 = type metadata accessor for Date();
  uint64_t v155 = *(void *)(v156 - 8);
  MEMORY[0x270FA5388](v156);
  uint64_t v138 = (char *)&v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v144 = (char *)&v136 - v9;
  uint64_t v143 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  uint64_t v142 = *(void *)(v143 - 8);
  MEMORY[0x270FA5388](v143);
  uint64_t v141 = (char *)&v136 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  uint64_t v139 = *(void *)(v140 - 8);
  MEMORY[0x270FA5388](v140);
  uint64_t v152 = (char *)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v153 = (char *)&v136 - v13;
  uint64_t v149 = type metadata accessor for Calendar();
  uint64_t v148 = *(void *)(v149 - 8);
  MEMORY[0x270FA5388](v149);
  char v146 = (char *)&v136 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v160 = (char *)&v136 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v159 = (char *)&v136 - v18;
  uint64_t v19 = type metadata accessor for Locale();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v136 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  unint64_t v25 = (char *)&v136 - v24;
  MEMORY[0x270FA5388](v26);
  long long v28 = (char *)&v136 - v27;
  uint64_t v29 = type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x270FA5388](v29);
  uint64_t v154 = (char *)&v136 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v151 = (uint64_t)&v136 - v32;
  MEMORY[0x270FA5388](v33);
  uint64_t v150 = (char *)&v136 - v34;
  MEMORY[0x270FA5388](v35);
  uint64_t v147 = (uint64_t)&v136 - v36;
  MEMORY[0x270FA5388](v37);
  uint64_t v145 = (uint64_t)&v136 - v38;
  MEMORY[0x270FA5388](v39);
  uint64_t v41 = (char *)&v136 - v40;
  int v42 = *a2;
  uint64_t v43 = _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
  if (v42 > 1)
  {
    uint64_t v167 = v157;
    uint64_t v168 = v29;
    uint64_t v169 = v158;
    uint64_t v170 = v43;
    uint64_t v171 = &protocol witness table for AttributedString;
    uint64_t v71 = type metadata accessor for TimeDataFormatting.Resolvable();
    a5[3] = v71;
    a5[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
    return (*(uint64_t (**)(uint64_t *, int *, uint64_t))(*(void *)(v71 - 8) + 16))(boxed_opaque_existential_1, v161, v71);
  }
  uint64_t v137 = a5;
  uint64_t v167 = v157;
  uint64_t v168 = v29;
  uint64_t v169 = v158;
  uint64_t v170 = v43;
  uint64_t v171 = &protocol witness table for AttributedString;
  uint64_t v44 = type metadata accessor for TimeDataFormatting.Resolvable();
  outlined init with copy of SystemFormatStyle.DateOffset((uint64_t)v161 + *(int *)(v44 + 60), (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  long long v166 = 0uLL;
  uint64_t v45 = (int *)v29;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  int v46 = *(void (**)(long long *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  uint64_t v47 = static CoreGlue2.shared;
  v46(&v166);

  uint64_t v161 = v45;
  uint64_t v48 = v45[9];
  uint64_t v158 = v41;
  uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v49(v28, &v41[v48], v19);
  v49(v25, v28, v19);
  uint64_t v50 = v166;
  v49(v22, v25, v19);
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v166, (uint64_t)v22);
  swift_release();
  uint64_t v51 = *(void (**)(char *, uint64_t))(v20 + 8);
  v51(v22, v19);
  if (*((void *)&v166 + 1))
  {
    uint64_t v52 = v166;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v50, v52);
    swift_release();
    swift_release();
  }
  swift_release();
  v51(v25, v19);
  v51(v28, v19);
  uint64_t v53 = v161;
  uint64_t v55 = (uint64_t)v158;
  uint64_t v54 = v159;
  uint64_t v56 = v148;
  uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v148 + 16);
  uint64_t v58 = v149;
  v57(v159, &v158[v161[10]], v149);
  uint64_t v59 = v160;
  v57(v160, v54, v58);
  uint64_t v60 = v166;
  uint64_t v61 = (uint64_t)v146;
  v57(v146, v59, v58);
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v166, v61);
  swift_release();
  uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
  v62(v61, v58);
  uint64_t v63 = v152;
  if (*((void *)&v166 + 1))
  {
    uint64_t v64 = v166;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v60, v64);
    swift_release();
    swift_release();
  }
  swift_release();
  v62((uint64_t)v160, v58);
  v62((uint64_t)v159, v58);
  char v65 = *(unsigned char *)(v55 + v53[13]);
  uint64_t v66 = v145;
  outlined init with copy of SystemFormatStyle.DateOffset(v55, v145, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v67 = (uint64_t)v154;
  uint64_t v68 = v153;
  if (v65)
  {
    _sSny10Foundation4DateVGWOhTm_0(v66, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    uint64_t v69 = v147;
    outlined init with copy of SystemFormatStyle.DateOffset(v55, v147, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    uint64_t v70 = (uint64_t)v150;
  }
  else
  {
    char v74 = *(unsigned char *)(v66 + v53[12]);
    _sSny10Foundation4DateVGWOhTm_0(v66, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    uint64_t v69 = v147;
    outlined init with copy of SystemFormatStyle.DateOffset(v55, v147, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    uint64_t v70 = (uint64_t)v150;
    if ((v74 & 1) == 0)
    {
      _sSny10Foundation4DateVGWOhTm_0(v69, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      outlined init with copy of SystemFormatStyle.DateOffset(v55, v70, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      goto LABEL_15;
    }
  }
  unsigned int v75 = *(unsigned __int8 *)(v69 + v53[11]);
  _sSny10Foundation4DateVGWOhTm_0(v69, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  outlined init with copy of SystemFormatStyle.DateOffset(v55, v70, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  if (v75 >= 2)
  {
    _sSny10Foundation4DateVGWOhTm_0(v70, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    uint64_t v76 = v151;
    outlined init with copy of SystemFormatStyle.DateOffset(v55, v151, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
LABEL_21:
    _sSny10Foundation4DateVGWOhTm_0(v76, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
LABEL_22:
    uint64_t v90 = *(void *)(v55 + v53[8]);
    if (v90 > 1)
    {
      static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
    }
    else if (v90 == 1)
    {
      if (*(unsigned char *)(v55 + v53[12])) {
        static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
      }
      else {
        static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter();
      }
    }
    else
    {
      static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
    }
    uint64_t v91 = v140;
    uint64_t v92 = v139;
    static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
    _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth, MEMORY[0x263F07EF0]);
    char v93 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v94 = *(void (**)(char *, uint64_t))(v92 + 8);
    v94(v63, v91);
    if (v93)
    {
      v94(v68, v91);
      LODWORD(v160) = 0;
    }
    else
    {
      static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter();
      char v95 = dispatch thunk of static Equatable.== infix(_:_:)();
      v94(v63, v91);
      if (v95)
      {
        v94(v68, v91);
        int v96 = 1;
      }
      else
      {
        static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
        char v97 = dispatch thunk of static Equatable.== infix(_:_:)();
        v94(v63, v91);
        v94(v68, v91);
        if (v97) {
          int v96 = 1;
        }
        else {
          int v96 = 2;
        }
      }
      LODWORD(v160) = v96;
    }
    uint64_t v98 = *(void *)(v55 + v161[5]);
    type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, MEMORY[0x263F073D0], MEMORY[0x263F8E0F8]);
    type metadata accessor for Date.ComponentsFormatStyle.Field();
    uint64_t v99 = swift_allocObject();
    *(_OWORD *)(v99 + 16) = xmmword_2461BE290;
    swift_bridgeObjectRetain();
    static Date.ComponentsFormatStyle.Style.wide.getter();
    static Date.ComponentsFormatStyle.Style.narrow.getter();
    static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
    static Date.ComponentsFormatStyle.Style.spellOut.getter();
    static Date.ComponentsFormatStyle.Field.minute.getter();
    static Date.ComponentsFormatStyle.Field.second.getter();
    uint64_t v100 = specialized Set.init(_nonEmptyArrayLiteral:)(v99);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    specialized static Set.== infix(_:_:)(v98, v100);
    char v102 = v101;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v103 = 0;
    uint64_t v104 = v143;
    uint64_t v105 = v142;
    uint64_t v106 = v141;
    if ((v102 & 1) == 0)
    {
      uint64_t v107 = swift_bridgeObjectRetain();
      uint64_t v108 = specialized Sequence.compactMap<A>(_:)(v107, v98);
      swift_bridgeObjectRelease();
      uint64_t v109 = *(void *)(v108 + 16);
      if (v109)
      {
        uint64_t v103 = 0;
        char v110 = (uint64_t *)(v108 + 32);
        do
        {
          uint64_t v112 = *v110++;
          uint64_t v111 = v112;
          if ((v112 & ~v103) == 0) {
            uint64_t v111 = 0;
          }
          v103 |= v111;
          --v109;
        }
        while (v109);
      }
      else
      {
        uint64_t v103 = 0;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v113 = v161;
    uint64_t v114 = v55 + v161[7];
    static NumberFormatStyleConfiguration.SignDisplayStrategy.always(includingZero:)();
    LOBYTE(v114) = MEMORY[0x24C520A70](v114, v106);
    uint64_t v115 = *(void (**)(char *, uint64_t))(v105 + 8);
    v115(v106, v104);
    outlined init with copy of SystemFormatStyle.DateOffset(v55, v67, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    if (v114)
    {
      _sSny10Foundation4DateVGWOhTm_0(v67, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    }
    else
    {
      uint64_t v116 = v67 + v113[7];
      static NumberFormatStyleConfiguration.SignDisplayStrategy.always(includingZero:)();
      LOBYTE(v116) = MEMORY[0x24C520A70](v116, v106);
      v115(v106, v104);
      _sSny10Foundation4DateVGWOhTm_0(v67, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      if ((v116 & 1) == 0)
      {
        char v117 = (char)v160;
        if (one-time initialization token for relative != -1) {
          swift_once();
        }
        uint64_t v118 = &static Text.DateStyle.relative;
        goto LABEL_55;
      }
    }
    char v117 = (char)v160;
    if (one-time initialization token for offset != -1) {
      swift_once();
    }
    uint64_t v118 = &static Text.DateStyle.offset;
LABEL_55:
    char v119 = *v118;
    char v120 = v118[16];
    uint64_t v121 = *((void *)v118 + 1);
    BOOL v122 = (v102 & 1) == 0;
    if (v102) {
      uint64_t v123 = v121;
    }
    else {
      uint64_t v123 = v103;
    }
    if (!v122) {
      char v117 = v120;
    }
    char v124 = v144;
    (*(void (**)(char *, uint64_t, uint64_t))(v155 + 16))(v144, v55, v156);
    v163[0] = v119;
    uint64_t v164 = v123;
    char v165 = v117;
    long long v162 = v166;
    uint64_t v125 = type metadata accessor for ResolvableAbsoluteDate();
    uint64_t v126 = v137;
    v137[3] = v125;
    v126[4] = (uint64_t)&protocol witness table for ResolvableAbsoluteDate;
    uint64_t v127 = v126;
    goto LABEL_61;
  }
LABEL_15:
  SystemFormatStyle.DateOffset.unitsConfigurationAllowsTimeStyle.getter();
  char v78 = v77;
  _sSny10Foundation4DateVGWOhTm_0(v70, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v76 = v151;
  outlined init with copy of SystemFormatStyle.DateOffset(v55, v151, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  if ((v78 & 1) == 0) {
    goto LABEL_21;
  }
  char v79 = *(unsigned char *)(v76 + v53[13]);
  _sSny10Foundation4DateVGWOhTm_0(v76, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  if ((v79 & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v80 = *(void *)(v55 + v53[5]);
  type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, MEMORY[0x263F073D0], MEMORY[0x263F8E0F8]);
  type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v81 = swift_allocObject();
  *(_OWORD *)(v81 + 16) = xmmword_2461BE2B0;
  swift_bridgeObjectRetain();
  static Date.ComponentsFormatStyle.Style.spellOut.getter();
  static Date.ComponentsFormatStyle.Field.minute.getter();
  static Date.ComponentsFormatStyle.Field.second.getter();
  uint64_t v82 = specialized Set.init(_nonEmptyArrayLiteral:)(v81);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  specialized static Set.== infix(_:_:)(v80, v82);
  char v84 = v83;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v85 = *(void (**)(char *, uint64_t, uint64_t))(v155 + 16);
  if (v84)
  {
    uint64_t v86 = v144;
    v85(v144, v55, v156);
    uint64_t v87 = v137;
    if (one-time initialization token for timer != -1) {
      swift_once();
    }
    v163[0] = static Text.DateStyle.timer;
    uint64_t v164 = qword_268EFC3D0;
    char v165 = byte_268EFC3D8;
    long long v162 = v166;
    v87[3] = type metadata accessor for ResolvableAbsoluteDate();
    v87[4] = (uint64_t)&protocol witness table for ResolvableAbsoluteDate;
    char v88 = __swift_allocate_boxed_opaque_existential_1(v87);
    uint64_t v89 = (uint64_t)v86;
    goto LABEL_62;
  }
  char v124 = v138;
  v85(v138, v55, v156);
  uint64_t v128 = swift_bridgeObjectRetain();
  uint64_t v129 = specialized Sequence.compactMap<A>(_:)(v128, v80);
  swift_bridgeObjectRelease();
  uint64_t v130 = *(void *)(v129 + 16);
  uint64_t v131 = v137;
  uint64_t v132 = 0;
  if (v130)
  {
    uint64_t v133 = (uint64_t *)(v129 + 32);
    do
    {
      uint64_t v135 = *v133++;
      uint64_t v134 = v135;
      if ((v135 & ~v132) == 0) {
        uint64_t v134 = 0;
      }
      v132 |= v134;
      --v130;
    }
    while (v130);
  }
  swift_bridgeObjectRelease();
  v163[0] = 4;
  uint64_t v164 = v132;
  char v165 = 2;
  long long v162 = v166;
  v131[3] = type metadata accessor for ResolvableAbsoluteDate();
  v131[4] = (uint64_t)&protocol witness table for ResolvableAbsoluteDate;
  uint64_t v127 = v131;
LABEL_61:
  char v88 = __swift_allocate_boxed_opaque_existential_1(v127);
  uint64_t v89 = (uint64_t)v124;
LABEL_62:
  ResolvableAbsoluteDate.init(_:style:in:)(v89, v163, (uint64_t *)&v162, (uint64_t)v88);
  return _sSny10Foundation4DateVGWOhTm_0(v55, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
}

uint64_t one-time initialization function for orderedFields()
{
  type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, MEMORY[0x263F073D0], MEMORY[0x263F8E0F8]);
  type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2461D6DD0;
  static Date.ComponentsFormatStyle.Style.wide.getter();
  static Date.ComponentsFormatStyle.Style.narrow.getter();
  static Date.ComponentsFormatStyle.Style.abbreviated.getter();
  static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
  static Date.ComponentsFormatStyle.Style.spellOut.getter();
  static Date.ComponentsFormatStyle.Field.minute.getter();
  uint64_t result = static Date.ComponentsFormatStyle.Field.second.getter();
  static Date.ComponentsFormatStyle.Field.orderedFields = v0;
  return result;
}

uint64_t SystemFormatStyle.DateOffset.interfaceIdiom(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  outlined init with copy of SystemFormatStyle.DateOffset(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<ComplicationInterfaceIdiom>);
  double v5 = *(uint64_t (**)(void))(v4 + 8);
  if (v5())
  {
    char v6 = 1;
  }
  else
  {
    type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, &lazy cache variable for type metadata for InterfaceIdiomBox<WatchInterfaceIdiom>);
    char v6 = v5() & 1;
  }
  uint64_t result = type metadata accessor for SystemFormatStyle.DateOffset();
  *(unsigned char *)(a2 + *(int *)(result + 48)) = v6;
  return result;
}

uint64_t protocol witness for InterfaceIdiomDependentFormatStyle.interfaceIdiom(_:) in conformance SystemFormatStyle.DateOffset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 8);
  outlined init with copy of SystemFormatStyle.DateOffset(v3, a3, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<ComplicationInterfaceIdiom>);
  uint64_t v7 = *(uint64_t (**)(void))(v6 + 8);
  uint64_t result = v7();
  BOOL v9 = 1;
  if ((result & 1) == 0)
  {
    type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, &lazy cache variable for type metadata for InterfaceIdiomBox<WatchInterfaceIdiom>);
    uint64_t result = v7();
    if ((result & 1) == 0) {
      BOOL v9 = 0;
    }
  }
  *(unsigned char *)(a3 + *(int *)(a2 + 48)) = v9;
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  double v5 = (uint64_t (*)(char *))isStackAllocationSafe;
  v14[1] = *MEMORY[0x263EF8340];
  char v6 = *(unsigned char *)(a3 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    specialized closure #1 in _NativeSet.filter(_:)((void *)((char *)v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a3, v5);
    uint64_t v10 = v9;
    swift_release();
    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v11, v7, a3, v5);
    uint64_t v10 = v12;
    swift_release();
    MEMORY[0x24C527CC0](v11, -1, -1);
  }
  return v10;
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t v36 = a4;
  uint64_t v28 = a2;
  uint64_t v29 = a1;
  uint64_t v35 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v7.n128_f64[0] = MEMORY[0x270FA5388](v35);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v37 = a3;
  uint64_t v11 = *(void *)(a3 + 56);
  uint64_t v30 = 0;
  uint64_t v31 = a3 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v32 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v33 = v6 + 16;
  uint64_t v34 = v6;
  uint64_t v15 = (void (**)(char *, uint64_t))(v6 + 8);
  while (v14)
  {
    unint64_t v16 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v17 = v16 | (v10 << 6);
LABEL_17:
    uint64_t v21 = v35;
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v34 + 16))(v9, *(void *)(v37 + 48) + *(void *)(v34 + 72) * v17, v35, v7);
    char v22 = v36(v9);
    if (v4)
    {
      (*v15)(v9, v21);
      return;
    }
    char v23 = v22;
    (*v15)(v9, v21);
    if (v23)
    {
      *(unint64_t *)((char *)v29 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      BOOL v18 = __OFADD__(v30++, 1);
      if (v18) {
        goto LABEL_30;
      }
    }
  }
  BOOL v18 = __OFADD__(v10++, 1);
  if (v18)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v10 >= v32) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v31 + 8 * v10);
  if (v19)
  {
LABEL_16:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v10 << 6);
    goto LABEL_17;
  }
  int64_t v20 = v10 + 1;
  if (v10 + 1 >= v32) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v31 + 8 * v20);
  if (v19) {
    goto LABEL_15;
  }
  int64_t v20 = v10 + 2;
  if (v10 + 2 >= v32) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v31 + 8 * v20);
  if (v19) {
    goto LABEL_15;
  }
  int64_t v20 = v10 + 3;
  if (v10 + 3 >= v32)
  {
LABEL_27:
    uint64_t v24 = v28;
    uint64_t v25 = v30;
    uint64_t v26 = v37;
    swift_retain();
    specialized _NativeSet.extractSubset(using:count:)(v29, v24, v25, v26);
    return;
  }
  unint64_t v19 = *(void *)(v31 + 8 * v20);
  if (v19)
  {
LABEL_15:
    int64_t v10 = v20;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_27;
    }
    unint64_t v19 = *(void *)(v31 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

void specialized Set.hash(into:)(long long *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  __n128 v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x270FA5388](v8 - 8);
  int64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *((void *)a1 + 8);
  long long v12 = a1[1];
  long long v36 = *a1;
  long long v37 = v12;
  long long v13 = a1[2];
  long long v14 = a1[3];
  uint64_t v28 = a1;
  long long v38 = v13;
  long long v39 = v14;
  uint64_t v40 = v11;
  Swift::Int v15 = Hasher._finalize()();
  uint64_t v16 = *(void *)(a2 + 56);
  uint64_t v30 = a2 + 56;
  Swift::Int v31 = v15;
  uint64_t v17 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v29 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v33 = v5 + 16;
  uint64_t v34 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v32 = v5 + 48;
  uint64_t v35 = a2;
  swift_bridgeObjectRetain();
  Swift::UInt v20 = 0;
  int64_t v21 = 0;
  if (!v19) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v22 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (unint64_t i = v22 | (v21 << 6); ; unint64_t i = __clz(__rbit64(v25)) + (v21 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, *(void *)(v35 + 48) + *(void *)(v5 + 72) * i, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1) {
      goto LABEL_19;
    }
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field();
    uint64_t v27 = dispatch thunk of Hashable._rawHashValue(seed:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v20 ^= v27;
    if (v19) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v21++, 1)) {
      goto LABEL_21;
    }
    if (v21 >= v29) {
      goto LABEL_18;
    }
    unint64_t v25 = *(void *)(v30 + 8 * v21);
    if (!v25) {
      break;
    }
LABEL_14:
    unint64_t v19 = (v25 - 1) & v25;
  }
  int64_t v26 = v21 + 1;
  if (v21 + 1 >= v29)
  {
LABEL_18:
    (*v34)(v10, 1, 1, v4);
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v20);
    return;
  }
  unint64_t v25 = *(void *)(v30 + 8 * v26);
  if (v25)
  {
    ++v21;
    goto LABEL_14;
  }
  while (1)
  {
    int64_t v21 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v21 >= v29) {
      goto LABEL_18;
    }
    unint64_t v25 = *(void *)(v30 + 8 * v21);
    ++v26;
    if (v25) {
      goto LABEL_14;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
}

uint64_t outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(uint64_t a1)
{
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), MEMORY[0x263F07EA0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sSny10Foundation4DateVGWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized static SystemFormatStyle.DateOffset.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static Date.== infix(_:_:)() & 1) != 0
    && (uint64_t v4 = (int *)type metadata accessor for SystemFormatStyle.DateOffset(),
        specialized static Set.== infix(_:_:)(*(void *)(a1 + v4[5]), *(void *)(a2 + v4[5])),
        (v5 & 1) != 0)
    && *(void *)(a1 + v4[6]) == *(void *)(a2 + v4[6])
    && (MEMORY[0x24C520A70](a1 + v4[7], a2 + v4[7]) & 1) != 0
    && *(void *)(a1 + v4[8]) == *(void *)(a2 + v4[8])
    && (MEMORY[0x24C5218A0](a1 + v4[9], a2 + v4[9]) & 1) != 0
    && (MEMORY[0x24C521A00](a1 + v4[10], a2 + v4[10]) & 1) != 0
    && *(unsigned __int8 *)(a1 + v4[11]) == *(unsigned __int8 *)(a2 + v4[11])
    && *(unsigned __int8 *)(a1 + v4[12]) == *(unsigned __int8 *)(a2 + v4[12]))
  {
    char v6 = *(unsigned char *)(a1 + v4[13]) ^ *(unsigned char *)(a2 + v4[13]) ^ 1;
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

unint64_t lazy protocol witness table accessor for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys);
  }
  return result;
}

void type metadata accessor for Set<Date.ComponentsFormatStyle.Field>(uint64_t a1)
{
}

void type metadata accessor for Range<Date>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field()
{
  return _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
}

{
  return _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
}

{
  return _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
}

unint64_t lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency()
{
  unint64_t result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.DateOffset.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys();
    unint64_t v7 = a3(a1, &unk_26FA583B8, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Range<Date>?(uint64_t a1)
{
}

void type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for Date.ComponentsFormatStyle.Field();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v5) {
      atomic_store(TupleTypeMetadata3, a2);
    }
  }
}

void type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)?(uint64_t a1)
{
}

void type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)()
{
  if (!lazy cache variable for type metadata for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field))
  {
    type metadata accessor for Duration.TimeFormatStyle.Attributed();
    type metadata accessor for Date.ComponentsFormatStyle.Field();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field));
    }
  }
}

uint64_t outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _s10Foundation4DateVSgWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

BOOL partial apply for closure #1 in SystemFormatStyle.DateOffset.discreteInput(after:)(uint64_t a1)
{
  return closure #1 in SystemFormatStyle.DateOffset.discreteInput(before:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t base witness table accessor for Decodable in SystemFormatStyle.DateOffset()
{
  return _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
}

uint64_t base witness table accessor for Encodable in SystemFormatStyle.DateOffset()
{
  return _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
}

uint64_t base witness table accessor for Hashable in SystemFormatStyle.DateOffset()
{
  return _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
}

uint64_t base witness table accessor for Equatable in SystemFormatStyle.DateOffset()
{
  return _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
}

uint64_t base witness table accessor for FormatStyle in SystemFormatStyle.DateOffset()
{
  return _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
}

_UNKNOWN **associated type witness table accessor for FormatStyle.FormatOutput : AttributedStringConvertible in SystemFormatStyle.DateOffset()
{
  return &protocol witness table for AttributedString;
}

uint64_t instantiation function for generic protocol witness table for SystemFormatStyle.DateOffset(uint64_t a1)
{
  uint64_t result = _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateV11FormatStyleVAeadAWlTm_0(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
  *(void *)(a1 + 8) = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for SystemFormatStyle.DateOffset(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (void *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
    *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
    uint64_t v9 = a3[7];
    uint64_t v10 = (char *)a1 + v9;
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
    long long v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = a3[9];
    *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    Swift::Int v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    uint64_t v18 = a3[10];
    unint64_t v19 = (char *)a1 + v18;
    Swift::UInt v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    uint64_t v22 = a3[12];
    *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *((unsigned char *)a1 + v22) = *((unsigned char *)a2 + v22);
    *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  }
  return a1;
}

uint64_t destroy for SystemFormatStyle.DateOffset(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[7];
  uint64_t v6 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + a2[9];
  uint64_t v8 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = a1 + a2[10];
  uint64_t v10 = type metadata accessor for Calendar();
  unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);

  return v11(v9, v10);
}

uint64_t initializeWithCopy for SystemFormatStyle.DateOffset(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  uint64_t v21 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithCopy for SystemFormatStyle.DateOffset(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v7 = a3[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v11 = a3[9];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  return a1;
}

uint64_t initializeWithTake for SystemFormatStyle.DateOffset(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  uint64_t v16 = a3[10];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  uint64_t v20 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v20) = *(unsigned char *)(a2 + v20);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for SystemFormatStyle.DateOffset(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  uint64_t v19 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v19) = *(unsigned char *)(a2 + v19);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemFormatStyle.DateOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245CF986C);
}

uint64_t sub_245CF986C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_12:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[5]);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  uint64_t v13 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v8 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a3[7];
LABEL_11:
    uint64_t v10 = a1 + v15;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    goto LABEL_12;
  }
  uint64_t v16 = type metadata accessor for Locale();
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a3[9];
    goto LABEL_11;
  }
  uint64_t v17 = type metadata accessor for Calendar();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a3[10];

  return v18(v20, a2, v19);
}

uint64_t storeEnumTagSinglePayload for SystemFormatStyle.DateOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245CF9A4C);
}

uint64_t sub_245CF9A4C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_10:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[5]) = (a2 - 1);
    return result;
  }
  uint64_t v13 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[7];
LABEL_9:
    uint64_t v12 = a1 + v15;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_10;
  }
  uint64_t v16 = type metadata accessor for Locale();
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[9];
    goto LABEL_9;
  }
  uint64_t v17 = type metadata accessor for Calendar();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a4[10];

  return v18(v20, a2, a2, v19);
}

uint64_t type metadata completion function for SystemFormatStyle.DateOffset()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Locale();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for Calendar();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SystemFormatStyle.DateOffset.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245CF9E54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SystemFormatStyle.DateOffset.CodingKeys()
{
  return &unk_26FA583B8;
}

uint64_t specialized SystemFormatStyle.DateOffset.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726F68636E61 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x466465776F6C6C61 && a2 == 0xED000073646C6569 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646C65694678616DLL && a2 == 0xED0000746E756F43 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1852270963 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x69726156657A6973 && a2 == 0xEB00000000746E61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x7246657461647075 && a2 == 0xEF79636E65757165 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6964496863746177 && a2 == 0xEA00000000006D6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024621F5A0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

void type metadata accessor for ClosedRange<AttributedString.Index>(uint64_t a1)
{
}

void type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for DefaultIndices<AttributedString.CharacterView>(255);
    uint64_t v7 = v6;
    uint64_t v8 = lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>((unint64_t *)&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>, type metadata accessor for DefaultIndices<AttributedString.CharacterView>, (void (*)(void))lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t outlined init with copy of SystemFormatStyle.DateOffset(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for (lower: AttributedString.Index, upper: AttributedString.Index)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_245CFA614()
{
  return MEMORY[0x263F06520];
}

uint64_t sub_245CFA624()
{
  return 8;
}

uint64_t sub_245CFA630()
{
  return swift_release();
}

uint64_t sub_245CFA638(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_245CFA64C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_245CFA658()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

BOOL partial apply for closure #1 in SystemFormatStyle.DateOffset.applicableFields(for:)(uint64_t a1)
{
  return closure #1 in SystemFormatStyle.DateOffset.applicableFields(for:)(a1, *(void *)(v1 + 16));
}

void type metadata accessor for Duration.UnitsFormatStyle.Unit?(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type [AttributedString.InterpolationOptions] and conformance [A](unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(255, a2, a3, MEMORY[0x263F8D488]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArraySlice<Date.ComponentsFormatStyle.Field> and conformance ArraySlice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ArraySlice<Date.ComponentsFormatStyle.Field> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<Date.ComponentsFormatStyle.Field> and conformance ArraySlice<A>)
  {
    type metadata accessor for ArraySlice<Date.ComponentsFormatStyle.Field>(255, &lazy cache variable for type metadata for ArraySlice<Date.ComponentsFormatStyle.Field>, MEMORY[0x263F073D0], MEMORY[0x263F8DAC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<Date.ComponentsFormatStyle.Field> and conformance ArraySlice<A>);
  }
  return result;
}

BOOL partial apply for closure #1 in SystemFormatStyle.DateOffset.discreteInput(before:)(uint64_t a1)
{
  return partial apply for closure #1 in SystemFormatStyle.DateOffset.discreteInput(after:)(a1);
}

__n128 VariableBlurStyle.init(radius:isOpaque:dither:mask:)@<Q0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  int v5 = *(_DWORD *)(a3 + 96);
  *(double *)a4 = a5;
  *(unsigned char *)(a4 + 8) = a1;
  *(unsigned char *)(a4 + 9) = a2;
  long long v6 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a4 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(a4 + 32) = v6;
  long long v7 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a4 + 48) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a4 + 64) = v7;
  __n128 result = *(__n128 *)(a3 + 64);
  long long v9 = *(_OWORD *)(a3 + 80);
  *(__n128 *)(a4 + 80) = result;
  *(_OWORD *)(a4 + 96) = v9;
  *(_DWORD *)(a4 + 112) = v5;
  return result;
}

double VariableBlurStyle.caFilterRadius.setter(double a1)
{
  double result = a1 + a1;
  *uint64_t v1 = result;
  return result;
}

BOOL VariableBlurStyle.isIdentity.getter()
{
  return *(double *)v0 <= 0.0 || *(unsigned __int8 *)(v0 + 113) << 8 == 512;
}

uint64_t protocol witness for EnvironmentalModifier.resolve(in:) in conformance VariableBlurEffect@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return VariableBlurEffect.resolve(in:)(a1, *(void *)(v2 + 8), *(unsigned __int8 *)(v2 + 16), a2, *(double *)v2);
}

double VariableBlurStyle.radius.getter()
{
  return *(double *)v0;
}

uint64_t (*VariableBlurStyle.radius.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t VariableBlurStyle.isOpaque.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t VariableBlurStyle.isOpaque.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*VariableBlurStyle.isOpaque.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t VariableBlurStyle.dither.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t VariableBlurStyle.dither.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 9) = result;
  return result;
}

uint64_t (*VariableBlurStyle.dither.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id VariableBlurStyle.mask.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + 64);
  uint64_t v9 = *(void *)(v1 + 72);
  uint64_t v10 = *(void *)(v1 + 80);
  uint64_t v11 = *(void *)(v1 + 88);
  uint64_t v12 = *(void *)(v1 + 96);
  uint64_t v13 = *(void *)(v1 + 104);
  int v14 = *(_DWORD *)(v1 + 112);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 88) = v13;
  *(_DWORD *)(a1 + 96) = v14;
  return outlined copy of VariableBlurStyle.Mask(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, BYTE1(v14));
}

__n128 VariableBlurStyle.mask.setter(long long *a1)
{
  long long v9 = a1[1];
  long long v10 = *a1;
  long long v7 = a1[3];
  long long v8 = a1[2];
  __n128 v6 = (__n128)a1[4];
  uint64_t v2 = *((void *)a1 + 10);
  uint64_t v3 = *((void *)a1 + 11);
  int v4 = *((_DWORD *)a1 + 24);
  outlined consume of VariableBlurStyle.Mask(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88), *(void *)(v1 + 96), *(void *)(v1 + 104), *(_DWORD *)(v1 + 112), BYTE1(*(_DWORD *)(v1 + 112)));
  *(_OWORD *)(v1 + 16) = v10;
  *(_OWORD *)(v1 + 32) = v9;
  *(_OWORD *)(v1 + 48) = v8;
  *(_OWORD *)(v1 + 64) = v7;
  __n128 result = v6;
  *(__n128 *)(v1 + 80) = v6;
  *(void *)(v1 + 96) = v2;
  *(void *)(v1 + 104) = v3;
  *(_DWORD *)(v1 + 112) = v4;
  return result;
}

uint64_t (*VariableBlurStyle.mask.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double VariableBlurStyle.caFilterRadius.getter()
{
  return *v0 * 0.5;
}

double (*VariableBlurStyle.caFilterRadius.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  *(double *)a1 = *v1 * 0.5;
  return VariableBlurStyle.caFilterRadius.modify;
}

double VariableBlurStyle.caFilterRadius.modify(uint64_t a1)
{
  double result = *(double *)a1 + *(double *)a1;
  **(double **)(a1 + 8) = result;
  return result;
}

id VariableBlurStyle.effectValue(size:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = *((unsigned __int8 *)v1 + 8);
  uint64_t v21 = *v1;
  int v3 = *((unsigned __int8 *)v1 + 9);
  uint64_t v4 = v1[3];
  uint64_t v18 = v1[4];
  uint64_t v19 = (void *)v1[2];
  uint64_t v16 = v1[6];
  uint64_t v17 = v1[5];
  uint64_t v5 = v1[8];
  uint64_t v15 = v1[7];
  uint64_t v7 = v1[9];
  uint64_t v6 = v1[10];
  uint64_t v8 = v1[11];
  uint64_t v9 = v1[12];
  uint64_t v10 = v1[13];
  int v11 = *((_DWORD *)v1 + 28);
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = 256;
  if (!v3) {
    uint64_t v13 = 0;
  }
  *(void *)(v12 + 16) = v21;
  *(void *)(v12 + 24) = v13 | v20;
  *(void *)(v12 + 32) = v19;
  *(void *)(v12 + 40) = v4;
  *(void *)(v12 + 48) = v18;
  *(void *)(v12 + 56) = v17;
  *(void *)(v12 + 64) = v16;
  *(void *)(v12 + 72) = v15;
  *(void *)(v12 + 80) = v5;
  *(void *)(v12 + 88) = v7;
  *(void *)(v12 + 96) = v6;
  *(void *)(v12 + 104) = v8;
  *(void *)(v12 + 112) = v9;
  *(void *)(v12 + 120) = v10;
  *(_DWORD *)(v12 + 128) = v11;
  *(unsigned char *)(v12 + 132) = 1;
  *(void *)a1 = v12;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return outlined copy of VariableBlurStyle.Mask(v19, v4, v18, v17, v16, v15, v5, v7, v6, v8, v9, v10, v11, BYTE1(v11));
}

id protocol witness for _RendererEffect.effectValue(size:) in conformance VariableBlurStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = *((unsigned __int8 *)v1 + 8);
  uint64_t v21 = *v1;
  int v3 = *((unsigned __int8 *)v1 + 9);
  uint64_t v4 = v1[3];
  uint64_t v18 = v1[4];
  uint64_t v19 = (void *)v1[2];
  uint64_t v16 = v1[6];
  uint64_t v17 = v1[5];
  uint64_t v5 = v1[8];
  uint64_t v15 = v1[7];
  uint64_t v7 = v1[9];
  uint64_t v6 = v1[10];
  uint64_t v8 = v1[11];
  uint64_t v9 = v1[12];
  uint64_t v10 = v1[13];
  int v11 = *((_DWORD *)v1 + 28);
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = 256;
  if (!v3) {
    uint64_t v13 = 0;
  }
  *(void *)(v12 + 16) = v21;
  *(void *)(v12 + 24) = v13 | v20;
  *(void *)(v12 + 32) = v19;
  *(void *)(v12 + 40) = v4;
  *(void *)(v12 + 48) = v18;
  *(void *)(v12 + 56) = v17;
  *(void *)(v12 + 64) = v16;
  *(void *)(v12 + 72) = v15;
  *(void *)(v12 + 80) = v5;
  *(void *)(v12 + 88) = v7;
  *(void *)(v12 + 96) = v6;
  *(void *)(v12 + 104) = v8;
  *(void *)(v12 + 112) = v9;
  *(void *)(v12 + 120) = v10;
  *(_DWORD *)(v12 + 128) = v11;
  *(unsigned char *)(v12 + 132) = 1;
  *(void *)a1 = v12;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return outlined copy of VariableBlurStyle.Mask(v19, v4, v18, v17, v16, v15, v5, v7, v6, v8, v9, v10, v11, BYTE1(v11));
}

double VariableBlurStyle.animatableData.getter()
{
  return *(double *)v0;
}

void VariableBlurStyle.animatableData.setter(double a1)
{
  *uint64_t v1 = a1;
}

double (*VariableBlurStyle.animatableData.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

void VariableBlurStyle.encode(to:)(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  double v6 = *(double *)v4;
  LOBYTE(v7) = *(unsigned char *)(v4 + 8);
  LOBYTE(v8) = *(unsigned char *)(v4 + 9);
  uint64_t v9 = *(void **)(v4 + 16);
  uint64_t v38 = *(void *)(v4 + 24);
  uint64_t v39 = *(void *)(v4 + 32);
  uint64_t v10 = *(void *)(v4 + 48);
  uint64_t v40 = *(void *)(v4 + 40);
  uint64_t v12 = *(void *)(v4 + 56);
  uint64_t v11 = *(void *)(v4 + 64);
  unint64_t v13 = *(void *)(v4 + 72);
  uint64_t v36 = *(void *)(v4 + 88);
  uint64_t v37 = *(void *)(v4 + 80);
  uint64_t v34 = *(void *)(v4 + 104);
  uint64_t v35 = *(void *)(v4 + 96);
  int v41 = *(_DWORD *)(v4 + 112);
  if (*(double *)v4 != 0.0)
  {
    double v14 = fabs(v6);
    if (v14 >= 65536.0) {
      Swift::UInt v15 = 9;
    }
    else {
      Swift::UInt v15 = 13;
    }
    ProtobufEncoder.encodeVarint(_:)(v15);
    if (v14 < 65536.0)
    {
      uint64_t v16 = a1[1];
      int64_t isUniquelyReferenced_nonNull_native = v16 + 4;
      if (__OFADD__(v16, 4)) {
        goto LABEL_28;
      }
      *(float *)&double v6 = v6;
      if (a1[2] < isUniquelyReferenced_nonNull_native) {
        goto LABEL_29;
      }
      a1[1] = isUniquelyReferenced_nonNull_native;
      *(_DWORD *)(*a1 + v16) = LODWORD(v6);
      goto LABEL_12;
    }
    uint64_t v18 = a1[1];
    int64_t v19 = v18 + 8;
    if (__OFADD__(v18, 8))
    {
      __break(1u);
    }
    else if (a1[2] >= v19)
    {
      a1[1] = v19;
      *(double *)(*a1 + v18) = v6;
      goto LABEL_12;
    }
    *(double *)ProtobufEncoder.growBufferSlow(to:)(v19) = v6;
  }
  while (1)
  {
LABEL_12:
    if (v7)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    uint64_t v31 = v3;
    if (v8)
    {
      ProtobufEncoder.encodeVarint(_:)(0x18uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    uint64_t v32 = v9;
    uint64_t v33 = v10;
    uint64_t v20 = v10;
    uint64_t v10 = v12;
    uint64_t v21 = v12;
    uint64_t v12 = v11;
    outlined copy of VariableBlurStyle.Mask(v9, v38, v39, v40, v20, v21, v11, v13, v37, v36, v35, v34, v41, BYTE1(v41));
    ProtobufEncoder.encodeVarint(_:)(0x22uLL);
    uint64_t v3 = a1[1];
    uint64_t v8 = (void *)a1[3];
    int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = (void *)v13;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      uint64_t v8 = (void *)isUniquelyReferenced_nonNull_native;
    }
    unint64_t v13 = v8[2];
    unint64_t v22 = v8[3];
    unint64_t v7 = v13 + 1;
    if (v13 >= v22 >> 1)
    {
      int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v13 + 1, 1, v8);
      uint64_t v8 = (void *)isUniquelyReferenced_nonNull_native;
    }
    void v8[2] = v7;
    v8[v13 + 4] = v3;
    a1[3] = v8;
    if (!__OFADD__(v3, 1)) {
      break;
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native) = LODWORD(v6);
  }
  a1[1] = v3 + 1;
  if ((v41 & 0xFF00) == 0x200)
  {
    uint64_t v23 = v32;
    uint64_t v24 = (uint64_t)v9;
    uint64_t v25 = v11;
    uint64_t v26 = v10;
    uint64_t v27 = v33;
    uint64_t v29 = v39;
    uint64_t v28 = v40;
  }
  else
  {
    uint64_t v24 = (uint64_t)v9;
    uint64_t v30 = v10;
    outlined copy of GraphicsImage.Contents?(v32, v38);
    specialized ProtobufEncoder.messageField<A>(_:_:)(1);
    uint64_t v29 = v39;
    uint64_t v28 = v40;
    uint64_t v27 = v33;
    uint64_t v26 = v30;
    outlined consume of VariableBlurStyle.Mask(v32, v38, v39, v40, v33, v30, v11, (uint64_t)v9, v37, v36, v35, v34, v41, BYTE1(v41));
    if (v31)
    {
      outlined consume of VariableBlurStyle.Mask(v32, v38, v39, v40, v33, v30, v11, (uint64_t)v9, v37, v36, v35, v34, v41, BYTE1(v41));
      return;
    }
    uint64_t v23 = v32;
    uint64_t v25 = v11;
  }
  ProtobufEncoder.endLengthDelimited()();
  outlined consume of VariableBlurStyle.Mask(v23, v38, v29, v28, v27, v26, v25, v24, v37, v36, v35, v34, v41, BYTE1(v41));
}

void VariableBlurStyle.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v74 = 0;
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (v4 >= v5)
  {
    BOOL v13 = 0;
    BOOL v14 = 0;
    uint64_t v15 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    double v12 = 0.0;
    int v19 = 512;
    goto LABEL_4;
  }
  BOOL v60 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v71 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v66 = 0;
  double v12 = 0.0;
  int v65 = 512;
  while (2)
  {
    unint64_t v21 = a1[3];
    if (!v21) {
      goto LABEL_12;
    }
    unint64_t v22 = a1[4];
    if (v4 >= v22)
    {
      if (v22 < v4) {
        goto LABEL_66;
      }
      a1[3] = 0;
LABEL_12:
      unint64_t v21 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        goto LABEL_67;
      }
      if (v21 <= 7) {
        goto LABEL_66;
      }
    }
    switch(v21 >> 3)
    {
      case 1uLL:
        unint64_t v23 = v21 & 7;
        switch(v23)
        {
          case 5uLL:
            uint64_t v45 = (float *)a1[1];
            if (v5 < (unint64_t)(v45 + 1)) {
              goto LABEL_66;
            }
            float v46 = *v45;
            a1[1] = v45 + 1;
            double v12 = v46;
            goto LABEL_7;
          case 2uLL:
            uint64_t v47 = ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_67;
            }
            if (v47 < 0) {
              goto LABEL_77;
            }
            uint64_t v24 = (double *)a1[1];
            if (v5 < (unint64_t)v24 + v47) {
              goto LABEL_66;
            }
            a1[3] = 9;
            a1[4] = (char *)v24 + v47;
            break;
          case 1uLL:
            uint64_t v24 = (double *)a1[1];
            break;
          default:
            goto LABEL_66;
        }
        if (v5 < (unint64_t)(v24 + 1)) {
          goto LABEL_66;
        }
        double v12 = *v24;
        a1[1] = v24 + 1;
        goto LABEL_7;
      case 2uLL:
        if ((v21 & 7) == 0) {
          goto LABEL_28;
        }
        if ((v21 & 7) != 2) {
          goto LABEL_66;
        }
        uint64_t v25 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_67;
        }
        if (v25 < 0) {
          goto LABEL_75;
        }
        unint64_t v26 = a1[1] + v25;
        if (v5 < v26) {
          goto LABEL_66;
        }
        a1[3] = 16;
        a1[4] = v26;
LABEL_28:
        uint64_t v27 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_67;
        }
        BOOL v74 = v27 != 0;
        goto LABEL_7;
      case 3uLL:
        if ((v21 & 7) == 0) {
          goto LABEL_36;
        }
        if ((v21 & 7) != 2) {
          goto LABEL_66;
        }
        uint64_t v28 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_67;
        }
        if (v28 < 0) {
          goto LABEL_76;
        }
        unint64_t v29 = a1[1] + v28;
        if (v5 < v29) {
          goto LABEL_66;
        }
        a1[3] = 24;
        a1[4] = v29;
LABEL_36:
        uint64_t v30 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_67;
        }
        BOOL v60 = v30 != 0;
        goto LABEL_7;
      case 4uLL:
        if ((v21 & 7) != 2) {
          goto LABEL_66;
        }
        uint64_t v64 = (uint64_t)v11;
        uint64_t v61 = v10;
        uint64_t v62 = v8;
        uint64_t v10 = v7;
        uint64_t v31 = (void *)a1[5];
        uint64_t v7 = v6;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        }
        unint64_t v6 = v31[2];
        unint64_t v32 = v31[3];
        uint64_t v8 = v6 + 1;
        if (v6 >= v32 >> 1) {
          uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v6 + 1, 1, v31);
        }
        _OWORD v31[2] = v8;
        v31[v6 + 4] = v5;
        a1[5] = v31;
        uint64_t v33 = ProtobufDecoder.decodeVarint()();
        if (v2)
        {
          uint64_t v49 = v69;
          unint64_t v6 = v7;
          uint64_t v7 = v10;
          uint64_t v10 = v61;
          uint64_t v8 = v62;
          uint64_t v11 = (void *)v64;
          goto LABEL_68;
        }
        uint64_t v11 = (void *)v64;
        if (v33 < 0)
        {
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
          __break(1u);
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
          uint64_t v53 = v52[2];
          if (!v53)
          {
            __break(1u);
            JUMPOUT(0x245CFB714);
          }
          uint64_t v50 = v53 - 1;
          uint64_t v51 = v52[v50 + 4];
          v52[2] = v50;
          a1[5] = v52;
          a1[2] = v51;
          uint64_t v9 = v11;
          uint64_t v49 = v69;
          uint64_t v11 = (void *)v64;
          goto LABEL_68;
        }
        unint64_t v6 = v7;
        unint64_t v34 = a1[1] + v33;
        if (v5 < v34)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          uint64_t v49 = v69;
          uint64_t v7 = v10;
          uint64_t v10 = v61;
          uint64_t v8 = v62;
          goto LABEL_68;
        }
        a1[2] = v34;
        VariableBlurStyle.Mask.init(from:)((uint64_t)a1, (uint64_t)v72);
        uint64_t v7 = v10;
        uint64_t v11 = (void *)a1[5];
        if (!v11[2]) {
          goto LABEL_74;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()(v11);
          uint64_t v35 = v11[2];
          if (v35) {
            goto LABEL_49;
          }
LABEL_65:
          __break(1u);
LABEL_66:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_67:
          uint64_t v49 = v69;
LABEL_68:
          outlined consume of VariableBlurStyle.Mask(v66, v67, v68, (uint64_t)v11, v10, v70, (uint64_t)v9, v71, v8, v7, v6, v49, v65, BYTE1(v65));
          return;
        }
        uint64_t v35 = v11[2];
        if (!v35) {
          goto LABEL_65;
        }
LABEL_49:
        uint64_t v36 = v35 - 1;
        uint64_t v37 = v11[v36 + 4];
        void v11[2] = v36;
        a1[5] = v11;
        a1[2] = v37;
        uint64_t v58 = v72[1];
        uint64_t v59 = (void *)v72[0];
        uint64_t v56 = (void *)v72[3];
        uint64_t v57 = v72[2];
        uint64_t v54 = v72[5];
        uint64_t v55 = v72[4];
        uint64_t v38 = (uint64_t)v9;
        uint64_t v9 = (void *)v72[6];
        uint64_t v39 = v72[7];
        uint64_t v8 = v72[8];
        uint64_t v40 = v72[9];
        uint64_t v41 = v6;
        uint64_t v42 = v10;
        unint64_t v6 = v72[10];
        uint64_t v43 = v72[11];
        int v44 = v73;
        outlined consume of VariableBlurStyle.Mask(v66, v67, v68, v64, v61, v70, v38, v71, v62, v42, v41, v69, v65, BYTE1(v65));
        uint64_t v69 = v43;
        uint64_t v7 = v40;
        uint64_t v70 = v54;
        uint64_t v71 = v39;
        uint64_t v11 = v56;
        uint64_t v67 = v58;
        uint64_t v68 = v57;
        uint64_t v66 = v59;
        int v65 = v44;
        uint64_t v10 = v55;
LABEL_7:
        unint64_t v4 = a1[1];
        unint64_t v5 = a1[2];
        if (v4 < v5) {
          continue;
        }
        BOOL v14 = v74;
        uint64_t v16 = v68;
        uint64_t v15 = v69;
        uint64_t v18 = v66;
        uint64_t v17 = v67;
        int v19 = v65;
        BOOL v13 = v60;
LABEL_4:
        a1[3] = 0;
        *(double *)a2 = v12;
        *(unsigned char *)(a2 + 8) = v14;
        *(unsigned char *)(a2 + 9) = v13;
        *(void *)(a2 + 16) = v18;
        *(void *)(a2 + 24) = v17;
        *(void *)(a2 + 32) = v16;
        *(void *)(a2 + 40) = v11;
        *(void *)(a2 + 48) = v10;
        *(void *)(a2 + 56) = v70;
        *(void *)(a2 + 64) = v9;
        *(void *)(a2 + 72) = v71;
        *(void *)(a2 + 80) = v8;
        *(void *)(a2 + 88) = v7;
        *(void *)(a2 + 96) = v6;
        *(void *)(a2 + 104) = v15;
        *(_DWORD *)(a2 + 112) = v19;
        return;
      default:
        switch(v21 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_67;
            }
            goto LABEL_7;
          case 1uLL:
            unint64_t v20 = a1[1] + 8;
            if (v5 < v20) {
              goto LABEL_66;
            }
            goto LABEL_6;
          case 2uLL:
            uint64_t v48 = ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_67;
            }
            if (v48 < 0) {
              goto LABEL_78;
            }
            unint64_t v20 = a1[1] + v48;
            if (v5 < v20) {
              goto LABEL_66;
            }
LABEL_6:
            a1[1] = v20;
            break;
          case 5uLL:
            unint64_t v20 = a1[1] + 4;
            if (v5 < v20) {
              goto LABEL_66;
            }
            goto LABEL_6;
          default:
            goto LABEL_66;
        }
        goto LABEL_7;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance VariableBlurStyle(void *a1)
{
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance VariableBlurStyle(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void VariableBlurStyle.Mask.encode(to:)()
{
  int v1 = *(_DWORD *)(v0 + 96);
  if ((v1 & 0xFF00) != 0x200)
  {
    uint64_t v2 = *(void *)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 72);
    uint64_t v9 = *(void *)(v0 + 64);
    uint64_t v3 = *(void *)(v0 + 48);
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v13 = *(void *)(v0 + 32);
    uint64_t v10 = *(void *)(v0 + 16);
    uint64_t v11 = *(void *)(v0 + 24);
    id v5 = *(id *)v0;
    uint64_t v6 = *(void *)(v0 + 56);
    char v12 = *(void *)(v0 + 8);
    outlined copy of GraphicsImage.Contents?(*(id *)v0, v12);
    specialized ProtobufEncoder.messageField<A>(_:_:)(1);
    outlined consume of VariableBlurStyle.Mask(v5, v12, v10, v11, v13, v4, v3, v6, v9, v8, v7, v2, v1, BYTE1(v1));
  }
}

void VariableBlurStyle.Mask.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v4 >= v5)
  {
    uint64_t v40 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v57 = 0;
    unint64_t v11 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    int v35 = 512;
LABEL_4:
    *(void *)(a1 + 24) = 0;
    *(void *)a2 = v40;
    *(void *)(a2 + 8) = v6;
    *(void *)(a2 + 16) = v7;
    *(void *)(a2 + 24) = v8;
    *(void *)(a2 + 32) = v9;
    *(void *)(a2 + 40) = v10;
    *(void *)(a2 + 48) = v57;
    *(void *)(a2 + 56) = v11;
    *(void *)(a2 + 64) = v39;
    *(void *)(a2 + 72) = v38;
    *(void *)(a2 + 80) = v37;
    *(void *)(a2 + 88) = v36;
    *(_DWORD *)(a2 + 96) = v35;
    return;
  }
  uint64_t v40 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v57 = 0;
  unint64_t v11 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  int v35 = 512;
  while (1)
  {
    unint64_t v12 = *(void *)(a1 + 24);
    if (v12)
    {
      unint64_t v13 = *(void *)(a1 + 32);
      if (v4 < v13) {
        goto LABEL_13;
      }
      if (v13 < v4) {
        goto LABEL_42;
      }
      *(void *)(a1 + 24) = 0;
    }
    unint64_t v12 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_43;
    }
    if (v12 < 8)
    {
LABEL_42:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
LABEL_43:
      outlined consume of VariableBlurStyle.Mask(v40, v6, v7, v8, v9, v10, v57, v11, v39, v38, v37, v36, v35, BYTE1(v35));
      return;
    }
LABEL_13:
    if ((v12 & 0xFFFFFFFFFFFFFFF8) != 8)
    {
      switch(v12 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (!v2) {
            goto LABEL_6;
          }
          goto LABEL_43;
        case 1uLL:
          unint64_t v24 = *(void *)(a1 + 8) + 8;
          goto LABEL_39;
        case 2uLL:
          uint64_t v25 = ProtobufDecoder.decodeVarint()();
          if (v2) {
            goto LABEL_43;
          }
          if (v25 < 0) {
            goto LABEL_50;
          }
          unint64_t v24 = *(void *)(a1 + 8) + v25;
LABEL_39:
          if (v5 < v24) {
            goto LABEL_42;
          }
          *(void *)(a1 + 8) = v24;
          break;
        case 5uLL:
          unint64_t v24 = *(void *)(a1 + 8) + 4;
          goto LABEL_39;
        default:
          goto LABEL_42;
      }
      goto LABEL_6;
    }
    if ((v12 & 7) != 2) {
      goto LABEL_42;
    }
    char v32 = v6;
    uint64_t v33 = v8;
    uint64_t v6 = v7;
    uint64_t v34 = v10;
    uint64_t v31 = v11;
    unint64_t v11 = v9;
    BOOL v14 = *(void **)(a1 + 40);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v7 = v57;
    }
    else
    {
      uint64_t v7 = v57;
      BOOL v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    }
    unint64_t v10 = v14[2];
    unint64_t v15 = v14[3];
    uint64_t v8 = v10 + 1;
    if (v10 >= v15 >> 1) {
      BOOL v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v10 + 1, 1, v14);
    }
    void v14[2] = v8;
    v14[v10 + 4] = v5;
    *(void *)(a1 + 40) = v14;
    uint64_t v16 = ProtobufDecoder.decodeVarint()();
    if (v2)
    {
      outlined consume of VariableBlurStyle.Mask(v40, v32, v6, v33, v11, v34, v7, v31, v39, v38, v37, v36, v35, BYTE1(v35));
      return;
    }
    if (v16 < 0) {
      break;
    }
    uint64_t v8 = v7;
    unint64_t v17 = *(void *)(a1 + 8) + v16;
    if (v5 < v17)
    {
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      outlined consume of VariableBlurStyle.Mask(v40, v32, v6, v33, v11, v34, v7, v31, v39, v38, v37, v36, v35, BYTE1(v35));
      return;
    }
    *(void *)(a1 + 16) = v17;
    GraphicsImage.init(from:)((id *)a1, (uint64_t)&v41);
    unint64_t v10 = v34;
    uint64_t v7 = v6;
    uint64_t v18 = *(void **)(a1 + 40);
    if (!v18[2]) {
      goto LABEL_48;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
    }
    uint64_t v19 = v18[2];
    if (!v19) {
      goto LABEL_49;
    }
    uint64_t v20 = v19 - 1;
    uint64_t v21 = v18[v20 + 4];
    uint64_t v18[2] = v20;
    outlined consume of VariableBlurStyle.Mask(v40, v32, v6, v33, v11, v34, v8, v31, v39, v38, v37, v36, v35, BYTE1(v35));
    *(void *)(a1 + 40) = v18;
    *(void *)(a1 + 16) = v21;
    uint64_t v40 = v41;
    uint64_t v6 = v42;
    uint64_t v7 = v43;
    uint64_t v8 = v44;
    uint64_t v9 = v45;
    uint64_t v38 = v50;
    uint64_t v39 = v49;
    uint64_t v36 = v52;
    uint64_t v37 = v51;
    unint64_t v10 = v46 | ((void)v47 << 32);
    uint64_t v57 = v47 >> 32;
    if (v48) {
      uint64_t v22 = 0x100000000;
    }
    else {
      uint64_t v22 = 0;
    }
    unint64_t v11 = v22 & 0xFFFFFFFF00000000 | HIDWORD(v47);
    if (v54) {
      int v23 = 256;
    }
    else {
      int v23 = 0;
    }
    int v35 = v23 | v53 | (v55 << 16) | (v56 << 24);
LABEL_6:
    unint64_t v4 = *(void *)(a1 + 8);
    unint64_t v5 = *(void *)(a1 + 16);
    if (v4 >= v5) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  __break(1u);
  uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v6);
  uint64_t v29 = v28[2];
  if (!v29)
  {
    __break(1u);
    JUMPOUT(0x245CFBE10);
  }
  uint64_t v26 = v29 - 1;
  uint64_t v27 = v28[v26 + 4];
  _OWORD v28[2] = v26;
  outlined consume of VariableBlurStyle.Mask(v40, v32, v7, v33, v11, v10, v8, v31, v39, v38, v37, v36, v35, BYTE1(v35));
  *(void *)(a1 + 40) = v28;
  *(void *)(a1 + 16) = v27;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance VariableBlurStyle.Mask()
{
  int v1 = *(_DWORD *)(v0 + 96);
  if ((v1 & 0xFF00) != 0x200)
  {
    uint64_t v2 = *(void *)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 72);
    uint64_t v9 = *(void *)(v0 + 64);
    uint64_t v3 = *(void *)(v0 + 48);
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v13 = *(void *)(v0 + 32);
    uint64_t v10 = *(void *)(v0 + 16);
    uint64_t v11 = *(void *)(v0 + 24);
    id v5 = *(id *)v0;
    uint64_t v6 = *(void *)(v0 + 56);
    char v12 = *(void *)(v0 + 8);
    outlined copy of GraphicsImage.Contents?(*(id *)v0, v12);
    specialized ProtobufEncoder.messageField<A>(_:_:)(1);
    outlined consume of VariableBlurStyle.Mask(v5, v12, v10, v11, v13, v4, v3, v6, v9, v8, v7, v2, v1, BYTE1(v1));
  }
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance VariableBlurStyle.Mask(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_245CFBF70()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

unint64_t instantiation function for generic protocol witness table for VariableBlurStyle(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type VariableBlurStyle and conformance VariableBlurStyle();
  *(void *)(a1 + 8) = result;
  return result;
}

double sub_245CFC004@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 * 0.5;
  *a2 = result;
  return result;
}

double sub_245CFC018(double *a1, double *a2)
{
  double result = *a1 + *a1;
  *a2 = result;
  return result;
}

double sub_245CFC028@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_245CFC034(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

void destroy for VariableBlurStyle(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 113) << 8 != 512)
  {
    int v1 = *(unsigned __int8 *)(a1 + 24);
    if (v1 != 255) {
      outlined consume of GraphicsImage.Contents(*(void **)(a1 + 16), v1);
    }
  }
}

uint64_t outlined destroy of GraphicsImage(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for VariableBlurStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v3 = a1 + 16;
  uint64_t v4 = a2 + 16;
  if (*(unsigned __int8 *)(a1 + 113) << 8 == 512) {
    goto LABEL_4;
  }
  int v6 = *(_DWORD *)(a2 + 112);
  if ((v6 & 0xFF00) != 0x200)
  {
    int v10 = *(unsigned __int8 *)(a1 + 24);
    if (v10 != 255)
    {
      int v11 = *(unsigned __int8 *)(a2 + 24);
      if (v11 != 255)
      {
        char v12 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)v4;
        *(unsigned char *)(a1 + 24) = v11;
        outlined consume of GraphicsImage.Contents(v12, v10);
LABEL_10:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
        *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
        *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
        long long v13 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 96) = v13;
        *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
        *(unsigned char *)(a1 + 113) = BYTE1(v6) & 1;
        *(unsigned char *)(a1 + 114) = BYTE2(v6);
        *(unsigned char *)(a1 + 115) = HIBYTE(v6);
        return a1;
      }
      outlined destroy of GraphicsImage.Contents(a1 + 16);
    }
    *(void *)uint64_t v3 = *(void *)v4;
    *(unsigned char *)(v3 + 8) = *(unsigned char *)(v4 + 8);
    goto LABEL_10;
  }
  outlined destroy of GraphicsImage(a1 + 16);
LABEL_4:
  long long v7 = *(_OWORD *)(v4 + 80);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(v4 + 64);
  *(_OWORD *)(v3 + 80) = v7;
  *(_DWORD *)(v3 + 96) = *(_DWORD *)(v4 + 96);
  long long v8 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)v4;
  *(_OWORD *)(v3 + 16) = v8;
  long long v9 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(v3 + 48) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for VariableBlurStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 116)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for VariableBlurStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 112) = 0;
    *(void *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 116) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 116) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VariableBlurStyle()
{
  return &type metadata for VariableBlurStyle;
}

void destroy for VariableBlurStyle.Mask(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 97) <= 1u)
  {
    int v1 = *(unsigned __int8 *)(a1 + 8);
    if (v1 != 255) {
      outlined consume of GraphicsImage.Contents(*(void **)a1, v1);
    }
  }
}

uint64_t initializeWithCopy for VariableBlurStyle.Mask(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 97);
  if (v4 > 1)
  {
    long long v7 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v7;
    *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
    long long v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    long long v9 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v9;
  }
  else
  {
    int v5 = *((unsigned __int8 *)a2 + 8);
    if (v5 == 255)
    {
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    }
    else
    {
      uint64_t v6 = *a2;
      outlined copy of GraphicsImage.Contents((id)*a2, *((unsigned char *)a2 + 8));
      *(void *)a1 = v6;
      *(unsigned char *)(a1 + 8) = v5;
    }
    *(void *)(a1 + 16) = a2[2];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(_OWORD *)(a1 + 44) = *(_OWORD *)((char *)a2 + 44);
    *(unsigned char *)(a1 + 60) = *((unsigned char *)a2 + 60);
    long long v10 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v10;
    *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
    *(unsigned char *)(a1 + 97) = v4;
    *(unsigned char *)(a1 + 98) = *((unsigned char *)a2 + 98);
    *(unsigned char *)(a1 + 99) = *((unsigned char *)a2 + 99);
  }
  return a1;
}

uint64_t assignWithCopy for VariableBlurStyle.Mask(uint64_t a1, long long *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 97);
  if (*(unsigned __int8 *)(a1 + 97) > 1u)
  {
    if (v4 <= 1)
    {
      int v10 = *((unsigned __int8 *)a2 + 8);
      if (v10 == 255)
      {
        id v18 = *(id *)a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)a1 = v18;
      }
      else
      {
        id v11 = *(id *)a2;
        outlined copy of GraphicsImage.Contents(*(id *)a2, *((unsigned char *)a2 + 8));
        *(void *)a1 = v11;
        *(unsigned char *)(a1 + 8) = v10;
      }
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
      goto LABEL_19;
    }
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 8);
    if (v4 <= 1)
    {
      int v6 = *((unsigned __int8 *)a2 + 8);
      if (v5 == 255)
      {
        if (v6 == 255)
        {
          id v20 = *(id *)a2;
          *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
          *(void *)a1 = v20;
        }
        else
        {
          id v17 = *(id *)a2;
          outlined copy of GraphicsImage.Contents(*(id *)a2, *((unsigned char *)a2 + 8));
          *(void *)a1 = v17;
          *(unsigned char *)(a1 + 8) = v6;
        }
      }
      else if (v6 == 255)
      {
        outlined destroy of GraphicsImage.Contents(a1);
        char v19 = *((unsigned char *)a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = v19;
      }
      else
      {
        id v7 = *(id *)a2;
        outlined copy of GraphicsImage.Contents(*(id *)a2, *((unsigned char *)a2 + 8));
        long long v8 = *(void **)a1;
        *(void *)a1 = v7;
        char v9 = *(unsigned char *)(a1 + 8);
        *(unsigned char *)(a1 + 8) = v6;
        outlined consume of GraphicsImage.Contents(v8, v9);
      }
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(void *)(a1 + 32) = *((void *)a2 + 4);
LABEL_19:
      *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
      long long v21 = *(long long *)((char *)a2 + 44);
      *(unsigned char *)(a1 + 60) = *((unsigned char *)a2 + 60);
      *(_OWORD *)(a1 + 44) = v21;
      long long v22 = a2[4];
      long long v23 = a2[5];
      *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
      *(_OWORD *)(a1 + 64) = v22;
      *(_OWORD *)(a1 + 80) = v23;
      *(unsigned char *)(a1 + 97) = *((unsigned char *)a2 + 97);
      *(unsigned char *)(a1 + 98) = *((unsigned char *)a2 + 98);
      *(unsigned char *)(a1 + 99) = *((unsigned char *)a2 + 99);
      return a1;
    }
    if (v5 != 255) {
      outlined consume of GraphicsImage.Contents(*(void **)a1, v5);
    }
  }
  long long v12 = *a2;
  long long v13 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v13;
  *(_OWORD *)a1 = v12;
  long long v14 = a2[3];
  long long v15 = a2[4];
  long long v16 = a2[5];
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v16;
  *(_OWORD *)(a1 + 48) = v14;
  return a1;
}

__n128 __swift_memcpy100_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for VariableBlurStyle.Mask(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 97) <= 1u)
  {
    unsigned int v4 = *(unsigned __int8 *)(a2 + 97);
    int v5 = *(unsigned __int8 *)(a1 + 8);
    if (v4 <= 1)
    {
      char v6 = v4;
      if (v5 != 255)
      {
        int v7 = *(unsigned __int8 *)(a2 + 8);
        if (v7 != 255)
        {
          long long v8 = *(void **)a1;
          *(void *)a1 = *(void *)a2;
          *(unsigned char *)(a1 + 8) = v7;
          outlined consume of GraphicsImage.Contents(v8, v5);
LABEL_11:
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
          *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
          *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
          long long v12 = *(_OWORD *)(a2 + 80);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 80) = v12;
          *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
          *(unsigned char *)(a1 + 97) = v6;
          *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
          *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
          return a1;
        }
        outlined destroy of GraphicsImage.Contents(a1);
      }
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      goto LABEL_11;
    }
    if (v5 != 255) {
      outlined consume of GraphicsImage.Contents(*(void **)a1, v5);
    }
  }
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for VariableBlurStyle.Mask(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 100)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 97);
  BOOL v4 = v3 >= 2;
  unsigned int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    unsigned int v5 = -1;
  }
  if (v5 + 1 >= 2) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for VariableBlurStyle.Mask(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_DWORD *)(result + 96) = 0;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 100) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 100) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 97) = a2 + 2;
    }
  }
  return result;
}

uint64_t getEnumTag for VariableBlurStyle.Mask(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 97);
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

double destructiveInjectEnumTag for VariableBlurStyle.Mask(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(void *)(a1 + 88) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_DWORD *)(a1 + 96) = 0;
    *(void *)a1 = a2 - 255;
  }
  else if (a2)
  {
    *(unsigned char *)(a1 + 97) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for VariableBlurStyle.Mask()
{
  return &type metadata for VariableBlurStyle.Mask;
}

uint64_t sub_245CFC7E8()
{
  return swift_getWitnessTable();
}

uint64_t assignWithTake for VariableBlurEffect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

_UNKNOWN **associated type witness table accessor for EnvironmentalModifier.ResolvedModifier : ViewModifier in VariableBlurEffect()
{
  return &protocol witness table for VariableBlurStyle;
}

SwiftUI::FillStyle __swiftcall FillStyle.init(eoFill:antialiased:)(Swift::Bool eoFill, Swift::Bool antialiased)
{
  if (antialiased) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  return (SwiftUI::FillStyle)(v2 & 0xFFFE | eoFill);
}

BOOL static FillStyle.== infix(_:_:)(int a1, unsigned int a2)
{
  return ((a1 ^ a2 | ((a1 ^ a2) >> 8)) & 1) == 0;
}

uint64_t FillStyle.isEOFilled.getter(char a1)
{
  return a1 & 1;
}

uint64_t FillStyle.isEOFilled.setter(uint64_t result)
{
  *unsigned int v1 = result;
  return result;
}

uint64_t (*FillStyle.isEOFilled.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t FillStyle.isAntialiased.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t FillStyle.isAntialiased.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*FillStyle.isAntialiased.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void FillStyle.encode(to:)(uint64_t a1, __int16 a2)
{
  if (a2)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if ((a2 & 0x100) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
  }
}

unint64_t FillStyle.init(from:)(void *a1)
{
  return specialized FillStyle.init(from:)(a1) & 0x101;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance FillStyle()
{
  char v1 = v0[1];
  if (*v0 == 1)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if ((v1 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
  }
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance FillStyle@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized FillStyle.init(from:)(a1);
  if (!v2)
  {
    *a2 = result & 1;
    a2[1] = BYTE1(result) & 1;
  }
  return result;
}

unint64_t specialized FillStyle.init(from:)(void *a1)
{
  unint64_t v3 = a1[1];
  unint64_t v4 = a1[2];
  if (v3 >= v4)
  {
    BOOL v5 = 0;
    a1[3] = 0;
    goto LABEL_4;
  }
  BOOL v5 = 0;
  BOOL v6 = 1;
  do
  {
    unint64_t result = a1[3];
    if (result)
    {
      unint64_t v10 = a1[4];
      if (v3 < v10) {
        goto LABEL_15;
      }
      if (v10 < v3) {
        goto LABEL_41;
      }
      a1[3] = 0;
    }
    unint64_t result = ProtobufDecoder.decodeVarint()();
    if (v1) {
      return result;
    }
    if (result <= 7) {
      goto LABEL_41;
    }
LABEL_15:
    if (result >> 3 == 2)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2) {
          goto LABEL_41;
        }
        unint64_t result = ProtobufDecoder.decodeVarint()();
        if (v1) {
          return result;
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_46;
        }
        unint64_t v12 = a1[1] + result;
        if (v4 < v12)
        {
LABEL_41:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          return swift_willThrow();
        }
        a1[3] = 16;
        a1[4] = v12;
      }
      unint64_t result = ProtobufDecoder.decodeVarint()();
      if (v1) {
        return result;
      }
      BOOL v6 = result != 0;
    }
    else if (result >> 3 == 1)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2) {
          goto LABEL_41;
        }
        unint64_t result = ProtobufDecoder.decodeVarint()();
        if (v1) {
          return result;
        }
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          JUMPOUT(0x245CFCC84);
        }
        unint64_t v11 = a1[1] + result;
        if (v4 < v11) {
          goto LABEL_41;
        }
        a1[3] = 8;
        a1[4] = v11;
      }
      unint64_t result = ProtobufDecoder.decodeVarint()();
      if (v1) {
        return result;
      }
      BOOL v5 = result != 0;
    }
    else
    {
      switch(result & 7)
      {
        case 0uLL:
          unint64_t result = ProtobufDecoder.decodeVarint()();
          if (v1) {
            return result;
          }
          break;
        case 1uLL:
          unint64_t v9 = a1[1] + 8;
          if (v4 >= v9) {
            goto LABEL_7;
          }
          goto LABEL_41;
        case 2uLL:
          unint64_t result = ProtobufDecoder.decodeVarint()();
          if (v1) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_47;
          }
          unint64_t v9 = a1[1] + result;
          if (v4 < v9) {
            goto LABEL_41;
          }
LABEL_7:
          a1[1] = v9;
          break;
        case 5uLL:
          unint64_t v9 = a1[1] + 4;
          if (v4 < v9) {
            goto LABEL_41;
          }
          goto LABEL_7;
        default:
          goto LABEL_41;
      }
    }
    unint64_t v3 = a1[1];
    unint64_t v4 = a1[2];
  }
  while (v3 < v4);
  a1[3] = 0;
  if (!v6)
  {
    int v7 = 0;
    return v7 | v5;
  }
LABEL_4:
  int v7 = 256;
  return v7 | v5;
}

uint64_t storeEnumTagSinglePayload for FillStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245CFCD68);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

BOOL static BlendMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void BlendMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int BlendMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t ShapeStyle.blendMode(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  double v8 = MEMORY[0x270FA5388](a1);
  unint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v3, a2, v8);
  char v11 = *a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v10, a2);
  uint64_t result = type metadata accessor for _BlendModeShapeStyle();
  *(unsigned char *)(a3 + *(int *)(result + 36)) = v11;
  return result;
}

uint64_t _BlendModeShapeStyle.init(style:blendMode:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t result = type metadata accessor for _BlendModeShapeStyle();
  *(unsigned char *)(a4 + *(int *)(result + 36)) = *a2;
  return result;
}

uint64_t _BlendModeShapeStyle.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _BlendModeShapeStyle.style.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_BlendModeShapeStyle.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _BlendModeShapeStyle.blendMode.getter@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(v2 + *(int *)(result + 36));
  return result;
}

unsigned char *_BlendModeShapeStyle.blendMode.setter(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 36)) = *result;
  return result;
}

uint64_t (*_BlendModeShapeStyle.blendMode.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _BlendModeShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t protocol witness for static ShapeStyle._apply(to:) in conformance _BlendModeShapeStyle<A>(uint64_t a1, uint64_t a2)
{
  return static _BlendModeShapeStyle._apply(to:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t partial apply for closure #2 in _BlendModeShapeStyle._apply(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 32);
  char v6 = *(unsigned char *)(v5 + *(int *)(type metadata accessor for _BlendModeShapeStyle() + 36));
  *(void *)a2 = a1;
  *(unsigned char *)(a2 + 8) = v6;

  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type BlendMode and conformance BlendMode()
{
  unint64_t result = lazy protocol witness table cache variable for type BlendMode and conformance BlendMode;
  if (!lazy protocol witness table cache variable for type BlendMode and conformance BlendMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendMode and conformance BlendMode);
  }
  return result;
}

_UNKNOWN **sub_245CFD1E4()
{
  return &protocol witness table for _BlendModeShapeStyle<A>;
}

Swift::Int Material.ID.hashValue.getter()
{
  char v1 = *((unsigned char *)v0 + 8);
  uint64_t v4 = *v0;
  char v5 = v1;
  Hasher.init(_seed:)();
  Material.ID.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Material.ID()
{
  char v1 = *((unsigned char *)v0 + 8);
  uint64_t v4 = *v0;
  char v5 = v1;
  Hasher.init(_seed:)();
  Material.ID.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Material.ID()
{
  Hasher.init(_seed:)();
  Material.ID.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t Material.ResolvedMaterial.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  *(void *)a1 = *(void *)v1;
  unsigned __int8 v3 = *(unsigned char *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  return outlined copy of Material.ID(v2, v3);
}

uint64_t (*Material.ResolvedMaterial.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Material.ResolvedMaterial.hash(into:)(uint64_t a1)
{
  Swift::UInt32 v2 = *(_DWORD *)(v1 + 12);
  Material.ID.hash(into:)(a1);
  Hasher._combine(_:)(v2);
}

uint64_t static Material.ResolvedMaterial.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  char v2 = *((unsigned char *)a1 + 8);
  int v3 = *((_DWORD *)a1 + 3);
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  int v6 = *((_DWORD *)a2 + 3);
  uint64_t v10 = *a1;
  char v11 = v2;
  uint64_t v8 = v4;
  char v9 = v5;
  return specialized static Material.ID.== infix(_:_:)((uint64_t)&v10, (uint64_t)&v8) & (v3 == v6);
}

Swift::Int Material.ResolvedMaterial.hashValue.getter()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 12);
  Hasher.init(_seed:)();
  Material.ID.hash(into:)((uint64_t)v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Material.ResolvedMaterial()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 12);
  Hasher.init(_seed:)();
  Material.ID.hash(into:)((uint64_t)v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Material.ResolvedMaterial(uint64_t a1)
{
  Swift::UInt32 v2 = *(_DWORD *)(v1 + 12);
  Material.ID.hash(into:)(a1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Material.ResolvedMaterial()
{
  Hasher.init(_seed:)();
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 12);
  Material.ID.hash(into:)((uint64_t)v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Material.ResolvedMaterial(uint64_t *a1, uint64_t *a2)
{
  char v2 = *((unsigned char *)a1 + 8);
  int v3 = *((_DWORD *)a1 + 3);
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  int v6 = *((_DWORD *)a2 + 3);
  uint64_t v10 = *a1;
  char v11 = v2;
  uint64_t v8 = v4;
  char v9 = v5;
  return static Material.ID.== infix(_:_:)(&v10, &v8) & (v3 == v6);
}

uint64_t Material.ResolvedMaterial.id.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = outlined consume of Material.ID(*(void *)v1, *(unsigned char *)(v1 + 8));
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = v3;
  return result;
}

uint64_t (*Material.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Material.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)a2 = *(void *)result;
  *(unsigned char *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  return result;
}

uint64_t Material.disablingBlur(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)v2;
  int v4 = *(_DWORD *)(v2 + 12);
  *(void *)a2 = *(void *)v2;
  unsigned __int8 v5 = *(unsigned char *)(v2 + 8);
  *(unsigned char *)(a2 + 8) = v5;
  unsigned int v6 = v4 & 0xFFFFFFDF;
  if (a1) {
    int v7 = 32;
  }
  else {
    int v7 = 0;
  }
  *(_DWORD *)(a2 + 12) = v6 | v7;
  return outlined copy of Material.ID(v3, v5);
}

void static Material.ultraThick.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 4;
  *(unsigned char *)(a1 + 8) = 3;
  *(_DWORD *)(a1 + 12) = 0;
}

void static Material.bar.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 5;
  *(unsigned char *)(a1 + 8) = 3;
  *(_DWORD *)(a1 + 12) = 0;
}

void static Material.pinched.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 2;
  *(unsigned char *)(a1 + 8) = 3;
  *(_DWORD *)(a1 + 12) = 0;
}

void static Material.toolbarButton.getter()
{
}

uint64_t static Material._intelligenceLightSource(prefersAudioReactivity:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = 6;
  if (result) {
    uint64_t v2 = 7;
  }
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = 3;
  *(_DWORD *)(a2 + 12) = 0;
  return result;
}

uint64_t View.backgroundMaterial(_:)(uint64_t *a1, uint64_t a2)
{
  char v3 = *((unsigned char *)a1 + 8);
  int v4 = *((_DWORD *)a1 + 3);
  uint64_t v7 = *a1;
  char v8 = v3;
  int v9 = v4;
  char v10 = 15;
  type metadata accessor for MaterialView<Rectangle>(0, &lazy cache variable for type metadata for MaterialView<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, (uint64_t)&type metadata for Rectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MaterialView);
  return View.modifier<A>(_:)(&v7, a2, v5);
}

uint64_t MaterialView.init(material:shape:ignoredSafeAreaEdges:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a1;
  char v10 = *((unsigned char *)a1 + 8);
  int v11 = *((_DWORD *)a1 + 3);
  uint64_t v12 = type metadata accessor for MaterialView();
  uint64_t v13 = *(int *)(v12 + 40);
  *(void *)a5 = v9;
  *(unsigned char *)(a5 + 8) = v10;
  *(_DWORD *)(a5 + 12) = v11;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v12 + 36), a2, a4);
  *(unsigned char *)(a5 + v13) = a3;
  return result;
}

uint64_t View.backgroundMaterial<A>(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v23 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a3;
  uint64_t v8 = a1;
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  int v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for MaterialView();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x270FA5388](v12);
  long long v16 = (char *)&v21 - v15;
  uint64_t v17 = *(void *)v8;
  int v18 = *(_DWORD *)(v8 + 12);
  LOBYTE(v8) = *(unsigned char *)(v8 + 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a2, a4, v14);
  *(void *)long long v16 = v17;
  v16[8] = v8;
  *((_DWORD *)v16 + 3) = v18;
  uint64_t v19 = *(int *)(v12 + 40);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[*(int *)(v12 + 36)], v11, a4);
  v16[v19] = 0;
  View.modifier<A>(_:)(v16, v22, v12);
  outlined copy of Material.ID(v17, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

void (*EnvironmentValues.backgroundMaterial.modify(uint64_t **a1))(uint64_t **a1, char a2)
{
  char v3 = (uint64_t *)malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (uint64_t)v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find<A>(_:key:)(v5);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 72);
      uint64_t v8 = *(void *)(v6 + 80);
      outlined copy of Material?(v7, v8);
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = 255;
    }
    *char v3 = v7;
    v3[1] = v8;
    swift_release();
  }
  swift_release_n();
  return EnvironmentValues.backgroundMaterial.modify;
}

void EnvironmentValues.backgroundMaterial.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  char v3 = (uint64_t *)(*a1)[4];
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = *v3;
  if (a2)
  {
    outlined copy of Material?(**a1, v5);
    swift_retain_n();
    outlined copy of Material?(v4, v5);
    specialized closure #1 in PropertyList.subscript.setter(v3, v4, v5);
    swift_release();
    outlined consume of Material?(v4, v5);
    if (v3[1])
    {
      uint64_t v7 = *(void *)v2[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
      swift_release();
      swift_release();
    }
    swift_release();
    outlined consume of Material?(v4, v5);
    uint64_t v8 = *v2;
    uint64_t v9 = v2[1];
  }
  else
  {
    swift_retain_n();
    outlined copy of Material?(v4, v5);
    specialized closure #1 in PropertyList.subscript.setter(v3, v4, v5);
    swift_release();
    outlined consume of Material?(v4, v5);
    if (v3[1])
    {
      uint64_t v10 = *(void *)v2[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v10);
      swift_release();
      swift_release();
    }
    swift_release();
    uint64_t v8 = v4;
    LOBYTE(v9) = v5;
  }
  outlined consume of Material?(v8, v9);

  free(v2);
}

uint64_t MaterialView.material.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  int v3 = *(_DWORD *)(v1 + 12);
  *(void *)a1 = *(void *)v1;
  unsigned __int8 v4 = *(unsigned char *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return outlined copy of Material.ID(v2, v4);
}

uint64_t MaterialView.material.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  int v4 = *((_DWORD *)a1 + 3);
  uint64_t result = outlined consume of Material.ID(*(void *)v1, *(unsigned char *)(v1 + 8));
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = v3;
  *(_DWORD *)(v1 + 12) = v4;
  return result;
}

uint64_t (*MaterialView.material.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MaterialView.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t MaterialView.shape.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*MaterialView.shape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MaterialView.ignoredSafeAreaEdges.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

uint64_t MaterialView.ignoredSafeAreaEdges.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 40)) = result;
  return result;
}

uint64_t (*MaterialView.ignoredSafeAreaEdges.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MaterialView.Background.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for MaterialView();
  uint64_t Value = AGGraphGetValue();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t MaterialView.Background.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = a1;
  uint64_t v35 = a3;
  uint64_t v32 = *(void *)(a2 - 8);
  uint64_t v5 = v32;
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = v7;
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for MaterialView();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  long long v16 = (char *)&v28 - v15;
  uint64_t v36 = a2;
  uint64_t v37 = &type metadata for Material;
  uint64_t v38 = v9;
  uint64_t v39 = &protocol witness table for Material;
  uint64_t v17 = type metadata accessor for _ShapeView();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v33 = v17;
  uint64_t v34 = v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v31 = (uint64_t)&v28 - v19;
  int v30 = v4;
  uint64_t v28 = v9;
  MaterialView.Background.view.getter((uint64_t)v16);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, &v16[*(int *)(v10 + 36)], a2);
  id v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v16, v10);
  MaterialView.Background.view.getter((uint64_t)v13);
  uint64_t v21 = *(void *)v13;
  LODWORD(v5) = *((_DWORD *)v13 + 3);
  unsigned __int8 v22 = v13[8];
  outlined copy of Material.ID(*(void *)v13, v22);
  v20(v13, v10);
  uint64_t v36 = v21;
  LOBYTE(v37) = v22;
  HIDWORD(v37) = v5;
  uint64_t v23 = v31;
  unint64_t v24 = v29;
  Shape.fill<A>(_:style:)((uint64_t)&v36, 256, a2, (uint64_t)&type metadata for Material, v31);
  outlined consume of Material.ID(v21, v22);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v24, a2);
  MaterialView.Background.view.getter((uint64_t)v16);
  LOBYTE(v21) = v16[*(int *)(v10 + 40)];
  v20(v16, v10);
  char v25 = v21;
  uint64_t v26 = v33;
  View.ignoresSafeArea(_:edges:)(1, v25, v33);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v23, v26);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance MaterialView<A>.Background@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for _ShapeView();
  uint64_t v2 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance MaterialView<A>.Background@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return MaterialView.Background.value.getter(*v2, *(void *)(a1 + 16), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance MaterialView<A>.Background()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

double static MaterialView._makeView(view:inputs:)@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  unsigned int v8 = *(_DWORD *)(a2 + 24);
  int v26 = *(_DWORD *)(a2 + 32);
  int v23 = *(_DWORD *)(a2 + 36);
  unsigned int v24 = *(_DWORD *)(a2 + 28);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  int v21 = *(_DWORD *)(a2 + 60);
  int v22 = *(_DWORD *)(a2 + 56);
  int v19 = *(_DWORD *)(a2 + 68);
  int v20 = *(_DWORD *)(a2 + 64);
  int v17 = *(_DWORD *)(a2 + 76);
  int v18 = *(_DWORD *)(a2 + 72);
  int v16 = *(_DWORD *)(a2 + 80);
  LODWORD(v36) = *a1;
  uint64_t v52 = a3;
  unsigned __int8 v53 = &type metadata for Material;
  uint64_t v54 = a4;
  unsigned __int8 v55 = &protocol witness table for Material;
  uint64_t v25 = type metadata accessor for _ShapeView();
  uint64_t v33 = type metadata accessor for ModifiedContent();
  uint64_t v34 = type metadata accessor for MaterialView.Background();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v36, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v32, v34, MEMORY[0x263F8E628], v11, MEMORY[0x263F8E658], v12);
  _GraphValue.init(_:)(v52, v31);
  int v13 = v31[0];
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v52 = v5;
  uint64_t v54 = v7;
  LODWORD(v53) = v6;
  uint64_t v58 = v9;
  uint64_t v59 = v10;
  int v56 = 0;
  int v57 = v23;
  int v60 = v22;
  int v61 = v21;
  int v62 = v20;
  int v63 = v19;
  int v64 = v18;
  int v65 = v17;
  int v66 = v16;
  unsigned __int8 v55 = (_UNKNOWN **)__PAIR64__(v24, v8);
  int v28 = v13;
  uint64_t v36 = v5;
  int v37 = v6;
  uint64_t v38 = v7;
  unsigned int v39 = v8;
  unsigned int v40 = v24;
  int v41 = 0;
  int v42 = v23;
  uint64_t v43 = v9;
  uint64_t v44 = v10;
  int v45 = v22;
  int v46 = v21;
  int v47 = v20;
  int v48 = v19;
  int v49 = v18;
  int v50 = v17;
  int v51 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ModifiedContent<>._makeView(view:inputs:)(&v28, &v36, v25, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t)&protocol witness table for _SafeAreaRegionsIgnoringLayout, (uint64_t)&v29);
  int v56 = v26;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v29, (uint64_t)&v52);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a5 = v29;
  double result = v30;
  a5[1] = v30;
  return result;
}

double protocol witness for static View._makeView(view:inputs:) in conformance MaterialView<A>@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  return static MaterialView._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t static MaterialView._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, unint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  unint64_t v7 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 32);
  int v26 = *(_DWORD *)(a2 + 8);
  int v27 = *(_DWORD *)(a2 + 36);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  int v28 = *(_DWORD *)(a2 + 80);
  v52[0] = *a1;
  unint64_t v41 = a4;
  int v42 = &type metadata for Material;
  uint64_t v43 = a5;
  uint64_t v44 = &protocol witness table for Material;
  type metadata accessor for _ShapeView();
  uint64_t v36 = type metadata accessor for ModifiedContent();
  uint64_t v37 = type metadata accessor for MaterialView.Background();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for Attribute();
  int v13 = *(_UNKNOWN ***)(a2 + 24);
  long long v24 = *(_OWORD *)(a2 + 56);
  uint64_t v14 = *(void *)(a2 + 72);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v52, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v35, v37, MEMORY[0x263F8E628], v12, MEMORY[0x263F8E658], v15);
  unsigned int v25 = v41;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in static MaterialView._makeView(modifier:inputs:body:)(1);
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  swift_beginAccess();
  unint64_t v41 = __PAIR64__(*(_DWORD *)(v8 + 16), OffsetAttribute2);
  uint64_t v33 = type metadata accessor for MaterialView.ChildEnvironment();
  uint64_t v34 = swift_getWitnessTable();
  type metadata accessor for Attribute<EnvironmentValues>(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v41, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v32, v33, MEMORY[0x263F8E628], v17, MEMORY[0x263F8E658], v18);
  uint64_t v19 = MEMORY[0x263F8EE78];
  unint64_t v20 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for Attribute<EnvironmentValues>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = v31;
  *(void *)(v21 + 24) = v19;
  *(_OWORD *)(v21 + 32) = 0u;
  *(_OWORD *)(v21 + 48) = 0u;
  *(_OWORD *)(v21 + 64) = 0u;
  *(_WORD *)(v21 + 80) = 256;
  *(void *)(v21 + 88) = v20;
  swift_release();
  unint64_t v41 = v7;
  LODWORD(v42) = v26;
  uint64_t v43 = v21;
  uint64_t v44 = v13;
  int v45 = v9 | 0x20;
  int v46 = v27;
  uint64_t v47 = v10;
  uint64_t v48 = v11;
  long long v49 = v24;
  uint64_t v50 = v14;
  int v51 = v28;
  unsigned int v39 = &protocol witness table for _ShapeView<A, B>;
  unsigned int v40 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = swift_getWitnessTable();
  makeSecondaryLayerView<A>(secondaryLayer:alignment:inputs:body:flipOrder:)(v25, 0x100000000, (uint64_t)&v41, a3, 1, v22, a6);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t closure #1 in static MaterialView._makeView(modifier:inputs:body:)(uint64_t a1)
{
  void v5[2] = type metadata accessor for MaterialView();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_2, (uint64_t)v5, (uint64_t)&type metadata for Material, MEMORY[0x263F8E628], v2, MEMORY[0x263F8E658], v3);
  return v5[5];
}

uint64_t MaterialView.ChildEnvironment.value.getter@<X0>(void *a1@<X8>)
{
  MaterialView.ChildEnvironment.environment.getter(&v10);
  memset(v11, 0, sizeof(v11));
  char v12 = 4;
  uint64_t v13 = 0;
  char v14 = 5;
  long long v15 = v10;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  char v19 = 1;
  __int16 v20 = 0;
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = *(void *)Value;
  int v4 = *(_DWORD *)(Value + 12);
  unsigned __int8 v5 = *(unsigned char *)(Value + 8);
  outlined copy of Material.ID(*(void *)Value, v5);
  *(void *)&long long v10 = v3;
  BYTE8(v10) = v5;
  HIDWORD(v10) = v4;
  Material._apply(to:)((uint64_t)v11);
  outlined consume of Material.ID(v3, v5);
  uint64_t v6 = *((void *)&v15 + 1);
  *a1 = v15;
  a1[1] = v6;
  uint64_t v7 = v13;
  char v8 = v14;
  swift_retain();
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v7, v8);
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance MaterialView<A>.ChildEnvironment@<X0>(void *a1@<X8>)
{
  return MaterialView.ChildEnvironment.value.getter(a1);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance MaterialView<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static MaterialView._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

double static Material._makeView<A>(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v8 = *((_DWORD *)a2 + 20);
  int v19 = *a1;
  uint64_t v11 = v5;
  int v12 = v6;
  uint64_t v13 = v7;
  long long v9 = *(_OWORD *)(a2 + 5);
  long long v14 = *(_OWORD *)(a2 + 3);
  long long v15 = v9;
  long long v16 = *(_OWORD *)(a2 + 7);
  uint64_t v17 = a2[9];
  int v18 = v8;
  return static ShapeStyle.legacyMakeShapeView<A>(view:inputs:)(&v19, (uint64_t)&v11, &type metadata for Material, a3, (uint64_t)&protocol witness table for Material, a4, a5);
}

unsigned char *static Material._apply(to:)(unsigned char *result)
{
  *double result = 1;
  return result;
}

uint64_t ForegroundMaterialStyle.material.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  int v3 = *(_DWORD *)(v1 + 12);
  *(void *)a1 = *(void *)v1;
  unsigned __int8 v4 = *(unsigned char *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return outlined copy of Material.ID(v2, v4);
}

uint64_t ForegroundMaterialStyle.material.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  int v4 = *((_DWORD *)a1 + 3);
  uint64_t result = outlined consume of Material.ID(*(void *)v1, *(unsigned char *)(v1 + 8));
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = v3;
  *(_DWORD *)(v1 + 12) = v4;
  return result;
}

uint64_t (*ForegroundMaterialStyle.material.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ForegroundMaterialStyle.init(material:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 8);
  int v3 = *(_DWORD *)(result + 12);
  *(void *)a2 = *(void *)result;
  *(unsigned char *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = v3;
  return result;
}

void static MaterialActiveAppearance.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static MaterialActiveAppearance.active.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static MaterialActiveAppearance.inactive.getter()
{
}

void static MaterialActiveAppearance.matchWindow.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

BOOL static MaterialActiveAppearance.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t EnvironmentValues.materialActiveAppearance.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.materialActiveAppearance : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t key path setter for EnvironmentValues.materialActiveAppearance : EnvironmentValues(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.materialActiveAppearance.setter(&v2);
}

uint64_t EnvironmentValues.materialActiveAppearance.setter(unsigned __int8 *a1)
{
  uint64_t v2 = *v1;
  unsigned __int8 v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.materialActiveAppearance.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaterialActiveAppearance.Key>);
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 0;
    }
    *uint64_t v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.materialActiveAppearance.modify;
}

uint64_t EnvironmentValues.materialActiveAppearance.modify(uint64_t a1)
{
  unsigned __int8 v2 = *(unsigned char *)(a1 + 24);
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    uint64_t v5 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t Material.materialActiveAppearance(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  int v3 = *(_DWORD *)(v1 + 12);
  *(void *)a1 = *(void *)v1;
  unsigned __int8 v4 = *(unsigned char *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return outlined copy of Material.ID(v2, v4);
}

uint64_t MaterialActiveAppearanceShapeStyle._apply(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (uint64_t *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 48);
  unsigned __int8 v8 = *(unsigned char *)(v3 + *(int *)(a2 + 36));
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v6, v8);
  swift_release();
  if (v6[1])
  {
    uint64_t v9 = *v6;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v7, v9);
    swift_release();
    swift_release();
  }
  swift_release();
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 24) + 32))(a1, *(void *)(a2 + 16));
}

uint64_t static MaterialActiveAppearanceShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t protocol witness for static ShapeStyle._apply(to:) in conformance MaterialActiveAppearanceShapeStyle<A>(uint64_t a1, uint64_t a2)
{
  return static MaterialActiveAppearanceShapeStyle._apply(to:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t ShapeStyle.materialActiveAppearance(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = *v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, v3, a2, v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v9, a2);
  uint64_t result = type metadata accessor for MaterialActiveAppearanceShapeStyle();
  *(unsigned char *)(a3 + *(int *)(result + 36)) = v11;
  return result;
}

uint64_t View.materialActiveAppearance(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5 = *a1;
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  char v8 = v5;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

uint64_t sub_245CFF478()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t type metadata accessor for MaterialView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for MaterialView.Background()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for MaterialView.ChildEnvironment()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for MaterialView<Rectangle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider;
  if (!lazy protocol witness table cache variable for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider;
  if (!lazy protocol witness table cache variable for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider;
  if (!lazy protocol witness table cache variable for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider);
  }
  return result;
}

uint64_t sub_245CFF5C8(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.materialActiveAppearance.setter(&v2);
}

unint64_t lazy protocol witness table accessor for type Material.ID and conformance Material.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type Material.ID and conformance Material.ID;
  if (!lazy protocol witness table cache variable for type Material.ID and conformance Material.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Material.ID and conformance Material.ID);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Material.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of Material.ID(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t assignWithCopy for Material.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of Material.ID(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of Material.ID(v5, v6);
  return a1;
}

uint64_t assignWithTake for Material.ID(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of Material.ID(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Material.ID(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Material.ID(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for Material.ID(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for Material.ID(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Material.ResolvedMaterial()
{
  return &type metadata for Material.ResolvedMaterial;
}

uint64_t type metadata completion function for MaterialView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MaterialView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || v8 + ((v7 + 16) & (unint64_t)~v7) + 1 > 0x18)
  {
    uint64_t v11 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ~v7;
    uint64_t v13 = *(void *)a2;
    unsigned __int8 v14 = *(unsigned char *)(a2 + 8);
    outlined copy of Material.ID(*(void *)a2, v14);
    *(void *)a1 = v13;
    *(unsigned char *)(a1 + 8) = v14;
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))((a1 + v7 + 16) & v12, (a2 + v7 + 16) & v12, v5);
    *(unsigned char *)(((a1 + v7 + 16) & v12) + v8) = *(unsigned char *)(((a2 + v7 + 16) & v12) + v8);
  }
  return a1;
}

uint64_t destroy for MaterialView(uint64_t a1, uint64_t a2)
{
  outlined consume of Material.ID(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t initializeWithCopy for MaterialView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unsigned __int8 v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Material.ID(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 16 + a1) & ~v10;
  uint64_t v12 = (v10 + 16 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  *(unsigned char *)(*(void *)(v9 + 48) + v11) = *(unsigned char *)(*(void *)(v9 + 48) + v12);
  return a1;
}

uint64_t assignWithCopy for MaterialView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unsigned __int8 v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Material.ID(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  *(void *)a1 = v6;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Material.ID(v8, v9);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 16 + a1) & ~v12;
  uint64_t v14 = (v12 + 16 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v13, v14);
  *(unsigned char *)(*(void *)(v11 + 40) + v13) = *(unsigned char *)(*(void *)(v11 + 40) + v14);
  return a1;
}

_OWORD *initializeWithTake for MaterialView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  *(unsigned char *)(*(void *)(v5 + 32) + v7) = *(unsigned char *)(*(void *)(v5 + 32) + v8);
  return a1;
}

uint64_t assignWithTake for MaterialView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  uint64_t v7 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v6;
  outlined consume of Material.ID(v7, v8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v11 + 16 + a1) & ~v11;
  uint64_t v13 = (v11 + 16 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v12, v13);
  *(unsigned char *)(*(void *)(v10 + 24) + v12) = *(unsigned char *)(*(void *)(v10 + 24) + v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFC) {
    unsigned int v7 = 252;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 16) & ~v6) + 1;
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFC) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      unsigned int v15 = *((unsigned __int8 *)a1 + 8);
      if (v15 > 3) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for MaterialView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFC) {
    unsigned int v8 = 252;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245D00134);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0xFC)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 16] & ~v9;
          int v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if (a2 > 0xFC)
        {
          *(void *)a1 = a2 - 253;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          a1[8] = -(char)a2;
        }
      }
      return;
  }
}

uint64_t assignWithTake for Material(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of Material.ID(v5, v6);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

ValueMetadata *type metadata accessor for ForegroundMaterialStyle()
{
  return &type metadata for ForegroundMaterialStyle;
}

ValueMetadata *type metadata accessor for MaterialActiveAppearance()
{
  return &type metadata for MaterialActiveAppearance;
}

uint64_t sub_245D001D0()
{
  return swift_getWitnessTable();
}

uint64_t sub_245D00274()
{
  return swift_getWitnessTable();
}