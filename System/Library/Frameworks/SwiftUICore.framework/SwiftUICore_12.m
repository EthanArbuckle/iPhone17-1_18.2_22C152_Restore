_UNKNOWN **sub_245D002E4()
{
  return &protocol witness table for MaterialActiveAppearanceShapeStyle<A>;
}

uint64_t sub_245D002F0()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for MaterialActiveAppearanceShapeStyle()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MaterialActiveAppearanceShapeStyle(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFC) {
    unsigned int v7 = 252;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = v6 + 1;
  char v10 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 >= 0xFC) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      unsigned int v15 = *((unsigned __int8 *)a1 + v6);
      if (v15 >= 4) {
        return v15 - 3;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for MaterialActiveAppearanceShapeStyle(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFC) {
    unsigned int v8 = 252;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x245D007D8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 < 0xFC)
        {
          a1[v9] = a2 + 3;
        }
        else
        {
          v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for MaterialActiveAppearanceShapeStyle()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for MaterialActiveAppearance(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245D008E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for MaterialActiveAppearance.Storage()
{
  return &unk_26FA6B040;
}

ValueMetadata *type metadata accessor for MaterialActiveAppearance.Key()
{
  return &type metadata for MaterialActiveAppearance.Key;
}

uint64_t instantiation function for generic protocol witness table for MaterialView<A>.Background(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags()
{
  unint64_t result = lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags;
  if (!lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags;
  if (!lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags;
  if (!lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags;
  if (!lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MaterialActiveAppearance.Storage and conformance MaterialActiveAppearance.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type MaterialActiveAppearance.Storage and conformance MaterialActiveAppearance.Storage;
  if (!lazy protocol witness table cache variable for type MaterialActiveAppearance.Storage and conformance MaterialActiveAppearance.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialActiveAppearance.Storage and conformance MaterialActiveAppearance.Storage);
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in MaterialView<A>.ChildEnvironment()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in MaterialView<A>.Background()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for BackgroundMaterialKey()
{
  return &type metadata for BackgroundMaterialKey;
}

uint64_t destroy for AnyMaterialLayer(uint64_t a1)
{
  outlined consume of DisplayList.Content.Value(*(void *)a1);
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);

  return outlined consume of GraphicsBlendMode(v2, v3);
}

uint64_t initializeWithCopy for AnyMaterialLayer(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = *a2;
  outlined copy of DisplayList.Content.Value(*a2);
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)v2 + 2);
  uint64_t v5 = v2[2];
  LOBYTE(v2) = *((unsigned char *)v2 + 24);
  outlined copy of GraphicsBlendMode(v5, (char)v2);
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = (_BYTE)v2;
  return a1;
}

uint64_t assignWithCopy for AnyMaterialLayer(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = *a2;
  outlined copy of DisplayList.Content.Value(*a2);
  unint64_t v5 = *(void *)a1;
  *(void *)a1 = v4;
  outlined consume of DisplayList.Content.Value(v5);
  *(_DWORD *)(a1 + 8) = *((_DWORD *)v2 + 2);
  uint64_t v6 = v2[2];
  LOBYTE(v2) = *((unsigned char *)v2 + 24);
  outlined copy of GraphicsBlendMode(v6, (char)v2);
  uint64_t v7 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = (_BYTE)v2;
  outlined consume of GraphicsBlendMode(v7, v8);
  return a1;
}

uint64_t assignWithTake for AnyMaterialLayer(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  outlined consume of DisplayList.Content.Value(v4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  outlined consume of GraphicsBlendMode(v6, v7);
  return a1;
}

ValueMetadata *type metadata accessor for AnyMaterialLayer()
{
  return &type metadata for AnyMaterialLayer;
}

void static Material.modal.getter()
{
}

Swift::Bool __swiftcall _ShapeStyle_Pack.isClear(name:)(SwiftUI::_ShapeStyle_Name name)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    int v4 = *(unsigned __int8 *)name;
    uint64_t v5 = v2 + 32;
    swift_bridgeObjectRetain();
    long long v6 = *(_OWORD *)(v2 + 112);
    long long v36 = *(_OWORD *)(v2 + 96);
    long long v37 = v6;
    long long v38 = *(_OWORD *)(v2 + 128);
    uint64_t v39 = *(void *)(v2 + 144);
    long long v7 = *(_OWORD *)(v2 + 48);
    long long v32 = *(_OWORD *)(v2 + 32);
    long long v33 = v7;
    long long v8 = *(_OWORD *)(v2 + 80);
    long long v34 = *(_OWORD *)(v2 + 64);
    long long v35 = v8;
    uint64_t v9 = 1;
LABEL_3:
    if (v32 == v4 && *((float *)&v37 + 3) != 0.0)
    {
      v18 = (void *)*((void *)&v32 + 1);
      long long v19 = v33;
      long long v21 = v36;
      uint64_t v20 = v37;
      BOOL v10 = 0;
      switch(BYTE8(v37))
      {
        case 1:
          uint64_t v31 = v39;
          v27 = *(uint64_t (**)(id))(**((void **)&v32 + 1) + 96);
          v28 = (void *)*((void *)&v33 + 1);
          long long v22 = v34;
          long long v30 = v35;
          uint64_t v29 = v36;
          outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v32);
          id v23 = outlined copy of _ShapeStyle_Pack.Fill(v18, v19, v28, (void *)v22, *((uint64_t *)&v22 + 1), v30, *((uint64_t *)&v30 + 1), v29, *((uint64_t *)&v21 + 1), v20, 1);
          LOBYTE(v27) = v27(v23);
          outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v18, v19, (uint64_t)v28, v22, *((uint64_t *)&v22 + 1), v30, *((uint64_t *)&v30 + 1), v29, *((uint64_t *)&v21 + 1), v20, 1);
          if ((v27 & 1) == 0) {
            goto LABEL_11;
          }
          goto LABEL_13;
        case 3:
        case 4:
        case 5:
        case 6:
          break;
        default:
          uint64_t v31 = v39;
          outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v32);
          if ((v19 & 0x7FFFFFFF00000000) != 0)
          {
LABEL_11:
            BOOL v10 = 0;
          }
          else
          {
LABEL_13:
            uint64_t v24 = *(void *)(v31 + 16);
            if (v24)
            {
              uint64_t v25 = v31 + 40;
              BOOL v10 = 1;
              do
              {
                if (v10 && (*(unsigned char *)(v25 + 37) & 1) == 0) {
                  BOOL v10 = (*(_DWORD *)(v25 + 4) & 0x7FFFFFFF) == 0;
                }
                v25 += 72;
                --v24;
              }
              while (v24);
            }
            else
            {
              BOOL v10 = 1;
            }
          }
          outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v32);
          break;
      }
    }
    else
    {
      BOOL v10 = 1;
    }
    while (v9 != v3)
    {
      BOOL v11 = (long long *)(v5 + 120 * v9);
      long long v12 = *v11;
      long long v13 = v11[1];
      long long v14 = v11[3];
      long long v34 = v11[2];
      long long v35 = v14;
      long long v32 = v12;
      long long v33 = v13;
      long long v15 = v11[4];
      long long v16 = v11[5];
      long long v17 = v11[6];
      uint64_t v39 = *((void *)v11 + 14);
      long long v37 = v16;
      long long v38 = v17;
      long long v36 = v15;
      ++v9;
      if (v10) {
        goto LABEL_3;
      }
      BOOL v10 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    return 1;
  }
  return v10;
}

__n128 _ShapeStyle_Pack.Style.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  __n128 result = *(__n128 *)(a1 + 64);
  *(__n128 *)(a2 + 64) = result;
  *(unsigned char *)(a2 + 80) = v2;
  *(_DWORD *)(a2 + 84) = 1065353216;
  *(void *)(a2 + 88) = 0;
  *(unsigned char *)(a2 + 96) = -1;
  *(void *)(a2 + 104) = MEMORY[0x263F8EE78];
  return result;
}

uint64_t (*_ShapeStyle_Shape.stylePack.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  if (*(unsigned char *)(v1 + 40) == 1)
  {
    uint64_t v2 = *(void *)(v1 + 32);
    *(void *)(v1 + 32) = 0;
    *(unsigned char *)(v1 + 40) = 5;
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE78];
  }
  *a1 = v2;
  return _ShapeStyle_Shape.stylePack.modify;
}

uint64_t _ShapeStyle_Shape.stylePack.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *(void *)(v3 + 32);
    char v5 = *(unsigned char *)(v3 + 40);
    swift_bridgeObjectRetain();
    outlined consume of _ShapeStyle_Shape.Result(v4, v5);
    *(void *)(v3 + 32) = v2;
    *(unsigned char *)(v3 + 40) = 1;
  }

  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall _ShapeStyle_Pack.Style.applyOpacity(_:)(Swift::Float a1)
{
  *(float *)(v1 + 84) = *(float *)(v1 + 84) * a1;
  uint64_t v3 = *(void **)(v1 + 104);
  uint64_t v4 = v3[2];
  if (v4)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_17:
    }
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    unint64_t v5 = v3[2];
    unint64_t v6 = v4 - 1;
    if (v5 < v4 - 1) {
      unint64_t v6 = v3[2];
    }
    if (v6 >= 2)
    {
      unint64_t v8 = v6 + 1;
      uint64_t v9 = v8 & 1;
      if ((v8 & 1) == 0) {
        uint64_t v9 = 2;
      }
      unint64_t v7 = v8 - v9;
      BOOL v10 = (float *)(v3 + 19);
      unint64_t v11 = v7;
      do
      {
        float v12 = *v10 * a1;
        *(v10 - 18) = *(v10 - 18) * a1;
        *BOOL v10 = v12;
        v10 += 36;
        v11 -= 2;
      }
      while (v11);
    }
    else
    {
      unint64_t v7 = 0;
    }
    uint64_t v13 = 72 * v7 + 80;
    do
    {
      if (v7 >= v5)
      {
        __break(1u);
        goto LABEL_17;
      }
      ++v7;
      *(float *)((char *)v3 + v13) = *(float *)((char *)v3 + v13) * a1;
      v13 += 72;
    }
    while (v4 != v7);
    *(void *)(v1 + 104) = v3;
  }
}

uint64_t _ShapeStyle_Pack.modify(name:levels:_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  unsigned __int8 v8 = *a1;
  uint64_t v9 = *v4;
  v18 = *v4;
  unsigned __int8 v17 = v8;
  uint64_t result = _ShapeStyle_Pack.indices(of:)(&v17);
  if (result == v11) {
    return result;
  }
  unint64_t v12 = result;
  uint64_t v13 = v11;
  if (v11 < result)
  {
LABEL_19:
    __break(1u);
  }
  else if (result < v11)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
  __break(1u);
LABEL_21:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
  uint64_t v9 = (void *)result;
LABEL_5:
  uint64_t v14 = (uint64_t)&v9[15 * v12 + 5];
  do
  {
    if ((v12 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    if (v12 >= v9[2]) {
      goto LABEL_18;
    }
    uint64_t v15 = *(unsigned __int8 *)(v14 - 7);
    if (v15 >= a2 && v15 < a3) {
      uint64_t result = a4(v14);
    }
    ++v12;
    v14 += 120;
  }
  while (v13 != v12);
  *uint64_t v4 = v9;
  return result;
}

uint64_t _ShapeStyle_Shape.stylePack.getter@<X0>(uint64_t *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 40) == 1) {
    uint64_t result = swift_bridgeObjectRetain();
  }
  else {
    uint64_t result = MEMORY[0x263F8EE78];
  }
  *a1 = result;
  return result;
}

uint64_t _ShapeStyle_Pack.Style.applyingOpacity(_:)@<X0>(uint64_t a1@<X8>, float a2@<S0>)
{
  unint64_t v5 = *(void **)v2;
  uint64_t v6 = *(void *)(v2 + 8);
  unint64_t v7 = *(void **)(v2 + 16);
  unsigned __int8 v8 = *(void **)(v2 + 24);
  uint64_t v9 = *(void *)(v2 + 32);
  uint64_t v10 = *(void *)(v2 + 40);
  uint64_t v11 = *(void *)(v2 + 48);
  uint64_t v12 = *(void *)(v2 + 56);
  uint64_t v13 = *(void *)(v2 + 64);
  uint64_t v14 = *(void *)(v2 + 72);
  char v15 = *(unsigned char *)(v2 + 80);
  float v16 = *(float *)(v2 + 84);
  uint64_t v17 = *(void *)(v2 + 88);
  v18 = *(void **)(v2 + 104);
  *(void *)a1 = *(void *)v2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v14;
  *(unsigned char *)(a1 + 80) = v15;
  *(void *)(a1 + 88) = v17;
  unsigned __int8 v19 = *(unsigned char *)(v2 + 96);
  *(unsigned char *)(a1 + 96) = v19;
  *(void *)(a1 + 104) = v18;
  *(float *)(a1 + 84) = v16 * a2;
  uint64_t v20 = v18[2];
  outlined copy of _ShapeStyle_Pack.Fill(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  outlined copy of GraphicsBlendMode?(v17, v19);
  uint64_t result = swift_bridgeObjectRetain();
  if (v20)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_17:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      v18 = (void *)result;
    }
    unint64_t v22 = v18[2];
    unint64_t v23 = v20 - 1;
    if (v20 - 1 >= v22) {
      unint64_t v23 = v18[2];
    }
    if (v23 >= 2)
    {
      unint64_t v25 = v23 + 1;
      uint64_t v26 = v25 & 1;
      if ((v25 & 1) == 0) {
        uint64_t v26 = 2;
      }
      unint64_t v24 = v25 - v26;
      v27 = (float *)(v18 + 19);
      unint64_t v28 = v24;
      do
      {
        float v29 = *v27 * a2;
        *(v27 - 18) = *(v27 - 18) * a2;
        float *v27 = v29;
        v27 += 36;
        v28 -= 2;
      }
      while (v28);
    }
    else
    {
      unint64_t v24 = 0;
    }
    uint64_t v30 = 72 * v24 + 80;
    do
    {
      if (v24 >= v22)
      {
        __break(1u);
        goto LABEL_17;
      }
      ++v24;
      *(float *)((char *)v18 + v30) = *(float *)((char *)v18 + v30) * a2;
      v30 += 72;
    }
    while (v20 != v24);
    *(void *)(a1 + 104) = v18;
  }
  return result;
}

uint64_t _ShapeStyle_Pack.Style.applyBlend(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  if (one-time initialization token for introduced != -1) {
    goto LABEL_24;
  }
  while (1)
  {
    unsigned int v4 = static _SemanticFeature_v6.introduced;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    uint64_t result = swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      uint64_t result = dyld_program_sdk_at_least();
      if (result) {
        goto LABEL_8;
      }
    }
    else if (static Semantics.forced >= v4)
    {
LABEL_8:
      int v6 = 1;
      if (*(unsigned __int8 *)(v1 + 96) != 255) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    int v6 = 0;
LABEL_9:
    uint64_t v7 = *(void *)(v1 + 88);
    unsigned __int8 v8 = *(unsigned char *)(v1 + 96);
    outlined copy of GraphicsBlendMode(v2, v3);
    uint64_t result = outlined consume of GraphicsBlendMode?(v7, v8);
    *(void *)(v1 + 88) = v2;
    *(unsigned char *)(v1 + 96) = v3;
LABEL_10:
    uint64_t v9 = *(void **)(v1 + 104);
    uint64_t v10 = v9[2];
    if (!v10) {
      return result;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
      uint64_t v9 = (void *)result;
    }
    unint64_t v11 = 0;
    uint64_t v12 = (unsigned __int8 *)(v9 + 12);
    while (v6)
    {
      if (v11 >= v9[2]) {
        goto LABEL_23;
      }
      if (*v12 == 255) {
        break;
      }
LABEL_14:
      ++v11;
      v12 += 72;
      if (v10 == v11)
      {
        *(void *)(v1 + 104) = v9;
        return result;
      }
    }
    outlined copy of GraphicsBlendMode(v2, v3);
    if (v11 < v9[2])
    {
      uint64_t v13 = *((void *)v12 - 1);
      *((void *)v12 - 1) = v2;
      unsigned __int8 v14 = *v12;
      *uint64_t v12 = v3;
      uint64_t result = outlined consume of GraphicsBlendMode?(v13, v14);
      goto LABEL_14;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    swift_once();
  }
}

id _ShapeStyle_Pack.Style.fill.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  unsigned int v4 = *(void **)(v1 + 16);
  unint64_t v5 = *(void **)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v10 = *(void *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  char v12 = *(unsigned char *)(v1 + 80);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  *(unsigned char *)(a1 + 80) = v12;
  return outlined copy of _ShapeStyle_Pack.Fill(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

__n128 _ShapeStyle_Pack.Style.fill.setter(long long *a1)
{
  long long v9 = *a1;
  long long v7 = a1[2];
  long long v8 = a1[1];
  __n128 v6 = (__n128)a1[3];
  uint64_t v2 = *((void *)a1 + 8);
  uint64_t v3 = *((void *)a1 + 9);
  char v4 = *((unsigned char *)a1 + 80);
  outlined consume of _ShapeStyle_Pack.Fill(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(unsigned char *)(v1 + 80));
  *(_OWORD *)uint64_t v1 = v9;
  *(_OWORD *)(v1 + 16) = v8;
  __n128 result = v6;
  *(_OWORD *)(v1 + 32) = v7;
  *(__n128 *)(v1 + 48) = v6;
  *(void *)(v1 + 64) = v2;
  *(void *)(v1 + 72) = v3;
  *(unsigned char *)(v1 + 80) = v4;
  return result;
}

uint64_t (*_ShapeStyle_Pack.Style.fill.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float _ShapeStyle_Pack.Style.opacity.getter()
{
  return *(float *)(v0 + 84);
}

void _ShapeStyle_Pack.Style.opacity.setter(float a1)
{
  *(float *)(v1 + 84) = a1;
}

uint64_t (*_ShapeStyle_Pack.Style.opacity.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_Pack.Style._blend.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 88);
  *(void *)a1 = v2;
  unsigned __int8 v3 = *(unsigned char *)(v1 + 96);
  *(unsigned char *)(a1 + 8) = v3;
  return outlined copy of GraphicsBlendMode?(v2, v3);
}

uint64_t _ShapeStyle_Pack.Style._blend.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = outlined consume of GraphicsBlendMode?(*(void *)(v1 + 88), *(unsigned char *)(v1 + 96));
  *(void *)(v1 + 88) = v2;
  *(unsigned char *)(v1 + 96) = v3;
  return result;
}

uint64_t (*_ShapeStyle_Pack.Style._blend.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_Pack.Style.blend.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 88);
  int v4 = *(unsigned __int8 *)(v1 + 96);
  if (v4 == 255)
  {
    if (one-time initialization token for normal != -1) {
      swift_once();
    }
    uint64_t v5 = static GraphicsBlendMode.normal;
    char v6 = byte_26B0EB4A0;
    *(void *)a1 = static GraphicsBlendMode.normal;
    *(unsigned char *)(a1 + 8) = v6;
    outlined copy of GraphicsBlendMode(v5, v6);
  }
  else
  {
    *(void *)a1 = v3;
    *(unsigned char *)(a1 + 8) = v4 & 1;
  }

  return outlined copy of GraphicsBlendMode?(v3, v4);
}

uint64_t _ShapeStyle_Pack.Style.effects.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _ShapeStyle_Pack.Style.effects.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 104) = a1;
  return result;
}

uint64_t (*_ShapeStyle_Pack.Style.effects.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double one-time initialization function for clear()
{
  byte_268EEF180 = 0;
  double result = 0.0;
  xmmword_268EEF160 = 0u;
  *(_OWORD *)&qword_268EEF170 = 0u;
  xmmword_268EEF140 = 0u;
  *(_OWORD *)&qword_268EEF150 = 0u;
  static _ShapeStyle_Pack.Style.clear = 0u;
  dword_268EEF184 = 1065353216;
  qword_268EEF188 = 0;
  byte_268EEF190 = -1;
  qword_268EEF198 = MEMORY[0x263F8EE78];
  return result;
}

uint64_t static _ShapeStyle_Pack.Style.clear.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for clear != -1) {
    swift_once();
  }
  long long v2 = static _ShapeStyle_Pack.Style.clear;
  long long v3 = xmmword_268EEF140;
  uint64_t v4 = qword_268EEF150;
  uint64_t v5 = qword_268EEF158;
  long long v6 = xmmword_268EEF160;
  long long v7 = xmmword_268EEF170;
  char v8 = byte_268EEF180;
  int v9 = dword_268EEF184;
  uint64_t v10 = qword_268EEF188;
  uint64_t v11 = qword_268EEF198;
  *(_OWORD *)a1 = static _ShapeStyle_Pack.Style.clear;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(unsigned char *)(a1 + 80) = v8;
  *(_DWORD *)(a1 + 84) = v9;
  *(void *)(a1 + 88) = v10;
  unsigned __int8 v12 = byte_268EEF190;
  *(unsigned char *)(a1 + 96) = byte_268EEF190;
  *(void *)(a1 + 104) = v11;
  outlined copy of _ShapeStyle_Pack.Fill((id)v2, BYTE8(v2), (void *)v3, *((void **)&v3 + 1), v4, v5, v6, *((uint64_t *)&v6 + 1), v7, *((uint64_t *)&v7 + 1), v8);
  outlined copy of GraphicsBlendMode?(v10, v12);

  return swift_bridgeObjectRetain();
}

uint64_t static _ShapeStyle_Pack.Effect.Kind.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  char v2 = *(unsigned char *)(a1 + 45) & *((unsigned char *)a2 + 45);
  if ((*(unsigned char *)(a1 + 45) & 1) == 0 && (*((unsigned char *)a2 + 45) & 1) == 0)
  {
    char v3 = *((unsigned char *)a2 + 44);
    int v4 = *((_DWORD *)a2 + 10);
    uint64_t v5 = a2[4];
    uint64_t v7 = *a2;
    uint64_t v6 = a2[1];
    char v8 = *(unsigned char *)(a1 + 44);
    int v9 = *(_DWORD *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = HIDWORD(*(void *)a1);
    uint64_t v12 = *(void *)(a1 + 32);
    unint64_t v13 = HIDWORD(*a2);
    v21[0] = *(void *)a1;
    v21[1] = v11;
    uint64_t v22 = v10;
    long long v23 = *(_OWORD *)(a1 + 16);
    uint64_t v24 = v12;
    int v25 = v9;
    char v26 = v8;
    v15[0] = v7;
    v15[1] = v13;
    uint64_t v16 = v6;
    long long v17 = *((_OWORD *)a2 + 1);
    uint64_t v18 = v5;
    int v19 = v4;
    char v20 = v3;
    char v2 = specialized static ResolvedShadowStyle.== infix(_:_:)((uint64_t)v21, (uint64_t)v15);
  }
  return v2 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _ShapeStyle_Pack.Effect.Kind(uint64_t a1, uint64_t *a2)
{
  char v2 = *(unsigned char *)(a1 + 45) & *((unsigned char *)a2 + 45);
  if ((*(unsigned char *)(a1 + 45) & 1) == 0 && (*((unsigned char *)a2 + 45) & 1) == 0)
  {
    char v3 = *((unsigned char *)a2 + 44);
    int v4 = *((_DWORD *)a2 + 10);
    uint64_t v5 = a2[4];
    uint64_t v7 = *a2;
    uint64_t v6 = a2[1];
    char v8 = *(unsigned char *)(a1 + 44);
    int v9 = *(_DWORD *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = HIDWORD(*(void *)a1);
    uint64_t v12 = *(void *)(a1 + 32);
    unint64_t v13 = HIDWORD(*a2);
    v21[0] = *(void *)a1;
    v21[1] = v11;
    uint64_t v22 = v10;
    long long v23 = *(_OWORD *)(a1 + 16);
    uint64_t v24 = v12;
    int v25 = v9;
    char v26 = v8;
    v15[0] = v7;
    v15[1] = v13;
    uint64_t v16 = v6;
    long long v17 = *((_OWORD *)a2 + 1);
    uint64_t v18 = v5;
    int v19 = v4;
    char v20 = v3;
    char v2 = specialized static ResolvedShadowStyle.== infix(_:_:)((uint64_t)v21, (uint64_t)v15);
  }
  return v2 & 1;
}

__n128 _ShapeStyle_Pack.Effect.kind.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  int v3 = *(_DWORD *)(v1 + 40);
  char v4 = *(unsigned char *)(v1 + 44);
  char v5 = *(unsigned char *)(v1 + 45);
  __n128 result = *(__n128 *)v1;
  long long v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)(a1 + 32) = v2;
  *(unsigned char *)(a1 + 44) = v4;
  *(_DWORD *)(a1 + 40) = v3;
  *(unsigned char *)(a1 + 45) = v5;
  return result;
}

__n128 _ShapeStyle_Pack.Effect.kind.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 44);
  char v5 = *(unsigned char *)(a1 + 45);
  __n128 result = *(__n128 *)a1;
  long long v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v7;
  *(void *)(v1 + 32) = v2;
  *(unsigned char *)(v1 + 44) = v4;
  *(_DWORD *)(v1 + 40) = v3;
  *(unsigned char *)(v1 + 45) = v5;
  return result;
}

uint64_t (*_ShapeStyle_Pack.Effect.kind.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float _ShapeStyle_Pack.Effect.opacity.getter()
{
  return *(float *)(v0 + 48);
}

void _ShapeStyle_Pack.Effect.opacity.setter(float a1)
{
  *(float *)(v1 + 48) = a1;
}

uint64_t (*_ShapeStyle_Pack.Effect.opacity.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_Pack.Effect._blend.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 56);
  *(void *)a1 = v2;
  unsigned __int8 v3 = *(unsigned char *)(v1 + 64);
  *(unsigned char *)(a1 + 8) = v3;
  return outlined copy of GraphicsBlendMode?(v2, v3);
}

uint64_t _ShapeStyle_Pack.Effect._blend.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = outlined consume of GraphicsBlendMode?(*(void *)(v1 + 56), *(unsigned char *)(v1 + 64));
  *(void *)(v1 + 56) = v2;
  *(unsigned char *)(v1 + 64) = v3;
  return result;
}

uint64_t (*_ShapeStyle_Pack.Effect._blend.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_Pack.Effect.blend.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 56);
  int v4 = *(unsigned __int8 *)(v1 + 64);
  if (v4 == 255)
  {
    if (one-time initialization token for normal != -1) {
      swift_once();
    }
    uint64_t v5 = static GraphicsBlendMode.normal;
    char v6 = byte_26B0EB4A0;
    *(void *)a1 = static GraphicsBlendMode.normal;
    *(unsigned char *)(a1 + 8) = v6;
    outlined copy of GraphicsBlendMode(v5, v6);
  }
  else
  {
    *(void *)a1 = v3;
    *(unsigned char *)(a1 + 8) = v4 & 1;
  }

  return outlined copy of GraphicsBlendMode?(v3, v4);
}

void _ShapeStyle_Pack.Key.name.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *_ShapeStyle_Pack.Key.name.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*_ShapeStyle_Pack.Key.name.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unsigned char *_ShapeStyle_Pack.Key.init(_:_:)@<X0>(unsigned char *result@<X0>, char a2@<W1>, unsigned char *a3@<X8>)
{
  *a3 = *result;
  a3[1] = a2;
  return result;
}

uint64_t _ShapeStyle_Pack.Key.level.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t _ShapeStyle_Pack.Key.level.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

void *(*_ShapeStyle_Pack.Key.level.modify(void *a1))(void *result)
{
  *a1 = *(unsigned __int8 *)(v1 + 1);
  a1[1] = v1;
  return _ShapeStyle_Pack.Key.level.modify;
}

void *_ShapeStyle_Pack.Key.level.modify(void *result)
{
  *(unsigned char *)(result[1] + 1) = *result;
  return result;
}

BOOL static _ShapeStyle_Pack.Key.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (v2 < v3) {
    return 1;
  }
  return v2 == v3 && a1[1] < a2[1];
}

BOOL static _ShapeStyle_Pack.Key.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance _ShapeStyle_Pack.Key(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (v2 < v3) {
    return 1;
  }
  return v2 == v3 && a1[1] < a2[1];
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance _ShapeStyle_Pack.Key(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a2;
  unsigned int v3 = *a1;
  if (v2 < v3) {
    return 0;
  }
  return v2 != v3 || a2[1] >= a1[1];
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance _ShapeStyle_Pack.Key(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (v2 < v3) {
    return 0;
  }
  return v2 != v3 || a1[1] >= a2[1];
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance _ShapeStyle_Pack.Key(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a2;
  unsigned int v3 = *a1;
  if (v2 < v3) {
    return 1;
  }
  return v2 == v3 && a2[1] < a1[1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _ShapeStyle_Pack.Key(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void _ShapeStyle_Pack.init()(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t static _ShapeStyle_Pack.style(_:name:level:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v20 = *(void *)(a1 + 8);
  long long v21 = *(void **)a1;
  uint64_t v18 = *(void **)(a1 + 24);
  int v19 = *(void **)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  char v9 = *(unsigned char *)(a1 + 80);
  int v10 = *(_DWORD *)(a1 + 84);
  uint64_t v11 = *(void *)(a1 + 88);
  uint64_t v12 = *(void *)(a1 + 104);
  char v13 = *a2;
  unsigned __int8 v14 = *(unsigned char *)(a1 + 96);
  type metadata accessor for _ContiguousArrayStorage<(key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)>();
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_2461B9DC0;
  *(unsigned char *)(v15 + 32) = v13;
  *(unsigned char *)(v15 + 33) = a3;
  *(void *)(v15 + 40) = v21;
  *(void *)(v15 + 48) = v20;
  *(void *)(v15 + 56) = v19;
  *(void *)(v15 + 64) = v18;
  *(void *)(v15 + 72) = v17;
  *(void *)(v15 + 80) = v4;
  *(void *)(v15 + 88) = v5;
  *(void *)(v15 + 96) = v6;
  *(void *)(v15 + 104) = v7;
  *(void *)(v15 + 112) = v8;
  *(unsigned char *)(v15 + 120) = v9;
  *(_DWORD *)(v15 + 124) = v10;
  *(void *)(v15 + 128) = v11;
  *(unsigned char *)(v15 + 136) = v14;
  *(void *)(v15 + 144) = v12;
  *a4 = v15;
  outlined copy of _ShapeStyle_Pack.Fill(v21, v20, v19, v18, v17, v4, v5, v6, v7, v8, v9);
  outlined copy of GraphicsBlendMode?(v11, v14);

  return swift_bridgeObjectRetain();
}

id static _ShapeStyle_Pack.fill(_:name:level:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  char v12 = *(unsigned char *)(a1 + 80);
  char v13 = *a2;
  type metadata accessor for _ContiguousArrayStorage<(key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)>();
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_2461B9DC0;
  *(unsigned char *)(v14 + 32) = v13;
  *(unsigned char *)(v14 + 33) = a3;
  *(void *)(v14 + 40) = v17;
  *(void *)(v14 + 48) = v16;
  *(void *)(v14 + 56) = v4;
  *(void *)(v14 + 64) = v5;
  *(void *)(v14 + 72) = v6;
  *(void *)(v14 + 80) = v7;
  *(void *)(v14 + 88) = v8;
  *(void *)(v14 + 96) = v9;
  *(void *)(v14 + 104) = v10;
  *(void *)(v14 + 112) = v11;
  *(unsigned char *)(v14 + 120) = v12;
  *(_DWORD *)(v14 + 124) = 1065353216;
  *(void *)(v14 + 128) = 0;
  *(unsigned char *)(v14 + 136) = -1;
  *(void *)(v14 + 144) = MEMORY[0x263F8EE78];
  *a4 = v14;
  return outlined copy of _ShapeStyle_Pack.Fill(v17, v16, v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t static _ShapeStyle_Pack.defaultValue.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static _ShapeStyle_Pack.defaultValue;

  return swift_bridgeObjectRetain();
}

float key path getter for _ShapeStyle_Pack.subscript(_:_:) : _ShapeStyle_Pack@<S0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v4 = *(unsigned char *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v14 = *a1;
  unsigned __int8 v13 = v4;
  _ShapeStyle_Pack.subscript.getter(&v13, v5, (uint64_t)v15);
  char v6 = v16;
  float result = v17;
  uint64_t v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  long long v11 = v15[1];
  *(_OWORD *)a3 = v15[0];
  *(_OWORD *)(a3 + 16) = v11;
  long long v12 = v15[3];
  *(_OWORD *)(a3 + 32) = v15[2];
  *(_OWORD *)(a3 + 48) = v12;
  *(_OWORD *)(a3 + 64) = v15[4];
  *(unsigned char *)(a3 + 80) = v6;
  *(float *)(a3 + 84) = result;
  *(void *)(a3 + 88) = v8;
  *(unsigned char *)(a3 + 96) = v9;
  *(void *)(a3 + 104) = v10;
  return result;
}

uint64_t key path setter for _ShapeStyle_Pack.subscript(_:_:) : _ShapeStyle_Pack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3 = *(unsigned char *)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  char v6 = *(void **)(a1 + 16);
  uint64_t v7 = *(void **)(a1 + 24);
  uint64_t v8 = *(void **)(a1 + 32);
  char v9 = *(void **)(a1 + 40);
  uint64_t v10 = *(void **)(a1 + 48);
  long long v11 = *(void **)(a1 + 56);
  long long v12 = *(void **)(a1 + 64);
  unsigned __int8 v13 = *(void **)(a1 + 72);
  char v14 = *(unsigned char *)(a1 + 80);
  int v15 = *(_DWORD *)(a1 + 84);
  uint64_t v16 = *(void *)(a1 + 88);
  uint64_t v17 = *(void *)(a1 + 104);
  unsigned __int8 v18 = *(unsigned char *)(a1 + 96);
  v21[0] = *(id *)a1;
  v21[1] = v5;
  _DWORD v21[2] = v6;
  v21[3] = v7;
  v21[4] = v8;
  v21[5] = v9;
  v21[6] = v10;
  v21[7] = v11;
  v21[8] = v12;
  v21[9] = v13;
  char v22 = v14;
  int v23 = v15;
  uint64_t v24 = v16;
  unsigned __int8 v25 = v18;
  uint64_t v26 = v17;
  unsigned __int8 v20 = v3;
  outlined copy of _ShapeStyle_Pack.Fill(v21[0], v5, v6, v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11, (uint64_t)v12, (uint64_t)v13, v14);
  outlined copy of GraphicsBlendMode?(v16, v18);
  swift_bridgeObjectRetain();
  return _ShapeStyle_Pack.subscript.setter((uint64_t *)v21, &v20, v4);
}

void (*_ShapeStyle_Pack.subscript.modify(void *a1, unsigned __int8 *a2, uint64_t a3))(void ***a1, char a2)
{
  uint64_t v7 = malloc(0x88uLL);
  *a1 = v7;
  v7[14] = a3;
  v7[15] = v3;
  unsigned __int8 v8 = *a2;
  *((unsigned char *)v7 + 128) = *a2;
  uint64_t v11 = *v3;
  unsigned __int8 v10 = v8;
  _ShapeStyle_Pack.subscript.getter(&v10, a3, (uint64_t)v7);
  return _ShapeStyle_Pack.subscript.modify;
}

void _ShapeStyle_Pack.subscript.modify(void ***a1, char a2)
{
  unsigned __int8 v3 = *a1;
  uint64_t v4 = **a1;
  uint64_t v5 = (uint64_t)v3[1];
  char v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v8 = (uint64_t)v3[4];
  uint64_t v9 = (uint64_t)v3[5];
  uint64_t v10 = (uint64_t)v3[6];
  uint64_t v11 = (uint64_t)v3[7];
  uint64_t v12 = (uint64_t)v3[8];
  uint64_t v13 = (uint64_t)v3[9];
  char v14 = *((unsigned char *)v3 + 80);
  int v15 = *((_DWORD *)v3 + 21);
  uint64_t v16 = (uint64_t)v3[11];
  unsigned __int8 v17 = *((unsigned char *)v3 + 96);
  unsigned __int8 v18 = *((unsigned char *)v3 + 128);
  char v19 = v3[14];
  unsigned __int8 v20 = v3[13];
  v23[0] = (uint64_t)v4;
  v23[1] = v5;
  v23[2] = (uint64_t)v6;
  v23[3] = (uint64_t)v7;
  v23[4] = v8;
  v23[5] = v9;
  v23[6] = v10;
  v23[7] = v11;
  v23[8] = v12;
  v23[9] = v13;
  char v24 = v14;
  int v25 = v15;
  uint64_t v26 = v16;
  unsigned __int8 v27 = v17;
  unint64_t v28 = v20;
  unsigned __int8 v29 = v18;
  if (a2)
  {
    outlined copy of _ShapeStyle_Pack.Fill(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);
    outlined copy of GraphicsBlendMode?(v16, v17);
    swift_bridgeObjectRetain();
    _ShapeStyle_Pack.subscript.setter(v23, &v29, v19);
    uint64_t v21 = (uint64_t)v3[11];
    unsigned __int8 v22 = *((unsigned char *)v3 + 96);
    outlined consume of _ShapeStyle_Pack.Fill((uint64_t)*v3, v3[1], (uint64_t)v3[2], v3[3], (uint64_t)v3[4], (uint64_t)v3[5], (uint64_t)v3[6], (uint64_t)v3[7], (uint64_t)v3[8], (uint64_t)v3[9], *((unsigned char *)v3 + 80));
    outlined consume of GraphicsBlendMode?(v21, v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    _ShapeStyle_Pack.subscript.setter(v23, &v29, v19);
  }

  free(v3);
}

uint64_t _ShapeStyle_Pack.subscript.getter@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  uint64_t v6 = *v2;
  unsigned __int8 v5 = v3;
  _ShapeStyle_Pack.Slice.init(pack:name:)(&v6, &v5, a2);

  return swift_bridgeObjectRetain();
}

uint64_t _ShapeStyle_Pack.Slice.startIndex.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t _ShapeStyle_Pack.Slice.endIndex.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24) >> 1;
  BOOL v3 = __OFSUB__(v2, v1);
  uint64_t v4 = v2 - v1;
  if (v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v5 = *(unsigned __int8 *)(v0 + 32);
  uint64_t result = v5 + v4;
  if (__OFADD__(v5, v4)) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t _ShapeStyle_Pack.Slice.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(v2 + 32);
  BOOL v7 = __OFSUB__(result, v3);
  uint64_t v4 = result - v3;
  if (v7)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 24) >> 1;
    if (v4 >= *(void *)(v2 + 16))
    {
      BOOL v7 = __OFSUB__(v4, v5);
      BOOL v6 = v4 - v5 < 0;
    }
    else
    {
      BOOL v7 = 0;
      BOOL v6 = 0;
    }
    if (v6 != v7)
    {
      uint64_t v8 = *(void *)(v2 + 8) + 120 * v4;
      uint64_t v9 = *(void *)(v8 + 112);
      long long v10 = *(_OWORD *)(v8 + 96);
      long long v11 = *(_OWORD *)(v8 + 64);
      *(_OWORD *)&v19[80] = *(_OWORD *)(v8 + 80);
      long long v20 = v10;
      long long v12 = *(_OWORD *)(v8 + 32);
      long long v13 = *(_OWORD *)(v8 + 48);
      long long v14 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)char v19 = *(_OWORD *)v8;
      *(_OWORD *)&v19[16] = v14;
      *(_OWORD *)&v19[32] = v12;
      *(_OWORD *)&v19[48] = v13;
      uint64_t v21 = v9;
      *(_OWORD *)&v19[64] = v11;
      LOBYTE(v8) = v19[88];
      LODWORD(v12) = *(_DWORD *)&v19[92];
      uint64_t v15 = v20;
      char v16 = BYTE8(v20);
      long long v17 = *(_OWORD *)&v19[24];
      *(_OWORD *)a2 = *(_OWORD *)&v19[8];
      *(_OWORD *)(a2 + 16) = v17;
      long long v18 = *(_OWORD *)&v19[56];
      *(_OWORD *)(a2 + 32) = *(_OWORD *)&v19[40];
      *(_OWORD *)(a2 + 48) = v18;
      *(_OWORD *)(a2 + 64) = *(_OWORD *)&v19[72];
      *(unsigned char *)(a2 + 80) = v8;
      *(_DWORD *)(a2 + 84) = v12;
      *(void *)(a2 + 88) = v15;
      *(unsigned char *)(a2 + 96) = v16;
      *(void *)(a2 + 104) = v9;
      return outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v19);
    }
  }
  __break(1u);
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance _ShapeStyle_Pack.Slice@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24) >> 1;
  BOOL v6 = __OFSUB__(v5, v4);
  uint64_t v7 = v5 - v4;
  if (v6)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v8 = *(unsigned __int8 *)(v2 + 32);
  BOOL v6 = __OFADD__(v8, v7);
  uint64_t v9 = v8 + v7;
  if (v6)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v3 >= v8 && v3 < v9)
  {
    *a2 = v3;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _ShapeStyle_Pack.Slice(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24) >> 1;
  BOOL v5 = __OFSUB__(v4, v3);
  uint64_t v6 = v4 - v3;
  if (v5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v7 = *(unsigned __int8 *)(v1 + 32);
  BOOL v5 = __OFADD__(v7, v6);
  uint64_t v8 = v7 + v6;
  if (v5)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v2 >= v7 && v2 < v8)
  {
    *uint64_t result = v2;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance _ShapeStyle_Pack.Slice(uint64_t *a1, uint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

void protocol witness for Collection.startIndex.getter in conformance _ShapeStyle_Pack.Slice(void *a1@<X8>)
{
  *a1 = *(unsigned __int8 *)(v1 + 32);
}

void protocol witness for Collection.endIndex.getter in conformance _ShapeStyle_Pack.Slice(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24) >> 1;
  BOOL v4 = __OFSUB__(v3, v2);
  uint64_t v5 = v3 - v2;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = *(unsigned __int8 *)(v1 + 32);
    BOOL v4 = __OFADD__(v6, v5);
    uint64_t v7 = v6 + v5;
    if (!v4)
    {
      *a1 = v7;
      return;
    }
  }
  __break(1u);
}

void (*protocol witness for Collection.subscript.read in conformance _ShapeStyle_Pack.Slice(void (**a1)(uint64_t *a1), void *a2))(uint64_t *a1)
{
  uint64_t result = (void (*)(uint64_t *))malloc(0xE8uLL);
  *a1 = result;
  uint64_t v6 = *(unsigned __int8 *)(v2 + 32);
  uint64_t v7 = *a2 - v6;
  if (__OFSUB__(*a2, v6))
  {
    __break(1u);
  }
  else if (v7 >= *(void *)(v2 + 16) && v7 < *(void *)(v2 + 24) >> 1)
  {
    uint64_t v9 = *(void *)(v2 + 8) + 120 * v7;
    uint64_t v10 = *(void *)(v9 + 112);
    long long v11 = *(_OWORD *)(v9 + 96);
    long long v12 = *(_OWORD *)(v9 + 64);
    *((_OWORD *)result + 5) = *(_OWORD *)(v9 + 80);
    *((_OWORD *)result + 6) = v11;
    long long v13 = *(_OWORD *)(v9 + 32);
    long long v14 = *(_OWORD *)(v9 + 48);
    long long v15 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)uint64_t result = *(_OWORD *)v9;
    *((_OWORD *)result + 1) = v15;
    *((_OWORD *)result + 2) = v13;
    *((_OWORD *)result + 3) = v14;
    *((void *)result + 14) = v10;
    *((_OWORD *)result + 4) = v12;
    LOBYTE(v9) = *((unsigned char *)result + 88);
    LODWORD(v13) = *((_DWORD *)result + 23);
    uint64_t v16 = *((void *)result + 12);
    char v17 = *((unsigned char *)result + 104);
    *(_OWORD *)((char *)result + 120) = *(_OWORD *)((char *)result + 8);
    *(_OWORD *)((char *)result + 136) = *(_OWORD *)((char *)result + 24);
    *(_OWORD *)((char *)result + 152) = *(_OWORD *)((char *)result + 40);
    *(_OWORD *)((char *)result + 168) = *(_OWORD *)((char *)result + 56);
    *(_OWORD *)((char *)result + 184) = *(_OWORD *)((char *)result + 72);
    *((unsigned char *)result + 200) = v9;
    *((_DWORD *)result + 51) = v13;
    *((void *)result + 26) = v16;
    *((unsigned char *)result + 216) = v17;
    *((void *)result + 28) = v10;
    outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)result);
    return protocol witness for Collection.subscript.read in conformance _ShapeStyle_Pack.Slice;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.subscript.read in conformance _ShapeStyle_Pack.Slice(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 208);
  unsigned __int8 v3 = *(unsigned char *)(*a1 + 216);
  outlined consume of _ShapeStyle_Pack.Fill(*(void *)(*a1 + 120), *(void *)(v1 + 128), *(void *)(v1 + 136), *(void *)(v1 + 144), *(void *)(v1 + 152), *(void *)(v1 + 160), *(void *)(v1 + 168), *(void *)(v1 + 176), *(void *)(v1 + 184), *(void *)(v1 + 192), *(unsigned char *)(v1 + 200));
  outlined consume of GraphicsBlendMode?(v2, v3);
  swift_bridgeObjectRelease();

  free((void *)v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance _ShapeStyle_Pack.Slice@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], a2);
}

void protocol witness for Collection.indices.getter in conformance _ShapeStyle_Pack.Slice(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24) >> 1;
  BOOL v4 = __OFSUB__(v3, v2);
  uint64_t v5 = v3 - v2;
  if (v4)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v6 = *(unsigned __int8 *)(v1 + 32);
  BOOL v4 = __OFADD__(v6, v5);
  uint64_t v7 = v6 + v5;
  if (v4)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v7 >= v6)
  {
    *a1 = v6;
    a1[1] = v7;
    return;
  }
LABEL_7:
  __break(1u);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance _ShapeStyle_Pack.Slice()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24) >> 1;
  BOOL v3 = __OFSUB__(v2, v1);
  uint64_t v4 = v2 - v1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *(unsigned __int8 *)(v0 + 32);
    BOOL v3 = __OFADD__(v5, v4);
    uint64_t v6 = v5 + v4;
    if (!v3) {
      return v6 == v5;
    }
  }
  __break(1u);
  return result;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance _ShapeStyle_Pack.Slice@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 24) >> 1;
  BOOL v7 = __OFSUB__(v6, v5);
  uint64_t v8 = v6 - v5;
  if (v7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v9 = *(unsigned __int8 *)(v3 + 32);
  BOOL v7 = __OFADD__(v9, v8);
  uint64_t v10 = v9 + v8;
  if (v7)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 >= v9 && v10 >= v4)
  {
    *a3 = v4;
    return result;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _ShapeStyle_Pack.Slice@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance _ShapeStyle_Pack.Slice@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24) >> 1;
  BOOL v5 = __OFSUB__(v4, v3);
  uint64_t v6 = v4 - v3;
  if (v5)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v7 = *(unsigned __int8 *)(v2 + 32);
  uint64_t v8 = v7 + v6;
  if (__OFADD__(v7, v6))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v9 = *result;
  if (*result >= v7 && v9 < v8)
  {
    *a2 = v9 + 1;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance _ShapeStyle_Pack.Slice(uint64_t *result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24) >> 1;
  BOOL v4 = __OFSUB__(v3, v2);
  uint64_t v5 = v3 - v2;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = *(unsigned __int8 *)(v1 + 32);
  uint64_t v7 = v6 + v5;
  if (__OFADD__(v6, v5))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v8 = *result;
  if (*result >= v6 && v8 < v7)
  {
    *uint64_t result = v8 + 1;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance _ShapeStyle_Pack.Slice@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(unsigned __int8 *)(v1 + 32);
  __n128 result = *(__n128 *)v1;
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  *(void *)(a1 + 40) = v2;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance _ShapeStyle_Pack.Slice()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24) >> 1;
  BOOL v3 = __OFSUB__(v2, v1);
  uint64_t v4 = v2 - v1;
  if (v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v5 = *(unsigned __int8 *)(v0 + 32);
  BOOL v3 = __OFADD__(v5, v4);
  uint64_t v6 = v5 + v4;
  if (v3)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = v6 - v5;
  if (v6 < v5) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _ShapeStyle_Pack.Slice()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_unknownObjectRelease();
  return v1;
}

Swift::Void __swiftcall _ShapeStyle_Pack.adjustLevelIndices(of:by:)(SwiftUI::_ShapeStyle_Name of, Swift::Int by)
{
  BOOL v3 = (void *)*v2;
  uint64_t v4 = *(void *)(*v2 + 16);
  if (v4)
  {
    unsigned int v6 = *(unsigned __int8 *)of;
    uint64_t v21 = v2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_17:
    }
      BOOL v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    unint64_t v7 = 0;
    uint64_t v8 = v3 + 4;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = v3[2];
        if (v7 >= v9)
        {
          __break(1u);
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }
        uint64_t v10 = (unsigned __int8 *)&v8[15 * v7];
        unsigned int v11 = *v10;
        if (v11 >= v6) {
          break;
        }
LABEL_5:
        if ((uint64_t)++v7 >= v4) {
          goto LABEL_13;
        }
      }
      if (v6 < v11) {
        goto LABEL_13;
      }
      uint64_t v12 = v10[1];
      BOOL v13 = __OFADD__(v12, by);
      Swift::Int v14 = v12 + by;
      if (v13) {
        goto LABEL_16;
      }
      if ((v14 & 0x8000000000000000) == 0)
      {
        v10[1] = v14;
        goto LABEL_5;
      }
      unint64_t v15 = v9 - 1;
      uint64_t v16 = v9 - 1 - v7;
      if (v16 < 0)
      {
        _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      char v17 = &v8[15 * v7];
      char v25 = *((unsigned char *)v17 + 88);
      uint64_t v24 = v17[10];
      uint64_t v23 = v17[9];
      uint64_t v30 = v17[8];
      uint64_t v31 = v17[12];
      uint64_t v28 = v17[6];
      uint64_t v29 = v17[7];
      uint64_t v27 = v17[5];
      uint64_t v18 = v17[3];
      uint64_t v22 = v17[4];
      uint64_t v20 = v17[1];
      uint64_t v19 = v17[2];
      unsigned __int8 v26 = *((unsigned char *)v17 + 104);
      memmove(v10, v10 + 120, 120 * v16);
      v3[2] = v15;
      outlined consume of _ShapeStyle_Pack.Fill(v20, v19, v18, v22, v27, v28, v29, v30, v23, v24, v25);
      outlined consume of GraphicsBlendMode?(v31, v26);
      swift_bridgeObjectRelease();
      if ((uint64_t)v7 >= --v4)
      {
LABEL_13:
        *uint64_t v21 = v3;
        return;
      }
    }
  }
}

BOOL _ShapeStyle_Pack.Style.isClear.getter()
{
  if (*(float *)(v0 + 84) == 0.0)
  {
    return 1;
  }
  else
  {
    uint64_t v3 = *(void *)v0;
    uint64_t v2 = *(void *)(v0 + 8);
    uint64_t v4 = *(void *)(v0 + 32);
    uint64_t v5 = *(void *)(v0 + 40);
    uint64_t v6 = *(void *)(v0 + 48);
    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v8 = *(void *)(v0 + 64);
    uint64_t v9 = *(void *)(v0 + 72);
    uint64_t v10 = *(void *)(v0 + 104);
    BOOL v1 = 0;
    switch(*(unsigned char *)(v0 + 80))
    {
      case 1:
        uint64_t v16 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 96);
        uint64_t v17 = *(void *)(v0 + 16);
        uint64_t v18 = *(void *)(v0 + 24);
        uint64_t v12 = swift_retain();
        char v13 = v16(v12);
        outlined consume of _ShapeStyle_Pack.Fill(v3, v2, v17, v18, v4, v5, v6, v7, v8, v9, 1);
        if ((v13 & 1) == 0) {
          return 0;
        }
        goto LABEL_8;
      case 3:
      case 4:
      case 5:
      case 6:
        return v1;
      default:
        if ((v2 & 0x7FFFFFFF00000000) != 0) {
          return 0;
        }
LABEL_8:
        uint64_t v14 = *(void *)(v10 + 16);
        if (!v14) {
          return 1;
        }
        uint64_t v15 = v10 + 40;
        BOOL v1 = 1;
        do
        {
          if (v1 && (*(unsigned char *)(v15 + 37) & 1) == 0) {
            BOOL v1 = (*(_DWORD *)(v15 + 4) & 0x7FFFFFFF) == 0;
          }
          v15 += 72;
          --v14;
        }
        while (v14);
        break;
    }
  }
  return v1;
}

unint64_t _ShapeStyle_Pack.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *v2;
  unsigned __int8 v23 = 2;
  _ShapeStyle_Pack.subscript.getter(&v23, 0, (uint64_t)&v25);
  uint64_t v3 = v26;
  id v19 = v25;
  uint64_t v4 = (uint64_t)v27;
  uint64_t v5 = v28;
  uint64_t v7 = v29;
  uint64_t v6 = v30;
  uint64_t v8 = v31;
  uint64_t v9 = v32;
  uint64_t v11 = v33;
  uint64_t v10 = v34;
  int v12 = v35;
  uint64_t v21 = v36;
  unsigned __int8 v20 = v37;
  outlined copy of _ShapeStyle_Pack.Fill(v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35);
  uint64_t v22 = v5;
  unsigned __int8 v13 = v5;
  uint64_t v14 = v8;
  outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v19, v3, v4, v13, v7, v6, v8, v9, v11, v10, v12);
  outlined consume of GraphicsBlendMode?(v21, v20);
  swift_bridgeObjectRelease();
  if (v12 == 6)
  {
    id v25 = v19;
    uint64_t v26 = v3;
    LOWORD(v27) = v4 & 0x101;
    BYTE2(v27) = BYTE2(v4) & 1;
    uint64_t v28 = v22;
    unint64_t v15 = ResolvedMulticolorStyle.resolve(name:)(a1, a2);
    outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v19, v3, v4, v22, v7, v6, v14, v9, v11, v10, 6);
  }
  else
  {
    outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v19, v3, v4, v22, v7, v6, v8, v9, v11, v10, v12);
    return 0;
  }
  return v15;
}

unint64_t ResolvedMulticolorStyle.resolve(name:)(uint64_t a1, uint64_t a2)
{
  unsigned int v6 = *v2;
  unsigned int v5 = v2[1];
  char v7 = *((unsigned char *)v2 + 16);
  char v8 = *((unsigned char *)v2 + 17);
  char v9 = *((unsigned char *)v2 + 18);
  uint64_t v10 = (void *)*((void *)v2 + 3);
  if (a1 == 0xD000000000000012 && a2 == 0x800000024621F720
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return v6 | ((unint64_t)v5 << 32);
  }
  if (a1 == 0x6574696877 && a2 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 0x3F8000003F800000;
  }
  if (a1 == 0x6B63616C62 && a2 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 0;
  }
  char v14 = v7;
  char v15 = v8;
  char v16 = v9;
  uint64_t v17 = v10;
  ResolvedMulticolorStyle.environment.getter(v18);
  v13[0] = v18[0];
  v13[1] = v18[1];
  unint64_t v11 = specialized static Color.Resolved.named(_:bundle:in:)(a1, a2, v10, v13);
  swift_release();
  swift_release();
  return v11;
}

BOOL _ShapeStyle_Pack.Style.ignoresBackdrop.getter()
{
  if (*(float *)(v0 + 84) != 1.0) {
    return 0;
  }
  uint64_t v2 = *(void **)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void **)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v9 = *(void *)(v0 + 64);
  uint64_t v10 = *(void *)(v0 + 72);
  unsigned __int8 v11 = *(unsigned char *)(v0 + 80);
  uint64_t v12 = *(void *)(v0 + 88);
  int v13 = *(unsigned __int8 *)(v0 + 96);
  uint64_t v29 = (uint64_t)v3;
  uint64_t v30 = v1;
  uint64_t v35 = *(void *)v0;
  uint64_t v28 = v5;
  uint64_t v27 = v7;
  uint64_t v34 = v9;
  uint64_t v33 = v10;
  uint64_t v36 = v11;
  if (v13 == 255)
  {
    unsigned __int8 v15 = -1;
    outlined copy of _ShapeStyle_Pack.Fill(v2, v1, v3, v4, v6, v5, v8, v7, v9, v10, v11);
    outlined copy of GraphicsBlendMode?(v12, 0xFFu);
    uint64_t v21 = one-time initialization token for normal;
    swift_bridgeObjectRetain();
    if (v21 != -1) {
      swift_once();
    }
    uint64_t v32 = static GraphicsBlendMode.normal;
    char v31 = byte_26B0EB4A0;
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
    uint64_t v19 = (uint64_t)v3;
    unsigned __int8 v18 = v30;
    uint64_t v20 = v35;
    uint64_t v17 = v28;
    uint64_t v7 = v27;
  }
  else
  {
    char v31 = v13 & 1;
    char v14 = *(void **)v0;
    unsigned __int8 v15 = *(unsigned char *)(v0 + 96);
    unsigned __int8 v16 = v1;
    uint64_t v17 = v5;
    outlined copy of _ShapeStyle_Pack.Fill(v14, v1, v3, v4, v6, v5, v8, v7, v9, v10, v11);
    outlined copy of GraphicsBlendMode?(v12, v15);
    unsigned __int8 v18 = v16;
    uint64_t v19 = (uint64_t)v3;
    uint64_t v20 = v35;
    swift_bridgeObjectRetain();
    uint64_t v32 = v12;
  }
  outlined copy of GraphicsBlendMode?(v12, v15);
  outlined consume of _ShapeStyle_Pack.Fill(v20, v18, v19, v4, v6, v17, v8, v7, v34, v33, v36);
  outlined consume of GraphicsBlendMode?(v12, v15);
  swift_bridgeObjectRelease();
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  uint64_t v22 = static GraphicsBlendMode.normal;
  char v23 = byte_26B0EB4A0;
  if ((v31 & 1) == 0)
  {
    if ((byte_26B0EB4A0 & 1) == 0)
    {
      outlined consume of GraphicsBlendMode(v32, 0);
      outlined consume of GraphicsBlendMode(v22, 0);
      BOOL result = 0;
      if (v32 != v22) {
        return result;
      }
      goto LABEL_15;
    }
    goto LABEL_18;
  }
  if (!byte_26B0EB4A0)
  {
    swift_unknownObjectRetain();
LABEL_18:
    outlined copy of GraphicsBlendMode(v22, v23);
    outlined consume of GraphicsBlendMode(v32, v31);
    outlined consume of GraphicsBlendMode(v22, v23);
    outlined consume of GraphicsBlendMode(v32, v31);
    return 0;
  }
  swift_unknownObjectRetain();
  outlined consume of GraphicsBlendMode(v32, 1);
  outlined consume of GraphicsBlendMode(v22, 1);
  if (v32 != v22) {
    return 0;
  }
LABEL_15:
  BOOL result = 1;
  switch(v36)
  {
    case 1:
      id v25 = *(uint64_t (**)(uint64_t))(*(void *)v35 + 104);
      uint64_t v26 = swift_retain();
      LOBYTE(v25) = v25(v26);
      outlined consume of _ShapeStyle_Pack.Fill(v35, v30, v29, v4, v6, v28, v8, v27, v34, v33, 1);
      BOOL result = v25 & 1;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
      return 0;
    case 6:
      return result;
    default:
      BOOL result = *((float *)&v30 + 1) == 1.0;
      break;
  }
  return result;
}

uint64_t _ShapeStyle_Pack.AnimatableData.elements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _ShapeStyle_Pack.AnimatableData.elements.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_ShapeStyle_Pack.AnimatableData.elements.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void static _ShapeStyle_Pack.AnimatableData.zero.getter(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

Swift::Void __swiftcall _ShapeStyle_Pack.AnimatableData.scale(by:)(Swift::Double by)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    char v23 = v1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_25:
    }
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    unint64_t v4 = 0;
    float v5 = by;
    float v24 = v5;
    do
    {
      if (v4 == v3) {
        goto LABEL_23;
      }
      if (v4 >= v2[2]) {
        goto LABEL_24;
      }
      uint64_t v6 = (uint64_t)&v2[14 * v4 + 4];
      _ShapeStyle_Pack.Fill.AnimatableData.scale(by:)(by);
      uint64_t v9 = *(void **)(v6 + 104);
      uint64_t v8 = (float *)(v6 + 104);
      uint64_t v7 = v9;
      *(v8 - 2) = *(v8 - 2) * v24;
      uint64_t v10 = v9[2];
      if (v10)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)uint64_t v8 = v7;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
          *(void *)uint64_t v8 = v7;
        }
        char v12 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)uint64_t v8 = v7;
        if ((v12 & 1) == 0) {
          *(void *)uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
        }
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        while (1)
        {
          unsigned __int8 v15 = *(void **)v8;
          char v16 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)uint64_t v8 = v15;
          if ((v16 & 1) == 0)
          {
            unsigned __int8 v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
            *(void *)uint64_t v8 = v15;
          }
          if (v14 >= v15[2]) {
            break;
          }
          uint64_t v17 = &v15[v13];
          *(float *)&v15[v13 + 4] = *(float *)&v15[v13 + 4] * v24;
          if (by != 1.0 && (v17[10] & 1) == 0)
          {
            unsigned __int8 v18 = &v15[v13];
            double v19 = *(double *)&v15[v13 + 9];
            int64x2_t v20 = *(int64x2_t *)(v17 + 5);
            float32x2_t v21 = vmul_n_f32((float32x2_t)vmovn_s64(v20), v24);
            v22.i64[0] = v21.u32[0];
            v22.i64[1] = v21.u32[1];
            *(int8x16_t *)(v17 + 5) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_n_f32((float32x2_t)vshrn_n_s64(v20, 0x20uLL), v24), 0x20uLL), v22);
            *(float64x2_t *)(v18 + 7) = vmulq_n_f64(*(float64x2_t *)&v15[v13 + 7], by);
            *((double *)v18 + 9) = v19 * by;
            *((unsigned char *)v17 + 80) = 0;
          }
          ++v14;
          v13 += 7;
          if (v10 == v14) {
            goto LABEL_4;
          }
        }
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
LABEL_4:
      ++v4;
    }
    while (v4 != v3);
    *char v23 = v2;
  }
}

uint64_t static _ShapeStyle_Pack.AnimatableData.+ infix(_:_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  return static _ShapeStyle_Pack.AnimatableData.+ infix(_:_:)(a1, a2, (uint64_t (*)(void *, uint64_t *))specialized static _ShapeStyle_Pack.AnimatableData.+= infix(_:_:), a3);
}

uint64_t static _ShapeStyle_Pack.AnimatableData.- infix(_:_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  return static _ShapeStyle_Pack.AnimatableData.+ infix(_:_:)(a1, a2, (uint64_t (*)(void *, uint64_t *))specialized static _ShapeStyle_Pack.AnimatableData.-= infix(_:_:), a3);
}

uint64_t static _ShapeStyle_Pack.AnimatableData.+ infix(_:_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void *, uint64_t *)@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *a2;
  *a4 = *a1;
  uint64_t v8 = v6;
  swift_bridgeObjectRetain();
  return a3(a4, &v8);
}

double _ShapeStyle_Pack.AnimatableData.magnitudeSquared.getter()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (!v1) {
    return 0.0;
  }
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)v0 + 32;
  double v4 = 0.0;
  do
  {
    uint64_t v5 = v3 + 112 * v2;
    float v6 = *(float *)(v5 + 96);
    uint64_t v7 = *(void *)(v5 + 104);
    _ShapeStyle_Pack.Fill.AnimatableData.magnitudeSquared.getter();
    uint64_t v9 = *(void *)(v7 + 16);
    double v10 = 0.0;
    if (v9)
    {
      unsigned __int8 v11 = (double *)(v7 + 80);
      do
      {
        double v12 = 0.0;
        if ((*(unsigned char *)v11 & 1) == 0) {
          double v12 = *(v11 - 3) * *(v11 - 3)
        }
              + *(v11 - 1) * *(v11 - 1)
              + *(v11 - 2) * *(v11 - 2)
              + (float)(*((float *)v11 - 8) * *((float *)v11 - 8))
              + (float)(*((float *)v11 - 7) * *((float *)v11 - 7))
              + (float)(*((float *)v11 - 9) * *((float *)v11 - 9))
              + (float)(*((float *)v11 - 10) * *((float *)v11 - 10));
        double v10 = v10 + v12 + (float)(*((float *)v11 - 12) * *((float *)v11 - 12));
        v11 += 7;
        --v9;
      }
      while (v9);
    }
    ++v2;
    double v4 = v4 + v8 + v10 + (float)(v6 * v6);
  }
  while (v2 != v1);
  return v4;
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.AnimatableData@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.AnimatableData(a1, a2, (uint64_t (*)(void *, uint64_t *))specialized static _ShapeStyle_Pack.AnimatableData.+= infix(_:_:), a3);
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance _ShapeStyle_Pack.AnimatableData@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.AnimatableData(a1, a2, (uint64_t (*)(void *, uint64_t *))specialized static _ShapeStyle_Pack.AnimatableData.-= infix(_:_:), a3);
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.AnimatableData@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void *, uint64_t *)@<X4>, void *a4@<X8>)
{
  uint64_t v6 = *a2;
  *a4 = *a1;
  uint64_t v8 = v6;
  swift_bridgeObjectRetain();
  return a3(a4, &v8);
}

void _ShapeStyle_Pack.animatableData.getter(void *a1@<X8>)
{
  uint64_t v107 = *MEMORY[0x263EF8340];
  uint64_t v2 = *v1;
  int64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    v71 = a1;
    uint64_t v96 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    int64_t v73 = v3;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = MEMORY[0x263F8EE78];
    uint64_t v5 = 0;
    uint64_t v81 = v96;
    uint64_t v72 = v2 + 32;
    while (1)
    {
      uint64_t v6 = v5;
      uint64_t v7 = v72 + 120 * v5;
      uint64_t v80 = v6 + 1;
      long long v9 = *(_OWORD *)(v7 + 32);
      long long v8 = *(_OWORD *)(v7 + 48);
      long long v10 = *(_OWORD *)(v7 + 16);
      *(_OWORD *)v102 = *(_OWORD *)v7;
      *(_OWORD *)&v102[16] = v10;
      *(_OWORD *)&v102[32] = v9;
      *(_OWORD *)&v102[48] = v8;
      long long v11 = *(_OWORD *)(v7 + 64);
      long long v12 = *(_OWORD *)(v7 + 80);
      long long v13 = *(_OWORD *)(v7 + 96);
      uint64_t v14 = *(void *)(v7 + 112);
      uint64_t v106 = v14;
      long long v104 = v12;
      long long v105 = v13;
      long long v103 = v11;
      unsigned __int8 v15 = (void *)*((void *)&v10 + 1);
      char v16 = *(void **)&v102[32];
      long long v17 = *(_OWORD *)&v102[40];
      uint64_t v18 = *(void *)&v102[56];
      long long v20 = v11;
      uint64_t v19 = v12;
      int v21 = HIDWORD(v12);
      switch(BYTE8(v12))
      {
        case 1:
          uint64_t v26 = *(void **)&v102[8];
          memset(v100, 0, sizeof(v100));
          long long v98 = 0u;
          long long v99 = 0u;
          int8x16_t v97 = 0u;
          char v101 = 9;
          v95 = &v97;
          v84 = *(void (**)(int8x16_t **, ValueMetadata *, _UNKNOWN **))(**(void **)&v102[8] + 136);
          uint64_t v82 = v103;
          unsigned __int8 v94 = v102[16];
          outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v102);
          outlined copy of _ShapeStyle_Pack.Fill(v26, v94, v15, v16, v17, *((uint64_t *)&v17 + 1), v18, v20, *((uint64_t *)&v20 + 1), v19, 1);
          v84(&v95, &type metadata for _ShapeStyle_Pack.Fill.AnimatableData.PaintInitVisitor, &protocol witness table for _ShapeStyle_Pack.Fill.AnimatableData.PaintInitVisitor);
          uint64_t v27 = (uint64_t)v26;
          uint64_t v4 = MEMORY[0x263F8EE78];
          outlined consume of _ShapeStyle_Pack.Fill(v27, v94, (uint64_t)v15, v16, v17, *((uint64_t *)&v17 + 1), v18, v82, *((uint64_t *)&v20 + 1), v19, 1);
          break;
        case 2:
          long long v90 = *(_OWORD *)&v102[8];
          outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v102);
          if (one-time initialization token for legacyInterpolation != -1) {
            swift_once();
          }
          float v22 = *((float *)&v90 + 1);
          float v23 = *(float *)&v90;
          float v24 = *((float *)&v90 + 3);
          float v25 = *((float *)&v90 + 2);
          goto LABEL_12;
        case 3:
        case 6:
          memset(v100, 0, sizeof(v100));
          long long v98 = 0u;
          long long v99 = 0u;
          int8x16_t v97 = 0u;
          char v101 = 9;
          outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v102);
          break;
        case 4:
          float32x2_t v36 = vmul_f32((float32x2_t)vmovn_s64(*(int64x2_t *)&v102[8]), (float32x2_t)0x4300000043000000);
          v37.i64[0] = v36.u32[0];
          v37.i64[1] = v36.u32[1];
          int8x16_t v97 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_f32((float32x2_t)vshrn_n_s64(*(int64x2_t *)&v102[8], 0x20uLL), (float32x2_t)0x4300000043000000), 0x20uLL), v37);
          long long v98 = 0u;
          long long v99 = 0u;
          memset(v100, 0, sizeof(v100));
          char v38 = 1;
          goto LABEL_17;
        case 5:
          int8x16_t v97 = *(int8x16_t *)&v102[8];
          long long v98 = *(_OWORD *)&v102[24];
          long long v99 = *(_OWORD *)&v102[40];
          *(void *)&v100[0] = *(void *)&v102[56];
          *(_OWORD *)((char *)v100 + 8) = v11;
          *((void *)&v100[1] + 1) = v104;
          char v38 = 8;
LABEL_17:
          char v101 = v38;
          outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v102);
          break;
        default:
          long long v89 = *(_OWORD *)&v102[8];
          outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v102);
          if (one-time initialization token for legacyInterpolation != -1) {
            swift_once();
          }
          float v22 = *((float *)&v89 + 1);
          float v23 = *(float *)&v89;
          float v24 = *((float *)&v89 + 3);
          float v25 = *((float *)&v89 + 2);
LABEL_12:
          swift_beginAccess();
          if ((static Color.Resolved.legacyInterpolation & 1) == 0)
          {
            *(float *)v29.i32 = (float)(v25 * 0.051446) + (float)((float)(v23 * 0.41222) + (float)(v22 * 0.53633));
            *(float *)v28.i32 = (float)(v25 * 0.1074) + (float)((float)(v23 * 0.2119) + (float)(v22 * 0.6807));
            int8x16_t v85 = v29;
            int8x16_t v87 = v28;
            *(float *)v28.i32 = (float)(v25 * 0.62998) + (float)((float)(v23 * 0.088302) + (float)(v22 * 0.28172));
            int8x16_t v91 = v28;
            *(float *)v30.i32 = powf(fabsf(*(float *)v29.i32), 0.33333);
            v31.i64[0] = 0x8000000080000000;
            v31.i64[1] = 0x8000000080000000;
            v85.i32[0] = vbslq_s8(v31, v30, v85).i32[0];
            *(float *)v32.i32 = powf(fabsf(*(float *)v87.i32), 0.33333);
            v33.i64[0] = 0x8000000080000000;
            v33.i64[1] = 0x8000000080000000;
            v87.i32[0] = vbslq_s8(v33, v32, v87).i32[0];
            *(float *)v34.i32 = powf(fabsf(*(float *)v91.i32), 0.33333);
            v35.i64[0] = 0x8000000080000000;
            v35.i64[1] = 0x8000000080000000;
            float v23 = *(float *)v85.i32 * v24;
            float v22 = *(float *)v87.i32 * v24;
            float v25 = *(float *)vbslq_s8(v35, v34, v91).i32 * v24;
          }
          v97.i64[0] = COERCE_UNSIGNED_INT(v23 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v22 * 128.0) << 32);
          v97.i64[1] = COERCE_UNSIGNED_INT(v25 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v24 * 128.0) << 32);
          long long v98 = 0u;
          long long v99 = 0u;
          memset(v100, 0, sizeof(v100));
          char v101 = 0;
          break;
      }
      long long v78 = v98;
      int8x16_t v79 = v97;
      long long v76 = v100[0];
      long long v77 = v99;
      long long v75 = v100[1];
      char v39 = v101;
      int64_t v40 = *(void *)(v14 + 16);
      if (v40)
      {
        char v74 = v101;
        v97.i64[0] = v4;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
        uint64_t v41 = v97.i64[0];
        v42 = (unsigned __int8 *)(v14 + 96);
        do
        {
          char v43 = *(v42 - 19);
          int v44 = *((_DWORD *)v42 - 4);
          if (v43)
          {
            unint64_t v45 = 0;
            unint64_t v46 = 0;
            uint64_t v47 = 0;
            long long v48 = 0uLL;
          }
          else
          {
            long long v92 = *((_OWORD *)v42 - 3);
            uint64_t v47 = *((void *)v42 - 4);
            uint64_t v49 = *((void *)v42 - 1);
            unsigned __int8 v50 = *v42;
            float v52 = *((float *)v42 - 16);
            float v51 = *((float *)v42 - 15);
            float v53 = *((float *)v42 - 14);
            float v54 = *((float *)v42 - 13);
            outlined copy of GraphicsBlendMode?(v49, *v42);
            if (one-time initialization token for legacyInterpolation != -1) {
              swift_once();
            }
            swift_beginAccess();
            if (static Color.Resolved.legacyInterpolation == 1)
            {
              outlined consume of GraphicsBlendMode?(v49, v50);
            }
            else
            {
              *(float *)v56.i32 = (float)(v53 * 0.051446) + (float)((float)(v52 * 0.41222) + (float)(v51 * 0.53633));
              *(float *)v55.i32 = (float)(v53 * 0.1074) + (float)((float)(v52 * 0.2119) + (float)(v51 * 0.6807));
              int8x16_t v83 = v56;
              int8x16_t v86 = v55;
              *(float *)v55.i32 = (float)(v53 * 0.62998) + (float)((float)(v52 * 0.088302) + (float)(v51 * 0.28172));
              int8x16_t v88 = v55;
              *(float *)v57.i32 = powf(fabsf(*(float *)v56.i32), 0.33333);
              v58.i64[0] = 0x8000000080000000;
              v58.i64[1] = 0x8000000080000000;
              v83.i32[0] = vbslq_s8(v58, v57, v83).i32[0];
              *(float *)v59.i32 = powf(fabsf(*(float *)v86.i32), 0.33333);
              v60.i64[0] = 0x8000000080000000;
              v60.i64[1] = 0x8000000080000000;
              v86.i32[0] = vbslq_s8(v60, v59, v86).i32[0];
              *(float *)v61.i32 = powf(fabsf(*(float *)v88.i32), 0.33333);
              v62.i64[0] = 0x8000000080000000;
              v62.i64[1] = 0x8000000080000000;
              v88.i32[0] = vbslq_s8(v62, v61, v88).i32[0];
              outlined consume of GraphicsBlendMode?(v49, v50);
              float v52 = *(float *)v83.i32 * v54;
              float v51 = *(float *)v86.i32 * v54;
              float v53 = *(float *)v88.i32 * v54;
            }
            unint64_t v45 = COERCE_UNSIGNED_INT(v52 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v51 * 128.0) << 32);
            unint64_t v46 = COERCE_UNSIGNED_INT(v53 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v54 * 128.0) << 32);
            long long v48 = v92;
          }
          v97.i64[0] = v41;
          unint64_t v64 = *(void *)(v41 + 16);
          unint64_t v63 = *(void *)(v41 + 24);
          if (v64 >= v63 >> 1)
          {
            long long v93 = v48;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1);
            long long v48 = v93;
            uint64_t v41 = v97.i64[0];
          }
          *(void *)(v41 + 16) = v64 + 1;
          unint64_t v65 = v41 + 56 * v64;
          *(_DWORD *)(v65 + 32) = v44;
          v42 += 72;
          *(void *)(v65 + 40) = v45;
          *(void *)(v65 + 48) = v46;
          *(_OWORD *)(v65 + 56) = v48;
          *(void *)(v65 + 72) = v47;
          *(unsigned char *)(v65 + 80) = v43;
          --v40;
        }
        while (v40);
        outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v102);
        uint64_t v4 = MEMORY[0x263F8EE78];
        char v39 = v74;
      }
      else
      {
        outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v102);
        uint64_t v41 = v4;
      }
      uint64_t v66 = v81;
      uint64_t v96 = v81;
      unint64_t v68 = *(void *)(v81 + 16);
      unint64_t v67 = *(void *)(v81 + 24);
      if (v68 >= v67 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1);
        uint64_t v4 = MEMORY[0x263F8EE78];
        uint64_t v66 = v96;
      }
      __int16 v69 = *(_WORD *)v102;
      *(void *)(v66 + 16) = v68 + 1;
      uint64_t v70 = v66 + 112 * v68;
      *(_WORD *)(v70 + 32) = v69;
      *(int8x16_t *)(v70 + 40) = v79;
      *(_OWORD *)(v70 + 56) = v78;
      *(_OWORD *)(v70 + 72) = v77;
      *(_OWORD *)(v70 + 88) = v76;
      *(_OWORD *)(v70 + 104) = v75;
      *(unsigned char *)(v70 + 120) = v39;
      *(_DWORD *)(v70 + 128) = v21;
      *(void *)(v70 + 136) = v41;
      uint64_t v5 = v80;
      if (v80 == v73) {
        break;
      }
      uint64_t v81 = v66;
    }
    swift_bridgeObjectRelease();
    a1 = v71;
  }
  else
  {
    uint64_t v66 = MEMORY[0x263F8EE78];
  }
  *a1 = v66;
}

uint64_t _ShapeStyle_Pack.animatableData.setter(uint64_t *a1)
{
  uint64_t v74 = *a1;
  uint64_t v2 = *(void **)v1;
  int64_t v3 = *(void *)(*(void *)v1 + 16);
  if (v3 && (uint64_t v4 = *(int8x16_t **)(v74 + 16)) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_59:
    }
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    uint64_t v5 = 0;
    int64_t v6 = 0;
    uint64_t v7 = v74 + 32;
    long long v8 = v2 + 4;
    uint64_t v60 = v3;
    int8x16_t v61 = v2;
    int8x16_t v59 = v4;
    int8x16_t v57 = v2 + 4;
    do
    {
      if (v6 < 0) {
        goto LABEL_55;
      }
      if ((unint64_t)v6 >= v2[2]) {
        goto LABEL_56;
      }
      if (v5 < 0) {
        goto LABEL_57;
      }
      if ((unint64_t)v5 >= *(void *)(v74 + 16)) {
        goto LABEL_58;
      }
      long long v9 = (unsigned __int8 *)&v8[15 * v6];
      unsigned int v10 = *v9;
      unsigned int v11 = v9[1];
      long long v12 = (unsigned __int8 *)(v7 + 112 * v5);
      unsigned int v13 = *v12;
      unsigned int v14 = v12[1];
      if (v10 == v13 && v11 == v14)
      {
        uint64_t v18 = v7 + 112 * v5;
        uint64_t v20 = *(void *)(v18 + 8);
        uint64_t v19 = *(void *)(v18 + 16);
        uint64_t v72 = *(void *)(v18 + 32);
        uint64_t v73 = *(void *)(v18 + 24);
        uint64_t v22 = *(void *)(v18 + 40);
        uint64_t v21 = *(void *)(v18 + 48);
        uint64_t v23 = *(void *)(v18 + 64);
        uint64_t v68 = v5;
        uint64_t v24 = *(void *)(v18 + 72);
        uint64_t v70 = *(void *)(v18 + 80);
        uint64_t v71 = *(void *)(v18 + 56);
        char v69 = *(unsigned char *)(v18 + 88);
        int v25 = *(_DWORD *)(v18 + 96);
        uint64_t v26 = *(void *)(v18 + 104);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v20, v19, v73, v72, v22, v21, v71, v23, v24, v70, v69);
        uint64_t v27 = &v8[15 * v6];
        swift_bridgeObjectRetain();
        uint64_t v66 = v19;
        uint64_t v67 = v20;
        int64_t v3 = v60;
        uint64_t v2 = v61;
        uint64_t v64 = v21;
        uint64_t v65 = v22;
        uint64_t v62 = v24;
        uint64_t v63 = v23;
        uint64_t v7 = v74 + 32;
        uint64_t v4 = v59;
        uint64_t v28 = v68;
        _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)((uint64_t)(v27 + 1));
        int8x16_t v31 = (void *)v27[14];
        int8x16_t v30 = v27 + 14;
        int8x16_t v29 = v31;
        *((_DWORD *)v30 - 5) = v25;
        unint64_t v32 = v31[2];
        if (*(void *)(v26 + 16) >= v32) {
          unint64_t v33 = v32;
        }
        else {
          unint64_t v33 = *(void *)(v26 + 16);
        }
        if (v33)
        {
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *int8x16_t v30 = v29;
          uint64_t v58 = v6;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            int8x16_t v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
          }
          uint64_t v35 = 0;
          uint64_t v2 = 0;
          int64_t v3 = 0;
          *int8x16_t v30 = v29;
          unint64_t v75 = v33;
          while ((unint64_t)v3 < *(void *)(v26 + 16))
          {
            if ((unint64_t)v3 >= v29[2]) {
              goto LABEL_54;
            }
            int64x2_t v40 = *(int64x2_t *)((char *)v2 + v26 + 40);
            int8x16_t v41 = *(int8x16_t *)((char *)v2 + v26 + 56);
            uint64_t v36 = *(void *)((char *)v2 + v26 + 72);
            char v42 = *((unsigned char *)v2 + v26 + 80);
            uint64_t v4 = (int8x16_t *)&v29[v35];
            LODWORD(v29[v35 + 10]) = *(_DWORD *)((char *)v2 + v26 + 32);
            int8x16_t v43 = 0uLL;
            if (v29[v35 + 9] & 0x10000000000) != 0 || (v42)
            {
              uint64_t v36 = 0;
              uint64_t v37 = 0;
              char v38 = 1;
              int8x16_t v39 = 0uLL;
            }
            else
            {
              int8x16_t v80 = v41;
              uint64_t v44 = v4[4].u8[12];
              uint64_t v45 = v4[4].u32[2];
              if (one-time initialization token for legacyInterpolation != -1)
              {
                int64x2_t v79 = v40;
                swift_once();
                int64x2_t v40 = v79;
              }
              float32x2_t v78 = vmul_f32((float32x2_t)vmovn_s64(v40), (float32x2_t)0x3C0000003C000000);
              float v76 = *(float *)&v40.i32[1] * 0.0078125;
              float v77 = *(float *)&v40.i32[3] * 0.0078125;
              swift_beginAccess();
              if (static Color.Resolved.legacyInterpolation)
              {
                float32x2_t v46 = v78;
                int8x16_t v39 = v80;
                *(float *)v47.i32 = v76;
                float v48 = v77;
              }
              else
              {
                float v48 = v77;
                float v49 = v78.f32[0];
                float32x2_t v50 = (float32x2_t)__PAIR64__(v78.u32[1], LODWORD(v76));
                if (v77 != 0.0)
                {
                  float v49 = v78.f32[0] * (float)(1.0 / v77);
                  float32x2_t v50 = vmul_n_f32((float32x2_t)__PAIR64__(v78.u32[1], LODWORD(v76)), 1.0 / v77);
                }
                float v51 = v49 * (float)(v49 * v49);
                float32x2_t v52 = vmul_f32(v50, vmul_f32(v50, v50));
                float32x2_t v53 = vmul_f32(v52, (float32x2_t)0x3EAEC16A40270644);
                *(float *)v47.i32 = (float)(v53.f32[0] + (float)(v51 * -1.2684)) - v53.f32[1];
                float32x2_t v46 = vadd_f32(vmul_lane_f32((float32x2_t)0x3FDA931E3E6C8362, v52, 1), vadd_f32(vmul_n_f32((float32x2_t)0xBB897F53408274ABLL, v51), vmul_n_f32((float32x2_t)0xBF34133EC053B18CLL, v52.f32[0])));
                int8x16_t v39 = v80;
              }
              char v38 = 0;
              uint64_t v37 = v45 | (v44 << 32);
              *(float *)&v47.i32[1] = v48;
              v54.i64[0] = v46.u32[0];
              v54.i64[1] = v46.u32[1];
              int8x16_t v43 = vorrq_s8((int8x16_t)vshll_n_s32(v47, 0x20uLL), v54);
              unint64_t v33 = v75;
            }
            ++v3;
            v4[2] = v43;
            v4[3] = v39;
            v4[4].i64[0] = v36;
            v4[4].i32[2] = v37;
            v4[4].i8[12] = BYTE4(v37);
            v2 += 7;
            v35 += 9;
            v4[4].i8[13] = v38;
            if (v33 == v3)
            {
              *int8x16_t v30 = v29;
              swift_bridgeObjectRelease();
              int64_t v3 = v60;
              uint64_t v2 = v61;
              uint64_t v7 = v74 + 32;
              uint64_t v4 = v59;
              uint64_t v28 = v68;
              int64_t v6 = v58;
              goto LABEL_44;
            }
          }
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
LABEL_44:
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v67, v66, v73, v72, v65, v64, v71, v63, v62, v70, v69);
        swift_bridgeObjectRelease();
        ++v6;
        uint64_t v5 = v28 + 1;
        long long v8 = v57;
        if (v6 >= v3) {
          break;
        }
      }
      else
      {
        BOOL v16 = v11 < v14 && v10 == v13;
        if (v10 >= v13 && !v16)
        {
          ++v5;
          if (v6 >= v3) {
            break;
          }
        }
        else if (++v6 >= v3)
        {
          break;
        }
      }
    }
    while (v5 < (uint64_t)v4);
    uint64_t result = swift_bridgeObjectRelease();
    *int8x16_t v56 = v2;
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void _ShapeStyle_Pack.Style.animatableData.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void **)(v1 + 16);
  uint64_t v5 = *(void **)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v10 = *(void *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  char v12 = *(unsigned char *)(v1 + 80);
  int v13 = *(_DWORD *)(v1 + 84);
  uint64_t v14 = *(void *)(v1 + 104);
  v60.i64[0] = *(void *)v1;
  v60.i64[1] = v3;
  int8x16_t v61 = v4;
  uint64_t v62 = v5;
  uint64_t v63 = v6;
  uint64_t v64 = v7;
  uint64_t v65 = v8;
  uint64_t v66 = v9;
  uint64_t v67 = v10;
  uint64_t v68 = v11;
  char v69 = v12;
  outlined copy of _ShapeStyle_Pack.Fill((id)v60.i64[0], v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
  _ShapeStyle_Pack.Fill.AnimatableData.init(_:)(&v60, (uint64_t)&v70);
  long long v15 = v70;
  long long v16 = v71;
  long long v17 = v72;
  long long v18 = v73;
  long long v19 = v74;
  char v20 = v75;
  int64_t v21 = *(void *)(v14 + 16);
  uint64_t v22 = MEMORY[0x263F8EE78];
  if (v21)
  {
    char v47 = v75;
    long long v48 = v74;
    long long v49 = v73;
    long long v50 = v72;
    long long v51 = v71;
    long long v52 = v70;
    uint64_t v53 = a1;
    uint64_t v59 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    uint64_t v23 = (unsigned __int8 *)(v14 + 96);
    uint64_t v22 = v59;
    do
    {
      char v24 = *(v23 - 19);
      int v25 = *((_DWORD *)v23 - 4);
      if (v24)
      {
        unint64_t v26 = 0;
        unint64_t v27 = 0;
        uint64_t v28 = 0;
        long long v29 = 0uLL;
      }
      else
      {
        long long v57 = *((_OWORD *)v23 - 3);
        uint64_t v28 = *((void *)v23 - 4);
        uint64_t v30 = *((void *)v23 - 1);
        unsigned __int8 v31 = *v23;
        float v33 = *((float *)v23 - 16);
        float v32 = *((float *)v23 - 15);
        float v34 = *((float *)v23 - 14);
        float v35 = *((float *)v23 - 13);
        outlined copy of GraphicsBlendMode?(v30, *v23);
        if (one-time initialization token for legacyInterpolation != -1) {
          swift_once();
        }
        swift_beginAccess();
        if (static Color.Resolved.legacyInterpolation)
        {
          outlined consume of GraphicsBlendMode?(v30, v31);
        }
        else
        {
          *(float *)v37.i32 = (float)(v34 * 0.051446) + (float)((float)(v33 * 0.41222) + (float)(v32 * 0.53633));
          *(float *)v36.i32 = (float)(v34 * 0.1074) + (float)((float)(v33 * 0.2119) + (float)(v32 * 0.6807));
          int8x16_t v54 = v37;
          int8x16_t v55 = v36;
          *(float *)v36.i32 = (float)(v34 * 0.62998) + (float)((float)(v33 * 0.088302) + (float)(v32 * 0.28172));
          int8x16_t v56 = v36;
          *(float *)v38.i32 = powf(fabsf(*(float *)v37.i32), 0.33333);
          v39.i64[0] = 0x8000000080000000;
          v39.i64[1] = 0x8000000080000000;
          v54.i32[0] = vbslq_s8(v39, v38, v54).i32[0];
          *(float *)v40.i32 = powf(fabsf(*(float *)v55.i32), 0.33333);
          v41.i64[0] = 0x8000000080000000;
          v41.i64[1] = 0x8000000080000000;
          v55.i32[0] = vbslq_s8(v41, v40, v55).i32[0];
          *(float *)v42.i32 = powf(fabsf(*(float *)v56.i32), 0.33333);
          v43.i64[0] = 0x8000000080000000;
          v43.i64[1] = 0x8000000080000000;
          v56.i32[0] = vbslq_s8(v43, v42, v56).i32[0];
          outlined consume of GraphicsBlendMode?(v30, v31);
          float v33 = *(float *)v54.i32 * v35;
          float v32 = *(float *)v55.i32 * v35;
          float v34 = *(float *)v56.i32 * v35;
        }
        unint64_t v26 = COERCE_UNSIGNED_INT(v33 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v32 * 128.0) << 32);
        unint64_t v27 = COERCE_UNSIGNED_INT(v34 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v35 * 128.0) << 32);
        long long v29 = v57;
      }
      unint64_t v45 = *(void *)(v59 + 16);
      unint64_t v44 = *(void *)(v59 + 24);
      if (v45 >= v44 >> 1)
      {
        long long v58 = v29;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
        long long v29 = v58;
      }
      *(void *)(v59 + 16) = v45 + 1;
      uint64_t v46 = v59 + 56 * v45;
      *(_DWORD *)(v46 + 32) = v25;
      v23 += 72;
      *(void *)(v46 + 40) = v26;
      *(void *)(v46 + 48) = v27;
      *(_OWORD *)(v46 + 56) = v29;
      *(void *)(v46 + 72) = v28;
      *(unsigned char *)(v46 + 80) = v24;
      --v21;
    }
    while (v21);
    a1 = v53;
    long long v16 = v51;
    long long v15 = v52;
    long long v18 = v49;
    long long v17 = v50;
    long long v19 = v48;
    char v20 = v47;
  }
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v16;
  *(_OWORD *)(a1 + 32) = v17;
  *(_OWORD *)(a1 + 48) = v18;
  *(_OWORD *)(a1 + 64) = v19;
  *(unsigned char *)(a1 + 80) = v20;
  *(_DWORD *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = v22;
}

uint64_t _ShapeStyle_Pack.Style.animatableData.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  char v8 = *(unsigned char *)(a1 + 80);
  int v9 = *(_DWORD *)(a1 + 88);
  uint64_t v10 = *(void *)(a1 + 96);
  uint64_t v49 = *(void *)(a1 + 8);
  uint64_t v50 = *(void *)a1;
  uint64_t v47 = *(void *)(a1 + 24);
  uint64_t v48 = *(void *)(a1 + 16);
  uint64_t v46 = *(void *)(a1 + 32);
  _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v1);
  uint64_t v11 = v10;
  *(_DWORD *)(v1 + 84) = v9;
  char v12 = *(void **)(v1 + 104);
  unint64_t v13 = *(void *)(v10 + 16);
  if (v13 >= v12[2]) {
    unint64_t v14 = v12[2];
  }
  else {
    unint64_t v14 = v13;
  }
  if (v14)
  {
    char v42 = v8;
    uint64_t v43 = v7;
    uint64_t v60 = v6;
    uint64_t v53 = v5;
    uint64_t v54 = v4;
    uint64_t v52 = v11;
    swift_bridgeObjectRetain();
    uint64_t v44 = v3;
    uint64_t v45 = v2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_27:
    }
      char v12 = specialized _ArrayBuffer._consumeAndCreateNew()(v12);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    uint64_t v19 = v53;
    uint64_t v18 = v54;
    uint64_t v20 = v52;
    unint64_t v51 = v13;
    do
    {
      if (v13 == v17)
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (v17 >= v12[2]) {
        goto LABEL_26;
      }
      int64x2_t v25 = *(int64x2_t *)(v20 + v16 + 40);
      int8x16_t v26 = *(int8x16_t *)(v20 + v16 + 56);
      uint64_t v21 = *(void *)(v20 + v16 + 72);
      char v27 = *(unsigned char *)(v20 + v16 + 80);
      uint64_t v28 = (int8x16_t *)&v12[v15];
      LODWORD(v12[v15 + 10]) = *(_DWORD *)(v20 + v16 + 32);
      int8x16_t v29 = 0uLL;
      if (v12[v15 + 9] & 0x10000000000) != 0 || (v27)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        char v23 = 1;
        int8x16_t v24 = 0uLL;
      }
      else
      {
        int8x16_t v59 = v26;
        uint64_t v30 = v28[4].u8[12];
        uint64_t v31 = v28[4].u32[2];
        if (one-time initialization token for legacyInterpolation != -1)
        {
          int64x2_t v58 = v25;
          swift_once();
          int64x2_t v25 = v58;
        }
        float32x2_t v57 = vmul_f32((float32x2_t)vmovn_s64(v25), (float32x2_t)0x3C0000003C000000);
        float v55 = *(float *)&v25.i32[1] * 0.0078125;
        float v56 = *(float *)&v25.i32[3] * 0.0078125;
        swift_beginAccess();
        if (static Color.Resolved.legacyInterpolation)
        {
          uint64_t v20 = v52;
          float v33 = v56;
          float32x2_t v32 = v57;
          *(float *)v34.i32 = v55;
        }
        else
        {
          float v33 = v56;
          float v35 = v57.f32[0];
          float32x2_t v36 = (float32x2_t)__PAIR64__(v57.u32[1], LODWORD(v55));
          if (v56 != 0.0)
          {
            float v35 = v57.f32[0] * (float)(1.0 / v56);
            float32x2_t v36 = vmul_n_f32((float32x2_t)__PAIR64__(v57.u32[1], LODWORD(v55)), 1.0 / v56);
          }
          uint64_t v20 = v52;
          float v37 = v35 * (float)(v35 * v35);
          float32x2_t v38 = vmul_f32(v36, vmul_f32(v36, v36));
          float32x2_t v39 = vmul_f32(v38, (float32x2_t)0x3EAEC16A40270644);
          *(float *)v34.i32 = (float)(v39.f32[0] + (float)(v37 * -1.2684)) - v39.f32[1];
          float32x2_t v32 = vadd_f32(vmul_lane_f32((float32x2_t)0x3FDA931E3E6C8362, v38, 1), vadd_f32(vmul_n_f32((float32x2_t)0xBB897F53408274ABLL, v37), vmul_n_f32((float32x2_t)0xBF34133EC053B18CLL, v38.f32[0])));
        }
        char v23 = 0;
        uint64_t v22 = v31 | (v30 << 32);
        *(float *)&v34.i32[1] = v33;
        v40.i64[0] = v32.u32[0];
        v40.i64[1] = v32.u32[1];
        int8x16_t v29 = vorrq_s8((int8x16_t)vshll_n_s32(v34, 0x20uLL), v40);
        uint64_t v19 = v53;
        uint64_t v18 = v54;
        int8x16_t v24 = v59;
        unint64_t v13 = v51;
      }
      ++v17;
      v28[2] = v29;
      v28[3] = v24;
      v28[4].i64[0] = v21;
      v28[4].i32[2] = v22;
      v28[4].i8[12] = BYTE4(v22);
      v16 += 56;
      v15 += 9;
      v28[4].i8[13] = v23;
    }
    while (v14 != v17);
    swift_bridgeObjectRelease();
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v50, v49, v48, v47, v46, v44, v18, v19, v60, v43, v42);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v45 + 104) = v12;
  }
  else
  {
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v50, v49, v48, v47, v46, v3, v4, v5, v6, v7, v8);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*_ShapeStyle_Pack.animatableData.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  _ShapeStyle_Pack.animatableData.getter(a1);
  return _ShapeStyle_Pack.animatableData.modify;
}

uint64_t _ShapeStyle_Pack.animatableData.modify(uint64_t *a1, char a2)
{
  if (a2)
  {
    uint64_t v3 = *a1;
    swift_bridgeObjectRetain();
    _ShapeStyle_Pack.animatableData.setter(&v3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *a1;
    return _ShapeStyle_Pack.animatableData.setter(&v3);
  }
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _ShapeStyle_Pack(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ShapeStyle_Pack.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

float key path getter for _ShapeStyle_Pack.Style.animatableData : _ShapeStyle_Pack.Style@<S0>(uint64_t a1@<X8>)
{
  _ShapeStyle_Pack.Style.animatableData.getter((uint64_t)v7);
  char v2 = v8;
  float result = v9;
  uint64_t v4 = v10;
  long long v5 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v5;
  long long v6 = v7[3];
  *(_OWORD *)(a1 + 32) = v7[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7[4];
  *(unsigned char *)(a1 + 80) = v2;
  *(float *)(a1 + 88) = result;
  *(void *)(a1 + 96) = v4;
  return result;
}

uint64_t key path setter for _ShapeStyle_Pack.Style.animatableData : _ShapeStyle_Pack.Style(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 88);
  uint64_t v6 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v15 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(void *)a1, v8, v7, v9, v10, v11, v12, v13, v14, v15, v16);
  swift_bridgeObjectRetain();
  _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(a2);
  *(_DWORD *)(a2 + 84) = v3;
  uint64_t v4 = swift_bridgeObjectRetain();
  specialized Array<A>.animatableData.setter(v4);
  swift_bridgeObjectRelease();
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v6, v8, v7, v9, v10, v11, v12, v13, v14, v15, v16);

  return swift_bridgeObjectRelease();
}

void _ShapeStyle_Pack.Fill.animatableData.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void **)(v1 + 16);
  long long v5 = *(void **)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v10 = *(void *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  char v12 = *(unsigned char *)(v1 + 80);
  v13.i64[0] = *(void *)v1;
  v13.i64[1] = v3;
  uint64_t v14 = v4;
  uint64_t v15 = v5;
  uint64_t v16 = v6;
  uint64_t v17 = v7;
  uint64_t v18 = v8;
  uint64_t v19 = v9;
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  char v22 = v12;
  outlined copy of _ShapeStyle_Pack.Fill((id)v13.i64[0], v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
  _ShapeStyle_Pack.Fill.AnimatableData.init(_:)(&v13, a1);
}

uint64_t _ShapeStyle_Pack.Fill.animatableData.setter(uint64_t a1)
{
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  char v10 = *(unsigned char *)(a1 + 80);
  _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v1);
  return outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v13, v12, v2, v3, v4, v5, v6, v7, v9, v8, v10);
}

void (*_ShapeStyle_Pack.Style.animatableData.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0xB8uLL);
  *a1 = v3;
  v3[22] = v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void **)(v1 + 16);
  uint64_t v6 = *(void **)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + 32);
  uint64_t v8 = *(void *)(v1 + 40);
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v10 = *(void *)(v1 + 56);
  uint64_t v11 = *(void *)(v1 + 64);
  uint64_t v12 = *(void *)(v1 + 72);
  char v13 = *(unsigned char *)(v1 + 80);
  int v14 = *(_DWORD *)(v1 + 84);
  uint64_t v15 = *(void *)(v1 + 104);
  v61.i64[0] = *(void *)v1;
  v61.i64[1] = v4;
  uint64_t v62 = v5;
  uint64_t v63 = v6;
  uint64_t v64 = v7;
  uint64_t v65 = v8;
  uint64_t v66 = v9;
  uint64_t v67 = v10;
  uint64_t v68 = v11;
  uint64_t v69 = v12;
  char v70 = v13;
  outlined copy of _ShapeStyle_Pack.Fill((id)v61.i64[0], v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
  _ShapeStyle_Pack.Fill.AnimatableData.init(_:)(&v61, (uint64_t)&v71);
  long long v16 = v71;
  long long v17 = v72;
  long long v18 = v73;
  long long v19 = v74;
  long long v20 = v75;
  char v21 = v76;
  int64_t v22 = *(void *)(v15 + 16);
  uint64_t v23 = MEMORY[0x263F8EE78];
  if (v22)
  {
    char v49 = v76;
    long long v50 = v75;
    long long v51 = v74;
    long long v52 = v73;
    long long v53 = v72;
    long long v54 = v71;
    float v55 = v3;
    v61.i64[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
    int8x16_t v24 = (unsigned __int8 *)(v15 + 96);
    uint64_t v23 = v61.i64[0];
    do
    {
      char v25 = *(v24 - 19);
      int v26 = *((_DWORD *)v24 - 4);
      if (v25)
      {
        unint64_t v27 = 0;
        unint64_t v28 = 0;
        uint64_t v29 = 0;
        long long v30 = 0uLL;
      }
      else
      {
        long long v59 = *((_OWORD *)v24 - 3);
        uint64_t v29 = *((void *)v24 - 4);
        uint64_t v31 = *((void *)v24 - 1);
        unsigned __int8 v32 = *v24;
        float v34 = *((float *)v24 - 16);
        float v33 = *((float *)v24 - 15);
        float v35 = *((float *)v24 - 14);
        float v36 = *((float *)v24 - 13);
        outlined copy of GraphicsBlendMode?(v31, *v24);
        if (one-time initialization token for legacyInterpolation != -1) {
          swift_once();
        }
        swift_beginAccess();
        if (static Color.Resolved.legacyInterpolation)
        {
          outlined consume of GraphicsBlendMode?(v31, v32);
        }
        else
        {
          *(float *)v38.i32 = (float)(v35 * 0.051446) + (float)((float)(v34 * 0.41222) + (float)(v33 * 0.53633));
          int8x16_t v56 = v38;
          *(float *)v37.i32 = (float)(v35 * 0.1074) + (float)((float)(v34 * 0.2119) + (float)(v33 * 0.6807));
          int8x16_t v57 = v37;
          *(float *)v37.i32 = (float)(v35 * 0.62998) + (float)((float)(v34 * 0.088302) + (float)(v33 * 0.28172));
          int8x16_t v58 = v37;
          *(float *)v39.i32 = powf(fabsf(*(float *)v38.i32), 0.33333);
          v40.i64[0] = 0x8000000080000000;
          v40.i64[1] = 0x8000000080000000;
          v56.i32[0] = vbslq_s8(v40, v39, v56).i32[0];
          *(float *)v41.i32 = powf(fabsf(*(float *)v57.i32), 0.33333);
          v42.i64[0] = 0x8000000080000000;
          v42.i64[1] = 0x8000000080000000;
          v57.i32[0] = vbslq_s8(v42, v41, v57).i32[0];
          *(float *)v43.i32 = powf(fabsf(*(float *)v58.i32), 0.33333);
          v44.i64[0] = 0x8000000080000000;
          v44.i64[1] = 0x8000000080000000;
          v58.i32[0] = vbslq_s8(v44, v43, v58).i32[0];
          outlined consume of GraphicsBlendMode?(v31, v32);
          float v34 = *(float *)v56.i32 * v36;
          float v33 = *(float *)v57.i32 * v36;
          float v35 = *(float *)v58.i32 * v36;
        }
        unint64_t v27 = COERCE_UNSIGNED_INT(v34 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v33 * 128.0) << 32);
        unint64_t v28 = COERCE_UNSIGNED_INT(v35 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v36 * 128.0) << 32);
        long long v30 = v59;
      }
      v61.i64[0] = v23;
      unint64_t v46 = *(void *)(v23 + 16);
      unint64_t v45 = *(void *)(v23 + 24);
      if (v46 >= v45 >> 1)
      {
        long long v60 = v30;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
        long long v30 = v60;
        uint64_t v23 = v61.i64[0];
      }
      *(void *)(v23 + 16) = v46 + 1;
      uint64_t v47 = v23 + 56 * v46;
      *(_DWORD *)(v47 + 32) = v26;
      v24 += 72;
      *(void *)(v47 + 40) = v27;
      *(void *)(v47 + 48) = v28;
      *(_OWORD *)(v47 + 56) = v30;
      *(void *)(v47 + 72) = v29;
      *(unsigned char *)(v47 + 80) = v25;
      --v22;
    }
    while (v22);
    uint64_t v3 = v55;
    long long v17 = v53;
    long long v16 = v54;
    long long v19 = v51;
    long long v18 = v52;
    long long v20 = v50;
    char v21 = v49;
  }
  *(_OWORD *)uint64_t v3 = v16;
  *((_OWORD *)v3 + 1) = v17;
  *((_OWORD *)v3 + 2) = v18;
  *((_OWORD *)v3 + 3) = v19;
  *((_OWORD *)v3 + 4) = v20;
  *((unsigned char *)v3 + 80) = v21;
  *((_DWORD *)v3 + 22) = v14;
  v3[12] = v23;
  return _ShapeStyle_Pack.Style.animatableData.modify;
}

void _ShapeStyle_Pack.Style.animatableData.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = (*a1)[8];
  int v6 = *((_DWORD *)*a1 + 22);
  uint64_t v7 = (*a1)[12];
  uint64_t v8 = (*a1)[22];
  uint64_t v75 = (*a1)[5];
  uint64_t v76 = (*a1)[6];
  uint64_t v73 = (*a1)[3];
  uint64_t v74 = (*a1)[4];
  uint64_t v72 = (*a1)[1];
  if ((a2 & 1) == 0)
  {
    uint64_t v70 = (*a1)[2];
    uint64_t v71 = (*a1)[7];
    uint64_t v37 = (*a1)[9];
    char v38 = *((unsigned char *)*a1 + 80);
    _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v8);
    *(_DWORD *)(v8 + 84) = v6;
    uint64_t v10 = *(void **)(v8 + 104);
    unint64_t v11 = *(void *)(v7 + 16);
    if (v11 >= v10[2]) {
      uint64_t v12 = v10[2];
    }
    else {
      uint64_t v12 = *(void *)(v7 + 16);
    }
    if (!v12)
    {
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v3, v72, v70, v73, v74, v75, v76, v71, v5, v37, v38);
      goto LABEL_48;
    }
    char v68 = v38;
    uint64_t v69 = v37;
    uint64_t v65 = v5;
    uint64_t v66 = v3;
    swift_bridgeObjectRetain();
    uint64_t v67 = v2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
    }
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    unint64_t v41 = 0;
    uint64_t v42 = v7;
    unint64_t v78 = v11;
    while (v11 != v41)
    {
      if (v41 >= v10[2]) {
        goto LABEL_55;
      }
      int64x2_t v47 = *(int64x2_t *)(v42 + v39 + 40);
      int8x16_t v48 = *(int8x16_t *)(v42 + v39 + 56);
      uint64_t v43 = *(void *)(v42 + v39 + 72);
      char v49 = *(unsigned char *)(v42 + v39 + 80);
      long long v50 = (int8x16_t *)&v10[v40];
      LODWORD(v10[v40 + 10]) = *(_DWORD *)(v42 + v39 + 32);
      int8x16_t v51 = 0uLL;
      if (v10[v40 + 9] & 0x10000000000) != 0 || (v49)
      {
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        char v45 = 1;
        int8x16_t v46 = 0uLL;
      }
      else
      {
        int8x16_t v88 = v48;
        uint64_t v52 = v50[4].u8[12];
        uint64_t v53 = v50[4].u32[2];
        if (one-time initialization token for legacyInterpolation != -1)
        {
          int64x2_t v86 = v47;
          swift_once();
          int64x2_t v47 = v86;
        }
        float32x2_t v85 = vmul_f32((float32x2_t)vmovn_s64(v47), (float32x2_t)0x3C0000003C000000);
        float v80 = *(float *)&v47.i32[1] * 0.0078125;
        float v82 = *(float *)&v47.i32[3] * 0.0078125;
        swift_beginAccess();
        if (static Color.Resolved.legacyInterpolation)
        {
          uint64_t v42 = v7;
          float v55 = v82;
          float32x2_t v54 = v85;
          *(float *)v56.i32 = v80;
        }
        else
        {
          float v55 = v82;
          float v57 = v85.f32[0];
          float32x2_t v58 = (float32x2_t)__PAIR64__(v85.u32[1], LODWORD(v80));
          if (v82 != 0.0)
          {
            float v57 = v85.f32[0] * (float)(1.0 / v82);
            float32x2_t v58 = vmul_n_f32((float32x2_t)__PAIR64__(v85.u32[1], LODWORD(v80)), 1.0 / v82);
          }
          uint64_t v42 = v7;
          float v59 = v57 * (float)(v57 * v57);
          float32x2_t v60 = vmul_f32(v58, vmul_f32(v58, v58));
          float32x2_t v61 = vmul_f32(v60, (float32x2_t)0x3EAEC16A40270644);
          *(float *)v56.i32 = (float)(v61.f32[0] + (float)(v59 * -1.2684)) - v61.f32[1];
          float32x2_t v54 = vadd_f32(vmul_lane_f32((float32x2_t)0x3FDA931E3E6C8362, v60, 1), vadd_f32(vmul_n_f32((float32x2_t)0xBB897F53408274ABLL, v59), vmul_n_f32((float32x2_t)0xBF34133EC053B18CLL, v60.f32[0])));
        }
        char v45 = 0;
        uint64_t v44 = v53 | (v52 << 32);
        *(float *)&v56.i32[1] = v55;
        v62.i64[0] = v54.u32[0];
        v62.i64[1] = v54.u32[1];
        int8x16_t v51 = vorrq_s8((int8x16_t)vshll_n_s32(v56, 0x20uLL), v62);
        int8x16_t v46 = v88;
        unint64_t v11 = v78;
      }
      ++v41;
      v50[2] = v51;
      v50[3] = v46;
      v50[4].i64[0] = v43;
      v50[4].i32[2] = v44;
      v50[4].i8[12] = BYTE4(v44);
      v40 += 9;
      v39 += 56;
      v50[4].i8[13] = v45;
      if (v12 == v41)
      {
        uint64_t v2 = v67;
        uint64_t v64 = v67[22];
        swift_bridgeObjectRelease();
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v66, v72, v70, v73, v74, v75, v76, v71, v65, v69, v68);
        swift_bridgeObjectRelease();
        *(void *)(v64 + 104) = v10;
        goto LABEL_49;
      }
    }
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
LABEL_7:
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    uint64_t v16 = v7;
    unint64_t v77 = v11;
    do
    {
      if (v11 == v15)
      {
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      if (v15 >= v10[2]) {
        goto LABEL_53;
      }
      int64x2_t v21 = *(int64x2_t *)(v16 + v13 + 40);
      int8x16_t v22 = *(int8x16_t *)(v16 + v13 + 56);
      uint64_t v17 = *(void *)(v16 + v13 + 72);
      char v23 = *(unsigned char *)(v16 + v13 + 80);
      int8x16_t v24 = (int8x16_t *)&v10[v14];
      LODWORD(v10[v14 + 10]) = *(_DWORD *)(v16 + v13 + 32);
      int8x16_t v25 = 0uLL;
      if (v10[v14 + 9] & 0x10000000000) != 0 || (v23)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        char v19 = 1;
        int8x16_t v20 = 0uLL;
      }
      else
      {
        int8x16_t v87 = v22;
        uint64_t v26 = v24[4].u8[12];
        uint64_t v27 = v24[4].u32[2];
        if (one-time initialization token for legacyInterpolation != -1)
        {
          int64x2_t v84 = v21;
          swift_once();
          int64x2_t v21 = v84;
        }
        float32x2_t v83 = vmul_f32((float32x2_t)vmovn_s64(v21), (float32x2_t)0x3C0000003C000000);
        float v79 = *(float *)&v21.i32[1] * 0.0078125;
        float v81 = *(float *)&v21.i32[3] * 0.0078125;
        swift_beginAccess();
        if (static Color.Resolved.legacyInterpolation)
        {
          uint64_t v16 = v7;
          float v29 = v81;
          float32x2_t v28 = v83;
          *(float *)v30.i32 = v79;
        }
        else
        {
          float v29 = v81;
          float v31 = v83.f32[0];
          float32x2_t v32 = (float32x2_t)__PAIR64__(v83.u32[1], LODWORD(v79));
          if (v81 != 0.0)
          {
            float v31 = v83.f32[0] * (float)(1.0 / v81);
            float32x2_t v32 = vmul_n_f32((float32x2_t)__PAIR64__(v83.u32[1], LODWORD(v79)), 1.0 / v81);
          }
          uint64_t v16 = v7;
          float v33 = v31 * (float)(v31 * v31);
          float32x2_t v34 = vmul_f32(v32, vmul_f32(v32, v32));
          float32x2_t v35 = vmul_f32(v34, (float32x2_t)0x3EAEC16A40270644);
          *(float *)v30.i32 = (float)(v35.f32[0] + (float)(v33 * -1.2684)) - v35.f32[1];
          float32x2_t v28 = vadd_f32(vmul_lane_f32((float32x2_t)0x3FDA931E3E6C8362, v34, 1), vadd_f32(vmul_n_f32((float32x2_t)0xBB897F53408274ABLL, v33), vmul_n_f32((float32x2_t)0xBF34133EC053B18CLL, v34.f32[0])));
        }
        char v19 = 0;
        uint64_t v18 = v27 | (v26 << 32);
        *(float *)&v30.i32[1] = v29;
        v36.i64[0] = v28.u32[0];
        v36.i64[1] = v28.u32[1];
        int8x16_t v25 = vorrq_s8((int8x16_t)vshll_n_s32(v30, 0x20uLL), v36);
        int8x16_t v20 = v87;
        unint64_t v11 = v77;
      }
      ++v15;
      v24[2] = v25;
      v24[3] = v20;
      v24[4].i64[0] = v17;
      v24[4].i32[2] = v18;
      v24[4].i8[12] = BYTE4(v18);
      v14 += 9;
      v13 += 56;
      v24[4].i8[13] = v19;
    }
    while (v12 != v15);
    uint64_t v2 = v67;
    uint64_t v63 = v67[22];
    swift_bridgeObjectRelease();
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v66, v72, v70, v73, v74, v75, v76, v71, v65, v69, v68);
    swift_bridgeObjectRelease();
    *(void *)(v63 + 104) = v10;
    goto LABEL_46;
  }
  uint64_t v9 = (*a1)[7];
  uint64_t v69 = (*a1)[9];
  char v68 = *((unsigned char *)*a1 + 80);
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3, (*a1)[1], v4, (*a1)[3], (*a1)[4], (*a1)[5], (*a1)[6], v9, v5, v69, v68);
  swift_bridgeObjectRetain();
  _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v8);
  *(_DWORD *)(v8 + 84) = v6;
  uint64_t v10 = *(void **)(v8 + 104);
  unint64_t v11 = *(void *)(v7 + 16);
  if (v11 >= v10[2]) {
    uint64_t v12 = v10[2];
  }
  else {
    uint64_t v12 = *(void *)(v7 + 16);
  }
  if (v12)
  {
    uint64_t v70 = v4;
    swift_bridgeObjectRetain();
    uint64_t v66 = v3;
    uint64_t v67 = v2;
    uint64_t v71 = v9;
    uint64_t v65 = v5;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_7;
    }
    goto LABEL_56;
  }
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v3, v72, v4, v73, v74, v75, v76, v9, v5, v69, v68);
  swift_bridgeObjectRelease();
LABEL_46:
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(*v2, v2[1], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], *((unsigned char *)v2 + 80));
LABEL_48:
  swift_bridgeObjectRelease();
LABEL_49:

  free(v2);
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance _ShapeStyle_Pack.Style(uint64_t a1)
{
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v15 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  char v8 = *(unsigned char *)(a1 + 80);
  int v9 = *(_DWORD *)(a1 + 88);
  _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v1);
  *(_DWORD *)(v1 + 84) = v9;
  uint64_t v10 = swift_bridgeObjectRetain();
  specialized Array<A>.animatableData.setter(v10);
  swift_bridgeObjectRelease();
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v15, v14, v13, v12, v2, v3, v4, v5, v6, v7, v8);

  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _ShapeStyle_Pack.Style(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ShapeStyle_Pack.Style.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void _ShapeStyle_Pack.Fill.AnimatableData.init(_:)(int64x2_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  int64x2_t v3 = *a1;
  uint64_t v5 = a1[1].i64[0];
  uint64_t v4 = a1[1].i64[1];
  uint64_t v7 = a1[2].i64[0];
  uint64_t v6 = a1[2].i64[1];
  uint64_t v9 = a1[3].i64[0];
  uint64_t v8 = a1[3].i64[1];
  uint64_t v10 = a1[4].i64[0];
  uint64_t v11 = a1[4].i64[1];
  switch(a1[5].i8[0])
  {
    case 1:
      uint64_t v19 = a1->i64[0];
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      int8x16_t v33 = 0u;
      char v38 = 9;
      float32x2_t v32 = &v33;
      float32x2_t v28 = *(void (**)(int8x16_t **, ValueMetadata *, _UNKNOWN **))(*(void *)v3.i64[0] + 136);
      uint64_t v30 = v8;
      unsigned __int8 v27 = v3.u8[8];
      swift_retain();
      v28(&v32, &type metadata for _ShapeStyle_Pack.Fill.AnimatableData.PaintInitVisitor, &protocol witness table for _ShapeStyle_Pack.Fill.AnimatableData.PaintInitVisitor);
      outlined consume of _ShapeStyle_Pack.Fill(v19, v27, v5, v4, v7, v6, v9, v30, v10, v11, 1);
      outlined consume of _ShapeStyle_Pack.Fill(v19, v27, v5, v4, v7, v6, v9, v30, v10, v11, 1);
      char v12 = v38;
      break;
    case 2:
      LODWORD(v13) = *a1;
      uint64_t v29 = a1->i64[0];
      uint64_t v31 = a1[3].i64[1];
      LODWORD(v14) = HIDWORD(a1->i64[0]);
      unsigned __int8 v20 = a1->i64[1];
      LODWORD(v16) = HIDWORD(a1->i64[1]);
      LODWORD(v15) = a1->i64[1];
      if (one-time initialization token for legacyInterpolation != -1) {
        swift_once();
      }
      swift_beginAccess();
      if (static Color.Resolved.legacyInterpolation == 1)
      {
        outlined consume of _ShapeStyle_Pack.Fill(v29, v20, v5, v4, v7, v6, v9, v31, v10, v11, 2);
        goto LABEL_16;
      }
      *(float *)v21.i32 = v13;
      ResolvedGradient.ColorSpace.convertIn(_:)((float *)v33.i32, v21, v14, LODWORD(v15), v16, v22);
      outlined consume of _ShapeStyle_Pack.Fill(v29, v20, v5, v4, v7, v6, v9, v31, v10, v11, 2);
      goto LABEL_15;
    case 3:
    case 6:
      outlined consume of _ShapeStyle_Pack.Fill(v3.i64[0], v3.u8[8], v5, v4, v7, v6, v9, v8, v10, v11, a1[5].i8[0]);
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      int8x16_t v33 = 0u;
      char v12 = 9;
      break;
    case 4:
      float32x2_t v23 = vmul_f32((float32x2_t)vmovn_s64(v3), (float32x2_t)0x4300000043000000);
      v24.i64[0] = v23.u32[0];
      v24.i64[1] = v23.u32[1];
      int8x16_t v33 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_f32((float32x2_t)vshrn_n_s64(v3, 0x20uLL), (float32x2_t)0x4300000043000000), 0x20uLL), v24);
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      char v12 = 1;
      break;
    case 5:
      int8x16_t v33 = *(int8x16_t *)a1;
      *(void *)&long long v34 = v5;
      *((void *)&v34 + 1) = v4;
      *(void *)&long long v35 = v7;
      *((void *)&v35 + 1) = v6;
      *(void *)&long long v36 = v9;
      *((void *)&v36 + 1) = v8;
      *(void *)&long long v37 = v10;
      char v12 = 8;
      *((void *)&v37 + 1) = v11;
      break;
    default:
      LODWORD(v14) = HIDWORD(a1->i64[0]);
      LODWORD(v13) = a1->i64[0];
      LODWORD(v16) = HIDWORD(a1->i64[1]);
      LODWORD(v15) = a1->i64[1];
      if (one-time initialization token for legacyInterpolation != -1) {
        swift_once();
      }
      swift_beginAccess();
      if ((static Color.Resolved.legacyInterpolation & 1) == 0)
      {
        *(float *)v17.i32 = v13;
        ResolvedGradient.ColorSpace.convertIn(_:)((float *)v33.i32, v17, v14, LODWORD(v15), v16, v18);
LABEL_15:
        float v14 = *(float *)&v33.i32[1];
        float v13 = *(float *)v33.i32;
        float v16 = *(float *)&v33.i32[3];
        float v15 = *(float *)&v33.i32[2];
      }
LABEL_16:
      char v12 = 0;
      v33.i64[0] = COERCE_UNSIGNED_INT(v13 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v14 * 128.0) << 32);
      v33.i64[1] = COERCE_UNSIGNED_INT(v15 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v16 * 128.0) << 32);
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      char v38 = 0;
      break;
  }
  long long v25 = v34;
  *(int8x16_t *)a2 = v33;
  *(_OWORD *)(a2 + 16) = v25;
  long long v26 = v36;
  *(_OWORD *)(a2 + 32) = v35;
  *(_OWORD *)(a2 + 48) = v26;
  *(_OWORD *)(a2 + 64) = v37;
  *(unsigned char *)(a2 + 80) = v12;
}

uint64_t _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(uint64_t a1)
{
  int64x2_t v3 = *v1;
  uint64_t v5 = v1[1].i64[0];
  unint64_t v4 = v1[1].u64[1];
  unint64_t v6 = v1[2].u64[0];
  unint64_t v7 = v1[2].u64[1];
  unint64_t v8 = v1[3].u64[0];
  unint64_t v9 = v1[3].u64[1];
  uint64_t v10 = v1[4].i64[0];
  uint64_t v11 = v1[4].i64[1];
  int v12 = v1[5].u8[0];
  float v14 = *(void **)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v16 = a1 + 16;
  uint64_t v15 = *(void *)(a1 + 16);
  int8x16_t v18 = *(void **)(a1 + 24);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v20 = a1 + 40;
  uint64_t v19 = *(void *)(a1 + 40);
  uint64_t v22 = *(void *)(a1 + 48);
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v23 = *(void *)(a1 + 64);
  uint64_t v24 = *(void *)(a1 + 72);
  int v25 = *(unsigned __int8 *)(a1 + 80);
  v201[0] = v14;
  v201[1] = v13;
  v201[2] = v15;
  v201[3] = v18;
  v201[4] = v17;
  v201[5] = v19;
  v201[6] = v22;
  v201[7] = v21;
  v201[8] = v23;
  v201[9] = v24;
  char v202 = v25;
  int64x2_t v203 = v3;
  uint64_t v204 = v5;
  unint64_t v205 = v4;
  unint64_t v206 = v6;
  unint64_t v207 = v7;
  unint64_t v208 = v8;
  unint64_t v209 = v9;
  uint64_t v210 = v10;
  uint64_t v211 = v11;
  char v212 = v12;
  switch(v25)
  {
    case 0:
      if (v12)
      {
        if (v12 != 9
          || vorrq_s8((int8x16_t)vdupq_laneq_s64(v3, 1), (int8x16_t)v3).u64[0] | v5 | v4 | v6 | v7 | v8 | v9 | v10 | v11)
        {
          goto LABEL_19;
        }
        uint64_t result = outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v201, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(unsigned char *)(a1 + 80) = 0;
      }
      else
      {
        int64x2_t v67 = v3;
        if (one-time initialization token for legacyInterpolation != -1) {
          swift_once();
        }
        float v68 = *(float *)v67.i32 * 0.0078125;
        float v69 = *(float *)&v67.i32[1] * 0.0078125;
        float v70 = *(float *)&v67.i32[2] * 0.0078125;
        float v71 = *(float *)&v67.i32[3] * 0.0078125;
        swift_beginAccess();
        if (static Color.Resolved.legacyInterpolation != 1)
        {
          char v200 = 2;
          v187.i64[0] = __PAIR64__(LODWORD(v69), LODWORD(v68));
          *(float *)&v187.i32[2] = *(float *)&v67.i32[2] * 0.0078125;
          *(float *)&v187.i32[3] = *(float *)&v67.i32[3] * 0.0078125;
          float v68 = ResolvedGradient.ColorSpace.convertOut(_:)((float *)v187.i32);
          float v69 = v72;
          float v70 = v73;
          float v71 = v74;
        }
        uint64_t result = outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v201, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        *(void *)a1 = LODWORD(v68) | ((unint64_t)LODWORD(v69) << 32);
        *(void *)(a1 + 8) = LODWORD(v70) | ((unint64_t)LODWORD(v71) << 32);
        *(_OWORD *)uint64_t v16 = 0u;
        *(_OWORD *)(v16 + 16) = 0u;
        *(_OWORD *)(v16 + 32) = 0u;
        *(_OWORD *)(v16 + 48) = 0u;
        *(unsigned char *)(v16 + 64) = 0;
      }
      break;
    case 1:
      v183 = v14;
      uint64_t v165 = v23;
      unsigned __int8 v166 = v13;
      uint64_t v170 = v19;
      uint64_t v172 = v22;
      uint64_t v174 = v21;
      v176 = v18;
      v168 = (void *)v15;
      uint64_t v179 = v17;
      uint64_t v163 = v24;
      switch(v12)
      {
        case 2:
          int64x2_t v187 = v3;
          uint64_t v146 = v3.i64[1];
          uint64_t v152 = v3.i64[0];
          *(void *)&long long v188 = v5;
          *((void *)&v188 + 1) = v4;
          *(void *)&long long v189 = v6;
          BYTE8(v189) = v7;
          long long v190 = 0u;
          long long v191 = 0u;
          long long v192 = 0u;
          long long v193 = 0u;
          long long v194 = 0u;
          char v195 = 0;
          v158 = *(void (**)(int64x2_t *, uint64_t, _UNKNOWN **))(*(void *)v14 + 136);
          uint64_t v27 = v4;
          uint64_t v28 = v6;
          uint64_t v29 = v7;
          uint64_t v30 = v8;
          uint64_t v31 = v9;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v5, v4, v6, v7, v8, v9, v10, v11, 2);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v152, v146, v5, v27, v28, v29, v30, v31, v10, v11, 2);
          outlined copy of _ShapeStyle_Pack.Fill(v183, v166, v168, v176, v179, v170, v172, v174, v165, v24, 1);
          type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<Shader.ResolvedShader>(0, &lazy cache variable for type metadata for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<LinearGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint, (uint64_t)&type metadata for LinearGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor);
          v158(&v187, v32, &protocol witness table for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<A>);
          outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v183, v166, (uint64_t)v168, v176, v179, v170, v172, v174, v165, v24, 1);
          outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v201, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
          uint64_t v33 = *((void *)&v190 + 1);
          uint64_t v34 = v190;
          uint64_t v36 = *((void *)&v191 + 1);
          uint64_t v35 = v191;
          uint64_t v38 = *((void *)&v192 + 1);
          uint64_t v37 = v192;
          uint64_t v40 = *((void *)&v193 + 1);
          uint64_t v39 = v193;
          uint64_t v180 = *((void *)&v194 + 1);
          uint64_t v41 = v194;
          char v184 = v195;
          *(int64x2_t *)v196 = v187;
          *(_OWORD *)&v196[16] = v188;
          *(void *)&v196[32] = v189;
          v196[40] = BYTE8(v189);
          *(_OWORD *)&v196[48] = v190;
          *(_OWORD *)&v196[64] = v191;
          *(_OWORD *)&v196[80] = v192;
          long long v197 = v193;
          long long v198 = v194;
          char v199 = v195;
          outlined copy of _ShapeStyle_Pack.Fill((id)v190, BYTE8(v190), (void *)v191, *((void **)&v191 + 1), v192, *((uint64_t *)&v192 + 1), v193, *((uint64_t *)&v193 + 1), v194, *((uint64_t *)&v194 + 1), v195);
          uint64_t result = outlined release of _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<LinearGradient._Paint>((uint64_t)v196);
          goto LABEL_38;
        case 3:
          int64x2_t v187 = v3;
          uint64_t v147 = v3.i64[1];
          uint64_t v153 = v3.i64[0];
          *(void *)&long long v188 = v5;
          BYTE8(v188) = v4;
          *(void *)&long long v189 = v6;
          *((void *)&v189 + 1) = v7;
          long long v190 = 0u;
          long long v191 = 0u;
          long long v192 = 0u;
          long long v193 = 0u;
          long long v194 = 0u;
          char v195 = 0;
          v160 = *(void (**)(int64x2_t *, uint64_t, _UNKNOWN **))(*(void *)v14 + 136);
          uint64_t v89 = v4;
          uint64_t v90 = v6;
          uint64_t v91 = v7;
          uint64_t v92 = v8;
          uint64_t v93 = v9;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v5, v4, v6, v7, v8, v9, v10, v11, 3);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v153, v147, v5, v89, v90, v91, v92, v93, v10, v11, 3);
          uint64_t v94 = v165;
          uint64_t v142 = v24;
          uint64_t v96 = v179;
          uint64_t v95 = (uint64_t)v183;
          unsigned __int8 v98 = v166;
          uint64_t v97 = (uint64_t)v168;
          uint64_t v99 = v174;
          unsigned __int8 v100 = v176;
          uint64_t v102 = v170;
          uint64_t v101 = v172;
          outlined copy of _ShapeStyle_Pack.Fill(v183, v166, v168, v176, v179, v170, v172, v174, v165, v142, 1);
          long long v103 = (unint64_t *)&lazy cache variable for type metadata for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<RadialGradient._Paint>;
          long long v104 = &type metadata for RadialGradient._Paint;
          long long v105 = lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint;
          goto LABEL_36;
        case 4:
          int64x2_t v187 = v3;
          uint64_t v148 = v3.i64[1];
          uint64_t v154 = v3.i64[0];
          *(void *)&long long v188 = v5;
          BYTE8(v188) = v4;
          *(void *)&long long v189 = v6;
          *((void *)&v189 + 1) = v7;
          long long v190 = 0u;
          long long v191 = 0u;
          long long v192 = 0u;
          long long v193 = 0u;
          long long v194 = 0u;
          char v195 = 0;
          v160 = *(void (**)(int64x2_t *, uint64_t, _UNKNOWN **))(*(void *)v14 + 136);
          uint64_t v106 = v4;
          uint64_t v107 = v6;
          uint64_t v108 = v7;
          uint64_t v109 = v8;
          uint64_t v110 = v9;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v5, v4, v6, v7, v8, v9, v10, v11, 4);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v154, v148, v5, v106, v107, v108, v109, v110, v10, v11, 4);
          uint64_t v94 = v165;
          uint64_t v143 = v24;
          uint64_t v96 = v179;
          uint64_t v95 = (uint64_t)v183;
          unsigned __int8 v98 = v166;
          uint64_t v97 = (uint64_t)v168;
          uint64_t v99 = v174;
          unsigned __int8 v100 = v176;
          uint64_t v102 = v170;
          uint64_t v101 = v172;
          outlined copy of _ShapeStyle_Pack.Fill(v183, v166, v168, v176, v179, v170, v172, v174, v165, v143, 1);
          long long v103 = (unint64_t *)&lazy cache variable for type metadata for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<EllipticalGradient._Paint>;
          long long v104 = &type metadata for EllipticalGradient._Paint;
          long long v105 = lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint;
          goto LABEL_36;
        case 5:
          int64x2_t v187 = v3;
          uint64_t v149 = v3.i64[1];
          uint64_t v155 = v3.i64[0];
          *(void *)&long long v188 = v5;
          BYTE8(v188) = v4;
          *(void *)&long long v189 = v6;
          *((void *)&v189 + 1) = v7;
          long long v190 = 0u;
          long long v191 = 0u;
          long long v192 = 0u;
          long long v193 = 0u;
          long long v194 = 0u;
          char v195 = 0;
          v160 = *(void (**)(int64x2_t *, uint64_t, _UNKNOWN **))(*(void *)v14 + 136);
          uint64_t v111 = v4;
          uint64_t v112 = v6;
          uint64_t v113 = v7;
          uint64_t v114 = v8;
          uint64_t v115 = v9;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v5, v4, v6, v7, v8, v9, v10, v11, 5);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v155, v149, v5, v111, v112, v113, v114, v115, v10, v11, 5);
          uint64_t v94 = v165;
          uint64_t v144 = v24;
          uint64_t v96 = v179;
          uint64_t v95 = (uint64_t)v183;
          unsigned __int8 v98 = v166;
          uint64_t v97 = (uint64_t)v168;
          uint64_t v99 = v174;
          unsigned __int8 v100 = v176;
          uint64_t v102 = v170;
          uint64_t v101 = v172;
          outlined copy of _ShapeStyle_Pack.Fill(v183, v166, v168, v176, v179, v170, v172, v174, v165, v144, 1);
          long long v103 = (unint64_t *)&lazy cache variable for type metadata for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<AngularGradient._Paint>;
          long long v104 = &type metadata for AngularGradient._Paint;
          long long v105 = lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint;
LABEL_36:
          type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<Shader.ResolvedShader>(0, v103, (uint64_t (*)(void))v105, (uint64_t)v104, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor);
          v160(&v187, v116, &protocol witness table for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<A>);
          outlined consume of _ShapeStyle_Pack.Fill(v95, v98, v97, v100, v96, v102, v101, v99, v94, v163, 1);
          outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v201, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
          uint64_t v33 = *((void *)&v190 + 1);
          uint64_t v34 = v190;
          uint64_t v36 = *((void *)&v191 + 1);
          uint64_t v35 = v191;
          uint64_t v38 = *((void *)&v192 + 1);
          uint64_t v37 = v192;
          uint64_t v40 = *((void *)&v193 + 1);
          uint64_t v39 = v193;
          uint64_t v41 = v194;
          *(int64x2_t *)v196 = v187;
          *(void *)&v196[16] = v188;
          v196[24] = BYTE8(v188);
          *(_OWORD *)&v196[32] = v189;
          *(_OWORD *)&v196[48] = v190;
          *(_OWORD *)&v196[64] = v191;
          *(_OWORD *)&v196[80] = v192;
          long long v197 = v193;
          long long v198 = v194;
          uint64_t v180 = *((void *)&v194 + 1);
          char v184 = v195;
          char v199 = v195;
          outlined copy of _ShapeStyle_Pack.Fill((id)v190, BYTE8(v190), (void *)v191, *((void **)&v191 + 1), v192, *((uint64_t *)&v192 + 1), v193, *((uint64_t *)&v193 + 1), v194, *((uint64_t *)&v194 + 1), v195);
          uint64_t result = outlined release of _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<AngularGradient._Paint>((uint64_t)v196);
          goto LABEL_38;
        case 6:
          uint64_t v150 = v3.i64[1];
          uint64_t v156 = v3.i64[0];
          int64x2_t v187 = v3;
          *(void *)&long long v188 = v5;
          *((void *)&v188 + 1) = v4;
          long long v189 = 0u;
          long long v190 = 0u;
          long long v191 = 0u;
          long long v192 = 0u;
          long long v193 = 0u;
          LOBYTE(v194) = 0;
          v161 = *(void (**)(int64x2_t *, uint64_t, _UNKNOWN **))(*(void *)v14 + 136);
          uint64_t v117 = v4;
          uint64_t v118 = v6;
          uint64_t v119 = v7;
          uint64_t v120 = v8;
          uint64_t v121 = v9;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v5, v4, v6, v7, v8, v9, v10, v11, 6);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v156, v150, v5, v117, v118, v119, v120, v121, v10, v11, 6);
          outlined copy of _ShapeStyle_Pack.Fill(v183, v166, v168, v176, v179, v170, v172, v174, v165, v24, 1);
          type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<Shader.ResolvedShader>(0, &lazy cache variable for type metadata for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<MeshGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint, (uint64_t)&type metadata for MeshGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor);
          v161(&v187, v122, &protocol witness table for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<A>);
          outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v183, v166, (uint64_t)v168, v176, v179, v170, v172, v174, v165, v24, 1);
          outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v201, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
          uint64_t v33 = *((void *)&v189 + 1);
          uint64_t v34 = v189;
          uint64_t v36 = *((void *)&v190 + 1);
          uint64_t v35 = v190;
          uint64_t v38 = *((void *)&v191 + 1);
          uint64_t v37 = v191;
          uint64_t v40 = *((void *)&v192 + 1);
          uint64_t v39 = v192;
          uint64_t v180 = *((void *)&v193 + 1);
          uint64_t v41 = v193;
          char v184 = v194;
          *(int64x2_t *)v196 = v187;
          *(_OWORD *)&v196[16] = v188;
          *(_OWORD *)&v196[32] = v189;
          *(_OWORD *)&v196[48] = v190;
          *(_OWORD *)&v196[64] = v191;
          *(_OWORD *)&v196[80] = v192;
          long long v197 = v193;
          LOBYTE(v198) = v194;
          outlined copy of _ShapeStyle_Pack.Fill((id)v189, BYTE8(v189), (void *)v190, *((void **)&v190 + 1), v191, *((uint64_t *)&v191 + 1), v192, *((uint64_t *)&v192 + 1), v193, *((uint64_t *)&v193 + 1), v194);
          uint64_t result = outlined release of _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<MeshGradient._Paint>((uint64_t)v196);
LABEL_38:
          *(void *)a1 = v34;
          *(void *)(a1 + 8) = v33;
          *(void *)(a1 + 16) = v35;
          *(void *)(a1 + 24) = v36;
          *(void *)(a1 + 32) = v37;
          *(void *)(a1 + 40) = v38;
          *(void *)(a1 + 48) = v39;
          *(void *)(a1 + 56) = v40;
          *(void *)(a1 + 64) = v41;
          *(void *)(a1 + 72) = v180;
          *(unsigned char *)(a1 + 80) = v184;
          break;
        case 7:
          uint64_t v157 = v3.i64[0];
          *(void *)v196 = v3.i64[0];
          memset(&v196[8], 0, 81);
          v162 = *(void (**)(unsigned char *, uint64_t, _UNKNOWN **))(*(void *)v14 + 136);
          uint64_t v151 = v3.i64[1];
          uint64_t v123 = v4;
          uint64_t v124 = v6;
          uint64_t v125 = v7;
          uint64_t v126 = v8;
          uint64_t v127 = v9;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v5, v4, v6, v7, v8, v9, v10, v11, 7);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v157, v151, v5, v123, v124, v125, v126, v127, v10, v11, 7);
          outlined copy of _ShapeStyle_Pack.Fill(v183, v166, v168, v176, v179, v170, v172, v174, v165, v24, 1);
          type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<Shader.ResolvedShader>(0, &lazy cache variable for type metadata for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<Shader.ResolvedShader>, (uint64_t (*)(void))lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor);
          v162(v196, v128, &protocol witness table for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<A>);
          outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v183, v166, (uint64_t)v168, v176, v179, v170, v172, v174, v165, v24, 1);
          outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v201, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
          long long v129 = *(_OWORD *)&v196[16];
          long long v130 = *(_OWORD *)&v196[32];
          long long v131 = *(_OWORD *)&v196[48];
          uint64_t v186 = *(void *)&v196[80];
          LOBYTE(v124) = v196[88];
          uint64_t v132 = *(void *)&v196[8];
          uint64_t v178 = *(void *)&v196[64];
          char v182 = v196[88];
          uint64_t v133 = *(void *)&v196[72];
          outlined copy of _ShapeStyle_Pack.Fill(*(id *)&v196[8], v196[16], *(void **)&v196[24], *(void **)&v196[32], *(uint64_t *)&v196[40], *(uint64_t *)&v196[48], *(uint64_t *)&v196[56], *(uint64_t *)&v196[64], *(uint64_t *)&v196[72], *(uint64_t *)&v196[80], v196[88]);
          swift_bridgeObjectRelease();
          uint64_t result = outlined consume of _ShapeStyle_Pack.Fill(v132, v129, *((uint64_t *)&v129 + 1), v130, *((uint64_t *)&v130 + 1), v131, *((uint64_t *)&v131 + 1), v178, v133, v186, v124);
          *(void *)a1 = v132;
          *(_OWORD *)(a1 + 8) = v129;
          *(_OWORD *)(a1 + 24) = v130;
          *(_OWORD *)(a1 + 40) = v131;
          *(void *)(a1 + 56) = v178;
          *(void *)(a1 + 64) = v133;
          *(void *)(a1 + 72) = v186;
          *(unsigned char *)(a1 + 80) = v182;
          break;
        default:
          uint64_t v50 = v23;
          uint64_t v138 = v10;
          uint64_t v141 = v11;
          int8x16_t v51 = (void *)v15;
          uint64_t v88 = v5;
          uint64_t v53 = v18;
          uint64_t v54 = v17;
          uint64_t v55 = v19;
          uint64_t v56 = v22;
          uint64_t v57 = v21;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v88, v4, v6, v7, v8, v9, v138, v141, v12);
          char v145 = 1;
          goto LABEL_13;
      }
      break;
    case 2:
      if (v12)
      {
        uint64_t v181 = v17;
        if (v12 != 9
          || vorrq_s8((int8x16_t)vdupq_laneq_s64(v3, 1), (int8x16_t)v3).u64[0] | v5 | v4 | v6 | v7 | v8 | v9 | v10 | v11)
        {
          uint64_t v42 = v14;
          uint64_t v43 = v23;
          uint64_t v136 = v10;
          uint64_t v139 = v11;
          uint64_t v44 = (void *)v15;
          uint64_t v45 = v5;
          int8x16_t v46 = v18;
          uint64_t v47 = v19;
          uint64_t v48 = v22;
          uint64_t v49 = v21;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v45, v4, v6, v7, v8, v9, v136, v139, v12);
          outlined copy of _ShapeStyle_Pack.Fill(v42, v13, v44, v46, v181, v47, v48, v49, v43, v24, 2);
          goto LABEL_20;
        }
        unint64_t v134 = (unint64_t)v18;
        uint64_t v135 = v15;
        outlined copy of Material.ID(v15, v18);
        uint64_t result = outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v201, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        unint64_t v86 = v134 & 0xFFFFFFFF000000FFLL;
        uint64_t v87 = (unsigned __int16)v181;
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = v135;
      }
      else
      {
        unsigned __int16 v75 = v17;
        int64x2_t v76 = v3;
        uint64_t v77 = v15;
        unint64_t v78 = (unint64_t)v18;
        outlined copy of Material.ID(v15, v18);
        if (one-time initialization token for legacyInterpolation != -1) {
          swift_once();
        }
        float v79 = *(float *)v76.i32 * 0.0078125;
        float v80 = *(float *)&v76.i32[1] * 0.0078125;
        float v81 = *(float *)&v76.i32[2] * 0.0078125;
        float v82 = *(float *)&v76.i32[3] * 0.0078125;
        swift_beginAccess();
        if (static Color.Resolved.legacyInterpolation != 1)
        {
          char v200 = 2;
          v187.i64[0] = __PAIR64__(LODWORD(v80), LODWORD(v79));
          *(float *)&v187.i32[2] = *(float *)&v76.i32[2] * 0.0078125;
          *(float *)&v187.i32[3] = *(float *)&v76.i32[3] * 0.0078125;
          float v79 = ResolvedGradient.ColorSpace.convertOut(_:)((float *)v187.i32);
          float v80 = v83;
          float v81 = v84;
          float v82 = v85;
        }
        uint64_t result = outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v201, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        *(void *)a1 = LODWORD(v79) | ((unint64_t)LODWORD(v80) << 32);
        *(void *)(a1 + 8) = LODWORD(v81) | ((unint64_t)LODWORD(v82) << 32);
        unint64_t v86 = v78 & 0xFFFFFFFF000000FFLL;
        uint64_t v87 = v75;
        *(void *)(a1 + 16) = v77;
      }
      *(void *)(a1 + 24) = v86;
      *(void *)(a1 + 32) = v87;
      *(_OWORD *)uint64_t v20 = 0u;
      *(_OWORD *)(v20 + 16) = 0u;
      *(void *)(v20 + 32) = 0;
      *(unsigned char *)(a1 + 80) = 2;
      break;
    case 4:
      if (v12 != 1) {
        goto LABEL_19;
      }
      float32x2_t v58 = (float32x2_t)vmovn_s64(v3);
      int64x2_t v185 = v3;
      uint64_t result = outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v201, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
      float32x2_t v59 = vmul_f32(v58, (float32x2_t)0x3C0000003C000000);
      v60.i64[0] = v59.u32[0];
      v60.i64[1] = v59.u32[1];
      *(int8x16_t *)a1 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_f32((float32x2_t)vshrn_n_s64(v185, 0x20uLL), (float32x2_t)0x3C0000003C000000), 0x20uLL), v60);
      *(_OWORD *)uint64_t v16 = 0u;
      *(_OWORD *)(v16 + 16) = 0u;
      *(_OWORD *)(v16 + 32) = 0u;
      *(_OWORD *)(v16 + 48) = 0u;
      *(unsigned char *)(a1 + 80) = 4;
      break;
    case 5:
      __int32 v61 = v3.i32[0];
      if (v12 != 8)
      {
LABEL_19:
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v5, v4, v6, v7, v8, v9, v10, v11, v12);
        goto LABEL_20;
      }
      unint64_t v62 = HIDWORD(v3.i64[0]);
      __int32 v63 = v3.i32[2];
      unint64_t v159 = HIDWORD(v3.i64[1]);
      int v167 = v9;
      unint64_t v169 = HIDWORD(v4);
      unint64_t v171 = HIDWORD(v6);
      unint64_t v173 = HIDWORD(v7);
      unint64_t v175 = HIDWORD(v8);
      unint64_t v177 = HIDWORD(v9);
      int v164 = v8;
      int v64 = v7;
      int v65 = v6;
      int v66 = v4;
      uint64_t result = outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v201, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
      *(_DWORD *)a1 = v61;
      *(_DWORD *)(a1 + 4) = v62;
      *(_DWORD *)(a1 + 8) = v63;
      *(_DWORD *)(a1 + 12) = v159;
      *(void *)(a1 + 16) = v5;
      *(_DWORD *)(a1 + 24) = v66;
      *(_DWORD *)(a1 + 28) = v169;
      *(_DWORD *)(a1 + 32) = v65;
      *(_DWORD *)(a1 + 36) = v171;
      *(_DWORD *)(a1 + 40) = v64;
      *(_DWORD *)(a1 + 44) = v173;
      *(_DWORD *)(a1 + 48) = v164;
      *(_DWORD *)(a1 + 52) = v175;
      *(_DWORD *)(a1 + 56) = v167;
      *(_DWORD *)(a1 + 60) = v177;
      *(void *)(a1 + 64) = v10;
      *(void *)(a1 + 72) = v11;
      *(unsigned char *)(a1 + 80) = 5;
      break;
    default:
      v183 = v14;
      uint64_t v50 = v23;
      uint64_t v137 = v10;
      uint64_t v140 = v11;
      int8x16_t v51 = (void *)v15;
      uint64_t v52 = v5;
      uint64_t v53 = v18;
      uint64_t v54 = v17;
      uint64_t v55 = v19;
      uint64_t v56 = v22;
      uint64_t v57 = v21;
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v52, v4, v6, v7, v8, v9, v137, v140, v12);
      char v145 = v25;
LABEL_13:
      outlined copy of _ShapeStyle_Pack.Fill(v183, v13, v51, v53, v54, v55, v56, v57, v50, v24, v145);
LABEL_20:
      uint64_t result = outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v201, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
      break;
  }
  return result;
}

uint64_t _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor.visitPaint<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = a1;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v35 = *(void *)(a2 + 24);
  uint64_t v36 = a2;
  uint64_t v34 = *(void *)(v35 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v33 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v7 = (char *)&v31 - v6;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v31 - v10;
  MEMORY[0x270FA5388](v12);
  float v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v16);
  int8x16_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v31 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v14, v38, a3, v20);
  char v24 = swift_dynamicCast();
  int v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if (v24)
  {
    v25(v11, 0, 1, v4);
    long long v26 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v26(v22, v11, v4);
    uint64_t v27 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v7, v37, v33);
    (*(void (**)(char *, uint64_t))(v34 + 32))(v7, v4);
    type metadata accessor for _AnyResolvedPaint();
    v26(v18, v22, v4);
    uint64_t v28 = _AnyResolvedPaint.__allocating_init(_:)((uint64_t)v18);
    uint64_t v29 = v27 + *(int *)(v36 + 36);
    uint64_t result = outlined consume of _ShapeStyle_Pack.Fill(*(void *)v29, *(void *)(v29 + 8), *(void *)(v29 + 16), *(void *)(v29 + 24), *(void *)(v29 + 32), *(void *)(v29 + 40), *(void *)(v29 + 48), *(void *)(v29 + 56), *(void *)(v29 + 64), *(void *)(v29 + 72), *(unsigned char *)(v29 + 80));
    *(void *)uint64_t v29 = v28;
    *(_OWORD *)(v29 + 8) = 0u;
    *(_OWORD *)(v29 + 24) = 0u;
    *(_OWORD *)(v29 + 40) = 0u;
    *(_OWORD *)(v29 + 56) = 0u;
    *(void *)(v29 + 72) = 0;
    *(unsigned char *)(v29 + 80) = 1;
  }
  else
  {
    v25(v11, 1, 1, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return result;
}

uint64_t protocol witness for ResolvedPaintVisitor.visitPaint<A>(_:) in conformance _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor.visitPaint<A>(_:)(a1, a4, a2);
}

void _ShapeStyle_Pack.Fill.AnimatableData.negate()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(uint64_t *)v0;
  uint64_t v3 = *((uint64_t *)v1 + 1);
  long long v4 = *((_OWORD *)v1 + 1);
  uint64_t v5 = *((void *)v1 + 4);
  uint64_t v6 = *((void *)v1 + 5);
  uint64_t v7 = *((void *)v1 + 6);
  uint64_t v9 = *((void *)v1 + 7);
  uint64_t v8 = *((void *)v1 + 8);
  uint64_t v10 = *((void *)v1 + 9);
  switch(*((unsigned char *)v1 + 80))
  {
    case 2:
      uint64_t v77 = *((void *)v1 + 3);
      uint64_t v80 = *((void *)v1 + 1);
      uint64_t v72 = *((void *)v1 + 2);
      double v11 = 0.0 - *(double *)&v2;
      double v12 = 0.0 - *(double *)&v3;
      double v13 = 0.0 - *(double *)&v4;
      *(void *)&long long v85 = MEMORY[0x263F8EE78];
      BYTE8(v85) = 0;
      double v14 = 0.0 - *((double *)&v4 + 1);
      uint64_t v83 = v5;
      char v84 = v6;
      uint64_t v15 = v5;
      uint64_t v16 = v8;
      uint64_t v17 = v10;
      uint64_t v18 = v2;
      swift_bridgeObjectRetain();
      ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v83, -1.0);
      char v19 = 2;
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v18, v80, v72, v77, v15, v6, v7, v9, v16, v17, 2);
      uint64_t v20 = v85;
      uint64_t v21 = BYTE8(v85);
      *uint64_t v1 = v11;
      v1[1] = v12;
      v1[2] = v13;
      v1[3] = v14;
      *((void *)v1 + 4) = v20;
      *((void *)v1 + 5) = v21;
      goto LABEL_7;
    case 3:
      uint64_t v22 = *((void *)v1 + 3);
      uint64_t v73 = *((void *)v1 + 2);
      double v23 = v1[4];
      double v24 = v1[5];
      uint64_t v81 = *((void *)v1 + 1);
      double v25 = 0.0 - *(double *)&v2;
      *(void *)&long long v85 = MEMORY[0x263F8EE78];
      BYTE8(v85) = 0;
      double v26 = 0.0 - *(double *)&v3;
      uint64_t v83 = v4;
      char v84 = BYTE8(v4);
      uint64_t v78 = v6;
      uint64_t v27 = v5;
      uint64_t v28 = v10;
      uint64_t v29 = v2;
      swift_bridgeObjectRetain();
      ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v83, -1.0);
      char v19 = 3;
      goto LABEL_6;
    case 4:
      uint64_t v22 = *((void *)v1 + 3);
      uint64_t v73 = *((void *)v1 + 2);
      double v23 = v1[4];
      double v24 = v1[5];
      uint64_t v81 = *((void *)v1 + 1);
      double v25 = 0.0 - *(double *)&v2;
      *(void *)&long long v85 = MEMORY[0x263F8EE78];
      BYTE8(v85) = 0;
      double v26 = 0.0 - *(double *)&v3;
      uint64_t v83 = v4;
      char v84 = BYTE8(v4);
      uint64_t v78 = v6;
      uint64_t v27 = v5;
      uint64_t v28 = v10;
      uint64_t v29 = v2;
      swift_bridgeObjectRetain();
      ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v83, -1.0);
      char v19 = 4;
      goto LABEL_6;
    case 5:
      uint64_t v22 = *((void *)v1 + 3);
      uint64_t v73 = *((void *)v1 + 2);
      double v23 = v1[4];
      double v24 = v1[5];
      uint64_t v81 = *((void *)v1 + 1);
      double v25 = 0.0 - *(double *)&v2;
      *(void *)&long long v85 = MEMORY[0x263F8EE78];
      BYTE8(v85) = 0;
      double v26 = 0.0 - *(double *)&v3;
      uint64_t v83 = v4;
      char v84 = BYTE8(v4);
      uint64_t v78 = v6;
      uint64_t v27 = v5;
      uint64_t v28 = v10;
      uint64_t v29 = v2;
      swift_bridgeObjectRetain();
      ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v83, -1.0);
      char v19 = 5;
LABEL_6:
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v29, v81, v73, v22, v27, v78, v7, v9, v8, v28, v19);
      uint64_t v30 = v85;
      uint64_t v31 = BYTE8(v85);
      *uint64_t v1 = v25;
      v1[1] = v26;
      *((void *)v1 + 2) = v30;
      *((void *)v1 + 3) = v31;
      v1[4] = 0.0 - v23;
      v1[5] = 0.0 - v24;
LABEL_7:
      *((_OWORD *)v1 + 3) = 0u;
      *((_OWORD *)v1 + 4) = 0u;
      goto LABEL_8;
    case 6:
      uint64_t v32 = *((void *)v1 + 5);
      uint64_t v33 = *((void *)v1 + 4);
      uint64_t v34 = *((void *)v1 + 8);
      uint64_t v35 = *((void *)v1 + 9);
      int64x2_t v75 = *(int64x2_t *)(v1 + 2);
      swift_bridgeObjectRelease_n();
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v2, v3, v75.i64[0], v75.i64[1], v33, v32, v7, v9, v34, v35, 6);
      uint64_t v36 = MEMORY[0x263F8EE78];
      *(void *)uint64_t v1 = MEMORY[0x263F8EE78];
      *((void *)v1 + 1) = v36;
      float32x2_t v37 = vsub_f32(0, (float32x2_t)vmovn_s64(v75));
      v38.i64[0] = v37.u32[0];
      v38.i64[1] = v37.u32[1];
      *((int8x16_t *)v1 + 1) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32(0, (float32x2_t)vshrn_n_s64(v75, 0x20uLL)), 0x20uLL), v38);
      *((_OWORD *)v1 + 2) = 0u;
      *((_OWORD *)v1 + 3) = 0u;
      *((_OWORD *)v1 + 4) = 0u;
      char v39 = 6;
      goto LABEL_30;
    case 7:
      uint64_t v62 = *((void *)v1 + 9);
      uint64_t v63 = *((void *)v1 + 8);
      uint64_t v64 = *((void *)v1 + 4);
      uint64_t v79 = *((void *)v1 + 5);
      uint64_t v82 = *((void *)v1 + 1);
      unint64_t v40 = MEMORY[0x263F8EE78];
      int v65 = (void *)v2;
      if (*(void *)(v2 + 16))
      {
        uint64_t v68 = *(void *)(v2 + 16);
        long long v76 = *((_OWORD *)v1 + 1);
        uint64_t v41 = (void *)v2;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_34;
        }
        while (1)
        {
          unint64_t v42 = 0;
          uint64_t v43 = v41 + 4;
          long long v4 = v76;
          uint64_t v44 = v68;
          int v66 = v41;
          uint64_t v67 = v9;
          float v69 = v41 + 4;
          uint64_t v70 = v7;
          while (2)
          {
            if (v42 < v41[2])
            {
              unint64_t v46 = v42 + 1;
              uint64_t v47 = (int64x2_t *)&v43[3 * v42];
              int64x2_t v48 = *v47;
              __int8 v49 = v47[1].i8[0];
              switch(v49)
              {
                case 1:
                  unsigned long long v45 = v48.i32[0] ^ 0x80000000 | (unsigned __int128)((unint64_t)(v48.i32[1] ^ 0x80000000) << 32);
                  goto LABEL_14;
                case 2:
                  *(void *)&unsigned long long v45 = v48.i32[0] ^ 0x80000000 | ((unint64_t)(v48.i32[1] ^ 0x80000000) << 32);
                  *((void *)&v45 + 1) = v48.i32[2] ^ 0x80000000;
                  goto LABEL_14;
                case 3:
                  float32x2_t v50 = vneg_f32((float32x2_t)vmovn_s64(v48));
                  v51.i64[0] = v50.u32[0];
                  v51.i64[1] = v50.u32[1];
                  unsigned long long v45 = (unsigned __int128)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vneg_f32((float32x2_t)vshrn_n_s64(v48, 0x20uLL)), 0x20uLL), v51);
                  goto LABEL_14;
                case 4:
                  uint64_t v52 = v47->i64[0];
                  int64_t v53 = *(void *)(v48.i64[0] + 16);
                  if (v53)
                  {
                    int64x2_t v74 = *v47;
                    *(void *)&long long v85 = v40;
                    swift_bridgeObjectRetain();
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53, 0);
                    uint64_t v54 = v52;
                    unint64_t v55 = v40;
                    uint64_t v71 = v54;
                    uint64_t v56 = (float *)(v54 + 32);
                    unint64_t v57 = *(void *)(v40 + 16);
                    do
                    {
                      float v58 = *v56;
                      *(void *)&long long v85 = v55;
                      unint64_t v59 = *(void *)(v55 + 24);
                      if (v57 >= v59 >> 1)
                      {
                        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v57 + 1, 1);
                        unint64_t v55 = v85;
                      }
                      *(void *)(v55 + 16) = v57 + 1;
                      *(float *)(v55 + 4 * v57 + 32) = -v58;
                      ++v56;
                      ++v57;
                      --v53;
                    }
                    while (v53);
                    outlined consume of ShaderVectorData.Element(v71, v74.i64[1], 4);
                    outlined consume of ShaderVectorData.Element(v71, v74.i64[1], 4);
                    uint64_t v41 = v66;
                    uint64_t v9 = v67;
                    unint64_t v40 = MEMORY[0x263F8EE78];
                    uint64_t v44 = v68;
                  }
                  else
                  {
                    outlined consume of ShaderVectorData.Element(v48.i64[0], v48.i64[1], 4);
                    unint64_t v55 = v40;
                  }
                  unsigned long long v45 = v55;
                  uint64_t v43 = v69;
                  uint64_t v7 = v70;
                  long long v4 = v76;
                  goto LABEL_14;
                case 5:
                  goto LABEL_15;
                default:
                  unsigned long long v45 = v48.u32[0] ^ (unsigned __int128)0x80000000uLL;
LABEL_14:
                  *uint64_t v47 = (int64x2_t)v45;
                  v47[1].i8[0] = v49;
LABEL_15:
                  unint64_t v42 = v46;
                  if (v46 != v44) {
                    continue;
                  }
                  goto LABEL_32;
              }
            }
            break;
          }
          __break(1u);
LABEL_34:
          uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew()(v65);
        }
      }
      uint64_t v41 = (void *)MEMORY[0x263F8EE78];
LABEL_32:
      char v19 = 7;
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)v65, v82, v4, *((uint64_t *)&v4 + 1), v64, v79, v7, v9, v63, v62, 7);
      *(void *)uint64_t v1 = v41;
      *(_OWORD *)(v1 + 1) = 0u;
      *(_OWORD *)(v1 + 3) = 0u;
      *(_OWORD *)(v1 + 5) = 0u;
      *(_OWORD *)(v1 + 7) = 0u;
      v1[9] = 0.0;
LABEL_8:
      *((unsigned char *)v1 + 80) = v19;
      return;
    case 8:
      *(void *)&long long v85 = v2;
      *((void *)&v85 + 1) = v3;
      long long v86 = v4;
      *(void *)&long long v87 = v5;
      *((void *)&v87 + 1) = v6;
      *(void *)&long long v88 = v7;
      *((void *)&v88 + 1) = v9;
      *(void *)&long long v89 = v8;
      *((void *)&v89 + 1) = v10;
      _ColorMatrix.negate()();
      long long v60 = v86;
      *(_OWORD *)uint64_t v1 = v85;
      *((_OWORD *)v1 + 1) = v60;
      long long v61 = v88;
      *((_OWORD *)v1 + 2) = v87;
      *((_OWORD *)v1 + 3) = v61;
      *((_OWORD *)v1 + 4) = v89;
      char v39 = 8;
LABEL_30:
      *((unsigned char *)v1 + 80) = v39;
      return;
    default:
      return;
  }
}

uint64_t static _ShapeStyle_Pack.Fill.AnimatableData.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static _ShapeStyle_Pack.Fill.AnimatableData.+ infix(_:_:)(a1, a2, (uint64_t (*)(uint64_t, _OWORD *))specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:), a3);
}

uint64_t static _ShapeStyle_Pack.Fill.AnimatableData.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static _ShapeStyle_Pack.Fill.AnimatableData.+ infix(_:_:)(a1, a2, (uint64_t (*)(uint64_t, _OWORD *))specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:), a3);
}

uint64_t static _ShapeStyle_Pack.Fill.AnimatableData.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, _OWORD *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v15 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  char v17 = *(unsigned char *)(a2 + 80);
  *(void *)a4 = *(void *)a1;
  *(void *)(a4 + 8) = v7;
  *(void *)(a4 + 16) = v8;
  *(void *)(a4 + 24) = v9;
  *(void *)(a4 + 32) = v10;
  *(void *)(a4 + 40) = v11;
  *(void *)(a4 + 48) = v12;
  *(void *)(a4 + 56) = v13;
  *(void *)(a4 + 64) = v14;
  *(void *)(a4 + 72) = v15;
  *(unsigned char *)(a4 + 80) = v16;
  long long v18 = *(_OWORD *)(a2 + 16);
  v21[0] = *(_OWORD *)a2;
  v21[1] = v18;
  long long v19 = *(_OWORD *)(a2 + 48);
  _DWORD v21[2] = *(_OWORD *)(a2 + 32);
  v21[3] = v19;
  v21[4] = *(_OWORD *)(a2 + 64);
  char v22 = v17;
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  return a3(a4, v21);
}

Swift::Void __swiftcall _ShapeStyle_Pack.Fill.AnimatableData.scale(by:)(Swift::Double by)
{
  double v2 = by;
  if (by != 1.0)
  {
    uint64_t v3 = v1;
    long long v4 = v1 + 8;
    uint64_t v5 = v1 + 16;
    float64x2_t v6 = *((float64x2_t *)v1 + 1);
    float64x2_t v7 = *(float64x2_t *)v1;
    uint64_t v8 = v1 + 32;
    float64x2_t v9 = *((float64x2_t *)v1 + 2);
    *(void *)&float64_t v10 = v1 + 48;
    switch(v1[80])
    {
      case 1:
        float v14 = by;
        float32x2_t v15 = vmul_n_f32((float32x2_t)vmovn_s64((int64x2_t)v7), v14);
        v16.i64[0] = v15.u32[0];
        v16.i64[1] = v15.u32[1];
        *(int8x16_t *)uint64_t v1 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_n_f32((float32x2_t)vshrn_n_s64((int64x2_t)v7, 0x20uLL), v14), 0x20uLL), v16);
        *uint64_t v5 = 0u;
        *((_OWORD *)v1 + 2) = 0u;
        *((_OWORD *)v1 + 3) = 0u;
        *((_OWORD *)v1 + 4) = 0u;
        v1[80] = 1;
        return;
      case 2:
        uint64_t v1 = (char *)*((void *)v1 + 4);
        uint64_t v8 = *(_OWORD **)(*(void *)&v9.f64[0] + 16);
        if (!v8) {
          goto LABEL_11;
        }
        LOBYTE(v80.f64[1]) = LOBYTE(v9.f64[1]);
        float64x2_t v82 = v7;
        float64x2_t v83 = v6;
        Swift::Double v84 = by;
        float v17 = by;
        *(float *)&float64_t v79 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_110;
        }
        goto LABEL_8;
      case 3:
        uint64_t v1 = (char *)*((void *)v1 + 2);
        uint64_t v8 = *(_OWORD **)(*(void *)&v6.f64[0] + 16);
        if (!v8) {
          goto LABEL_18;
        }
        float64x2_t v80 = v9;
        float64x2_t v82 = v7;
        float64x2_t v83 = v6;
        Swift::Double v84 = by;
        float v21 = by;
        *(float *)&float64_t v79 = v21;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v1 = (char *)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
        }
        char v22 = 0;
        unint64_t v23 = *((void *)v1 + 2);
        uint64_t v24 = 32;
        LOBYTE(v6.f64[1]) = LOBYTE(v83.f64[1]);
        double v2 = v84;
        float64x2_t v9 = v80;
        float64x2_t v7 = v82;
        while ((unint64_t)v22 < v23)
        {
          char v22 = (_OWORD *)((char *)v22 + 1);
          *(float32x4_t *)&v1[v24] = vmulq_n_f32(*(float32x4_t *)&v1[v24], *(float *)&v79);
          v24 += 48;
          if (v8 == v22)
          {
LABEL_18:
            *(float64x2_t *)uint64_t v3 = vmulq_n_f64(v7, v2);
            *((void *)v3 + 2) = v1;
            *((void *)v3 + 3) = LOBYTE(v6.f64[1]);
            *((float64x2_t *)v3 + 2) = vmulq_n_f64(v9, v2);
            **(_OWORD **)&float64_t v10 = 0u;
            *(_OWORD *)(*(void *)&v10 + 16) = 0u;
            v3[80] = 3;
            return;
          }
        }
LABEL_104:
        __break(1u);
        goto LABEL_105;
      case 4:
        uint64_t v1 = (char *)*((void *)v1 + 2);
        uint64_t v8 = *(_OWORD **)(*(void *)&v6.f64[0] + 16);
        if (!v8) {
          goto LABEL_25;
        }
        float64x2_t v80 = v9;
        float64x2_t v82 = v7;
        float64x2_t v83 = v6;
        Swift::Double v84 = by;
        float v25 = by;
        *(float *)&float64_t v79 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v1 = (char *)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
        }
        double v26 = 0;
        unint64_t v27 = *((void *)v1 + 2);
        uint64_t v28 = 32;
        LOBYTE(v6.f64[1]) = LOBYTE(v83.f64[1]);
        double v2 = v84;
        float64x2_t v9 = v80;
        float64x2_t v7 = v82;
        while ((unint64_t)v26 < v27)
        {
          double v26 = (_OWORD *)((char *)v26 + 1);
          *(float32x4_t *)&v1[v28] = vmulq_n_f32(*(float32x4_t *)&v1[v28], *(float *)&v79);
          v28 += 48;
          if (v8 == v26)
          {
LABEL_25:
            *(float64x2_t *)uint64_t v3 = vmulq_n_f64(v7, v2);
            *((void *)v3 + 2) = v1;
            *((void *)v3 + 3) = LOBYTE(v6.f64[1]);
            *((float64x2_t *)v3 + 2) = vmulq_n_f64(v9, v2);
            **(_OWORD **)&float64_t v10 = 0u;
            *(_OWORD *)(*(void *)&v10 + 16) = 0u;
            v3[80] = 4;
            return;
          }
        }
LABEL_105:
        __break(1u);
        goto LABEL_106;
      case 5:
        uint64_t v1 = (char *)*((void *)v1 + 2);
        uint64_t v8 = *(_OWORD **)(*(void *)&v6.f64[0] + 16);
        if (!v8) {
          goto LABEL_32;
        }
        float64x2_t v80 = v9;
        float64x2_t v82 = v7;
        float64x2_t v83 = v6;
        Swift::Double v84 = by;
        float v29 = by;
        *(float *)&float64_t v79 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v1 = (char *)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
        }
        uint64_t v30 = 0;
        unint64_t v31 = *((void *)v1 + 2);
        uint64_t v32 = 32;
        LOBYTE(v6.f64[1]) = LOBYTE(v83.f64[1]);
        double v2 = v84;
        float64x2_t v9 = v80;
        float64x2_t v7 = v82;
        while ((unint64_t)v30 < v31)
        {
          uint64_t v30 = (_OWORD *)((char *)v30 + 1);
          *(float32x4_t *)&v1[v32] = vmulq_n_f32(*(float32x4_t *)&v1[v32], *(float *)&v79);
          v32 += 48;
          if (v8 == v30)
          {
LABEL_32:
            *(float64x2_t *)uint64_t v3 = vmulq_n_f64(v7, v2);
            *((void *)v3 + 2) = v1;
            *((void *)v3 + 3) = LOBYTE(v6.f64[1]);
            *((float64x2_t *)v3 + 2) = vmulq_n_f64(v9, v2);
            **(_OWORD **)&float64_t v10 = 0u;
            *(_OWORD *)(*(void *)&v10 + 16) = 0u;
            v3[80] = 5;
            return;
          }
        }
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
        goto LABEL_108;
      case 6:
        uint64_t v1 = *(char **)v1;
        float64_t v10 = *(double *)(*(void *)&v7.f64[0] + 16);
        float64x2_t v83 = v6;
        Swift::Double v84 = by;
        if (v10 == 0.0) {
          goto LABEL_69;
        }
        float64x2_t v82 = v7;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
        }
        double v2 = v84;
        float v33 = v84;
        unint64_t v34 = *((void *)v1 + 2);
        unint64_t v35 = *(void *)&v10 - 1;
        if (v34 < *(void *)&v10 - 1) {
          unint64_t v35 = *((void *)v1 + 2);
        }
        if (v35 > 7)
        {
          unint64_t v55 = v35 + 1;
          uint64_t v56 = v55 & 7;
          if ((v55 & 7) == 0) {
            uint64_t v56 = 8;
          }
          unint64_t v36 = v55 - v56;
          unint64_t v57 = (float32x4_t *)(v1 + 48);
          unint64_t v58 = v36;
          do
          {
            float32x4_t v59 = vmulq_n_f32(*v57, v33);
            v57[-1] = vmulq_n_f32(v57[-1], v33);
            *unint64_t v57 = v59;
            v57 += 2;
            v58 -= 8;
          }
          while (v58);
        }
        else
        {
          unint64_t v36 = 0;
        }
        v7.f64[1] = v82.f64[1];
        break;
      case 7:
        float64_t v10 = *(double *)v1;
        uint64_t v37 = *(void *)(*(void *)&v7.f64[0] + 16);
        if (!v37)
        {
LABEL_61:
          *(float64_t *)uint64_t v3 = v10;
          *(_OWORD *)long long v4 = 0u;
          *((_OWORD *)v4 + 1) = 0u;
          *((_OWORD *)v4 + 2) = 0u;
          *((_OWORD *)v4 + 3) = 0u;
          *((void *)v4 + 8) = 0;
          v3[80] = 7;
          return;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          float64_t v10 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()(*(void **)&v10));
        }
        unint64_t v39 = 0;
        *(void *)&float64_t v40 = *(void *)&v10 + 32;
        *(float *)&Swift::Double v38 = by;
        uint64_t v81 = v1 + 8;
        uint64_t v78 = v37;
        float64_t v79 = v10;
        *(void *)&v82.f64[0] = *(void *)&v10 + 32;
        Swift::Double v84 = v38;
        while (2)
        {
          if (v39 < *(void *)(*(void *)&v10 + 16))
          {
            unint64_t v42 = v39 + 1;
            uint64_t v43 = (float32x4_t *)(*(void *)&v40 + 24 * v39);
            float32x4_t v44 = *v43;
            uint64_t v8 = (_OWORD *)v43[1].u8[0];
            switch(v43[1].i8[0])
            {
              case 1:
                unsigned long long v41 = COERCE_UNSIGNED_INT(*(float *)&v38 * v44.f32[0]) | (unsigned __int128)((unint64_t)COERCE_UNSIGNED_INT(*(float *)&v38 * v44.f32[1]) << 32);
                goto LABEL_45;
              case 2:
                uint64_t v45 = COERCE_UNSIGNED_INT(vmuls_lane_f32(*(float *)&v38, v44, 2));
                *(void *)&unsigned long long v41 = COERCE_UNSIGNED_INT(*(float *)&v38 * v44.f32[0]) | ((unint64_t)COERCE_UNSIGNED_INT(*(float *)&v38 * v44.f32[1]) << 32);
                *((void *)&v41 + 1) = v45;
                goto LABEL_45;
              case 3:
                float32x2_t v46 = vmul_n_f32((float32x2_t)vmovn_s64((int64x2_t)v44), *(float *)&v38);
                v47.i64[0] = v46.u32[0];
                v47.i64[1] = v46.u32[1];
                unsigned long long v41 = (unsigned __int128)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_n_f32((float32x2_t)vshrn_n_s64((int64x2_t)v44, 0x20uLL), *(float *)&v38), 0x20uLL), v47);
                goto LABEL_45;
              case 4:
                uint64_t v48 = v43->i64[0];
                int64_t v49 = *(void *)(v44.i64[0] + 16);
                if (v49)
                {
                  *(void *)&v83.f64[0] = v43->i64[1];
                  uint64_t v86 = MEMORY[0x263F8EE78];
                  swift_bridgeObjectRetain();
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49, 0);
                  uint64_t v1 = (char *)v86;
                  float32x2_t v50 = (float *)(v48 + 32);
                  unint64_t v51 = *(void *)(v86 + 16);
                  float v52 = *(float *)&v84;
                  do
                  {
                    float v53 = *v50;
                    unint64_t v54 = *(void *)(v86 + 24);
                    if (v51 >= v54 >> 1)
                    {
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v51 + 1, 1);
                      float v52 = *(float *)&v84;
                    }
                    *(void *)(v86 + 16) = v51 + 1;
                    *(float *)(v86 + 4 * v51 + 32) = v53 * v52;
                    ++v50;
                    ++v51;
                    --v49;
                  }
                  while (v49);
                  outlined consume of ShaderVectorData.Element(v48, *(uint64_t *)&v83.f64[0], 4);
                  outlined consume of ShaderVectorData.Element(v48, *(uint64_t *)&v83.f64[0], 4);
                  long long v4 = v81;
                  uint64_t v37 = v78;
                  float64_t v10 = v79;
                }
                else
                {
                  outlined consume of ShaderVectorData.Element(v43->i64[0], v44.i64[1], 4);
                  uint64_t v1 = (char *)MEMORY[0x263F8EE78];
                }
                unsigned long long v41 = (unint64_t)v1;
                float64_t v40 = v82.f64[0];
                LODWORD(v38) = LODWORD(v84);
                goto LABEL_45;
              case 5:
                goto LABEL_46;
              default:
                DWORD1(v41) = 0;
                *((void *)&v41 + 1) = 0;
                *(float *)&unsigned long long v41 = *(float *)&v38 * v44.f32[0];
LABEL_45:
                *uint64_t v43 = (float32x4_t)v41;
                v43[1].i8[0] = (char)v8;
LABEL_46:
                unint64_t v39 = v42;
                if (v42 != v37) {
                  continue;
                }
                goto LABEL_61;
            }
          }
          goto LABEL_107;
        }
      case 8:
        float64x2_t v87 = *(float64x2_t *)v1;
        long long v88 = *((_OWORD *)v1 + 1);
        long long v89 = *((_OWORD *)v1 + 2);
        long long v90 = *((_OWORD *)v1 + 3);
        long long v91 = *((_OWORD *)v1 + 4);
        _ColorMatrix.scale(by:)(by);
        *(float64x2_t *)uint64_t v1 = v87;
        *((_OWORD *)v1 + 1) = v88;
        *((_OWORD *)v1 + 2) = v89;
        *((_OWORD *)v1 + 3) = v90;
        *((_OWORD *)v1 + 4) = v91;
        v1[80] = 8;
        return;
      case 9:
        return;
      default:
        float v11 = by;
        float32x2_t v12 = vmul_n_f32((float32x2_t)vmovn_s64((int64x2_t)v7), v11);
        v13.i64[0] = v12.u32[0];
        v13.i64[1] = v12.u32[1];
        *(int8x16_t *)uint64_t v1 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_n_f32((float32x2_t)vshrn_n_s64((int64x2_t)v7, 0x20uLL), v11), 0x20uLL), v13);
        *uint64_t v5 = 0u;
        *((_OWORD *)v1 + 2) = 0u;
        *((_OWORD *)v1 + 3) = 0u;
        *((_OWORD *)v1 + 4) = 0u;
        v1[80] = 0;
        return;
    }
    do
    {
      if (v36 >= v34)
      {
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        uint64_t v1 = (char *)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
LABEL_8:
        long long v18 = 0;
        unint64_t v19 = *((void *)v1 + 2);
        uint64_t v20 = 32;
        float64x2_t v6 = v83;
        double v2 = v84;
        LOBYTE(v9.f64[1]) = LOBYTE(v80.f64[1]);
        float64x2_t v7 = v82;
        do
        {
          if ((unint64_t)v18 >= v19)
          {
            __break(1u);
            goto LABEL_104;
          }
          long long v18 = (_OWORD *)((char *)v18 + 1);
          *(float32x4_t *)&v1[v20] = vmulq_n_f32(*(float32x4_t *)&v1[v20], *(float *)&v79);
          v20 += 48;
        }
        while (v8 != v18);
LABEL_11:
        *(float64x2_t *)uint64_t v3 = vmulq_n_f64(v7, v2);
        *((float64x2_t *)v3 + 1) = vmulq_n_f64(v6, v2);
        *((void *)v3 + 4) = v1;
        *((void *)v3 + 5) = LOBYTE(v9.f64[1]);
        **(_OWORD **)&float64_t v10 = 0u;
        *(_OWORD *)(*(void *)&v10 + 16) = 0u;
        v3[80] = 2;
        return;
      }
      *(float *)&v1[4 * v36 + 32] = *(float *)&v1[4 * v36 + 32] * v33;
      ++v36;
    }
    while (*(void *)&v10 != v36);
LABEL_69:
    float64_t v10 = v7.f64[1];
    uint64_t v60 = *(void *)(*(void *)&v7.f64[1] + 16);
    if (v60)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        float64_t v10 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()(*(void **)&v10));
      }
      int64x2_t v61 = (int64x2_t)v83;
      float v62 = v84;
      unint64_t v63 = *(void *)(*(void *)&v10 + 16);
      unint64_t v64 = v60 - 1;
      if (v63 >= v60 - 1) {
        unint64_t v65 = v60 - 1;
      }
      else {
        unint64_t v65 = *(void *)(*(void *)&v10 + 16);
      }
      if (v65 <= 0xB) {
        goto LABEL_97;
      }
      int v66 = (float *)(*(void *)&v10 + 32);
      if (v63 < v64) {
        unint64_t v64 = *(void *)(*(void *)&v10 + 16);
      }
      BOOL v67 = &v66[4 * v64] >= v66 && *(void *)&v10 + 36 + 16 * v64 >= *(void *)&v10 + 36;
      BOOL v68 = v67 && *(void *)&v10 + 44 + 16 * v64 >= *(void *)&v10 + 44;
      BOOL v69 = v68 && *(void *)&v10 + 40 + 16 * v64 >= *(void *)&v10 + 40;
      unint64_t v70 = v64 >> 60;
      if (v69 && v70 == 0)
      {
        unint64_t v72 = v65 + 1;
        uint64_t v73 = v72 & 3;
        if ((v72 & 3) == 0) {
          uint64_t v73 = 4;
        }
        unint64_t v74 = v72 - v73;
        unint64_t v75 = v74;
        do
        {
          float32x4x4_t v92 = vld4q_f32(v66);
          v93.val[0] = vmulq_n_f32(v92.val[0], v62);
          v93.val[1] = vmulq_n_f32(v92.val[1], v62);
          v93.val[2] = vmulq_n_f32(v92.val[2], v62);
          v93.val[3] = vmulq_n_f32(v92.val[3], v62);
          vst4q_f32(v66, v93);
          v66 += 16;
          v75 -= 4;
        }
        while (v75);
      }
      else
      {
LABEL_97:
        unint64_t v74 = 0;
      }
      while (v74 < v63)
      {
        *(float32x4_t *)(*(void *)&v10 + 16 * v74 + 32) = vmulq_n_f32(*(float32x4_t *)(*(void *)&v10 + 16 * v74 + 32), v62);
        if (v60 == ++v74) {
          goto LABEL_102;
        }
      }
      goto LABEL_109;
    }
    float v62 = v2;
    int64x2_t v61 = (int64x2_t)v83;
LABEL_102:
    float32x2_t v76 = vmul_n_f32((float32x2_t)vmovn_s64(v61), v62);
    *(void *)uint64_t v3 = v1;
    *((float64_t *)v3 + 1) = v10;
    v77.i64[0] = v76.u32[0];
    v77.i64[1] = v76.u32[1];
    *((int8x16_t *)v3 + 1) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_n_f32((float32x2_t)vshrn_n_s64(v61, 0x20uLL), v62), 0x20uLL), v77);
    *uint64_t v8 = 0u;
    v8[1] = 0u;
    v8[2] = 0u;
    v3[80] = 6;
  }
}

void _ShapeStyle_Pack.Fill.AnimatableData.magnitudeSquared.getter()
{
  double v2 = *(float32x4_t **)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 32);
  double v5 = 0.0;
  switch(*(unsigned char *)(v0 + 80))
  {
    case 2:
      uint64_t v6 = *(void *)(v4 + 16);
      if (v6)
      {
        float64x2_t v7 = (float *)(v4 + 44);
        double v8 = 0.0;
        do
        {
          double v8 = v8
             + (float)((float)((float)((float)(*(v7 - 3) * *(v7 - 3)) + (float)(*(v7 - 2) * *(v7 - 2)))
                             + (float)(*(v7 - 1) * *(v7 - 1)))
                     + (float)(*v7 * *v7));
          v7 += 12;
          --v6;
        }
        while (v6);
      }
      return;
    case 3:
      uint64_t v9 = *(void *)(v3 + 16);
      if (v9)
      {
        float64_t v10 = (float *)(v3 + 44);
        double v11 = 0.0;
        do
        {
          double v11 = v11
              + (float)((float)((float)((float)(*(v10 - 3) * *(v10 - 3)) + (float)(*(v10 - 2) * *(v10 - 2)))
                              + (float)(*(v10 - 1) * *(v10 - 1)))
                      + (float)(*v10 * *v10));
          v10 += 12;
          --v9;
        }
        while (v9);
      }
      return;
    case 4:
      uint64_t v12 = *(void *)(v3 + 16);
      if (v12)
      {
        int8x16_t v13 = (float *)(v3 + 44);
        double v14 = 0.0;
        do
        {
          double v14 = v14
              + (float)((float)((float)((float)(*(v13 - 3) * *(v13 - 3)) + (float)(*(v13 - 2) * *(v13 - 2)))
                              + (float)(*(v13 - 1) * *(v13 - 1)))
                      + (float)(*v13 * *v13));
          v13 += 12;
          --v12;
        }
        while (v12);
      }
      return;
    case 5:
      uint64_t v15 = *(void *)(v3 + 16);
      if (v15)
      {
        int8x16_t v16 = (float *)(v3 + 44);
        double v17 = 0.0;
        do
        {
          double v17 = v17
              + (float)((float)((float)((float)(*(v16 - 3) * *(v16 - 3)) + (float)(*(v16 - 2) * *(v16 - 2)))
                              + (float)(*(v16 - 1) * *(v16 - 1)))
                      + (float)(*v16 * *v16));
          v16 += 12;
          --v15;
        }
        while (v15);
      }
      return;
    case 6:
      unint64_t v18 = v2[1].u64[0];
      if (!v18) {
        goto LABEL_30;
      }
      if (v18 < 8)
      {
        uint64_t v19 = 0;
LABEL_28:
        unint64_t v28 = v18 - v19;
        float v29 = &v2[2].f32[v19];
        do
        {
          float v30 = *v29++;
          double v5 = v5 + (float)(v30 * v30);
          --v28;
        }
        while (v28);
        goto LABEL_30;
      }
      uint64_t v19 = v18 & 0x7FFFFFFFFFFFFFF8;
      uint64_t v20 = v2 + 3;
      uint64_t v21 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v22 = vmulq_f32(v20[-1], v20[-1]);
        float32x4_t v23 = vmulq_f32(*v20, *v20);
        float64x2_t v24 = vcvt_hight_f64_f32(v22);
        float64x2_t v25 = vcvtq_f64_f32(*(float32x2_t *)v22.f32);
        float64x2_t v26 = vcvt_hight_f64_f32(v23);
        float64x2_t v27 = vcvtq_f64_f32(*(float32x2_t *)v23.f32);
        double v5 = v5 + v25.f64[0] + v25.f64[1] + v24.f64[0] + v24.f64[1] + v27.f64[0] + v27.f64[1] + v26.f64[0] + v26.f64[1];
        v20 += 2;
        v21 -= 8;
      }
      while (v21);
      if (v18 != v19) {
        goto LABEL_28;
      }
LABEL_30:
      unint64_t v31 = *(void *)(v1 + 16);
      if (!v31) {
        return;
      }
      if (v31 < 8)
      {
        uint64_t v32 = 0;
        double v33 = 0.0;
LABEL_36:
        unint64_t v47 = v31 - v32;
        uint64_t v48 = (float32x2_t *)(v1 + 16 * v32 + 40);
        do
        {
          double v49 = (float)(v48[-1].f32[0] * v48[-1].f32[0]);
          double v50 = (float)(v48[-1].f32[1] * v48[-1].f32[1]);
          float32x2_t v51 = *v48;
          v48 += 2;
          double v33 = v33 + vaddvq_f64(vcvtq_f64_f32(vmul_f32(v51, v51))) + v50 + v49;
          --v47;
        }
        while (v47);
        return;
      }
      uint64_t v32 = v31 & 0x7FFFFFFFFFFFFFF8;
      unint64_t v34 = (const float *)(v1 + 96);
      double v33 = 0.0;
      uint64_t v35 = v31 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        unint64_t v36 = v34 - 16;
        float32x4x4_t v52 = vld4q_f32(v36);
        float32x4x4_t v53 = vld4q_f32(v34);
        float32x4_t v37 = vmulq_f32(v52.val[0], v52.val[0]);
        float32x4_t v38 = vmulq_f32(v53.val[0], v53.val[0]);
        float64x2_t v39 = vcvtq_f64_f32(*(float32x2_t *)v37.f32);
        float64x2_t v40 = vcvtq_f64_f32(*(float32x2_t *)v38.f32);
        float32x4_t v41 = vmulq_f32(v52.val[1], v52.val[1]);
        float32x4_t v42 = vmulq_f32(v53.val[1], v53.val[1]);
        float32x4_t v43 = vmulq_f32(v52.val[2], v52.val[2]);
        float32x4_t v44 = vmulq_f32(v53.val[2], v53.val[2]);
        v52.val[0] = vmulq_f32(v52.val[3], v52.val[3]);
        v52.val[1] = vmulq_f32(v53.val[3], v53.val[3]);
        float64x2_t v45 = vaddq_f64(vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v43), vcvt_hight_f64_f32(v52.val[0])), vcvt_hight_f64_f32(v41)), vcvt_hight_f64_f32(v37));
        v52.val[2] = (float32x4_t)vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v43.f32), vcvtq_f64_f32(*(float32x2_t *)v52.val[0].f32)), vcvtq_f64_f32(*(float32x2_t *)v41.f32)), v39);
        float64x2_t v46 = vaddq_f64(vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v44), vcvt_hight_f64_f32(v52.val[1])), vcvt_hight_f64_f32(v42)), vcvt_hight_f64_f32(v38));
        v52.val[3] = (float32x4_t)vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v44.f32), vcvtq_f64_f32(*(float32x2_t *)v52.val[1].f32)), vcvtq_f64_f32(*(float32x2_t *)v42.f32)), v40);
        double v33 = v33
            + *(double *)v52.val[2].i64
            + *(double *)&v52.val[2].i64[1]
            + v45.f64[0]
            + v45.f64[1]
            + *(double *)v52.val[3].i64
            + *(double *)&v52.val[3].i64[1]
            + v46.f64[0]
            + v46.f64[1];
        v34 += 32;
        v35 -= 8;
      }
      while (v35);
      if (v31 != v32) {
        goto LABEL_36;
      }
      return;
    case 7:
      ShaderVectorData.magnitudeSquared.getter();
      return;
    case 8:
      _ColorMatrix.magnitudeSquared.getter();
      return;
    default:
      return;
  }
}

double protocol witness for static AdditiveArithmetic.zero.getter in conformance _ShapeStyle_Pack.Fill.AnimatableData@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 80) = 9;
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.Fill.AnimatableData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.Fill.AnimatableData(a1, a2, (uint64_t (*)(uint64_t, _OWORD *))specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:), a3);
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance _ShapeStyle_Pack.Fill.AnimatableData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.Fill.AnimatableData(a1, a2, (uint64_t (*)(uint64_t, _OWORD *))specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:), a3);
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.Fill.AnimatableData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, _OWORD *)@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v15 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  char v17 = *(unsigned char *)(a2 + 80);
  *(void *)a4 = *(void *)a1;
  *(void *)(a4 + 8) = v7;
  *(void *)(a4 + 16) = v8;
  *(void *)(a4 + 24) = v9;
  *(void *)(a4 + 32) = v10;
  *(void *)(a4 + 40) = v11;
  *(void *)(a4 + 48) = v12;
  *(void *)(a4 + 56) = v13;
  *(void *)(a4 + 64) = v14;
  *(void *)(a4 + 72) = v15;
  *(unsigned char *)(a4 + 80) = v16;
  long long v18 = *(_OWORD *)(a2 + 16);
  v21[0] = *(_OWORD *)a2;
  v21[1] = v18;
  long long v19 = *(_OWORD *)(a2 + 48);
  _DWORD v21[2] = *(_OWORD *)(a2 + 32);
  v21[3] = v19;
  v21[4] = *(_OWORD *)(a2 + 64);
  char v22 = v17;
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  return a3(a4, v21);
}

double key path getter for _ShapeStyle_Pack.Fill.animatableData : _ShapeStyle_Pack.Fill@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 16);
  double v5 = *(void **)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  char v12 = *(unsigned char *)(a1 + 80);
  v18.i64[0] = *(void *)a1;
  v18.i64[1] = v3;
  long long v19 = v4;
  uint64_t v20 = v5;
  uint64_t v21 = v6;
  uint64_t v22 = v7;
  uint64_t v23 = v8;
  uint64_t v24 = v9;
  uint64_t v25 = v10;
  uint64_t v26 = v11;
  char v27 = v12;
  outlined copy of _ShapeStyle_Pack.Fill((id)v18.i64[0], v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
  _ShapeStyle_Pack.Fill.AnimatableData.init(_:)(&v18, (uint64_t)v28);
  char v13 = v32;
  long long v14 = v28[1];
  *(_OWORD *)a2 = v28[0];
  *(_OWORD *)(a2 + 16) = v14;
  double result = *(double *)&v29;
  long long v16 = v30;
  long long v17 = v31;
  *(_OWORD *)(a2 + 32) = v29;
  *(_OWORD *)(a2 + 48) = v16;
  *(_OWORD *)(a2 + 64) = v17;
  *(unsigned char *)(a2 + 80) = v13;
  return result;
}

uint64_t key path setter for _ShapeStyle_Pack.Fill.animatableData : _ShapeStyle_Pack.Fill(uint64_t a1, uint64_t a2)
{
  return _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(a2);
}

void (*_ShapeStyle_Pack.Fill.animatableData.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(void *)(v1 + 8);
  double v5 = *(void **)(v1 + 16);
  uint64_t v6 = *(void **)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + 32);
  uint64_t v8 = *(void *)(v1 + 40);
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v10 = *(void *)(v1 + 56);
  uint64_t v11 = *(void *)(v1 + 64);
  uint64_t v12 = *(void *)(v1 + 72);
  char v13 = *(unsigned char *)(v1 + 80);
  v15.i64[0] = *(void *)v1;
  v15.i64[1] = v4;
  long long v16 = v5;
  long long v17 = v6;
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  uint64_t v20 = v9;
  uint64_t v21 = v10;
  uint64_t v22 = v11;
  uint64_t v23 = v12;
  char v24 = v13;
  outlined copy of _ShapeStyle_Pack.Fill((id)v15.i64[0], v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
  _ShapeStyle_Pack.Fill.AnimatableData.init(_:)(&v15, (uint64_t)v3);
  return _ShapeStyle_Pack.Fill.animatableData.modify;
}

void _ShapeStyle_Pack.Fill.animatableData.modify(uint64_t **a1, char a2)
{
  double v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v6 = (*a1)[2];
  uint64_t v5 = (*a1)[3];
  uint64_t v8 = (*a1)[4];
  uint64_t v7 = (*a1)[5];
  uint64_t v10 = (*a1)[6];
  uint64_t v9 = (*a1)[7];
  uint64_t v11 = (*a1)[8];
  uint64_t v12 = (*a1)[9];
  char v13 = *((unsigned char *)*a1 + 80);
  uint64_t v14 = (*a1)[11];
  if (a2)
  {
    _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v14);
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(*v2, v2[1], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], *((unsigned char *)v2 + 80));
  }
  else
  {
    uint64_t v16 = v10;
    uint64_t v17 = v9;
    uint64_t v15 = v7;
    _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v14);
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v4, v3, v6, v5, v8, v15, v16, v17, v11, v12, v13);
  }

  free(v2);
}

void protocol witness for Animatable.animatableData.getter in conformance _ShapeStyle_Pack.Fill(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void **)(v1 + 16);
  uint64_t v5 = *(void **)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v10 = *(void *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  char v12 = *(unsigned char *)(v1 + 80);
  v13.i64[0] = *(void *)v1;
  v13.i64[1] = v3;
  uint64_t v14 = v4;
  uint64_t v15 = v5;
  uint64_t v16 = v6;
  uint64_t v17 = v7;
  uint64_t v18 = v8;
  uint64_t v19 = v9;
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  char v22 = v12;
  outlined copy of _ShapeStyle_Pack.Fill((id)v13.i64[0], v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
  _ShapeStyle_Pack.Fill.AnimatableData.init(_:)(&v13, a1);
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance _ShapeStyle_Pack.Fill(uint64_t a1)
{
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  char v10 = *(unsigned char *)(a1 + 80);
  _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v1);
  return outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v13, v12, v2, v3, v4, v5, v6, v7, v9, v8, v10);
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _ShapeStyle_Pack.Fill(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ShapeStyle_Pack.Fill.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void _ShapeStyle_Pack.Effect.animatableData.getter(uint64_t a1@<X8>)
{
  char v3 = *(unsigned char *)(v1 + 45);
  int v4 = *(_DWORD *)(v1 + 48);
  if (v3)
  {
    uint64_t v5 = 0;
    int8x16_t v6 = 0uLL;
    int8x16_t v7 = 0uLL;
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 32);
    int64x2_t v9 = *(int64x2_t *)v1;
    int8x16_t v8 = *(int8x16_t *)(v1 + 16);
    int8x16_t v18 = v8;
    if (one-time initialization token for legacyInterpolation != -1)
    {
      int64x2_t v17 = *(int64x2_t *)v1;
      swift_once();
      int64x2_t v9 = v17;
    }
    *(int32x2_t *)v8.i8 = vmovn_s64(v9);
    int8x16_t v16 = v8;
    int32x2_t v15 = vshrn_n_s64(v9, 0x20uLL);
    swift_beginAccess();
    if (static Color.Resolved.legacyInterpolation)
    {
      float32x2_t v12 = (float32x2_t)v15;
      float32x2_t v11 = *(float32x2_t *)v16.i8;
    }
    else
    {
      ResolvedGradient.ColorSpace.convertIn(_:)(v19, v16, *(float *)v15.i32, v16.u32[1], *(float *)&v15.i32[1], v10);
      float32x2_t v12 = (float32x2_t)__PAIR64__(LODWORD(v19[3]), LODWORD(v19[1]));
      float32x2_t v11 = (float32x2_t)__PAIR64__(LODWORD(v19[2]), LODWORD(v19[0]));
    }
    float32x2_t v13 = vmul_f32(v11, (float32x2_t)0x4300000043000000);
    v14.i64[0] = v13.u32[0];
    v14.i64[1] = v13.u32[1];
    int8x16_t v6 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_f32(v12, (float32x2_t)0x4300000043000000), 0x20uLL), v14);
    int8x16_t v7 = v18;
  }
  *(_DWORD *)a1 = v4;
  *(int8x16_t *)(a1 + 8) = v6;
  *(int8x16_t *)(a1 + 24) = v7;
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = v3;
}

double key path getter for _ShapeStyle_Pack.Effect.animatableData : _ShapeStyle_Pack.Effect@<D0>(uint64_t a1@<X8>)
{
  _ShapeStyle_Pack.Effect.animatableData.getter((uint64_t)&v5);
  uint64_t v2 = v8;
  char v3 = v9;
  *(_DWORD *)a1 = v5;
  *(_OWORD *)(a1 + 8) = v6;
  double result = *(double *)&v7;
  *(_OWORD *)(a1 + 24) = v7;
  *(void *)(a1 + 40) = v2;
  *(unsigned char *)(a1 + 48) = v3;
  return result;
}

void key path setter for _ShapeStyle_Pack.Effect.animatableData : _ShapeStyle_Pack.Effect(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  long long v5 = *(_OWORD *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 40);
  char v7 = *(unsigned char *)(a1 + 48);
  *((_DWORD *)a2 + 12) = *(_DWORD *)a1;
  char v8 = *((unsigned char *)a2 + 45) | v7;
  if (v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  else
  {
    unsigned __int8 v11 = *((unsigned char *)a2 + 44);
    unsigned int v12 = *((_DWORD *)a2 + 10);
    uint64_t v14 = *a2;
    uint64_t v13 = a2[1];
    unint64_t v15 = HIDWORD(*a2);
    uint64_t v16 = a2[4];
    v22[0] = v4;
    v22[1] = v3;
    long long v23 = v5;
    uint64_t v24 = v6;
    *(void *)&long long v17 = __PAIR64__(v15, v14);
    *((void *)&v17 + 1) = v13;
    long long v18 = *((_OWORD *)a2 + 1);
    uint64_t v19 = v16;
    unsigned int v20 = v12;
    unsigned __int8 v21 = v11;
    ResolvedShadowStyle.animatableData.setter((uint64_t)v22);
    uint64_t v9 = v19;
    unint64_t v10 = v20 | ((unint64_t)v21 << 32);
    *(_OWORD *)a2 = v17;
    *((_OWORD *)a2 + 1) = v18;
  }
  a2[4] = v9;
  *((_DWORD *)a2 + 10) = v10;
  *((unsigned char *)a2 + 44) = BYTE4(v10);
  *((unsigned char *)a2 + 45) = v8 & 1;
}

void _ShapeStyle_Pack.Effect.animatableData.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  int64x2_t v3 = *(int64x2_t *)(a1 + 8);
  long long v4 = *(_OWORD *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 40);
  char v6 = *(unsigned char *)(a1 + 48);
  *(_DWORD *)(v1 + 48) = *(_DWORD *)a1;
  int8x16_t v7 = 0uLL;
  if (*(unsigned char *)(v1 + 45) & 1) != 0 || (v6)
  {
    uint64_t v5 = 0;
    uint64_t v8 = 0;
    char v9 = 1;
    long long v10 = 0uLL;
  }
  else
  {
    long long v25 = v4;
    uint64_t v11 = *(unsigned __int8 *)(v1 + 44);
    uint64_t v12 = *(unsigned int *)(v2 + 40);
    float32x2_t v13 = (float32x2_t)vmovn_s64(v3);
    float32x2_t v14 = (float32x2_t)vshrn_n_s64(v3, 0x20uLL);
    if (one-time initialization token for legacyInterpolation != -1)
    {
      float32x2_t v21 = v14;
      float32x2_t v23 = v13;
      swift_once();
      float32x2_t v14 = v21;
      float32x2_t v13 = v23;
    }
    uint64_t v8 = v12 | (v11 << 32);
    float32x2_t v22 = vmul_f32(v13, (float32x2_t)0x3C0000003C000000);
    float32x2_t v24 = vmul_f32(v14, (float32x2_t)0x3C0000003C000000);
    swift_beginAccess();
    if (static Color.Resolved.legacyInterpolation)
    {
      float32x2_t v15 = v22;
      int32x2_t v16 = (int32x2_t)v24;
    }
    else
    {
      char v27 = 2;
      long long v17 = v26;
      v28.val[0] = v22;
      v28.val[1] = v24;
      vst2_f32(v17, v28);
      v15.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)(v26);
      v16.i32[1] = v18;
      v15.i32[1] = v19;
    }
    char v9 = 0;
    v20.i64[0] = v15.u32[0];
    v20.i64[1] = v15.u32[1];
    int8x16_t v7 = vorrq_s8((int8x16_t)vshll_n_s32(v16, 0x20uLL), v20);
    long long v10 = v25;
  }
  *(int8x16_t *)uint64_t v2 = v7;
  *(_OWORD *)(v2 + 16) = v10;
  *(void *)(v2 + 32) = v5;
  *(_DWORD *)(v2 + 40) = v8;
  *(unsigned char *)(v2 + 44) = BYTE4(v8);
  *(unsigned char *)(v2 + 45) = v9;
}

void _ShapeStyle_Pack.Effect.Kind.animatableData.getter(int8x16_t *a1@<X8>)
{
  char v3 = *(unsigned char *)(v1 + 45);
  if (v3)
  {
    uint64_t v4 = 0;
    int8x16_t v5 = 0uLL;
    int8x16_t v6 = 0uLL;
  }
  else
  {
    uint64_t v4 = *(void *)(v1 + 32);
    int64x2_t v8 = *(int64x2_t *)v1;
    int8x16_t v7 = *(int8x16_t *)(v1 + 16);
    int8x16_t v17 = v7;
    if (one-time initialization token for legacyInterpolation != -1)
    {
      int64x2_t v16 = *(int64x2_t *)v1;
      swift_once();
      int64x2_t v8 = v16;
    }
    *(int32x2_t *)v7.i8 = vmovn_s64(v8);
    int8x16_t v15 = v7;
    int32x2_t v14 = vshrn_n_s64(v8, 0x20uLL);
    swift_beginAccess();
    if (static Color.Resolved.legacyInterpolation)
    {
      float32x2_t v11 = (float32x2_t)v14;
      float32x2_t v10 = *(float32x2_t *)v15.i8;
    }
    else
    {
      ResolvedGradient.ColorSpace.convertIn(_:)(v18, v15, *(float *)v14.i32, v15.u32[1], *(float *)&v14.i32[1], v9);
      float32x2_t v11 = (float32x2_t)__PAIR64__(LODWORD(v18[3]), LODWORD(v18[1]));
      float32x2_t v10 = (float32x2_t)__PAIR64__(LODWORD(v18[2]), LODWORD(v18[0]));
    }
    float32x2_t v12 = vmul_f32(v10, (float32x2_t)0x4300000043000000);
    v13.i64[0] = v12.u32[0];
    v13.i64[1] = v12.u32[1];
    int8x16_t v5 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_f32(v11, (float32x2_t)0x4300000043000000), 0x20uLL), v13);
    int8x16_t v6 = v17;
  }
  *a1 = v5;
  a1[1] = v6;
  a1[2].i64[0] = v4;
  a1[2].i8[8] = v3;
}

void _ShapeStyle_Pack.Effect.Kind.animatableData.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  int8x16_t v3 = 0uLL;
  if (*(unsigned char *)(v1 + 45) & 1) != 0 || (*(unsigned char *)(a1 + 40))
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    char v6 = 1;
    long long v7 = 0uLL;
  }
  else
  {
    long long v22 = *(_OWORD *)(a1 + 16);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v8 = *(unsigned __int8 *)(v1 + 44);
    uint64_t v9 = *(unsigned int *)(v2 + 40);
    float32x2_t v10 = (float32x2_t)vmovn_s64(*(int64x2_t *)a1);
    float32x2_t v11 = (float32x2_t)vshrn_n_s64(*(int64x2_t *)a1, 0x20uLL);
    if (one-time initialization token for legacyInterpolation != -1)
    {
      float32x2_t v18 = v11;
      float32x2_t v20 = v10;
      swift_once();
      float32x2_t v11 = v18;
      float32x2_t v10 = v20;
    }
    uint64_t v5 = v9 | (v8 << 32);
    float32x2_t v19 = vmul_f32(v10, (float32x2_t)0x3C0000003C000000);
    float32x2_t v21 = vmul_f32(v11, (float32x2_t)0x3C0000003C000000);
    swift_beginAccess();
    if (static Color.Resolved.legacyInterpolation)
    {
      float32x2_t v12 = v19;
      int32x2_t v13 = (int32x2_t)v21;
    }
    else
    {
      char v24 = 2;
      int32x2_t v14 = v23;
      v25.val[0] = v19;
      v25.val[1] = v21;
      vst2_f32(v14, v25);
      v12.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)(v23);
      v13.i32[1] = v15;
      v12.i32[1] = v16;
    }
    char v6 = 0;
    v17.i64[0] = v12.u32[0];
    v17.i64[1] = v12.u32[1];
    int8x16_t v3 = vorrq_s8((int8x16_t)vshll_n_s32(v13, 0x20uLL), v17);
    long long v7 = v22;
  }
  *(int8x16_t *)uint64_t v2 = v3;
  *(_OWORD *)(v2 + 16) = v7;
  *(void *)(v2 + 32) = v4;
  *(_DWORD *)(v2 + 40) = v5;
  *(unsigned char *)(v2 + 44) = BYTE4(v5);
  *(unsigned char *)(v2 + 45) = v6;
}

void (*_ShapeStyle_Pack.Effect.animatableData.modify(void *a1))(_DWORD **a1, char a2)
{
  int8x16_t v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  _ShapeStyle_Pack.Effect.animatableData.getter((uint64_t)v3);
  return _ShapeStyle_Pack.Effect.animatableData.modify;
}

void _ShapeStyle_Pack.Effect.animatableData.modify(_DWORD **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((void *)*a1 + 13);
  uint64_t v5 = *((void *)*a1 + 1);
  uint64_t v4 = *((void *)*a1 + 2);
  uint64_t v6 = *((void *)*a1 + 3);
  uint64_t v7 = *((void *)*a1 + 4);
  uint64_t v8 = *((void *)*a1 + 5);
  char v9 = *((unsigned char *)*a1 + 48);
  *(_DWORD *)(v3 + 48) = **a1;
  char v10 = *(unsigned char *)(v3 + 45);
  uint64_t v11 = v2[13];
  if ((a2 & 1) == 0)
  {
    if ((v10 & 1) == 0 && (v9 & 1) == 0) {
      goto LABEL_8;
    }
LABEL_7:
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v14 = 0;
    char v15 = 1;
    goto LABEL_13;
  }
  if (v10 & 1) != 0 || (v9) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v16 = *(unsigned __int8 *)(v11 + 44);
  uint64_t v17 = *(unsigned int *)(v11 + 40);
  uint64_t v18 = v5;
  float v20 = *((float *)&v4 + 1);
  float v19 = *(float *)&v4;
  if (one-time initialization token for legacyInterpolation != -1)
  {
    uint64_t v28 = v4;
    swift_once();
    float v20 = *((float *)&v28 + 1);
    float v19 = *(float *)&v28;
  }
  uint64_t v14 = v17 | (v16 << 32);
  float v21 = *(float *)&v18 * 0.0078125;
  float v22 = *((float *)&v18 + 1) * 0.0078125;
  float v23 = v19 * 0.0078125;
  float v24 = v20 * 0.0078125;
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    v29[0] = *(float *)&v18 * 0.0078125;
    v29[1] = *((float *)&v18 + 1) * 0.0078125;
    v29[2] = v23;
    v29[3] = v24;
    float v21 = ResolvedGradient.ColorSpace.convertOut(_:)(v29);
    float v22 = v25;
    float v23 = v26;
    float v24 = v27;
  }
  char v15 = 0;
  unint64_t v12 = LODWORD(v21) | ((unint64_t)LODWORD(v22) << 32);
  unint64_t v13 = LODWORD(v23) | ((unint64_t)LODWORD(v24) << 32);
  uint64_t v11 = v2[13];
LABEL_13:
  *(void *)uint64_t v11 = v12;
  *(void *)(v11 + 8) = v13;
  *(void *)(v11 + 16) = v6;
  *(void *)(v11 + 24) = v7;
  *(void *)(v11 + 32) = v8;
  *(_DWORD *)(v11 + 40) = v14;
  *(unsigned char *)(v11 + 44) = BYTE4(v14);
  *(unsigned char *)(v11 + 45) = v15;

  free(v2);
}

void protocol witness for Animatable.animatableData.setter in conformance _ShapeStyle_Pack.Effect(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 40);
  char v6 = *(unsigned char *)(a1 + 48);
  *((_DWORD *)v1 + 12) = *(_DWORD *)a1;
  char v7 = *((unsigned char *)v1 + 45) | v6;
  if (v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    *(_OWORD *)uint64_t v1 = 0u;
    *((_OWORD *)v1 + 1) = 0u;
  }
  else
  {
    unsigned __int8 v10 = *((unsigned char *)v1 + 44);
    unsigned int v11 = *((_DWORD *)v1 + 10);
    uint64_t v13 = *v1;
    uint64_t v12 = v1[1];
    unint64_t v14 = HIDWORD(*v1);
    uint64_t v15 = v1[4];
    v21[0] = v3;
    v21[1] = v2;
    long long v22 = v4;
    uint64_t v23 = v5;
    *(void *)&long long v16 = __PAIR64__(v14, v13);
    *((void *)&v16 + 1) = v12;
    long long v17 = *((_OWORD *)v1 + 1);
    uint64_t v18 = v15;
    unsigned int v19 = v11;
    unsigned __int8 v20 = v10;
    ResolvedShadowStyle.animatableData.setter((uint64_t)v21);
    uint64_t v8 = v18;
    unint64_t v9 = v19 | ((unint64_t)v20 << 32);
    *(_OWORD *)uint64_t v1 = v16;
    *((_OWORD *)v1 + 1) = v17;
  }
  v1[4] = v8;
  *((_DWORD *)v1 + 10) = v9;
  *((unsigned char *)v1 + 44) = BYTE4(v9);
  *((unsigned char *)v1 + 45) = v7 & 1;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _ShapeStyle_Pack.Effect(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ShapeStyle_Pack.Effect.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void _ShapeStyle_Pack.Effect.Kind.AnimatableData.init(_:)(uint64_t a1@<X0>, int8x16_t *a2@<X8>)
{
  char v3 = *(unsigned char *)(a1 + 45);
  if (v3)
  {
    uint64_t v4 = 0;
    int8x16_t v5 = 0uLL;
    int8x16_t v6 = 0uLL;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int64x2_t v8 = *(int64x2_t *)a1;
    int8x16_t v7 = *(int8x16_t *)(a1 + 16);
    int8x16_t v17 = v7;
    if (one-time initialization token for legacyInterpolation != -1)
    {
      int64x2_t v16 = *(int64x2_t *)a1;
      swift_once();
      int64x2_t v8 = v16;
    }
    *(int32x2_t *)v7.i8 = vmovn_s64(v8);
    int8x16_t v15 = v7;
    int32x2_t v14 = vshrn_n_s64(v8, 0x20uLL);
    swift_beginAccess();
    if (static Color.Resolved.legacyInterpolation)
    {
      float32x2_t v11 = (float32x2_t)v14;
      float32x2_t v10 = *(float32x2_t *)v15.i8;
    }
    else
    {
      ResolvedGradient.ColorSpace.convertIn(_:)(v18, v15, *(float *)v14.i32, v15.u32[1], *(float *)&v14.i32[1], v9);
      float32x2_t v11 = (float32x2_t)__PAIR64__(LODWORD(v18[3]), LODWORD(v18[1]));
      float32x2_t v10 = (float32x2_t)__PAIR64__(LODWORD(v18[2]), LODWORD(v18[0]));
    }
    float32x2_t v12 = vmul_f32(v10, (float32x2_t)0x4300000043000000);
    v13.i64[0] = v12.u32[0];
    v13.i64[1] = v12.u32[1];
    int8x16_t v5 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_f32(v11, (float32x2_t)0x4300000043000000), 0x20uLL), v13);
    int8x16_t v6 = v17;
  }
  *a2 = v5;
  a2[1] = v6;
  a2[2].i64[0] = v4;
  a2[2].i8[8] = v3;
}

void _ShapeStyle_Pack.Effect.Kind.AnimatableData.set(effect:)(uint64_t a1)
{
  int8x16_t v3 = 0uLL;
  if (*(unsigned char *)(a1 + 45) & 1) != 0 || (*(unsigned char *)(v1 + 40))
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    char v6 = 1;
    long long v7 = 0uLL;
  }
  else
  {
    int64x2_t v8 = *(int64x2_t *)v1;
    long long v23 = *(_OWORD *)(v1 + 16);
    uint64_t v4 = *(void *)(v1 + 32);
    uint64_t v9 = *(unsigned __int8 *)(a1 + 44);
    uint64_t v10 = *(unsigned int *)(a1 + 40);
    float32x2_t v11 = (float32x2_t)vmovn_s64(v8);
    float32x2_t v12 = (float32x2_t)vshrn_n_s64(v8, 0x20uLL);
    if (one-time initialization token for legacyInterpolation != -1)
    {
      float32x2_t v19 = v12;
      float32x2_t v21 = v11;
      swift_once();
      float32x2_t v12 = v19;
      float32x2_t v11 = v21;
    }
    uint64_t v5 = v10 | (v9 << 32);
    float32x2_t v20 = vmul_f32(v11, (float32x2_t)0x3C0000003C000000);
    float32x2_t v22 = vmul_f32(v12, (float32x2_t)0x3C0000003C000000);
    swift_beginAccess();
    if (static Color.Resolved.legacyInterpolation)
    {
      float32x2_t v13 = v20;
      int32x2_t v14 = (int32x2_t)v22;
    }
    else
    {
      char v25 = 2;
      int8x16_t v15 = v24;
      v26.val[0] = v20;
      v26.val[1] = v22;
      vst2_f32(v15, v26);
      v13.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)(v24);
      v14.i32[1] = v16;
      v13.i32[1] = v17;
    }
    char v6 = 0;
    v18.i64[0] = v13.u32[0];
    v18.i64[1] = v13.u32[1];
    int8x16_t v3 = vorrq_s8((int8x16_t)vshll_n_s32(v14, 0x20uLL), v18);
    long long v7 = v23;
  }
  *(int8x16_t *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 44) = BYTE4(v5);
  *(unsigned char *)(a1 + 45) = v6;
}

uint64_t static _ShapeStyle_Pack.Effect.Kind.AnimatableData.+= infix(_:_:)(uint64_t result, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 40) & 1) == 0)
  {
    double v2 = *(double *)(a2 + 32);
    int64x2_t v4 = *(int64x2_t *)a2;
    float64x2_t v3 = *(float64x2_t *)(a2 + 16);
    if (*(unsigned char *)(result + 40))
    {
      *(int64x2_t *)double result = v4;
      *(float64x2_t *)(result + 16) = v3;
      double v5 = v2;
    }
    else
    {
      double v5 = *(double *)(result + 32) + v2;
      float32x2_t v6 = vadd_f32((float32x2_t)vmovn_s64(v4), (float32x2_t)vmovn_s64(*(int64x2_t *)result));
      v7.i64[0] = v6.u32[0];
      v7.i64[1] = v6.u32[1];
      float64x2_t v8 = vaddq_f64(*(float64x2_t *)(result + 16), v3);
      *(int8x16_t *)double result = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v4, 0x20uLL), (float32x2_t)vshrn_n_s64(*(int64x2_t *)result, 0x20uLL)), 0x20uLL), v7);
      *(float64x2_t *)(result + 16) = v8;
    }
    *(double *)(result + 32) = v5;
    *(unsigned char *)(result + 40) = 0;
  }
  return result;
}

uint64_t static _ShapeStyle_Pack.Effect.Kind.AnimatableData.-= infix(_:_:)(uint64_t result, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 40) & 1) == 0)
  {
    double v2 = *(double *)(a2 + 32);
    int64x2_t v4 = *(int64x2_t *)a2;
    float64x2_t v3 = *(float64x2_t *)(a2 + 16);
    if (*(unsigned char *)(result + 40))
    {
      *(int64x2_t *)double result = v4;
      *(float64x2_t *)(result + 16) = v3;
      double v5 = v2;
    }
    else
    {
      double v5 = *(double *)(result + 32) - v2;
      float32x2_t v6 = vsub_f32((float32x2_t)vmovn_s64(*(int64x2_t *)result), (float32x2_t)vmovn_s64(v4));
      v7.i64[0] = v6.u32[0];
      v7.i64[1] = v6.u32[1];
      float64x2_t v8 = vsubq_f64(*(float64x2_t *)(result + 16), v3);
      *(int8x16_t *)double result = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(*(int64x2_t *)result, 0x20uLL), (float32x2_t)vshrn_n_s64(v4, 0x20uLL)), 0x20uLL), v7);
      *(float64x2_t *)(result + 16) = v8;
    }
    *(double *)(result + 32) = v5;
    *(unsigned char *)(result + 40) = 0;
  }
  return result;
}

uint64_t static _ShapeStyle_Pack.Effect.Kind.AnimatableData.+ infix(_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = *(unsigned char *)(result + 40);
  int64x2_t v4 = *(int64x2_t *)result;
  if (*(unsigned char *)(a2 + 40))
  {
    double v5 = *(double *)(result + 32);
    int64x2_t v6 = *(int64x2_t *)result;
    float64x2_t v7 = *(float64x2_t *)(result + 16);
  }
  else
  {
    double v5 = *(double *)(a2 + 32);
    int64x2_t v6 = *(int64x2_t *)a2;
    float64x2_t v7 = *(float64x2_t *)(a2 + 16);
    char v3 = 0;
    if ((*(unsigned char *)(result + 40) & 1) == 0)
    {
      float64x2_t v7 = vaddq_f64(*(float64x2_t *)(result + 16), v7);
      double v5 = *(double *)(result + 32) + v5;
      float32x2_t v8 = vadd_f32((float32x2_t)vmovn_s64(v4), (float32x2_t)vmovn_s64(v6));
      v9.i64[0] = v8.u32[0];
      v9.i64[1] = v8.u32[1];
      int64x2_t v6 = (int64x2_t)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v4, 0x20uLL), (float32x2_t)vshrn_n_s64(v6, 0x20uLL)), 0x20uLL), v9);
    }
  }
  *(int64x2_t *)a3 = v6;
  *(float64x2_t *)(a3 + 16) = v7;
  *(double *)(a3 + 32) = v5;
  *(unsigned char *)(a3 + 40) = v3;
  return result;
}

uint64_t static _ShapeStyle_Pack.Effect.Kind.AnimatableData.- infix(_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = *(unsigned char *)(result + 40);
  int64x2_t v4 = *(int64x2_t *)result;
  if (*(unsigned char *)(a2 + 40))
  {
    double v5 = *(double *)(result + 32);
    int64x2_t v6 = *(int64x2_t *)result;
    float64x2_t v7 = *(float64x2_t *)(result + 16);
  }
  else
  {
    double v5 = *(double *)(a2 + 32);
    int64x2_t v6 = *(int64x2_t *)a2;
    float64x2_t v7 = *(float64x2_t *)(a2 + 16);
    char v3 = 0;
    if ((*(unsigned char *)(result + 40) & 1) == 0)
    {
      float64x2_t v7 = vsubq_f64(*(float64x2_t *)(result + 16), v7);
      double v5 = *(double *)(result + 32) - v5;
      float32x2_t v8 = vsub_f32((float32x2_t)vmovn_s64(v4), (float32x2_t)vmovn_s64(v6));
      v9.i64[0] = v8.u32[0];
      v9.i64[1] = v8.u32[1];
      int64x2_t v6 = (int64x2_t)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(v4, 0x20uLL), (float32x2_t)vshrn_n_s64(v6, 0x20uLL)), 0x20uLL), v9);
    }
  }
  *(int64x2_t *)a3 = v6;
  *(float64x2_t *)(a3 + 16) = v7;
  *(double *)(a3 + 32) = v5;
  *(unsigned char *)(a3 + 40) = v3;
  return result;
}

Swift::Void __swiftcall _ShapeStyle_Pack.Effect.Kind.AnimatableData.scale(by:)(Swift::Double by)
{
  if (by != 1.0 && (*(unsigned char *)(v1 + 40) & 1) == 0)
  {
    float v2 = by;
    float32x2_t v3 = vmul_n_f32((float32x2_t)vmovn_s64(*(int64x2_t *)v1), v2);
    double v4 = *(double *)(v1 + 32);
    v5.i64[0] = v3.u32[0];
    v5.i64[1] = v3.u32[1];
    float64x2_t v6 = vmulq_n_f64(*(float64x2_t *)(v1 + 16), by);
    *(int8x16_t *)uint64_t v1 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_n_f32((float32x2_t)vshrn_n_s64(*(int64x2_t *)v1, 0x20uLL), v2), 0x20uLL), v5);
    *(float64x2_t *)(v1 + 16) = v6;
    *(double *)(v1 + 32) = v4 * by;
    *(unsigned char *)(v1 + 40) = 0;
  }
}

double _ShapeStyle_Pack.Effect.Kind.AnimatableData.magnitudeSquared.getter()
{
  double result = 0.0;
  if ((*(unsigned char *)(v0 + 40) & 1) == 0) {
    return *(double *)(v0 + 16) * *(double *)(v0 + 16)
  }
         + *(double *)(v0 + 32) * *(double *)(v0 + 32)
         + *(double *)(v0 + 24) * *(double *)(v0 + 24)
         + (float)(*(float *)(v0 + 8) * *(float *)(v0 + 8))
         + (float)(*(float *)(v0 + 12) * *(float *)(v0 + 12))
         + (float)(*(float *)(v0 + 4) * *(float *)(v0 + 4))
         + (float)(*(float *)v0 * *(float *)v0);
  return result;
}

double protocol witness for VectorArithmetic.scale(by:) in conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData(double result)
{
  if (result != 1.0 && (*(unsigned char *)(v1 + 40) & 1) == 0)
  {
    float v2 = result;
    float32x2_t v3 = vmul_n_f32((float32x2_t)vmovn_s64(*(int64x2_t *)v1), v2);
    double v4 = *(double *)(v1 + 32);
    v5.i64[0] = v3.u32[0];
    v5.i64[1] = v3.u32[1];
    float64x2_t v6 = vmulq_n_f64(*(float64x2_t *)(v1 + 16), result);
    *(int8x16_t *)uint64_t v1 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_n_f32((float32x2_t)vshrn_n_s64(*(int64x2_t *)v1, 0x20uLL), v2), 0x20uLL), v5);
    *(float64x2_t *)(v1 + 16) = v6;
    double result = v4 * result;
    *(double *)(v1 + 32) = result;
    *(unsigned char *)(v1 + 40) = 0;
  }
  return result;
}

double protocol witness for static AdditiveArithmetic.zero.getter in conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 40) = 1;
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = *(unsigned char *)(result + 40);
  int64x2_t v4 = *(int64x2_t *)result;
  if (*(unsigned char *)(a2 + 40))
  {
    double v5 = *(double *)(result + 32);
    int64x2_t v6 = *(int64x2_t *)result;
    float64x2_t v7 = *(float64x2_t *)(result + 16);
  }
  else
  {
    double v5 = *(double *)(a2 + 32);
    int64x2_t v6 = *(int64x2_t *)a2;
    float64x2_t v7 = *(float64x2_t *)(a2 + 16);
    char v3 = 0;
    if ((*(unsigned char *)(result + 40) & 1) == 0)
    {
      float64x2_t v7 = vaddq_f64(*(float64x2_t *)(result + 16), v7);
      double v5 = *(double *)(result + 32) + v5;
      float32x2_t v8 = vadd_f32((float32x2_t)vmovn_s64(v4), (float32x2_t)vmovn_s64(v6));
      v9.i64[0] = v8.u32[0];
      v9.i64[1] = v8.u32[1];
      int64x2_t v6 = (int64x2_t)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v4, 0x20uLL), (float32x2_t)vshrn_n_s64(v6, 0x20uLL)), 0x20uLL), v9);
    }
  }
  *(int64x2_t *)a3 = v6;
  *(float64x2_t *)(a3 + 16) = v7;
  *(double *)(a3 + 32) = v5;
  *(unsigned char *)(a3 + 40) = v3;
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData(uint64_t result, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 40) & 1) == 0)
  {
    double v2 = *(double *)(a2 + 32);
    int64x2_t v4 = *(int64x2_t *)a2;
    float64x2_t v3 = *(float64x2_t *)(a2 + 16);
    if (*(unsigned char *)(result + 40))
    {
      *(int64x2_t *)double result = v4;
      *(float64x2_t *)(result + 16) = v3;
      double v5 = v2;
    }
    else
    {
      double v5 = *(double *)(result + 32) + v2;
      float32x2_t v6 = vadd_f32((float32x2_t)vmovn_s64(v4), (float32x2_t)vmovn_s64(*(int64x2_t *)result));
      v7.i64[0] = v6.u32[0];
      v7.i64[1] = v6.u32[1];
      float64x2_t v8 = vaddq_f64(*(float64x2_t *)(result + 16), v3);
      *(int8x16_t *)double result = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v4, 0x20uLL), (float32x2_t)vshrn_n_s64(*(int64x2_t *)result, 0x20uLL)), 0x20uLL), v7);
      *(float64x2_t *)(result + 16) = v8;
    }
    *(double *)(result + 32) = v5;
    *(unsigned char *)(result + 40) = 0;
  }
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = *(unsigned char *)(result + 40);
  int64x2_t v4 = *(int64x2_t *)result;
  if (*(unsigned char *)(a2 + 40))
  {
    double v5 = *(double *)(result + 32);
    int64x2_t v6 = *(int64x2_t *)result;
    float64x2_t v7 = *(float64x2_t *)(result + 16);
  }
  else
  {
    double v5 = *(double *)(a2 + 32);
    int64x2_t v6 = *(int64x2_t *)a2;
    float64x2_t v7 = *(float64x2_t *)(a2 + 16);
    char v3 = 0;
    if ((*(unsigned char *)(result + 40) & 1) == 0)
    {
      float64x2_t v7 = vsubq_f64(*(float64x2_t *)(result + 16), v7);
      double v5 = *(double *)(result + 32) - v5;
      float32x2_t v8 = vsub_f32((float32x2_t)vmovn_s64(v4), (float32x2_t)vmovn_s64(v6));
      v9.i64[0] = v8.u32[0];
      v9.i64[1] = v8.u32[1];
      int64x2_t v6 = (int64x2_t)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(v4, 0x20uLL), (float32x2_t)vshrn_n_s64(v6, 0x20uLL)), 0x20uLL), v9);
    }
  }
  *(int64x2_t *)a3 = v6;
  *(float64x2_t *)(a3 + 16) = v7;
  *(double *)(a3 + 32) = v5;
  *(unsigned char *)(a3 + 40) = v3;
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData(uint64_t result, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 40) & 1) == 0)
  {
    double v2 = *(double *)(a2 + 32);
    int64x2_t v4 = *(int64x2_t *)a2;
    float64x2_t v3 = *(float64x2_t *)(a2 + 16);
    if (*(unsigned char *)(result + 40))
    {
      *(int64x2_t *)double result = v4;
      *(float64x2_t *)(result + 16) = v3;
      double v5 = v2;
    }
    else
    {
      double v5 = *(double *)(result + 32) - v2;
      float32x2_t v6 = vsub_f32((float32x2_t)vmovn_s64(*(int64x2_t *)result), (float32x2_t)vmovn_s64(v4));
      v7.i64[0] = v6.u32[0];
      v7.i64[1] = v6.u32[1];
      float64x2_t v8 = vsubq_f64(*(float64x2_t *)(result + 16), v3);
      *(int8x16_t *)double result = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(*(int64x2_t *)result, 0x20uLL), (float32x2_t)vshrn_n_s64(v4, 0x20uLL)), 0x20uLL), v7);
      *(float64x2_t *)(result + 16) = v8;
    }
    *(double *)(result + 32) = v5;
    *(unsigned char *)(result + 40) = 0;
  }
  return result;
}

double key path getter for _ShapeStyle_Pack.Effect.Kind.animatableData : _ShapeStyle_Pack.Effect.Kind@<D0>(int8x16_t *a1@<X8>)
{
  _ShapeStyle_Pack.Effect.Kind.animatableData.getter(v6);
  uint64_t v2 = v7;
  __int8 v3 = v8;
  double result = *(double *)v6[0].i64;
  int8x16_t v5 = v6[1];
  *a1 = v6[0];
  a1[1] = v5;
  a1[2].i64[0] = v2;
  a1[2].i8[8] = v3;
  return result;
}

double key path setter for _ShapeStyle_Pack.Effect.Kind.animatableData : _ShapeStyle_Pack.Effect.Kind(uint64_t a1, uint64_t *a2)
{
  if (*((unsigned char *)a2 + 45) & 1) != 0 || (*(unsigned char *)(a1 + 40))
  {
    double result = 0.0;
    *(_OWORD *)((char *)a2 + 29) = 0u;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    *((unsigned char *)a2 + 45) = 1;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    long long v5 = *(_OWORD *)(a1 + 16);
    int v6 = *((_DWORD *)a2 + 10);
    uint64_t v7 = *(void *)(a1 + 32);
    char v8 = *((unsigned char *)a2 + 44);
    uint64_t v10 = *a2;
    uint64_t v9 = a2[1];
    unint64_t v11 = HIDWORD(*a2);
    uint64_t v12 = a2[4];
    uint64_t v13 = HIDWORD(*(void *)a1);
    v19[0] = *(void *)a1;
    v19[1] = v13;
    uint64_t v20 = v4;
    long long v21 = v5;
    uint64_t v22 = v7;
    *(void *)&long long v14 = __PAIR64__(v11, v10);
    *((void *)&v14 + 1) = v9;
    long long v15 = *((_OWORD *)a2 + 1);
    uint64_t v16 = v12;
    int v17 = v6;
    char v18 = v8;
    ResolvedShadowStyle.animatableData.setter((uint64_t)v19);
    double result = *(double *)&v14;
    *(_OWORD *)a2 = v14;
    *((_OWORD *)a2 + 1) = v15;
    a2[4] = v16;
    *((unsigned char *)a2 + 44) = v18;
    *((_DWORD *)a2 + 10) = v17;
    *((unsigned char *)a2 + 45) = 0;
  }
  return result;
}

void (*_ShapeStyle_Pack.Effect.Kind.animatableData.modify(int8x16_t **a1))(uint64_t **a1, char a2)
{
  __int8 v3 = (int8x16_t *)malloc(0x80uLL);
  *a1 = v3;
  v3[7].i64[1] = v1;
  char v4 = *(unsigned char *)(v1 + 45);
  if (v4)
  {
    uint64_t v5 = 0;
    int8x16_t v6 = 0uLL;
    int8x16_t v7 = 0uLL;
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 32);
    int64x2_t v9 = *(int64x2_t *)v1;
    int8x16_t v8 = *(int8x16_t *)(v1 + 16);
    int8x16_t v19 = v8;
    if (one-time initialization token for legacyInterpolation != -1)
    {
      int64x2_t v18 = *(int64x2_t *)v1;
      swift_once();
      int64x2_t v9 = v18;
    }
    *(int32x2_t *)v8.i8 = vmovn_s64(v9);
    int8x16_t v17 = v8;
    int32x2_t v16 = vshrn_n_s64(v9, 0x20uLL);
    swift_beginAccess();
    if (static Color.Resolved.legacyInterpolation)
    {
      float32x2_t v12 = (float32x2_t)v16;
      float32x2_t v11 = *(float32x2_t *)v17.i8;
    }
    else
    {
      ResolvedGradient.ColorSpace.convertIn(_:)(v20, v17, *(float *)v16.i32, v17.u32[1], *(float *)&v16.i32[1], v10);
      float32x2_t v12 = (float32x2_t)__PAIR64__(LODWORD(v20[3]), LODWORD(v20[1]));
      float32x2_t v11 = (float32x2_t)__PAIR64__(LODWORD(v20[2]), LODWORD(v20[0]));
    }
    float32x2_t v13 = vmul_f32(v11, (float32x2_t)0x4300000043000000);
    v14.i64[0] = v13.u32[0];
    v14.i64[1] = v13.u32[1];
    int8x16_t v6 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_f32(v12, (float32x2_t)0x4300000043000000), 0x20uLL), v14);
    int8x16_t v7 = v19;
  }
  *__int8 v3 = v6;
  v3[1] = v7;
  v3[2].i64[0] = v5;
  v3[2].i8[8] = v4;
  return _ShapeStyle_Pack.Effect.Kind.animatableData.modify;
}

void _ShapeStyle_Pack.Effect.Kind.animatableData.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[15];
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = (*a1)[3];
  uint64_t v6 = (*a1)[4];
  if ((a2 & 1) == 0)
  {
    if ((*(unsigned char *)(v3 + 45) & 1) == 0 && (v2[5] & 1) == 0) {
      goto LABEL_8;
    }
LABEL_7:
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v9 = 0;
    char v10 = 1;
    goto LABEL_13;
  }
  if (*(unsigned char *)(v3 + 45) & 1) != 0 || (v2[5]) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v11 = *(unsigned __int8 *)(v3 + 44);
  uint64_t v12 = *(unsigned int *)(v3 + 40);
  uint64_t v13 = **a1;
  LODWORD(v15) = HIDWORD((*a1)[1]);
  LODWORD(v14) = (*a1)[1];
  if (one-time initialization token for legacyInterpolation != -1)
  {
    uint64_t v23 = (*a1)[1];
    swift_once();
    float v15 = *((float *)&v23 + 1);
    float v14 = *(float *)&v23;
  }
  uint64_t v9 = v12 | (v11 << 32);
  float v16 = *(float *)&v13 * 0.0078125;
  float v17 = *((float *)&v13 + 1) * 0.0078125;
  float v18 = v14 * 0.0078125;
  float v19 = v15 * 0.0078125;
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    v24[0] = *(float *)&v13 * 0.0078125;
    v24[1] = *((float *)&v13 + 1) * 0.0078125;
    v24[2] = v18;
    v24[3] = v19;
    float v16 = ResolvedGradient.ColorSpace.convertOut(_:)(v24);
    float v17 = v20;
    float v18 = v21;
    float v19 = v22;
  }
  char v10 = 0;
  unint64_t v7 = LODWORD(v16) | ((unint64_t)LODWORD(v17) << 32);
  unint64_t v8 = LODWORD(v18) | ((unint64_t)LODWORD(v19) << 32);
  uint64_t v3 = v2[15];
LABEL_13:
  *(void *)uint64_t v3 = v7;
  *(void *)(v3 + 8) = v8;
  *(void *)(v3 + 16) = v4;
  *(void *)(v3 + 24) = v5;
  *(void *)(v3 + 32) = v6;
  *(_DWORD *)(v3 + 40) = v9;
  *(unsigned char *)(v3 + 44) = BYTE4(v9);
  *(unsigned char *)(v3 + 45) = v10;

  free(v2);
}

double protocol witness for Animatable.animatableData.setter in conformance _ShapeStyle_Pack.Effect.Kind(uint64_t a1)
{
  if (*((unsigned char *)v1 + 45) & 1) != 0 || (*(unsigned char *)(a1 + 40))
  {
    double result = 0.0;
    *(_OWORD *)((char *)v1 + 29) = 0u;
    *(_OWORD *)uint64_t v1 = 0u;
    *((_OWORD *)v1 + 1) = 0u;
    *((unsigned char *)v1 + 45) = 1;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    long long v4 = *(_OWORD *)(a1 + 16);
    int v5 = *((_DWORD *)v1 + 10);
    uint64_t v6 = *(void *)(a1 + 32);
    char v7 = *((unsigned char *)v1 + 44);
    uint64_t v9 = *v1;
    uint64_t v8 = v1[1];
    unint64_t v10 = HIDWORD(*v1);
    uint64_t v11 = v1[4];
    uint64_t v12 = HIDWORD(*(void *)a1);
    v18[0] = *(void *)a1;
    v18[1] = v12;
    uint64_t v19 = v3;
    long long v20 = v4;
    uint64_t v21 = v6;
    *(void *)&long long v13 = __PAIR64__(v10, v9);
    *((void *)&v13 + 1) = v8;
    long long v14 = *((_OWORD *)v1 + 1);
    uint64_t v15 = v11;
    int v16 = v5;
    char v17 = v7;
    ResolvedShadowStyle.animatableData.setter((uint64_t)v18);
    double result = *(double *)&v13;
    *(_OWORD *)uint64_t v1 = v13;
    *((_OWORD *)v1 + 1) = v14;
    v1[4] = v15;
    *((unsigned char *)v1 + 44) = v17;
    *((_DWORD *)v1 + 10) = v16;
    *((unsigned char *)v1 + 45) = 0;
  }
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _ShapeStyle_Pack.Effect.Kind(int8x16_t ***a1))()
{
  uint64_t v2 = (int8x16_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (int8x16_t *)_ShapeStyle_Pack.Effect.Kind.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t key path setter for _ShapeStyle_Shape.stylePack : _ShapeStyle_Shape(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRetain();
  uint64_t v2 = _ShapeStyle_Shape.stylePack.modify(v5);
  *uint64_t v3 = v1;
  swift_bridgeObjectRelease();
  return v2(v5, 0);
}

uint64_t _ShapeStyle_Shape.stylePack.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(v1 + 32), *(unsigned char *)(v1 + 40));
  *(void *)(v1 + 32) = v2;
  *(unsigned char *)(v1 + 40) = 1;
  return result;
}

float ResolvedMulticolorStyle.accentColor.getter()
{
  return *(float *)v0;
}

void ResolvedMulticolorStyle.accentColor.setter(float a1, float a2, float a3, float a4)
{
  *long long v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*ResolvedMulticolorStyle.accentColor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ResolvedMulticolorStyle.colorScheme.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

unsigned char *ResolvedMulticolorStyle.colorScheme.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 16) = *result;
  return result;
}

uint64_t (*ResolvedMulticolorStyle.colorScheme.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ResolvedMulticolorStyle.colorSchemeContrast.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 17);
}

unsigned char *ResolvedMulticolorStyle.colorSchemeContrast.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 17) = *result;
  return result;
}

uint64_t (*ResolvedMulticolorStyle.colorSchemeContrast.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ResolvedMulticolorStyle.displayGamut.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 18);
}

unsigned char *ResolvedMulticolorStyle.displayGamut.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 18) = *result;
  return result;
}

uint64_t (*ResolvedMulticolorStyle.displayGamut.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void *ResolvedMulticolorStyle.bundle.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

void ResolvedMulticolorStyle.bundle.setter(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
}

uint64_t (*ResolvedMulticolorStyle.bundle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unint64_t ResolvedMulticolorStyle.resolve(name:proposed:)(uint64_t a1, uint64_t a2, float a3, float a4)
{
  if (a2) {
    return ResolvedMulticolorStyle.resolve(name:)(a1, a2);
  }
  else {
    return LODWORD(a3) | ((unint64_t)LODWORD(a4) << 32);
  }
}

uint64_t specialized static ResolvedMulticolorStyle.== infix(_:_:)(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t result = 0;
  if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*a1, *a2))), 0xFuLL))) & 1) == 0
    && ((a1[1].u8[0] ^ a2[1].u8[0]) & 1) == 0
    && ((a1[1].u8[1] ^ a2[1].u8[1]) & 1) == 0
    && ((a1[1].u8[2] ^ a2[1].u8[2]) & 1) == 0)
  {
    long long v4 = (void *)a1[1].i64[1];
    int v5 = (void *)a2[1].i64[1];
    if (v4)
    {
      if (v5)
      {
        type metadata accessor for NSBundle();
        id v6 = v5;
        id v7 = v4;
        char v8 = static NSObject.== infix(_:_:)();

        if (v8) {
          return 1;
        }
      }
    }
    else if (!v5)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static _ShapeStyle_Pack.Effect.Kind.AnimatableData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 40);
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  uint64_t v4 = v2 & v3;
  if ((v2 & 1) == 0 && (v3 & 1) == 0)
  {
    LODWORD(v4) = *(float *)a1 == *(float *)a2;
    if (*(float *)(a1 + 4) != *(float *)(a2 + 4)) {
      LODWORD(v4) = 0;
    }
    if (*(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      LODWORD(v4) = 0;
    }
    if (*(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      LODWORD(v4) = 0;
    }
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      LODWORD(v4) = 0;
    }
    if (*(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      LODWORD(v4) = 0;
    }
    if (*(double *)(a1 + 32) == *(double *)(a2 + 32)) {
      return v4;
    }
    else {
      return 0;
    }
  }
  return v4;
}

BOOL specialized static _ShapeStyle_Pack.Effect.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  float v2 = *(float *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  int v4 = *(unsigned __int8 *)(a1 + 64);
  char v5 = *((unsigned char *)a2 + 45);
  float v6 = *((float *)a2 + 12);
  uint64_t v7 = a2[7];
  int v8 = *((unsigned __int8 *)a2 + 64);
  if (*(unsigned char *)(a1 + 45))
  {
    if (v2 != v6) {
      char v5 = 0;
    }
    if ((v5 & 1) == 0) {
      return 0;
    }
LABEL_9:
    if (v4 == 255)
    {
      if (v8 == 255) {
        return 1;
      }
    }
    else if (v8 != 255)
    {
      if (v4)
      {
        if (v8)
        {
          outlined copy of GraphicsBlendMode?(v7, v8);
          outlined copy of GraphicsBlendMode?(v3, v4);
          uint64_t v20 = 1;
          outlined consume of GraphicsBlendMode(v3, 1);
          outlined consume of GraphicsBlendMode(v7, 1);
          if (v3 == v7) {
            return v20;
          }
          return 0;
        }
        swift_unknownObjectRetain();
        goto LABEL_21;
      }
      if (v8)
      {
LABEL_21:
        char v21 = v8 & 1;
        outlined copy of GraphicsBlendMode(v7, v21);
        outlined consume of GraphicsBlendMode(v3, v4 & 1);
        outlined consume of GraphicsBlendMode(v7, v21);
        return 0;
      }
      outlined consume of GraphicsBlendMode(v3, 0);
      outlined consume of GraphicsBlendMode(v7, 0);
      return v3 == v7;
    }
    outlined copy of GraphicsBlendMode?(v7, v8);
    outlined copy of GraphicsBlendMode?(v3, v4);
    outlined consume of GraphicsBlendMode?(v3, v4);
    outlined consume of GraphicsBlendMode?(v7, v8);
    return 0;
  }
  if (*((unsigned char *)a2 + 45)) {
    return 0;
  }
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  long long v11 = *((_OWORD *)a2 + 1);
  uint64_t v12 = a2[4];
  unint64_t v13 = *((unsigned int *)a2 + 10) | ((unint64_t)*((unsigned __int8 *)a2 + 44) << 32);
  char v14 = *(unsigned char *)(a1 + 44);
  int v15 = *(_DWORD *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = HIDWORD(*(void *)a1);
  uint64_t v18 = *(void *)(a1 + 32);
  unint64_t v19 = HIDWORD(*a2);
  v29[0] = *(void *)a1;
  v29[1] = v17;
  uint64_t v30 = v16;
  long long v31 = *(_OWORD *)(a1 + 16);
  uint64_t v32 = v18;
  int v33 = v15;
  char v34 = v14;
  v23[0] = v9;
  v23[1] = v19;
  uint64_t v24 = v10;
  long long v25 = v11;
  uint64_t v26 = v12;
  int v27 = v13;
  char v28 = BYTE4(v13);
  uint64_t v20 = 0;
  if (specialized static ResolvedShadowStyle.== infix(_:_:)((uint64_t)v29, (uint64_t)v23) && v2 == v6) {
    goto LABEL_9;
  }
  return v20;
}

void specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t *)(a2 + 32);
  uint64_t v4 = *(uint64_t *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 72);
  int v9 = *(unsigned __int8 *)(a2 + 80);
  float64x2_t v10 = *(float64x2_t *)a1;
  uint64_t v11 = a1 + 16;
  float64x2_t v12 = *(float64x2_t *)(a1 + 16);
  float64x2_t v14 = *(float64x2_t *)a2;
  float64x2_t v13 = *(float64x2_t *)(a2 + 16);
  int v15 = (_OWORD *)(a1 + 32);
  uint64_t v16 = *(uint64_t *)(a1 + 32);
  uint64_t v18 = (_OWORD *)(a1 + 48);
  unint64_t v17 = *(void *)(a1 + 48);
  uint64_t v19 = *(uint64_t *)(a1 + 40);
  unint64_t v20 = *(void *)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v22 = *(void *)(a1 + 72);
  uint64_t v23 = *(unsigned __int8 *)(a1 + 80);
  v251[0] = *(_OWORD *)a1;
  v251[1] = v12;
  uint64_t v252 = v16;
  uint64_t v253 = v19;
  unint64_t v254 = v17;
  unint64_t v255 = v20;
  uint64_t v256 = v21;
  uint64_t v257 = v22;
  char v258 = v23;
  float64x2_t v259 = v14;
  float64x2_t v260 = v13;
  uint64_t v261 = v3;
  uint64_t v262 = v4;
  uint64_t v263 = v5;
  uint64_t v264 = v6;
  uint64_t v265 = v7;
  uint64_t v266 = v8;
  char v267 = v9;
  if (v9 == 9
    && (int8x16_t v24 = vorrq_s8((int8x16_t)v13, (int8x16_t)v14),
        !(v4 | *(void *)&vorr_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)) | v5 | v3 | v6 | v7 | v8)))
  {
    outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v10.f64[0], *(uint64_t *)&v10.f64[1], *(uint64_t *)&v12.f64[0], *(uint64_t *)&v12.f64[1], v16, v19, v17, v20, v21, v22, v23);
LABEL_46:
    outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v251, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
  }
  else
  {
    long long v25 = (_OWORD *)(a1 + 8);
    switch(v23)
    {
      case 1:
        if (v9 != 1) {
          goto LABEL_36;
        }
        int64x2_t v223 = (int64x2_t)v10;
        int64x2_t v234 = (int64x2_t)v14;
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v251, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        float32x2_t v30 = vadd_f32((float32x2_t)vmovn_s64(v234), (float32x2_t)vmovn_s64(v223));
        v31.i64[0] = v30.u32[0];
        v31.i64[1] = v30.u32[1];
        *(int8x16_t *)a1 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v234, 0x20uLL), (float32x2_t)vshrn_n_s64(v223, 0x20uLL)), 0x20uLL), v31);
        *(_OWORD *)uint64_t v11 = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(unsigned char *)(a1 + 80) = 1;
        break;
      case 2:
        if (v9 != 2)
        {
          uint64_t v96 = *(void *)&v10.f64[1];
          uint64_t v95 = *(void *)&v10.f64[0];
          uint64_t v98 = *(void *)&v12.f64[1];
          uint64_t v97 = *(void *)&v12.f64[0];
          char v151 = 2;
          uint64_t v146 = v21;
          uint64_t v149 = v22;
          goto LABEL_45;
        }
        *(void *)&v250.m24 = v16;
        LOBYTE(v250.m31) = v19;
        *(float64x2_t *)&v250.m11 = vaddq_f64(v14, v10);
        *(float64x2_t *)&v250.m15 = vaddq_f64(v13, v12);
        *(void *)&long long v245 = v3;
        BYTE8(v245) = v4;
        uint64_t v32 = *(void *)&v14.f64[1];
        uint64_t v159 = *(void *)&v14.f64[0];
        float64x2_t v163 = v13;
        uint64_t v170 = *(void *)&v14.f64[1];
        uint64_t v196 = v3;
        uint64_t v203 = v4;
        uint64_t v209 = v5;
        uint64_t v216 = v6;
        uint64_t v33 = v7;
        uint64_t v186 = v7;
        uint64_t v191 = v8;
        uint64_t v34 = v8;
        uint64_t v235 = v20;
        int64x2_t v175 = (int64x2_t)v12;
        uint64_t v35 = v17;
        float64x2_t v224 = v10;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v14.f64[0], *(uint64_t *)&v14.f64[1], *(uint64_t *)&v13.f64[0], *(uint64_t *)&v13.f64[1], v3, v4, v5, v6, v7, v8, 2);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v224.f64[0], *(uint64_t *)&v224.f64[1], v175.i64[0], v175.i64[1], v16, v19, v35, v235, v21, v22, 2);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v159, v32, *(uint64_t *)&v163.f64[0], *(uint64_t *)&v163.f64[1], v196, v203, v209, v216, v33, v34, 2);
        ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v245, 1.0);
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v251, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v159, v170, *(uint64_t *)&v163.f64[0], *(uint64_t *)&v163.f64[1], v196, v203, v209, v216, v186, v191, 2);
        uint64_t v36 = *(void *)&v250.m24;
        uint64_t m31_low = LOBYTE(v250.m31);
        long long v38 = *(_OWORD *)&v250.m15;
        *(_OWORD *)a1 = *(_OWORD *)&v250.m11;
        *(_OWORD *)(a1 + 16) = v38;
        *(void *)(a1 + 32) = v36;
        *(void *)(a1 + 40) = m31_low;
        _OWORD *v18 = 0u;
        v18[1] = 0u;
        *(unsigned char *)(a1 + 80) = 2;
        break;
      case 3:
        if (v9 != 3)
        {
          uint64_t v100 = *(void *)&v10.f64[1];
          uint64_t v99 = *(void *)&v10.f64[0];
          uint64_t v101 = *(void *)&v12.f64[0];
          uint64_t v102 = *(void *)&v13.f64[1];
          uint64_t v103 = *(void *)&v12.f64[1];
          char v104 = 3;
          goto LABEL_42;
        }
        uint64_t v155 = *(void *)&v12.f64[1];
        uint64_t v160 = *(void *)&v12.f64[0];
        uint64_t v39 = *(void *)&v13.f64[0];
        double v40 = *(double *)&v3;
        double v41 = *(double *)&v4;
        uint64_t v165 = *(void *)&v13.f64[1];
        *(float64_t *)&v250.m15 = v12.f64[0];
        LOBYTE(v250.m22) = LOBYTE(v12.f64[1]);
        *(void *)&v250.m24 = v16;
        *(void *)&v250.m31 = v19;
        *(float64x2_t *)&v250.m11 = vaddq_f64(v14, v10);
        *(float64_t *)&long long v245 = v13.f64[0];
        BYTE8(v245) = LOBYTE(v13.f64[1]);
        uint64_t v152 = *(void *)&v14.f64[0];
        uint64_t v171 = *(void *)&v13.f64[0];
        uint64_t v176 = *(void *)&v14.f64[1];
        uint64_t v42 = v3;
        uint64_t v197 = v3;
        uint64_t v204 = v4;
        uint64_t v210 = v5;
        uint64_t v217 = v6;
        uint64_t v43 = v7;
        uint64_t v187 = v7;
        uint64_t v192 = v8;
        uint64_t v44 = v8;
        uint64_t v236 = v20;
        uint64_t v181 = v17;
        float64x2_t v225 = v10;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v14.f64[0], *(uint64_t *)&v14.f64[1], *(uint64_t *)&v13.f64[0], *(uint64_t *)&v13.f64[1], v3, v4, v5, v6, v7, v8, 3);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v152, v176, v39, v165, v42, v204, v210, v217, v43, v44, 3);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v225.f64[0], *(uint64_t *)&v225.f64[1], v160, v155, v16, v19, v181, v236, v21, v22, 3);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v152, v176, v171, v165, v197, v204, v210, v217, v187, v192, 3);
        ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v245, 1.0);
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v251, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v152, v176, v171, v165, v197, v204, v210, v217, v187, v192, 3);
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v152, v176, v171, v165, v197, v204, v210, v217, v187, v192, 3);
        uint64_t v45 = *(void *)&v250.m15;
        uint64_t m22_low = LOBYTE(v250.m22);
        *(_OWORD *)a1 = *(_OWORD *)&v250.m11;
        *(void *)(a1 + 16) = v45;
        *(void *)(a1 + 24) = m22_low;
        *(double *)(a1 + 32) = v40 + *(double *)&v16;
        *(double *)(a1 + 40) = v41 + *(double *)&v19;
        _OWORD *v18 = 0u;
        v18[1] = 0u;
        *(unsigned char *)(a1 + 80) = 3;
        break;
      case 4:
        if (v9 != 4)
        {
          uint64_t v100 = *(void *)&v10.f64[1];
          uint64_t v99 = *(void *)&v10.f64[0];
          uint64_t v101 = *(void *)&v12.f64[0];
          uint64_t v102 = *(void *)&v13.f64[1];
          uint64_t v103 = *(void *)&v12.f64[1];
          char v104 = 4;
          goto LABEL_42;
        }
        uint64_t v156 = *(void *)&v12.f64[1];
        uint64_t v161 = *(void *)&v12.f64[0];
        uint64_t v47 = *(void *)&v13.f64[0];
        double v48 = *(double *)&v3;
        double v49 = *(double *)&v4;
        uint64_t v166 = *(void *)&v13.f64[1];
        *(float64_t *)&v250.m15 = v12.f64[0];
        LOBYTE(v250.m22) = LOBYTE(v12.f64[1]);
        *(void *)&v250.m24 = v16;
        *(void *)&v250.m31 = v19;
        *(float64x2_t *)&v250.m11 = vaddq_f64(v14, v10);
        *(float64_t *)&long long v245 = v13.f64[0];
        BYTE8(v245) = LOBYTE(v13.f64[1]);
        uint64_t v153 = *(void *)&v14.f64[0];
        uint64_t v172 = *(void *)&v13.f64[0];
        uint64_t v177 = *(void *)&v14.f64[1];
        uint64_t v50 = v3;
        uint64_t v198 = v3;
        uint64_t v205 = v4;
        uint64_t v211 = v5;
        uint64_t v218 = v6;
        uint64_t v51 = v7;
        uint64_t v188 = v7;
        uint64_t v193 = v8;
        uint64_t v52 = v8;
        uint64_t v237 = v20;
        uint64_t v182 = v17;
        float64x2_t v226 = v10;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v14.f64[0], *(uint64_t *)&v14.f64[1], *(uint64_t *)&v13.f64[0], *(uint64_t *)&v13.f64[1], v3, v4, v5, v6, v7, v8, 4);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v153, v177, v47, v166, v50, v205, v211, v218, v51, v52, 4);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v226.f64[0], *(uint64_t *)&v226.f64[1], v161, v156, v16, v19, v182, v237, v21, v22, 4);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v153, v177, v172, v166, v198, v205, v211, v218, v188, v193, 4);
        ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v245, 1.0);
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v251, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v153, v177, v172, v166, v198, v205, v211, v218, v188, v193, 4);
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v153, v177, v172, v166, v198, v205, v211, v218, v188, v193, 4);
        uint64_t v53 = *(void *)&v250.m15;
        uint64_t v54 = LOBYTE(v250.m22);
        *(_OWORD *)a1 = *(_OWORD *)&v250.m11;
        *(void *)(a1 + 16) = v53;
        *(void *)(a1 + 24) = v54;
        *(double *)(a1 + 32) = v48 + *(double *)&v16;
        *(double *)(a1 + 40) = v49 + *(double *)&v19;
        _OWORD *v18 = 0u;
        v18[1] = 0u;
        *(unsigned char *)(a1 + 80) = 4;
        break;
      case 5:
        if (v9 != 5)
        {
          uint64_t v100 = *(void *)&v10.f64[1];
          uint64_t v99 = *(void *)&v10.f64[0];
          uint64_t v101 = *(void *)&v12.f64[0];
          uint64_t v102 = *(void *)&v13.f64[1];
          uint64_t v103 = *(void *)&v12.f64[1];
          char v104 = 5;
LABEL_42:
          uint64_t v147 = v21;
          uint64_t v150 = v22;
          uint64_t v105 = v3;
          uint64_t v106 = v4;
          uint64_t v107 = v5;
          uint64_t v108 = v6;
          uint64_t v109 = v7;
          uint64_t v110 = v8;
          uint64_t v230 = *(void *)&v13.f64[0];
          float64x2_t v242 = v14;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v99, v100, v101, v103, v16, v19, v17, v20, v147, v150, v104);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v242.f64[0], *(uint64_t *)&v242.f64[1], v230, v102, v105, v106, v107, v108, v109, v110, v9);
          goto LABEL_46;
        }
        uint64_t v157 = *(void *)&v12.f64[1];
        uint64_t v162 = *(void *)&v12.f64[0];
        uint64_t v55 = *(void *)&v13.f64[0];
        double v56 = *(double *)&v3;
        double v57 = *(double *)&v4;
        uint64_t v167 = *(void *)&v13.f64[1];
        *(float64_t *)&v250.m15 = v12.f64[0];
        LOBYTE(v250.m22) = LOBYTE(v12.f64[1]);
        *(void *)&v250.m24 = v16;
        *(void *)&v250.m31 = v19;
        *(float64x2_t *)&v250.m11 = vaddq_f64(v14, v10);
        *(float64_t *)&long long v245 = v13.f64[0];
        BYTE8(v245) = LOBYTE(v13.f64[1]);
        uint64_t v154 = *(void *)&v14.f64[0];
        uint64_t v173 = *(void *)&v13.f64[0];
        uint64_t v178 = *(void *)&v14.f64[1];
        uint64_t v58 = v3;
        uint64_t v199 = v3;
        uint64_t v206 = v4;
        uint64_t v212 = v5;
        uint64_t v219 = v6;
        uint64_t v59 = v7;
        uint64_t v189 = v7;
        uint64_t v194 = v8;
        uint64_t v60 = v8;
        uint64_t v238 = v20;
        uint64_t v183 = v17;
        float64x2_t v227 = v10;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v14.f64[0], *(uint64_t *)&v14.f64[1], *(uint64_t *)&v13.f64[0], *(uint64_t *)&v13.f64[1], v3, v4, v5, v6, v7, v8, 5);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v154, v178, v55, v167, v58, v206, v212, v219, v59, v60, 5);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v227.f64[0], *(uint64_t *)&v227.f64[1], v162, v157, v16, v19, v183, v238, v21, v22, 5);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v154, v178, v173, v167, v199, v206, v212, v219, v189, v194, 5);
        ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v245, 1.0);
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v251, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v154, v178, v173, v167, v199, v206, v212, v219, v189, v194, 5);
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v154, v178, v173, v167, v199, v206, v212, v219, v189, v194, 5);
        uint64_t v61 = *(void *)&v250.m15;
        uint64_t v62 = LOBYTE(v250.m22);
        *(_OWORD *)a1 = *(_OWORD *)&v250.m11;
        *(void *)(a1 + 16) = v61;
        *(void *)(a1 + 24) = v62;
        *(double *)(a1 + 32) = v56 + *(double *)&v16;
        *(double *)(a1 + 40) = v57 + *(double *)&v19;
        _OWORD *v18 = 0u;
        v18[1] = 0u;
        *(unsigned char *)(a1 + 80) = 5;
        break;
      case 6:
        int64x2_t v228 = (int64x2_t)v13;
        uint64_t v63 = v8;
        uint64_t v64 = v7;
        uint64_t v200 = v3;
        uint64_t v207 = v4;
        uint64_t v213 = v5;
        uint64_t v220 = v6;
        if (v9 != 6)
        {
          float64x2_t v243 = v14;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v10.f64[0], *(uint64_t *)&v10.f64[1], *(uint64_t *)&v12.f64[0], *(uint64_t *)&v12.f64[1], v16, v19, v17, v20, v21, v22, 6);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v243.f64[0], *(uint64_t *)&v243.f64[1], v228.i64[0], v228.i64[1], v200, v207, v213, v220, v64, v63, v9);
          goto LABEL_46;
        }
        uint64_t v65 = *(void *)&v14.f64[0];
        if (*(void *)(*(void *)&v14.f64[0] + 16) >= *(void *)(*(void *)&v10.f64[0] + 16)) {
          uint64_t v66 = *(void *)(*(void *)&v10.f64[0] + 16);
        }
        else {
          uint64_t v66 = *(void *)(*(void *)&v14.f64[0] + 16);
        }
        int64x2_t v179 = (int64x2_t)v12;
        uint64_t v145 = v21;
        uint64_t v148 = v22;
        float64_t v67 = v10.f64[1];
        BOOL v68 = *(char **)&v10.f64[0];
        uint64_t v69 = v19;
        uint64_t v70 = *(void *)&v14.f64[1];
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v10.f64[0], *(uint64_t *)&v10.f64[1], *(uint64_t *)&v12.f64[0], *(uint64_t *)&v12.f64[1], v16, v69, v17, v20, v145, v148, 6);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v65, v70, v228.i64[0], v228.i64[1], v200, v207, v213, v220, v64, v63, 6);
        if (!v66) {
          goto LABEL_55;
        }
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_99;
        }
        while (1)
        {
          unint64_t v71 = *((void *)v68 + 2);
          unint64_t v72 = v66 - 1;
          unint64_t v73 = v66 - 1 >= v71 ? *((void *)v68 + 2) : v66 - 1;
          if (v73 <= 7) {
            goto LABEL_31;
          }
          if (v72 >= v71) {
            unint64_t v72 = *((void *)v68 + 2);
          }
          uint64_t v74 = 4 * v72 + 36;
          if ((unint64_t)(v68 + 32) >= v65 + v74 || v65 + 32 >= (unint64_t)&v68[v74])
          {
            unint64_t v117 = v73 + 1;
            uint64_t v118 = v117 & 7;
            if ((v117 & 7) == 0) {
              uint64_t v118 = 8;
            }
            unint64_t v75 = v117 - v118;
            uint64_t v119 = (float32x4_t *)(v65 + 48);
            uint64_t v120 = (float32x4_t *)(v68 + 48);
            unint64_t v121 = v75;
            do
            {
              float32x4_t v122 = vaddq_f32(*v119, *v120);
              v120[-1] = vaddq_f32(v119[-1], v120[-1]);
              *uint64_t v120 = v122;
              v119 += 2;
              v120 += 2;
              v121 -= 8;
            }
            while (v121);
          }
          else
          {
LABEL_31:
            unint64_t v75 = 0;
          }
          do
          {
            if (v75 >= v71)
            {
              __break(1u);
              goto LABEL_98;
            }
            uint64_t v123 = 4 * v75;
            uint64_t v124 = v65 + 4 * v75++;
            *(float *)&v68[v123 + 32] = *(float *)(v124 + 32) + *(float *)&v68[v123 + 32];
          }
          while (v66 != v75);
          swift_bridgeObjectRelease();
LABEL_55:
          float64_t v125 = v67;
          uint64_t v126 = *(void *)(v70 + 16) >= *(void *)(*(void *)&v67 + 16)
               ? *(void *)(*(void *)&v67 + 16)
               : *(void *)(v70 + 16);
          if (!v126) {
            break;
          }
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            float64_t v125 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()(*(void **)&v67));
          }
          unint64_t v127 = *(void *)(*(void *)&v125 + 16);
          unint64_t v128 = v126 - 1;
          if (v126 - 1 >= v127) {
            unint64_t v129 = *(void *)(*(void *)&v125 + 16);
          }
          else {
            unint64_t v129 = v126 - 1;
          }
          if (v129 <= 0xF) {
            goto LABEL_86;
          }
          long long v130 = (float *)(*(void *)&v125 + 32);
          unint64_t v131 = v128 >= v127 ? *(void *)(*(void *)&v125 + 16) : v126 - 1;
          BOOL v132 = &v130[4 * v131] >= v130 && *(void *)&v125 + 36 + 16 * v131 >= *(void *)&v125 + 36;
          BOOL v133 = v132 && *(void *)&v125 + 44 + 16 * v131 >= *(void *)&v125 + 44;
          BOOL v134 = v133 && *(void *)&v125 + 40 + 16 * v131 >= *(void *)&v125 + 40;
          unint64_t v135 = v131 >> 60;
          if (!v134 || v135 != 0) {
            goto LABEL_86;
          }
          uint64_t v137 = (const float *)(v70 + 32);
          if (v128 >= v127) {
            unint64_t v128 = *(void *)(*(void *)&v125 + 16);
          }
          uint64_t v138 = 16 * v128 + 48;
          if ((unint64_t)v130 >= v70 + v138 || (unint64_t)v137 >= *(void *)&v125 + v138)
          {
            unint64_t v142 = v129 + 1;
            uint64_t v143 = v142 & 3;
            if ((v142 & 3) == 0) {
              uint64_t v143 = 4;
            }
            unint64_t v139 = v142 - v143;
            unint64_t v144 = v139;
            do
            {
              float32x4x4_t v268 = vld4q_f32(v137);
              v137 += 16;
              float32x4x4_t v269 = vld4q_f32(v130);
              v270.val[0] = vaddq_f32(v268.val[0], v269.val[0]);
              v270.val[1] = vaddq_f32(v268.val[1], v269.val[1]);
              v270.val[2] = vaddq_f32(v268.val[2], v269.val[2]);
              v270.val[3] = vaddq_f32(v268.val[3], v269.val[3]);
              vst4q_f32(v130, v270);
              v130 += 16;
              v144 -= 4;
            }
            while (v144);
          }
          else
          {
LABEL_86:
            unint64_t v139 = 0;
          }
          while (v139 < v127)
          {
            *(float32x4_t *)(*(void *)&v125 + 16 * v139 + 32) = vaddq_f32(*(float32x4_t *)(v70 + 16 * v139 + 32), *(float32x4_t *)(*(void *)&v125 + 16 * v139 + 32));
            if (v126 == ++v139)
            {
              outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v251, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
              swift_bridgeObjectRelease();
              goto LABEL_91;
            }
          }
LABEL_98:
          __break(1u);
LABEL_99:
          BOOL v68 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v68);
        }
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v251, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
LABEL_91:
        float32x2_t v140 = vadd_f32((float32x2_t)vmovn_s64(v228), (float32x2_t)vmovn_s64(v179));
        *(void *)a1 = v68;
        *(float64_t *)(a1 + 8) = v125;
        v141.i64[0] = v140.u32[0];
        v141.i64[1] = v140.u32[1];
        *(int8x16_t *)(a1 + 16) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v228, 0x20uLL), (float32x2_t)vshrn_n_s64(v179, 0x20uLL)), 0x20uLL), v141);
        *int v15 = 0u;
        v15[1] = 0u;
        _DWORD v15[2] = 0u;
        *(unsigned char *)(a1 + 80) = 6;
        break;
      case 7:
        uint64_t v76 = *(void *)&v10.f64[0];
        if (v9 != 7)
        {
          uint64_t v96 = *(void *)&v10.f64[1];
          uint64_t v98 = *(void *)&v12.f64[1];
          uint64_t v97 = *(void *)&v12.f64[0];
          char v151 = 7;
          uint64_t v146 = v21;
          uint64_t v149 = v22;
          uint64_t v95 = *(void *)&v10.f64[0];
LABEL_45:
          uint64_t v111 = v3;
          uint64_t v112 = v4;
          uint64_t v113 = v5;
          uint64_t v114 = v6;
          uint64_t v115 = v7;
          uint64_t v116 = v8;
          float64x2_t v231 = v13;
          float64x2_t v244 = v14;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v95, v96, v97, v98, v16, v19, v17, v20, v146, v149, v151);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v244.f64[0], *(uint64_t *)&v244.f64[1], *(uint64_t *)&v231.f64[0], *(uint64_t *)&v231.f64[1], v111, v112, v113, v114, v115, v116, v9);
          goto LABEL_46;
        }
        *(float64_t *)&v250.m11 = v10.f64[0];
        uint64_t v164 = *(void *)&v14.f64[1];
        *(float64_t *)&long long v245 = v14.f64[0];
        uint64_t v168 = *(void *)&v14.f64[0];
        float64x2_t v77 = v13;
        uint64_t v201 = v3;
        uint64_t v208 = v4;
        uint64_t v214 = v5;
        uint64_t v221 = v6;
        uint64_t v78 = v7;
        uint64_t v190 = v7;
        uint64_t v195 = v8;
        uint64_t v79 = v8;
        uint64_t v239 = v20;
        float64x2_t v180 = v12;
        uint64_t v184 = v17;
        uint64_t v232 = *(void *)&v10.f64[1];
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v14.f64[0], *(uint64_t *)&v14.f64[1], *(uint64_t *)&v13.f64[0], *(uint64_t *)&v13.f64[1], v3, v4, v5, v6, v7, v8, 7);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v76, v232, *(uint64_t *)&v180.f64[0], *(uint64_t *)&v180.f64[1], v16, v19, v184, v239, v21, v22, 7);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v168, v164, *(uint64_t *)&v77.f64[0], *(uint64_t *)&v77.f64[1], v201, v208, v214, v221, v78, v79, 7);
        specialized static ShaderVectorData.+= infix(_:_:)((uint64_t)&v250, (uint64_t *)&v245);
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v251, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v168, v164, *(uint64_t *)&v77.f64[0], *(uint64_t *)&v77.f64[1], v201, v208, v214, v221, v190, v195, 7);
        *(void *)a1 = *(void *)&v250.m11;
        *long long v25 = 0u;
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 56) = 0u;
        *(void *)(a1 + 72) = 0;
        *(unsigned char *)(a1 + 80) = 7;
        break;
      case 8:
        if (v9 != 8) {
          goto LABEL_36;
        }
        unsigned int v158 = LODWORD(v12.f64[1]);
        unint64_t v174 = HIDWORD(v20);
        unsigned int v240 = v20;
        *(float64x2_t *)&v250.m11 = v14;
        unint64_t v169 = HIDWORD(v17);
        *(float64x2_t *)&v250.m15 = v13;
        *(void *)&v250.m24 = v3;
        uint64_t v202 = HIDWORD(*(void *)&v12.f64[1]);
        *(void *)&v250.m31 = v4;
        unsigned int v80 = LODWORD(v12.f64[0]);
        *(void *)&v250.m33 = v5;
        unint64_t v215 = HIDWORD(*(void *)&v12.f64[0]);
        *(void *)&v250.m35 = v6;
        unsigned int v81 = LODWORD(v10.f64[1]);
        *(void *)&v250.m42 = v7;
        uint64_t v82 = HIDWORD(*(void *)&v10.f64[1]);
        *(void *)&v250.m44 = v8;
        unsigned int v83 = LODWORD(v10.f64[0]);
        unint64_t v84 = HIDWORD(*(void *)&v10.f64[0]);
        unsigned int v185 = v17;
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v251, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        *(void *)&long long v245 = __PAIR64__(v84, v83);
        *((void *)&v245 + 1) = __PAIR64__(v82, v81);
        *(void *)&long long v246 = __PAIR64__(v215, v80);
        *((void *)&v246 + 1) = __PAIR64__(v202, v158);
        *(void *)&long long v247 = v16;
        *((void *)&v247 + 1) = v19;
        *(void *)&long long v248 = __PAIR64__(v169, v185);
        *((void *)&v248 + 1) = __PAIR64__(v174, v240);
        *(void *)&long long v249 = v21;
        *((void *)&v249 + 1) = v22;
        _ColorMatrix.add(_:)(&v250);
        long long v85 = v246;
        *(_OWORD *)a1 = v245;
        *(_OWORD *)(a1 + 16) = v85;
        long long v86 = v248;
        *(_OWORD *)(a1 + 32) = v247;
        *(_OWORD *)(a1 + 48) = v86;
        *(_OWORD *)(a1 + 64) = v249;
        *(unsigned char *)(a1 + 80) = 8;
        break;
      case 9:
        float64x2_t v87 = v14;
        float64x2_t v88 = v13;
        uint64_t v89 = v3;
        uint64_t v90 = v4;
        uint64_t v91 = v5;
        uint64_t v92 = v6;
        uint64_t v93 = v7;
        uint64_t v94 = v8;
        float64x2_t v229 = v13;
        float64x2_t v241 = v14;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v14.f64[0], *(uint64_t *)&v14.f64[1], *(uint64_t *)&v13.f64[0], *(uint64_t *)&v13.f64[1], v3, v4, v5, v6, v7, v8, v9);
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v251, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        *(float64x2_t *)a1 = v241;
        *(float64x2_t *)(a1 + 16) = v229;
        *(void *)(a1 + 32) = v89;
        *(void *)(a1 + 40) = v90;
        *(void *)(a1 + 48) = v91;
        *(void *)(a1 + 56) = v92;
        *(void *)(a1 + 64) = v93;
        *(void *)(a1 + 72) = v94;
        *(unsigned char *)(a1 + 80) = v9;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v87.f64[0], *(uint64_t *)&v87.f64[1], *(uint64_t *)&v88.f64[0], *(uint64_t *)&v88.f64[1], v89, v90, v91, v92, v93, v94, v9);
        break;
      default:
        if (v9)
        {
LABEL_36:
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v14.f64[0], *(uint64_t *)&v14.f64[1], *(uint64_t *)&v13.f64[0], *(uint64_t *)&v13.f64[1], v3, v4, v5, v6, v7, v8, v9);
          goto LABEL_46;
        }
        float32x2_t v26 = (float32x2_t)vmovn_s64((int64x2_t)v10);
        float32x2_t v27 = (float32x2_t)vmovn_s64((int64x2_t)v14);
        int64x2_t v222 = (int64x2_t)v10;
        int64x2_t v233 = (int64x2_t)v14;
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v251, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        float32x2_t v28 = vadd_f32(v27, v26);
        v29.i64[0] = v28.u32[0];
        v29.i64[1] = v28.u32[1];
        *(int8x16_t *)a1 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v233, 0x20uLL), (float32x2_t)vshrn_n_s64(v222, 0x20uLL)), 0x20uLL), v29);
        *(_OWORD *)uint64_t v11 = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(unsigned char *)(v11 + 64) = 0;
        break;
    }
  }
}

uint64_t specialized static _ShapeStyle_Pack.AnimatableData.+= infix(_:_:)(uint64_t result, uint64_t *a2)
{
  uint64_t v36 = *a2;
  uint64_t v35 = *(void *)(*a2 + 16);
  if (v35)
  {
    float v2 = (void *)result;
    uint64_t v3 = *(void **)result;
    int64_t v4 = *(void *)(*(void *)result + 16);
    if (v4)
    {
      float32x2_t v27 = (void *)result;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_31:
      }
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      unint64_t v5 = 0;
      uint64_t result = 0;
      uint64_t v6 = v36 + 32;
      long long v38 = v3 + 4;
      float32x2_t v28 = v3;
      int64_t v29 = v4;
      while (1)
      {
        if ((unint64_t)result >= v3[2])
        {
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
        if (v5 >= *(void *)(v36 + 16)) {
          goto LABEL_30;
        }
        uint64_t v7 = (unsigned __int8 *)&v38[14 * result];
        unsigned int v8 = *v7;
        unsigned int v9 = v7[1];
        float64x2_t v10 = (unsigned __int8 *)(v6 + 112 * v5);
        unsigned int v11 = *v10;
        unsigned int v12 = v10[1];
        if (v8 == v11 && v9 == v12) {
          break;
        }
        BOOL v14 = v9 < v12 && v8 == v11;
        if (v8 >= v11 && !v14) {
          goto LABEL_21;
        }
        if (++result >= v4) {
          goto LABEL_23;
        }
LABEL_22:
        if ((uint64_t)v5 >= v35)
        {
LABEL_23:
          void *v27 = v3;
          if (v4 >= result) {
            return specialized Array.replaceSubrange<A>(_:with:)(result, v4);
          }
          __break(1u);
          return result;
        }
      }
      uint64_t v16 = v6 + 112 * v5;
      uint64_t v37 = result;
      uint64_t v18 = *(void *)(v16 + 8);
      uint64_t v17 = *(void *)(v16 + 16);
      uint64_t v19 = *(void *)(v16 + 32);
      uint64_t v20 = *(void *)(v16 + 40);
      uint64_t v21 = *(void *)(v16 + 48);
      uint64_t v22 = *(void *)(v16 + 56);
      uint64_t v23 = *(void *)(v16 + 64);
      uint64_t v30 = *(void *)(v16 + 72);
      uint64_t v31 = *(void *)(v16 + 80);
      char v32 = *(unsigned char *)(v16 + 88);
      float v24 = *(float *)(v16 + 96);
      uint64_t v25 = *(void *)(v16 + 104);
      uint64_t v33 = *(void *)(v16 + 24);
      unint64_t v34 = v5;
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v18, v17, v33, v19, v20, v21, v22, v23, v30, v31, v32);
      float32x2_t v26 = (float *)&v38[14 * v37];
      swift_bridgeObjectRetain();
      v39[0] = v18;
      v39[1] = v17;
      v39[2] = v33;
      v39[3] = v19;
      v39[4] = v20;
      v39[5] = v21;
      v39[6] = v22;
      v39[7] = v23;
      v39[8] = v30;
      v39[9] = v31;
      char v40 = v32;
      specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)((uint64_t)(v26 + 2), (uint64_t)v39);
      v26[24] = v24 + v26[24];
      swift_bridgeObjectRetain();
      specialized static AnimatableArray.+= infix(_:_:)((uint64_t)(v26 + 26), v25);
      swift_bridgeObjectRelease();
      uint64_t v3 = v28;
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v18, v17, v33, v19, v20, v21, v22, v23, v30, v31, v32);
      int64_t v4 = v29;
      swift_bridgeObjectRelease();
      unint64_t v5 = v34;
      uint64_t v6 = v36 + 32;
      uint64_t result = v37 + 1;
LABEL_21:
      ++v5;
      if (result >= v4) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
    swift_bridgeObjectRelease();
    *float v2 = v36;
    return swift_bridgeObjectRetain();
  }
  return result;
}

void specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 72);
  int v9 = *(unsigned __int8 *)(a2 + 80);
  float64x2_t v10 = *(float64x2_t *)a1;
  uint64_t v11 = a1 + 16;
  float64x2_t v12 = *(float64x2_t *)(a1 + 16);
  float64x2_t v14 = *(float64x2_t *)a2;
  float64x2_t v13 = *(float64x2_t *)(a2 + 16);
  unint64_t v15 = a1 + 32;
  uint64_t v16 = *(uint64_t *)(a1 + 32);
  uint64_t v18 = (_OWORD *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v19 = *(uint64_t *)(a1 + 40);
  unint64_t v20 = *(void *)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v22 = *(void *)(a1 + 72);
  uint64_t v23 = *(unsigned __int8 *)(a1 + 80);
  v266[0] = *(_OWORD *)a1;
  v266[1] = v12;
  uint64_t v267 = v16;
  uint64_t v268 = v19;
  uint64_t v269 = v17;
  unint64_t v270 = v20;
  uint64_t v271 = v21;
  uint64_t v272 = v22;
  char v273 = v23;
  float64x2_t v274 = v14;
  float64x2_t v275 = v13;
  uint64_t v276 = v3;
  uint64_t v277 = v4;
  uint64_t v278 = v5;
  uint64_t v279 = v6;
  uint64_t v280 = v7;
  uint64_t v281 = v8;
  char v282 = v9;
  if (v9 == 9
    && (int8x16_t v24 = vorrq_s8((int8x16_t)v13, (int8x16_t)v14),
        !(v4 | *(void *)&vorr_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)) | v5 | v3 | v6 | v7 | v8)))
  {
    outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v10.f64[0], *(uint64_t *)&v10.f64[1], *(uint64_t *)&v12.f64[0], *(uint64_t *)&v12.f64[1], v16, v19, v17, v20, v21, v22, v23);
LABEL_53:
    outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v266, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
  }
  else
  {
    switch(v23)
    {
      case 1:
        if (v9 != 1) {
          goto LABEL_43;
        }
        int64x2_t v238 = (int64x2_t)v14;
        int64x2_t v199 = (int64x2_t)v10;
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v266, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        float32x2_t v29 = vsub_f32((float32x2_t)vmovn_s64(v199), (float32x2_t)vmovn_s64(v238));
        v30.i64[0] = v29.u32[0];
        v30.i64[1] = v29.u32[1];
        *(int8x16_t *)a1 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(v199, 0x20uLL), (float32x2_t)vshrn_n_s64(v238, 0x20uLL)), 0x20uLL), v30);
        *(_OWORD *)uint64_t v11 = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(unsigned char *)(a1 + 80) = 1;
        return;
      case 2:
        if (v9 == 2)
        {
          *(void *)&v265.m24 = v16;
          LOBYTE(v265.m31) = v19;
          *(float64x2_t *)&v265.m11 = vsubq_f64(v10, v14);
          *(float64x2_t *)&v265.m15 = vsubq_f64(v12, v13);
          uint64_t v253 = v4;
          *(void *)&long long v260 = v3;
          BYTE8(v260) = v4;
          float64x2_t v31 = v14;
          uint64_t v175 = *(void *)&v13.f64[0];
          uint64_t v212 = v5;
          uint64_t v218 = *(void *)&v13.f64[1];
          uint64_t v230 = v3;
          uint64_t v239 = *(void *)&v14.f64[1];
          uint64_t v224 = v6;
          uint64_t v32 = v7;
          uint64_t v246 = v7;
          uint64_t v33 = v8;
          uint64_t v207 = v8;
          uint64_t v190 = v20;
          int64x2_t v185 = (int64x2_t)v12;
          float64x2_t v200 = v10;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v14.f64[0], *(uint64_t *)&v14.f64[1], *(uint64_t *)&v13.f64[0], *(uint64_t *)&v13.f64[1], v3, v4, v5, v6, v7, v8, 2);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v200.f64[0], *(uint64_t *)&v200.f64[1], v185.i64[0], v185.i64[1], v16, v19, v17, v190, v21, v22, 2);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v31.f64[0], *(uint64_t *)&v31.f64[1], v175, v218, v230, v253, v212, v224, v32, v33, 2);
          ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v260, -1.0);
          outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v266, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v31.f64[0], v239, v175, v218, v230, v253, v212, v224, v246, v207, 2);
          uint64_t v34 = *(void *)&v265.m24;
          uint64_t m31_low = LOBYTE(v265.m31);
          long long v36 = *(_OWORD *)&v265.m15;
          *(_OWORD *)a1 = *(_OWORD *)&v265.m11;
          *(_OWORD *)(a1 + 16) = v36;
          *(void *)(a1 + 32) = v34;
          *(void *)(a1 + 40) = m31_low;
          _OWORD *v18 = 0u;
          v18[1] = 0u;
          *(unsigned char *)(a1 + 80) = 2;
          return;
        }
        uint64_t v153 = v21;
        uint64_t v158 = v22;
        uint64_t v88 = v3;
        uint64_t v89 = v4;
        uint64_t v90 = v5;
        uint64_t v91 = v17;
        uint64_t v92 = v6;
        uint64_t v93 = v7;
        uint64_t v94 = v8;
        int64x2_t v222 = (int64x2_t)v13;
        float64x2_t v243 = v14;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v10.f64[0], *(uint64_t *)&v10.f64[1], *(uint64_t *)&v12.f64[0], *(uint64_t *)&v12.f64[1], v16, v19, v91, v20, v153, v158, 2);
        goto LABEL_52;
      case 3:
        uint64_t v37 = *(void *)&v13.f64[1];
        if (v9 == 3)
        {
          uint64_t v163 = *(void *)&v12.f64[1];
          uint64_t v169 = *(void *)&v12.f64[0];
          uint64_t v186 = *(void *)&v13.f64[0];
          double v38 = *(double *)&v3;
          double v39 = *(double *)&v4;
          *(float64_t *)&v265.m15 = v12.f64[0];
          LOBYTE(v265.m22) = LOBYTE(v12.f64[1]);
          *(void *)&v265.m24 = v16;
          *(void *)&v265.m31 = v19;
          *(float64x2_t *)&v265.m11 = vsubq_f64(v10, v14);
          *(float64_t *)&long long v260 = v13.f64[0];
          BYTE8(v260) = LOBYTE(v13.f64[1]);
          uint64_t v213 = v5;
          uint64_t v219 = *(void *)&v14.f64[0];
          uint64_t v231 = v3;
          uint64_t v240 = *(void *)&v14.f64[1];
          uint64_t v247 = v7;
          uint64_t v254 = v4;
          uint64_t v40 = *(void *)&v13.f64[1];
          uint64_t v179 = *(void *)&v13.f64[1];
          uint64_t v225 = v6;
          uint64_t v41 = v7;
          uint64_t v42 = v8;
          uint64_t v208 = v8;
          uint64_t v191 = v20;
          float64x2_t v201 = v10;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v14.f64[0], *(uint64_t *)&v14.f64[1], *(uint64_t *)&v13.f64[0], *(uint64_t *)&v13.f64[1], v3, v4, v5, v6, v7, v8, 3);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v219, v240, v186, v40, v231, v254, v213, v225, v41, v42, 3);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v201.f64[0], *(uint64_t *)&v201.f64[1], v169, v163, v16, v19, v17, v191, v21, v22, 3);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v219, v240, v186, v179, v231, v254, v213, v225, v247, v208, 3);
          ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v260, -1.0);
          outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v266, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v219, v240, v186, v179, v231, v254, v213, v225, v247, v208, 3);
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v219, v240, v186, v179, v231, v254, v213, v225, v247, v208, 3);
          uint64_t v43 = *(void *)&v265.m15;
          uint64_t m22_low = LOBYTE(v265.m22);
          *(_OWORD *)a1 = *(_OWORD *)&v265.m11;
          *(void *)(a1 + 16) = v43;
          *(void *)(a1 + 24) = m22_low;
          *(double *)(a1 + 32) = *(double *)&v16 - v38;
          *(double *)(a1 + 40) = *(double *)&v19 - v39;
          _OWORD *v18 = 0u;
          v18[1] = 0u;
          *(unsigned char *)(a1 + 80) = 3;
          return;
        }
        uint64_t v96 = *(void *)&v10.f64[1];
        uint64_t v95 = *(void *)&v10.f64[0];
        uint64_t v98 = *(void *)&v12.f64[1];
        uint64_t v97 = *(void *)&v12.f64[0];
        char v99 = 3;
        goto LABEL_49;
      case 4:
        uint64_t v37 = *(void *)&v13.f64[1];
        if (v9 == 4)
        {
          uint64_t v164 = *(void *)&v12.f64[1];
          uint64_t v170 = *(void *)&v12.f64[0];
          uint64_t v187 = *(void *)&v13.f64[0];
          double v45 = *(double *)&v3;
          double v46 = *(double *)&v4;
          *(float64_t *)&v265.m15 = v12.f64[0];
          LOBYTE(v265.m22) = LOBYTE(v12.f64[1]);
          *(void *)&v265.m24 = v16;
          *(void *)&v265.m31 = v19;
          *(float64x2_t *)&v265.m11 = vsubq_f64(v10, v14);
          *(float64_t *)&long long v260 = v13.f64[0];
          BYTE8(v260) = LOBYTE(v13.f64[1]);
          uint64_t v214 = v5;
          uint64_t v220 = *(void *)&v14.f64[0];
          uint64_t v232 = v3;
          uint64_t v241 = *(void *)&v14.f64[1];
          uint64_t v248 = v7;
          uint64_t v255 = v4;
          uint64_t v47 = *(void *)&v13.f64[1];
          uint64_t v180 = *(void *)&v13.f64[1];
          uint64_t v226 = v6;
          uint64_t v48 = v7;
          uint64_t v49 = v8;
          uint64_t v209 = v8;
          uint64_t v192 = v20;
          float64x2_t v202 = v10;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v14.f64[0], *(uint64_t *)&v14.f64[1], *(uint64_t *)&v13.f64[0], *(uint64_t *)&v13.f64[1], v3, v4, v5, v6, v7, v8, 4);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v220, v241, v187, v47, v232, v255, v214, v226, v48, v49, 4);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v202.f64[0], *(uint64_t *)&v202.f64[1], v170, v164, v16, v19, v17, v192, v21, v22, 4);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v220, v241, v187, v180, v232, v255, v214, v226, v248, v209, 4);
          ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v260, -1.0);
          outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v266, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v220, v241, v187, v180, v232, v255, v214, v226, v248, v209, 4);
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v220, v241, v187, v180, v232, v255, v214, v226, v248, v209, 4);
          uint64_t v50 = *(void *)&v265.m15;
          uint64_t v51 = LOBYTE(v265.m22);
          *(_OWORD *)a1 = *(_OWORD *)&v265.m11;
          *(void *)(a1 + 16) = v50;
          *(void *)(a1 + 24) = v51;
          *(double *)(a1 + 32) = *(double *)&v16 - v45;
          *(double *)(a1 + 40) = *(double *)&v19 - v46;
          _OWORD *v18 = 0u;
          v18[1] = 0u;
          *(unsigned char *)(a1 + 80) = 4;
          return;
        }
        uint64_t v96 = *(void *)&v10.f64[1];
        uint64_t v95 = *(void *)&v10.f64[0];
        uint64_t v98 = *(void *)&v12.f64[1];
        uint64_t v97 = *(void *)&v12.f64[0];
        char v99 = 4;
        goto LABEL_49;
      case 5:
        uint64_t v37 = *(void *)&v13.f64[1];
        if (v9 == 5)
        {
          uint64_t v165 = *(void *)&v12.f64[1];
          uint64_t v171 = *(void *)&v12.f64[0];
          uint64_t v188 = *(void *)&v13.f64[0];
          double v52 = *(double *)&v3;
          double v53 = *(double *)&v4;
          *(float64_t *)&v265.m15 = v12.f64[0];
          LOBYTE(v265.m22) = LOBYTE(v12.f64[1]);
          *(void *)&v265.m24 = v16;
          *(void *)&v265.m31 = v19;
          *(float64x2_t *)&v265.m11 = vsubq_f64(v10, v14);
          *(float64_t *)&long long v260 = v13.f64[0];
          BYTE8(v260) = LOBYTE(v13.f64[1]);
          uint64_t v215 = v5;
          uint64_t v221 = *(void *)&v14.f64[0];
          uint64_t v233 = v3;
          uint64_t v242 = *(void *)&v14.f64[1];
          uint64_t v249 = v7;
          uint64_t v256 = v4;
          uint64_t v54 = *(void *)&v13.f64[1];
          uint64_t v181 = *(void *)&v13.f64[1];
          uint64_t v227 = v6;
          uint64_t v55 = v7;
          uint64_t v56 = v8;
          uint64_t v210 = v8;
          uint64_t v193 = v20;
          float64x2_t v203 = v10;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v14.f64[0], *(uint64_t *)&v14.f64[1], *(uint64_t *)&v13.f64[0], *(uint64_t *)&v13.f64[1], v3, v4, v5, v6, v7, v8, 5);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v221, v242, v188, v54, v233, v256, v215, v227, v55, v56, 5);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v203.f64[0], *(uint64_t *)&v203.f64[1], v171, v165, v16, v19, v17, v193, v21, v22, 5);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v221, v242, v188, v181, v233, v256, v215, v227, v249, v210, 5);
          ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v260, -1.0);
          outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v266, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v221, v242, v188, v181, v233, v256, v215, v227, v249, v210, 5);
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v221, v242, v188, v181, v233, v256, v215, v227, v249, v210, 5);
          uint64_t v57 = *(void *)&v265.m15;
          uint64_t v58 = LOBYTE(v265.m22);
          *(_OWORD *)a1 = *(_OWORD *)&v265.m11;
          *(void *)(a1 + 16) = v57;
          *(void *)(a1 + 24) = v58;
          *(double *)(a1 + 32) = *(double *)&v16 - v52;
          *(double *)(a1 + 40) = *(double *)&v19 - v53;
          _OWORD *v18 = 0u;
          v18[1] = 0u;
          *(unsigned char *)(a1 + 80) = 5;
          return;
        }
        uint64_t v96 = *(void *)&v10.f64[1];
        uint64_t v95 = *(void *)&v10.f64[0];
        uint64_t v98 = *(void *)&v12.f64[1];
        uint64_t v97 = *(void *)&v12.f64[0];
        char v99 = 5;
LABEL_49:
        uint64_t v154 = v21;
        uint64_t v159 = v22;
        uint64_t v100 = v3;
        uint64_t v101 = v4;
        uint64_t v102 = v5;
        uint64_t v103 = v17;
        uint64_t v104 = v6;
        uint64_t v105 = v7;
        uint64_t v106 = v8;
        uint64_t v223 = *(void *)&v13.f64[0];
        float64x2_t v244 = v14;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v95, v96, v97, v98, v16, v19, v103, v20, v154, v159, v99);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v244.f64[0], *(uint64_t *)&v244.f64[1], v223, v37, v100, v101, v102, v104, v105, v106, v9);
        goto LABEL_53;
      case 6:
        int64x2_t v222 = (int64x2_t)v13;
        uint64_t v59 = v8;
        uint64_t v250 = v7;
        uint64_t v257 = v4;
        uint64_t v228 = v6;
        uint64_t v234 = v3;
        uint64_t v216 = v5;
        if (v9 != 6)
        {
          float64x2_t v245 = v14;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v10.f64[0], *(uint64_t *)&v10.f64[1], *(uint64_t *)&v12.f64[0], *(uint64_t *)&v12.f64[1], v16, v19, v17, v20, v21, v22, 6);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v245.f64[0], *(uint64_t *)&v245.f64[1], v222.i64[0], v222.i64[1], v234, v257, v216, v228, v250, v59, v9);
          goto LABEL_53;
        }
        uint64_t v60 = *(void *)&v14.f64[0];
        if (*(void *)(*(void *)&v14.f64[0] + 16) >= *(void *)(*(void *)&v10.f64[0] + 16)) {
          uint64_t v61 = *(void **)(*(void *)&v10.f64[0] + 16);
        }
        else {
          uint64_t v61 = *(void **)(*(void *)&v14.f64[0] + 16);
        }
        int64x2_t v184 = (int64x2_t)v12;
        uint64_t v152 = v21;
        uint64_t v157 = v22;
        uint64_t v22 = *(void *)&v10.f64[1];
        uint64_t v62 = *(char **)&v10.f64[0];
        uint64_t v63 = v19;
        uint64_t v19 = *(uint64_t *)&v14.f64[1];
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v10.f64[0], *(uint64_t *)&v10.f64[1], *(uint64_t *)&v12.f64[0], *(uint64_t *)&v12.f64[1], v16, v63, v17, v20, v152, v157, 6);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v60, v19, v222.i64[0], v222.i64[1], v234, v257, v216, v228, v250, v59, 6);
        if (!v61) {
          goto LABEL_84;
        }
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_133;
        }
        goto LABEL_23;
      case 7:
        uint64_t v60 = *(void *)&v10.f64[0];
        int64x2_t v222 = (int64x2_t)v13;
        float64x2_t v243 = v14;
        if (v9 != 7)
        {
          uint64_t v155 = v21;
          uint64_t v160 = v22;
          uint64_t v88 = v3;
          uint64_t v89 = v4;
          uint64_t v90 = v5;
          uint64_t v107 = v17;
          uint64_t v92 = v6;
          uint64_t v93 = v7;
          uint64_t v94 = v8;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v10.f64[0], *(uint64_t *)&v10.f64[1], *(uint64_t *)&v12.f64[0], *(uint64_t *)&v12.f64[1], v16, v19, v107, v20, v155, v160, 7);
LABEL_52:
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v243.f64[0], *(uint64_t *)&v243.f64[1], v222.i64[0], v222.i64[1], v88, v89, v90, v92, v93, v94, v9);
          goto LABEL_53;
        }
        uint64_t v69 = *(void *)&v14.f64[0];
        uint64_t v61 = *(void **)(*(void *)&v10.f64[0] + 16);
        unint64_t v15 = *(void *)(*(void *)&v14.f64[0] + 16);
        uint64_t v229 = v6;
        uint64_t v235 = v3;
        uint64_t v211 = v8;
        uint64_t v217 = v5;
        uint64_t v251 = v7;
        uint64_t v258 = v4;
        uint64_t v182 = a1 + 8;
        if (v61 == (void *)v15)
        {
          uint64_t v166 = *(void *)&v13.f64[0];
          uint64_t v172 = *(void *)&v14.f64[1];
          uint64_t v176 = *(void *)&v13.f64[1];
          uint64_t v70 = v6;
          uint64_t v194 = v20;
          int64x2_t v184 = (int64x2_t)v12;
          uint64_t v205 = *(void *)&v10.f64[1];
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v14.f64[0], *(uint64_t *)&v14.f64[1], *(uint64_t *)&v13.f64[0], *(uint64_t *)&v13.f64[1], v3, v4, v5, v6, v7, v8, 7);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v60, v205, v184.i64[0], v184.i64[1], v16, v19, v17, v194, v21, v22, 7);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v69, v172, v166, v176, v235, v258, v217, v70, v251, v211, 7);
          uint64_t v62 = (char *)v69;
          if (v61)
          {
            unint64_t v71 = (void *)v60;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v60);
            }
            unint64_t v72 = 0;
            uint64_t v22 = 0;
            do
            {
              uint64_t v73 = *(void *)&v62[v72 + 32];
              uint64_t v60 = *(void *)&v62[v72 + 40];
              unint64_t v15 = v62[v72 + 48];
              outlined copy of ShaderVectorData.Element(v73, v60, v62[v72 + 48]);
              if ((unint64_t)v22 >= v71[2])
              {
                while (1)
                {
                  __break(1u);
LABEL_132:
                  __break(1u);
LABEL_133:
                  uint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v62);
LABEL_23:
                  unint64_t v64 = *((void *)v62 + 2);
                  unint64_t v65 = (unint64_t)v61 - 1;
                  if ((unint64_t)v61 - 1 >= v64) {
                    unint64_t v66 = *((void *)v62 + 2);
                  }
                  else {
                    unint64_t v66 = (unint64_t)v61 - 1;
                  }
                  if (v66 <= 7) {
                    goto LABEL_31;
                  }
                  if (v65 >= v64) {
                    unint64_t v65 = *((void *)v62 + 2);
                  }
                  uint64_t v67 = 4 * v65 + 36;
                  if ((unint64_t)(v62 + 32) >= v60 + v67 || v60 + 32 >= (unint64_t)&v62[v67])
                  {
                    unint64_t v124 = v66 + 1;
                    uint64_t v125 = v124 & 7;
                    if ((v124 & 7) == 0) {
                      uint64_t v125 = 8;
                    }
                    unint64_t v68 = v124 - v125;
                    uint64_t v126 = (float32x4_t *)(v60 + 48);
                    unint64_t v127 = (float32x4_t *)(v62 + 48);
                    unint64_t v128 = v68;
                    do
                    {
                      float32x4_t v129 = vsubq_f32(*v127, *v126);
                      v127[-1] = vsubq_f32(v127[-1], v126[-1]);
                      *unint64_t v127 = v129;
                      v126 += 2;
                      v127 += 2;
                      v128 -= 8;
                    }
                    while (v128);
                  }
                  else
                  {
LABEL_31:
                    unint64_t v68 = 0;
                  }
                  while (v68 < v64)
                  {
                    uint64_t v130 = 4 * v68;
                    uint64_t v131 = v60 + 4 * v68++;
                    *(float *)&v62[v130 + 32] = *(float *)&v62[v130 + 32] - *(float *)(v131 + 32);
                    if (v61 == (void *)v68)
                    {
                      swift_bridgeObjectRelease();
LABEL_84:
                      BOOL v132 = (void *)v22;
                      if (*(void *)(v19 + 16) >= *(void *)(v22 + 16)) {
                        uint64_t v133 = *(void *)(v22 + 16);
                      }
                      else {
                        uint64_t v133 = *(void *)(v19 + 16);
                      }
                      if (v133)
                      {
                        swift_bridgeObjectRetain();
                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                          BOOL v132 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v22);
                        }
                        unint64_t v134 = v132[2];
                        unint64_t v135 = v133 - 1;
                        if (v133 - 1 >= v134) {
                          unint64_t v136 = v132[2];
                        }
                        else {
                          unint64_t v136 = v133 - 1;
                        }
                        if (v136 <= 0xF) {
                          goto LABEL_115;
                        }
                        uint64_t v137 = (float *)(v132 + 4);
                        unint64_t v138 = v135 >= v134 ? v132[2] : v133 - 1;
                        BOOL v139 = &v137[4 * v138] >= v137 && (char *)&v132[2 * v138 + 4] + 4 >= (char *)v132 + 36;
                        BOOL v140 = v139 && (char *)&v132[2 * v138 + 5] + 4 >= (char *)v132 + 44;
                        BOOL v141 = v140 && &v132[2 * v138 + 5] >= v132 + 5;
                        unint64_t v142 = v138 >> 60;
                        if (!v141 || v142 != 0) {
                          goto LABEL_115;
                        }
                        unint64_t v144 = (const float *)(v19 + 32);
                        if (v135 >= v134) {
                          unint64_t v135 = v132[2];
                        }
                        uint64_t v145 = 16 * v135 + 48;
                        if ((unint64_t)v137 >= v19 + v145 || v144 >= (const float *)((char *)v132 + v145))
                        {
                          unint64_t v149 = v136 + 1;
                          uint64_t v150 = v149 & 3;
                          if ((v149 & 3) == 0) {
                            uint64_t v150 = 4;
                          }
                          unint64_t v146 = v149 - v150;
                          unint64_t v151 = v146;
                          do
                          {
                            float32x4x4_t v283 = vld4q_f32(v144);
                            v144 += 16;
                            float32x4x4_t v284 = vld4q_f32(v137);
                            v285.val[0] = vsubq_f32(v284.val[0], v283.val[0]);
                            v285.val[1] = vsubq_f32(v284.val[1], v283.val[1]);
                            v285.val[2] = vsubq_f32(v284.val[2], v283.val[2]);
                            v285.val[3] = vsubq_f32(v284.val[3], v283.val[3]);
                            vst4q_f32(v137, v285);
                            v137 += 16;
                            v151 -= 4;
                          }
                          while (v151);
                        }
                        else
                        {
LABEL_115:
                          unint64_t v146 = 0;
                        }
                        do
                        {
                          if (v146 >= v134) {
                            goto LABEL_130;
                          }
                          *(float32x4_t *)&v132[2 * v146 + 4] = vsubq_f32(*(float32x4_t *)&v132[2 * v146 + 4], *(float32x4_t *)(v19 + 16 * v146 + 32));
                          ++v146;
                        }
                        while (v133 != v146);
                        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v266, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v266, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
                      }
                      float32x2_t v147 = vsub_f32((float32x2_t)vmovn_s64(v184), (float32x2_t)vmovn_s64(v222));
                      *(void *)a1 = v62;
                      *(void *)(a1 + 8) = v132;
                      v148.i64[0] = v147.u32[0];
                      v148.i64[1] = v147.u32[1];
                      *(int8x16_t *)(a1 + 16) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(v184, 0x20uLL), (float32x2_t)vshrn_n_s64(v222, 0x20uLL)), 0x20uLL), v148);
                      *(_OWORD *)unint64_t v15 = 0u;
                      *(_OWORD *)(v15 + 16) = 0u;
                      *(_OWORD *)(v15 + 32) = 0u;
                      *(unsigned char *)(a1 + 80) = 6;
                      return;
                    }
                  }
                  __break(1u);
LABEL_130:
                  __break(1u);
                }
              }
              ++v22;
              specialized static ShaderVectorData.Element.-= infix(_:_:)((int64x2_t *)&v71[v72 / 8 + 4], v73, v60, v15);
              outlined consume of ShaderVectorData.Element(v73, v60, v15);
              v72 += 24;
            }
            while (v61 != (void *)v22);
          }
          else
          {
            unint64_t v71 = (void *)v60;
          }
        }
        else
        {
          uint64_t v174 = *(void *)&v14.f64[0];
          uint64_t v177 = *(void *)&v10.f64[0];
          if (v61)
          {
            uint64_t v161 = *(void *)&v13.f64[0];
            uint64_t v162 = *(void *)&v14.f64[1];
            uint64_t v167 = *(void *)&v13.f64[1];
            uint64_t v108 = v3;
            uint64_t v109 = v5;
            uint64_t v110 = v6;
            uint64_t v196 = v20;
            float64x2_t v189 = v12;
            uint64_t v206 = *(void *)&v10.f64[1];
            outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v14.f64[0], *(uint64_t *)&v14.f64[1], *(uint64_t *)&v13.f64[0], *(uint64_t *)&v13.f64[1], v3, v4, v5, v6, v7, v8, 7);
            uint64_t v156 = v21;
            uint64_t v62 = (char *)v174;
            uint64_t v111 = v16;
            unint64_t v71 = (void *)v177;
            outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v177, v206, *(uint64_t *)&v189.f64[0], *(uint64_t *)&v189.f64[1], v111, v19, v17, v196, v156, v22, 7);
            outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v174, v162, v161, v167, v108, v258, v109, v110, v251, v211, 7);
          }
          else
          {
            uint64_t v62 = *(char **)&v14.f64[0];
            swift_bridgeObjectRetain_n();
            if (v15)
            {
              unint64_t v71 = (void *)v174;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v174);
              }
              unint64_t v112 = 0;
              uint64_t v113 = v71 + 4;
              uint64_t v178 = v71;
              v184.i64[0] = v15;
              uint64_t v168 = v71 + 4;
              while (2)
              {
                if (v112 >= v71[2]) {
                  goto LABEL_132;
                }
                uint64_t v61 = (void *)(v112 + 1);
                uint64_t v62 = (char *)&v113[3 * v112];
                int64x2_t v115 = *(int64x2_t *)v62;
                uint64_t v60 = v62[16];
                switch(v62[16])
                {
                  case 1:
                    unsigned long long v114 = v115.i32[0] ^ 0x80000000 | (unsigned __int128)((unint64_t)(v115.i32[1] ^ 0x80000000) << 32);
                    goto LABEL_62;
                  case 2:
                    *(void *)&unsigned long long v114 = v115.i32[0] ^ 0x80000000 | ((unint64_t)(v115.i32[1] ^ 0x80000000) << 32);
                    *((void *)&v114 + 1) = v115.i32[2] ^ 0x80000000;
                    goto LABEL_62;
                  case 3:
                    float32x2_t v116 = vneg_f32((float32x2_t)vmovn_s64(v115));
                    v117.i64[0] = v116.u32[0];
                    v117.i64[1] = v116.u32[1];
                    unsigned long long v114 = (unsigned __int128)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vneg_f32((float32x2_t)vshrn_n_s64(v115, 0x20uLL)), 0x20uLL), v117);
                    goto LABEL_62;
                  case 4:
                    uint64_t v118 = *(void *)v62;
                    uint64_t v19 = *(uint64_t *)(v115.i64[0] + 16);
                    if (*(double *)&v19 == 0.0)
                    {
                      outlined consume of ShaderVectorData.Element(v115.i64[0], v115.i64[1], 4);
                      uint64_t v22 = MEMORY[0x263F8EE78];
                    }
                    else
                    {
                      int64x2_t v204 = *(int64x2_t *)v62;
                      *(void *)&v265.m11 = MEMORY[0x263F8EE78];
                      swift_bridgeObjectRetain();
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
                      uint64_t v119 = v118;
                      uint64_t v22 = *(void *)&v265.m11;
                      uint64_t v197 = v119;
                      uint64_t v120 = (float *)(v119 + 32);
                      unint64_t v121 = *(void *)(*(void *)&v265.m11 + 16);
                      do
                      {
                        float v122 = *v120;
                        *(void *)&v265.m11 = v22;
                        unint64_t v123 = *(void *)(v22 + 24);
                        if (v121 >= v123 >> 1)
                        {
                          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v123 > 1, v121 + 1, 1);
                          uint64_t v22 = *(void *)&v265.m11;
                        }
                        *(void *)(v22 + 16) = v121 + 1;
                        *(float *)(v22 + 4 * v121 + 32) = -v122;
                        ++v120;
                        ++v121;
                        --v19;
                      }
                      while (*(double *)&v19 != 0.0);
                      outlined consume of ShaderVectorData.Element(v197, v204.i64[1], 4);
                      outlined consume of ShaderVectorData.Element(v197, v204.i64[1], 4);
                      unint64_t v71 = v178;
                      unint64_t v15 = v184.i64[0];
                      uint64_t v113 = v168;
                    }
                    unsigned long long v114 = (unint64_t)v22;
                    goto LABEL_62;
                  case 5:
                    goto LABEL_63;
                  default:
                    unsigned long long v114 = v115.u32[0] ^ (unsigned __int128)0x80000000uLL;
LABEL_62:
                    *(_OWORD *)uint64_t v62 = v114;
                    v62[16] = v60;
LABEL_63:
                    unint64_t v112 = (unint64_t)v61;
                    if (v61 != (void *)v15) {
                      continue;
                    }
                    uint64_t v62 = (char *)v174;
                    break;
                }
                break;
              }
            }
            else
            {
              unint64_t v71 = (void *)v174;
            }
          }
        }
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v266, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)v62, *(uint64_t *)&v243.f64[1], v222.i64[0], v222.i64[1], v235, v258, v217, v229, v251, v211, 7);
        *(void *)a1 = v71;
        *(_OWORD *)uint64_t v182 = 0u;
        *(_OWORD *)(v182 + 16) = 0u;
        *(_OWORD *)(v182 + 32) = 0u;
        *(_OWORD *)(v182 + 48) = 0u;
        *(void *)(v182 + 64) = 0;
        *(unsigned char *)(a1 + 80) = 7;
        break;
      case 8:
        if (v9 != 8) {
          goto LABEL_43;
        }
        unsigned int v173 = LODWORD(v12.f64[1]);
        unsigned int v195 = v20;
        unint64_t v183 = HIDWORD(v20);
        *(float64x2_t *)&v265.m11 = v14;
        *(float64x2_t *)&v265.m15 = v13;
        *(void *)&v265.m24 = v3;
        uint64_t v236 = HIDWORD(*(void *)&v12.f64[1]);
        *(void *)&v265.m31 = v4;
        unsigned int v74 = LODWORD(v12.f64[0]);
        *(void *)&v265.m33 = v5;
        unint64_t v259 = HIDWORD(*(void *)&v12.f64[0]);
        *(void *)&v265.m35 = v6;
        unsigned int v75 = LODWORD(v10.f64[1]);
        *(void *)&v265.m42 = v7;
        uint64_t v252 = HIDWORD(*(void *)&v10.f64[1]);
        *(void *)&v265.m44 = v8;
        unsigned int v76 = LODWORD(v10.f64[0]);
        unint64_t v77 = HIDWORD(*(void *)&v10.f64[0]);
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v266, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        *(void *)&long long v260 = __PAIR64__(v77, v76);
        *((void *)&v260 + 1) = __PAIR64__(v252, v75);
        *(void *)&long long v261 = __PAIR64__(v259, v74);
        *((void *)&v261 + 1) = __PAIR64__(v236, v173);
        *(void *)&long long v262 = v16;
        *((void *)&v262 + 1) = v19;
        *(void *)&long long v263 = v17;
        *((void *)&v263 + 1) = __PAIR64__(v183, v195);
        *(void *)&long long v264 = v21;
        *((void *)&v264 + 1) = v22;
        _ColorMatrix.subtract(_:)(&v265);
        long long v78 = v261;
        *(_OWORD *)a1 = v260;
        *(_OWORD *)(a1 + 16) = v78;
        long long v79 = v263;
        *(_OWORD *)(a1 + 32) = v262;
        *(_OWORD *)(a1 + 48) = v79;
        *(_OWORD *)(a1 + 64) = v264;
        *(unsigned char *)(a1 + 80) = 8;
        return;
      case 9:
        *(float64x2_t *)a1 = v14;
        *(float64x2_t *)(a1 + 16) = v13;
        *(void *)(a1 + 32) = v3;
        *(void *)(a1 + 40) = v4;
        *(void *)(a1 + 48) = v5;
        *(void *)(a1 + 56) = v6;
        *(void *)(a1 + 64) = v7;
        *(void *)(a1 + 72) = v8;
        *(unsigned char *)(a1 + 80) = v9;
        float64x2_t v80 = v14;
        float64x2_t v81 = v13;
        uint64_t v82 = v3;
        uint64_t v83 = v4;
        uint64_t v84 = v5;
        uint64_t v85 = v6;
        uint64_t v86 = v7;
        uint64_t v87 = v8;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v14.f64[0], *(uint64_t *)&v14.f64[1], *(uint64_t *)&v13.f64[0], *(uint64_t *)&v13.f64[1], v3, v4, v5, v6, v7, v8, v9);
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v80.f64[0], *(uint64_t *)&v80.f64[1], *(uint64_t *)&v81.f64[0], *(uint64_t *)&v81.f64[1], v82, v83, v84, v85, v86, v87, v9);
        _ShapeStyle_Pack.Fill.AnimatableData.negate()();
        goto LABEL_53;
      default:
        if (!v9)
        {
          float32x2_t v25 = (float32x2_t)vmovn_s64((int64x2_t)v10);
          float32x2_t v26 = (float32x2_t)vmovn_s64((int64x2_t)v14);
          int64x2_t v237 = (int64x2_t)v14;
          int64x2_t v198 = (int64x2_t)v10;
          outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v266, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
          float32x2_t v27 = vsub_f32(v25, v26);
          v28.i64[0] = v27.u32[0];
          v28.i64[1] = v27.u32[1];
          *(int8x16_t *)a1 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(v198, 0x20uLL), (float32x2_t)vshrn_n_s64(v237, 0x20uLL)), 0x20uLL), v28);
          *(_OWORD *)uint64_t v11 = 0u;
          *(_OWORD *)(v11 + 16) = 0u;
          *(_OWORD *)(v11 + 32) = 0u;
          *(_OWORD *)(v11 + 48) = 0u;
          *(unsigned char *)(v11 + 64) = 0;
          return;
        }
LABEL_43:
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v14.f64[0], *(uint64_t *)&v14.f64[1], *(uint64_t *)&v13.f64[0], *(uint64_t *)&v13.f64[1], v3, v4, v5, v6, v7, v8, v9);
        goto LABEL_53;
    }
  }
}

void specialized static _ShapeStyle_Pack.AnimatableData.-= infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v39 = *a2;
  uint64_t v2 = *(void *)(*a2 + 16);
  if (!v2) {
    return;
  }
  uint64_t v4 = *(void **)a1;
  int64_t v5 = *(void *)(*(void *)a1 + 16);
  if (!v5)
  {
    swift_bridgeObjectRelease();
    *(void *)a1 = v39;
    swift_bridgeObjectRetain();
    _ShapeStyle_Pack.AnimatableData.scale(by:)(-1.0);
    return;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_29:
  }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = v39 + 32;
  int v9 = v4 + 4;
  uint64_t v31 = v2;
  int64_t v32 = v5;
  int8x16_t v30 = v4;
  do
  {
    if ((unint64_t)v7 >= v4[2])
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (v6 >= *(void *)(v39 + 16)) {
      goto LABEL_28;
    }
    float64x2_t v10 = (unsigned __int8 *)&v9[14 * v7];
    unsigned int v11 = *v10;
    unsigned int v12 = v10[1];
    float64x2_t v13 = (unsigned __int8 *)(v8 + 112 * v6);
    unsigned int v14 = *v13;
    unsigned int v15 = v13[1];
    if (v11 == v14 && v12 == v15)
    {
      uint64_t v19 = v8 + 112 * v6;
      uint64_t v40 = v7;
      uint64_t v20 = *(void *)(v19 + 8);
      uint64_t v21 = *(void *)(v19 + 24);
      uint64_t v22 = *(void *)(v19 + 32);
      uint64_t v23 = *(void *)(v19 + 48);
      uint64_t v33 = *(void *)(v19 + 40);
      uint64_t v24 = *(void *)(v19 + 56);
      uint64_t v25 = *(void *)(v19 + 64);
      uint64_t v34 = *(void *)(v19 + 72);
      uint64_t v35 = *(void *)(v19 + 80);
      char v36 = *(unsigned char *)(v19 + 88);
      float v26 = *(float *)(v19 + 96);
      uint64_t v27 = *(void *)(v19 + 104);
      uint64_t v37 = *(void *)(v19 + 16);
      unint64_t v38 = v6;
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v20, v37, v21, v22, v33, v23, v24, v25, v34, v35, v36);
      int8x16_t v28 = (float *)&v9[14 * v40];
      swift_bridgeObjectRetain();
      v41[0] = v20;
      v41[1] = v37;
      v41[2] = v21;
      v41[3] = v22;
      v41[4] = v33;
      v41[5] = v23;
      v41[6] = v24;
      v41[7] = v25;
      v41[8] = v34;
      v41[9] = v35;
      char v42 = v36;
      specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:)((uint64_t)(v28 + 2), (uint64_t)v41);
      v28[24] = v28[24] - v26;
      swift_bridgeObjectRetain();
      specialized static AnimatableArray.-= infix(_:_:)((uint64_t)(v28 + 26), v27);
      swift_bridgeObjectRelease();
      uint64_t v4 = v30;
      int64_t v5 = v32;
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v20, v37, v21, v22, v33, v23, v24, v25, v34, v35, v36);
      uint64_t v2 = v31;
      swift_bridgeObjectRelease();
      unint64_t v6 = v38;
      uint64_t v8 = v39 + 32;
      uint64_t v7 = v40 + 1;
    }
    else
    {
      BOOL v17 = v12 < v15 && v11 == v14;
      if (v11 < v14 || v17)
      {
        if (++v7 >= v5) {
          break;
        }
        continue;
      }
    }
    ++v6;
    if (v7 >= v5) {
      break;
    }
  }
  while ((uint64_t)v6 < v2);
  *(void *)a1 = v4;
  if (v5 < v7)
  {
    __break(1u);
    JUMPOUT(0x245D0E668);
  }
  specialized Array.replaceSubrange<A>(_:with:)(v7, v5);
}

uint64_t specialized static _ShapeStyle_Pack.Style.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a1 + 80);
  float v3 = *(float *)(a1 + 84);
  uint64_t v4 = *(void *)(a1 + 88);
  int v5 = *(unsigned __int8 *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104);
  char v7 = *(unsigned char *)(a2 + 80);
  float v8 = *(float *)(a2 + 84);
  uint64_t v9 = *(void *)(a2 + 88);
  int v10 = *(unsigned __int8 *)(a2 + 96);
  uint64_t v11 = *(void *)(a2 + 104);
  long long v12 = *(_OWORD *)(a1 + 16);
  v19[0] = *(_OWORD *)a1;
  v19[1] = v12;
  long long v13 = *(_OWORD *)(a1 + 48);
  _DWORD v19[2] = *(_OWORD *)(a1 + 32);
  v19[3] = v13;
  float v19[4] = *(_OWORD *)(a1 + 64);
  char v20 = v2;
  long long v14 = *(_OWORD *)(a2 + 16);
  v17[0] = *(_OWORD *)a2;
  v17[1] = v14;
  long long v15 = *(_OWORD *)(a2 + 48);
  v17[2] = *(_OWORD *)(a2 + 32);
  v17[3] = v15;
  v17[4] = *(_OWORD *)(a2 + 64);
  char v18 = v7;
  if ((specialized static _ShapeStyle_Pack.Fill.== infix(_:_:)((uint64_t)v19, (uint64_t)v17) & 1) == 0 || v3 != v8) {
    return 0;
  }
  if (v5 == 255)
  {
    if (v10 == 255) {
      goto LABEL_13;
    }
LABEL_10:
    outlined copy of GraphicsBlendMode?(v9, v10);
    outlined copy of GraphicsBlendMode?(v4, v5);
    outlined consume of GraphicsBlendMode?(v4, v5);
    outlined consume of GraphicsBlendMode?(v9, v10);
    return 0;
  }
  if (v10 == 255) {
    goto LABEL_10;
  }
  if (v5)
  {
    if (v10)
    {
      outlined copy of GraphicsBlendMode?(v9, v10);
      outlined copy of GraphicsBlendMode?(v4, v5);
      outlined consume of GraphicsBlendMode(v4, 1);
      outlined consume of GraphicsBlendMode(v9, 1);
      if (v4 == v9) {
        goto LABEL_13;
      }
      return 0;
    }
    swift_unknownObjectRetain();
LABEL_17:
    outlined copy of GraphicsBlendMode(v9, v10 & 1);
    outlined consume of GraphicsBlendMode(v4, v5 & 1);
    outlined consume of GraphicsBlendMode(v9, v10 & 1);
    return 0;
  }
  if (v10) {
    goto LABEL_17;
  }
  outlined consume of GraphicsBlendMode(v4, 0);
  outlined consume of GraphicsBlendMode(v9, 0);
  if (v4 != v9) {
    return 0;
  }
LABEL_13:

  return specialized static Array<A>.== infix(_:_:)(v6, v11);
}

uint64_t specialized Array<A>.animatableData.setter(uint64_t result)
{
  char v2 = *(void **)v1;
  unint64_t v3 = *(void *)(result + 16);
  if (v3 >= *(void *)(*(void *)v1 + 16)) {
    uint64_t v4 = *(void *)(*(void *)v1 + 16);
  }
  else {
    uint64_t v4 = *(void *)(result + 16);
  }
  if (v4)
  {
    uint64_t v5 = result;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_25:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      char v2 = (void *)result;
    }
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    float v8 = (unsigned char *)(v5 + 80);
    unint64_t v28 = v3;
    do
    {
      if (v3 == v7)
      {
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      if (v7 >= v2[2]) {
        goto LABEL_24;
      }
      int64x2_t v13 = *(int64x2_t *)(v8 - 40);
      int8x16_t v14 = *(int8x16_t *)(v8 - 24);
      uint64_t v9 = *((void *)v8 - 1);
      char v15 = *v8;
      uint64_t v16 = (int8x16_t *)&v2[v6];
      LODWORD(v2[v6 + 10]) = *((_DWORD *)v8 - 12);
      int8x16_t v17 = 0uLL;
      if (v2[v6 + 9] & 0x10000000000) != 0 || (v15)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        char v11 = 1;
        int8x16_t v12 = 0uLL;
      }
      else
      {
        int8x16_t v33 = v14;
        uint64_t v5 = v16[4].u8[12];
        uint64_t v18 = v16[4].u32[2];
        if (one-time initialization token for legacyInterpolation != -1)
        {
          int64x2_t v32 = v13;
          swift_once();
          int64x2_t v13 = v32;
        }
        float32x2_t v31 = vmul_f32((float32x2_t)vmovn_s64(v13), (float32x2_t)0x3C0000003C000000);
        float v29 = *(float *)&v13.i32[1] * 0.0078125;
        float v30 = *(float *)&v13.i32[3] * 0.0078125;
        uint64_t result = swift_beginAccess();
        if (static Color.Resolved.legacyInterpolation)
        {
          float v20 = v30;
          float32x2_t v19 = v31;
          *(float *)v21.i32 = v29;
        }
        else
        {
          float v20 = v30;
          float v22 = v31.f32[0];
          float32x2_t v23 = (float32x2_t)__PAIR64__(v31.u32[1], LODWORD(v29));
          if (v30 != 0.0)
          {
            float v22 = v31.f32[0] * (float)(1.0 / v30);
            float32x2_t v23 = vmul_n_f32((float32x2_t)__PAIR64__(v31.u32[1], LODWORD(v29)), 1.0 / v30);
          }
          float v24 = v22 * (float)(v22 * v22);
          float32x2_t v25 = vmul_f32(v23, vmul_f32(v23, v23));
          float32x2_t v26 = vmul_f32(v25, (float32x2_t)0x3EAEC16A40270644);
          *(float *)v21.i32 = (float)(v26.f32[0] + (float)(v24 * -1.2684)) - v26.f32[1];
          float32x2_t v19 = vadd_f32(vmul_lane_f32((float32x2_t)0x3FDA931E3E6C8362, v25, 1), vadd_f32(vmul_n_f32((float32x2_t)0xBB897F53408274ABLL, v24), vmul_n_f32((float32x2_t)0xBF34133EC053B18CLL, v25.f32[0])));
        }
        char v11 = 0;
        uint64_t v10 = v18 | (v5 << 32);
        *(float *)&v21.i32[1] = v20;
        v27.i64[0] = v19.u32[0];
        v27.i64[1] = v19.u32[1];
        int8x16_t v17 = vorrq_s8((int8x16_t)vshll_n_s32(v21, 0x20uLL), v27);
        int8x16_t v12 = v33;
        unint64_t v3 = v28;
      }
      ++v7;
      v16[2] = v17;
      v16[3] = v12;
      v16[4].i64[0] = v9;
      v16[4].i32[2] = v10;
      v16[4].i8[12] = BYTE4(v10);
      v8 += 56;
      v6 += 9;
      v16[4].i8[13] = v11;
    }
    while (v4 != v7);
    *(void *)uint64_t v1 = v2;
  }
  return result;
}

uint64_t type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined release of _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<MeshGradient._Paint>(uint64_t a1)
{
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 104);
  char v9 = *(unsigned char *)(a1 + 112);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of _ShapeStyle_Pack.Fill(v13, v12, v11, v2, v3, v4, v5, v6, v7, v8, v9);
  return a1;
}

uint64_t outlined release of _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<AngularGradient._Paint>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  char v10 = *(unsigned char *)(a1 + 128);
  swift_bridgeObjectRelease();
  outlined consume of _ShapeStyle_Pack.Fill(v13, v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t outlined release of _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<LinearGradient._Paint>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  char v10 = *(unsigned char *)(a1 + 128);
  swift_bridgeObjectRelease();
  outlined consume of _ShapeStyle_Pack.Fill(v13, v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t outlined consume of ShaderVectorData.Element(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 4) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack.Key and conformance _ShapeStyle_Pack.Key()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Key and conformance _ShapeStyle_Pack.Key;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Key and conformance _ShapeStyle_Pack.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Key and conformance _ShapeStyle_Pack.Key);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in _ShapeStyle_Pack.Slice()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in _ShapeStyle_Pack.Slice()
{
  return lazy protocol witness table accessor for type Slice<_ShapeStyle_Pack.Slice> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_ShapeStyle_Pack.Slice> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in _ShapeStyle_Pack.Slice()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_1(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in _ShapeStyle_Pack.Slice()
{
  return lazy protocol witness table accessor for type Slice<_ShapeStyle_Pack.Slice> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_ShapeStyle_Pack.Slice> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice);
}

uint64_t lazy protocol witness table accessor for type Slice<_ShapeStyle_Pack.Slice> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<Shader.ResolvedShader>(255, &lazy cache variable for type metadata for Slice<_ShapeStyle_Pack.Slice>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice, (uint64_t)&type metadata for _ShapeStyle_Pack.Slice, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in _ShapeStyle_Pack.Slice()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_1(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in _ShapeStyle_Pack.Slice()
{
  return lazy protocol witness table accessor for type Slice<_ShapeStyle_Pack.Slice> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<_ShapeStyle_Pack.Slice> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<_ShapeStyle_Pack.Slice>, MEMORY[0x263F8E738]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _ShapeStyle_Pack.Slice()
{
  return lazy protocol witness table accessor for type Slice<_ShapeStyle_Pack.Slice> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<_ShapeStyle_Pack.Slice> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<_ShapeStyle_Pack.Slice>, MEMORY[0x263F8DE58]);
}

uint64_t lazy protocol witness table accessor for type Slice<_ShapeStyle_Pack.Slice> and conformance Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<Shader.ResolvedShader>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice, (uint64_t)&type metadata for _ShapeStyle_Pack.Slice, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<Shader.ResolvedShader>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t instantiation function for generic protocol witness table for _ShapeStyle_Pack.AnimatableData(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in _ShapeStyle_Pack.Style()
{
  return lazy protocol witness table accessor for type AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>);
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>> and conformance AnimatablePair<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in _ShapeStyle_Pack.Effect()
{
  return lazy protocol witness table accessor for type AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>);
}

uint64_t sub_245D0F3E0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(unsigned __int8 *)(result + 1);
  return result;
}

void *sub_245D0F3EC(void *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 1) = *result;
  return result;
}

uint64_t sub_245D0F400()
{
  return 0;
}

void sub_245D0F410(void *a1@<X8>)
{
  _ShapeStyle_Pack.animatableData.getter(&v2);
  *a1 = v2;
}

uint64_t sub_245D0F454(uint64_t *a1)
{
  uint64_t v2 = *a1;
  swift_bridgeObjectRetain();
  return _ShapeStyle_Pack.animatableData.setter(&v2);
}

uint64_t sub_245D0F4B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 40) == 1) {
    uint64_t result = swift_bridgeObjectRetain();
  }
  else {
    uint64_t result = MEMORY[0x263F8EE78];
  }
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack()
{
  return &type metadata for _ShapeStyle_Pack;
}

uint64_t initializeWithCopy for _ShapeStyle_Pack.Style(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 16);
  uint64_t v7 = *(void **)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v17 = *(void *)(a2 + 64);
  uint64_t v18 = *(void *)(a2 + 72);
  char v19 = *(unsigned char *)(a2 + 80);
  outlined copy of _ShapeStyle_Pack.Fill(*(id *)a2, v5, v6, v7, v8, v9, v10, v11, v17, v18, v19);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v17;
  *(void *)(a1 + 72) = v18;
  *(unsigned char *)(a1 + 80) = v19;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  uint64_t v12 = (uint64_t *)(a2 + 88);
  int v13 = *(unsigned __int8 *)(a2 + 96);
  if (v13 == 255)
  {
    *(void *)(a1 + 88) = *v12;
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  }
  else
  {
    char v14 = v13 & 1;
    uint64_t v15 = *v12;
    outlined copy of GraphicsBlendMode(*v12, v13 & 1);
    *(void *)(a1 + 88) = v15;
    *(unsigned char *)(a1 + 96) = v14;
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_Pack.Style(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 16);
  uint64_t v7 = *(void **)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v35 = *(void *)(a2 + 64);
  uint64_t v36 = *(void *)(a2 + 72);
  char v37 = *(unsigned char *)(a2 + 80);
  outlined copy of _ShapeStyle_Pack.Fill(*(id *)a2, v5, v6, v7, v8, v9, v10, v11, v35, v36, v37);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  char v22 = *(unsigned char *)(a1 + 80);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v35;
  *(void *)(a1 + 72) = v36;
  *(unsigned char *)(a1 + 80) = v37;
  outlined consume of _ShapeStyle_Pack.Fill(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  float32x2_t v23 = (uint64_t *)(a1 + 88);
  float v24 = (uint64_t *)(a2 + 88);
  int v25 = *(unsigned __int8 *)(a2 + 96);
  if (*(unsigned __int8 *)(a1 + 96) == 255)
  {
    if (v25 == 255)
    {
      uint64_t v27 = *v24;
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      *float32x2_t v23 = v27;
    }
    else
    {
      char v32 = v25 & 1;
      uint64_t v33 = *v24;
      outlined copy of GraphicsBlendMode(v33, v25 & 1);
      *(void *)(a1 + 88) = v33;
      *(unsigned char *)(a1 + 96) = v32;
    }
  }
  else if (v25 == 255)
  {
    outlined destroy of GraphicsBlendMode(a1 + 88);
    char v26 = *(unsigned char *)(a2 + 96);
    *float32x2_t v23 = *v24;
    *(unsigned char *)(a1 + 96) = v26;
  }
  else
  {
    char v28 = v25 & 1;
    uint64_t v29 = *v24;
    outlined copy of GraphicsBlendMode(v29, v25 & 1);
    uint64_t v30 = *(void *)(a1 + 88);
    char v31 = *(unsigned char *)(a1 + 96);
    *(void *)(a1 + 88) = v29;
    *(unsigned char *)(a1 + 96) = v28;
    outlined consume of GraphicsBlendMode(v30, v31);
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of GraphicsBlendMode(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for _ShapeStyle_Pack.Style(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 80);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 72);
  char v15 = *(unsigned char *)(a1 + 80);
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = v4;
  outlined consume of _ShapeStyle_Pack.Fill(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  uint64_t v18 = (void *)(a2 + 88);
  int v19 = *(unsigned __int8 *)(a1 + 96);
  if (v19 != 255)
  {
    int v20 = *(unsigned __int8 *)(a2 + 96);
    if (v20 != 255)
    {
      uint64_t v21 = *(void *)(a1 + 88);
      *(void *)(a1 + 88) = *v18;
      *(unsigned char *)(a1 + 96) = v20 & 1;
      outlined consume of GraphicsBlendMode(v21, v19 & 1);
      goto LABEL_6;
    }
    outlined destroy of GraphicsBlendMode(a1 + 88);
  }
  *(void *)(a1 + 88) = *v18;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
LABEL_6:
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.Style()
{
  return &type metadata for _ShapeStyle_Pack.Style;
}

uint64_t destroy for _ShapeStyle_Pack.Fill(uint64_t a1, uint64_t a2)
{
  return destroy for _ShapeStyle_Pack.Fill(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill);
}

uint64_t initializeWithCopy for _ShapeStyle_Pack.Fill(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeWithCopy for _ShapeStyle_Pack.Fill(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined copy of _ShapeStyle_Pack.Fill);
}

uint64_t *assignWithCopy for _ShapeStyle_Pack.Fill(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for _ShapeStyle_Pack.Fill(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined copy of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill);
}

uint64_t *assignWithTake for _ShapeStyle_Pack.Fill(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for _ShapeStyle_Pack.Fill(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of _ShapeStyle_Pack.Fill);
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_Pack.Fill(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_Pack.Fill(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)uint64_t result = a2 - 250;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 80) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for _ShapeStyle_Pack.Fill(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_Pack.Fill(uint64_t result, char a2)
{
  *(unsigned char *)(result + 80) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.Fill()
{
  return &type metadata for _ShapeStyle_Pack.Fill;
}

uint64_t destroy for _ShapeStyle_Pack.Effect(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 64);
  if (v1 != 255) {
    return outlined consume of GraphicsBlendMode(*(void *)(result + 56), v1 & 1);
  }
  return result;
}

uint64_t initializeWithCopy for _ShapeStyle_Pack.Effect(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 30) = *(_OWORD *)(a2 + 30);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  int v4 = (uint64_t *)(a2 + 56);
  int v5 = *(unsigned __int8 *)(a2 + 64);
  if (v5 == 255)
  {
    *(void *)(a1 + 56) = *v4;
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  }
  else
  {
    char v6 = v5 & 1;
    uint64_t v7 = *v4;
    outlined copy of GraphicsBlendMode(*v4, v5 & 1);
    *(void *)(a1 + 56) = v7;
    *(unsigned char *)(a1 + 64) = v6;
  }
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_Pack.Effect(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 30) = *(long long *)((char *)a2 + 30);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  uint64_t v5 = a1 + 56;
  uint64_t v6 = (uint64_t)a2 + 56;
  int v7 = *((unsigned __int8 *)a2 + 64);
  if (*(unsigned __int8 *)(a1 + 64) == 255)
  {
    if (v7 == 255)
    {
      uint64_t v9 = *(void *)v6;
      *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
      *(void *)uint64_t v5 = v9;
    }
    else
    {
      char v14 = v7 & 1;
      uint64_t v15 = *(void *)v6;
      outlined copy of GraphicsBlendMode(v15, v7 & 1);
      *(void *)(a1 + 56) = v15;
      *(unsigned char *)(a1 + 64) = v14;
    }
  }
  else if (v7 == 255)
  {
    outlined destroy of GraphicsBlendMode(a1 + 56);
    char v8 = *(unsigned char *)(v6 + 8);
    *(void *)uint64_t v5 = *(void *)v6;
    *(unsigned char *)(v5 + 8) = v8;
  }
  else
  {
    char v10 = v7 & 1;
    uint64_t v11 = *(void *)v6;
    outlined copy of GraphicsBlendMode(v11, v7 & 1);
    uint64_t v12 = *(void *)(a1 + 56);
    char v13 = *(unsigned char *)(a1 + 64);
    *(void *)(a1 + 56) = v11;
    *(unsigned char *)(a1 + 64) = v10;
    outlined consume of GraphicsBlendMode(v12, v13);
  }
  return a1;
}

uint64_t assignWithTake for _ShapeStyle_Pack.Effect(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 30) = *(_OWORD *)(a2 + 30);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v4 = a1 + 56;
  uint64_t v5 = a2 + 56;
  int v6 = *(unsigned __int8 *)(a1 + 64);
  if (v6 != 255)
  {
    int v7 = *(unsigned __int8 *)(a2 + 64);
    if (v7 != 255)
    {
      uint64_t v8 = *(void *)(a1 + 56);
      *(void *)(a1 + 56) = *(void *)v5;
      *(unsigned char *)(a1 + 64) = v7 & 1;
      outlined consume of GraphicsBlendMode(v8, v6 & 1);
      return a1;
    }
    outlined destroy of GraphicsBlendMode(a1 + 56);
  }
  *(void *)uint64_t v4 = *(void *)v5;
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(v5 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_Pack.Effect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_Pack.Effect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = ~(_BYTE)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.Effect()
{
  return &type metadata for _ShapeStyle_Pack.Effect;
}

__n128 __swift_memcpy46_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 30) = *(_OWORD *)(a2 + 30);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_Pack.Effect.Kind(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 46)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_Pack.Effect.Kind(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 30) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 46) = v3;
  return result;
}

uint64_t getEnumTag for _ShapeStyle_Pack.Effect.Kind(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 45)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_Pack.Effect.Kind(uint64_t result, int a2)
{
  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(unsigned char *)(result + 45) = 1;
  }
  else
  {
    *(unsigned char *)(result + 45) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.Effect.Kind()
{
  return &type metadata for _ShapeStyle_Pack.Effect.Kind;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_Pack.Key(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 65282 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65282 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65282;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_Pack.Key(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65282 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 254;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245D0FF54);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.Key()
{
  return &type metadata for _ShapeStyle_Pack.Key;
}

uint64_t initializeWithCopy for _ShapeStyle_Pack.Slice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_Pack.Slice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for _ShapeStyle_Pack.Slice(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.Slice()
{
  return &type metadata for _ShapeStyle_Pack.Slice;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.AnimatableData()
{
  return &type metadata for _ShapeStyle_Pack.AnimatableData;
}

uint64_t initializeWithCopy for _ShapeStyle_Pack.Fill.AnimatableData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeWithCopy for _ShapeStyle_Pack.Fill(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
}

uint64_t initializeWithCopy for _ShapeStyle_Pack.Fill(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  uint64_t v12 = a2[7];
  uint64_t v13 = a2[8];
  uint64_t v15 = a2[9];
  char v16 = *((unsigned char *)a2 + 80);
  a4(*a2, v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v15;
  *(unsigned char *)(a1 + 80) = v16;
  return a1;
}

uint64_t *assignWithCopy for _ShapeStyle_Pack.Fill.AnimatableData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for _ShapeStyle_Pack.Fill(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
}

uint64_t *assignWithCopy for _ShapeStyle_Pack.Fill(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  uint64_t v13 = a2[7];
  uint64_t v14 = a2[8];
  uint64_t v28 = a2[9];
  char v29 = *((unsigned char *)a2 + 80);
  a4(*a2, v7, v8, v9, v10, v11, v12, v13, v14, v28, v29);
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  uint64_t v17 = a1[2];
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  uint64_t v20 = a1[5];
  uint64_t v21 = a1[6];
  uint64_t v22 = a1[7];
  uint64_t v23 = a1[8];
  uint64_t v24 = a1[9];
  char v25 = *((unsigned char *)a1 + 80);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v12;
  a1[7] = v13;
  a1[8] = v14;
  a1[9] = v28;
  *((unsigned char *)a1 + 80) = v29;
  LOBYTE(v27) = v25;
  a5(v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v27);
  return a1;
}

uint64_t *assignWithTake for _ShapeStyle_Pack.Fill.AnimatableData(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for _ShapeStyle_Pack.Fill(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
}

uint64_t *assignWithTake for _ShapeStyle_Pack.Fill(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))
{
  char v6 = *(unsigned char *)(a2 + 80);
  uint64_t v7 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  uint64_t v12 = a1[5];
  uint64_t v13 = a1[6];
  uint64_t v14 = a1[7];
  uint64_t v15 = a1[8];
  uint64_t v16 = a1[9];
  char v17 = *((unsigned char *)a1 + 80);
  long long v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v18;
  long long v19 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 3) = v19;
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  *((unsigned char *)a1 + 80) = v6;
  char v21 = v17;
  a4(v7, v9, v8, v10, v11, v12, v13, v14, v15, v16, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_Pack.Fill.AnimatableData(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF7 && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 247);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 <= 9) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_Pack.Fill.AnimatableData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF6)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 - 247;
    if (a3 >= 0xF7) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF7) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 80) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for _ShapeStyle_Pack.Fill.AnimatableData(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 80) <= 8u) {
    return *(unsigned __int8 *)(a1 + 80);
  }
  else {
    return (*(_DWORD *)a1 + 9);
  }
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_Pack.Fill.AnimatableData(uint64_t result, unsigned int a2)
{
  if (a2 >= 9)
  {
    *(void *)__n128 result = a2 - 9;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)(result + 72) = 0;
    LOBYTE(a2) = 9;
  }
  *(unsigned char *)(result + 80) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData()
{
  return &type metadata for _ShapeStyle_Pack.Fill.AnimatableData;
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_Pack.Effect.Kind.AnimatableData(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 41) = v3;
  return result;
}

uint64_t getEnumTag for _ShapeStyle_Pack.Effect.Kind.AnimatableData(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_Pack.Effect.Kind.AnimatableData(uint64_t result, int a2)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = (a2 - 1);
    *(unsigned char *)(result + 40) = 1;
  }
  else
  {
    *(unsigned char *)(result + 40) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.Effect.Kind.AnimatableData()
{
  return &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData;
}

void destroy for ResolvedMulticolorStyle(uint64_t a1)
{
}

uint64_t initializeWithCopy for ResolvedMulticolorStyle(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  char v3 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v3;
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for ResolvedMulticolorStyle(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  char v3 = *(void **)(a1 + 24);
  id v4 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  id v5 = v4;

  return a1;
}

uint64_t assignWithTake for ResolvedMulticolorStyle(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  char v3 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for ResolvedMulticolorStyle()
{
  return &type metadata for ResolvedMulticolorStyle;
}

uint64_t type metadata completion function for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 81 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v10 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    id v11 = *(id *)v10;
    uint64_t v12 = *(void *)(v10 + 8);
    unint64_t v13 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v14 = *(void **)(v10 + 16);
    uint64_t v15 = *(void **)(v10 + 24);
    uint64_t v16 = *(void *)(v10 + 32);
    uint64_t v17 = *(void *)(v10 + 40);
    uint64_t v18 = *(void *)(v10 + 48);
    uint64_t v19 = *(void *)(v10 + 56);
    uint64_t v21 = *(void *)(v10 + 64);
    uint64_t v22 = *(void *)(v10 + 72);
    char v23 = *(unsigned char *)(v10 + 80);
    outlined copy of _ShapeStyle_Pack.Fill(*(id *)v10, v12, v14, v15, v16, v17, v18, v19, v21, v22, v23);
    *(void *)unint64_t v13 = v11;
    *(void *)(v13 + 8) = v12;
    *(void *)(v13 + 16) = v14;
    *(void *)(v13 + 24) = v15;
    *(void *)(v13 + 32) = v16;
    *(void *)(v13 + 40) = v17;
    *(void *)(v13 + 48) = v18;
    *(void *)(v13 + 56) = v19;
    *(void *)(v13 + 64) = v21;
    *(void *)(v13 + 72) = v22;
    *(unsigned char *)(v13 + 80) = v23;
  }
  return a1;
}

uint64_t destroy for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v3)(a1, AssociatedTypeWitness);
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  return outlined consume of _ShapeStyle_Pack.Fill(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void *)(v4 + 40), *(void *)(v4 + 48), *(void *)(v4 + 56), *(void *)(v4 + 64), *(void *)(v4 + 72), *(unsigned char *)(v4 + 80));
}

uint64_t initializeWithCopy for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  id v9 = *(id *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  id v11 = *(void **)(v8 + 16);
  uint64_t v12 = *(void **)(v8 + 24);
  uint64_t v13 = *(void *)(v8 + 32);
  uint64_t v14 = *(void *)(v8 + 40);
  uint64_t v15 = *(void *)(v8 + 48);
  uint64_t v16 = *(void *)(v8 + 56);
  uint64_t v17 = *(void *)(v8 + 64);
  uint64_t v19 = *(void *)(v8 + 72);
  char v20 = *(unsigned char *)(v8 + 80);
  outlined copy of _ShapeStyle_Pack.Fill(*(id *)v8, v10, v11, v12, v13, v14, v15, v16, v17, v19, v20);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  *(void *)(v7 + 16) = v11;
  *(void *)(v7 + 24) = v12;
  *(void *)(v7 + 32) = v13;
  *(void *)(v7 + 40) = v14;
  *(void *)(v7 + 48) = v15;
  *(void *)(v7 + 56) = v16;
  *(void *)(v7 + 64) = v17;
  *(void *)(v7 + 72) = v19;
  *(unsigned char *)(v7 + 80) = v20;
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  id v9 = *(id *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  id v11 = *(void **)(v8 + 16);
  uint64_t v12 = *(void **)(v8 + 24);
  uint64_t v13 = *(void *)(v8 + 32);
  uint64_t v14 = *(void *)(v8 + 40);
  uint64_t v15 = *(void *)(v8 + 48);
  uint64_t v16 = *(void *)(v8 + 56);
  uint64_t v17 = *(void *)(v8 + 64);
  uint64_t v30 = *(void *)(v8 + 72);
  char v31 = *(unsigned char *)(v8 + 80);
  outlined copy of _ShapeStyle_Pack.Fill(*(id *)v8, v10, v11, v12, v13, v14, v15, v16, v17, v30, v31);
  uint64_t v18 = *(void *)v7;
  uint64_t v19 = *(void *)(v7 + 8);
  uint64_t v20 = *(void *)(v7 + 16);
  uint64_t v21 = *(void *)(v7 + 24);
  uint64_t v22 = *(void *)(v7 + 32);
  uint64_t v23 = *(void *)(v7 + 40);
  uint64_t v24 = *(void *)(v7 + 48);
  uint64_t v25 = *(void *)(v7 + 56);
  uint64_t v26 = *(void *)(v7 + 64);
  uint64_t v27 = *(void *)(v7 + 72);
  char v28 = *(unsigned char *)(v7 + 80);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  *(void *)(v7 + 16) = v11;
  *(void *)(v7 + 24) = v12;
  *(void *)(v7 + 32) = v13;
  *(void *)(v7 + 40) = v14;
  *(void *)(v7 + 48) = v15;
  *(void *)(v7 + 56) = v16;
  *(void *)(v7 + 64) = v17;
  *(void *)(v7 + 72) = v30;
  *(unsigned char *)(v7 + 80) = v31;
  outlined consume of _ShapeStyle_Pack.Fill(v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28);
  return a1;
}

uint64_t initializeWithTake for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  long long v9 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v9;
  long long v11 = *(_OWORD *)(v8 + 48);
  long long v10 = *(_OWORD *)(v8 + 64);
  long long v12 = *(_OWORD *)(v8 + 32);
  *(unsigned char *)(v7 + 80) = *(unsigned char *)(v8 + 80);
  *(_OWORD *)(v7 + 48) = v11;
  *(_OWORD *)(v7 + 64) = v10;
  *(_OWORD *)(v7 + 32) = v12;
  return a1;
}

uint64_t assignWithTake for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v8 = *(unsigned char *)(v7 + 80);
  unint64_t v9 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = *(void *)(v9 + 24);
  uint64_t v14 = *(void *)(v9 + 32);
  uint64_t v15 = *(void *)(v9 + 40);
  uint64_t v16 = *(void *)(v9 + 48);
  uint64_t v17 = *(void *)(v9 + 56);
  uint64_t v18 = *(void *)(v9 + 64);
  uint64_t v19 = *(void *)(v9 + 72);
  char v20 = *(unsigned char *)(v9 + 80);
  long long v21 = *(_OWORD *)(v7 + 16);
  long long v22 = *(_OWORD *)(v7 + 32);
  long long v23 = *(_OWORD *)(v7 + 48);
  long long v24 = *(_OWORD *)(v7 + 64);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v7;
  *(_OWORD *)(v9 + 16) = v21;
  *(_OWORD *)(v9 + 32) = v22;
  *(_OWORD *)(v9 + 48) = v23;
  *(_OWORD *)(v9 + 64) = v24;
  *(unsigned char *)(v9 + 80) = v8;
  outlined consume of _ShapeStyle_Pack.Fill(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0xF9) {
    unsigned int v7 = 249;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 81;
    if (v9 < 4) {
      unsigned int v10 = ((a2 - v7 + 255) >> (8 * v9)) + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v9];
        if (!a1[v9]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v9];
        if (*(_WORD *)&a1[v9]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245D10EACLL);
      case 4:
        int v13 = *(_DWORD *)&a1[v9];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v9);
        if (v9 >= 4) {
          int v15 = 0;
        }
        if (v9 == 1) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v6 < 0xF9)
  {
    unsigned int v18 = *(unsigned __int8 *)(((unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFFFF8) + 80);
    if (v18 > 6) {
      return (v18 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v17 = *(uint64_t (**)(unsigned __int8 *))(v5 + 48);
    return v17(a1);
  }
}

double storeEnumTagSinglePayload for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = *(void *)(v6 + 64);
  if (v8 <= 0xF9) {
    unsigned int v10 = 249;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  size_t v11 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 81;
  char v12 = 8 * v11;
  if (v10 >= a3)
  {
    int v15 = 0;
    if (v10 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v8 < 0xF9)
            {
              unint64_t v20 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if (a2 > 0xF9)
              {
                *(void *)(v20 + 72) = 0;
                double result = 0.0;
                *(_OWORD *)(v20 + 56) = 0u;
                *(_OWORD *)(v20 + 40) = 0u;
                *(_OWORD *)(v20 + 24) = 0u;
                *(_OWORD *)(v20 + 8) = 0u;
                *(unsigned char *)(v20 + 80) = 0;
                *(void *)unint64_t v20 = (a2 - 250);
              }
              else
              {
                *(unsigned char *)(v20 + 80) = -(char)a2;
              }
            }
            else
            {
              uint64_t v19 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
              v19(a1, a2);
            }
          }
          break;
      }
      return result;
    }
  }
  else
  {
    if (v11 <= 3) {
      unsigned int v13 = ((a3 - v10 + 255) >> v12) + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v10 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v10 + a2;
  if (v11 < 4) {
    int v17 = (v16 >> v12) + 1;
  }
  else {
    int v17 = 1;
  }
  if (v11 >= 4) {
    unsigned int v18 = v16;
  }
  else {
    unsigned int v18 = v16;
  }
  bzero(a1, v11);
  if (v11 == 1) {
    *a1 = v18;
  }
  else {
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v11] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v17;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x245D11118);
    case 4:
      *(_DWORD *)&a1[v11] = v17;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintInitVisitor()
{
  return &type metadata for _ShapeStyle_Pack.Fill.AnimatableData.PaintInitVisitor;
}

uint64_t outlined copy of ShaderVectorData.Element(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 4) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

double *specialized Material.Layers.visit<A>(_:)(double *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    unint64_t v4 = result;
    uint64_t v5 = *(void **)result;
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    unsigned int v7 = (char *)(a2 + 80);
    long long v22 = v4;
    do
    {
      uint64_t v8 = *((void *)v7 - 5);
      uint64_t v9 = *((void *)v7 - 4);
      uint64_t v10 = *((void *)v7 - 3);
      int v11 = *((_DWORD *)v7 - 4);
      uint64_t v12 = *((void *)v7 - 1);
      char v13 = *v7;
      v33[0] = *((void *)v7 - 6);
      v33[1] = v8;
      v33[2] = v9;
      v33[3] = v10;
      int v34 = v11;
      uint64_t v35 = v12;
      char v36 = v13;
      uint64_t v30 = v8;
      uint64_t v31 = v33[0];
      uint64_t v29 = v9;
      outlined copy of Material.Layer.Storage(v33[0], v8, v9);
      uint64_t v28 = v12;
      char v27 = v13;
      outlined copy of GraphicsBlendMode(v12, v13);
      swift_retain();
      uint64_t v14 = RBDrawingStateBeginLayer();
      type metadata accessor for GraphicsContext.Storage();
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 32) = xmmword_24619B520;
      *(void *)(v15 + 48) = 1065353216;
      *(void *)(v15 + 56) = 0x7FF8000000000000;
      uint64_t v16 = v5[2];
      int v17 = *(_DWORD *)(v16 + 64);
      if (v17 == RBDrawingStateGetDefaultColorSpace())
      {
        *(void *)(v15 + 16) = v16;
        swift_retain();
        swift_retain();
      }
      else
      {
        uint64_t v25 = v6;
        id v24 = (id)RBDrawingStateGetDisplayList();
        uint64_t v18 = v5[4];
        uint64_t v19 = v18;
        uint64_t v26 = v5[5];
        if (v18 == 1)
        {
          uint64_t v19 = *(void *)(v16 + 48);
          uint64_t v26 = *(void *)(v16 + 56);
          swift_retain();
          swift_retain();
        }
        uint64_t v23 = v19;
        type metadata accessor for GraphicsContext.Storage.Shared();
        uint64_t v20 = swift_allocObject();
        *(void *)(v20 + 24) = 0;
        id v21 = objc_allocWithZone(MEMORY[0x263F638B8]);
        swift_retain();
        outlined copy of EnvironmentValues?(v18);
        *(void *)(v20 + 32) = objc_msgSend(v21, sel_init);
        *(void *)(v20 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63890]), sel_init);
        *(void *)(v20 + 72) = 0;
        _s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOi0_((uint64_t)v32);
        outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v32, v20 + 80);
        *(unsigned char *)(v20 + 240) = 2;
        *(void *)(v20 + 256) = 0;
        *(void *)(v20 + 264) = 0;
        *(void *)(v20 + 248) = 0;
        *(void *)(v20 + 16) = v24;
        *(void *)(v20 + 48) = v23;
        *(void *)(v20 + 56) = v26;
        *(_DWORD *)(v20 + 64) = objc_msgSend(v24, sel_defaultColorSpace);
        *(void *)(v15 + 16) = v20;
        unint64_t v4 = v22;
        uint64_t v6 = v25;
      }
      *(void *)(v15 + 24) = v14;
      *(unsigned char *)(v15 + 64) = 0;
      swift_release();
      v32[0] = v15;
      swift_retain();
      specialized closure #1 in MaterialRenderer.visit<A>(layer:)(v32, (uint64_t)v33, v4);
      swift_release();
      RBDrawingStateDrawLayer();
      swift_release();
      swift_release();
      outlined consume of Material.Layer.Storage(v31, v30, v29);
      outlined consume of GraphicsBlendMode(v28, v27);
      v7 += 56;
      --v2;
    }
    while (v2);
    return (double *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized Material.ResolvedMaterial.visitCoreMaterialLayers<A>(_:)(double *a1, uint64_t a2, unint64_t a3)
{
  unsigned __int8 v3 = a3;
  unint64_t v5 = HIDWORD(a3);
  outlined copy of Material.ID(a2, a3);
  if (one-time initialization token for _shared != -1) {
    swift_once();
  }
  uint64_t v6 = (os_unfair_lock_s *)(static CoreMaterialCache._shared + 16);
  swift_retain();
  os_unfair_lock_lock(v6);
  uint64_t v31 = a2;
  unsigned __int8 v32 = v3;
  int v33 = v5;
  uint64_t v7 = CoreMaterialCache.subscript.getter((uint64_t)&v31);
  outlined consume of Material.ID(a2, v3);
  os_unfair_lock_unlock(v6);
  swift_release();
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void **)a1;
    int v11 = (char *)(v7 + 56);
    do
    {
      unint64_t v12 = *((void *)v11 - 3);
      float v13 = *((float *)v11 - 4);
      uint64_t v14 = *((void *)v11 - 1);
      char v15 = *v11;
      outlined copy of DisplayList.Content.Value(v12);
      uint64_t v30 = v14;
      char v29 = v15;
      outlined copy of GraphicsBlendMode(v14, v15);
      swift_retain();
      uint64_t v16 = RBDrawingStateBeginLayer();
      type metadata accessor for GraphicsContext.Storage();
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 32) = xmmword_24619B520;
      *(void *)(v17 + 48) = 1065353216;
      *(void *)(v17 + 56) = 0x7FF8000000000000;
      uint64_t v18 = v10[2];
      LODWORD(v14) = *(_DWORD *)(v18 + 64);
      if (v14 == RBDrawingStateGetDefaultColorSpace())
      {
        *(void *)(v17 + 16) = v18;
        swift_retain();
        swift_retain();
      }
      else
      {
        uint64_t v26 = v9;
        id v25 = (id)RBDrawingStateGetDisplayList();
        uint64_t v19 = v10[4];
        uint64_t v20 = v19;
        uint64_t v28 = v10[5];
        if (v19 == 1)
        {
          uint64_t v20 = *(void *)(v18 + 48);
          uint64_t v28 = *(void *)(v18 + 56);
          swift_retain();
          swift_retain();
        }
        uint64_t v24 = v20;
        type metadata accessor for GraphicsContext.Storage.Shared();
        uint64_t v21 = swift_allocObject();
        *(void *)(v21 + 24) = 0;
        id v22 = objc_allocWithZone(MEMORY[0x263F638B8]);
        swift_retain();
        outlined copy of EnvironmentValues?(v19);
        *(void *)(v21 + 32) = objc_msgSend(v22, sel_init);
        *(void *)(v21 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63890]), sel_init);
        *(void *)(v21 + 72) = 0;
        _s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOi0_((uint64_t)&v31);
        outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)&v31, v21 + 80);
        *(unsigned char *)(v21 + 240) = 2;
        *(void *)(v21 + 256) = 0;
        *(void *)(v21 + 264) = 0;
        *(void *)(v21 + 248) = 0;
        *(void *)(v21 + 16) = v25;
        *(void *)(v21 + 48) = v24;
        *(void *)(v21 + 56) = v28;
        *(_DWORD *)(v21 + 64) = objc_msgSend(v25, sel_defaultColorSpace);
        *(void *)(v17 + 16) = v21;
        uint64_t v9 = v26;
      }
      *(void *)(v17 + 24) = v16;
      *(unsigned char *)(v17 + 64) = 0;
      swift_release();
      uint64_t v31 = v17;
      swift_retain();
      specialized closure #1 in MaterialRenderer.visit<A>(layer:)((unint64_t *)&v31, v12, v30, v29, a1, v13);
      swift_release();
      RBDrawingStateDrawLayer();
      swift_release();
      swift_release();
      outlined consume of DisplayList.Content.Value(v12);
      outlined consume of GraphicsBlendMode(v30, v29);
      v11 += 32;
      --v8;
    }
    while (v8);
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return swift_bridgeObjectRelease();
}

uint64_t _ShapeStyle_RenderedShape.init(_:frame:identity:version:contentSeed:options:environment:)@<X0>(long long *a1@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, __int16 *a4@<X3>, char *a5@<X4>, int a6@<W5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>, double a11@<D3>)
{
  long long v17 = *a1;
  long long v18 = a1[1];
  long long v19 = a1[2];
  long long v20 = a1[3];
  long long v21 = a1[4];
  long long v22 = a1[5];
  int v23 = *((_DWORD *)a1 + 24);
  int v24 = *a2;
  uint64_t v25 = *a3;
  __int16 v26 = *a4;
  char v27 = *a5;
  if (one-time initialization token for normal != -1)
  {
    long long v35 = a1[1];
    long long v36 = *a1;
    long long v33 = a1[3];
    long long v34 = a1[2];
    long long v31 = a1[5];
    long long v32 = a1[4];
    swift_once();
    long long v22 = v31;
    long long v21 = v32;
    long long v20 = v33;
    long long v19 = v34;
    long long v18 = v35;
    long long v17 = v36;
  }
  uint64_t v28 = static GraphicsBlendMode.normal;
  char v29 = byte_26B0EB4A0;
  char v37 = byte_26B0EB4A0;
  *(_OWORD *)a7 = v17;
  *(_OWORD *)(a7 + 16) = v18;
  *(_OWORD *)(a7 + 32) = v19;
  *(_OWORD *)(a7 + 48) = v20;
  *(_OWORD *)(a7 + 64) = v21;
  *(_OWORD *)(a7 + 80) = v22;
  *(_DWORD *)(a7 + 96) = v23;
  *(_WORD *)(a7 + 100) = v26;
  *(double *)(a7 + 104) = a8;
  *(double *)(a7 + 112) = a9;
  *(double *)(a7 + 120) = a10;
  *(double *)(a7 + 128) = a11;
  *(void *)(a7 + 136) = 0;
  *(_DWORD *)(a7 + 144) = 0;
  *(double *)(a7 + 152) = a8;
  *(double *)(a7 + 160) = a9;
  *(double *)(a7 + 168) = a10;
  *(double *)(a7 + 176) = a11;
  *(void *)(a7 + 184) = v25;
  *(_OWORD *)(a7 + 192) = xmmword_2461B9DE0;
  *(void *)(a7 + 208) = 0;
  *(unsigned char *)(a7 + 218) = 0;
  *(_WORD *)(a7 + 216) = 0;
  *(_DWORD *)(a7 + 220) = v24;
  *(unsigned char *)(a7 + 224) = v27;
  *(_DWORD *)(a7 + 228) = a6;
  *(void *)(a7 + 232) = v28;
  *(unsigned char *)(a7 + 240) = v37;
  *(_DWORD *)(a7 + 244) = 1065353216;
  *(unsigned char *)(a7 + 248) = 0;

  return outlined copy of GraphicsBlendMode(v28, v29);
}

uint64_t _ShapeStyle_RenderedShape.background(_:)(_OWORD *a1)
{
  long long v2 = a1[13];
  long long v3 = a1[11];
  long long v79 = a1[12];
  long long v80 = v2;
  long long v4 = a1[13];
  *(_OWORD *)float64x2_t v81 = a1[14];
  *(_OWORD *)&v81[9] = *(_OWORD *)((char *)a1 + 233);
  long long v5 = a1[9];
  long long v6 = a1[7];
  long long v75 = a1[8];
  long long v76 = v5;
  long long v7 = a1[9];
  long long v8 = a1[11];
  long long v77 = a1[10];
  long long v78 = v8;
  long long v9 = a1[5];
  long long v10 = a1[3];
  long long v71 = a1[4];
  long long v72 = v9;
  long long v11 = a1[5];
  long long v12 = a1[7];
  long long v73 = a1[6];
  long long v74 = v12;
  long long v13 = a1[1];
  v68[0] = *a1;
  v68[1] = v13;
  long long v14 = a1[3];
  long long v16 = *a1;
  long long v15 = a1[1];
  long long v69 = a1[2];
  long long v70 = v14;
  *(_OWORD *)&v66[48] = v79;
  *(_OWORD *)&v66[64] = v4;
  *(_OWORD *)uint64_t v67 = a1[14];
  *(_OWORD *)&v67[9] = *(_OWORD *)((char *)a1 + 233);
  *(_OWORD *)&v65[32] = v75;
  *(_OWORD *)unint64_t v66 = v7;
  *(_OWORD *)&v66[16] = v77;
  *(_OWORD *)&v66[32] = v3;
  long long v63 = v71;
  long long v64 = v11;
  *(_OWORD *)unint64_t v65 = v73;
  *(_OWORD *)&v65[16] = v6;
  long long v59 = v16;
  long long v60 = v15;
  char v17 = v81[24];
  int v18 = *(unsigned __int8 *)(v1 + 248);
  long long v61 = v69;
  long long v62 = v10;
  if (((v18 | v81[24]) & 2) != 0)
  {
    if (v18)
    {
      LOWORD(v34) = *(_WORD *)(v1 + 100);
      outlined retain of _ShapeStyle_RenderedShape((uint64_t)v68);
      DisplayList.Item.addDrawingGroup(contentSeed:)((unsigned __int16 *)&v34);
      *(unsigned char *)(v1 + 248) = v18 & 0xFE;
      if ((v17 & 1) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      outlined retain of _ShapeStyle_RenderedShape((uint64_t)v68);
      if ((v17 & 1) == 0) {
        goto LABEL_8;
      }
    }
    LOWORD(v34) = WORD2(v73);
    DisplayList.Item.addDrawingGroup(contentSeed:)((unsigned __int16 *)&v34);
    v67[24] = v17 & 0xFE;
    goto LABEL_8;
  }
  outlined retain of _ShapeStyle_RenderedShape((uint64_t)v68);
LABEL_8:
  _ShapeStyle_RenderedShape.commitItem()((uint64_t)&v34);
  long long v19 = v35;
  long long v28 = v36;
  long long v29 = v34;
  long long v20 = v37;
  __int16 v21 = v38;
  char v22 = BYTE2(v38);
  int v23 = DWORD1(v38);
  outlined consume of DisplayList.Item.Value(*(void *)(v1 + 192), *(void *)(v1 + 200));
  *(_OWORD *)(v1 + 152) = v29;
  *(_OWORD *)(v1 + 168) = v19;
  *(_OWORD *)(v1 + 184) = v28;
  *(_OWORD *)(v1 + 200) = v20;
  *(unsigned char *)(v1 + 218) = v22;
  *(_WORD *)(v1 + 216) = v21;
  *(_DWORD *)(v1 + 220) = v23;
  _ShapeStyle_RenderedShape.commitItem()((uint64_t)&v34);
  uint64_t v24 = *((void *)&v36 + 1);
  unint64_t v25 = v37;
  v30[0] = v34;
  v30[1] = v35;
  v30[2] = v36;
  v30[3] = v37;
  char v32 = BYTE2(v38);
  __int16 v31 = v38;
  int v33 = DWORD1(v38);
  DisplayList.Item.composite(_:above:)((uint64_t)v30, 0);
  outlined consume of DisplayList.Item.Value(v24, v25);
  char v26 = v67[24];
  *(unsigned char *)(v1 + 248) |= v67[24];
  long long v34 = v59;
  long long v35 = v60;
  long long v36 = v61;
  long long v37 = v62;
  long long v38 = v63;
  long long v39 = v64;
  int v40 = *(_DWORD *)v65;
  __int16 v41 = *(_WORD *)&v65[4];
  long long v42 = *(_OWORD *)&v65[8];
  long long v43 = *(_OWORD *)&v65[24];
  uint64_t v44 = *(void *)&v65[40];
  int v45 = *(_DWORD *)v66;
  long long v46 = *(_OWORD *)&v66[8];
  long long v47 = *(_OWORD *)&v66[24];
  long long v48 = *(_OWORD *)&v66[40];
  long long v49 = *(_OWORD *)&v66[56];
  char v51 = v66[74];
  __int16 v50 = *(_WORD *)&v66[72];
  int v52 = *(_DWORD *)&v66[76];
  char v53 = v67[0];
  int v54 = *(_DWORD *)&v67[4];
  uint64_t v55 = *(void *)&v67[8];
  char v56 = v67[16];
  int v57 = *(_DWORD *)&v67[20];
  char v58 = v26;
  return outlined release of _ShapeStyle_RenderedShape((uint64_t)&v34);
}

uint64_t _ShapeStyle_RenderedShape.render(effect:)(uint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)result;
  int v4 = *(_DWORD *)(result + 8);
  char v5 = *(unsigned char *)(result + 12);
  switch(v5)
  {
    case 4:
      *(float *)(v1 + 244) = *(float *)(v1 + 244) * *(float *)&v3;
      return result;
    case 5:
      char v6 = v4 & 1;
      uint64_t v7 = *(void *)(v2 + 232);
      char v8 = *(unsigned char *)(v2 + 240);
      outlined copy of GraphicsBlendMode(*(void *)result, v6);
      uint64_t result = outlined consume of GraphicsBlendMode(v7, v8);
      *(void *)(v2 + 232) = v3;
      *(unsigned char *)(v2 + 240) = v6;
      return result;
    case 9:
      if (*(unsigned char *)(v3 + 132) == 12)
      {
        char v9 = *(unsigned char *)(v1 + 248);
        if (v9)
        {
          unsigned __int16 v11 = *(_WORD *)(v1 + 100);
          DisplayList.Item.addDrawingGroup(contentSeed:)(&v11);
          v9 &= ~1u;
          *(unsigned char *)(v1 + 248) = v9;
        }
        if ((v9 & 2) == 0) {
          *(unsigned char *)(v1 + 248) = v9 | 2;
        }
      }
      goto LABEL_13;
    case 19:
      if (v3) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v4 == 0;
      }
      if (!v10) {
        goto LABEL_13;
      }
      return result;
    default:
LABEL_13:
      uint64_t v12 = v3;
      int v13 = v4;
      char v14 = v5;
      return _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v12);
  }
}

uint64_t _ShapeStyle_RenderedShape.render(shadow:style:above:below:opaqueFill:mayAdjustItem:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, unsigned char *a6)
{
  unsigned int v191 = *a1;
  unsigned int v192 = a1[1];
  unsigned int v190 = a1[2];
  LODWORD(v199) = a1[3];
  uint64_t v8 = *((void *)a1 + 2);
  uint64_t v7 = *((void *)a1 + 3);
  uint64_t v9 = *((void *)a1 + 4);
  float v10 = *((float *)a1 + 10);
  uint64_t v11 = *((unsigned __int8 *)a1 + 44);
  int v13 = *(void **)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v14 = *(void *)(a2 + 32);
  uint64_t v178 = *(void **)(a2 + 16);
  uint64_t v179 = *(void **)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 40);
  uint64_t v15 = *(void *)(a2 + 48);
  uint64_t v17 = *(void *)(a2 + 56);
  uint64_t v176 = *(void **)a2;
  uint64_t v177 = *(void *)(a2 + 64);
  uint64_t v18 = *(void *)(a2 + 72);
  int v188 = *(unsigned __int8 *)(a2 + 80);
  float v19 = *(float *)(a2 + 84);
  uint64_t v20 = *(void *)(a2 + 88);
  uint64_t v180 = v12;
  uint64_t v169 = v15;
  uint64_t v170 = v17;
  uint64_t v167 = v14;
  uint64_t v168 = v16;
  uint64_t v185 = v18;
  int v189 = *(unsigned __int8 *)(a2 + 96);
  int v205 = *((unsigned __int8 *)a1 + 44);
  if (*a6 != 1)
  {
    if (a5) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v186 = *(void *)(a2 + 88);
    unsigned int v27 = (v11 >> 3) & 1;
LABEL_11:
    unsigned int v207 = v27;
    long long v28 = *(void **)v6;
    uint64_t v29 = *(void *)(v6 + 8);
    uint64_t v31 = *(void *)(v6 + 16);
    uint64_t v30 = *(void *)(v6 + 24);
    if (v27 | ((v11 & 4) >> 2)) {
      int v32 = 2;
    }
    else {
      int v32 = 6;
    }
    int v183 = v32;
    uint64_t v34 = *(void *)(v6 + 32);
    uint64_t v33 = *(void *)(v6 + 40);
    unint64_t v35 = *(void *)(v6 + 48);
    unsigned int v36 = *(_DWORD *)(v6 + 96);
    uint64_t v37 = *(void *)(v6 + 120);
    unint64_t v38 = *(void *)(v6 + 128);
    uint64_t v203 = *(void *)(v6 + 184);
    __int16 v200 = *(_WORD *)(v6 + 100);
    char v194 = *(unsigned char *)(v6 + 224);
    int v211 = *(_DWORD *)(v6 + 228);
    uint64_t v195 = *(void *)(v6 + 88);
    uint64_t v196 = *(void *)(v6 + 80);
    uint64_t v197 = *(void *)(v6 + 72);
    uint64_t v198 = *(void *)(v6 + 64);
    long long v39 = *(void **)v6;
    uint64_t v40 = *(void *)(v6 + 8);
    uint64_t v41 = *(void *)(v6 + 24);
    uint64_t v42 = *(void *)(v6 + 56);
    unsigned int v43 = v11;
    outlined copy of _ShapeStyle_RenderedShape.Shape(v28, v29, v31, v30, v34, v33, v35, v42, v198, v197, v196, v195, v36);
    if (one-time initialization token for normal != -1) {
      swift_once();
    }
    char v260 = byte_26B0EB4A0;
    *(void *)&long long v245 = v39;
    *((void *)&v245 + 1) = v40;
    uint64_t v175 = v31;
    *(void *)&long long v246 = v31;
    *((void *)&v246 + 1) = v41;
    uint64_t v171 = v33;
    uint64_t v172 = v34;
    *(void *)&long long v247 = v34;
    *((void *)&v247 + 1) = v33;
    unint64_t v182 = v35;
    *(void *)&long long v248 = v35;
    *((void *)&v248 + 1) = v42;
    *(void *)&long long v249 = v198;
    *((void *)&v249 + 1) = v197;
    *(void *)&long long v250 = v196;
    *((void *)&v250 + 1) = v195;
    LODWORD(v251) = v36;
    WORD2(v251) = v200;
    *(void *)&long long v252 = 0;
    *((void *)&v251 + 1) = 0;
    *((void *)&v252 + 1) = v37;
    long long v253 = v38;
    LODWORD(v254) = 0;
    *(void *)&long long v255 = 0;
    *((void *)&v254 + 1) = 0;
    *((void *)&v255 + 1) = v37;
    *(void *)&long long v256 = v38;
    long long v257 = xmmword_2461B9DE0;
    *((void *)&v256 + 1) = v203;
    *(void *)&long long v258 = 0;
    BYTE10(v258) = 0;
    WORD4(v258) = 0;
    HIDWORD(v258) = 0;
    v259[0] = v194;
    *(_DWORD *)&v259[4] = v211;
    *(void *)&v259[8] = static GraphicsBlendMode.normal;
    v259[16] = byte_26B0EB4A0;
    *(_DWORD *)&v259[20] = 1065353216;
    v259[24] = 0;
    uint64_t v173 = v40;
    uint64_t v174 = v39;
    uint64_t v44 = v42;
    uint64_t v187 = v41;
    uint64_t v193 = v42;
    unsigned int v181 = v36;
    uint64_t v184 = v183 | v43;
    if ((v207 | v43))
    {
      outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
      _ShapeStyle_RenderedShape.render(color:)(1.0, 1.0, 1.0, 1.0);
LABEL_26:
      uint64_t v56 = swift_allocObject();
      v57.i64[0] = v191;
      v57.i64[1] = v190;
      *(int8x16_t *)(v56 + 16) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(v199 * v19, v192), 0x20uLL), v57);
      *(void *)(v56 + 32) = v8;
      *(void *)(v56 + 40) = v7;
      *(void *)(v56 + 48) = v9;
      *(void *)(v56 + 56) = LODWORD(v10) | (unint64_t)(v184 << 32);
      *(_OWORD *)(v56 + 64) = 0u;
      *(_OWORD *)(v56 + 80) = 0u;
      *(_OWORD *)(v56 + 96) = 0u;
      *(_OWORD *)(v56 + 112) = 0u;
      *(_DWORD *)(v56 + 128) = 0;
      *(unsigned char *)(v56 + 132) = 2;
      unint64_t v58 = *((void *)&v257 + 1);
      uint64_t v59 = v258;
      int v60 = WORD4(v258) | (BYTE10(v258) << 16);
      uint64_t v61 = *((void *)&v255 + 1);
      uint64_t v62 = v256;
      uint64_t v63 = v257;
      uint64_t v64 = *((void *)&v256 + 1);
      if (*((void *)&v257 + 1) >> 62 != 3
        || (v60 & 0xFFFFFF) != 0
        || *((void *)&v257 + 1) != 0xC000000000000000
        || (unint64_t)v258 | (unint64_t)v257)
      {
        _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
        uint64_t v67 = swift_allocObject();
        *(_OWORD *)(v67 + 16) = xmmword_2461B9DC0;
        *(void *)(v67 + 32) = 0;
        *(void *)(v67 + 40) = 0;
        *(void *)(v67 + 48) = v61;
        *(void *)(v67 + 56) = v62;
        *(void *)(v67 + 64) = v64;
        *(void *)(v67 + 72) = v63;
        *(void *)(v67 + 80) = v58;
        *(void *)(v67 + 88) = v59;
        *(unsigned char *)(v67 + 98) = BYTE2(v60);
        *(_WORD *)(v67 + 96) = v60;
        *(_DWORD *)(v67 + 100) = 0;
        long long v238 = 0uLL;
        *(void *)uint64_t v239 = v61;
        *(void *)&v239[8] = v62;
        *(void *)&v239[16] = v64;
        *(void *)&v239[24] = v63;
        *(void *)&v239[32] = v58;
        *(void *)&v239[40] = v59;
        v239[50] = BYTE2(v60);
        *(_WORD *)&v239[48] = v60;
        *(_DWORD *)&v239[52] = 0;
        outlined copy of DisplayList.Item.Value(v63, v58);
        swift_retain();
        DisplayList.Item.features.getter((__int16 *)&v216);
        __int16 v66 = v216;
        long long v238 = 0uLL;
        *(void *)uint64_t v239 = v61;
        *(void *)&v239[8] = v62;
        *(void *)&v239[16] = v64;
        *(void *)&v239[24] = v63;
        *(void *)&v239[32] = v58;
        *(void *)&v239[40] = v59;
        v239[50] = BYTE2(v60);
        uint64_t v44 = v193;
        *(_WORD *)&v239[48] = v60;
        *(_DWORD *)&v239[52] = 0;
        DisplayList.Item.properties.getter(&v216);
        char v65 = v216;
      }
      else
      {
        outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
        swift_retain();
        char v65 = 0;
        __int16 v66 = 0;
        uint64_t v67 = MEMORY[0x263F8EE78];
      }
      char v68 = v205;
      *(void *)&long long v257 = v56;
      *((void *)&v257 + 1) = 0x4000000900000000;
      *(void *)&long long v258 = v67;
      BYTE10(v258) = v65;
      WORD4(v258) = v66;
      LOBYTE(v238) = v259[0];
      DisplayList.Item.canonicalize(options:)((char *)&v238);
      outlined consume of DisplayList.Item.Value(v63, v58);
      swift_release();
      if (v207) {
        goto LABEL_82;
      }
      uint64_t v69 = v44;
      if ((v205 & 1) == 0)
      {
        int v89 = 1;
        uint64_t v80 = v173;
        long long v79 = v174;
        uint64_t v83 = v171;
        uint64_t v82 = v172;
        unint64_t v90 = v182;
        uint64_t v81 = v175;
        char v84 = v194;
        int v91 = v211;
LABEL_49:
        if ((v181 & 0xE00000) != 0)
        {
          int v212 = v89;
          char v97 = v84;
          uint64_t v98 = static GraphicsBlendMode.normal;
          char v99 = byte_26B0EB4A0;
          LOBYTE(v261[0]) = byte_26B0EB4A0;
          *(void *)&long long v238 = v79;
          *((void *)&v238 + 1) = v80;
          *(void *)uint64_t v239 = v81;
          *(void *)&v239[8] = v187;
          *(void *)&v239[16] = v82;
          *(void *)&v239[24] = v83;
          *(void *)&v239[32] = v90;
          *(void *)&v239[40] = v69;
          *(void *)&v239[48] = v198;
          *(void *)&v239[56] = v197;
          *(void *)&v239[64] = v196;
          *(void *)&v239[72] = v195;
          *(_DWORD *)&v239[80] = v181;
          *(_WORD *)&v239[84] = v200;
          *(double *)&v239[88] = -*((double *)&v254 + 1);
          *(double *)&v239[96] = -*(double *)&v255;
          *(void *)&v239[104] = v37;
          long long v240 = v38;
          *(_DWORD *)uint64_t v241 = 0;
          *(double *)&v241[8] = -*((double *)&v254 + 1);
          *(double *)&v241[16] = -*(double *)&v255;
          *(void *)&v241[24] = v37;
          *(void *)&v241[32] = v38;
          *(void *)&v241[40] = v203;
          long long v242 = xmmword_2461B9DE0;
          *(void *)&long long v243 = 0;
          BYTE10(v243) = 0;
          WORD4(v243) = 0;
          HIDWORD(v243) = 0;
          v244[0] = v97;
          *(_DWORD *)&v244[4] = v91;
          *(void *)&v244[8] = static GraphicsBlendMode.normal;
          v244[16] = byte_26B0EB4A0;
          *(_DWORD *)&v244[20] = 1065353216;
          v244[24] = 0;
          outlined copy of _ShapeStyle_RenderedShape.Shape(v79, v80, v81, v187, v82, v83, v90, v69, v198, v197, v196, v195, v181);
          outlined copy of GraphicsBlendMode(v98, v99);
          _ShapeStyle_RenderedShape.render(color:)(1.0, 1.0, 1.0, 1.0);
          _ShapeStyle_RenderedShape.commitItem()((uint64_t)&v216);
          long long v100 = v216;
          long long v101 = v217;
          long long v102 = v218;
          long long v103 = v219;
          int v104 = (unsigned __int16)v220 | (BYTE2(v220) << 16);
          int v105 = DWORD1(v220);
          if ((unint64_t)v219 >> 62 != 3
            || (v104 & 0xFFFFFF) != 0
            || (void)v219 != 0xC000000000000000
            || *((void *)&v219 + 1) | *((void *)&v218 + 1))
          {
            _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
            uint64_t v108 = swift_allocObject();
            *(_OWORD *)(v108 + 16) = xmmword_2461B9DC0;
            *(_OWORD *)(v108 + 32) = v100;
            *(_OWORD *)(v108 + 48) = v101;
            *(_OWORD *)(v108 + 64) = v102;
            *(_OWORD *)(v108 + 80) = v103;
            *(unsigned char *)(v108 + 98) = BYTE2(v104);
            *(_WORD *)(v108 + 96) = v104;
            *(_DWORD *)(v108 + 100) = v105;
            long long v231 = v100;
            long long v232 = v101;
            long long v233 = v102;
            long long v234 = v103;
            char v236 = BYTE2(v104);
            __int16 v235 = v104;
            int v237 = v105;
            outlined copy of DisplayList.Item.Value(*((uint64_t *)&v102 + 1), v103);
            DisplayList.Item.features.getter((__int16 *)v263);
            __int16 v107 = v263[0];
            long long v231 = v100;
            long long v232 = v101;
            long long v233 = v102;
            long long v234 = v103;
            char v236 = BYTE2(v104);
            __int16 v235 = v104;
            int v237 = v105;
            DisplayList.Item.properties.getter(v263);
            outlined consume of DisplayList.Item.Value(*((uint64_t *)&v102 + 1), v103);
            char v106 = v263[0];
          }
          else
          {
            outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
            char v106 = 0;
            __int16 v107 = 0;
            uint64_t v108 = MEMORY[0x263F8EE78];
          }
          uint64_t v109 = swift_allocObject();
          *(void *)(v109 + 16) = v108;
          *(_WORD *)(v109 + 24) = v107;
          *(unsigned char *)(v109 + 26) = v106;
          *(_DWORD *)(v109 + 28) = v212;
          unint64_t v110 = *((void *)&v257 + 1);
          uint64_t v111 = v258;
          int v112 = WORD4(v258) | (BYTE10(v258) << 16);
          uint64_t v113 = *((void *)&v255 + 1);
          uint64_t v114 = v256;
          uint64_t v115 = v257;
          uint64_t v116 = *((void *)&v256 + 1);
          if (*((void *)&v257 + 1) >> 62 != 3
            || (v112 & 0xFFFFFF) != 0
            || *((void *)&v257 + 1) != 0xC000000000000000
            || (unint64_t)v258 | (unint64_t)v257)
          {
            _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
            uint64_t v119 = swift_allocObject();
            *(_OWORD *)(v119 + 16) = xmmword_2461B9DC0;
            *(void *)(v119 + 32) = 0;
            *(void *)(v119 + 40) = 0;
            *(void *)(v119 + 48) = v113;
            *(void *)(v119 + 56) = v114;
            *(void *)(v119 + 64) = v116;
            *(void *)(v119 + 72) = v115;
            *(void *)(v119 + 80) = v110;
            *(void *)(v119 + 88) = v111;
            *(unsigned char *)(v119 + 98) = BYTE2(v112);
            *(_WORD *)(v119 + 96) = v112;
            *(_DWORD *)(v119 + 100) = 0;
            long long v216 = 0uLL;
            *(void *)&long long v217 = v113;
            *((void *)&v217 + 1) = v114;
            *(void *)&long long v218 = v116;
            *((void *)&v218 + 1) = v115;
            *(void *)&long long v219 = v110;
            *((void *)&v219 + 1) = v111;
            BYTE2(v220) = BYTE2(v112);
            LOWORD(v220) = v112;
            DWORD1(v220) = 0;
            outlined copy of DisplayList.Item.Value(v115, v110);
            swift_retain();
            DisplayList.Item.features.getter((__int16 *)&v231);
            __int16 v118 = v231;
            long long v216 = 0uLL;
            *(void *)&long long v217 = v113;
            *((void *)&v217 + 1) = v114;
            *(void *)&long long v218 = v116;
            *((void *)&v218 + 1) = v115;
            *(void *)&long long v219 = v110;
            *((void *)&v219 + 1) = v111;
            BYTE2(v220) = BYTE2(v112);
            LOWORD(v220) = v112;
            DWORD1(v220) = 0;
            DisplayList.Item.properties.getter(&v231);
            char v117 = v231;
          }
          else
          {
            outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
            swift_retain();
            char v117 = 0;
            __int16 v118 = 0;
            uint64_t v119 = MEMORY[0x263F8EE78];
          }
          char v68 = v205;
          *(void *)&long long v257 = v109;
          *((void *)&v257 + 1) = 0x4000000700000000;
          *(void *)&long long v258 = v119;
          BYTE10(v258) = v117;
          WORD4(v258) = v118;
          char v120 = v259[0];
          LOBYTE(v216) = v259[0];
          DisplayList.Item.canonicalize(options:)((char *)&v216);
          outlined consume of DisplayList.Item.Value(v115, v110);
          swift_release();
          long long v228 = v242;
          long long v229 = v243;
          v230[0] = *(_OWORD *)v244;
          *(_OWORD *)((char *)v230 + 9) = *(_OWORD *)&v244[9];
          long long v224 = v240;
          long long v225 = *(_OWORD *)v241;
          long long v226 = *(_OWORD *)&v241[16];
          long long v227 = *(_OWORD *)&v241[32];
          long long v220 = *(_OWORD *)&v239[48];
          long long v221 = *(_OWORD *)&v239[64];
          long long v222 = *(_OWORD *)&v239[80];
          long long v223 = *(_OWORD *)&v239[96];
          long long v216 = v238;
          long long v217 = *(_OWORD *)v239;
          long long v218 = *(_OWORD *)&v239[16];
          long long v219 = *(_OWORD *)&v239[32];
          outlined release of _ShapeStyle_RenderedShape((uint64_t)&v216);
          if ((v205 & 1) == 0) {
            goto LABEL_82;
          }
LABEL_75:
          unint64_t v139 = *((void *)&v257 + 1);
          uint64_t v140 = v258;
          int v141 = WORD4(v258) | (BYTE10(v258) << 16);
          uint64_t v142 = *((void *)&v255 + 1);
          uint64_t v143 = v256;
          uint64_t v144 = v257;
          uint64_t v145 = *((void *)&v256 + 1);
          if (*((void *)&v257 + 1) >> 62 != 3
            || (v141 & 0xFFFFFF) != 0
            || *((void *)&v257 + 1) != 0xC000000000000000
            || (unint64_t)v258 | (unint64_t)v257)
          {
            _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
            uint64_t v148 = swift_allocObject();
            *(_OWORD *)(v148 + 16) = xmmword_2461B9DC0;
            *(void *)(v148 + 32) = 0;
            *(void *)(v148 + 40) = 0;
            *(void *)(v148 + 48) = v142;
            *(void *)(v148 + 56) = v143;
            *(void *)(v148 + 64) = v145;
            *(void *)(v148 + 72) = v144;
            *(void *)(v148 + 80) = v139;
            *(void *)(v148 + 88) = v140;
            *(unsigned char *)(v148 + 98) = BYTE2(v141);
            *(_WORD *)(v148 + 96) = v141;
            *(_DWORD *)(v148 + 100) = 0;
            long long v238 = 0uLL;
            *(void *)uint64_t v239 = v142;
            *(void *)&v239[8] = v143;
            *(void *)&v239[16] = v145;
            *(void *)&v239[24] = v144;
            *(void *)&v239[32] = v139;
            *(void *)&v239[40] = v140;
            v239[50] = BYTE2(v141);
            *(_WORD *)&v239[48] = v141;
            *(_DWORD *)&v239[52] = 0;
            outlined copy of DisplayList.Item.Value(v144, v139);
            DisplayList.Item.features.getter((__int16 *)&v216);
            __int16 v147 = v216;
            long long v238 = 0uLL;
            *(void *)uint64_t v239 = v142;
            *(void *)&v239[8] = v143;
            *(void *)&v239[16] = v145;
            *(void *)&v239[24] = v144;
            *(void *)&v239[32] = v139;
            *(void *)&v239[40] = v140;
            v239[50] = BYTE2(v141);
            char v68 = v205;
            *(_WORD *)&v239[48] = v141;
            *(_DWORD *)&v239[52] = 0;
            DisplayList.Item.properties.getter(&v216);
            char v146 = v216;
          }
          else
          {
            outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
            char v146 = 0;
            __int16 v147 = 0;
            uint64_t v148 = MEMORY[0x263F8EE78];
          }
          long long v257 = xmmword_2461D9D10;
          *(void *)&long long v258 = v148;
          BYTE10(v258) = v146;
          WORD4(v258) = v147;
          LOBYTE(v238) = v120;
          DisplayList.Item.canonicalize(options:)((char *)&v238);
          outlined consume of DisplayList.Item.Value(v144, v139);
          goto LABEL_82;
        }
        v263[0] = v79;
        v263[1] = v80;
        v263[2] = v81;
        v263[3] = v187;
        char v264 = v82;
        if (*((double *)&v254 + 1) == 0.0 && *(double *)&v255 == 0.0)
        {
          uint64_t v121 = v187;
          outlined copy of Path.Storage((uint64_t)v79, v80, v81, v187, v82);
          outlined copy of Path.Storage((uint64_t)v79, v80, v81, v187, v82);
          uint64_t v213 = (uint64_t)v79;
          uint64_t v122 = v80;
          uint64_t v123 = v81;
          unsigned __int8 v124 = v82;
        }
        else
        {
          CGAffineTransformMakeTranslation((CGAffineTransform *)&v238, -*((double *)&v254 + 1), -*(double *)&v255);
          long long v231 = v238;
          long long v232 = *(_OWORD *)v239;
          long long v233 = *(_OWORD *)&v239[16];
          outlined copy of Path.Storage((uint64_t)v79, v80, v81, v187, v82);
          Path.applying(_:)((double *)&v231, (uint64_t)v261);
          uint64_t v122 = v261[1];
          uint64_t v213 = v261[0];
          uint64_t v123 = v261[2];
          uint64_t v121 = v261[3];
          unsigned __int8 v124 = v262;
        }
        uint64_t v125 = swift_allocObject();
        *(void *)(v125 + 16) = v213;
        *(void *)(v125 + 24) = v122;
        uint64_t v126 = v122;
        *(void *)(v125 + 32) = v123;
        *(void *)(v125 + 40) = v121;
        uint64_t v209 = v121;
        unsigned __int8 v204 = v124;
        *(unsigned char *)(v125 + 48) = v124;
        *(unsigned char *)(v125 + 49) = BYTE1(v82) & 1;
        *(unsigned char *)(v125 + 50) = BYTE2(v82) & 1;
        *(_DWORD *)(v125 + 52) = v89;
        unint64_t v127 = *((void *)&v257 + 1);
        uint64_t v128 = v258;
        int v129 = WORD4(v258) | (BYTE10(v258) << 16);
        uint64_t v130 = *((void *)&v255 + 1);
        uint64_t v131 = v256;
        uint64_t v132 = v257;
        uint64_t v133 = *((void *)&v256 + 1);
        uint64_t v201 = v123;
        if (*((void *)&v257 + 1) >> 62 != 3
          || (v129 & 0xFFFFFF) != 0
          || *((void *)&v257 + 1) != 0xC000000000000000
          || (unint64_t)v258 | (unint64_t)v257)
        {
          _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
          uint64_t v137 = swift_allocObject();
          uint64_t v138 = v123;
          uint64_t v136 = v137;
          *(_OWORD *)(v137 + 16) = xmmword_2461B9DC0;
          *(void *)(v137 + 32) = 0;
          *(void *)(v137 + 40) = 0;
          *(void *)(v137 + 48) = v130;
          *(void *)(v137 + 56) = v131;
          *(void *)(v137 + 64) = v133;
          *(void *)(v137 + 72) = v132;
          *(void *)(v137 + 80) = v127;
          *(void *)(v137 + 88) = v128;
          *(unsigned char *)(v137 + 98) = BYTE2(v129);
          *(_WORD *)(v137 + 96) = v129;
          *(_DWORD *)(v137 + 100) = 0;
          long long v238 = 0uLL;
          *(void *)uint64_t v239 = v130;
          *(void *)&v239[8] = v131;
          *(void *)&v239[16] = v133;
          *(void *)&v239[24] = v132;
          *(void *)&v239[32] = v127;
          *(void *)&v239[40] = v128;
          v239[50] = BYTE2(v129);
          *(_WORD *)&v239[48] = v129;
          *(_DWORD *)&v239[52] = 0;
          outlined copy of Path.Storage(v213, v126, v138, v209, v204);
          outlined copy of DisplayList.Item.Value(v132, v127);
          swift_retain();
          DisplayList.Item.features.getter((__int16 *)&v216);
          __int16 v135 = v216;
          long long v238 = 0uLL;
          *(void *)uint64_t v239 = v130;
          *(void *)&v239[8] = v131;
          *(void *)&v239[16] = v133;
          *(void *)&v239[24] = v132;
          *(void *)&v239[32] = v127;
          *(void *)&v239[40] = v128;
          v239[50] = BYTE2(v129);
          char v68 = v205;
          *(_WORD *)&v239[48] = v129;
          *(_DWORD *)&v239[52] = 0;
          DisplayList.Item.properties.getter(&v216);
          char v134 = v216;
        }
        else
        {
          outlined copy of Path.Storage(v213, v126, v123, v209, v204);
          outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
          swift_retain();
          char v134 = 0;
          __int16 v135 = 0;
          uint64_t v136 = MEMORY[0x263F8EE78];
        }
        *(void *)&long long v257 = v125;
        *((void *)&v257 + 1) = 0x4000000600000000;
        *(void *)&long long v258 = v136;
        BYTE10(v258) = v134;
        WORD4(v258) = v135;
        char v120 = v259[0];
        LOBYTE(v238) = v259[0];
        DisplayList.Item.canonicalize(options:)((char *)&v238);
        outlined consume of DisplayList.Item.Value(v132, v127);
        outlined consume of _ShapeStyle_RenderedShape.Shape(v174, v173, v175, v187, v172, v171, v182, v193, v198, v197, v196, v195, v181);
        outlined consume of Path.Storage(v213, v126, v201, v209, v204);
        swift_release();
        if (v68) {
          goto LABEL_75;
        }
LABEL_82:
        _ShapeStyle_RenderedShape.commitItem()((uint64_t)&v238);
        uint64_t v149 = *(void *)&v239[24];
        unint64_t v150 = *(void *)&v239[32];
        int v151 = *(unsigned __int16 *)&v239[48] | (v239[50] << 16);
        if (v68)
        {
          long long v216 = v238;
          long long v217 = *(_OWORD *)v239;
          long long v218 = *(_OWORD *)&v239[16];
          long long v219 = *(_OWORD *)&v239[32];
          LOWORD(v220) = *(_WORD *)&v239[48];
          BYTE2(v220) = BYTE2(v151);
          DWORD1(v220) = *(_DWORD *)&v239[52];
          unsigned __int8 v152 = v189;
          if (v189 != 255)
          {
            char v153 = v189 & 1;
            uint64_t v154 = v186;
LABEL_88:
            uint64_t v214 = v154;
            char v215 = v153;
            outlined copy of GraphicsBlendMode?(v186, v152);
            CompositedItemAccumulator.add(item:blend:)(&v216, (uint64_t)&v214);
            outlined consume of GraphicsBlendMode(v154, v153);
            long long v243 = v258;
            *(_OWORD *)float64x2_t v244 = *(_OWORD *)v259;
            *(_OWORD *)&v244[9] = *(_OWORD *)&v259[9];
            long long v240 = v253;
            *(_OWORD *)uint64_t v241 = v254;
            *(_OWORD *)&v241[16] = v255;
            *(_OWORD *)&v241[32] = v256;
            long long v242 = v257;
            *(_OWORD *)&v239[48] = v249;
            *(_OWORD *)&v239[64] = v250;
            *(_OWORD *)&v239[80] = v251;
            *(_OWORD *)&v239[96] = v252;
            long long v238 = v245;
            *(_OWORD *)uint64_t v239 = v246;
            *(_OWORD *)&v239[16] = v247;
            *(_OWORD *)&v239[32] = v248;
            outlined release of _ShapeStyle_RenderedShape((uint64_t)&v238);
            return outlined consume of DisplayList.Item.Value(v149, v150);
          }
        }
        else
        {
          long long v216 = v238;
          long long v217 = *(_OWORD *)v239;
          long long v218 = *(_OWORD *)&v239[16];
          long long v219 = *(_OWORD *)&v239[32];
          LOWORD(v220) = *(_WORD *)&v239[48];
          BYTE2(v220) = BYTE2(v151);
          DWORD1(v220) = *(_DWORD *)&v239[52];
          unsigned __int8 v152 = v189;
          if (v189 != 255)
          {
            char v153 = v189 & 1;
            uint64_t v154 = v186;
            goto LABEL_88;
          }
        }
        uint64_t v154 = static GraphicsBlendMode.normal;
        char v153 = byte_26B0EB4A0;
        outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
        goto LABEL_88;
      }
      uint64_t v70 = *(void *)(v166 + 136);
      int v71 = *(_DWORD *)(v166 + 144);
      uint64_t v72 = *(void *)(v166 + 208);
      __int16 v73 = *(_WORD *)(v166 + 216);
      char v74 = *(unsigned char *)(v166 + 218);
      int v75 = *(_DWORD *)(v166 + 220);
      uint64_t v76 = *(void *)(v166 + 232);
      int v77 = *(_DWORD *)(v166 + 244);
      char v78 = *(unsigned char *)(v166 + 248);
      LOBYTE(v231) = *(unsigned char *)(v166 + 240);
      uint64_t v80 = v173;
      long long v79 = v174;
      *(void *)&long long v238 = v174;
      *((void *)&v238 + 1) = v173;
      uint64_t v81 = v175;
      *(void *)uint64_t v239 = v175;
      *(void *)&v239[8] = v187;
      uint64_t v83 = v171;
      uint64_t v82 = v172;
      *(void *)&v239[16] = v172;
      *(void *)&v239[24] = v171;
      *(void *)&v239[32] = v182;
      *(void *)&v239[40] = v44;
      *(void *)&v239[48] = v198;
      *(void *)&v239[56] = v197;
      *(void *)&v239[64] = v196;
      *(void *)&v239[72] = v195;
      *(_DWORD *)&v239[80] = v181;
      *(_WORD *)&v239[84] = v200;
      *(_OWORD *)&v239[88] = *(_OWORD *)(v166 + 104);
      *(void *)&v239[104] = v37;
      *(void *)&long long v240 = v38;
      *((void *)&v240 + 1) = v70;
      *(_DWORD *)uint64_t v241 = v71;
      *(_OWORD *)&v241[8] = *(_OWORD *)(v166 + 152);
      *(_OWORD *)&v241[24] = *(_OWORD *)(v166 + 168);
      *(void *)&v241[40] = v203;
      long long v242 = *(_OWORD *)(v166 + 192);
      *(void *)&long long v243 = v72;
      BYTE10(v243) = v74;
      WORD4(v243) = v73;
      HIDWORD(v243) = v75;
      char v84 = v194;
      v244[0] = v194;
      *(_DWORD *)&v244[4] = v211;
      *(void *)&v244[8] = v76;
      v244[16] = v231;
      *(_DWORD *)&v244[20] = v77;
      v244[24] = v78;
      _ShapeStyle_RenderedShape.bounds.getter();
      CGFloat x = v265.origin.x;
      CGFloat y = v265.origin.y;
      CGFloat width = v265.size.width;
      CGFloat height = v265.size.height;
      if (CGRectIsNull(v265))
      {
        int64x2_t v88 = (int64x2_t)xmmword_2461D9D00;
        CGFloat x = 0.0;
        CGFloat y = 0.0;
        CGFloat width = 0.0;
      }
      else
      {
        int64x2_t v88 = vdupq_n_s64(0x10000uLL);
        *(CGFloat *)v88.i64 = height;
      }
      LOBYTE(v263[0]) = byte_26B0EB4A0;
      *(CGFloat *)&long long v238 = x;
      *((CGFloat *)&v238 + 1) = y;
      *(CGFloat *)uint64_t v239 = width;
      *(int64x2_t *)&v239[8] = v88;
      memset(&v239[24], 0, 60);
      *(_WORD *)&v239[84] = v200;
      *(void *)&v239[96] = 0;
      *(void *)&v239[88] = 0;
      *(void *)&v239[104] = v37;
      long long v240 = v38;
      *(_DWORD *)uint64_t v241 = 0;
      *(void *)&v241[16] = 0;
      *(void *)&v241[8] = 0;
      *(void *)&v241[24] = v37;
      *(void *)&v241[32] = v38;
      *(void *)&v241[40] = v203;
      long long v242 = xmmword_2461B9DE0;
      *(void *)&long long v243 = 0;
      BYTE10(v243) = 0;
      WORD4(v243) = 0;
      HIDWORD(v243) = 0;
      v244[0] = v194;
      *(_DWORD *)&v244[4] = v211;
      *(void *)&v244[8] = static GraphicsBlendMode.normal;
      v244[16] = byte_26B0EB4A0;
      *(_DWORD *)&v244[20] = 1065353216;
      v244[24] = 0;
      if ((v205 & 8) != 0)
      {
        outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
        _ShapeStyle_RenderedShape.render(color:)(1.0, 1.0, 1.0, 1.0);
        goto LABEL_48;
      }
      if (v188 == 1)
      {
        uint64_t v92 = (uint64_t)v176;
        uint64_t v93 = *(uint64_t (**)(id))(*(void *)v176 + 104);
        outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
        id v94 = outlined copy of _ShapeStyle_Pack.Fill(v176, v180, v178, v179, v167, v168, v169, v170, v177, v185, 1);
        char v95 = 1;
        char v96 = v93(v94);
        uint64_t v81 = v175;
        uint64_t v69 = v193;
        if ((v96 & 1) == 0)
        {
          _ShapeStyle_RenderedShape.render(paint:)((uint64_t)v176);
          outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v176, v180, (uint64_t)v178, v179, v167, v168, v169, v170, v177, v185, 1);
LABEL_47:
          char v84 = v194;
          goto LABEL_48;
        }
      }
      else
      {
        if (!v188)
        {
          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
          _ShapeStyle_RenderedShape.render(color:)(*(float *)&v176, *((float *)&v176 + 1), *(float *)&v180, *((float *)&v180 + 1));
LABEL_48:
          _ShapeStyle_RenderedShape.background(_:)(&v238);
          long long v228 = v242;
          long long v229 = v243;
          v230[0] = *(_OWORD *)v244;
          *(_OWORD *)((char *)v230 + 9) = *(_OWORD *)&v244[9];
          long long v224 = v240;
          long long v225 = *(_OWORD *)v241;
          long long v226 = *(_OWORD *)&v241[16];
          long long v227 = *(_OWORD *)&v241[32];
          long long v220 = *(_OWORD *)&v239[48];
          long long v221 = *(_OWORD *)&v239[64];
          long long v222 = *(_OWORD *)&v239[80];
          long long v223 = *(_OWORD *)&v239[96];
          long long v216 = v238;
          long long v217 = *(_OWORD *)v239;
          long long v218 = *(_OWORD *)&v239[16];
          long long v219 = *(_OWORD *)&v239[32];
          outlined release of _ShapeStyle_RenderedShape((uint64_t)&v216);
          int v89 = 0;
          int v91 = v211;
          unint64_t v90 = v182;
          goto LABEL_49;
        }
        outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
        uint64_t v92 = (uint64_t)v176;
        outlined copy of _ShapeStyle_Pack.Fill(v176, v180, v178, v179, v167, v168, v169, v170, v177, v185, v188);
        char v95 = v188;
      }
      _ShapeStyle_RenderedShape.render(color:)(1.0, 1.0, 1.0, 1.0);
      outlined consume of _ShapeStyle_Pack.Fill(v92, v180, (uint64_t)v178, v179, v167, v168, v169, v170, v177, v185, v95);
      goto LABEL_47;
    }
    if (v188 == 1)
    {
      uint64_t v46 = (uint64_t)v176;
      uint64_t v165 = *(uint64_t (**)(id))(*(void *)v176 + 104);
      outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
      uint64_t v48 = v177;
      uint64_t v47 = (uint64_t)v178;
      unsigned __int8 v49 = v179;
      unsigned __int8 v45 = v180;
      uint64_t v51 = v167;
      uint64_t v50 = v168;
      uint64_t v53 = v169;
      uint64_t v52 = v170;
      id v54 = outlined copy of _ShapeStyle_Pack.Fill(v176, v180, v178, v179, v167, v168, v169, v170, v177, v185, 1);
      if ((v165(v54) & 1) == 0)
      {
        _ShapeStyle_RenderedShape.render(paint:)((uint64_t)v176);
        char v55 = 1;
LABEL_25:
        outlined consume of _ShapeStyle_Pack.Fill(v46, v45, v47, v49, v51, v50, v53, v52, v48, v185, v55);
        uint64_t v44 = v193;
        goto LABEL_26;
      }
    }
    else
    {
      unsigned __int8 v45 = v180;
      if (!v188)
      {
        outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
        _ShapeStyle_RenderedShape.render(color:)(*(float *)&v176, *((float *)&v176 + 1), *(float *)&v180, *((float *)&v180 + 1));
        goto LABEL_26;
      }
      outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
      uint64_t v46 = (uint64_t)v176;
      uint64_t v48 = v177;
      uint64_t v47 = (uint64_t)v178;
      unsigned __int8 v49 = v179;
      uint64_t v51 = v167;
      uint64_t v50 = v168;
      uint64_t v53 = v169;
      uint64_t v52 = v170;
      outlined copy of _ShapeStyle_Pack.Fill(v176, v180, v178, v179, v167, v168, v169, v170, v177, v185, v188);
    }
    _ShapeStyle_RenderedShape.render(color:)(1.0, 1.0, 1.0, 1.0);
    char v55 = v188;
    goto LABEL_25;
  }
  if ((a5 & 1) == 0) {
    goto LABEL_10;
  }
  if ((*(unsigned char *)(v6 + 248) & 2) != 0)
  {
LABEL_9:
    uint64_t v186 = *(void *)(a2 + 88);
    unsigned int v27 = 1;
    goto LABEL_11;
  }
  char v210 = *(unsigned char *)(v6 + 248);
  *a6 = 0;
  uint64_t v21 = v11;
  uint64_t v22 = swift_allocObject();
  v23.i64[0] = v191;
  v23.i64[1] = v190;
  *(int8x16_t *)(v22 + 16) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(LODWORD(v199), v192), 0x20uLL), v23);
  *(void *)(v22 + 32) = v8;
  *(void *)(v22 + 40) = v7;
  *(void *)(v22 + 48) = v9;
  *(void *)(v22 + 56) = LODWORD(v10) | (unint64_t)(v21 << 32);
  *(_OWORD *)(v22 + 64) = 0u;
  *(_OWORD *)(v22 + 80) = 0u;
  *(_OWORD *)(v22 + 96) = 0u;
  *(_OWORD *)(v22 + 112) = 0u;
  *(_DWORD *)(v22 + 128) = 0;
  *(unsigned char *)(v22 + 132) = 2;
  *(void *)&long long v245 = v22;
  DWORD2(v245) = 0;
  BYTE12(v245) = 9;
  _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v245);
  uint64_t result = swift_release();
  if (v205 || v10 != 0.5) {
    goto LABEL_114;
  }
  unsigned __int8 v25 = v189;
  if (v189 == 255)
  {
    outlined copy of _ShapeStyle_Pack.Fill(v13, v12, v178, v179, v14, v16, v15, v17, v177, v18, v188);
    outlined copy of GraphicsBlendMode?(v20, 0xFFu);
    uint64_t v155 = one-time initialization token for normal;
    swift_bridgeObjectRetain();
    if (v155 != -1) {
      swift_once();
    }
    uint64_t v202 = static GraphicsBlendMode.normal;
    char v206 = byte_26B0EB4A0;
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
    char v26 = v188;
    unsigned __int8 v25 = -1;
  }
  else
  {
    char v206 = v189 & 1;
    char v26 = v188;
    outlined copy of _ShapeStyle_Pack.Fill(v13, v12, v178, v179, v14, v16, v15, v17, v177, v18, v188);
    outlined copy of GraphicsBlendMode?(v20, v189);
    swift_bridgeObjectRetain();
    uint64_t v202 = v20;
  }
  outlined copy of GraphicsBlendMode?(v20, v25);
  outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v13, v12, (uint64_t)v178, v179, v14, v16, v15, v17, v177, v18, v26);
  outlined consume of GraphicsBlendMode?(v20, v25);
  swift_bridgeObjectRelease();
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  uint64_t v156 = static GraphicsBlendMode.normal;
  char v157 = byte_26B0EB4A0;
  if (v206)
  {
    if (byte_26B0EB4A0)
    {
      swift_unknownObjectRetain();
      outlined consume of GraphicsBlendMode(v202, 1);
      uint64_t result = outlined consume of GraphicsBlendMode(v156, 1);
      if (v202 != v156) {
        goto LABEL_114;
      }
      goto LABEL_101;
    }
    swift_unknownObjectRetain();
LABEL_113:
    outlined copy of GraphicsBlendMode(v156, v157);
    outlined consume of GraphicsBlendMode(v202, v206);
    outlined consume of GraphicsBlendMode(v156, v157);
    uint64_t result = outlined consume of GraphicsBlendMode(v202, v206);
    goto LABEL_114;
  }
  if (byte_26B0EB4A0) {
    goto LABEL_113;
  }
  outlined consume of GraphicsBlendMode(v202, 0);
  uint64_t result = outlined consume of GraphicsBlendMode(v156, 0);
  if (v202 != v156) {
    goto LABEL_114;
  }
LABEL_101:
  unsigned int v158 = *(_DWORD *)(v166 + 96);
  int v159 = (v158 >> 21) & 7;
  if (!v159) {
    return result;
  }
  if (v159 != 4)
  {
LABEL_114:
    char v164 = v210;
    if (v210) {
      return result;
    }
LABEL_115:
    *(unsigned char *)(v166 + 248) = v164 | 1;
    return result;
  }
  int8x16_t v160 = vorrq_s8(vorrq_s8(vorrq_s8(*(int8x16_t *)(v166 + 32), *(int8x16_t *)(v166 + 64)), vorrq_s8(*(int8x16_t *)(v166 + 48), *(int8x16_t *)(v166 + 80))), vorrq_s8(*(int8x16_t *)v166, *(int8x16_t *)(v166 + 16)));
  int8x8_t v161 = vorr_s8(*(int8x8_t *)v160.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v160, v160, 8uLL));
  BOOL v163 = v158 == 0x800000 && *(void *)&v161 == 0;
  char v164 = v210;
  if ((v210 & 1) == 0 && !v163) {
    goto LABEL_115;
  }
  return result;
}

uint64_t push #1 (layers:above:) in _ShapeStyle_RenderedShape.render(style:)(uint64_t *a1, char a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (*(void *)(result + 16))
  {
    uint64_t v6 = swift_bridgeObjectRetain();
    DisplayList.init(_:)(v6, (uint64_t)v10);
    uint64_t v7 = *(void *)(a3 + 184);
    long long v8 = *(_OWORD *)(a3 + 120);
    long long v17 = *(_OWORD *)(a3 + 104);
    long long v18 = v8;
    uint64_t v19 = v7;
    long long v20 = xmmword_2461B9DD0;
    uint64_t v21 = *(void *)&v10[0];
    char v23 = BYTE10(v10[0]);
    __int16 v22 = WORD4(v10[0]);
    int v24 = 0;
    LOBYTE(v10[0]) = *(unsigned char *)(a3 + 224);
    DisplayList.Item.canonicalize(options:)((char *)v10);
    long long v9 = v20;
    v10[0] = v17;
    v10[1] = v18;
    uint64_t v11 = v19;
    long long v12 = v20;
    uint64_t v13 = v21;
    char v15 = v23;
    __int16 v14 = v22;
    int v16 = v24;
    DisplayList.Item.composite(_:above:)((uint64_t)v10, a2 & 1);
    return outlined consume of DisplayList.Item.Value(v9, *((unint64_t *)&v9 + 1));
  }
  return result;
}

void CompositedItemAccumulator.commitPendingItems()()
{
  uint64_t v3 = v0;
  char v5 = (double **)(v0 + 24);
  int v4 = *(double **)(v0 + 24);
  uint64_t v6 = *((void *)v4 + 2);
  if (!v6) {
    return;
  }
  double x = v4[4];
  double y = v4[5];
  CGFloat width = v4[6];
  CGFloat height = v4[7];
  uint64_t v11 = v6 - 1;
  if (v6 == 1)
  {
    uint64_t v12 = 1;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = (uint64_t)(v4 + 16);
    do
    {
      v72.origin.double x = x;
      v72.origin.double y = y;
      v72.size.CGFloat width = width;
      v72.size.CGFloat height = height;
      CGRect v73 = CGRectUnion(v72, *(CGRect *)(v1 - 24));
      double x = v73.origin.x;
      double y = v73.origin.y;
      CGFloat width = v73.size.width;
      CGFloat height = v73.size.height;
      v1 += 72;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    int v4 = *v5;
    uint64_t v12 = *((void *)*v5 + 2);
    if (!v12)
    {
LABEL_13:
      uint64_t v18 = swift_bridgeObjectRetain();
      DisplayList.init(_:)(v18, (uint64_t)&v51);
      uint64_t v12 = *(void *)v3;
      double v62 = x;
      double v63 = y;
      CGFloat v64 = width;
      CGFloat v65 = height;
      uint64_t v66 = v12;
      long long v67 = xmmword_2461B9DD0;
      uint64_t v68 = v51;
      unsigned __int8 v70 = BYTE2(v52);
      unsigned __int16 v69 = v52;
      int v71 = 0;
      LOBYTE(v51) = *(unsigned char *)(v3 + 10);
      DisplayList.Item.canonicalize(options:)((char *)&v51);
      LOWORD(v51) = *(_WORD *)(v3 + 8);
      DisplayList.Item.addDrawingGroup(contentSeed:)((unsigned __int16 *)&v51);
      uint64_t v1 = *(void *)(v3 + 32);
      uint64_t v2 = *(unsigned __int8 *)(v3 + 40);
      outlined copy of GraphicsBlendMode(v1, *(unsigned char *)(v3 + 40));
      if (one-time initialization token for normal == -1) {
        goto LABEL_14;
      }
      goto LABEL_40;
    }
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *char v5 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    int v4 = (double *)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  }
  unint64_t v14 = 0;
  unint64_t v15 = *((void *)v4 + 2);
  int v16 = v4 + 5;
  while (v14 < v15)
  {
    ++v14;
    double v17 = *v16 - y;
    *(v16 - 1) = *(v16 - 1) - x;
    *int v16 = v17;
    v16 += 9;
    if (v12 == v14)
    {
      *char v5 = v4;
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_40:
  swift_once();
LABEL_14:
  uint64_t v19 = static GraphicsBlendMode.normal;
  char v20 = byte_26B0EB4A0;
  unsigned __int8 v49 = v5;
  if ((v2 & 1) == 0)
  {
    if ((byte_26B0EB4A0 & 1) == 0)
    {
      outlined consume of GraphicsBlendMode(v1, 0);
      outlined consume of GraphicsBlendMode(v19, 0);
      if (v1 == v19) {
        goto LABEL_30;
      }
LABEL_23:
      uint64_t v50 = v1;
      uint64_t v48 = v12;
      CGFloat v21 = v64;
      CGFloat v22 = v65;
      uint64_t v23 = v66;
      long long v25 = v67;
      uint64_t v24 = v68;
      int v26 = v69 | (v70 << 16);
      int v27 = v71;
      if (*((void *)&v67 + 1) >> 62 != 3
        || (v26 & 0xFFFFFF) != 0
        || *((void *)&v67 + 1) != 0xC000000000000000
        || v68 | (unint64_t)v67)
      {
        _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
        uint64_t v31 = swift_allocObject();
        *(_OWORD *)(v31 + 16) = xmmword_2461B9DC0;
        *(void *)(v31 + 32) = 0;
        *(void *)(v31 + 40) = 0;
        *(CGFloat *)(v31 + 48) = v21;
        *(CGFloat *)(v31 + 56) = v22;
        *(void *)(v31 + 64) = v23;
        *(_OWORD *)(v31 + 72) = v25;
        *(void *)(v31 + 88) = v24;
        *(unsigned char *)(v31 + 98) = BYTE2(v26);
        *(_WORD *)(v31 + 96) = v26;
        *(_DWORD *)(v31 + 100) = v27;
        uint64_t v51 = 0;
        uint64_t v52 = 0;
        CGFloat v53 = v21;
        CGFloat v54 = v22;
        uint64_t v55 = v23;
        long long v56 = v25;
        uint64_t v57 = v24;
        char v59 = BYTE2(v26);
        __int16 v58 = v26;
        int v60 = v27;
        outlined copy of GraphicsBlendMode(v50, v2);
        outlined copy of DisplayList.Item.Value(v25, *((unint64_t *)&v25 + 1));
        DisplayList.Item.features.getter(&v61);
        uint64_t v32 = v23;
        __int16 v30 = v61;
        uint64_t v51 = 0;
        uint64_t v52 = 0;
        CGFloat v53 = v21;
        CGFloat v54 = v22;
        uint64_t v55 = v32;
        long long v56 = v25;
        uint64_t v57 = v24;
        char v59 = BYTE2(v26);
        __int16 v58 = v26;
        int v60 = v27;
        DisplayList.Item.properties.getter(&v61);
        uint64_t v28 = v50;
        outlined consume of DisplayList.Item.Value(v25, *((unint64_t *)&v25 + 1));
        unsigned __int8 v29 = v61;
      }
      else
      {
        uint64_t v28 = v50;
        outlined copy of GraphicsBlendMode(v50, v2);
        unsigned __int8 v29 = 0;
        __int16 v30 = 0;
        uint64_t v31 = MEMORY[0x263F8EE78];
      }
      uint64_t v66 = v48;
      *(void *)&long long v67 = v28;
      *((void *)&v67 + 1) = v2 | 0x4000000500000000;
      uint64_t v68 = v31;
      unsigned __int8 v70 = v29;
      unsigned __int16 v69 = v30;
      int v71 = 0;
      goto LABEL_30;
    }
LABEL_22:
    outlined copy of GraphicsBlendMode(v19, v20);
    outlined consume of GraphicsBlendMode(v1, v2);
    outlined consume of GraphicsBlendMode(v19, v20);
    outlined consume of GraphicsBlendMode(v1, v2);
    goto LABEL_23;
  }
  if (!byte_26B0EB4A0)
  {
    swift_unknownObjectRetain();
    goto LABEL_22;
  }
  swift_unknownObjectRetain();
  outlined consume of GraphicsBlendMode(v1, 1);
  outlined consume of GraphicsBlendMode(v19, 1);
  if (v1 != v19) {
    goto LABEL_23;
  }
LABEL_30:
  double v33 = v62;
  double v34 = v63;
  CGFloat v35 = v64;
  CGFloat v36 = v65;
  uint64_t v37 = v66;
  long long v39 = v67;
  uint64_t v38 = v68;
  int v40 = v69 | (v70 << 16);
  int v41 = v71;
  uint64_t v42 = *(void **)(v3 + 16);
  outlined copy of DisplayList.Item.Value(v67, *((unint64_t *)&v67 + 1));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
  }
  unint64_t v44 = v42[2];
  unint64_t v43 = v42[3];
  if (v44 >= v43 >> 1) {
    uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v43 > 1), v44 + 1, 1, v42);
  }
  v42[2] = v44 + 1;
  unsigned __int8 v45 = &v42[9 * v44];
  *((double *)v45 + 4) = v33;
  *((double *)v45 + 5) = v34;
  *((CGFloat *)v45 + 6) = v35;
  *((CGFloat *)v45 + 7) = v36;
  v45[8] = v37;
  *(_OWORD *)(v45 + 9) = v39;
  v45[11] = v38;
  *((unsigned char *)v45 + 98) = BYTE2(v40);
  *((_WORD *)v45 + 48) = v40;
  *((_DWORD *)v45 + 25) = v41;
  *(void *)(v3 + 16) = v42;
  int v46 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v47 = *(void *)(v3 + 24);
  if (v46)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v47 + 16));
  }
  else
  {
    *unsigned __int8 v49 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v47 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  outlined consume of DisplayList.Item.Value(v67, *((unint64_t *)&v67 + 1));
}

uint64_t CompositedItemAccumulator.add(item:blend:)(long long *a1, uint64_t a2)
{
  long long v24 = a1[1];
  long long v25 = *a1;
  uint64_t v3 = *((void *)a1 + 5);
  uint64_t v23 = *((void *)a1 + 4);
  unint64_t v5 = *((void *)a1 + 6);
  uint64_t v4 = *((void *)a1 + 7);
  int v6 = *((unsigned __int16 *)a1 + 32) | (*((unsigned __int8 *)a1 + 66) << 16);
  uint64_t v7 = *(void *)a2;
  char v8 = *(unsigned char *)(a2 + 8);
  if (!*(void *)(*(void *)(v2 + 24) + 16)) {
    goto LABEL_11;
  }
  uint64_t v9 = *(void *)(v2 + 32);
  char v10 = *(unsigned char *)(v2 + 40);
  if (v10)
  {
    if (*(unsigned char *)(a2 + 8))
    {
      outlined copy of GraphicsBlendMode(*(void *)a2, 1);
      outlined copy of GraphicsBlendMode(v9, 1);
      outlined consume of GraphicsBlendMode(v9, 1);
      outlined consume of GraphicsBlendMode(v7, 1);
      if (v9 == v7) {
        goto LABEL_12;
      }
LABEL_11:
      CompositedItemAccumulator.commitPendingItems()();
      uint64_t v11 = *(void *)(v2 + 32);
      char v12 = *(unsigned char *)(v2 + 40);
      outlined copy of GraphicsBlendMode(v7, v8);
      outlined consume of GraphicsBlendMode(v11, v12);
      *(void *)(v2 + 32) = v7;
      *(unsigned char *)(v2 + 40) = v8;
      goto LABEL_12;
    }
    swift_unknownObjectRetain_n();
LABEL_10:
    outlined copy of GraphicsBlendMode(v7, v8);
    outlined consume of GraphicsBlendMode(v9, v10);
    outlined consume of GraphicsBlendMode(v7, v8);
    outlined consume of GraphicsBlendMode(v9, v10);
    goto LABEL_11;
  }
  if (*(unsigned char *)(a2 + 8)) {
    goto LABEL_10;
  }
  outlined consume of GraphicsBlendMode(*(void *)(v2 + 32), 0);
  outlined consume of GraphicsBlendMode(v7, 0);
  if (v9 != v7) {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v13 = *(void **)(v2 + 24);
  outlined copy of DisplayList.Item.Value(v3, v5);
  outlined copy of DisplayList.Item.Value(v3, v5);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
  }
  unint64_t v15 = v13[2];
  unint64_t v14 = v13[3];
  if (v15 >= v14 >> 1) {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v13);
  }
  uint64_t v13[2] = v15 + 1;
  int v16 = &v13[9 * v15];
  *((_OWORD *)v16 + 2) = v25;
  *((_OWORD *)v16 + 3) = v24;
  v16[8] = v23;
  v16[9] = v3;
  v16[10] = v5;
  v16[11] = v4;
  *((unsigned char *)v16 + 98) = BYTE2(v6);
  *((_WORD *)v16 + 48) = v6;
  *((_DWORD *)v16 + 25) = 0;
  *(void *)(v2 + 24) = v13;
  if (*(unsigned char *)(v2 + 41) != 1)
  {
    if (one-time initialization token for normal != -1) {
      swift_once();
    }
    uint64_t v19 = static GraphicsBlendMode.normal;
    char v20 = byte_26B0EB4A0;
    if (v8)
    {
      if (byte_26B0EB4A0)
      {
        outlined copy of GraphicsBlendMode(v7, 1);
        outlined copy of GraphicsBlendMode(v19, 1);
        outlined consume of GraphicsBlendMode(v7, 1);
        outlined consume of GraphicsBlendMode(v19, 1);
        uint64_t result = outlined consume of DisplayList.Item.Value(v3, v5);
        BOOL v21 = v7 == v19;
        goto LABEL_25;
      }
      swift_unknownObjectRetain();
    }
    else if ((byte_26B0EB4A0 & 1) == 0)
    {
      outlined consume of GraphicsBlendMode(v7, 0);
      outlined consume of GraphicsBlendMode(v19, 0);
      uint64_t result = outlined consume of DisplayList.Item.Value(v3, v5);
      BOOL v21 = v7 == v19;
LABEL_25:
      char v22 = v21;
      goto LABEL_30;
    }
    outlined copy of GraphicsBlendMode(v19, v20);
    outlined consume of GraphicsBlendMode(v7, v8);
    outlined consume of GraphicsBlendMode(v19, v20);
    uint64_t result = outlined consume of DisplayList.Item.Value(v3, v5);
    char v22 = 0;
LABEL_30:
    char v18 = v22 ^ 1;
    goto LABEL_31;
  }
  uint64_t result = outlined consume of DisplayList.Item.Value(v3, v5);
  char v18 = 1;
LABEL_31:
  *(unsigned char *)(v2 + 41) = v18;
  return result;
}

uint64_t specialized drawStyled #1 (list:id:style:keyColor:) in _ShapeStyle_RenderedShape.renderKeyedText(_:style:name:layers:)(uint64_t a1, uint64_t *a2, uint64_t *a3, id a4, uint64_t a5, int *a6, int a7, int a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15, float a16, uint64_t a17, uint64_t a18)
{
  uint64_t v85 = a2[1];
  uint64_t v87 = *a2;
  char v83 = *((unsigned char *)a2 + 16);
  uint64_t v30 = *a3;
  uint64_t v31 = a3[1];
  uint64_t v75 = v31;
  uint64_t v76 = *a3;
  uint64_t v32 = a3[2];
  uint64_t v74 = v32;
  uint64_t v97 = a3[4];
  uint64_t v98 = a3[3];
  uint64_t v95 = a3[6];
  uint64_t v96 = a3[5];
  uint64_t v93 = a3[8];
  uint64_t v94 = a3[7];
  uint64_t v33 = *((unsigned __int8 *)a3 + 80);
  unsigned int v81 = *((_DWORD *)a3 + 21);
  uint64_t v91 = a3[11];
  uint64_t v92 = a3[9];
  uint64_t v34 = *((unsigned __int8 *)a3 + 96);
  char v77 = *((unsigned char *)a3 + 96);
  char v78 = *((unsigned char *)a3 + 80);
  uint64_t v90 = a3[13];
  objc_msgSend(a4, sel_removeAll);
  *(float *)&double v35 = a9;
  *(float *)&double v36 = a10;
  *(float *)&double v37 = a11;
  *(float *)&double v38 = a12;
  *(float *)&double v39 = a13;
  *(float *)&double v40 = a14;
  *(float *)&double v41 = a15;
  *(float *)&double v42 = a16;
  objc_msgSend(a4, sel_addColorReplacementFrom_to_colorSpace_, 2, v35, v36, v37, v38, v39, v40, v41, v42);
  long long v43 = *(_OWORD *)(a5 + 208);
  long long v121 = *(_OWORD *)(a5 + 192);
  long long v122 = v43;
  v123[0] = *(_OWORD *)(a5 + 224);
  *(_OWORD *)((char *)v123 + 9) = *(_OWORD *)(a5 + 233);
  long long v44 = *(_OWORD *)(a5 + 144);
  long long v117 = *(_OWORD *)(a5 + 128);
  long long v118 = v44;
  long long v45 = *(_OWORD *)(a5 + 176);
  long long v119 = *(_OWORD *)(a5 + 160);
  long long v120 = v45;
  long long v46 = *(_OWORD *)(a5 + 80);
  v114[4] = *(_OWORD *)(a5 + 64);
  v114[5] = v46;
  long long v47 = *(_OWORD *)(a5 + 112);
  long long v115 = *(_OWORD *)(a5 + 96);
  long long v116 = v47;
  long long v48 = *(_OWORD *)(a5 + 16);
  v114[0] = *(_OWORD *)a5;
  v114[1] = v48;
  long long v49 = *(_OWORD *)(a5 + 48);
  v114[2] = *(_OWORD *)(a5 + 32);
  v114[3] = v49;
  outlined retain of _ShapeStyle_RenderedShape((uint64_t)v114);
  id v50 = objc_msgSend(a4, sel_copyApplyingToDisplayList_, a1);
  swift_beginAccess();
  int v51 = *a6;
  objc_msgSend(v50, sel_boundingRect);
  double x = v124.origin.x;
  double y = v124.origin.y;
  double width = v124.size.width;
  double height = v124.size.height;
  BOOL IsNull = CGRectIsNull(v124);
  double v57 = 0.0;
  if (IsNull) {
    double v58 = 0.0;
  }
  else {
    double v58 = x;
  }
  if (IsNull) {
    double v59 = 0.0;
  }
  else {
    double v59 = y;
  }
  if (IsNull) {
    double v60 = 0.0;
  }
  else {
    double v60 = width;
  }
  if (!IsNull) {
    double v57 = height;
  }
  unint64_t v80 = WORD2(v115);
  uint64_t v79 = *((void *)&v120 + 1);
  CGRect v125 = CGRectIntegral(*(CGRect *)(&v57 - 3));
  double v61 = v125.origin.x;
  double v62 = v125.origin.y;
  CGFloat v63 = v125.size.width;
  CGFloat v64 = v125.size.height;
  uint64_t v65 = swift_allocObject();
  *(void *)(v65 + 16) = v50;
  *(double *)(v65 + 24) = v61;
  *(double *)(v65 + 32) = v62;
  *(unsigned char *)(v65 + 40) = 0;
  *(_DWORD *)(v65 + 44) = 0;
  *(unsigned char *)(v65 + 48) = 1;
  *(_DWORD *)(v65 + 52) = v51 | 0xE0;
  *(unsigned char *)(v65 + 56) = 3;
  outlined release of _ShapeStyle_RenderedShape((uint64_t)v114);
  v112[0] = v87;
  v112[1] = v85;
  char v113 = v83;
  *(void *)&long long v99 = v30;
  *((void *)&v99 + 1) = v31;
  uint64_t v100 = v32;
  uint64_t v101 = v98;
  uint64_t v102 = v97;
  uint64_t v103 = v96;
  uint64_t v104 = v95;
  uint64_t v105 = v94;
  uint64_t v106 = v93;
  uint64_t v107 = v92;
  unint64_t v108 = v33 | ((unint64_t)v81 << 32);
  uint64_t v109 = v91;
  uint64_t v110 = v34;
  uint64_t v111 = v90;
  _ShapeStyle_RenderedLayers.beginLayer(id:style:shape:)((uint64_t)v112, &v99, a5);
  uint64_t v66 = *(void *)(a5 + 8);
  uint64_t v67 = *(void *)(a5 + 16);
  uint64_t v68 = *(void *)(a5 + 24);
  uint64_t v69 = *(void *)(a5 + 32);
  uint64_t v88 = *(void *)(a5 + 40);
  int v89 = *(void **)a5;
  uint64_t v84 = *(void *)(a5 + 56);
  unint64_t v86 = *(void *)(a5 + 48);
  long long v82 = *(_OWORD *)(a5 + 64);
  uint64_t v70 = *(void *)(a5 + 80);
  uint64_t v71 = *(void *)(a5 + 88);
  unsigned int v72 = *(_DWORD *)(a5 + 96);
  *(double *)a5 = v61 + *(double *)&a17;
  *(double *)(a5 + 8) = v62 + *(double *)&a18;
  *(CGFloat *)(a5 + 16) = v63;
  *(CGFloat *)(a5 + 24) = v64;
  *(void *)(a5 + 32) = v79;
  *(void *)(a5 + 40) = v65 | 0xA000000000000000;
  *(void *)(a5 + 48) = v80;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 72) = 0u;
  *(void *)(a5 + 88) = 0;
  *(_DWORD *)(a5 + 96) = 6291456;
  outlined copy of DisplayList.Item.Value(v65 | 0xA000000000000000, v80);
  outlined consume of _ShapeStyle_RenderedShape.Shape(v89, v66, v67, v68, v69, v88, v86, v84, v82, *((uint64_t *)&v82 + 1), v70, v71, v72);
  *(void *)&long long v99 = v76;
  *((void *)&v99 + 1) = v75;
  uint64_t v100 = v74;
  uint64_t v101 = v98;
  uint64_t v102 = v97;
  uint64_t v103 = v96;
  uint64_t v104 = v95;
  uint64_t v105 = v94;
  uint64_t v106 = v93;
  uint64_t v107 = v92;
  LOBYTE(v108) = v78;
  HIDWORD(v108) = v81;
  uint64_t v109 = v91;
  LOBYTE(v110) = v77;
  uint64_t v111 = v90;
  _ShapeStyle_RenderedShape.render(style:)((uint64_t)&v99);
  _ShapeStyle_RenderedLayers.endLayer(shape:)(a5);
  return swift_release();
}

SwiftUI::Time __swiftcall _ShapeStyle_InterpolatorGroup.nextUpdate(after:)(SwiftUI::Time after)
{
  uint64_t v3 = v1;
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v4 = *(double *)&static Time.infinity;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    char v8 = (double *)(v6 + 232);
    do
    {
      uint64_t v9 = v8 - 3;
      if (*(void *)(*((void *)v8 - 1) + 16)) {
        uint64_t v9 = v8;
      }
      *(SwiftUI::Time *)&result.seconds = *(SwiftUI::Time *)v9;
      if (*v9 < v4) {
        double v4 = *v9;
      }
      v8 += 28;
      --v7;
    }
    while (v7);
  }
  *uint64_t v3 = v4;
  return result;
}

uint64_t _ShapeStyle_InterpolatorGroup.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t _ShapeStyle_InterpolatorGroup.deinit()
{
  _ShapeStyle_InterpolatorGroup.reset()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _ShapeStyle_Pack.Style.draw(_:style:in:bounds:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  long long v59 = a2[1];
  long long v60 = *a2;
  uint64_t v58 = *((void *)a2 + 4);
  uint64_t v6 = *(void **)v4;
  uint64_t v7 = *(void *)(v4 + 8);
  uint64_t v9 = *(void **)(v4 + 16);
  char v8 = *(void **)(v4 + 24);
  uint64_t v69 = *(void *)(v4 + 56);
  uint64_t v70 = *(void *)(v4 + 48);
  uint64_t v73 = *(void *)(v4 + 72);
  uint64_t v74 = *(void *)(v4 + 64);
  char v72 = *(unsigned char *)(v4 + 80);
  float v10 = *(float *)(v4 + 84);
  uint64_t v63 = *(void *)(v4 + 88);
  uint64_t v64 = *(void *)(v4 + 40);
  int v65 = *(unsigned __int8 *)(v4 + 96);
  uint64_t v11 = *(void *)(v4 + 104);
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v78 = a3;
  uint64_t v67 = v7;
  uint64_t v68 = *(void **)v4;
  uint64_t v66 = (uint64_t)v9;
  uint64_t v75 = v8;
  uint64_t v71 = *(void *)(v4 + 32);
  if (!v12) {
    goto LABEL_32;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = 72 * v12;
  uint64_t v77 = v11;
  while (v12 <= *(void *)(v11 + 16))
  {
    uint64_t v14 = *(unsigned __int8 *)(v11 + v13 + 4);
    uint64_t v15 = *(unsigned int *)(v11 + v13);
    char v16 = *(unsigned char *)(v11 + v13 + 5);
    uint64_t v17 = *(void *)(v11 + v13 + 16);
    float v18 = *(float *)(v5 + 48);
    int v19 = *(unsigned __int8 *)(v11 + v13 + 24);
    outlined copy of GraphicsBlendMode?(v17, v19);
    swift_retain();
    uint64_t v20 = v5;
    if (v18 == (float)(v10 * v18))
    {
      if (v19 != 255) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v20 = v5;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v25 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v26 = swift_retain();
        uint64_t v20 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v26, v25, 1, 0);
        swift_release();
      }
      *(float *)(v20 + 48) = v10 * v18;
      if (v19 != 255)
      {
LABEL_8:
        uint64_t v21 = v17;
        if ((v19 & 1) == 0) {
          goto LABEL_9;
        }
        goto LABEL_19;
      }
    }
    if (one-time initialization token for normal != -1) {
      swift_once();
    }
    uint64_t v21 = static GraphicsBlendMode.normal;
    char v27 = byte_26B0EB4A0;
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
    if ((v27 & 1) == 0)
    {
LABEL_9:
      int v22 = *(_DWORD *)(v20 + 52);
      outlined copy of GraphicsBlendMode?(v17, v19);
      if (v22 != v21)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v76 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v23 = swift_retain();
          uint64_t v24 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v23, v76, 1, 0);
          swift_release();
          uint64_t v20 = v24;
        }
        *(_DWORD *)(v20 + 52) = v21;
      }
      goto LABEL_20;
    }
LABEL_19:
    outlined copy of GraphicsBlendMode?(v17, v19);
    outlined consume of GraphicsBlendMode(v21, 1);
LABEL_20:
    uint64_t v5 = v78;
    if ((v16 & 1) == 0)
    {
      if (((v15 | (v14 << 32)) & 0x800000000) != 0)
      {
        float v28 = *(float *)(v78 + 48);
        if (*(float *)(v20 + 48) != v28)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            uint64_t v29 = RBDrawingStateInit();
            type metadata accessor for GraphicsContext.Storage();
            swift_allocObject();
            uint64_t v30 = swift_retain();
            uint64_t v5 = v78;
            uint64_t v31 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v30, v29, 1, 0);
            swift_release();
            uint64_t v20 = v31;
          }
          *(float *)(v20 + 48) = v28;
        }
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v32 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v33 = swift_retain();
        uint64_t v5 = v78;
        uint64_t v34 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v33, v32, 1, 0);
        swift_release();
        uint64_t v20 = v34;
      }
      if (*(_DWORD *)(*(void *)(v20 + 16) + 64) != 2) {
        RBColorFromLinear();
      }
      RBDrawingStateAddShadowStyle3();
    }
    --v12;
    outlined consume of GraphicsBlendMode?(v17, v19);
    swift_release();
    v13 -= 72;
    uint64_t v11 = v77;
    if (!v12) {
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_31:
  swift_bridgeObjectRelease();
  uint64_t v7 = v67;
  uint64_t v6 = v68;
  uint64_t v9 = (void *)v66;
  char v8 = v75;
LABEL_32:
  uint64_t v95 = v5;
  float v35 = *(float *)(v5 + 48);
  swift_retain();
  if (v35 == (float)(v10 * v35))
  {
    uint64_t v36 = v64;
    uint64_t v38 = v69;
    uint64_t v37 = v70;
    uint64_t v40 = v73;
    uint64_t v39 = v74;
    char v41 = v72;
    unsigned __int8 v42 = v65;
    if (v65 != 255) {
      goto LABEL_34;
    }
LABEL_39:
    outlined copy of _ShapeStyle_Pack.Fill(v6, v7, v9, v8, v71, v36, v37, v38, v39, v40, v41);
    outlined copy of GraphicsBlendMode?(v63, 0xFFu);
    uint64_t v50 = one-time initialization token for normal;
    swift_bridgeObjectRetain();
    if (v50 != -1) {
      swift_once();
    }
    uint64_t v79 = static GraphicsBlendMode.normal;
    char v80 = byte_26B0EB4A0;
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
    uint64_t v38 = v69;
    uint64_t v37 = v70;
    uint64_t v45 = v63;
    uint64_t v36 = v64;
    unsigned __int8 v42 = v65;
    uint64_t v7 = v67;
    uint64_t v44 = (uint64_t)v68;
    uint64_t v9 = (void *)v66;
    uint64_t v43 = v71;
  }
  else
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v36 = v64;
    uint64_t v40 = v73;
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v37 = v70;
      uint64_t v47 = v5;
    }
    else
    {
      uint64_t v48 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v49 = swift_retain();
      uint64_t v47 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v49, v48, 1, 0);
      uint64_t v95 = v47;
      swift_release();
      uint64_t v40 = v73;
      uint64_t v37 = v70;
    }
    uint64_t v38 = v69;
    char v41 = v72;
    unsigned __int8 v42 = v65;
    uint64_t v78 = v47;
    *(float *)(v47 + 48) = v10 * v35;
    uint64_t v39 = v74;
    char v8 = v75;
    if (v65 == 255) {
      goto LABEL_39;
    }
LABEL_34:
    char v80 = v42 & 1;
    uint64_t v43 = v71;
    outlined copy of _ShapeStyle_Pack.Fill(v6, v7, v9, v8, v71, v36, v37, v38, v39, v40, v41);
    uint64_t v44 = (uint64_t)v6;
    uint64_t v45 = v63;
    outlined copy of GraphicsBlendMode?(v63, v42);
    swift_bridgeObjectRetain();
    uint64_t v79 = v63;
  }
  outlined copy of GraphicsBlendMode?(v45, v42);
  outlined consume of _ShapeStyle_Pack.Fill(v44, v7, (uint64_t)v9, v75, v43, v36, v37, v38, v74, v73, v72);
  outlined consume of GraphicsBlendMode?(v45, v42);
  swift_bridgeObjectRelease();
  uint64_t v51 = v36;
  if (v80)
  {
    outlined consume of GraphicsBlendMode(v79, 1);
    uint64_t v52 = v68;
  }
  else
  {
    uint64_t v53 = v78;
    uint64_t v52 = v68;
    if (*(_DWORD *)(v78 + 52) != v79)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v54 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v55 = swift_retain();
        uint64_t v95 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v55, v54, 1, 0);
        swift_release();
        uint64_t v53 = v95;
      }
      *(_DWORD *)(v53 + 52) = v79;
    }
  }
  uint64_t v84 = v52;
  uint64_t v85 = v7;
  unint64_t v86 = v9;
  uint64_t v87 = v75;
  uint64_t v88 = v71;
  uint64_t v89 = v51;
  uint64_t v90 = v70;
  uint64_t v91 = v69;
  uint64_t v92 = v74;
  uint64_t v93 = v73;
  char v94 = v72;
  v81[0] = v60;
  v81[1] = v59;
  uint64_t v82 = v58;
  char v83 = v57;
  outlined copy of _ShapeStyle_Pack.Fill(v52, v7, v9, v75, v71, v51, v70, v69, v74, v73, v72);
  _ShapeStyle_Pack.Fill.draw(_:style:in:bounds:)(a1, (uint64_t *)v81, &v95, a4);
  outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v52, v67, v66, v75, v71, v51, v70, v69, v74, v73, v72);

  return swift_release();
}

uint64_t _ShapeStyle_Pack.Fill.draw(_:style:in:bounds:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v163 = *MEMORY[0x263EF8340];
  outlined init with take of CGRect?(a4, (uint64_t)&v157);
  double v8 = v157;
  uint64_t result = v158;
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v11 = a2[2];
  uint64_t v12 = a2[3];
  unint64_t v13 = a2[4];
  char v14 = *((unsigned char *)a2 + 40);
  unint64_t v16 = *(void *)v4;
  unint64_t v15 = *(void *)(v4 + 8);
  unint64_t v17 = *(void *)(v4 + 16);
  float v18 = *(os_unfair_lock_s **)(v4 + 24);
  unint64_t v19 = *(void *)(v4 + 40);
  uint64_t v137 = *(void *)(v4 + 32);
  uint64_t v20 = *(void *)(v4 + 48);
  uint64_t v134 = *(void *)(v4 + 56);
  uint64_t v22 = *(void *)(v4 + 64);
  unint64_t v21 = *(void *)(v4 + 72);
  switch(*(unsigned char *)(v4 + 80))
  {
    case 1:
      *(void *)unsigned __int8 v152 = *a2;
      *(void *)&v152[8] = v9;
      *(void *)&v152[16] = v11;
      *(void *)&v152[24] = v12;
      *(void *)&v152[32] = v13;
      v152[40] = v14;
      uint64_t v30 = *a3;
      uint64_t v31 = *(void (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)v16 + 80);
      uint64_t v130 = v19;
      uint64_t v32 = v21;
      unsigned __int8 v33 = v15;
      swift_retain();
      v31(a1, v152, v30, a4);
      return outlined consume of _ShapeStyle_Pack.Fill(v16, v33, v17, v18, v137, v130, v20, v134, v22, v32, 1);
    case 2:
      double v115 = v157;
      uint64_t v116 = *(void *)(v4 + 8);
      uint64_t v103 = *a2;
      uint64_t v105 = a2[1];
      double v118 = *(double *)&v158;
      uint64_t v121 = *(void *)(v4 + 72);
      uint64_t v106 = a2[2];
      uint64_t v108 = a2[3];
      double v124 = v159;
      double v127 = v160;
      unint64_t v110 = a2[4];
      char v112 = *((unsigned char *)a2 + 40);
      uint64_t v131 = *(void *)(v4 + 40);
      uint64_t v113 = *(void *)(v4 + 64);
      uint64_t v114 = *(void *)v4;
      uint64_t v117 = *(void *)(v4 + 48);
      if (*(void *)(v4 + 24) == 3 && (v17 & 0xFFFFFFFFFFFFFFFELL) == 6)
      {
        outlined copy of Material.ID(v17, 3u);
        uint64_t v34 = (void *)MEMORY[0x263F8EE78];
      }
      else
      {
        unint64_t v62 = (unint64_t)v18 >> 32;
        outlined copy of Material.ID(v17, v18);
        unint64_t v63 = v17;
        char v64 = (char)v18;
        if (one-time initialization token for _shared != -1) {
          swift_once();
        }
        float v18 = (os_unfair_lock_s *)(static CoreMaterialCache._shared + 16);
        swift_retain();
        os_unfair_lock_lock(v18);
        *(void *)unsigned __int8 v152 = v63;
        v152[8] = v64;
        *(_DWORD *)&v152[12] = v62;
        *(_WORD *)&v152[16] = v137;
        uint64_t v34 = CoreMaterialCache.subscript.getter((uint64_t)v152);
        os_unfair_lock_unlock(v18);
        swift_release();
        uint64_t v20 = v117;
        LOBYTE(v18) = v64;
        unint64_t v17 = v63;
        uint64_t v22 = v113;
      }
      unint64_t v102 = HIDWORD(v16);
      outlined init with take of CGRect?(a4, (uint64_t)v161);
      if (v162)
      {
        Path.boundingRect.getter();
        double v66 = v65;
        double v68 = v67;
        double v70 = v69;
        double v72 = v71;
      }
      else
      {
        double v66 = v115;
        double v68 = v118;
        double v70 = v124;
        double v72 = v127;
      }
      uint64_t v78 = *a3;
      uint64_t v141 = *a3;
      uint64_t v79 = v34[2];
      if (v79)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        unint64_t v86 = (unsigned __int8 *)v34 + 44;
        do
        {
          uint64_t v92 = *(void *)(v86 - 12);
          int v93 = *v86;
          switch(v93)
          {
            case 9:
              int v87 = *(_DWORD *)(v92 + 128);
              char v88 = *(unsigned char *)(v92 + 132);
              long long v89 = *(_OWORD *)(v92 + 32);
              *(_OWORD *)unsigned __int8 v152 = *(_OWORD *)(v92 + 16);
              *(_OWORD *)&v152[16] = v89;
              long long v90 = *(_OWORD *)(v92 + 64);
              *(_OWORD *)&v152[32] = *(_OWORD *)(v92 + 48);
              *(_OWORD *)&v152[48] = v90;
              long long v91 = *(_OWORD *)(v92 + 96);
              *(_OWORD *)&v152[64] = *(_OWORD *)(v92 + 80);
              long long v153 = v91;
              long long v154 = *(_OWORD *)(v92 + 112);
              int v155 = v87;
              char v156 = v88;
              GraphicsContext.addFilter(_:in:)((uint64_t)v152, v66, v68, v70, v72, v80, v81, v82, v83, v84, v85);
              break;
            case 5:
              int v97 = *((_DWORD *)v86 - 1);
              if ((v97 & 1) == 0)
              {
                uint64_t v98 = v141;
                if (*(_DWORD *)(v141 + 52) != v92)
                {
                  outlined copy of GraphicsBlendMode(*(void *)(v86 - 12), 0);
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  {
                    uint64_t v136 = RBDrawingStateInit();
                    type metadata accessor for GraphicsContext.Storage();
                    swift_allocObject();
                    uint64_t v99 = swift_retain();
                    uint64_t v141 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v99, v136, 1, 0);
                    swift_release();
                    uint64_t v98 = v141;
                  }
                  *(_DWORD *)(v98 + 52) = v92;
                  outlined consume of DisplayList.Effect(v92, v97, 5);
                }
              }
              break;
            case 4:
              uint64_t v94 = v141;
              if (*(float *)(v141 + 48) != *(float *)&v92)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  uint64_t v95 = RBDrawingStateInit();
                  type metadata accessor for GraphicsContext.Storage();
                  swift_allocObject();
                  uint64_t v96 = swift_retain();
                  uint64_t v141 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v96, v95, 1, 0);
                  swift_release();
                  uint64_t v94 = v141;
                }
                *(_DWORD *)(v94 + 48) = v92;
              }
              break;
          }
          v86 += 16;
          --v79;
        }
        while (v79);
        swift_bridgeObjectRelease();
        uint64_t v78 = v141;
        uint64_t v20 = v117;
        uint64_t v22 = v113;
      }
      else
      {
        swift_retain();
      }
      *(void *)unsigned __int8 v152 = __PAIR64__(v102, v114);
      *(void *)&v152[8] = v116;
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)v152);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v152, (uint64_t)&v148);
      uint64_t v142 = v103;
      uint64_t v143 = v105;
      uint64_t v144 = v106;
      uint64_t v145 = v108;
      unint64_t v146 = v110;
      char v147 = v112;
      swift_retain();
      GraphicsContext.draw(_:with:style:)(a1, &v148, &v142, v78);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return outlined consume of _ShapeStyle_Pack.Fill(v114, v116, v17, v18, v137, v131, v20, v134, v22, v121, 2);
    case 3:
      uint64_t v119 = v158;
      double v125 = v159;
      double v128 = v160;
      uint64_t v142 = *a3;
      *(void *)unsigned __int8 v152 = v10;
      *(void *)&v152[8] = v9;
      *(void *)&v152[16] = v11;
      *(void *)&v152[24] = v12;
      *(void *)&v152[32] = v13;
      v152[40] = v14;
      uint64_t v122 = v21;
      unint64_t v35 = v15;
      uint64_t v132 = v19;
      outlined copy of _ShapeStyle_Pack.Fill((id)v16, v15, (void *)v17, v18, v137, v19, v20, v134, v22, v21, 3);
      swift_retain();
      GraphicsContext.clip(to:opacity:style:options:)(a1, (uint64_t)v152, 0, 1.0);
      outlined init with take of CGRect?(a4, (uint64_t)&v148);
      if (BYTE8(v150))
      {
        Path.boundingRect.getter();
      }
      else
      {
        double v36 = v8;
        uint64_t v37 = v119;
        double v38 = v125;
        double v39 = v128;
      }
      *(void *)unsigned __int8 v152 = v142;
      *(double *)&v152[8] = v36;
      *(void *)&v152[16] = v37;
      *(double *)&v152[24] = v38;
      *(double *)&v152[32] = v39;
      if (v35 != 3)
      {
        if (v35 == 2)
        {
          swift_retain();
          specialized Material.Layers.visit<A>(_:)((double *)v152, v16);
LABEL_58:
          swift_release_n();
          return outlined consume of _ShapeStyle_Pack.Fill(v16, v35, v17, v18, v137, v132, v20, v134, v22, v122, 3);
        }
LABEL_57:
        swift_retain();
        specialized Material.ResolvedMaterial.visitCoreMaterialLayers<A>(_:)((double *)v152, v16, v35 & 0xFFFFFFFF000000FFLL);
        goto LABEL_58;
      }
      if ((v16 & 0xFFFFFFFFFFFFFFFELL) != 6) {
        goto LABEL_57;
      }
      if (v16 <= 6) {
        outlined copy of Material.ID(v16, 3u);
      }
      swift_retain();
      outlined consume of Material.ID(v16, 3u);
      uint64_t v100 = outlined consume of Material.ID(7, 3u);
      v161[0] = BYTE4(v35) & 1;
      v161[1] = v16 > 6;
      MEMORY[0x270FA5388](v100);
      swift_retain();
      GraphicsContext.drawLayer(flags:content:)(0, (void (*)(uint64_t *))partial apply for specialized closure #1 in MaterialRenderer.visit<A>(layer:));
      swift_release_n();
      return outlined consume of _ShapeStyle_Pack.Fill(v16, v35, v17, v18, v137, v132, v20, v134, v22, v122, 3);
    case 4:
      double v40 = v157;
      double v41 = *(double *)&v158;
      double v126 = v159;
      double v129 = v160;
      uint64_t v139 = *a3;
      unint64_t v42 = HIDWORD(v15);
      *(void *)unsigned __int8 v152 = *a2;
      *(void *)&v152[8] = v9;
      *(void *)&v152[16] = v11;
      *(void *)&v152[24] = v12;
      *(void *)&v152[32] = v13;
      v152[40] = v14;
      int v43 = v15;
      swift_retain();
      GraphicsContext.clip(to:opacity:style:options:)(a1, (uint64_t)v152, 0, 1.0);
      *(void *)&v152[4] = 0;
      *(_DWORD *)unsigned __int8 v152 = v16;
      *(_DWORD *)&v152[12] = 0;
      *(void *)&v152[16] = HIDWORD(v16);
      *(void *)&v152[28] = 0;
      *(_DWORD *)&v152[24] = v16;
      *(_DWORD *)&v152[36] = v43;
      *(void *)&v152[40] = 0;
      *(void *)&v152[48] = v16;
      *(_OWORD *)&v152[60] = xmmword_2461C6A90;
      *(_DWORD *)&v152[56] = v42;
      *(_DWORD *)&v152[76] = 0;
      uint64_t v44 = v139;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v45 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v46 = swift_retain();
        uint64_t v47 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v46, v45, 1, 0);
        swift_release();
        uint64_t v44 = v47;
      }
      RBDrawingStateAddColorMatrixFilter();
      outlined init with take of CGRect?(a4, (uint64_t)v161);
      if (v162) {
        goto LABEL_16;
      }
      CGFloat v55 = v40;
      CGFloat v57 = v41;
      goto LABEL_28;
    case 5:
      double v120 = *(double *)&v158;
      double v126 = v159;
      double v129 = v160;
      unsigned int v101 = *(void *)(v4 + 24);
      unint64_t v107 = HIDWORD(v15);
      unint64_t v109 = HIDWORD(v17);
      uint64_t v140 = *a3;
      unint64_t v104 = (unint64_t)v18 >> 32;
      unsigned int v48 = *(void *)(v4 + 16);
      unsigned int v49 = *(void *)(v4 + 8);
      *(void *)unsigned __int8 v152 = *a2;
      *(void *)&v152[8] = v9;
      unint64_t v111 = HIDWORD(v19);
      *(void *)&v152[16] = v11;
      *(void *)&v152[24] = v12;
      unint64_t v50 = HIDWORD(v21);
      *(void *)&v152[32] = v13;
      v152[40] = v14;
      unsigned int v133 = v19;
      unsigned int v123 = v21;
      swift_retain();
      GraphicsContext.clip(to:opacity:style:options:)(a1, (uint64_t)v152, 0, 1.0);
      *(void *)unsigned __int8 v152 = v16;
      *(void *)&v152[8] = __PAIR64__(v107, v49);
      *(void *)&v152[16] = __PAIR64__(v109, v48);
      *(void *)&v152[24] = __PAIR64__(v104, v101);
      *(void *)&v152[32] = v137;
      *(void *)&v152[40] = __PAIR64__(v111, v133);
      *(void *)&v152[48] = v20;
      *(void *)&v152[56] = v134;
      *(void *)&v152[64] = v22;
      *(void *)&v152[72] = __PAIR64__(v50, v123);
      uint64_t v44 = v140;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v51 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v52 = swift_retain();
        uint64_t v53 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v52, v51, 1, 0);
        swift_release();
        uint64_t v44 = v53;
      }
      RBDrawingStateAddColorMatrixFilter();
      outlined init with take of CGRect?(a4, (uint64_t)v161);
      if (v162)
      {
LABEL_16:
        swift_retain();
        Path.boundingRect.getter();
        CGFloat v55 = v54;
        CGFloat v57 = v56;
        CGFloat v59 = v58;
        CGFloat v61 = v60;
      }
      else
      {
        CGFloat v55 = v8;
        CGFloat v57 = v120;
LABEL_28:
        CGFloat v59 = v126;
        CGFloat v61 = v129;
        swift_retain();
      }
      v164.origin.double x = v55;
      v164.origin.double y = v57;
      v164.size.double width = v59;
      v164.size.double height = v61;
      if (CGRectIsNull(v164))
      {
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        uint64_t v76 = 0;
        unsigned __int8 v77 = 6;
      }
      else
      {
        unsigned __int8 v77 = 0;
        uint64_t v73 = *(void *)&v55;
        uint64_t v74 = *(void *)&v57;
        uint64_t v75 = *(void *)&v59;
        uint64_t v76 = *(void *)&v61;
      }
      uint64_t v142 = v73;
      uint64_t v143 = v74;
      uint64_t v144 = v75;
      uint64_t v145 = v76;
      LOBYTE(v146) = v77;
      memset(v152, 0, 73);
      uint64_t v148 = 256;
      long long v149 = 0u;
      long long v150 = 0u;
      char v151 = 0;
      GraphicsContext.draw(_:with:style:)(&v142, v152, &v148, v44);
      outlined consume of Path.Storage(v73, v74, v75, v76, v77);
      return swift_release_n();
    case 6:
      return result;
    default:
      uint64_t v23 = *a3;
      *(void *)unsigned __int8 v152 = v16;
      *(void *)&v152[8] = v15;
      char v24 = v14;
      unint64_t v25 = v13;
      uint64_t v26 = v12;
      uint64_t v27 = v11;
      uint64_t v28 = v9;
      uint64_t v29 = v10;
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)v152);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v152, (uint64_t)&v148);
      uint64_t v142 = v29;
      uint64_t v143 = v28;
      uint64_t v144 = v27;
      uint64_t v145 = v26;
      unint64_t v146 = v25;
      char v147 = v24;
      return GraphicsContext.draw(_:with:style:)(a1, &v148, &v142, v23);
  }
}

uint64_t specialized MaterialLayers.visit<A>(layer:)(__int16 a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 40) = &type metadata for IntelligenceLightSourceLayer;
  *(void *)(v4 + 48) = &protocol witness table for IntelligenceLightSourceLayer;
  *(unsigned char *)(v4 + 16) = a1 & 1;
  *(unsigned char *)(v4 + 17) = HIBYTE(a1) & 1;
  unint64_t v5 = *((unsigned __int16 *)v2 + 12);
  uint64_t v6 = *((void *)v2 + 2);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  long long v26 = *v2;
  uint64_t v27 = v6;
  uint64_t v28 = v4 | 0x6000000000000000;
  unint64_t v29 = v5;
  uint64_t v30 = 0;
  unsigned __int8 v32 = 0;
  unsigned __int16 v31 = 0;
  int v33 = 0;
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  uint64_t v7 = static GraphicsBlendMode.normal;
  char v8 = byte_26B0EB4A0;
  if (byte_26B0EB4A0 == 1) {
    swift_unknownObjectRetain_n();
  }
  outlined consume of GraphicsBlendMode(v7, v8);
  outlined consume of GraphicsBlendMode(v7, v8);
  char v23 = *((unsigned char *)v2 + 26);
  DisplayList.Item.canonicalize(options:)(&v23);
  uint64_t v9 = v24;
  uint64_t v10 = v25;
  long long v11 = v26;
  uint64_t v13 = v27;
  uint64_t v12 = v28;
  unint64_t v14 = v29;
  uint64_t v15 = v30;
  int v16 = v31 | (v32 << 16);
  int v17 = v33;
  float v18 = (void *)*((void *)v2 + 4);
  outlined copy of DisplayList.Item.Value(v28, v29);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    float v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
  }
  unint64_t v20 = v18[2];
  unint64_t v19 = v18[3];
  if (v20 >= v19 >> 1) {
    float v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v18);
  }
  _DWORD v18[2] = v20 + 1;
  unint64_t v21 = &v18[9 * v20];
  v21[4] = v9;
  _OWORD v21[5] = v10;
  *((_OWORD *)v21 + 3) = v11;
  v21[8] = v13;
  v21[9] = v12;
  id v21[10] = v14;
  v21[11] = v15;
  *((unsigned char *)v21 + 98) = BYTE2(v16);
  *((_WORD *)v21 + 48) = v16;
  *((_DWORD *)v21 + 25) = v17;
  uint64_t result = outlined consume of DisplayList.Item.Value(v12, v14);
  *((void *)v2 + 4) = v18;
  return result;
}

uint64_t specialized MaterialLayers.visit<A>(layer:)(float *a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v1 = *((void *)a1 + 1);
  uint64_t v3 = *((void *)a1 + 2);
  float v4 = a1[8];
  uint64_t v5 = *((void *)a1 + 5);
  uint64_t v6 = (_BYTE)a1[12] & 1;
  if (v3 < 0)
  {
    uint64_t v9 = *((void *)a1 + 3);
    *((unsigned char *)v37 + 40) = 1;
    unint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v2;
    *(void *)(v8 + 24) = v1;
    *(_DWORD *)(v8 + 32) = v3;
    *(void *)(v8 + 40) = v9;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v2;
    *(void *)(v7 + 24) = v1;
    unint64_t v8 = v7 | 0x1000000000000000;
  }
  unint64_t v10 = *((unsigned __int16 *)v37 + 12);
  uint64_t v11 = *v37;
  uint64_t v12 = v37[1];
  uint64_t v13 = v37[2];
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = v11;
  uint64_t v53 = v12;
  uint64_t v54 = v13;
  uint64_t v55 = v8;
  unint64_t v56 = v10;
  uint64_t v57 = 0;
  unsigned __int8 v59 = 0;
  unsigned __int16 v58 = 0;
  int v60 = 0;
  if (v4 == 1.0)
  {
    uint64_t v14 = 0;
    int v15 = 0;
  }
  else
  {
    _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_2461B9DC0;
    *(void *)(v14 + 32) = 0;
    *(void *)(v14 + 40) = 0;
    *(void *)(v14 + 48) = v11;
    *(void *)(v14 + 56) = v12;
    *(void *)(v14 + 64) = v13;
    *(void *)(v14 + 72) = v8;
    *(void *)(v14 + 80) = v10;
    *(void *)(v14 + 88) = 0;
    *(unsigned char *)(v14 + 98) = 0;
    *(_WORD *)(v14 + 96) = 0;
    *(_DWORD *)(v14 + 100) = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = v11;
    uint64_t v41 = v12;
    uint64_t v42 = v13;
    unint64_t v43 = v8;
    unint64_t v44 = v10;
    uint64_t v45 = 0;
    char v47 = 0;
    __int16 v46 = 0;
    int v48 = 0;
    outlined copy of DisplayList.Item.Value(v8, v10);
    DisplayList.Item.features.getter((__int16 *)&v49);
    int v16 = v49;
    outlined consume of DisplayList.Content.Value(v8);
    if (v8 >> 60 == 9) {
      int v17 = *(unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
    }
    else {
      int v17 = 0;
    }
    unint64_t v10 = 0x4000000400000000;
    unint64_t v8 = LODWORD(v4);
    int v15 = v16 | (v17 << 16);
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = v11;
    uint64_t v53 = v12;
    uint64_t v54 = v13;
    uint64_t v55 = LODWORD(v4);
    unint64_t v56 = 0x4000000400000000;
    uint64_t v57 = v14;
    unsigned __int8 v59 = v17;
    unsigned __int16 v58 = v16;
    int v60 = 0;
  }
  outlined copy of GraphicsBlendMode(v5, v6);
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  uint64_t v18 = static GraphicsBlendMode.normal;
  char v19 = byte_26B0EB4A0;
  if (v6)
  {
    if (byte_26B0EB4A0)
    {
      swift_unknownObjectRetain();
      outlined consume of GraphicsBlendMode(v5, 1);
      outlined consume of GraphicsBlendMode(v18, 1);
      if (v5 == v18) {
        goto LABEL_22;
      }
LABEL_21:
      _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_2461B9DC0;
      *(void *)(v20 + 32) = 0;
      *(void *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = v11;
      *(void *)(v20 + 56) = v12;
      *(void *)(v20 + 64) = v13;
      *(void *)(v20 + 72) = v8;
      *(void *)(v20 + 80) = v10;
      *(void *)(v20 + 88) = v14;
      *(unsigned char *)(v20 + 98) = BYTE2(v15);
      *(_WORD *)(v20 + 96) = v15;
      *(_DWORD *)(v20 + 100) = 0;
      outlined copy of GraphicsBlendMode(v5, v6);
      outlined copy of DisplayList.Item.Value(v8, v10);
      DisplayList.Item.features.getter((__int16 *)&v49);
      unsigned __int16 v36 = v49;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = v11;
      uint64_t v41 = v12;
      uint64_t v42 = v13;
      unint64_t v43 = v8;
      unint64_t v44 = v10;
      uint64_t v45 = v14;
      char v47 = BYTE2(v15);
      __int16 v46 = v15;
      int v48 = 0;
      DisplayList.Item.properties.getter(&v49);
      outlined consume of DisplayList.Item.Value(v8, v10);
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v52 = v11;
      uint64_t v53 = v12;
      uint64_t v54 = v13;
      uint64_t v55 = v5;
      unint64_t v56 = v6 | 0x4000000500000000;
      uint64_t v57 = v20;
      unsigned __int16 v58 = v36;
      unsigned __int8 v59 = v49;
      int v60 = 0;
      *((unsigned char *)v37 + 40) = 1;
      goto LABEL_22;
    }
    swift_unknownObjectRetain();
LABEL_20:
    outlined copy of GraphicsBlendMode(v18, v19);
    outlined consume of GraphicsBlendMode(v5, v6);
    outlined consume of GraphicsBlendMode(v18, v19);
    outlined consume of GraphicsBlendMode(v5, v6);
    goto LABEL_21;
  }
  if (byte_26B0EB4A0) {
    goto LABEL_20;
  }
  outlined consume of GraphicsBlendMode(v5, 0);
  outlined consume of GraphicsBlendMode(v18, 0);
  if (v5 != v18) {
    goto LABEL_21;
  }
LABEL_22:
  LOBYTE(v38) = *((unsigned char *)v37 + 26);
  DisplayList.Item.canonicalize(options:)((char *)&v38);
  uint64_t v21 = v50;
  uint64_t v22 = v51;
  uint64_t v23 = v52;
  uint64_t v24 = v53;
  uint64_t v26 = v54;
  uint64_t v25 = v55;
  unint64_t v27 = v56;
  uint64_t v28 = v57;
  int v29 = v58 | (v59 << 16);
  int v30 = v60;
  unsigned __int16 v31 = (void *)v37[4];
  outlined copy of DisplayList.Item.Value(v55, v56);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned __int16 v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
  }
  unint64_t v33 = v31[2];
  unint64_t v32 = v31[3];
  if (v33 >= v32 >> 1) {
    unsigned __int16 v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v31);
  }
  v31[2] = v33 + 1;
  uint64_t v34 = &v31[9 * v33];
  v34[4] = v21;
  v34[5] = v22;
  v34[6] = v23;
  v34[7] = v24;
  v34[8] = v26;
  v34[9] = v25;
  v34[10] = v27;
  v34[11] = v28;
  *((unsigned char *)v34 + 98) = BYTE2(v29);
  *((_WORD *)v34 + 48) = v29;
  *((_DWORD *)v34 + 25) = v30;
  uint64_t result = outlined consume of DisplayList.Item.Value(v25, v27);
  v37[4] = (uint64_t)v31;
  return result;
}

unint64_t specialized closure #1 in MaterialRenderer.visit<A>(layer:)(unint64_t *a1, unint64_t a2, uint64_t a3, char a4, double *a5, float a6)
{
  *(float *)&CGFloat v6 = a6;
  if (a6 != 1.0 && *(float *)(*a1 + 48) != a6)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v15 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v16 = swift_retain();
      *a1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v16, v15, 1, 0);
      swift_release();
    }
    *(_DWORD *)(*a1 + 48) = LODWORD(v6);
  }
  outlined copy of GraphicsBlendMode(a3, a4 & 1);
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  uint64_t v17 = static GraphicsBlendMode.normal;
  char v18 = byte_26B0EB4A0;
  if (a4)
  {
    if (byte_26B0EB4A0)
    {
      swift_unknownObjectRetain();
      outlined consume of GraphicsBlendMode(a3, 1);
      unint64_t result = outlined consume of GraphicsBlendMode(v17, 1);
      goto LABEL_20;
    }
    swift_unknownObjectRetain();
  }
  else if ((byte_26B0EB4A0 & 1) == 0)
  {
    outlined consume of GraphicsBlendMode(a3, 0);
    unint64_t result = outlined consume of GraphicsBlendMode(v17, 0);
    if (a3 == v17) {
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  outlined copy of GraphicsBlendMode(v17, v18);
  outlined consume of GraphicsBlendMode(a3, a4 & 1);
  outlined consume of GraphicsBlendMode(v17, v18);
  unint64_t result = outlined consume of GraphicsBlendMode(a3, a4 & 1);
  if (a4) {
    goto LABEL_20;
  }
LABEL_16:
  unint64_t result = *a1;
  if (*(_DWORD *)(*a1 + 52) != a3)
  {
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t v20 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      uint64_t v21 = swift_allocObject();
      uint64_t v22 = swift_retain();
      uint64_t v23 = v20;
      uint64_t v17 = v21;
      *a1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v22, v23, 1, 0);
      unint64_t result = swift_release();
    }
    *(_DWORD *)(*a1 + 52) = a3;
  }
LABEL_20:
  unint64_t v24 = a2 >> 60;
  if (!(a2 >> 60))
  {
    long long v74 = *(_OWORD *)(a2 + 20);
    uint64_t v41 = *(void *)(a2 + 40);
    uint64_t v42 = *(void *)(v41 + 16);
    if (!v42)
    {
      swift_retain();
LABEL_44:
      uint64_t v17 = *a1;
      CGFloat v9 = a5[1];
      CGFloat v8 = a5[2];
      CGFloat v7 = a5[3];
      CGFloat v6 = a5[4];
      v97.origin.double x = v9;
      v97.origin.double y = v8;
      v97.size.double width = v7;
      v97.size.double height = v6;
      if (CGRectIsNull(v97))
      {
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        uint64_t v55 = 0;
        char v56 = 6;
LABEL_56:
        uint64_t v75 = v52;
        *(void *)&long long v76 = v53;
        *((void *)&v76 + 1) = v54;
        *(void *)&long long v77 = v55;
        BYTE8(v77) = v56;
        long long v83 = v74;
        long long v84 = 0u;
        long long v85 = 0u;
        memset(v86, 0, 25);
        uint64_t v79 = 256;
        long long v80 = 0u;
        long long v81 = 0u;
        char v82 = 0;
        GraphicsContext.draw(_:with:style:)(&v75, &v83, &v79, v17);
LABEL_59:
        uint64_t v36 = v52;
        uint64_t v37 = v53;
        uint64_t v38 = v54;
        uint64_t v39 = v55;
        unsigned __int8 v40 = v56;
        goto LABEL_60;
      }
LABEL_55:
      char v56 = 0;
      uint64_t v52 = *(void *)&v9;
      uint64_t v53 = *(void *)&v8;
      uint64_t v54 = *(void *)&v7;
      uint64_t v55 = *(void *)&v6;
      goto LABEL_56;
    }
    outlined copy of DisplayList.Content.Value(a2);
    swift_bridgeObjectRetain();
    uint64_t v49 = v41 + 120 * v42 - 24;
    while (v42 <= *(void *)(v41 + 16))
    {
      --v42;
      int v50 = *(_DWORD *)(v49 + 48);
      char v51 = *(unsigned char *)(v49 + 52);
      long long v83 = *(_OWORD *)(v49 - 64);
      long long v84 = *(_OWORD *)(v49 - 48);
      long long v85 = *(_OWORD *)(v49 - 32);
      *(_OWORD *)unint64_t v86 = *(_OWORD *)(v49 - 16);
      *(_OWORD *)&v86[16] = *(_OWORD *)v49;
      long long v87 = *(_OWORD *)(v49 + 16);
      long long v88 = *(_OWORD *)(v49 + 32);
      int v89 = v50;
      char v90 = v51;
      uint64_t v17 = (uint64_t)a1;
      GraphicsContext.addFilter(_:in:)((uint64_t)&v83, a5[1], a5[2], a5[3], a5[4], v43, v44, v45, v46, v47, v48);
      v49 -= 120;
      if (!v42)
      {
        swift_bridgeObjectRelease();
        goto LABEL_44;
      }
    }
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v24 == 2)
  {
    long long v74 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
    uint64_t v57 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
    uint64_t v58 = *(void *)(v57 + 16);
    if (!v58)
    {
      swift_retain();
LABEL_51:
      unint64_t v68 = *a1;
      CGFloat v70 = a5[1];
      CGFloat v69 = a5[2];
      CGFloat v72 = a5[3];
      CGFloat v71 = a5[4];
      v98.origin.double x = v70;
      v98.origin.double y = v69;
      v98.size.double width = v72;
      v98.size.double height = v71;
      if (CGRectIsNull(v98))
      {
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        uint64_t v55 = 0;
        char v56 = 6;
      }
      else
      {
        char v56 = 0;
        uint64_t v52 = *(void *)&v70;
        uint64_t v53 = *(void *)&v69;
        uint64_t v54 = *(void *)&v72;
        uint64_t v55 = *(void *)&v71;
      }
      uint64_t v91 = v52;
      uint64_t v92 = v53;
      uint64_t v93 = v54;
      uint64_t v94 = v55;
      char v95 = v56;
      long long v83 = v74;
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v83);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v83, (uint64_t)&v79);
      uint64_t v75 = 256;
      long long v76 = 0u;
      long long v77 = 0u;
      char v78 = 0;
      GraphicsContext.draw(_:with:style:)(&v91, &v79, &v75, v68);
      goto LABEL_59;
    }
    outlined copy of DisplayList.Content.Value(a2);
    swift_bridgeObjectRetain();
    uint64_t v65 = v57 + 120 * v58 - 24;
    while (v58 <= *(void *)(v57 + 16))
    {
      --v58;
      int v66 = *(_DWORD *)(v65 + 48);
      char v67 = *(unsigned char *)(v65 + 52);
      long long v83 = *(_OWORD *)(v65 - 64);
      long long v84 = *(_OWORD *)(v65 - 48);
      long long v85 = *(_OWORD *)(v65 - 32);
      *(_OWORD *)unint64_t v86 = *(_OWORD *)(v65 - 16);
      *(_OWORD *)&v86[16] = *(_OWORD *)v65;
      long long v87 = *(_OWORD *)(v65 + 16);
      long long v88 = *(_OWORD *)(v65 + 32);
      int v89 = v66;
      char v90 = v67;
      uint64_t v17 = (uint64_t)a1;
      GraphicsContext.addFilter(_:in:)((uint64_t)&v83, a5[1], a5[2], a5[3], a5[4], v59, v60, v61, v62, v63, v64);
      v65 -= 120;
      if (!v58)
      {
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
    }
    goto LABEL_54;
  }
  if (v24 != 1) {
    return result;
  }
  long long v73 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v25 = *a1;
  CGFloat v26 = a5[1];
  CGFloat v27 = a5[2];
  CGFloat v28 = a5[3];
  CGFloat v29 = a5[4];
  swift_retain();
  v96.origin.double x = v26;
  v96.origin.double y = v27;
  v96.size.double width = v28;
  v96.size.double height = v29;
  BOOL IsNull = CGRectIsNull(v96);
  if (IsNull) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = *(void *)&v26;
  }
  if (IsNull) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = *(void *)&v27;
  }
  if (IsNull) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = *(void *)&v28;
  }
  if (IsNull) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = *(void *)&v29;
  }
  if (IsNull) {
    char v35 = 6;
  }
  else {
    char v35 = 0;
  }
  uint64_t v91 = v31;
  uint64_t v92 = v32;
  uint64_t v93 = v33;
  uint64_t v94 = v34;
  char v95 = v35;
  long long v83 = v73;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v83);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v83, (uint64_t)&v79);
  uint64_t v75 = 256;
  long long v76 = 0u;
  long long v77 = 0u;
  char v78 = 0;
  GraphicsContext.draw(_:with:style:)(&v91, &v79, &v75, v25);
  uint64_t v36 = v31;
  uint64_t v37 = v32;
  uint64_t v38 = v33;
  uint64_t v39 = v34;
  unsigned __int8 v40 = v35;
LABEL_60:
  outlined consume of Path.Storage(v36, v37, v38, v39, v40);
  return outlined consume of DisplayList.Content.Value(a2);
}

uint64_t specialized closure #1 in MaterialRenderer.visit<A>(layer:)(uint64_t *a1, uint64_t a2, double *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v74 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  float v8 = *(float *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  char v10 = *(unsigned char *)(a2 + 48);
  if (v8 != 1.0 && *(float *)(*a1 + 48) != v8)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v11 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v12 = swift_retain();
      *a1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v12, v11, 1, 0);
      swift_release();
    }
    *(float *)(*a1 + 48) = v8;
  }
  outlined copy of GraphicsBlendMode(v9, v10 & 1);
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  uint64_t v13 = static GraphicsBlendMode.normal;
  char v14 = byte_26B0EB4A0;
  if (v10)
  {
    if (byte_26B0EB4A0)
    {
      swift_unknownObjectRetain();
      outlined consume of GraphicsBlendMode(v9, 1);
      outlined consume of GraphicsBlendMode(v13, 1);
      goto LABEL_20;
    }
    swift_unknownObjectRetain();
  }
  else if ((byte_26B0EB4A0 & 1) == 0)
  {
    outlined consume of GraphicsBlendMode(v9, 0);
    outlined consume of GraphicsBlendMode(v13, 0);
    if (v9 == v13) {
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  outlined copy of GraphicsBlendMode(v13, v14);
  outlined consume of GraphicsBlendMode(v9, v10 & 1);
  outlined consume of GraphicsBlendMode(v13, v14);
  outlined consume of GraphicsBlendMode(v9, v10 & 1);
  if (v10) {
    goto LABEL_20;
  }
LABEL_16:
  if (*(_DWORD *)(*a1 + 52) != v9)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v15 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v16 = swift_retain();
      *a1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v16, v15, 1, 0);
      swift_release();
    }
    *(_DWORD *)(*a1 + 52) = v9;
  }
LABEL_20:
  if (v6 < 0)
  {
    uint64_t v27 = *(void *)(v7 + 16);
    if (v27)
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = v7 + 120 * v27 - 24;
      do
      {
        int v35 = *(_DWORD *)(v34 + 48);
        char v36 = *(unsigned char *)(v34 + 52);
        long long v64 = *(_OWORD *)(v34 - 64);
        long long v65 = *(_OWORD *)(v34 - 48);
        long long v66 = *(_OWORD *)(v34 - 32);
        *(_OWORD *)char v67 = *(_OWORD *)(v34 - 16);
        --v27;
        *(_OWORD *)&v67[16] = *(_OWORD *)v34;
        long long v68 = *(_OWORD *)(v34 + 16);
        long long v37 = *(_OWORD *)(v34 + 32);
        int v70 = v35;
        char v71 = v36;
        double v38 = a3[1];
        double v39 = a3[2];
        double v40 = a3[3];
        double v41 = a3[4];
        long long v69 = v37;
        GraphicsContext.addFilter(_:in:)((uint64_t)&v64, v38, v39, v40, v41, v28, v29, v30, v31, v32, v33);
        v34 -= 120;
      }
      while (v27);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t v42 = *a1;
    CGFloat v44 = a3[1];
    CGFloat v43 = a3[2];
    CGFloat v46 = a3[3];
    CGFloat v45 = a3[4];
    v76.origin.double x = v44;
    v76.origin.double y = v43;
    v76.size.double width = v46;
    v76.size.double height = v45;
    if (CGRectIsNull(v76))
    {
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      unsigned __int8 v51 = 6;
    }
    else
    {
      unsigned __int8 v51 = 0;
      uint64_t v47 = *(void *)&v44;
      uint64_t v48 = *(void *)&v43;
      uint64_t v49 = *(void *)&v46;
      uint64_t v50 = *(void *)&v45;
    }
    uint64_t v56 = v47;
    *(void *)&long long v57 = v48;
    *((void *)&v57 + 1) = v49;
    *(void *)&long long v58 = v50;
    BYTE8(v58) = v51;
    uint64_t v53 = v74;
    *((void *)&v55 + 1) = v5;
    *(void *)&long long v55 = v74;
    uint64_t v54 = v55 >> 32;
    *((void *)&v55 + 1) = v6;
    *(void *)&long long v55 = v5;
    *(void *)&long long v64 = v54;
    *((void *)&v64 + 1) = v55 >> 32;
    long long v65 = 0u;
    long long v66 = 0u;
    memset(v67, 0, 25);
    uint64_t v60 = 256;
    long long v61 = 0u;
    long long v62 = 0u;
    char v63 = 0;
    GraphicsContext.draw(_:with:style:)(&v56, &v64, &v60, v42);
    outlined consume of Path.Storage(v47, v48, v49, v50, v51);
    return outlined consume of Material.Layer.Storage(v53, v5, v6);
  }
  else
  {
    uint64_t v17 = *a1;
    CGFloat v19 = a3[1];
    CGFloat v18 = a3[2];
    CGFloat v21 = a3[3];
    CGFloat v20 = a3[4];
    v75.origin.double x = v19;
    v75.origin.double y = v18;
    v75.size.double width = v21;
    v75.size.double height = v20;
    if (CGRectIsNull(v75))
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      unsigned __int8 v26 = 6;
    }
    else
    {
      unsigned __int8 v26 = 0;
      uint64_t v22 = *(void *)&v19;
      uint64_t v23 = *(void *)&v18;
      uint64_t v24 = *(void *)&v21;
      uint64_t v25 = *(void *)&v20;
    }
    v72[0] = v22;
    v72[1] = v23;
    v72[2] = v24;
    v72[3] = v25;
    unsigned __int8 v73 = v26;
    *(void *)&long long v64 = v74;
    *((void *)&v64 + 1) = v5;
    _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v64);
    outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v64, (uint64_t)&v60);
    uint64_t v56 = 256;
    long long v57 = 0u;
    long long v58 = 0u;
    char v59 = 0;
    GraphicsContext.draw(_:with:style:)(v72, &v60, &v56, v17);
    return outlined consume of Path.Storage(v22, v23, v24, v25, v26);
  }
}

uint64_t sub_245D16E30()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 != 255) {
    outlined consume of GraphicsImage.Contents(*(void **)(v0 + 16), v1);
  }

  return swift_deallocObject();
}

uint64_t destroy for _ShapeStyle_RenderedShape(uint64_t a1)
{
  outlined consume of _ShapeStyle_RenderedShape.Shape(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(_DWORD *)(a1 + 96));
  swift_release();
  outlined consume of DisplayList.Item.Value(*(void *)(a1 + 192), *(void *)(a1 + 200));
  uint64_t v2 = *(void *)(a1 + 232);
  char v3 = *(unsigned char *)(a1 + 240);

  return outlined consume of GraphicsBlendMode(v2, v3);
}

uint64_t initializeWithCopy for _ShapeStyle_RenderedShape(uint64_t a1, uint64_t a2)
{
  float v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v17 = *(void *)(a2 + 64);
  uint64_t v18 = *(void *)(a2 + 72);
  uint64_t v19 = *(void *)(a2 + 80);
  uint64_t v20 = *(void *)(a2 + 88);
  unsigned int v21 = *(_DWORD *)(a2 + 96);
  outlined copy of _ShapeStyle_RenderedShape.Shape(*(void **)a2, v5, v6, v7, v8, v9, v10, v11, v17, v18, v19, v20, v21);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v17;
  *(void *)(a1 + 72) = v18;
  *(void *)(a1 + 80) = v19;
  *(void *)(a1 + 88) = v20;
  *(_DWORD *)(a1 + 96) = v21;
  *(_WORD *)(a1 + 100) = *(_WORD *)(a2 + 100);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  uint64_t v12 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  LOBYTE(v8) = *(unsigned char *)(a2 + 218);
  LOWORD(v9) = *(_WORD *)(a2 + 216);
  unint64_t v13 = *(void *)(a2 + 200);
  uint64_t v14 = *(void *)(a2 + 208);
  swift_retain();
  outlined copy of DisplayList.Item.Value(v12, v13);
  *(void *)(a1 + 192) = v12;
  *(void *)(a1 + 200) = v13;
  *(void *)(a1 + 208) = v14;
  *(unsigned char *)(a1 + 218) = v8;
  *(_WORD *)(a1 + 216) = v9;
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  uint64_t v15 = *(void *)(a2 + 232);
  LOBYTE(v5) = *(unsigned char *)(a2 + 240);
  outlined copy of GraphicsBlendMode(v15, v5);
  *(void *)(a1 + 232) = v15;
  *(unsigned char *)(a1 + 240) = v5;
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_RenderedShape(uint64_t a1, uint64_t a2)
{
  float v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v33 = *(void *)(a2 + 64);
  uint64_t v34 = *(void *)(a2 + 72);
  uint64_t v35 = *(void *)(a2 + 80);
  uint64_t v36 = *(void *)(a2 + 88);
  unsigned int v37 = *(_DWORD *)(a2 + 96);
  outlined copy of _ShapeStyle_RenderedShape.Shape(*(void **)a2, v5, v6, v7, v8, v9, v10, v11, v33, v34, v35, v36, v37);
  uint64_t v12 = *(void **)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  unint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 80);
  uint64_t v22 = *(void *)(a1 + 88);
  unsigned int v23 = *(_DWORD *)(a1 + 96);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v33;
  *(void *)(a1 + 72) = v34;
  *(void *)(a1 + 80) = v35;
  *(void *)(a1 + 88) = v36;
  *(_DWORD *)(a1 + 96) = v37;
  outlined consume of _ShapeStyle_RenderedShape.Shape(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, v22, v23);
  *(_WORD *)(a1 + 100) = *(_WORD *)(a2 + 100);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  uint64_t v24 = *(void *)(a2 + 192);
  unint64_t v25 = *(void *)(a2 + 200);
  uint64_t v26 = *(void *)(a2 + 208);
  LOBYTE(v7) = *(unsigned char *)(a2 + 218);
  LOWORD(v8) = *(_WORD *)(a2 + 216);
  outlined copy of DisplayList.Item.Value(v24, v25);
  uint64_t v27 = *(void *)(a1 + 192);
  unint64_t v28 = *(void *)(a1 + 200);
  *(void *)(a1 + 192) = v24;
  *(void *)(a1 + 200) = v25;
  *(void *)(a1 + 208) = v26;
  *(_WORD *)(a1 + 216) = v8;
  *(unsigned char *)(a1 + 218) = v7;
  outlined consume of DisplayList.Item.Value(v27, v28);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  uint64_t v29 = *(void *)(a2 + 232);
  LOBYTE(v25) = *(unsigned char *)(a2 + 240);
  outlined copy of GraphicsBlendMode(v29, v25);
  uint64_t v30 = *(void *)(a1 + 232);
  char v31 = *(unsigned char *)(a1 + 240);
  *(void *)(a1 + 232) = v29;
  *(unsigned char *)(a1 + 240) = v25;
  outlined consume of GraphicsBlendMode(v30, v31);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  return a1;
}

__n128 __swift_memcpy249_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  long long v12 = a2[13];
  long long v13 = a2[14];
  *(_OWORD *)(a1 + 233) = *(long long *)((char *)a2 + 233);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for _ShapeStyle_RenderedShape(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 96);
  long long v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  unint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 80);
  uint64_t v15 = *(void *)(a1 + 88);
  unsigned int v16 = *(_DWORD *)(a1 + 96);
  long long v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v17;
  long long v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v18;
  long long v19 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v19;
  *(_DWORD *)(a1 + 96) = v4;
  outlined consume of _ShapeStyle_RenderedShape.Shape(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, v15, v16);
  *(_WORD *)(a1 + 100) = *(_WORD *)(a2 + 100);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_release();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  char v20 = *(unsigned char *)(a2 + 218);
  __int16 v21 = *(_WORD *)(a2 + 216);
  uint64_t v22 = *(void *)(a1 + 192);
  unint64_t v23 = *(void *)(a1 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_WORD *)(a1 + 216) = v21;
  *(unsigned char *)(a1 + 218) = v20;
  outlined consume of DisplayList.Item.Value(v22, v23);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  char v24 = *(unsigned char *)(a2 + 240);
  uint64_t v25 = *(void *)(a1 + 232);
  char v26 = *(unsigned char *)(a1 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = v24;
  outlined consume of GraphicsBlendMode(v25, v26);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_RenderedShape(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 249)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 136);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_RenderedShape(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 248) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 249) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 249) = 0;
    }
    if (a2) {
      *(void *)(result + 136) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_RenderedShape()
{
  return &type metadata for _ShapeStyle_RenderedShape;
}

void destroy for _ShapeStyle_RenderedShape.Shape(uint64_t a1)
{
}

uint64_t initializeWithCopy for _ShapeStyle_RenderedShape.Shape(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  unsigned int v16 = *(_DWORD *)(a2 + 96);
  outlined copy of _ShapeStyle_RenderedShape.Shape(*(void **)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(_DWORD *)(a1 + 96) = v16;
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_RenderedShape.Shape(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v25 = *(void *)(a2 + 72);
  uint64_t v26 = *(void *)(a2 + 80);
  uint64_t v27 = *(void *)(a2 + 88);
  unsigned int v28 = *(_DWORD *)(a2 + 96);
  outlined copy of _ShapeStyle_RenderedShape.Shape(*(void **)a2, v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28);
  uint64_t v12 = *(void **)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  unint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 80);
  uint64_t v22 = *(void *)(a1 + 88);
  unsigned int v23 = *(_DWORD *)(a1 + 96);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v25;
  *(void *)(a1 + 80) = v26;
  *(void *)(a1 + 88) = v27;
  *(_DWORD *)(a1 + 96) = v28;
  outlined consume of _ShapeStyle_RenderedShape.Shape(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, v22, v23);
  return a1;
}

uint64_t assignWithTake for _ShapeStyle_RenderedShape.Shape(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 96);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  unint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v14 = *(void *)(a1 + 88);
  unsigned int v15 = *(_DWORD *)(a1 + 96);
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  long long v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v18;
  *(_DWORD *)(a1 + 96) = v3;
  outlined consume of _ShapeStyle_RenderedShape.Shape(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_RenderedShape.Shape(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >> 2 >= 0x7FF && *(unsigned char *)(a1 + 100)) {
    return (*(_DWORD *)a1 + 8188);
  }
  unsigned int v3 = ((*(_DWORD *)(a1 + 96) >> 21) & 7 | (8
                                          * ((*(_DWORD *)(a1 + 96) >> 11) & 0x380 | ((unsigned __int16)*(_DWORD *)(a1 + 96) >> 9) & 0x3FF))) ^ 0x1FFF;
  if (v3 >= 0x1FFB) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_RenderedShape.Shape(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >> 2 > 0x7FE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 96) = 0;
    *(void *)__n128 result = a2 - 8188;
    if (a3 >> 2 >= 0x7FF) {
      *(unsigned char *)(result + 100) = 1;
    }
  }
  else
  {
    if (a3 >> 2 >= 0x7FF) {
      *(unsigned char *)(result + 100) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)__n128 result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_DWORD *)(result + 96) = (((-256 * a2) & 0x1C0000) - (a2 << 21)) & 0xFC0000 | (((-a2 >> 3) & 0x7F) << 9);
    }
  }
  return result;
}

uint64_t getEnumTag for _ShapeStyle_RenderedShape.Shape(_DWORD *a1)
{
  unsigned int v1 = a1[24];
  if (((v1 >> 21) & 4) != 0) {
    return (*a1 + 4);
  }
  else {
    return (v1 >> 21) & 7;
  }
}

uint64_t destructiveProjectEnumData for _ShapeStyle_RenderedShape.Shape(uint64_t result)
{
  *(_DWORD *)(result + 96) &= 0xFF1FFFFF;
  return result;
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_RenderedShape.Shape(uint64_t result, unsigned int a2)
{
  if (a2 < 4)
  {
    *(_DWORD *)(result + 96) = *(_DWORD *)(result + 96) & 0xFF0301FF | ((a2 & 7) << 21);
  }
  else
  {
    *(void *)__n128 result = a2 - 4;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(void *)(result + 88) = 0;
    *(_DWORD *)(result + 96) = 0x800000;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_RenderedShape.Shape()
{
  return &type metadata for _ShapeStyle_RenderedShape.Shape;
}

uint64_t destroy for _ShapeStyle_RenderedLayers(void *a1)
{
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
}

void *initializeWithCopy for _ShapeStyle_RenderedLayers(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v7 = a2[5];
  uint64_t v8 = a2[6];
  unint64_t v9 = a2[7];
  uint64_t v10 = a2[8];
  uint64_t v11 = a2[9];
  swift_retain();
  outlined copy of _ShapeStyle_RenderedLayers.Layers(v3, v4, v5, v6, v7, v8, v9, v10, v11);
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  return a1;
}

void *assignWithCopy for _ShapeStyle_RenderedLayers(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  unint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v12 = a2[9];
  outlined copy of _ShapeStyle_RenderedLayers.Layers(v4, v5, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  uint64_t v17 = a1[5];
  uint64_t v18 = a1[6];
  unint64_t v19 = a1[7];
  uint64_t v20 = a1[8];
  uint64_t v21 = a1[9];
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v12;
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v13, v14, v15, v16, v17, v18, v19, v20, v21);
  return a1;
}

void *assignWithTake for _ShapeStyle_RenderedLayers(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 72);
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  uint64_t v12 = a1[8];
  uint64_t v13 = a1[9];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
  a1[9] = v4;
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v5, v6, v7, v8, v9, v10, v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_RenderedLayers(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 72);
  HIDWORD(v4) = (*(void *)(a1 + 56) >> 37) & 0x1FFFFFF | ((HIBYTE(v2) & 0x3F) << 25);
  LODWORD(v4) = 2 * v2;
  unsigned int v3 = v4 >> 31;
  if (v3 > 0x80000000) {
    int v5 = ~v3;
  }
  else {
    int v5 = -1;
  }
  return (v5 + 1);
}

double storeEnumTagSinglePayload for _ShapeStyle_RenderedLayers(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 72) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      HIDWORD(v4) = -a2;
      LODWORD(v4) = -a2;
      double result = 0.0;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 8) = 0u;
      *(void *)(a1 + 56) = ((v4 >> 1) & 0x1FFFFFF) << 37;
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = ((unint64_t)(v4 >> 1) >> 1) & 0x7F000000;
      return result;
    }
    *(unsigned char *)(a1 + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_RenderedLayers()
{
  return &type metadata for _ShapeStyle_RenderedLayers;
}

uint64_t destroy for _ShapeStyle_LayerID(uint64_t a1)
{
  return outlined consume of _ShapeStyle_LayerID(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for _ShapeStyle_LayerID(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of _ShapeStyle_LayerID(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_LayerID(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of _ShapeStyle_LayerID(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of _ShapeStyle_LayerID(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for _ShapeStyle_LayerID(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of _ShapeStyle_LayerID(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_LayerID(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_LayerID(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)double result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for _ShapeStyle_LayerID(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_LayerID(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)double result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_LayerID()
{
  return &type metadata for _ShapeStyle_LayerID;
}

uint64_t initializeWithCopy for _ShapeStyle_InterpolatorGroup.Layer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of _ShapeStyle_LayerID(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  if (*(void *)(a2 + 128))
  {
    uint64_t v28 = *(void *)(a2 + 128);
    uint64_t v7 = *(void **)(a2 + 24);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v9 = *(void **)(a2 + 40);
    uint64_t v10 = *(void **)(a2 + 48);
    uint64_t v11 = *(void *)(a2 + 56);
    uint64_t v12 = *(void *)(a2 + 64);
    uint64_t v14 = *(void *)(a2 + 72);
    uint64_t v13 = *(void *)(a2 + 80);
    uint64_t v25 = *(void *)(a2 + 88);
    uint64_t v26 = *(void *)(a2 + 96);
    char v27 = *(unsigned char *)(a2 + 104);
    outlined copy of _ShapeStyle_Pack.Fill(v7, v8, v9, v10, v11, v12, v14, v13, v25, v26, v27);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v11;
    *(void *)(a1 + 64) = v12;
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v13;
    *(void *)(a1 + 88) = v25;
    *(void *)(a1 + 96) = v26;
    *(unsigned char *)(a1 + 104) = v27;
    *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
    uint64_t v15 = (uint64_t *)(a2 + 112);
    int v16 = *(unsigned __int8 *)(a2 + 120);
    if (v16 == 255)
    {
      *(void *)(a1 + 112) = *v15;
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    }
    else
    {
      char v20 = v16 & 1;
      uint64_t v21 = *v15;
      outlined copy of GraphicsBlendMode(*v15, v16 & 1);
      *(void *)(a1 + 112) = v21;
      *(unsigned char *)(a1 + 120) = v20;
    }
    *(void *)(a1 + 128) = v28;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v17;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    long long v18 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v18;
    long long v19 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v19;
  }
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(unsigned char *)(a1 + 146) = *(unsigned char *)(a2 + 146);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  uint64_t v22 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v22;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(unsigned char *)(a1 + 188) = *(unsigned char *)(a2 + 188);
  uint64_t v23 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v23;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(unsigned char *)(a1 + 218) = *(unsigned char *)(a2 + 218);
  *(_WORD *)(a1 + 219) = *(_WORD *)(a2 + 219);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_InterpolatorGroup.Layer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of _ShapeStyle_LayerID(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  char v9 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of _ShapeStyle_LayerID(v7, v8, v9);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  uint64_t v10 = (_OWORD *)(a1 + 24);
  uint64_t v11 = (_OWORD *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 128);
  if (*(void *)(a1 + 128))
  {
    if (v12)
    {
      uint64_t v13 = *(void **)(a2 + 24);
      uint64_t v14 = *(void *)(a2 + 32);
      uint64_t v15 = *(void **)(a2 + 40);
      int v16 = *(void **)(a2 + 48);
      uint64_t v17 = *(void *)(a2 + 56);
      uint64_t v18 = *(void *)(a2 + 64);
      uint64_t v19 = *(void *)(a2 + 72);
      uint64_t v20 = *(void *)(a2 + 80);
      uint64_t v68 = *(void *)(a2 + 88);
      uint64_t v70 = *(void *)(a2 + 96);
      char v72 = *(unsigned char *)(a2 + 104);
      outlined copy of _ShapeStyle_Pack.Fill(v13, v14, v15, v16, v17, v18, v19, v20, v68, v70, v72);
      uint64_t v21 = *(void *)(a1 + 24);
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v23 = *(void *)(a1 + 40);
      uint64_t v24 = *(void *)(a1 + 48);
      uint64_t v25 = *(void *)(a1 + 56);
      uint64_t v26 = *(void *)(a1 + 64);
      uint64_t v27 = *(void *)(a1 + 72);
      uint64_t v28 = *(void *)(a1 + 80);
      uint64_t v29 = *(void *)(a1 + 88);
      uint64_t v30 = *(void *)(a1 + 96);
      char v31 = *(unsigned char *)(a1 + 104);
      *(void *)(a1 + 24) = v13;
      *(void *)(a1 + 32) = v14;
      *(void *)(a1 + 40) = v15;
      *(void *)(a1 + 48) = v16;
      *(void *)(a1 + 56) = v17;
      *(void *)(a1 + 64) = v18;
      *(void *)(a1 + 72) = v19;
      *(void *)(a1 + 80) = v20;
      *(void *)(a1 + 88) = v68;
      *(void *)(a1 + 96) = v70;
      *(unsigned char *)(a1 + 104) = v72;
      outlined consume of _ShapeStyle_Pack.Fill(v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31);
      *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
      uint64_t v32 = (uint64_t *)(a1 + 112);
      uint64_t v33 = (uint64_t *)(a2 + 112);
      int v34 = *(unsigned __int8 *)(a2 + 120);
      if (*(unsigned __int8 *)(a1 + 120) == 255)
      {
        if (v34 == 255)
        {
          uint64_t v52 = *v33;
          *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
          *uint64_t v32 = v52;
        }
        else
        {
          char v64 = v34 & 1;
          uint64_t v65 = *v33;
          outlined copy of GraphicsBlendMode(v65, v34 & 1);
          *(void *)(a1 + 112) = v65;
          *(unsigned char *)(a1 + 120) = v64;
        }
      }
      else if (v34 == 255)
      {
        outlined destroy of GraphicsBlendMode(a1 + 112);
        char v35 = *(unsigned char *)(a2 + 120);
        *uint64_t v32 = *v33;
        *(unsigned char *)(a1 + 120) = v35;
      }
      else
      {
        char v58 = v34 & 1;
        uint64_t v59 = *v33;
        outlined copy of GraphicsBlendMode(v59, v34 & 1);
        uint64_t v60 = *(void *)(a1 + 112);
        char v61 = *(unsigned char *)(a1 + 120);
        *(void *)(a1 + 112) = v59;
        *(unsigned char *)(a1 + 120) = v58;
        outlined consume of GraphicsBlendMode(v60, v61);
      }
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of _ShapeStyle_Pack.Style(a1 + 24);
      long long v48 = *(_OWORD *)(a2 + 40);
      long long v47 = *(_OWORD *)(a2 + 56);
      *uint64_t v10 = *v11;
      *(_OWORD *)(a1 + 40) = v48;
      *(_OWORD *)(a1 + 56) = v47;
      long long v49 = *(_OWORD *)(a2 + 120);
      long long v51 = *(_OWORD *)(a2 + 72);
      long long v50 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = v49;
      *(_OWORD *)(a1 + 72) = v51;
      *(_OWORD *)(a1 + 88) = v50;
    }
  }
  else if (v12)
  {
    uint64_t v36 = *(void **)(a2 + 24);
    uint64_t v37 = *(void *)(a2 + 32);
    double v38 = *(void **)(a2 + 40);
    double v39 = *(void **)(a2 + 48);
    uint64_t v40 = *(void *)(a2 + 56);
    uint64_t v41 = *(void *)(a2 + 64);
    uint64_t v42 = *(void *)(a2 + 72);
    uint64_t v43 = *(void *)(a2 + 80);
    uint64_t v69 = *(void *)(a2 + 88);
    uint64_t v71 = *(void *)(a2 + 96);
    char v73 = *(unsigned char *)(a2 + 104);
    outlined copy of _ShapeStyle_Pack.Fill(v36, v37, v38, v39, v40, v41, v42, v43, v69, v71, v73);
    *(void *)(a1 + 24) = v36;
    *(void *)(a1 + 32) = v37;
    *(void *)(a1 + 40) = v38;
    *(void *)(a1 + 48) = v39;
    *(void *)(a1 + 56) = v40;
    *(void *)(a1 + 64) = v41;
    *(void *)(a1 + 72) = v42;
    *(void *)(a1 + 80) = v43;
    *(void *)(a1 + 88) = v69;
    *(void *)(a1 + 96) = v71;
    *(unsigned char *)(a1 + 104) = v73;
    *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
    CGFloat v44 = (uint64_t *)(a2 + 112);
    int v45 = *(unsigned __int8 *)(a2 + 120);
    if (v45 == 255)
    {
      uint64_t v46 = *v44;
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)(a1 + 112) = v46;
    }
    else
    {
      char v62 = v45 & 1;
      uint64_t v63 = *v44;
      outlined copy of GraphicsBlendMode(*v44, v45 & 1);
      *(void *)(a1 + 112) = v63;
      *(unsigned char *)(a1 + 120) = v62;
    }
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v53 = *v11;
    long long v54 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v54;
    *uint64_t v10 = v53;
    long long v55 = *(_OWORD *)(a2 + 72);
    long long v56 = *(_OWORD *)(a2 + 88);
    long long v57 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v57;
    *(_OWORD *)(a1 + 72) = v55;
    *(_OWORD *)(a1 + 88) = v56;
  }
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(unsigned char *)(a1 + 146) = *(unsigned char *)(a2 + 146);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  int v66 = *(_DWORD *)(a2 + 184);
  *(unsigned char *)(a1 + 188) = *(unsigned char *)(a2 + 188);
  *(_DWORD *)(a1 + 184) = v66;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(unsigned char *)(a1 + 218) = *(unsigned char *)(a2 + 218);
  *(unsigned char *)(a1 + 219) = *(unsigned char *)(a2 + 219);
  *(unsigned char *)(a1 + 220) = *(unsigned char *)(a2 + 220);
  return a1;
}

uint64_t outlined destroy of _ShapeStyle_Pack.Style(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy221_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 + 205);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for _ShapeStyle_InterpolatorGroup.Layer(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v7 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of _ShapeStyle_LayerID(v5, v6, v7);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  if (*(void *)(a1 + 128))
  {
    uint64_t v8 = *(void *)(a2 + 128);
    if (v8)
    {
      char v9 = *(unsigned char *)(a2 + 104);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v13 = *(void *)(a1 + 48);
      uint64_t v14 = *(void *)(a1 + 56);
      uint64_t v15 = *(void *)(a1 + 64);
      uint64_t v16 = *(void *)(a1 + 72);
      uint64_t v17 = *(void *)(a1 + 80);
      uint64_t v18 = *(void *)(a1 + 88);
      uint64_t v19 = *(void *)(a1 + 96);
      char v20 = *(unsigned char *)(a1 + 104);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(unsigned char *)(a1 + 104) = v9;
      outlined consume of _ShapeStyle_Pack.Fill(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
      *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
      uint64_t v21 = (void *)(a2 + 112);
      int v22 = *(unsigned __int8 *)(a1 + 120);
      if (v22 != 255)
      {
        int v23 = *(unsigned __int8 *)(a2 + 120);
        if (v23 != 255)
        {
          uint64_t v27 = *(void *)(a1 + 112);
          *(void *)(a1 + 112) = *v21;
          *(unsigned char *)(a1 + 120) = v23 & 1;
          outlined consume of GraphicsBlendMode(v27, v22 & 1);
          goto LABEL_10;
        }
        outlined destroy of GraphicsBlendMode(a1 + 112);
      }
      *(void *)(a1 + 112) = *v21;
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
LABEL_10:
      *(void *)(a1 + 128) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of _ShapeStyle_Pack.Style(a1 + 24);
  }
  long long v24 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v24;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  long long v25 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v25;
  long long v26 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v26;
LABEL_11:
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(unsigned char *)(a1 + 146) = *(unsigned char *)(a2 + 146);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_unknownObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(unsigned char *)(a1 + 188) = *(unsigned char *)(a2 + 188);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_release();
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(unsigned char *)(a1 + 218) = *(unsigned char *)(a2 + 218);
  *(unsigned char *)(a1 + 219) = *(unsigned char *)(a2 + 219);
  *(unsigned char *)(a1 + 220) = *(unsigned char *)(a2 + 220);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_InterpolatorGroup.Layer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 221)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 136);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_InterpolatorGroup.Layer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 220) = 0;
    *(_DWORD *)(result + 216) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 221) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 136) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 221) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_InterpolatorGroup.Layer()
{
  return &type metadata for _ShapeStyle_InterpolatorGroup.Layer;
}

uint64_t destroy for _ShapeStyle_RenderedLayers.Layers(uint64_t *a1)
{
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8]);
}

uint64_t *initializeWithCopy for _ShapeStyle_RenderedLayers.Layers(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  outlined copy of _ShapeStyle_RenderedLayers.Layers(*a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  return a1;
}

uint64_t *assignWithCopy for _ShapeStyle_RenderedLayers.Layers(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  outlined copy of _ShapeStyle_RenderedLayers.Layers(*a2, v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  uint64_t v17 = a1[5];
  unint64_t v18 = a1[6];
  uint64_t v19 = a1[7];
  uint64_t v20 = a1[8];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t *assignWithTake for _ShapeStyle_RenderedLayers.Layers(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 64);
  uint64_t v4 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  unint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  uint64_t v12 = a1[8];
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 3) = v14;
  a1[8] = v3;
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_RenderedLayers.Layers(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 64);
  HIDWORD(v4) = (*(void *)(a1 + 48) >> 37) & 0x1FFFFFF | ((HIBYTE(v2) & 0x3F) << 25);
  LODWORD(v4) = 2 * v2;
  unsigned int v3 = v4 >> 31;
  if (v3 > 0x80000000) {
    int v5 = ~v3;
  }
  else {
    int v5 = -1;
  }
  return (v5 + 1);
}

double storeEnumTagSinglePayload for _ShapeStyle_RenderedLayers.Layers(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      HIDWORD(v4) = -a2;
      LODWORD(v4) = -a2;
      double result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(void *)(a1 + 48) = ((v4 >> 1) & 0x1FFFFFF) << 37;
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = ((unint64_t)(v4 >> 1) >> 1) & 0x7F000000;
      return result;
    }
    *(unsigned char *)(a1 + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for _ShapeStyle_RenderedLayers.Layers(_DWORD *a1)
{
  int v1 = a1[16];
  if (v1 >= 0) {
    return v1 >> 30;
  }
  else {
    return (*a1 + 2);
  }
}

uint64_t destructiveProjectEnumData for _ShapeStyle_RenderedLayers.Layers(uint64_t result)
{
  *(void *)(result + 64) &= 0xFFFFFFFF3FFFFFFFLL;
  return result;
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_RenderedLayers.Layers(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    *(void *)(result + 48) &= 0xC000001FFFFFFFFFLL;
    *(unsigned char *)(result + 67) = (_BYTE)a2 << 6;
  }
  else
  {
    *(void *)double result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(void *)(result + 56) = 0;
    *(void *)(result + 64) = 0x80000000;
  }
  return result;
}

void *type metadata accessor for _ShapeStyle_RenderedLayers.Layers()
{
  return &unk_26FA6EA70;
}

void *type metadata accessor for _ShapeStyle_RenderedShape.LayerNeeds()
{
  return &unk_26FA3F8A0;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in MaterialRenderer.visit<A>(layer:)()
{
  return specialized closure #1 in MaterialRenderer.visit<A>(layer:)();
}

uint64_t outlined init with take of GraphicsContext.ResolvedShading?(uint64_t a1, uint64_t a2)
{
  _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?, (uint64_t)&type metadata for GraphicsContext.ResolvedShading, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized closure #1 in MaterialRenderer.visit<A>(layer:)()
{
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  uint64_t v0 = static GraphicsBlendMode.normal;
  char v1 = byte_26B0EB4A0;
  if (byte_26B0EB4A0 == 1) {
    swift_unknownObjectRetain_n();
  }
  outlined consume of GraphicsBlendMode(v0, v1);
  return outlined consume of GraphicsBlendMode(v0, v1);
}

uint64_t sub_245D18E10()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245D18E48()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245D18E80()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245D18EC0()
{
  return swift_deallocObject();
}

uint64_t sub_245D18ED0()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245D18F10()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

uint64_t sub_245D18F7C()
{
  outlined consume of Path.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245D18FC4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245D18FFC()
{
  outlined consume of Path.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return swift_deallocObject();
}

uint64_t sub_245D1903C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245D19074()
{
  return swift_deallocObject();
}

uint64_t sub_245D19084()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t outlined copy of _ShapeStyle_InterpolatorGroup.AddLayerResult(void *a1, unsigned __int8 a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15)
{
  if (a15 < 0) {
    outlined copy of _ShapeStyle_Pack.Style?(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  }

  return swift_retain();
}

uint64_t destroy for _ShapeStyle_InterpolatorGroup.AddLayerResult(uint64_t a1)
{
  return outlined consume of _ShapeStyle_InterpolatorGroup.AddLayerResult(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(_OWORD *)(a1 + 80), *(void *)(a1 + 88), *(_OWORD *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112));
}

uint64_t outlined consume of _ShapeStyle_InterpolatorGroup.AddLayerResult(uint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15)
{
  if (a15 < 0) {
    outlined consume of _ShapeStyle_Pack.Style?(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  }

  return swift_release();
}

uint64_t initializeWithCopy for _ShapeStyle_InterpolatorGroup.AddLayerResult(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  int v19 = *(_DWORD *)(a2 + 120);
  outlined copy of _ShapeStyle_InterpolatorGroup.AddLayerResult(*(void **)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(_DWORD *)(a1 + 120) = v19;
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_InterpolatorGroup.AddLayerResult(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v25 = *(void *)(a2 + 72);
  uint64_t v26 = *(void *)(a2 + 80);
  uint64_t v27 = *(void *)(a2 + 88);
  uint64_t v28 = *(void *)(a2 + 96);
  uint64_t v29 = *(void *)(a2 + 104);
  uint64_t v30 = *(void *)(a2 + 112);
  int v31 = *(_DWORD *)(a2 + 120);
  outlined copy of _ShapeStyle_InterpolatorGroup.AddLayerResult(*(void **)a2, v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28, v29, v30);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  uint64_t v23 = *(void *)(a1 + 112);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v25;
  *(void *)(a1 + 80) = v26;
  *(void *)(a1 + 88) = v27;
  *(void *)(a1 + 96) = v28;
  *(void *)(a1 + 104) = v29;
  *(void *)(a1 + 112) = v30;
  *(_DWORD *)(a1 + 120) = v31;
  outlined consume of _ShapeStyle_InterpolatorGroup.AddLayerResult(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
  return a1;
}

uint64_t assignWithTake for _ShapeStyle_InterpolatorGroup.AddLayerResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 112);
  int v4 = *(_DWORD *)(a2 + 120);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 96);
  uint64_t v16 = *(void *)(a1 + 112);
  long long v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v17;
  long long v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v18;
  long long v19 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v19;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 120) = v4;
  outlined consume of _ShapeStyle_InterpolatorGroup.AddLayerResult(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_InterpolatorGroup.AddLayerResult(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 124)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)(a1 + 112) >> 57) >> 6) | (2
                                                            * ((*(void *)(a1 + 112) >> 57) & 0x38 | *(void *)(a1 + 112) & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_InterpolatorGroup.AddLayerResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 120) = 0;
    *(void *)unint64_t result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 124) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 124) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)unint64_t result = 0u;
      *(void *)(result + 112) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_DWORD *)(result + 120) = 0;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_InterpolatorGroup.AddLayerResult(uint64_t result, uint64_t a2)
{
  *(void *)(result + 112) = *(void *)(result + 112) & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

void *type metadata accessor for _ShapeStyle_InterpolatorGroup.AddLayerResult()
{
  return &unk_26FA71C90;
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(uint64_t a1, char a2, char a3, char a4, uint64_t a5, char a6, uint64_t a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  uint64_t v15 = *(void *)&a13;
  uint64_t v16 = *(void *)&a12;
  uint64_t v41 = *(void *)a1;
  uint64_t v39 = *(void *)(a1 + 16);
  uint64_t v40 = *(void *)(a1 + 8);
  uint64_t v38 = *(void *)(a1 + 24);
  char v19 = *(unsigned char *)(a1 + 32);
  char v20 = *(unsigned char *)(a1 + 33);
  uint64_t v21 = *(void *)(a1 + 40);
  uint64_t v22 = *(void *)(v13 + 64);
  uint64_t v23 = *(void *)(v13 + 72);
  uint64_t v24 = *(void *)(v13 + 80);
  uint64_t v25 = *(void *)(v13 + 88);
  uint64_t v26 = *(void *)(v13 + 96);
  if ((a6 & 1) == 0 && (a4 & 1) == 0)
  {
    swift_retain();
    int v27 = 0;
    double v28 = *(double *)&v26;
    double v29 = *(double *)&v25;
    uint64_t v16 = v23;
    uint64_t v15 = v24;
    uint64_t v30 = v22;
    if ((a3 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v30 = *(void *)a5;
  double v31 = *(double *)(a5 + 24);
  double v32 = *(double *)(a5 + 32);
  double v33 = *(double *)(a5 + 8);
  double v34 = *(double *)(a5 + 16);
  *(void *)(v13 + 64) = *(void *)a5;
  double v29 = v31 - (a12 - v33);
  double v28 = v32 - (a13 - v34);
  *(double *)(v13 + 88) = v29;
  *(double *)(v13 + 96) = v28;
  *(double *)(v13 + 72) = a12;
  *(double *)(v13 + 80) = a13;
  outlined retain of ViewTransform(a5);
  int v27 = 4;
  if (a3)
  {
LABEL_6:
    *(double *)uint64_t v13 = a8;
    *(double *)(v13 + 8) = a9;
    v27 |= 2u;
  }
LABEL_7:
  if ((a2 & 1) != 0 || !*(void *)(v13 + 56))
  {
    outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(a1);
    swift_bridgeObjectRelease();
    *(void *)(v13 + 16) = v41;
    *(void *)(v13 + 24) = v40;
    *(void *)(v13 + 32) = v39;
    *(void *)(v13 + 40) = v38;
    *(void *)(v13 + 48) = v19 & 1 | ((unint64_t)(v20 & 1) << 8);
    *(void *)(v13 + 56) = v21;
    LOBYTE(v27) = v27 | 1;
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    v45[0] = v27;
    v44[0] = v22;
    v44[1] = v23;
    v44[2] = v24;
    v44[3] = v25;
    v44[4] = v26;
    v43[0] = v30;
    v43[1] = v16;
    v43[2] = v15;
    *(double *)&v43[3] = v29;
    *(double *)&v43[4] = v28;
    outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(a1);
    swift_retain();
    ContentPathObservers.notifyPathChanged(for:changes:transform:)(a7, v45, v44, v43);
    swift_release();
    outlined release of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(a1);
  }

  return swift_release();
}

{
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[5];
  uint64_t v56[5];
  char v57[9];
  uint64_t vars8;

  uint64_t v16 = *(void *)&a13;
  long long v17 = *(void *)&a12;
  long long v53 = *(void *)(a1 + 8);
  long long v54 = *(void *)a1;
  long long v51 = *(void *)(a1 + 24);
  uint64_t v52 = *(void *)(a1 + 16);
  long long v49 = *(unsigned __int8 *)(a1 + 32);
  char v20 = *(unsigned char *)(a1 + 33);
  uint64_t v21 = *(unsigned char *)(a1 + 34);
  long long v50 = *(void *)(a1 + 40);
  uint64_t v22 = *(void *)(v13 + 64);
  uint64_t v23 = *(void *)(v13 + 72);
  uint64_t v24 = *(void *)(v13 + 80);
  uint64_t v25 = *(void *)(v13 + 88);
  uint64_t v26 = *(void *)(v13 + 96);
  if ((a6 & 1) == 0 && (a4 & 1) == 0)
  {
    swift_retain();
    int v27 = 0;
    double v28 = *(double *)&v26;
    double v29 = *(double *)&v25;
    long long v17 = v23;
    uint64_t v16 = v24;
    uint64_t v30 = v22;
    if ((a3 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  double v31 = *(double *)(a5 + 24);
  double v32 = *(double *)(a5 + 32);
  double v33 = *(double *)(a5 + 8);
  double v34 = *(double *)(a5 + 16);
  uint64_t v30 = *(void *)a5;
  *(void *)(v13 + 64) = *(void *)a5;
  double v29 = v31 - (a12 - v33);
  double v28 = v32 - (a13 - v34);
  *(double *)(v13 + 88) = v29;
  *(double *)(v13 + 96) = v28;
  *(double *)(v13 + 72) = a12;
  *(double *)(v13 + 80) = a13;
  outlined retain of ViewTransform(a5);
  int v27 = 4;
  if (a3)
  {
LABEL_6:
    *(double *)uint64_t v13 = a8;
    *(double *)(v13 + 8) = a9;
    v27 |= 2u;
  }
LABEL_7:
  char v35 = *(void *)(v13 + 56);
  if ((a2 & 1) != 0 || !v35)
  {
    CGFloat v44 = v30;
    uint64_t v46 = v22;
    long long v48 = a7;
    uint64_t v36 = v20 & 1;
    uint64_t v43 = v21 & 1;
    uint64_t v37 = *(void *)(v13 + 16);
    uint64_t v38 = *(void *)(v13 + 24);
    uint64_t v39 = *(void *)(v13 + 32);
    uint64_t v40 = *(void *)(v13 + 40);
    uint64_t v41 = *(void *)(v13 + 48);
    outlined retain of ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>(a1);
    outlined consume of ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>?(v37, v38, v39, v40, v41, v35);
    *(void *)(v13 + 16) = v54;
    *(void *)(v13 + 24) = v53;
    *(void *)(v13 + 32) = v52;
    *(void *)(v13 + 40) = v51;
    uint64_t v30 = v44;
    *(void *)(v13 + 48) = v49 | (v36 << 8) | (v43 << 16);
    *(void *)(v13 + 56) = v50;
    LOBYTE(v27) = v27 | 1;
    uint64_t v22 = v46;
    a7 = v48;
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    v57[0] = v27;
    v56[0] = v22;
    v56[1] = v23;
    v56[2] = v24;
    v56[3] = v25;
    v56[4] = v26;
    v55[0] = v30;
    v55[1] = v17;
    v55[2] = v16;
    *(double *)&v55[3] = v29;
    *(double *)&v55[4] = v28;
    outlined retain of ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>(a1);
    swift_retain();
    ContentPathObservers.notifyPathChanged(for:changes:transform:)(a7, v57, v56, v55);
    swift_release();
    outlined release of ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>(a1);
  }

  return swift_release();
}

{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44[5];
  uint64_t v45[5];
  char v46[9];
  uint64_t vars8;

  uint64_t v15 = *(void *)&a13;
  uint64_t v16 = *(void *)&a12;
  uint64_t v42 = *(void *)a1;
  uint64_t v40 = *(void *)(a1 + 16);
  uint64_t v41 = *(void *)(a1 + 8);
  char v19 = *(unsigned char *)(a1 + 32);
  char v20 = *(unsigned char *)(a1 + 33);
  uint64_t v21 = *(unsigned char *)(a1 + 34);
  uint64_t v38 = *(void *)(a1 + 40);
  uint64_t v39 = *(void *)(a1 + 24);
  uint64_t v22 = *(void *)(v13 + 64);
  uint64_t v23 = *(void *)(v13 + 72);
  uint64_t v24 = *(void *)(v13 + 80);
  uint64_t v25 = *(void *)(v13 + 88);
  uint64_t v26 = *(void *)(v13 + 96);
  if ((a6 & 1) == 0 && (a4 & 1) == 0)
  {
    swift_retain();
    int v27 = 0;
    double v28 = *(double *)&v26;
    double v29 = *(double *)&v25;
    uint64_t v16 = v23;
    uint64_t v15 = v24;
    uint64_t v30 = v22;
    if ((a3 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  double v31 = *(double *)(a5 + 24);
  double v32 = *(double *)(a5 + 32);
  double v33 = *(double *)(a5 + 8);
  double v34 = *(double *)(a5 + 16);
  uint64_t v30 = *(void *)a5;
  *(void *)(v13 + 64) = *(void *)a5;
  double v29 = v31 - (a12 - v33);
  double v28 = v32 - (a13 - v34);
  *(double *)(v13 + 88) = v29;
  *(double *)(v13 + 96) = v28;
  *(double *)(v13 + 72) = a12;
  *(double *)(v13 + 80) = a13;
  outlined retain of ViewTransform(a5);
  int v27 = 4;
  if (a3)
  {
LABEL_6:
    *(double *)uint64_t v13 = a8;
    *(double *)(v13 + 8) = a9;
    v27 |= 2u;
  }
LABEL_7:
  if ((a2 & 1) != 0 || !*(void *)(v13 + 56))
  {
    outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(a1);
    swift_bridgeObjectRelease();
    *(void *)(v13 + 16) = v42;
    *(void *)(v13 + 24) = v41;
    *(void *)(v13 + 32) = v40;
    *(void *)(v13 + 40) = v39;
    *(void *)(v13 + 48) = v19 & 1 | ((unint64_t)(v20 & 1) << 8) | ((unint64_t)(v21 & 1) << 16);
    *(void *)(v13 + 56) = v38;
    LOBYTE(v27) = v27 | 1;
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    v46[0] = v27;
    v45[0] = v22;
    v45[1] = v23;
    v45[2] = v24;
    v45[3] = v25;
    v45[4] = v26;
    v44[0] = v30;
    v44[1] = v16;
    v44[2] = v15;
    *(double *)&v44[3] = v29;
    *(double *)&v44[4] = v28;
    outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(a1);
    swift_retain();
    ContentPathObservers.notifyPathChanged(for:changes:transform:)(a7, v46, v45, v44);
    swift_release();
    outlined release of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(a1);
  }

  return swift_release();
}

{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45[5];
  uint64_t v46[5];
  char v47[9];
  uint64_t vars8;

  uint64_t v15 = *(void *)&a13;
  uint64_t v16 = *(void *)&a12;
  uint64_t v41 = *(void *)(a1 + 8);
  uint64_t v42 = *(void *)a1;
  uint64_t v39 = *(void *)(a1 + 24);
  uint64_t v40 = *(void *)(a1 + 16);
  char v19 = *(unsigned char *)(a1 + 32);
  uint64_t v38 = *(void *)(a1 + 40);
  char v20 = *(unsigned char *)(a1 + 48);
  uint64_t v21 = *(unsigned char *)(a1 + 49);
  uint64_t v43 = *(void *)(a1 + 56);
  uint64_t v22 = *(void *)(v13 + 80);
  uint64_t v23 = *(void *)(v13 + 88);
  uint64_t v24 = *(void *)(v13 + 96);
  uint64_t v25 = *(void *)(v13 + 104);
  uint64_t v26 = *(void *)(v13 + 112);
  if ((a6 & 1) == 0 && (a4 & 1) == 0)
  {
    swift_retain();
    int v27 = 0;
    double v28 = *(double *)&v26;
    double v29 = *(double *)&v25;
    uint64_t v16 = v23;
    uint64_t v15 = v24;
    uint64_t v30 = v22;
    if ((a3 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  double v31 = *(double *)(a5 + 24);
  double v32 = *(double *)(a5 + 32);
  double v33 = *(double *)(a5 + 8);
  double v34 = *(double *)(a5 + 16);
  uint64_t v30 = *(void *)a5;
  *(void *)(v13 + 80) = *(void *)a5;
  double v29 = v31 - (a12 - v33);
  double v28 = v32 - (a13 - v34);
  *(double *)(v13 + 104) = v29;
  *(double *)(v13 + 112) = v28;
  *(double *)(v13 + 88) = a12;
  *(double *)(v13 + 96) = a13;
  outlined retain of ViewTransform(a5);
  int v27 = 4;
  if (a3)
  {
LABEL_6:
    *(double *)uint64_t v13 = a8;
    *(double *)(v13 + 8) = a9;
    v27 |= 2u;
  }
LABEL_7:
  if ((a2 & 1) != 0 || !*(void *)(v13 + 72))
  {
    outlined retain of ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>(a1);
    swift_bridgeObjectRelease();
    *(void *)(v13 + 16) = v42;
    *(void *)(v13 + 24) = v41;
    *(void *)(v13 + 32) = v40;
    *(void *)(v13 + 40) = v39;
    *(void *)(v13 + 48) = v19 & 1;
    *(void *)(v13 + 56) = v38;
    LOBYTE(v27) = v27 | 1;
    *(void *)(v13 + 64) = v20 & 1 | ((unint64_t)(v21 & 1) << 8);
    *(void *)(v13 + 72) = v43;
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    v47[0] = v27;
    v46[0] = v22;
    v46[1] = v23;
    v46[2] = v24;
    v46[3] = v25;
    v46[4] = v26;
    v45[0] = v30;
    v45[1] = v16;
    v45[2] = v15;
    *(double *)&v45[3] = v29;
    *(double *)&v45[4] = v28;
    outlined retain of ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>(a1);
    swift_retain();
    ContentPathObservers.notifyPathChanged(for:changes:transform:)(a7, v47, v46, v45);
    swift_release();
    outlined release of ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>(a1);
  }

  return swift_release();
}

{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43[5];
  uint64_t v44[5];
  char v45[9];
  uint64_t vars8;

  uint64_t v15 = *(void *)&a13;
  uint64_t v16 = *(void *)&a12;
  uint64_t v41 = *(void *)a1;
  char v19 = *(unsigned char *)(a1 + 16);
  uint64_t v39 = *(void *)(a1 + 24);
  uint64_t v40 = *(void *)(a1 + 8);
  char v20 = *(unsigned char *)(a1 + 32);
  uint64_t v21 = *(unsigned char *)(a1 + 33);
  uint64_t v38 = *(void *)(a1 + 40);
  uint64_t v22 = *(void *)(v13 + 64);
  uint64_t v23 = *(void *)(v13 + 72);
  uint64_t v24 = *(void *)(v13 + 80);
  uint64_t v25 = *(void *)(v13 + 88);
  uint64_t v26 = *(void *)(v13 + 96);
  if ((a6 & 1) == 0 && (a4 & 1) == 0)
  {
    swift_retain();
    int v27 = 0;
    double v28 = *(double *)&v26;
    double v29 = *(double *)&v25;
    uint64_t v16 = v23;
    uint64_t v15 = v24;
    uint64_t v30 = v22;
    if ((a3 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  double v31 = *(double *)(a5 + 24);
  double v32 = *(double *)(a5 + 32);
  double v33 = *(double *)(a5 + 8);
  double v34 = *(double *)(a5 + 16);
  uint64_t v30 = *(void *)a5;
  *(void *)(v13 + 64) = *(void *)a5;
  double v29 = v31 - (a12 - v33);
  double v28 = v32 - (a13 - v34);
  *(double *)(v13 + 88) = v29;
  *(double *)(v13 + 96) = v28;
  *(double *)(v13 + 72) = a12;
  *(double *)(v13 + 80) = a13;
  outlined retain of ViewTransform(a5);
  int v27 = 4;
  if (a3)
  {
LABEL_6:
    *(double *)uint64_t v13 = a8;
    *(double *)(v13 + 8) = a9;
    v27 |= 2u;
  }
LABEL_7:
  if ((a2 & 1) != 0 || !*(void *)(v13 + 56))
  {
    outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(a1);
    swift_bridgeObjectRelease();
    *(void *)(v13 + 16) = v41;
    *(void *)(v13 + 24) = v40;
    *(void *)(v13 + 32) = v19 & 1;
    *(void *)(v13 + 40) = v39;
    *(void *)(v13 + 48) = v20 & 1 | ((unint64_t)(v21 & 1) << 8);
    *(void *)(v13 + 56) = v38;
    LOBYTE(v27) = v27 | 1;
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    v45[0] = v27;
    v44[0] = v22;
    v44[1] = v23;
    v44[2] = v24;
    v44[3] = v25;
    v44[4] = v26;
    v43[0] = v30;
    v43[1] = v16;
    v43[2] = v15;
    *(double *)&v43[3] = v29;
    *(double *)&v43[4] = v28;
    outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(a1);
    swift_retain();
    ContentPathObservers.notifyPathChanged(for:changes:transform:)(a7, v45, v44, v43);
    swift_release();
    outlined release of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(a1);
  }

  return swift_release();
}

{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59[5];
  uint64_t v60[5];
  char v61[9];
  uint64_t vars8;

  uint64_t v15 = *(void *)&a13;
  uint64_t v16 = *(void *)&a12;
  uint64_t v52 = *(void *)(a1 + 8);
  long long v53 = *(void *)a1;
  uint64_t v21 = *(unsigned char *)(a1 + 24);
  long long v50 = *(void *)(a1 + 32);
  long long v51 = *(void *)(a1 + 16);
  uint64_t v22 = *(unsigned char *)(a1 + 40);
  uint64_t v23 = *(unsigned char *)(a1 + 56);
  long long v47 = *(unsigned __int8 *)(a1 + 57);
  uint64_t v24 = *(unsigned char *)(a1 + 58);
  uint64_t v25 = *(unsigned char *)(a1 + 59);
  long long v48 = *(void *)(a1 + 64);
  long long v49 = *(void *)(a1 + 48);
  char v58 = *(void *)(v13 + 88);
  uint64_t v26 = *(void *)(v13 + 96);
  int v27 = *(void *)(v13 + 104);
  double v28 = *(double *)(v13 + 112);
  double v29 = *(double *)(v13 + 120);
  long long v54 = *(void *)&v29;
  long long v55 = *(void *)&v28;
  if ((a6 & 1) == 0 && (a4 & 1) == 0)
  {
    uint64_t v30 = 0;
    uint64_t v16 = *(void *)(v13 + 96);
    uint64_t v15 = *(void *)(v13 + 104);
    long long v56 = swift_retain();
    if ((a3 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  double v31 = *(double *)(a5 + 24);
  double v32 = *(double *)(a5 + 32);
  double v33 = *(double *)(a5 + 8);
  double v34 = *(double *)(a5 + 16);
  long long v56 = *(void *)a5;
  *(void *)(v13 + 88) = *(void *)a5;
  double v28 = v31 - (a12 - v33);
  double v29 = v32 - (a13 - v34);
  *(double *)(v13 + 112) = v28;
  *(double *)(v13 + 120) = v29;
  *(double *)(v13 + 96) = a12;
  *(double *)(v13 + 104) = a13;
  outlined retain of ViewTransform(a5);
  uint64_t v30 = 4;
  if (a3)
  {
LABEL_6:
    *(double *)uint64_t v13 = a8;
    *(double *)(v13 + 8) = a9;
    v30 |= 2u;
  }
LABEL_7:
  char v35 = *(void *)(v13 + 64);
  if ((a2 & 1) != 0 || !v35)
  {
    int v45 = v21 & 1;
    uint64_t v46 = v22 & 1;
    uint64_t v43 = v23 & 1;
    CGFloat v44 = v24 & 1;
    uint64_t v36 = *(void *)(v13 + 16);
    uint64_t v37 = *(void *)(v13 + 24);
    uint64_t v38 = *(void *)(v13 + 32);
    uint64_t v39 = *(void *)(v13 + 40);
    uint64_t v40 = *(void *)(v13 + 56);
    uint64_t v42 = *(void *)(v13 + 48);
    outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>(a1);
    outlined consume of ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>?(v36, v37, v38, v39, v42, v40, v35);
    *(void *)(v13 + 16) = v53;
    *(void *)(v13 + 24) = v52;
    *(void *)(v13 + 32) = v51;
    *(void *)(v13 + 40) = v45;
    *(void *)(v13 + 48) = v50;
    *(void *)(v13 + 56) = v46;
    *(void *)(v13 + 64) = v49;
    *(void *)(v13 + 72) = v43 | (v47 << 8) | (v44 << 16) | ((unint64_t)(v25 & 1) << 24);
    *(void *)(v13 + 80) = v48;
    LOBYTE(v30) = v30 | 1;
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    v61[0] = v30;
    v60[0] = v58;
    v60[1] = v26;
    v60[2] = v27;
    v60[3] = v55;
    v60[4] = v54;
    v59[0] = v56;
    v59[1] = v16;
    v59[2] = v15;
    *(double *)&v59[3] = v28;
    *(double *)&v59[4] = v29;
    outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>(a1);
    swift_retain();
    ContentPathObservers.notifyPathChanged(for:changes:transform:)(a7, v61, v60, v59);
    swift_release();
    outlined release of ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>(a1);
  }

  return swift_release();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(char a1, char a2, char a3, uint64_t a4, char a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  uint64_t v14 = *(void *)&a12;
  uint64_t v15 = *(void *)&a11;
  uint64_t v18 = *(void *)(v12 + 24);
  uint64_t v19 = *(void *)(v12 + 32);
  uint64_t v20 = *(void *)(v12 + 40);
  uint64_t v21 = *(void *)(v12 + 48);
  uint64_t v22 = *(void *)(v12 + 56);
  if ((a5 & 1) == 0 && (a3 & 1) == 0)
  {
    swift_retain();
    int v23 = 0;
    double v24 = *(double *)&v22;
    double v25 = *(double *)&v21;
    uint64_t v15 = v19;
    uint64_t v14 = v20;
    uint64_t v26 = v18;
    if ((a2 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v26 = *(void *)a4;
  double v27 = *(double *)(a4 + 24);
  double v28 = *(double *)(a4 + 32);
  double v29 = *(double *)(a4 + 8);
  double v30 = *(double *)(a4 + 16);
  *(void *)(v12 + 24) = *(void *)a4;
  double v25 = v27 - (a11 - v29);
  double v24 = v28 - (a12 - v30);
  *(double *)(v12 + 48) = v25;
  *(double *)(v12 + 56) = v24;
  *(double *)(v12 + 32) = a11;
  *(double *)(v12 + 40) = a12;
  outlined retain of ViewTransform(a4);
  int v23 = 4;
  if (a2)
  {
LABEL_6:
    *(double *)uint64_t v12 = a7;
    *(double *)(v12 + 8) = a8;
    v23 |= 2u;
  }
LABEL_7:
  if ((a1 & 1) != 0 || *(unsigned char *)(v12 + 16) == 1)
  {
    *(unsigned char *)(v12 + 16) = 0;
    LOBYTE(v23) = v23 | 1;
LABEL_10:
    char v36 = v23;
    v35[0] = v18;
    v35[1] = v19;
    v35[2] = v20;
    v35[3] = v21;
    v35[4] = v22;
    v34[0] = v26;
    v34[1] = v15;
    v34[2] = v14;
    *(double *)&v34[3] = v25;
    *(double *)&v34[4] = v24;
    swift_retain();
    ContentPathObservers.notifyPathChanged(for:changes:transform:)(a6, &v36, v35, v34);
    swift_release();
    goto LABEL_11;
  }
  if (v23) {
    goto LABEL_10;
  }
LABEL_11:

  return swift_release();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(uint64_t a1, __int16 a2, uint64_t a3, char a4, char a5, char a6, uint64_t a7, char a8, double a9, double a10, double a11, double a12, double a13, double a14, uint64_t a15)
{
  uint64_t v18 = *(void *)&a14;
  uint64_t v19 = *(void *)&a13;
  uint64_t v22 = a15;
  uint64_t v23 = *(void *)(v15 + 40);
  uint64_t v24 = *(void *)(v15 + 48);
  uint64_t v25 = *(void *)(v15 + 56);
  uint64_t v26 = *(void *)(v15 + 64);
  uint64_t v27 = *(void *)(v15 + 72);
  if ((a8 & 1) == 0 && (a6 & 1) == 0)
  {
    swift_retain();
    int v28 = 0;
    double v29 = *(double *)&v27;
    double v30 = *(double *)&v26;
    uint64_t v19 = v24;
    uint64_t v18 = v25;
    uint64_t v31 = v23;
    if ((a5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v31 = *(void *)a7;
  double v32 = *(double *)(a7 + 24);
  double v33 = *(double *)(a7 + 32);
  double v34 = *(double *)(a7 + 8);
  double v35 = *(double *)(a7 + 16);
  *(void *)(v15 + 40) = *(void *)a7;
  double v30 = v32 - (a13 - v34);
  double v29 = v33 - (a14 - v35);
  *(double *)(v15 + 64) = v30;
  *(double *)(v15 + 72) = v29;
  *(double *)(v15 + 48) = a13;
  *(double *)(v15 + 56) = a14;
  outlined retain of ViewTransform(a7);
  int v28 = 4;
  if (a5)
  {
LABEL_6:
    *(double *)uint64_t v15 = a9;
    *(double *)(v15 + 8) = a10;
    v28 |= 2u;
  }
LABEL_7:
  uint64_t v36 = *(void *)(v15 + 16);
  if ((a4 & 1) != 0 || !v36)
  {
    uint64_t v37 = *(void *)(v15 + 24);
    uint64_t v38 = *(void *)(v15 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined consume of ShapeStyledResponderData<_ShapeView<CombinedContentShape, ForegroundStyle>>?(v36, v37, v38, MEMORY[0x263F8EEA0]);
    *(void *)(v15 + 16) = a1;
    *(void *)(v15 + 24) = a2 & 0x101;
    *(void *)(v15 + 32) = a3;
    LOBYTE(v28) = v28 | 1;
    uint64_t v22 = a15;
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    v45[0] = v28;
    v44[0] = v23;
    v44[1] = v24;
    v44[2] = v25;
    v44[3] = v26;
    v44[4] = v27;
    v43[0] = v31;
    v43[1] = v19;
    v43[2] = v18;
    *(double *)&v43[3] = v30;
    *(double *)&v43[4] = v29;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ContentPathObservers.notifyPathChanged(for:changes:transform:)(v22, v45, v44, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }

  return swift_release();
}

{
  uint64_t v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v43[5];
  uint64_t v44[5];
  char v45[9];
  uint64_t vars8;

  uint64_t v18 = *(void *)&a14;
  uint64_t v19 = *(void *)&a13;
  uint64_t v22 = a15;
  uint64_t v23 = *(void *)(v15 + 40);
  uint64_t v24 = *(void *)(v15 + 48);
  uint64_t v25 = *(void *)(v15 + 56);
  uint64_t v26 = *(void *)(v15 + 64);
  uint64_t v27 = *(void *)(v15 + 72);
  if ((a8 & 1) == 0 && (a6 & 1) == 0)
  {
    swift_retain();
    int v28 = 0;
    double v29 = *(double *)&v27;
    double v30 = *(double *)&v26;
    uint64_t v19 = v24;
    uint64_t v18 = v25;
    uint64_t v31 = v23;
    if ((a5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  double v32 = *(double *)(a7 + 24);
  double v33 = *(double *)(a7 + 32);
  double v34 = *(double *)(a7 + 8);
  double v35 = *(double *)(a7 + 16);
  uint64_t v31 = *(void *)a7;
  *(void *)(v15 + 40) = *(void *)a7;
  double v30 = v32 - (a13 - v34);
  double v29 = v33 - (a14 - v35);
  *(double *)(v15 + 64) = v30;
  *(double *)(v15 + 72) = v29;
  *(double *)(v15 + 48) = a13;
  *(double *)(v15 + 56) = a14;
  outlined retain of ViewTransform(a7);
  int v28 = 4;
  if (a5)
  {
LABEL_6:
    *(double *)uint64_t v15 = a9;
    *(double *)(v15 + 8) = a10;
    v28 |= 2u;
  }
LABEL_7:
  uint64_t v36 = *(void *)(v15 + 16);
  if ((a4 & 1) != 0 || !v36)
  {
    uint64_t v37 = *(void *)(v15 + 24);
    uint64_t v38 = *(void *)(v15 + 32);
    swift_retain();
    swift_bridgeObjectRetain();
    outlined consume of ShapeStyledResponderData<_ShapeView<CombinedContentShape, ForegroundStyle>>?(v36, v37, v38, MEMORY[0x263F8EED8]);
    *(void *)(v15 + 16) = a1;
    *(void *)(v15 + 24) = a2 & 0x101;
    *(void *)(v15 + 32) = a3;
    LOBYTE(v28) = v28 | 1;
    uint64_t v22 = a15;
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    v45[0] = v28;
    v44[0] = v23;
    v44[1] = v24;
    v44[2] = v25;
    v44[3] = v26;
    v44[4] = v27;
    v43[0] = v31;
    v43[1] = v19;
    v43[2] = v18;
    *(double *)&v43[3] = v30;
    *(double *)&v43[4] = v29;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    ContentPathObservers.notifyPathChanged(for:changes:transform:)(v22, v45, v44, v43);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(int a1, uint64_t a2, char a3, char a4, char a5, uint64_t a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  uint64_t v18 = *(void *)&a14;
  uint64_t v19 = *(void *)&a13;
  uint64_t v22 = *(void *)(v14 + 32);
  uint64_t v23 = *(void *)(v14 + 40);
  uint64_t v24 = *(void *)(v14 + 48);
  uint64_t v25 = *(void *)(v14 + 56);
  uint64_t v26 = *(void *)(v14 + 64);
  if ((a7 & 1) == 0 && (a5 & 1) == 0)
  {
    swift_retain();
    int v27 = 0;
    double v28 = *(double *)&v26;
    double v29 = *(double *)&v25;
    uint64_t v19 = v23;
    uint64_t v18 = v24;
    uint64_t v30 = v22;
    if ((a4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  double v31 = *(double *)(a6 + 24);
  double v32 = *(double *)(a6 + 32);
  double v33 = *(double *)(a6 + 8);
  double v34 = *(double *)(a6 + 16);
  uint64_t v30 = *(void *)a6;
  *(void *)(v14 + 32) = *(void *)a6;
  double v29 = v31 - (a13 - v33);
  double v28 = v32 - (a14 - v34);
  *(double *)(v14 + 56) = v29;
  *(double *)(v14 + 64) = v28;
  *(double *)(v14 + 40) = a13;
  *(double *)(v14 + 48) = a14;
  outlined retain of ViewTransform(a6);
  int v27 = 4;
  if (a4)
  {
LABEL_6:
    *(double *)uint64_t v14 = a9;
    *(double *)(v14 + 8) = a10;
    v27 |= 2u;
  }
LABEL_7:
  if ((a3 & 1) != 0 || !*(void *)(v14 + 24))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v14 + 16) = a1 & 0x10101;
    *(void *)(v14 + 24) = a2;
    LOBYTE(v27) = v27 | 1;
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    char v40 = v27;
    v39[0] = v22;
    v39[1] = v23;
    v39[2] = v24;
    v39[3] = v25;
    v39[4] = v26;
    v38[0] = v30;
    v38[1] = v19;
    v38[2] = v18;
    *(double *)&v38[3] = v29;
    *(double *)&v38[4] = v28;
    swift_retain();
    swift_bridgeObjectRetain();
    ContentPathObservers.notifyPathChanged(for:changes:transform:)(a8, &v40, v39, v38);
    swift_bridgeObjectRelease();
    swift_release();
  }

  return swift_release();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(__int16 a1, uint64_t a2, char a3, char a4, char a5, uint64_t a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  uint64_t v18 = *(void *)&a14;
  uint64_t v19 = *(void *)&a13;
  uint64_t v22 = *(void *)(v14 + 32);
  uint64_t v23 = *(void *)(v14 + 40);
  uint64_t v24 = *(void *)(v14 + 48);
  uint64_t v25 = *(void *)(v14 + 56);
  uint64_t v26 = *(void *)(v14 + 64);
  if ((a7 & 1) == 0 && (a5 & 1) == 0)
  {
    swift_retain();
    int v27 = 0;
    double v28 = *(double *)&v26;
    double v29 = *(double *)&v25;
    uint64_t v19 = v23;
    uint64_t v18 = v24;
    uint64_t v30 = v22;
    if ((a4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  double v31 = *(double *)(a6 + 24);
  double v32 = *(double *)(a6 + 32);
  double v33 = *(double *)(a6 + 8);
  double v34 = *(double *)(a6 + 16);
  uint64_t v30 = *(void *)a6;
  *(void *)(v14 + 32) = *(void *)a6;
  double v29 = v31 - (a13 - v33);
  double v28 = v32 - (a14 - v34);
  *(double *)(v14 + 56) = v29;
  *(double *)(v14 + 64) = v28;
  *(double *)(v14 + 40) = a13;
  *(double *)(v14 + 48) = a14;
  outlined retain of ViewTransform(a6);
  int v27 = 4;
  if (a4)
  {
LABEL_6:
    *(double *)uint64_t v14 = a9;
    *(double *)(v14 + 8) = a10;
    v27 |= 2u;
  }
LABEL_7:
  if ((a3 & 1) != 0 || !*(void *)(v14 + 24))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v14 + 16) = a1 & 0x101;
    *(void *)(v14 + 24) = a2;
    LOBYTE(v27) = v27 | 1;
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    char v40 = v27;
    v39[0] = v22;
    v39[1] = v23;
    v39[2] = v24;
    v39[3] = v25;
    v39[4] = v26;
    v38[0] = v30;
    v38[1] = v19;
    v38[2] = v18;
    *(double *)&v38[3] = v29;
    *(double *)&v38[4] = v28;
    swift_retain();
    swift_bridgeObjectRetain();
    ContentPathObservers.notifyPathChanged(for:changes:transform:)(a8, &v40, v39, v38);
    swift_bridgeObjectRelease();
    swift_release();
  }

  return swift_release();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(__int16 a1, uint64_t a2, char a3, char a4, char a5, uint64_t a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15)
{
  uint64_t v19 = *(void *)&a15;
  uint64_t v20 = *(void *)&a14;
  uint64_t v23 = *(void *)(v15 + 40);
  uint64_t v24 = *(void *)(v15 + 48);
  uint64_t v25 = *(void *)(v15 + 56);
  uint64_t v26 = *(void *)(v15 + 64);
  uint64_t v27 = *(void *)(v15 + 72);
  if ((a7 & 1) == 0 && (a5 & 1) == 0)
  {
    swift_retain();
    int v28 = 0;
    double v29 = *(double *)&v27;
    double v30 = *(double *)&v26;
    uint64_t v20 = v24;
    uint64_t v19 = v25;
    uint64_t v31 = v23;
    if ((a4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  double v32 = *(double *)(a6 + 24);
  double v33 = *(double *)(a6 + 32);
  double v34 = *(double *)(a6 + 8);
  double v35 = *(double *)(a6 + 16);
  uint64_t v31 = *(void *)a6;
  *(void *)(v15 + 40) = *(void *)a6;
  double v30 = v32 - (a14 - v34);
  double v29 = v33 - (a15 - v35);
  *(double *)(v15 + 64) = v30;
  *(double *)(v15 + 72) = v29;
  *(double *)(v15 + 48) = a14;
  *(double *)(v15 + 56) = a15;
  outlined retain of ViewTransform(a6);
  int v28 = 4;
  if (a4)
  {
LABEL_6:
    *(double *)uint64_t v15 = a10;
    *(double *)(v15 + 8) = a11;
    v28 |= 2u;
  }
LABEL_7:
  if ((a3 & 1) != 0 || !*(void *)(v15 + 32))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(double *)(v15 + 16) = a9;
    *(void *)(v15 + 24) = a1 & 0x101;
    *(void *)(v15 + 32) = a2;
    LOBYTE(v28) = v28 | 1;
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    char v42 = v28;
    v41[0] = v23;
    v41[1] = v24;
    v41[2] = v25;
    v41[3] = v26;
    v41[4] = v27;
    v40[0] = v31;
    v40[1] = v20;
    v40[2] = v19;
    *(double *)&v40[3] = v30;
    *(double *)&v40[4] = v29;
    swift_retain();
    swift_bridgeObjectRetain();
    ContentPathObservers.notifyPathChanged(for:changes:transform:)(a8, &v42, v41, v40);
    swift_bridgeObjectRelease();
    swift_release();
  }

  return swift_release();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(uint64_t *a1, char a2, char a3, char a4, uint64_t a5, char a6, uint64_t a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  return specialized ContentResponderHelper.update(data:size:position:transform:parent:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t *))outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle, EllipticalGradient>>, a8, a9, a10, a11, a12, a13, (void (*)(uint64_t *))outlined release of ShapeStyledResponderData<_ShapeView<Rectangle, EllipticalGradient>>);
}

{
  return specialized ContentResponderHelper.update(data:size:position:transform:parent:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t *))outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle, LinearGradient>>, a8, a9, a10, a11, a12, a13, (void (*)(uint64_t *))outlined release of ShapeStyledResponderData<_ShapeView<Rectangle, LinearGradient>>);
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(int a1, uint64_t a2, char a3, char a4, char a5, uint64_t a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16)
{
  uint64_t v20 = *(void *)&a16;
  uint64_t v21 = *(void *)&a15;
  uint64_t v24 = *(void *)(v16 + 48);
  uint64_t v25 = *(void *)(v16 + 56);
  uint64_t v26 = *(void *)(v16 + 64);
  uint64_t v27 = *(void *)(v16 + 72);
  uint64_t v28 = *(void *)(v16 + 80);
  if ((a7 & 1) == 0 && (a5 & 1) == 0)
  {
    swift_retain();
    int v29 = 0;
    double v30 = *(double *)&v28;
    double v31 = *(double *)&v27;
    uint64_t v21 = v25;
    uint64_t v20 = v26;
    uint64_t v32 = v24;
    if ((a4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  double v33 = *(double *)(a6 + 24);
  double v34 = *(double *)(a6 + 32);
  double v35 = *(double *)(a6 + 8);
  double v36 = *(double *)(a6 + 16);
  uint64_t v32 = *(void *)a6;
  *(void *)(v16 + 48) = *(void *)a6;
  double v31 = v33 - (a15 - v35);
  double v30 = v34 - (a16 - v36);
  *(double *)(v16 + 72) = v31;
  *(double *)(v16 + 80) = v30;
  *(double *)(v16 + 56) = a15;
  *(double *)(v16 + 64) = a16;
  outlined retain of ViewTransform(a6);
  int v29 = 4;
  if (a4)
  {
LABEL_6:
    *(double *)uint64_t v16 = a11;
    *(double *)(v16 + 8) = a12;
    v29 |= 2u;
  }
LABEL_7:
  if ((a3 & 1) != 0 || !*(void *)(v16 + 40))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(double *)(v16 + 16) = a9;
    *(double *)(v16 + 24) = a10;
    *(void *)(v16 + 32) = a1 & 0x10101;
    *(void *)(v16 + 40) = a2;
    LOBYTE(v29) = v29 | 1;
    goto LABEL_12;
  }
  if (v29)
  {
LABEL_12:
    char v44 = v29;
    v43[0] = v24;
    v43[1] = v25;
    v43[2] = v26;
    v43[3] = v27;
    v43[4] = v28;
    v42[0] = v32;
    v42[1] = v21;
    v42[2] = v20;
    *(double *)&v42[3] = v31;
    *(double *)&v42[4] = v30;
    swift_retain();
    swift_bridgeObjectRetain();
    ContentPathObservers.notifyPathChanged(for:changes:transform:)(a8, &v44, v43, v42);
    swift_bridgeObjectRelease();
    swift_release();
  }

  return swift_release();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(uint64_t *a1, char a2, char a3, char a4, uint64_t a5, char a6, uint64_t a7, void (*a8)(uint64_t *), double a9, double a10, double a11, double a12, double a13, double a14, void (*a15)(uint64_t *))
{
  uint64_t v18 = *(void *)&a14;
  uint64_t v19 = *(void *)&a13;
  uint64_t v44 = a1[1];
  uint64_t v45 = *a1;
  uint64_t v42 = a1[3];
  uint64_t v43 = a1[2];
  uint64_t v41 = a1[4];
  char v22 = *((unsigned char *)a1 + 40);
  char v23 = *((unsigned char *)a1 + 41);
  uint64_t v46 = a1[6];
  uint64_t v24 = *(void *)(v15 + 72);
  uint64_t v25 = *(void *)(v15 + 80);
  uint64_t v26 = *(void *)(v15 + 88);
  uint64_t v27 = *(void *)(v15 + 96);
  uint64_t v28 = *(void *)(v15 + 104);
  if ((a6 & 1) == 0 && (a4 & 1) == 0)
  {
    swift_retain();
    int v29 = 0;
    double v30 = *(double *)&v28;
    double v31 = *(double *)&v27;
    uint64_t v19 = v25;
    uint64_t v18 = v26;
    uint64_t v47 = v24;
    if ((a3 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  double v32 = *(double *)(a5 + 24);
  double v33 = *(double *)(a5 + 32);
  double v34 = *(double *)(a5 + 8);
  double v35 = *(double *)(a5 + 16);
  uint64_t v47 = *(void *)a5;
  *(void *)(v15 + 72) = *(void *)a5;
  double v31 = v32 - (a13 - v34);
  double v30 = v33 - (a14 - v35);
  *(double *)(v15 + 96) = v31;
  *(double *)(v15 + 104) = v30;
  *(double *)(v15 + 80) = a13;
  *(double *)(v15 + 88) = a14;
  outlined retain of ViewTransform(a5);
  int v29 = 4;
  if (a3)
  {
LABEL_6:
    *(double *)uint64_t v15 = a9;
    *(double *)(v15 + 8) = a10;
    v29 |= 2u;
  }
LABEL_7:
  double v36 = a8;
  uint64_t v37 = *(void *)(v15 + 16);
  if ((a2 & 1) != 0 || !v37)
  {
    a8(a1);
    outlined consume of ShapeStyledResponderData<_ShapeView<Rectangle, AngularGradient>>?(v37);
    double v36 = a8;
    *(void *)(v15 + 16) = v45;
    *(void *)(v15 + 24) = v44;
    *(void *)(v15 + 32) = v43;
    *(void *)(v15 + 40) = v42;
    *(void *)(v15 + 48) = v41;
    *(void *)(v15 + 56) = v22 & 1 | ((unint64_t)(v23 & 1) << 8);
    LOBYTE(v29) = v29 | 1;
    *(void *)(v15 + 64) = v46;
    goto LABEL_12;
  }
  if (v29)
  {
LABEL_12:
    v51[0] = v29;
    v50[0] = v24;
    v50[1] = v25;
    v50[2] = v26;
    v50[3] = v27;
    v50[4] = v28;
    v49[0] = v47;
    v49[1] = v19;
    v49[2] = v18;
    *(double *)&v49[3] = v31;
    *(double *)&v49[4] = v30;
    v36(a1);
    swift_retain();
    ContentPathObservers.notifyPathChanged(for:changes:transform:)(a7, v51, v50, v49);
    swift_release();
    a15(a1);
  }

  return swift_release();
}

BOOL specialized ShapeStyledResponderData.contentPath(size:)@<W0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>)
{
  uint64_t v28 = a2;
  char v27 = 0;
  if (_ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v27)
    && (v28 = a2, v27 = 1, BOOL result = _ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v27)))
  {
    char v11 = 6;
    double v12 = 0.0;
    double v13 = 0.0;
    double v14 = 0.0;
    double v15 = 0.0;
  }
  else
  {
    if (a1)
    {
      uint64_t v16 = *(double (**)(uint64_t))(*(void *)a1 + 112);
      uint64_t v17 = swift_retain();
      double v18 = v16(v17);
      double v22 = CGRect.outset(by:)(v18, v19, v20, v21, 0.0, 0.0, a4, a5);
      double v24 = v23;
      a4 = v25;
      a5 = v26;
      swift_release();
    }
    else
    {
      double v22 = 0.0;
      double v24 = 0.0;
    }
    v29.origin.double x = v22;
    v29.origin.double y = v24;
    v29.size.double width = a4;
    v29.size.double height = a5;
    BOOL result = CGRectIsNull(v29);
    if (result) {
      double v12 = 0.0;
    }
    else {
      double v12 = v22;
    }
    if (result) {
      double v13 = 0.0;
    }
    else {
      double v13 = v24;
    }
    if (result) {
      double v14 = 0.0;
    }
    else {
      double v14 = a4;
    }
    if (result) {
      double v15 = 0.0;
    }
    else {
      double v15 = a5;
    }
    if (result) {
      char v11 = 6;
    }
    else {
      char v11 = 0;
    }
  }
  *(double *)a3 = v12;
  *(double *)(a3 + 8) = v13;
  *(double *)(a3 + 16) = v14;
  *(double *)(a3 + 24) = v15;
  *(unsigned char *)(a3 + 32) = v11;
  return result;
}

uint64_t specialized ContentResponderHelper.addContentPath(to:kind:in:observer:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if (a4)
  {
    uint64_t v10 = *(void *)(v6 + 88);
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      uint64_t v12 = v10 + 32;
      swift_bridgeObjectRetain();
      do
      {
        uint64_t v13 = MEMORY[0x24C527E00](v12);
        if (v13)
        {
          uint64_t v14 = v13;
          swift_unknownObjectRelease();
          if (v14 == a4)
          {
            BOOL result = swift_bridgeObjectRelease();
            goto LABEL_14;
          }
        }
        v12 += 16;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
    }
    *((void *)&v41[0] + 1) = a5;
    swift_unknownObjectWeakInit();
    double v15 = *(void **)(v6 + 88);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, (unint64_t)v15);
    }
    unint64_t v17 = v15[2];
    unint64_t v16 = v15[3];
    if (v17 >= v16 >> 1) {
      double v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, (unint64_t)v15);
    }
    _DWORD v15[2] = v17 + 1;
    BOOL result = outlined init with take of ContentPathObservers.Observer((uint64_t)v41, (uint64_t)&v15[2 * v17 + 4]);
    *(void *)(v6 + 88) = v15;
  }
LABEL_14:
  uint64_t v18 = *(void *)(v6 + 16);
  if (v18)
  {
    uint64_t v19 = *(void *)(v6 + 24);
    uint64_t v20 = *(void *)(v6 + 40);
    CGFloat v21 = *(double *)v6;
    CGFloat v22 = *(double *)(v6 + 8);
    if (a2 == 1)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
LABEL_25:
      specialized ShapeStyledResponderData.contentPath(size:)(v19, v20, (uint64_t)v32, v21, v22);
      uint64_t v25 = v32[0];
      uint64_t v26 = v32[1];
      uint64_t v27 = v32[2];
      uint64_t v28 = v32[3];
      unsigned __int8 v29 = v33;
      goto LABEL_26;
    }
    uint64_t v23 = one-time initialization token for v3;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v23 != -1) {
      swift_once();
    }
    unsigned int v24 = static Semantics.v3;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0) {
        goto LABEL_25;
      }
    }
    else if (static Semantics.forced < v24)
    {
      goto LABEL_25;
    }
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    unsigned __int8 v29 = 6;
LABEL_26:
    uint64_t v36 = v25;
    uint64_t v37 = v26;
    uint64_t v38 = v27;
    uint64_t v39 = v28;
    unsigned __int8 v40 = v29;
    uint64_t v30 = Path.isEmpty.getter();
    if (v30)
    {
      outlined consume of Path.Storage(v25, v26, v27, v28, v29);
    }
    else
    {
      long long v31 = *(_OWORD *)(v6 + 64);
      v41[0] = *(_OWORD *)(v6 + 48);
      v41[1] = v31;
      uint64_t v42 = *(void *)(v6 + 80);
      MEMORY[0x270FA5388](v30);
      outlined retain of ViewTransform((uint64_t)v41);
      Path.mapPoints(_:)((void (*)(void **))partial apply for closure #1 in Path.convert(to:transform:), (uint64_t)v34);
      outlined consume of Path.Storage(v25, v26, v27, v28, v29);
      outlined release of ViewTransform((uint64_t)v41);
      outlined init with take of Path.Storage((uint64_t)v34, (uint64_t)v35);
      outlined retain of Path((uint64_t)v35, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      Path.formTrivialUnion(_:)((uint64_t)v34);
      outlined retain of Path((uint64_t)v34, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      outlined retain of Path((uint64_t)v34, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    }
    return outlined consume of ShapeStyledResponderData<StyledTextContentView>?(v18);
  }
  return result;
}

double specialized ContentResponderHelper.globalPosition.getter()
{
  long long v1 = *(_OWORD *)(v0 + 64);
  long long v11 = *(_OWORD *)(v0 + 48);
  long long v12 = v1;
  double v13 = *(double *)(v0 + 80);
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  char v9 = 2;
  char v10 = 2;
  outlined init with take of AnyElement?((uint64_t)&v11, (uint64_t)v14);
  outlined init with take of AnyElement?((uint64_t)v14, (uint64_t)&v15);
  if (v15 || *((double *)&v12 + 1) != 0.0 || (double v2 = 0.0, v13 != 0.0))
  {
    v6[0] = 0;
    v6[1] = 0;
    v4[0] = v11;
    v4[1] = v12;
    double v5 = v13;
    outlined retain of ViewTransform((uint64_t)&v11);
    specialized ViewTransform.convert(_:_:)((uint64_t)v7, (double *)v4, (uint64_t)v6);
    double v2 = *(double *)v6;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v7);
  outlined release of ViewTransform((uint64_t)&v11);
  return v2;
}

uint64_t specialized closure #1 in ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)@<X0>(uint64_t isStackAllocationSafe@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, void *a7@<X8>)
{
  v21[3] = *MEMORY[0x263EF8340];
  unint64_t v9 = *(void *)(isStackAllocationSafe + 16);
  if (v9)
  {
    if (v9 >> 59) {
      __break(1u);
    }
    uint64_t v14 = isStackAllocationSafe;
    if ((uint64_t)(16 * v9) >= 1025)
    {
      isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
      if ((isStackAllocationSafe & 1) == 0)
      {
        uint64_t v19 = (void *)swift_slowAlloc();
        specialized closure #1 in closure #1 in ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)(v19, v9, v14, a3, a4, a5, a6, a7, a2);
        JUMPOUT(0x24C527CC0);
      }
    }
    v20[0] = v20;
    MEMORY[0x270FA5388](isStackAllocationSafe);
    uint64_t result = specialized closure #1 in closure #1 in ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)((char *)v20 - v15, v9, v14, a3, a4, a5, a6, v21, a2);
    uint64_t v17 = v21[1];
    uint64_t v18 = v21[2];
    *a7 = v21[0];
    a7[1] = v17;
    a7[2] = v18;
  }
  else
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = a2;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t specialized closure #1 in closure #1 in ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)@<X0>(void *__dst@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9)
{
  uint64_t v13 = a2;
  uint64_t v14 = (uint64_t)__dst;
  specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a3, __dst, a2);
  uint64_t v33 = v14;
  uint64_t v34 = v13;
  uint64_t v16 = *(void *)(a4 + 48);
  uint64_t v17 = *(void *)(a4 + 56);
  uint64_t v18 = *(void *)(a4 + 64);
  double v19 = *(double *)(a4 + 72);
  double v20 = *(double *)(a4 + 80);
  uint64_t v25 = 1;
  long long v26 = 0u;
  long long v27 = 0u;
  char v28 = 2;
  memset(v29, 0, sizeof(v29));
  uint64_t v30 = 0;
  char v31 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)&v25, (uint64_t)v32);
  v32[41] = 4;
  swift_retain();
  outlined destroy of CoordinateSpace((uint64_t)&v25);
  uint64_t v35 = a5;
  if ((v16 || v19 != 0.0 || v20 != 0.0) && v13)
  {
    uint64_t v25 = v16;
    *(void *)&long long v26 = v17;
    *((void *)&v26 + 1) = v18;
    *(double *)&long long v27 = v19;
    *((double *)&v27 + 1) = v20;
    specialized ViewTransform.convert(_:_:)((uint64_t)v29, (double *)&v25, (uint64_t)&v33);
    uint64_t v14 = v33;
    uint64_t v13 = v34;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v29);
  swift_release();
  CGFloat v21 = *(double *)a4;
  CGFloat v22 = *(double *)(a4 + 8);
  *(void *)&v29[0] = a7;
  LOBYTE(v25) = 0;
  if (_ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v25)
    && (*(void *)&v29[0] = a7, LOBYTE(v25) = 1, _ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v25)))
  {
    uint64_t v23 = 0;
  }
  else
  {
    specialized ShapeStyledLeafView.contains(points:size:)(v14, v13, a6, v29, v21, v22);
    uint64_t v23 = *(void *)&v29[0];
  }
  *a8 = v23;
  a8[1] = 0x3FF0000000000000;
  a8[2] = a9;
  return swift_bridgeObjectRetain();
}

uint64_t specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(uint64_t a1, void *__dst, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return v3;
  }
  if (v3 > a3)
  {
    __break(1u);
  }
  else
  {
    if (!__dst) {
      return v3;
    }
    if (a1 + 32 >= (unint64_t)__dst + 16 * v3 || a1 + 32 + 16 * v3 <= (unint64_t)__dst)
    {
      memcpy(__dst, (const void *)(a1 + 32), 16 * v3);
      return v3;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t StyledTextResponder.__allocating_init(view:styles:inputs:)(int a1, int a2, uint64_t *a3)
{
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized StyledTextResponder.init(view:styles:inputs:)(a1, a2, a3, v6);
  swift_release();
  return v7;
}

uint64_t StyledTextResponder.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = *(void *)(Value + 8);
  char v4 = *(unsigned char *)(Value + 16);
  *(void *)a1 = *(void *)Value;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  swift_retain();

  return swift_retain();
}

uint64_t key path getter for StyledTextResponder.view : StyledTextResponder@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = *(void *)(Value + 8);
  char v4 = *(unsigned char *)(Value + 16);
  *(void *)a1 = *(void *)Value;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  swift_retain();

  return swift_retain();
}

uint64_t StyledTextResponder.view.setter()
{
  return swift_release();
}

void (*StyledTextResponder.view.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x2CuLL);
  *a1 = v3;
  v3[5] = *(_DWORD *)(v1 + 40);
  uint64_t Value = AGGraphGetValue();
  uint64_t v5 = *(void *)(Value + 8);
  char v6 = *(unsigned char *)(Value + 16);
  *(void *)uint64_t v3 = *(void *)Value;
  *((void *)v3 + 1) = v5;
  *((unsigned char *)v3 + 16) = v6;
  swift_retain();
  swift_retain();
  return StyledTextResponder.view.modify;
}

void StyledTextResponder.view.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[1];
  v1[3] = **a1;
  char v3 = *((unsigned char *)v1 + 16);
  v1[4] = v2;
  *((unsigned char *)v1 + 40) = v3;
  AGGraphSetValue();
  swift_release();
  swift_release();

  free(v1);
}

uint64_t StyledTextResponder.$view.getter()
{
  return *(unsigned int *)(v0 + 40);
}

uint64_t StyledTextResponder.$view.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 40) = result;
  return result;
}

_DWORD *(*StyledTextResponder.$view.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 40);
  return StyledTextResponder.$view.modify;
}

_DWORD *StyledTextResponder.$view.modify(_DWORD *result)
{
  *(_DWORD *)(*(void *)result + 40) = result[2];
  return result;
}

uint64_t StyledTextResponder.styles.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)AGGraphGetValue();

  return swift_bridgeObjectRetain();
}

uint64_t StyledTextResponder.styles.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t (*StyledTextResponder.styles.modify(uint64_t a1))(void *a1)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 44);
  *(void *)a1 = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  return StyledTextResponder.styles.modify;
}

uint64_t StyledTextResponder.styles.modify(void *a1)
{
  a1[1] = *a1;
  AGGraphSetValue();

  return swift_bridgeObjectRelease();
}

uint64_t StyledTextResponder.$styles.getter()
{
  return *(unsigned int *)(v0 + 44);
}

uint64_t StyledTextResponder.$styles.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 44) = result;
  return result;
}

_DWORD *(*StyledTextResponder.$styles.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 44);
  return StyledTextResponder.$styles.modify;
}

_DWORD *StyledTextResponder.$styles.modify(_DWORD *result)
{
  *(_DWORD *)(*(void *)result + 44) = result[2];
  return result;
}

uint64_t StyledTextResponder.inputs.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(v1 + 88);
  uint64_t v5 = *(void *)(v1 + 96);
  int v6 = *(_DWORD *)(v1 + 128);
  *(void *)a1 = *(void *)(v1 + 48);
  *(_DWORD *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 72);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 104);
  *(void *)(a1 + 72) = *(void *)(v1 + 120);
  *(_DWORD *)(a1 + 80) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

id StyledTextResponder.viewSubgraph.getter()
{
  return *(id *)(v0 + 136);
}

uint64_t StyledTextResponder.helper.getter@<X0>(_OWORD *a1@<X8>)
{
  swift_beginAccess();
  long long v4 = v1[14];
  long long v14 = v1[13];
  long long v3 = v14;
  long long v15 = v4;
  long long v6 = v1[16];
  long long v16 = v1[15];
  long long v5 = v16;
  long long v17 = v6;
  long long v7 = v1[10];
  v11[0] = v1[9];
  v11[1] = v7;
  long long v9 = v1[12];
  long long v12 = v1[11];
  long long v8 = v12;
  long long v13 = v9;
  *a1 = v11[0];
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v3;
  a1[5] = v4;
  a1[6] = v5;
  a1[7] = v6;
  return outlined retain of ContentResponderHelper<ShapeStyledResponderData<StyledTextContentView>>((uint64_t)v11);
}

uint64_t StyledTextResponder.helper.setter(long long *a1)
{
  swift_beginAccess();
  long long v3 = v1[14];
  v14[4] = v1[13];
  v14[5] = v3;
  long long v4 = v1[16];
  v14[6] = v1[15];
  v14[7] = v4;
  long long v5 = v1[10];
  v14[0] = v1[9];
  v14[1] = v5;
  long long v6 = v1[12];
  v14[2] = v1[11];
  v14[3] = v6;
  long long v7 = *a1;
  long long v8 = a1[1];
  long long v9 = a1[3];
  v1[11] = a1[2];
  v1[12] = v9;
  v1[9] = v7;
  v1[10] = v8;
  long long v10 = a1[4];
  long long v11 = a1[5];
  long long v12 = a1[7];
  v1[15] = a1[6];
  v1[16] = v12;
  v1[13] = v10;
  v1[14] = v11;
  return outlined release of ContentResponderHelper<ShapeStyledResponderData<StyledTextContentView>>((uint64_t)v14);
}

uint64_t (*StyledTextResponder.helper.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

void *StyledTextResponder.childSubgraph.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 272);
  id v2 = v1;
  return v1;
}

void StyledTextResponder.childSubgraph.setter(uint64_t a1)
{
  swift_beginAccess();
  long long v3 = *(void **)(v1 + 272);
  *(void *)(v1 + 272) = a1;
}

uint64_t (*StyledTextResponder.childSubgraph.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

void *StyledTextResponder.childViewSubgraph.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 280);
  id v2 = v1;
  return v1;
}

void StyledTextResponder.childViewSubgraph.setter(uint64_t a1)
{
  swift_beginAccess();
  long long v3 = *(void **)(v1 + 280);
  *(void *)(v1 + 280) = a1;
}

uint64_t (*StyledTextResponder.childViewSubgraph.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t StyledTextResponder.gestureGraph.getter()
{
  if (*(void *)(v0 + 288))
  {
    uint64_t v1 = *(void *)(v0 + 288);
  }
  else
  {
    type metadata accessor for GestureGraph();
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    uint64_t v1 = specialized GestureGraph.init(rootResponder:)(v3, v2);
    *(void *)(v0 + 288) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t StyledTextResponder.gestureGraph.setter(uint64_t a1)
{
  *(void *)(v1 + 288) = a1;
  return swift_release();
}

uint64_t (*StyledTextResponder.gestureGraph.modify(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = StyledTextResponder.gestureGraph.getter();
  return StyledTextResponder.gestureGraph.modify;
}

uint64_t StyledTextResponder.gestureGraph.modify(void *a1)
{
  *(void *)(a1[1] + 288) = *a1;
  return swift_release();
}

uint64_t StyledTextResponder.bindingBridge.getter()
{
  if (*(void *)(v0 + 296))
  {
    uint64_t v1 = *(void *)(v0 + 296);
  }
  else
  {
    uint64_t v1 = closure #1 in StyledTextResponder.bindingBridge.getter(v0);
    *(void *)(v0 + 296) = v1;
    *(void *)(v0 + 304) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t StyledTextResponder.bindingBridge.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 296) = a1;
  *(void *)(v2 + 304) = a2;
  return swift_release();
}

uint64_t closure #1 in StyledTextResponder.bindingBridge.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v3 = *(void *)(StyledTextResponder.gestureGraph.getter() + 208);
  swift_retain();
  swift_release();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v2);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  if (v4)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v6 + 8))(v3, a1, &protocol witness table for StyledTextResponder, v4, v6);
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    *(void *)(StyledTextResponder.gestureGraph.getter() + 200) = v9;
    swift_unknownObjectWeakAssign();
    swift_release();
    return v7;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t (*StyledTextResponder.bindingBridge.modify(uint64_t *a1))(uint64_t a1)
{
  a1[2] = v1;
  *a1 = StyledTextResponder.bindingBridge.getter();
  a1[1] = v3;
  return StyledTextResponder.bindingBridge.modify;
}

uint64_t StyledTextResponder.bindingBridge.modify(uint64_t a1)
{
  *(_OWORD *)(*(void *)(a1 + 16) + 296) = *(_OWORD *)a1;
  return swift_release();
}

uint64_t StyledTextResponder._gestureContainer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t StyledTextResponder._gestureContainer.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 312) = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*StyledTextResponder._gestureContainer.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t StyledTextResponder.init(view:styles:inputs:)(int a1, int a2, uint64_t *a3)
{
  uint64_t v4 = specialized StyledTextResponder.init(view:styles:inputs:)(a1, a2, a3, v3);
  swift_release();
  return v4;
}

uint64_t StyledTextResponder.gestureContainer.getter()
{
  uint64_t v1 = v0;
  int IsValid = AGSubgraphIsValid();
  uint64_t result = 0;
  if (IsValid)
  {
    swift_beginAccess();
    uint64_t v4 = v0[20];
    if (v4)
    {
      uint64_t v5 = *(void **)(v4 + 216);
      if (v5)
      {
        unsigned __int8 v20 = 0;
        uint64_t v6 = one-time initialization token for kitLink;
        id v7 = v5;
        if (v6 != -1) {
          swift_once();
        }
        uint64_t v8 = static NSAttributedStringKey.kitLink;
        id v9 = objc_msgSend(v7, sel_length);
        uint64_t v10 = swift_allocObject();
        *(void *)(v10 + 16) = &v20;
        uint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16) = partial apply for closure #1 in NSAttributedString.hasLinkAttributes.getter;
        *(void *)(v11 + 24) = v10;
        aBlock[4] = _sypSgSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgnyy_AacGIegnyy_TRTA_0;
        aBlock[5] = v11;
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
        aBlock[3] = &block_descriptor_12;
        long long v12 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v7, sel_enumerateAttribute_inRange_options_usingBlock_, v8, 0, v9, 0, v12);
        _Block_release(v12);
        LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if (v8)
        {
          __break(1u);
          goto LABEL_16;
        }
        int v13 = v20;

        swift_release();
        if (v13 == 1)
        {
          swift_beginAccess();
          if (v0[39]) {
            return swift_unknownObjectRetain();
          }
          if (AGSubgraphIsValid())
          {
            uint64_t v14 = v0[6];
            swift_retain_n();
            swift_retain_n();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
            uint64_t v17 = v16;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_release_n();
            swift_release_n();
            if (!v15)
            {
LABEL_17:
              uint64_t result = _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              return result;
            }
            uint64_t v18 = (*(uint64_t (**)(void *, _UNKNOWN **, uint64_t, uint64_t))(v17 + 8))(v1, &protocol witness table for StyledTextResponder, v15, v17);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            v1[39] = v18;
            swift_unknownObjectRelease();
            if (v1[39]) {
              return swift_unknownObjectRetain();
            }
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t StyledTextResponder.eventSources.getter()
{
  uint64_t v0 = StyledTextResponder.bindingBridge.getter();
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 192))(v0);
  swift_release();
  return v1;
}

void StyledTextResponder.gestureType.getter()
{
}

uint64_t StyledTextResponder.isValid.getter()
{
  swift_beginAccess();
  if (*(void *)(v0 + 312)) {
    return AGSubgraphIsValid();
  }
  else {
    return 0;
  }
}

Swift::Void __swiftcall StyledTextResponder.detachContainer()()
{
  swift_beginAccess();
  *(void *)(v0 + 312) = 0;
  swift_unknownObjectRelease();
}

uint64_t StyledTextResponder.containsGlobalPoints(_:cacheKey:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = *a3;
  swift_beginAccess();
  uint64_t v8 = *(void *)(v4 + 160);
  if (v8)
  {
    uint64_t v26 = a4;
    uint64_t v9 = *(void *)(v4 + 168);
    uint64_t v10 = *(void *)(v4 + 184);
    uint64_t v11 = *(void *)(v4 + 264);
    if (!v11
      || (uint64_t v12 = *(void *)(v4 + 240), (v12 & 0x100000000) != 0)
      || (a2 & 0x100000000) != 0
      || v12 != a2)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      specialized closure #1 in ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)(a1, MEMORY[0x263F8EE78], v4 + 144, v8, v9, v10, v28);
      uint64_t v13 = v28[0];
      double v14 = *(double *)&v28[1];
      uint64_t v15 = v28[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v4 + 240) = a2 & 0x1FFFFFFFFLL;
      *(void *)(v4 + 248) = v13;
      *(double *)(v4 + 256) = v14;
      *(void *)(v4 + 264) = v15;
      outlined consume of ShapeStyledResponderData<StyledTextContentView>?(v8);
    }
    else
    {
      uint64_t v13 = *(void *)(v4 + 248);
      double v14 = *(double *)(v4 + 256);
      swift_bridgeObjectRetain();
      uint64_t v15 = v11;
    }
    a4 = v26;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = MEMORY[0x263F8EE78];
    double v14 = 0.0;
  }
  swift_endAccess();
  uint64_t result = AGSubgraphIsValid();
  if (!result) {
    goto LABEL_17;
  }
  uint64_t result = AGGraphGetValue();
  uint64_t v17 = *(void **)(*(void *)result + 216);
  if (!v17) {
    goto LABEL_17;
  }
  LOBYTE(v28[0]) = 0;
  uint64_t v18 = one-time initialization token for kitLink;
  id v19 = v17;
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v20 = static NSAttributedStringKey.kitLink;
  id v21 = objc_msgSend(v19, sel_length);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v28;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = closure #1 in NSAttributedString.hasLinkAttributes.getterpartial apply;
  *(void *)(v23 + 24) = v22;
  aBlock[4] = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_15;
  unsigned int v24 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v19, sel_enumerateAttribute_inRange_options_usingBlock_, v20, 0, v21, 0, v24);
  _Block_release(v24);
  LOBYTE(v24) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v24 & 1) == 0)
  {
    unsigned __int8 v25 = v28[0];

    uint64_t result = swift_release();
    if ((v25 & ((v27 & 2) == 0)) != 0) {
      double v14 = 16.0;
    }
LABEL_17:
    *(void *)a4 = v13;
    *(double *)(a4 + 8) = v14;
    *(void *)(a4 + 16) = v15;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t StyledTextResponder.addContentPath(to:kind:in:observer:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a2;
  swift_beginAccess();
  specialized ContentResponderHelper.addContentPath(to:kind:in:observer:)(a1, v9, a3, a4, a5);
  return swift_endAccess();
}

Swift::Void __swiftcall StyledTextResponder.extendPrintTree(string:)(Swift::String *string)
{
  swift_beginAccess();
  long long v2 = v1[13];
  long long v3 = v1[15];
  long long v4 = v1[16];
  v13[5] = v1[14];
  v13[6] = v3;
  v13[7] = v4;
  long long v5 = v1[10];
  v13[0] = v1[9];
  v13[1] = v5;
  long long v6 = v1[12];
  uint64_t v13[2] = v1[11];
  v13[3] = v6;
  v13[4] = v2;
  outlined retain of ContentResponderHelper<ShapeStyledResponderData<StyledTextContentView>>((uint64_t)v13);
  specialized ContentResponderHelper.globalPosition.getter();
  outlined release of ContentResponderHelper<ShapeStyledResponderData<StyledTextContentView>>((uint64_t)v13);
  v7._countAndFlagsBits = 91;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 8236;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 4202589;
  v11._object = (void *)0xE300000000000000;
  String.append(_:)(v11);
  type metadata accessor for (CGFloat, CGFloat)();
  _print_unlocked<A, B>(_:_:)();
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
}

uint64_t StyledTextResponder.bindEvent(_:)(uint64_t a1)
{
  swift_beginAccess();
  if (static CoreTesting.isRunning == 1)
  {
    swift_beginAccess();
    uint64_t v2 = 0;
    if ((static GestureContainerFeature.isEnabledOverride & 1) == 0) {
      return v2;
    }
  }
  else
  {
    long long v3 = getenv("SWIFTUI_GESTURE_CONTAINER");
    if (v3)
    {
      if (!atoi(v3)) {
        return 0;
      }
    }
    else
    {
      uint64_t v13 = &type metadata for GestureContainerFeature;
      double v14 = COERCE_DOUBLE(lazy protocol witness table accessor for type GestureContainerFeature and conformance GestureContainerFeature());
      char v7 = isFeatureEnabled(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
      if ((v7 & 1) == 0) {
        return 0;
      }
      if (one-time initialization token for v6 != -1) {
        swift_once();
      }
      unsigned int v8 = static Semantics.v6;
      if (one-time initialization token for forced != -1) {
        swift_once();
      }
      swift_beginAccess();
      if (byte_26B0F44FC)
      {
        if (!dyld_program_sdk_at_least()) {
          return 0;
        }
      }
      else if (static Semantics.forced < v8)
      {
        return 0;
      }
    }
  }
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v10);
  HitTestableEvent.init(_:)((uint64_t)v10, (uint64_t)v11);
  uint64_t v4 = v12;
  if (v12 == 1) {
    return 0;
  }
  uint64_t v6 = v11[0];
  uint64_t v5 = v11[1];
  v11[0] = 0;
  v10[0] = 1;
  uint64_t v2 = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)(0x100000000, v11, *(double *)&v13, v14, v15);
  outlined consume of HitTestableEvent?(v6, v5, v4);
  return v2;
}

void StyledTextResponder.makeGesture(inputs:)(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = a1[5];
  v7[4] = a1[4];
  _OWORD v7[5] = v4;
  v8[0] = a1[6];
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)((char *)a1 + 108);
  long long v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  long long v6 = a1[3];
  _OWORD v7[2] = a1[2];
  v7[3] = v6;
  swift_retain();
  specialized AnyGestureResponder.makeWrappedGesture(inputs:makeChild:)((uint64_t)v7, v2, a2);
}

uint64_t ResolvedStyledText.gesture.getter()
{
  uint64_t v1 = *(void **)(v0 + 216);
  if (!v1) {
    goto LABEL_7;
  }
  unsigned __int8 v14 = 0;
  uint64_t v2 = one-time initialization token for kitLink;
  id v3 = v1;
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v4 = static NSAttributedStringKey.kitLink;
  id v5 = objc_msgSend(v3, sel_length);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = &v14;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = closure #1 in NSAttributedString.hasLinkAttributes.getterpartial apply;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_39;
  unsigned int v8 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_enumerateAttribute_inRange_options_usingBlock_, v4, 0, v5, 0, v8);
  _Block_release(v8);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v4 & 1) == 0)
  {
    int v10 = v14;

    swift_release();
    if (v10 == 1)
    {
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = v0;
      *(void *)(v11 + 24) = v0;
      type metadata accessor for AnyGestureStorage<SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>>>();
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = partial apply for closure #1 in ResolvedStyledText.gesture.getter;
      *(void *)(v12 + 24) = v11;
      swift_retain_n();
      return v12;
    }
LABEL_7:
    type metadata accessor for AnyGestureStorage<EmptyGesture<()>>();
    return swift_allocObject();
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall StyledTextResponder.resetGesture()()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 272);
  *(void *)(v0 + 272) = 0;

  swift_beginAccess();
  uint64_t v2 = *(void **)(v0 + 280);
  *(void *)(v0 + 280) = 0;
}

void StyledTextResponder.__allocating_init()()
{
}

void StyledTextResponder.init()()
{
}

uint64_t StyledTextResponder.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  long long v1 = *(_OWORD *)(v0 + 224);
  v6[4] = *(_OWORD *)(v0 + 208);
  v6[5] = v1;
  long long v2 = *(_OWORD *)(v0 + 256);
  v6[6] = *(_OWORD *)(v0 + 240);
  v6[7] = v2;
  long long v3 = *(_OWORD *)(v0 + 160);
  v6[0] = *(_OWORD *)(v0 + 144);
  v6[1] = v3;
  long long v4 = *(_OWORD *)(v0 + 192);
  void v6[2] = *(_OWORD *)(v0 + 176);
  v6[3] = v4;
  outlined release of ContentResponderHelper<ShapeStyledResponderData<StyledTextContentView>>((uint64_t)v6);

  swift_release();
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for AnyGestureResponder.inputs.getter in conformance StyledTextResponder@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(v1 + 88);
  uint64_t v5 = *(void *)(v1 + 96);
  int v6 = *(_DWORD *)(v1 + 128);
  *(void *)a1 = *(void *)(v1 + 48);
  *(_DWORD *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 72);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 104);
  *(void *)(a1 + 72) = *(void *)(v1 + 120);
  *(_DWORD *)(a1 + 80) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

void *protocol witness for AnyGestureResponder.childSubgraph.getter in conformance StyledTextResponder()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 272);
  id v2 = v1;
  return v1;
}

void protocol witness for AnyGestureResponder.childSubgraph.setter in conformance StyledTextResponder(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 272);
  *(void *)(v1 + 272) = a1;
}

uint64_t (*protocol witness for AnyGestureResponder.childSubgraph.modify in conformance StyledTextResponder())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

void *protocol witness for AnyGestureResponder.childViewSubgraph.getter in conformance StyledTextResponder()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 280);
  id v2 = v1;
  return v1;
}

void protocol witness for AnyGestureResponder.childViewSubgraph.setter in conformance StyledTextResponder(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 280);
  *(void *)(v1 + 280) = a1;
}

uint64_t (*protocol witness for AnyGestureResponder.childViewSubgraph.modify in conformance StyledTextResponder())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

id protocol witness for AnyGestureContainingResponder.viewSubgraph.getter in conformance StyledTextResponder()
{
  return *(id *)(v0 + 136);
}

uint64_t protocol witness for AnyGestureContainingResponder.eventSources.getter in conformance StyledTextResponder()
{
  uint64_t v0 = StyledTextResponder.bindingBridge.getter();
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 192))(v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for AnyGestureContainingResponder.detachContainer() in conformance StyledTextResponder()
{
  swift_beginAccess();
  *(void *)(v0 + 312) = 0;
  return swift_unknownObjectRelease();
}

void protocol witness for AnyGestureContainingResponder.gestureType.getter in conformance StyledTextResponder()
{
}

uint64_t protocol witness for AnyGestureContainingResponder.isValid.getter in conformance StyledTextResponder()
{
  swift_beginAccess();
  if (*(void *)(v0 + 312)) {
    return AGSubgraphIsValid();
  }
  else {
    return 0;
  }
}

uint64_t closure #1 in ResolvedStyledText.gesture.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(double *)(v10 + 32) = a4;
  *(double *)(v10 + 40) = a5;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = _ViewInputs.base.modify;
  *(void *)(v12 + 24) = 0;
  *(void *)a3 = partial apply for closure #1 in closure #1 in ResolvedStyledText.gesture.getter;
  *(void *)(a3 + 8) = v10;
  *(void *)(a3 + 16) = KeyPath;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 47) = 0;
  *(void *)(a3 + 56) = partial apply for specialized closure #1 in MapGesture.init(_:);
  *(void *)(a3 + 64) = v12;
  swift_retain();

  return swift_retain();
}

uint64_t closure #1 in closure #1 in ResolvedStyledText.gesture.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned int (*a4)(uint64_t, uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  CGRect v76 = a4;
  uint64_t v80 = a5;
  long long v81 = a3;
  uint64_t v11 = MEMORY[0x263F06EA8];
  uint64_t v12 = MEMORY[0x263F8D8F0];
  _s10Foundation3URLVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v13 - 8);
  CGRect v75 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v63 - v16;
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  id v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  unsigned int v24 = (char *)&v63 - v23;
  uint64_t v25 = *(void *)a2;
  uint64_t v26 = *(void *)(a2 + 8);
  uint64_t v77 = *(void *)(a2 + 16);
  uint64_t v73 = *(void *)(a2 + 24);
  uint64_t v74 = v25;
  uint64_t v78 = *(void *)(a2 + 32);
  uint64_t v79 = v26;
  uint64_t v27 = *(void *)(a2 + 40);
  uint64_t v71 = *(void *)(a2 + 48);
  uint64_t v72 = v27;
  uint64_t v70 = *(void *)(a2 + 56);
  uint64_t v28 = *(unsigned __int8 *)(a2 + 64);
  _sypSgWOcTm_0(a1, (uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for URL?, v11, v12, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s10Foundation3URLVSgMaTm_0);
  unsigned __int8 v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v29(v17, 1, v18) != 1)
  {
    uint64_t v45 = v28;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v24, v17, v18);
    uint64_t v46 = (void *)v81[27];
    uint64_t v47 = (void *)*((void *)v76 + 27);
    uint64_t v48 = v19;
    uint64_t v49 = v18;
    if (v46)
    {
      uint64_t v50 = v80;
      if (v47)
      {
        type metadata accessor for NSAttributedString();
        id v51 = v47;
        id v52 = v46;
        char v53 = static NSObject.== infix(_:_:)();

        if (v53) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      uint64_t v50 = v80;
      if (!v47)
      {
LABEL_8:
        switch(v45)
        {
          case 1:
          case 2:
            (*(void (**)(uint64_t, char *, uint64_t))(v48 + 16))(v50, v24, v49);
            break;
          case 3:
            break;
          default:
            if (v77 == 1)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v50, 1, 1, v49);
            }
            else
            {
              (*(void (**)(uint64_t, char *, uint64_t))(v48 + 16))(v50, v24, v49);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v50, 0, 1, v49);
            }
            break;
        }
        _s10Foundation3URLVSgMaTm_0(0, &lazy cache variable for type metadata for GesturePhase<URL>, MEMORY[0x263F06EA8], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for GesturePhase);
        swift_storeEnumTagMultiPayload();
        return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v24, v49);
      }
    }
    (*(void (**)(char *, uint64_t))(v48 + 8))(v24, v49);
    _s10Foundation3URLVSgMaTm_0(0, &lazy cache variable for type metadata for GesturePhase<URL>, MEMORY[0x263F06EA8], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for GesturePhase);
    return swift_storeEnumTagMultiPayload();
  }
  CGRect v76 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v29;
  uint64_t v68 = v21;
  uint64_t v69 = v19;
  _sypSgWOhTm_6((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0], (uint64_t (*)(void))_s10Foundation3URLVSgMaTm_0);
  BOOL v30 = (v28 - 1) >= 2;
  char v31 = (void *)v28;
  uint64_t v32 = v74;
  uint64_t v33 = (uint64_t)v75;
  uint64_t v34 = v72;
  uint64_t v35 = v73;
  uint64_t v37 = v70;
  uint64_t v36 = v71;
  if (v30)
  {
    if (v31)
    {
      uint64_t v44 = (uint64_t (*)(uint64_t))MEMORY[0x263F06EA8];
      goto LABEL_19;
    }
    if (v77 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 56))(v80, 1, 1, v18);
      _s10Foundation3URLVSgMaTm_0(0, &lazy cache variable for type metadata for GesturePhase<URL>, MEMORY[0x263F06EA8], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for GesturePhase);
      return swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v64 = a1;
  uint64_t v38 = (void (**)(uint64_t, double, double, double, double))(*v81 + 280);
  int v66 = *v38;
  uint64_t v67 = v18;
  uint64_t v65 = v38;
  uint64_t v39 = v31;
  uint64_t v40 = v77;
  uint64_t v41 = outlined copy of GesturePhase<TappableSpatialEvent>(v74, v79, v77, v73, v78, v72, v71, v70, (char)v31);
  v66(v41, *(double *)&v34, *(double *)&v36, a6, a7);
  uint64_t v42 = v67;
  long long v81 = v39;
  outlined consume of GesturePhase<TappableSpatialEvent>(v32, v79, v40, v35, v78, v34, v36, v37, (char)v39);
  if (v76(v33, 1, v42) == 1)
  {
    uint64_t v43 = (uint64_t (*)(uint64_t))MEMORY[0x263F06EA8];
    _sypSgWOhTm_6(v33, (uint64_t)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0], (uint64_t (*)(void))_s10Foundation3URLVSgMaTm_0);
    uint64_t v44 = v43;
LABEL_19:
    _s10Foundation3URLVSgMaTm_0(0, &lazy cache variable for type metadata for GesturePhase<URL>, v44, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for GesturePhase);
    return swift_storeEnumTagMultiPayload();
  }
  long long v55 = v68;
  uint64_t v54 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v68, v33, v42);
  uint64_t v56 = v64;
  _sypSgWOhTm_6(v64, (uint64_t)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0], (uint64_t (*)(void))_s10Foundation3URLVSgMaTm_0);
  long long v57 = *(void (**)(uint64_t, char *, uint64_t))(v54 + 16);
  v57(v56, v55, v42);
  char v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56);
  v58(v56, 0, 1, v42);
  if (v81)
  {
    v57(v80, v55, v42);
  }
  else
  {
    if (v77 == 1)
    {
      uint64_t v60 = v80;
      uint64_t v61 = 1;
    }
    else
    {
      uint64_t v62 = v80;
      v57(v80, v55, v42);
      uint64_t v60 = v62;
      uint64_t v61 = 0;
    }
    v58(v60, v61, 1, v42);
  }
  _s10Foundation3URLVSgMaTm_0(0, &lazy cache variable for type metadata for GesturePhase<URL>, MEMORY[0x263F06EA8], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for GesturePhase);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v55, v42);
}

uint64_t OpenURLGesture.openURL.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (long long *)(v2 + *(int *)(a1 + 36));
  long long v5 = v4[1];
  long long v7 = *v4;
  v8[0] = v5;
  *(_DWORD *)((char *)v8 + 15) = *(_DWORD *)((char *)v4 + 31);
  outlined retain of Environment<OpenURLAction>((uint64_t)&v7, (void (*)(void, void, void, void, void, void))outlined copy of Environment<OpenURLAction>.Content);
  specialized Environment.wrappedValue.getter(a2);
  return outlined retain of Environment<OpenURLAction>((uint64_t)&v7, (void (*)(void, void, void, void, void, void))outlined consume of Environment<OpenURLAction>.Content);
}

uint64_t OpenURLGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](a1);
  unsigned int v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, v3, v10, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a1);
  unint64_t v15 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = *(void *)(a1 + 24);
  *(void *)(v16 + 16) = v10;
  *(void *)(v16 + 24) = v17;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v16 + v15, v8, a1);
  Gesture.onEnded(_:)((uint64_t)partial apply for closure #1 in OpenURLGesture.body.getter, v16, v10, v17, a2);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t closure #1 in OpenURLGesture.body.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OpenURLGesture();
  OpenURLGesture.openURL.getter(v2, (uint64_t)&v12);
  uint64_t v3 = v12;
  uint64_t v4 = v13;
  uint64_t v5 = v14;
  uint64_t v6 = v15;
  char v7 = v16;
  v9[0] = v12;
  v9[1] = v13;
  v9[2] = v14;
  v9[3] = v15;
  char v10 = v16;
  char v11 = v17;
  specialized OpenURLAction._open(_:completion:)(a1, (uint64_t)v9);

  return outlined consume of OpenURLAction.Handler(v3, v4, v5, v6, v7);
}

uint64_t protocol witness for GestureStateProtocol.init() in conformance State #1 in ResolvedStyledText.gesture.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t specialized GestureGraph.init(rootResponder:)(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  *(void *)(a2 + 184) = 0;
  swift_weakInit();
  *(void *)(a2 + 200) = 0;
  swift_unknownObjectWeakInit();
  type metadata accessor for EventBindingManager();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v3 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v3 + 48) = MEMORY[0x263F8EE80];
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)(v3 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(unsigned char *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  *(void *)(a2 + 208) = v3;
  int v5 = *MEMORY[0x263F288F8];
  *(int32x4_t *)(a2 + 232) = vdupq_n_s32(*MEMORY[0x263F288F8]);
  *(_DWORD *)(a2 + 248) = v5;
  *(_DWORD *)(a2 + 252) = v5;
  *(_DWORD *)(a2 + 256) = v5;
  uint64_t v6 = one-time initialization token for infinity;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  *(void *)(a2 + 264) = static Time.infinity;
  if (specialized static GestureContainerFeature.isEnabled.getter())
  {
    *(void *)(a2 + 184) = &protocol witness table for StyledTextResponder;
    swift_weakAssign();
    GraphHost.Data.init()((uint64_t)&v30);
    char v7 = (void *)v30;
    unsigned int v8 = v31;
    unsigned int v24 = v32;
    char v25 = v34;
    char v26 = v33;
    uint64_t v9 = v38;
    int v27 = v39;
    int v28 = v37;
    uint64_t v10 = v40;
    uint64_t v11 = v43;
    long long v23 = v35;
    uint64_t v12 = v36;
    uint64_t v13 = v41;
    uint64_t v14 = v42;
    id v29 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    unint64_t v30 = 0;
    uint64_t v15 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F288C8];
    type metadata accessor for AnyGesture<()>(0, &lazy cache variable for type metadata for External<Time>, (uint64_t)&type metadata for Time, MEMORY[0x263F288C8]);
    lazy protocol witness table accessor for type External<Time> and conformance External<A>();
    *(_DWORD *)(a2 + 216) = Attribute.init<A>(body:value:flags:update:)();
    unint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(v4);
    type metadata accessor for [EventID : EventType]();
    _s10Foundation3URLVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<[EventID : EventType]>, (uint64_t (*)(uint64_t))type metadata accessor for [EventID : EventType], MEMORY[0x263F288C8]);
    lazy protocol witness table accessor for type External<[EventID : EventType]> and conformance External<A>();
    int v16 = Attribute.init<A>(body:value:flags:update:)();
    swift_bridgeObjectRelease();
    *(_DWORD *)(a2 + 220) = v16;
    unint64_t v30 = 1;
    type metadata accessor for AnyGesture<()>(0, &lazy cache variable for type metadata for External<_GestureInputs.InheritedPhase>, (uint64_t)&type metadata for _GestureInputs.InheritedPhase, v15);
    lazy protocol witness table accessor for type External<_GestureInputs.InheritedPhase> and conformance External<A>();
    *(_DWORD *)(a2 + 224) = Attribute.init<A>(body:value:flags:update:)();
    LODWORD(v30) = 0;
    type metadata accessor for AnyGesture<()>(0, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>, MEMORY[0x263F8E8F8], v15);
    lazy protocol witness table accessor for type External<UInt32> and conformance External<A>();
    *(_DWORD *)(a2 + 228) = Attribute.init<A>(body:value:flags:update:)();
    unint64_t v30 = MEMORY[0x263F8EE78];
    type metadata accessor for AnyGesture<()>(0, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, v15);
    lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>();
    *(_DWORD *)(a2 + 260) = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    unint64_t v30 = (unint64_t)v7;
    char v31 = v8;
    uint64_t v32 = v24;
    char v33 = v26;
    char v34 = v25;
    long long v35 = v23;
    uint64_t v36 = v12;
    int v37 = v28;
    uint64_t v38 = v9;
    int v39 = v27;
    uint64_t v40 = v10;
    uint64_t v41 = v13;
    uint64_t v42 = v14;
    uint64_t v43 = v11;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    id v17 = v7;
    id v18 = v8;
    id v19 = v24;
    uint64_t v20 = GraphHost.init(data:)((uint64_t)&v30);
    uint64_t v21 = *(void *)(v20 + 208);
    swift_beginAccess();
    *(void *)(v21 + 24) = &protocol witness table for GestureGraph;
    swift_unknownObjectWeakAssign();
    swift_retain();
    AGSubgraphSetCurrent();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    return v20;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t outlined retain of ContentResponderHelper<ShapeStyledResponderData<StyledTextContentView>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of ShapeStyledResponderData<StyledTextContentView>?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined release of ContentResponderHelper<ShapeStyledResponderData<StyledTextContentView>>(uint64_t a1)
{
  return a1;
}

uint64_t sub_245D1F12C()
{
  return swift_deallocObject();
}

uint64_t sub_245D1F13C()
{
  return swift_deallocObject();
}

uint64_t sub_245D1F14C()
{
  return swift_deallocObject();
}

uint64_t sub_245D1F15C()
{
  return swift_deallocObject();
}

uint64_t sub_245D1F170()
{
  return AGGraphSetValue();
}

uint64_t sub_245D1F1E0@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(*(void *)result + 40);
  return result;
}

_DWORD *sub_245D1F1F0(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(*(void *)a2 + 40) = *result;
  return result;
}

uint64_t sub_245D1F200@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)AGGraphGetValue();

  return swift_bridgeObjectRetain();
}

uint64_t sub_245D1F250()
{
  return AGGraphSetValue();
}

uint64_t sub_245D1F2B8@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(*(void *)result + 44);
  return result;
}

_DWORD *sub_245D1F2C8(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(*(void *)a2 + 44) = *result;
  return result;
}

uint64_t sub_245D1F2D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = StyledTextResponder.gestureGraph.getter();
  *a1 = result;
  return result;
}

uint64_t sub_245D1F304(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 288) = *a1;
  swift_retain();

  return swift_release();
}

uint64_t sub_245D1F348@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = StyledTextResponder.bindingBridge.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_245D1F374(_OWORD *a1, uint64_t a2)
{
  *(_OWORD *)(*(void *)a2 + 296) = *a1;
  swift_retain();

  return swift_release();
}

uint64_t method lookup function for StyledTextResponder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for StyledTextResponder);
}

uint64_t dispatch thunk of StyledTextResponder.__allocating_init(view:styles:inputs:)()
{
  return (*(uint64_t (**)(void))(v0 + 304))();
}

ValueMetadata *type metadata accessor for StyledTextResponderFilter()
{
  return &type metadata for StyledTextResponderFilter;
}

uint64_t outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6)
{
  if (a6)
  {
    outlined consume of Path.Storage(result, a2, a3, a4, a5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of ShapeStyledResponderData<_ShapeView<CombinedContentShape, ForegroundStyle>>?(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (result)
  {
    a4();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle, LinearGradient>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of ShapeStyledResponderData<_ShapeView<Rectangle, AngularGradient>>?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of ShapeStyledResponderData<_ShapeView<Rectangle, LinearGradient>>(uint64_t a1)
{
  return a1;
}

void type metadata accessor for AnyGestureStorage<EmptyGesture<()>>()
{
  if (!lazy cache variable for type metadata for AnyGestureStorage<EmptyGesture<()>>)
  {
    type metadata accessor for AnyGesture<()>(255, &lazy cache variable for type metadata for EmptyGesture<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for EmptyGesture);
    lazy protocol witness table accessor for type EmptyGesture<()> and conformance EmptyGesture<A>();
    unint64_t v0 = type metadata accessor for AnyGestureStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyGestureStorage<EmptyGesture<()>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EmptyGesture<()> and conformance EmptyGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyGesture<()> and conformance EmptyGesture<A>;
  if (!lazy protocol witness table cache variable for type EmptyGesture<()> and conformance EmptyGesture<A>)
  {
    type metadata accessor for AnyGesture<()>(255, &lazy cache variable for type metadata for EmptyGesture<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for EmptyGesture);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyGesture<()> and conformance EmptyGesture<A>);
  }
  return result;
}

uint64_t sub_245D1F88C()
{
  return swift_deallocObject();
}

uint64_t sub_245D1F89C()
{
  return swift_deallocObject();
}

uint64_t sub_245D1F8AC()
{
  return objectdestroy_41Tm();
}

uint64_t partial apply for closure #1 in ResolvedStyledText.gesture.getter@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  return closure #1 in ResolvedStyledText.gesture.getter(*(void *)(v3 + 16), *(void *)(v3 + 24), a1, a2, a3);
}

void type metadata accessor for AnyGestureStorage<SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>>>()
{
  if (!lazy cache variable for type metadata for AnyGestureStorage<SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>>>)
  {
    type metadata accessor for SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>>();
    lazy protocol witness table accessor for type StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL> and conformance StateContainerGesture<A, B, C>(&lazy protocol witness table cache variable for type SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>> and conformance SizeGesture<A>, (void (*)(uint64_t))type metadata accessor for SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>>);
    unint64_t v0 = type metadata accessor for AnyGestureStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyGestureStorage<SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>>>);
    }
  }
}

void type metadata accessor for SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>>()
{
  if (!lazy cache variable for type metadata for SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>>)
  {
    type metadata accessor for _MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>();
    lazy protocol witness table accessor for type StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL> and conformance StateContainerGesture<A, B, C>(&lazy protocol witness table cache variable for type _MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()> and conformance _MapGesture<A, B>, (void (*)(uint64_t))type metadata accessor for _MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>);
    unint64_t v0 = type metadata accessor for SizeGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>>);
    }
  }
}

void type metadata accessor for _MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>()
{
  if (!lazy cache variable for type metadata for _MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>)
  {
    type metadata accessor for OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>();
    lazy protocol witness table accessor for type StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL> and conformance StateContainerGesture<A, B, C>(&lazy protocol witness table cache variable for type OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>> and conformance OpenURLGesture<A>, (void (*)(uint64_t))type metadata accessor for OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>);
    unint64_t v0 = type metadata accessor for _MapGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>);
    }
  }
}

void type metadata accessor for OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>()
{
  if (!lazy cache variable for type metadata for OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>)
  {
    type metadata accessor for ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>();
    lazy protocol witness table accessor for type StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL> and conformance StateContainerGesture<A, B, C>(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>);
    unint64_t v0 = type metadata accessor for OpenURLGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>);
    }
  }
}

void type metadata accessor for ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>)
  {
    type metadata accessor for StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>();
    type metadata accessor for SingleTapGesture<TappableSpatialEvent>(255, &lazy cache variable for type metadata for SingleTapGesture<TappableSpatialEvent>, (uint64_t)&type metadata for TappableSpatialEvent, (uint64_t)&protocol witness table for TappableSpatialEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
    lazy protocol witness table accessor for type StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL> and conformance StateContainerGesture<A, B, C>(&lazy protocol witness table cache variable for type StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL> and conformance StateContainerGesture<A, B, C>, (void (*)(uint64_t))type metadata accessor for StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>);
    lazy protocol witness table accessor for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>);
    }
  }
}

void type metadata accessor for StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>()
{
  if (!lazy cache variable for type metadata for StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>)
  {
    type metadata accessor for State #1 in ResolvedStyledText.gesture.getter();
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for StateContainerGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>);
    }
  }
}

uint64_t type metadata accessor for State #1 in ResolvedStyledText.gesture.getter()
{
  uint64_t result = type metadata singleton initialization cache for State #1 in ResolvedStyledText.gesture.getter;
  if (!type metadata singleton initialization cache for State #1 in ResolvedStyledText.gesture.getter) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>;
  if (!lazy protocol witness table cache variable for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>)
  {
    type metadata accessor for SingleTapGesture<TappableSpatialEvent>(255, &lazy cache variable for type metadata for SingleTapGesture<TappableSpatialEvent>, (uint64_t)&type metadata for TappableSpatialEvent, (uint64_t)&protocol witness table for TappableSpatialEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL> and conformance StateContainerGesture<A, B, C>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for OpenURLGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_245D1FDB4()
{
  return objectdestroy_41Tm();
}

uint64_t objectdestroy_41Tm()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ResolvedStyledText.gesture.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in closure #1 in ResolvedStyledText.gesture.getter(a1, a2, *(void **)(v3 + 16), *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 24), a3, *(double *)(v3 + 32), *(double *)(v3 + 40));
}

uint64_t sub_245D1FE1C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in MapGesture.init(_:)@<X0>(uint64_t a1@<X8>)
{
  return specialized closure #1 in MapGesture.init(_:)(*(void (**)(char *))(v1 + 16), a1);
}

uint64_t outlined copy of GesturePhase<TappableSpatialEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 2 || a9 == 1) {
    return swift_retain();
  }
  if (!a9) {
    return outlined copy of SpatialEvent?(result, a2, a3);
  }
  return result;
}

uint64_t outlined consume of GesturePhase<TappableSpatialEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 2 || a9 == 1) {
    return swift_release();
  }
  if (!a9) {
    return outlined consume of HitTestableEvent?(result, a2, a3);
  }
  return result;
}

uint64_t outlined init with take of AnyElement?(uint64_t a1, uint64_t a2)
{
  _s10Foundation3URLVSgMaTm_0(0, &lazy cache variable for type metadata for AnyElement?, (uint64_t (*)(uint64_t))type metadata accessor for AnyElement, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type External<Time> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<Time> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<Time> and conformance External<A>)
  {
    type metadata accessor for AnyGesture<()>(255, &lazy cache variable for type metadata for External<Time>, (uint64_t)&type metadata for Time, MEMORY[0x263F288C8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<Time> and conformance External<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type External<_GestureInputs.InheritedPhase> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<_GestureInputs.InheritedPhase> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<_GestureInputs.InheritedPhase> and conformance External<A>)
  {
    type metadata accessor for AnyGesture<()>(255, &lazy cache variable for type metadata for External<_GestureInputs.InheritedPhase>, (uint64_t)&type metadata for _GestureInputs.InheritedPhase, MEMORY[0x263F288C8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<_GestureInputs.InheritedPhase> and conformance External<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type External<UInt32> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<UInt32> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<UInt32> and conformance External<A>)
  {
    type metadata accessor for AnyGesture<()>(255, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>, MEMORY[0x263F8E8F8], MEMORY[0x263F288C8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<UInt32> and conformance External<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>)
  {
    type metadata accessor for AnyGesture<()>(255, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, MEMORY[0x263F288C8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>);
  }
  return result;
}

void type metadata accessor for SingleTapGesture<TappableSpatialEvent>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for State #1 in ResolvedStyledText.gesture.getter(uint64_t *a1, uint64_t *a2)
{
  _s10Foundation3URLVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(v4 - 8);
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for State #1 in ResolvedStyledText.gesture.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for State #1 in ResolvedStyledText.gesture.getter(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    _s10Foundation3URLVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for State #1 in ResolvedStyledText.gesture.getter(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    _s10Foundation3URLVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *initializeWithTake for State #1 in ResolvedStyledText.gesture.getter(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    _s10Foundation3URLVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for State #1 in ResolvedStyledText.gesture.getter(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    _s10Foundation3URLVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for State #1 in ResolvedStyledText.gesture.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245D209B0);
}

uint64_t sub_245D209B0(uint64_t a1, uint64_t a2)
{
  _s10Foundation3URLVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for State #1 in ResolvedStyledText.gesture.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245D20A60);
}

uint64_t sub_245D20A60(uint64_t a1, uint64_t a2)
{
  _s10Foundation3URLVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void type metadata completion function for State #1 in ResolvedStyledText.gesture.getter()
{
  _s10Foundation3URLVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata completion function for OpenURLGesture()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for OpenURLGesture(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 35 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)v11;
    uint64_t v13 = *(void *)(v11 + 8);
    uint64_t v14 = *(void *)(v11 + 16);
    uint64_t v15 = *(void *)(v11 + 24);
    char v16 = *(unsigned char *)(v11 + 34);
    __int16 v17 = *(_WORD *)(v11 + 32);
    outlined copy of Environment<OpenURLAction>.Content(*(void *)v11, v13, v14, v15, v17, v16);
    *(void *)unint64_t v10 = v12;
    *(void *)(v10 + 8) = v13;
    *(void *)(v10 + 16) = v14;
    *(void *)(v10 + 24) = v15;
    *(_WORD *)(v10 + 32) = v17;
    *(unsigned char *)(v10 + 34) = v16;
  }
  return v4;
}

uint64_t destroy for OpenURLGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v8 = *(void *)(v4 + 24);
  char v9 = *(unsigned char *)(v4 + 34);
  __int16 v10 = *(_WORD *)(v4 + 32);

  return outlined consume of Environment<OpenURLAction>.Content(v5, v6, v7, v8, v10, v9);
}

uint64_t initializeWithCopy for OpenURLGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = *(void *)(v8 + 24);
  char v13 = *(unsigned char *)(v8 + 34);
  __int16 v14 = *(_WORD *)(v8 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v8, v10, v11, v12, v14, v13);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  *(void *)(v7 + 16) = v11;
  *(void *)(v7 + 24) = v12;
  *(_WORD *)(v7 + 32) = v14;
  *(unsigned char *)(v7 + 34) = v13;
  return a1;
}

uint64_t assignWithCopy for OpenURLGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = *(void *)(v8 + 24);
  char v13 = *(unsigned char *)(v8 + 34);
  __int16 v14 = *(_WORD *)(v8 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v8, v10, v11, v12, v14, v13);
  uint64_t v15 = *(void *)v7;
  uint64_t v16 = *(void *)(v7 + 8);
  uint64_t v17 = *(void *)(v7 + 16);
  uint64_t v18 = *(void *)(v7 + 24);
  char v19 = *(unsigned char *)(v7 + 34);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  *(void *)(v7 + 16) = v11;
  *(void *)(v7 + 24) = v12;
  __int16 v20 = *(_WORD *)(v7 + 32);
  *(_WORD *)(v7 + 32) = v14;
  *(unsigned char *)(v7 + 34) = v13;
  outlined consume of Environment<OpenURLAction>.Content(v15, v16, v17, v18, v20, v19);
  return a1;
}

uint64_t initializeWithTake for OpenURLGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  int v9 = *(_DWORD *)(v8 + 31);
  long long v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_DWORD *)(v7 + 31) = v9;
  return a1;
}

uint64_t assignWithTake for OpenURLGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  __int16 v8 = *(_WORD *)(v7 + 32);
  unint64_t v9 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  char v10 = *(unsigned char *)(v7 + 34);
  uint64_t v11 = *(void *)v9;
  uint64_t v12 = *(void *)(v9 + 8);
  uint64_t v13 = *(void *)(v9 + 16);
  uint64_t v14 = *(void *)(v9 + 24);
  char v15 = *(unsigned char *)(v9 + 34);
  long long v16 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v7;
  *(_OWORD *)(v9 + 16) = v16;
  __int16 v17 = *(_WORD *)(v9 + 32);
  *(_WORD *)(v9 + 32) = v8;
  *(unsigned char *)(v9 + 34) = v10;
  outlined consume of Environment<OpenURLAction>.Content(v11, v12, v13, v14, v17, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for OpenURLGesture(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 35;
    unsigned int v9 = (a2 - v7 + 0xFFFFFF) >> (8 * v8);
    if (((v6 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = *((unsigned __int8 *)a1 + v8);
        if (!*((unsigned char *)a1 + v8)) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)((char *)a1 + v8);
        if (*(unsigned __int16 *)((char *)a1 + v8)) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245D2122CLL);
      case 4:
        int v13 = *(_DWORD *)((char *)a1 + v8);
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 << 24) - 0x1000000;
        if (((v6 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0)
        {
          int v17 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        }
        else
        {
          int v15 = 0;
          int v17 = *(_DWORD *)a1;
        }
        return v7 + (v17 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v16 = *(unsigned __int8 *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 34);
  if (v16 > 1) {
    return (v16 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for OpenURLGesture(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 35;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            if (v7 < 0xFE)
            {
              unint64_t v20 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if (a2 > 0xFE)
              {
                *(void *)(v20 + 16) = 0;
                *(void *)(v20 + 24) = 0;
                *(unsigned char *)(v20 + 34) = 0;
                *(_WORD *)(v20 + 32) = 0;
                *(void *)unint64_t v20 = a2 - 255;
                *(void *)(v20 + 8) = 0;
              }
              else
              {
                *(unsigned char *)(v20 + 34) = -(char)a2;
              }
            }
            else
            {
              char v19 = *(void (**)(void))(v6 + 56);
              v19();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 0xFFFFFF) >> v11;
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = v16 >> v11;
  bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 35);
  if (v10 == 3) {
    int v18 = v17 + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 == 3)
  {
    *(_WORD *)a1 = v16;
    a1[2] = BYTE2(v16);
  }
  else
  {
    *(_DWORD *)a1 = v16;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x245D21460);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in OpenURLGesture<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_245D214CC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for OpenURLGesture() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3, v1);
  uint64_t v4 = v3 + v2[11];
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), *(_WORD *)(v4 + 32), *(unsigned char *)(v4 + 34));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OpenURLGesture.body.getter(uint64_t a1)
{
  type metadata accessor for OpenURLGesture();

  return closure #1 in OpenURLGesture.body.getter(a1);
}

uint64_t sub_245D21658()
{
  type metadata accessor for _EndedGesture();

  return swift_getWitnessTable();
}

unint64_t specialized MutableCollection.swapAt(_:_:)(unint64_t result, unint64_t a2)
{
  if (result != a2)
  {
    unint64_t v5 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = *(void **)v3;
      unint64_t v6 = *(void *)(*(void *)v3 + 16);
      if (v6 > result)
      {
        unint64_t v2 = a2;
        if (v6 > a2)
        {
          long long v7 = *(_OWORD *)&v4[2 * result + 4];
          long long v8 = *(_OWORD *)&v4[2 * a2 + 4];
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if (result) {
            goto LABEL_6;
          }
          goto LABEL_13;
        }
LABEL_12:
        __break(1u);
LABEL_13:
        uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
        uint64_t v4 = (void *)result;
LABEL_6:
        if (v4[2] <= v5)
        {
          __break(1u);
        }
        else
        {
          *(_OWORD *)&v4[2 * v5 + 4] = v8;
          *(void *)uint64_t v3 = v4;
          if (v4[2] > v2)
          {
            *(_OWORD *)&v4[2 * v2 + 4] = v7;
            *(void *)uint64_t v3 = v4;
            return result;
          }
        }
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

{
  unint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  if (result != a2)
  {
    char v11 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = *(void **)v3;
      unsigned int v12 = *(void *)(*(void *)v3 + 16);
      if (v12 > result)
      {
        unint64_t v2 = a2;
        if (v12 > a2)
        {
          unsigned int v13 = (uint64_t)&v4[5 * result + 4];
          unint64_t v20 = *(void *)v13;
          char v19 = *(unsigned char *)(v13 + 8);
          int v18 = *(void *)(v13 + 16);
          unsigned int v17 = *(unsigned char *)(v13 + 24);
          uint64_t v9 = *(void *)(v13 + 32);
          int v14 = (uint64_t)&v4[5 * a2 + 4];
          unint64_t v10 = *(void *)v14;
          unint64_t v5 = *(unsigned char *)(v14 + 8);
          unint64_t v6 = *(void *)(v14 + 16);
          long long v7 = *(unsigned char *)(v14 + 24);
          long long v8 = *(void *)(v14 + 32);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if (result)
          {
LABEL_6:
            int v15 = (uint64_t)&v4[5 * v11 + 4];
            *(void *)int v15 = v10;
            *(unsigned char *)(v15 + 8) = v5;
            *(void *)(v15 + 16) = v6;
            *(unsigned char *)(v15 + 24) = v7;
            *(void *)(v15 + 32) = v8;
            unsigned int v16 = (uint64_t)&v4[5 * v2 + 4];
            *(void *)unsigned int v16 = v20;
            *(unsigned char *)(v16 + 8) = v19;
            *(void *)(v16 + 16) = v18;
            *(unsigned char *)(v16 + 24) = v17;
            *(void *)(v16 + 32) = v9;
            *(void *)uint64_t v3 = v4;
            return result;
          }
LABEL_11:
          uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
          uint64_t v4 = (void *)result;
          goto LABEL_6;
        }
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

{
  unint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (result != a2)
  {
    long long v7 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = *(void **)v3;
      long long v8 = *(void *)(*(void *)v3 + 16);
      if (v8 > result)
      {
        unint64_t v2 = a2;
        if (v8 > a2)
        {
          unint64_t v5 = v4[result + 4];
          unint64_t v6 = v4[a2 + 4];
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if (result)
          {
LABEL_6:
            v4[v7 + 4] = v6;
            v4[v2 + 4] = v5;
            *(void *)uint64_t v3 = v4;
            return result;
          }
LABEL_11:
          uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
          uint64_t v4 = (void *)result;
          goto LABEL_6;
        }
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  long long *v5;
  uint64_t v6;
  long long *v7;
  uint64_t v8;
  unint64_t v9;
  long long *v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long *v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  void *v30;
  _OWORD *v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  _OWORD *v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  long long v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  _OWORD v69[11];
  unsigned char v70[28];
  _OWORD v71[11];
  _OWORD v72[2];
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  _OWORD v84[2];
  long long v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  long long v95;
  _OWORD v96[3];

  if (result != a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v2 = *(void **)v3;
      uint64_t v9 = *(void *)(*(void *)v3 + 16);
      if (v9 > result)
      {
        uint64_t v4 = a2;
        unint64_t v5 = &v73;
        long long v8 = 26 * result;
        unint64_t v10 = (long long *)&v2[26 * result + 4];
        uint64_t v73 = *v10;
        char v11 = v10[1];
        unsigned int v12 = v10[2];
        unsigned int v13 = v10[4];
        CGRect v76 = v10[3];
        uint64_t v77 = v13;
        uint64_t v74 = v11;
        CGRect v75 = v12;
        int v14 = v10[5];
        int v15 = v10[6];
        unsigned int v16 = v10[8];
        uint64_t v80 = v10[7];
        long long v81 = v16;
        uint64_t v78 = v14;
        uint64_t v79 = v15;
        unsigned int v17 = v10[9];
        int v18 = v10[10];
        char v19 = v10[11];
        *(_OWORD *)((char *)v84 + 12) = *(long long *)((char *)v10 + 188);
        long long v83 = v18;
        v84[0] = v19;
        char v82 = v17;
        if (v9 > a2)
        {
          long long v7 = &v85;
          unint64_t v6 = 26 * a2;
          unint64_t v20 = (long long *)&v2[26 * a2 + 4];
          long long v85 = *v20;
          uint64_t v21 = v20[1];
          uint64_t v22 = v20[2];
          long long v23 = v20[4];
          long long v88 = v20[3];
          int v89 = v23;
          unint64_t v86 = v21;
          long long v87 = v22;
          unsigned int v24 = v20[5];
          char v25 = v20[6];
          char v26 = v20[8];
          uint64_t v92 = v20[7];
          uint64_t v93 = v26;
          char v90 = v24;
          uint64_t v91 = v25;
          int v27 = v20[9];
          int v28 = v20[10];
          id v29 = v20[11];
          *(_OWORD *)((char *)v96 + 12) = *(long long *)((char *)v20 + 188);
          char v95 = v28;
          v96[0] = v29;
          uint64_t v94 = v27;
          outlined retain of LayoutGestureBox.Child((uint64_t)&v73);
          outlined retain of LayoutGestureBox.Child((uint64_t)&v85);
          if (swift_isUniquelyReferenced_nonNull_native()) {
            goto LABEL_6;
          }
          goto LABEL_12;
        }
LABEL_11:
        __break(1u);
LABEL_12:
        unint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
LABEL_6:
        unint64_t v30 = v2 + 4;
        char v31 = &v2[v8 + 4];
        v69[0] = *v31;
        uint64_t v32 = v31[1];
        char v33 = v31[2];
        char v34 = v31[4];
        v69[3] = v31[3];
        v69[4] = v34;
        v69[1] = v32;
        v69[2] = v33;
        long long v35 = v31[5];
        uint64_t v36 = v31[6];
        int v37 = v31[8];
        v69[7] = v31[7];
        v69[8] = v37;
        v69[5] = v35;
        v69[6] = v36;
        uint64_t v38 = v31[9];
        int v39 = v31[10];
        uint64_t v40 = v31[11];
        *(_OWORD *)&v70[12] = *(_OWORD *)((char *)v31 + 188);
        v69[10] = v39;
        *(_OWORD *)uint64_t v70 = v40;
        v69[9] = v38;
        *char v31 = v85;
        uint64_t v41 = v86;
        uint64_t v42 = v87;
        uint64_t v43 = v89;
        v31[3] = v88;
        v31[4] = v43;
        v31[1] = v41;
        v31[2] = v42;
        uint64_t v44 = v90;
        uint64_t v45 = v91;
        uint64_t v46 = v93;
        v31[7] = v92;
        v31[8] = v46;
        v31[5] = v44;
        v31[6] = v45;
        uint64_t v47 = v94;
        uint64_t v48 = v95;
        uint64_t v49 = v96[0];
        *(_OWORD *)((char *)v31 + 188) = *(long long *)((char *)v7 + 188);
        v31[10] = v48;
        v31[11] = v49;
        v31[9] = v47;
        uint64_t result = outlined release of LayoutGestureBox.Child((uint64_t)v69);
        if (v2[2] <= v4)
        {
          __break(1u);
        }
        else
        {
          uint64_t v50 = &v30[v6];
          v71[0] = *(_OWORD *)&v30[v6];
          id v51 = *(_OWORD *)&v30[v6 + 2];
          id v52 = *(_OWORD *)&v30[v6 + 4];
          char v53 = *(_OWORD *)&v30[v6 + 8];
          v71[3] = *(_OWORD *)&v30[v6 + 6];
          v71[4] = v53;
          v71[1] = v51;
          v71[2] = v52;
          uint64_t v54 = *(_OWORD *)&v30[v6 + 10];
          long long v55 = *(_OWORD *)&v30[v6 + 12];
          uint64_t v56 = *(_OWORD *)&v30[v6 + 16];
          v71[7] = *(_OWORD *)&v30[v6 + 14];
          v71[8] = v56;
          v71[5] = v54;
          v71[6] = v55;
          long long v57 = *(_OWORD *)&v30[v6 + 18];
          char v58 = *(_OWORD *)&v30[v6 + 20];
          uint64_t v59 = *(_OWORD *)&v30[v6 + 22];
          *(_OWORD *)((char *)v72 + 12) = *(_OWORD *)((char *)&v30[v6 + 23] + 4);
          v71[10] = v58;
          v72[0] = v59;
          v71[9] = v57;
          *uint64_t v50 = v73;
          uint64_t v60 = v74;
          uint64_t v61 = v75;
          uint64_t v62 = v77;
          v50[3] = v76;
          v50[4] = v62;
          v50[1] = v60;
          v50[2] = v61;
          uint64_t v63 = v78;
          uint64_t v64 = v79;
          uint64_t v65 = v81;
          v50[7] = v80;
          v50[8] = v65;
          uint64_t v50[5] = v63;
          v50[6] = v64;
          int v66 = v82;
          uint64_t v67 = v83;
          uint64_t v68 = v84[0];
          *(_OWORD *)((char *)v50 + 188) = *(long long *)((char *)v5 + 188);
          v50[10] = v67;
          v50[11] = v68;
          v50[9] = v66;
          uint64_t result = outlined release of LayoutGestureBox.Child((uint64_t)v71);
          *(void *)uint64_t v3 = v2;
        }
        return result;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

Swift::Void __swiftcall MultiViewResponder.updateChildren(_:)(Swift::tuple_value_OpaquePointer_changed_Bool a1)
{
  if (a1.changed)
  {
    int64_t v1 = swift_bridgeObjectRetain();
    MultiViewResponder.children.setter(v1);
  }
}

uint64_t MultiViewResponder.children.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MultiViewResponder.containsGlobalPoints(_:cacheKey:options:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = v4[9];
  if (!v7 || (uint64_t v8 = v4[6], (v8 & 0x100000000) != 0) || (a2 & 0x100000000) != 0 || v8 != a2)
  {
    closure #1 in MultiViewResponder.containsGlobalPoints(_:cacheKey:options:)((uint64_t)v4, a1, a2 | ((HIDWORD(a2) & 1) << 32), *a3, (uint64_t)v14);
    uint64_t v11 = v14[0];
    uint64_t v12 = v14[1];
    uint64_t v13 = v14[2];
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    v4[6] = a2 & 0x1FFFFFFFFLL;
    v4[7] = v11;
    v4[8] = v12;
    v4[9] = v13;
    *a4 = v11;
    a4[1] = v12;
    a4[2] = v13;
  }
  else
  {
    uint64_t v9 = v4[8];
    *a4 = v4[7];
    a4[1] = v9;
    a4[2] = v7;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t MultiViewResponder.bindEvent(_:)(uint64_t a1)
{
  swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 40);
  if (v3 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      uint64_t v5 = 4;
      do
      {
        uint64_t v6 = v5 - 4;
        if ((v3 & 0xC000000000000001) != 0)
        {
          uint64_t v7 = MEMORY[0x24C523D60](v5 - 4, v3);
          uint64_t v8 = v5 - 3;
          if (__OFADD__(v6, 1)) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v7 = *(void *)(v3 + 8 * v5);
          swift_retain();
          uint64_t v8 = v5 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(a1);
        swift_release();
        if (v9) {
          goto LABEL_12;
        }
        ++v5;
      }
      while (v8 != v4);
    }
  }
  uint64_t v9 = 0;
LABEL_12:
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t MultiViewResponder.addContentPath(to:kind:in:observer:)(uint64_t a1, uint64_t *a2, uint64_t a3, int64_t *a4, uint64_t a5)
{
  uint64_t v11 = *a2;
  if (!a4) {
    goto LABEL_15;
  }
  uint64_t v6 = (int64_t *)(v5 + 80);
  swift_beginAccess();
  uint64_t v12 = *(void *)(v5 + 80);
  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13)
  {
    swift_unknownObjectRetain();
LABEL_10:
    v24[1] = a5;
    swift_unknownObjectWeakInit();
    int64_t v16 = *v6;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v6 = v16;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
  uint64_t v14 = v12 + 32;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v15 = MEMORY[0x24C527E00](v14);
    if (v15)
    {
      uint64_t v6 = (int64_t *)v15;
      swift_unknownObjectRelease();
      if (v6 == a4) {
        break;
      }
    }
    v14 += 16;
    if (!--v13)
    {
      swift_bridgeObjectRelease();
      uint64_t v6 = (int64_t *)(v5 + 80);
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  while (1)
  {
    swift_endAccess();
    swift_unknownObjectRelease();
LABEL_15:
    swift_beginAccess();
    uint64_t v20 = *(void *)(v5 + 40);
    if ((unint64_t)v20 >> 62)
    {
      if (v20 < 0) {
        uint64_t v5 = *(void *)(v5 + 40);
      }
      else {
        uint64_t v5 = v20 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain();
      int64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      if (!v16) {
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      int64_t v16 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v16) {
        return swift_bridgeObjectRelease();
      }
    }
    if (v16 >= 1) {
      break;
    }
    __break(1u);
LABEL_29:
    int64_t v16 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, v16);
    *uint64_t v6 = v16;
LABEL_11:
    unint64_t v19 = *(void *)(v16 + 16);
    unint64_t v18 = *(void *)(v16 + 24);
    if (v19 >= v18 >> 1)
    {
      int64_t v16 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v16);
      *uint64_t v6 = v16;
    }
    *(void *)(v16 + 16) = v19 + 1;
    outlined init with take of ContentPathObservers.Observer((uint64_t)v24, v16 + 16 * v19 + 32);
  }
  uint64_t v21 = 0;
  do
  {
    if ((v20 & 0xC000000000000001) != 0)
    {
      uint64_t v22 = MEMORY[0x24C523D60](v21, v20);
    }
    else
    {
      uint64_t v22 = *(void *)(v20 + 8 * v21 + 32);
      swift_retain();
    }
    ++v21;
    v24[0] = v11;
    (*(void (**)(uint64_t, void *, uint64_t, int64_t *, uint64_t))(*(void *)v22 + 176))(a1, v24, a3, a4, a5);
    swift_release();
  }
  while (v16 != v21);
  return swift_bridgeObjectRelease();
}

uint64_t MultiViewResponder.addObserver(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void **)(v2 + 80);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v2 + 80);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = v6 + 32;
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v9 = MEMORY[0x24C527E00](v8);
      if (v9)
      {
        uint64_t v10 = v9;
        swift_unknownObjectRelease();
        if (v10 == a1)
        {
          swift_bridgeObjectRelease();
          return swift_endAccess();
        }
      }
      v8 += 16;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  uint64_t v17 = a2;
  swift_unknownObjectWeakInit();
  uint64_t v11 = *v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v5 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, (unint64_t)v11);
    *uint64_t v5 = v11;
  }
  unint64_t v14 = v11[2];
  unint64_t v13 = v11[3];
  if (v14 >= v13 >> 1)
  {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, (unint64_t)v11);
    *uint64_t v5 = v11;
  }
  uint64_t v11[2] = v14 + 1;
  outlined init with take of ContentPathObservers.Observer((uint64_t)v16, (uint64_t)&v11[2 * v14 + 4]);
  return swift_endAccess();
}

uint64_t MultiViewResponder.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 40) = MEMORY[0x263F8EE78];
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(void *)(v0 + 80) = v1;
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  uint64_t v2 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v2 + 200);
  uint64_t v3 = *(void *)(v2 + 208);
  swift_retain();
  swift_release();
  swift_beginAccess();
  *(void *)(v0 + 24) = v3;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t MultiViewResponder.init()()
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 40) = MEMORY[0x263F8EE78];
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(void *)(v0 + 80) = v1;
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  uint64_t v2 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v2 + 200);
  uint64_t v3 = *(void *)(v2 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v0 + 24) = v3;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

void (*MultiViewResponder.children.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = *(void *)(v1 + 40);
  swift_bridgeObjectRetain();
  return MultiViewResponder.children.modify;
}

void MultiViewResponder.children.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  int64_t v3 = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    int64_t v4 = swift_bridgeObjectRetain();
    MultiViewResponder.children.setter(v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    MultiViewResponder.children.setter(v3);
  }

  free(v2);
}

Swift::Void __swiftcall MultiViewResponder.childrenDidChange()()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 80);
  *(void *)(v0 + 80) = MEMORY[0x263F8EE78];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      outlined init with copy of ContentPathObservers.Observer(v3, (uint64_t)v6);
      if (MEMORY[0x24C527E00](v6))
      {
        uint64_t v4 = v7;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(v0, ObjectType, v4);
        swift_unknownObjectRelease();
      }
      outlined destroy of ContentPathObservers.Observer((uint64_t)v6);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  swift_endAccess();
}

Swift::Void __swiftcall MultiViewResponder.resetGesture()()
{
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 40);
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2) {
    goto LABEL_10;
  }
LABEL_3:
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        uint64_t v4 = MEMORY[0x24C523D60](i, v1);
      }
      else
      {
        uint64_t v4 = *(void *)(v1 + 8 * i + 32);
        swift_retain();
      }
      (*(void (**)(void))(*(void *)v4 + 120))();
      swift_release();
    }
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t closure #1 in MultiViewResponder.containsGlobalPoints(_:cacheKey:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = (uint64_t *)(a1 + 40);
  swift_beginAccess();
  unint64_t v11 = *(void *)(a1 + 40);
  if (!(v11 >> 62))
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v22 = v10;
    if (v12) {
      goto LABEL_3;
    }
LABEL_12:
    uint64_t v15 = 0;
    double v16 = 0.0;
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v21 = *v22;
    *(void *)a5 = v15;
    *(double *)(a5 + 8) = v16;
    *(void *)(a5 + 16) = v21;
    return swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v12 = result;
  uint64_t v22 = v10;
  if (!result) {
    goto LABEL_12;
  }
LABEL_3:
  if (v12 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    double v16 = 0.0;
    uint64_t v17 = a3 | ((HIDWORD(a3) & 1) << 32);
    do
    {
      if ((v11 & 0xC000000000000001) != 0)
      {
        uint64_t v18 = MEMORY[0x24C523D60](v14, v11);
      }
      else
      {
        uint64_t v18 = *(void *)(v11 + 8 * v14 + 32);
        swift_retain();
      }
      ++v14;
      uint64_t v23 = a4;
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(void *)v18 + 168))(v24, a2, v17, &v23);
      swift_release();
      uint64_t v19 = v24[0];
      double v20 = *(double *)&v24[1];
      swift_bridgeObjectRelease();
      v15 |= v19;
      if (v16 <= v20) {
        double v16 = v20;
      }
    }
    while (v12 != v14);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t MultiViewResponder.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t MultiViewResponder.deinit()
{
  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MultiViewResponder.__deallocating_deinit()
{
  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance UnsafeMutableBufferProjectionPointer<A, B>;
}

{
  uint64_t (*v6)();

  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance UnsafeMutableBufferProjectionPointer<A, B>;
}

unint64_t type metadata accessor for EventGraphHost()
{
  unint64_t result = lazy cache variable for type metadata for EventGraphHost;
  if (!lazy cache variable for type metadata for EventGraphHost)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for EventGraphHost);
  }
  return result;
}

uint64_t outlined destroy of ContentPathObservers.Observer(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for MultiViewResponder()
{
  return self;
}

uint64_t method lookup function for MultiViewResponder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MultiViewResponder);
}

uint64_t dispatch thunk of MultiViewResponder.childrenDidChange()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v5 = *a2;
  if ((*a2 & 0x20) != 0) {
    unsigned int v6 = 0;
  }
  else {
    unsigned int v6 = a1;
  }
  BOOL v7 = (*a2 & 0x20 | a1 & 0x100000000) != 0;
  if ((v5 & 0x20) == 0 && (a1 & 0x100000000) != 0)
  {
    BOOL v7 = 0;
    unsigned int v6 = ++static ViewResponder.hitTestKey;
  }
  if ((v5 & 4) != 0)
  {
    v13[0] = v5;
    return ViewResponder.singlePointHitTest(globalPoint:cacheKey:options:)(v6 | ((unint64_t)v7 << 32), v13, a3, a4);
  }
  else
  {
    hitPoints(point:radius:)(a3, a4, a5);
    uint64_t v11 = v5;
    unint64_t v12 = 0;
    LOBYTE(v13[0]) = v7;
    ViewResponder.hitTest(globalPoints:weights:mask:cacheKey:options:)(v8, v9, &v12, v6 | ((unint64_t)v7 << 32), (unint64_t *)&v11, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v13[0];
  }
}

id HitTestBindingResponder.__allocating_init(inputs:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 80);
  uint64_t v9 = *(void *)a1;
  int v10 = v3;
  uint64_t v11 = v4;
  long long v6 = *(_OWORD *)(a1 + 40);
  long long v12 = *(_OWORD *)(a1 + 24);
  long long v13 = v6;
  long long v14 = *(_OWORD *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 72);
  int v16 = v5;
  id v7 = specialized DefaultLayoutViewResponder.init(inputs:)(&v9, v2);
  swift_release();
  return v7;
}

uint64_t HitTestBindingResponder.bindEvent(_:)(uint64_t a1)
{
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v14);
  HitTestableEvent.init(_:)((uint64_t)v14, (uint64_t)v15);
  uint64_t v3 = v16;
  if (v16 == 1
    || (uint64_t v5 = v15[0],
        uint64_t v4 = v15[1],
        v15[0] = 0,
        v14[0] = 1,
        uint64_t v6 = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)(0x100000000, v15, v17, v18, v19),
        outlined consume of HitTestableEvent?(v5, v4, v3),
        !v6))
  {
    swift_beginAccess();
    unint64_t v7 = *(void *)(v1 + 40);
    if (v7 >> 62) {
      goto LABEL_17;
    }
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v9 = 4;
      while (1)
      {
        uint64_t v10 = v9 - 4;
        if ((v7 & 0xC000000000000001) == 0) {
          break;
        }
        uint64_t v11 = MEMORY[0x24C523D60](v9 - 4, v7);
        uint64_t v12 = v9 - 3;
        if (__OFADD__(v10, 1)) {
          goto LABEL_16;
        }
LABEL_11:
        uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 96))(a1);
        swift_release();
        if (v6) {
          goto LABEL_14;
        }
        ++v9;
        if (v12 == v8) {
          goto LABEL_13;
        }
      }
      uint64_t v11 = *(void *)(v7 + 8 * v9);
      swift_retain();
      uint64_t v12 = v9 - 3;
      if (!__OFADD__(v10, 1)) {
        goto LABEL_11;
      }
LABEL_16:
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
    }
LABEL_13:
    uint64_t v6 = 0;
LABEL_14:
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t HitTestBindingResponder.__allocating_init(inputs:viewSubgraph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 80);
  uint64_t v11 = *(void *)a1;
  int v12 = v5;
  uint64_t v13 = v6;
  long long v8 = *(_OWORD *)(a1 + 40);
  long long v14 = *(_OWORD *)(a1 + 24);
  long long v15 = v8;
  long long v16 = *(_OWORD *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 72);
  int v18 = v7;
  uint64_t v9 = specialized DefaultLayoutViewResponder.init(inputs:viewSubgraph:)(&v11, a2, v4);
  swift_release();
  return v9;
}

uint64_t static ViewResponder.hitTestKey.getter()
{
  return static ViewResponder.hitTestKey;
}

double static ViewResponder.minOpacityForHitTest.getter()
{
  return 0.001;
}

uint64_t static ViewResponder.nextHitTestKey()()
{
  return ++static ViewResponder.hitTestKey;
}

uint64_t ViewResponder.singlePointHitTest(globalPoint:cacheKey:options:)(unint64_t a1, uint64_t *a2, double a3, double a4)
{
  uint64_t v8 = *a2;
  if ((*(double (**)(void))(*(void *)v4 + 152))() < 0.001) {
    return 0;
  }
  _sSay7SwiftUI13ViewResponderCGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x263F8E0F8]);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_2461B9DC0;
  *(double *)(v9 + 32) = a3;
  *(double *)(v9 + 40) = a4;
  uint64_t v10 = HIDWORD(a1) & 1;
  uint64_t v11 = a1;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 168))(&v24);
  swift_bridgeObjectRelease();
  unint64_t v12 = v25;
  if ((v24 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v25 >> 62)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    unint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_8;
    }
LABEL_34:
    uint64_t v21 = swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v15) {
    goto LABEL_34;
  }
LABEL_8:
  uint64_t v23 = v4;
  uint64_t v13 = 0;
  double v16 = 0.0;
  uint64_t v10 = v11 | (v10 << 32);
  while (!__OFSUB__(v15--, 1))
  {
    if ((v12 & 0xC000000000000001) != 0)
    {
      uint64_t v4 = MEMORY[0x24C523D60](v15, v12);
    }
    else
    {
      if ((v15 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      if (v15 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_32;
      }
      uint64_t v4 = *(void *)(v12 + 32 + 8 * v15);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(void *)v4 + 160))())
    {
      uint64_t v24 = v8;
      uint64_t v18 = ViewResponder.singlePointHitTest(globalPoint:cacheKey:options:)(v10, &v24, a3, a4);
      if (v18)
      {
        uint64_t v11 = v18;
        double v20 = v19;
        if (v16 >= v19)
        {
          swift_release();
        }
        else if (v13)
        {
          swift_release();
          if (v11 != v13) {
            double v16 = v20;
          }
          uint64_t v4 = v13;
          if (v11 != v13) {
            uint64_t v13 = v11;
          }
        }
        else
        {
          double v16 = v19;
          uint64_t v13 = v18;
        }
      }
    }
    swift_release();
    if (!v15) {
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_28:
  uint64_t v21 = swift_bridgeObjectRelease();
  uint64_t v4 = v23;
  if (!v13 || v16 <= 0.0)
  {
LABEL_35:
    char v22 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 160))(v21);
    swift_release();
    if (v22)
    {
      swift_retain();
      return v4;
    }
    return 0;
  }
  return v13;
}

void hitPoints(point:radius:)(double a1, double a2, double a3)
{
  double v3 = fabs(a3);
  if (v3 > 1.0) {
    double v4 = v3;
  }
  else {
    double v4 = 1.0;
  }
  if (v4 <= 60.0)
  {
    double v5 = fmax(v4 / 6.0, 4.0);
  }
  else
  {
    double v5 = 10.0;
    double v4 = 60.0;
  }
  double v6 = ceil(v4 / v5);
  if ((~*(void *)&v6 & 0x7FF0000000000000) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    return;
  }
  if ((uint64_t)v6 >= 6) {
    uint64_t v7 = 6;
  }
  else {
    uint64_t v7 = (uint64_t)v6;
  }
  _sSay7SwiftUI13ViewResponderCGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x263F8E0F8]);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_2461B9DC0;
  *(double *)(v8 + 32) = a1;
  *(double *)(v8 + 40) = a2;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Double>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_2461B9DC0;
  *(void *)(v9 + 32) = 0x4038000000000000;
  if (v7 < 1) {
    goto LABEL_30;
  }
  uint64_t v11 = (void *)v9;
  if (v7 != 1)
  {
    v12.f64[0] = a1;
    v12.f64[1] = a2;
    uint64_t v13 = 1;
    uint64_t v14 = 4;
    float64x2_t v36 = v12;
    *(double *)&long long v10 = v5;
    while (v13 != v7)
    {
      ++v13;
      long long v38 = v10;
      __double2 v17 = __sincos_stret(6.28318531 / (double)v14);
      *(double *)&long long v16 = v17.__cosval;
      *(double *)&long long v15 = v17.__sinval;
      float64x2_t v18 = v36;
      long long v10 = v38;
      uint64_t v19 = v14;
      float64x2_t v20 = (float64x2_t)xmmword_2461BCA80;
      do
      {
        unint64_t v22 = *(void *)(v8 + 16);
        unint64_t v21 = *(void *)(v8 + 24);
        if (v22 >= v21 >> 1)
        {
          long long v31 = v16;
          long long v33 = v15;
          float64x2_t v29 = v20;
          int v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, (void *)v8);
          float64x2_t v20 = v29;
          long long v16 = v31;
          long long v15 = v33;
          float64x2_t v18 = v36;
          long long v10 = v38;
          uint64_t v8 = (uint64_t)v27;
        }
        *(void *)(v8 + 16) = v22 + 1;
        *(float64x2_t *)(v8 + 16 * v22 + 32) = vaddq_f64(vmulq_n_f64(v20, *(double *)&v10), v18);
        unint64_t v24 = v11[2];
        unint64_t v23 = v11[3];
        if (v24 >= v23 >> 1)
        {
          long long v32 = v16;
          long long v34 = v15;
          float64x2_t v30 = v20;
          int v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v11);
          float64x2_t v20 = v30;
          long long v16 = v32;
          long long v15 = v34;
          float64x2_t v18 = v36;
          long long v10 = v38;
          uint64_t v11 = v28;
        }
        uint64_t v11[2] = v24 + 1;
        *(double *)&v11[v24 + 4] = 24.0 / (double)v14;
        float64x2_t v25 = vmulq_n_f64(v20, *(double *)&v16);
        float64x2_t v26 = vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), *(double *)&v15);
        *(void *)&v20.f64[0] = *(_OWORD *)&vsubq_f64(v25, v26);
        v20.f64[1] = vaddq_f64(v25, v26).f64[1];
        --v19;
      }
      while (v19);
      v14 += 4;
      *(double *)&long long v10 = v5 + *(double *)&v10;
      if (v13 == v7) {
        return;
      }
    }
    __break(1u);
    goto LABEL_27;
  }
}

void ViewResponder.hitTest(globalPoints:weights:mask:cacheKey:options:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, unint64_t a4@<X3>, unint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v10 = *a3;
  unint64_t v11 = *a5;
  double v12 = (*(double (**)(void))(*(void *)v6 + 152))();
  if (v12 < 0.001) {
    goto LABEL_19;
  }
  unint64_t v39 = v11;
  uint64_t v13 = HIDWORD(a4) & 1;
  uint64_t v14 = a4;
  long long v15 = (*(void *(**)(uint64_t *__return_ptr, uint64_t, unint64_t, unint64_t *))(*(void *)v6 + 168))(&v40, a1, a4 | (unint64_t)(v13 << 32), &v39);
  v16.n128_f64[0] = v41;
  unint64_t v17 = v42;
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18)
  {
    unint64_t v19 = 0;
    double v20 = 0.0;
    unint64_t v21 = v10;
    unint64_t v22 = v10;
    while (v19 <= 0x3F)
    {
      uint64_t v23 = 1 << v19;
      if (((1 << v19) & v10) != 0 || ((1 << v19) & v40) == 0) {
        goto LABEL_5;
      }
      if (v19 >= *(void *)(a2 + 16))
      {
        __break(1u);
LABEL_58:
        swift_bridgeObjectRetain();
        unint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        long long v15 = (void *)swift_bridgeObjectRelease();
        if (!v25) {
          goto LABEL_59;
        }
        goto LABEL_22;
      }
      double v20 = v20 + *(double *)(a2 + 32 + 8 * v19);
      if (v12 <= 0.5) {
        v22 &= ~v23;
      }
      else {
        v22 |= v23;
      }
LABEL_6:
      if (v18 == ++v19) {
        goto LABEL_17;
      }
    }
    uint64_t v23 = 0;
LABEL_5:
    v21 |= v23;
    goto LABEL_6;
  }
  double v20 = 0.0;
  unint64_t v21 = v10;
  unint64_t v22 = v10;
LABEL_17:
  double v12 = v41 * (v12 * v20);
  if (v12 == 0.0)
  {
    swift_bridgeObjectRelease();
LABEL_19:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
  unint64_t v10 = v11;
  if (v42 >> 62) {
    goto LABEL_58;
  }
  unint64_t v25 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v25)
  {
LABEL_59:
    long long v15 = (void *)swift_bridgeObjectRelease();
    goto LABEL_52;
  }
LABEL_22:
  unint64_t v33 = v22;
  uint64_t v34 = v6;
  long long v35 = a6;
  uint64_t v36 = 0;
  unint64_t v22 = v17 & 0xC000000000000001;
  a6 = (uint64_t *)(v17 + 32);
  double v26 = 0.0;
  uint64_t v27 = v14 | (v13 << 32);
  double v28 = 0.0;
  while (1)
  {
    if (__OFSUB__(v25--, 1))
    {
      __break(1u);
LABEL_44:
      long long v15 = (void *)swift_bridgeObjectRelease();
      unint64_t v10 = v36;
      if (v36)
      {
        v16.n128_f64[0] = v26 * 1.2;
        uint64_t v6 = v34;
        a6 = v35;
        unint64_t v22 = v33;
        if (v26 * 1.2 >= 8.0) {
          goto LABEL_51;
        }
        if (v28 < 8.0) {
          goto LABEL_52;
        }
        goto LABEL_56;
      }
LABEL_49:
      uint64_t v6 = v34;
      a6 = v35;
      unint64_t v22 = v33;
      goto LABEL_52;
    }
    if (!v22) {
      break;
    }
    uint64_t v6 = MEMORY[0x24C523D60](v25, v17, v16);
LABEL_31:
    if ((*(uint64_t (**)(void))(*(void *)v6 + 160))())
    {
      unint64_t v39 = v21;
      unint64_t v38 = v10;
      ViewResponder.hitTest(globalPoints:weights:mask:cacheKey:options:)(&v40, a1, a2, &v39, v27, &v38);
      uint64_t v30 = v40;
      if (v40)
      {
        unint64_t v21 = v42;
        double v31 = v41;
        if (v26 < v41)
        {
          if (v28 >= v41)
          {
            swift_release();
            long long v15 = (void *)swift_release();
            double v26 = v31;
          }
          else
          {
            long long v15 = (void *)swift_release();
            uint64_t v6 = v36;
            if (v36)
            {
              long long v15 = (void *)swift_release();
              if (v30 != v36) {
                double v26 = v28;
              }
            }
            else
            {
              double v26 = v28;
            }
            double v28 = v31;
            uint64_t v36 = v30;
          }
          goto LABEL_24;
        }
        swift_release();
      }
    }
    long long v15 = (void *)swift_release();
LABEL_24:
    if (!v25) {
      goto LABEL_44;
    }
  }
  if ((v25 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_49;
  }
  if (v25 < *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v6 = a6[v25];
    swift_retain();
    goto LABEL_31;
  }
  __break(1u);
LABEL_51:
  if (v16.n128_f64[0] <= v28)
  {
LABEL_56:
    *a6 = v10;
    *((double *)a6 + 1) = v12;
    a6[2] = v22;
    return;
  }
LABEL_52:
  char v32 = (*(uint64_t (**)(void *))(*(void *)v6 + 160))(v15);
  swift_release();
  if ((v32 & 1) == 0) {
    goto LABEL_19;
  }
  *a6 = v6;
  *((double *)a6 + 1) = v12;
  a6[2] = v22;

  swift_retain();
}

ValueMetadata *type metadata accessor for HitTestBindingModifier()
{
  return &type metadata for HitTestBindingModifier;
}

void *type metadata accessor for HitTestBindingFilter()
{
  return &unk_26FA614F0;
}

void DefaultLayoutViewResponder.__allocating_init()()
{
}

void DefaultLayoutViewResponder.makeGesture(inputs:)(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[5];
  v28[4] = a1[4];
  v28[5] = v5;
  *(_OWORD *)float64x2_t v29 = a1[6];
  *(_OWORD *)&v29[12] = *(long long *)((char *)a1 + 108);
  long long v6 = a1[1];
  v28[0] = *a1;
  v28[1] = v6;
  long long v7 = a1[3];
  _OWORD v28[2] = a1[2];
  void v28[3] = v7;
  specialized _GestureInputs.makeDefaultOutputs<A>()((uint64_t)v25);
  uint64_t v8 = v25[0];
  uint64_t v9 = v25[1];
  uint64_t v10 = v26;
  int v11 = v27;
  if (!AGSubgraphIsValid()) {
    goto LABEL_11;
  }
  uint64_t v24 = v8;
  id v12 = (id)AGSubgraphGetCurrent();
  if (!v12)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v13 = v12;
  char v14 = v29[24];
  id v15 = (id)AGSubgraphGetGraph();
  uint64_t v16 = AGSubgraphCreate();

  unint64_t v17 = *(void **)(v3 + 184);
  *(void *)(v3 + 184) = v16;

  if (!*(void *)(v3 + 184))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  AGSubgraphAddChild2();
  if (!*(void *)(v3 + 184))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  AGSubgraphAddChild();
  if ((v14 & 0x10) == 0) {
    goto LABEL_9;
  }
  id v18 = (id)AGSubgraphGetGraph();
  uint64_t v19 = AGSubgraphCreate();

  double v20 = *(void **)(v3 + 192);
  *(void *)(v3 + 192) = v19;

  if (!*(void *)(v3 + 184))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*(void *)(v3 + 192))
  {
    AGSubgraphAddChild2();
LABEL_9:
    unint64_t v21 = *(void **)(v3 + 184);
    if (v21)
    {
      id v22 = v21;
      AGGraphClearUpdate();
      id v23 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      LODWORD(v8) = v24;
      closure #1 in DefaultLayoutViewResponder.makeGesture(inputs:)(v3, v28, v24 | (v9 << 32), v10);
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
LABEL_11:
      *(_DWORD *)a2 = v8;
      *(_DWORD *)(a2 + 4) = v9;
      *(void *)(a2 + 8) = v10;
      *(_DWORD *)(a2 + 16) = v11;
      return;
    }
    goto LABEL_15;
  }
LABEL_17:
  __break(1u);
}

Swift::Void __swiftcall DefaultLayoutViewResponder.resetGesture()()
{
  uint64_t v1 = v0[25];
  v0[25] = 0;
  v0[26] = 0;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
  uint64_t v2 = (void *)v0[23];
  v0[23] = 0;

  uint64_t v3 = (void *)v0[24];
  v0[24] = 0;

  swift_beginAccess();
  unint64_t v4 = v0[5];
  if (!(v4 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  if (!v5) {
    goto LABEL_10;
  }
LABEL_3:
  if (v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = MEMORY[0x24C523D60](i, v4);
      }
      else
      {
        uint64_t v7 = *(void *)(v4 + 8 * i + 32);
        swift_retain();
      }
      (*(void (**)(void))(*(void *)v7 + 120))();
      swift_release();
    }
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t DefaultLayoutResponderFilter.children.getter()
{
  type metadata accessor for [ViewResponder](0);
  AGGraphGetValue();

  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DefaultLayoutResponderFilter.children : DefaultLayoutResponderFilter@<X0>(void *a1@<X8>)
{
  type metadata accessor for [ViewResponder](0);
  *a1 = *(void *)AGGraphGetValue();

  return swift_bridgeObjectRetain();
}

uint64_t DefaultLayoutResponderFilter.children.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t (*DefaultLayoutResponderFilter.children.modify(uint64_t a1))(void *a1)
{
  *(_DWORD *)(a1 + 24) = *v1;
  type metadata accessor for [ViewResponder](0);
  *(void *)(a1 + 16) = v3;
  *(void *)a1 = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  return DefaultLayoutResponderFilter.children.modify;
}

uint64_t DefaultLayoutResponderFilter.children.modify(void *a1)
{
  a1[1] = *a1;
  AGGraphSetValue();

  return swift_bridgeObjectRelease();
}

uint64_t DefaultLayoutResponderFilter.$children.getter()
{
  return *v0;
}

uint64_t DefaultLayoutResponderFilter.$children.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*DefaultLayoutResponderFilter.$children.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *v1;
  return DefaultLayoutResponderFilter.$children.modify;
}

uint64_t DefaultLayoutResponderFilter.$children.modify(uint64_t result)
{
  **(_DWORD **)unint64_t result = *(_DWORD *)(result + 8);
  return result;
}

uint64_t DefaultLayoutResponderFilter.responder.getter()
{
  return swift_retain();
}

uint64_t DefaultLayoutResponderFilter.init(children:responder:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = result;
  *(void *)(a3 + 8) = a2;
  return result;
}

Swift::Void __swiftcall DefaultLayoutResponderFilter.updateValue()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  type metadata accessor for [ViewResponder](0);
  uint64_t Value = (int64_t *)AGGraphGetValue();
  if (v3)
  {
    int64_t v4 = *Value;
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter(v4);
    swift_bridgeObjectRelease();
  }
  if (!AGGraphGetOutputValue())
  {
    _ss23_ContiguousArrayStorageCyyXlGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_2461BE2A0;
    *(void *)(v5 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
}

uint64_t DefaultLayoutViewResponder.inputs.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 104);
  uint64_t v4 = *(void *)(v1 + 128);
  uint64_t v5 = *(void *)(v1 + 136);
  int v6 = *(_DWORD *)(v1 + 168);
  *(void *)a1 = *(void *)(v1 + 88);
  *(_DWORD *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 112);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 144);
  *(void *)(a1 + 72) = *(void *)(v1 + 160);
  *(_DWORD *)(a1 + 80) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

id DefaultLayoutViewResponder.viewSubgraph.getter()
{
  return *(id *)(v0 + 176);
}

id DefaultLayoutViewResponder.__allocating_init(inputs:)(uint64_t *a1)
{
  uint64_t v2 = swift_allocObject();
  id v3 = specialized DefaultLayoutViewResponder.init(inputs:)(a1, v2);
  swift_release();
  return v3;
}

uint64_t DefaultLayoutViewResponder.__allocating_init(inputs:viewSubgraph:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = specialized DefaultLayoutViewResponder.init(inputs:viewSubgraph:)(a1, a2, v4);
  swift_release();
  return v5;
}

uint64_t DefaultLayoutViewResponder.init(inputs:viewSubgraph:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = specialized DefaultLayoutViewResponder.init(inputs:viewSubgraph:)(a1, a2, v2);
  swift_release();
  return v3;
}

uint64_t specialized _GestureInputs.makeDefaultOutputs<A>()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v3 = *(_DWORD *)(v1 + 120);
  uint64_t v9 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _ss23_ContiguousArrayStorageCyyXlGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for DefaultRule<GesturePhase<()>>();
  lazy protocol witness table accessor for type DefaultRule<GestureDebug.Data> and conformance DefaultRule<A>(&lazy protocol witness table cache variable for type DefaultRule<GesturePhase<()>> and conformance DefaultRule<A>, (void (*)(uint64_t))type metadata accessor for DefaultRule<GesturePhase<()>>);
  int v4 = Attribute.init<A>(body:value:flags:update:)();
  if ((v3 & 8) != 0)
  {
    uint64_t v9 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for DefaultRule<GestureDebug.Data>();
    lazy protocol witness table accessor for type DefaultRule<GestureDebug.Data> and conformance DefaultRule<A>((unint64_t *)&lazy protocol witness table cache variable for type DefaultRule<GestureDebug.Data> and conformance DefaultRule<A>, (void (*)(uint64_t))type metadata accessor for DefaultRule<GestureDebug.Data>);
    int v5 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    int v5 = *MEMORY[0x263F288F8];
  }
  uint64_t result = PreferencesInputs.makeIndirectOutputs()((uint64_t)&v9);
  uint64_t v7 = v9;
  int v8 = v10;
  *(_DWORD *)a1 = v4;
  *(_DWORD *)(a1 + 4) = v5;
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v8;
  return result;
}

uint64_t closure #1 in DefaultLayoutViewResponder.makeGesture(inputs:)(uint64_t a1, long long *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  *(void *)&long long v34 = a1;
  _ss23_ContiguousArrayStorageCyyXlGMaTm_0(0, &lazy cache variable for type metadata for External<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<DefaultLayoutGesture> and conformance External<A>();
  swift_retain();
  unsigned int v7 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  uint64_t v8 = AGCreateWeakAttribute();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  uint64_t v10 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = partial apply for closure #1 in closure #1 in DefaultLayoutViewResponder.makeGesture(inputs:);
  *(void *)(a1 + 208) = v9;
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v10);
  long long v12 = a2[5];
  long long v31 = a2[4];
  long long v32 = v12;
  v33[0] = a2[6];
  *(_OWORD *)((char *)v33 + 12) = *(long long *)((char *)a2 + 108);
  long long v13 = a2[1];
  long long v27 = *a2;
  long long v28 = v13;
  long long v14 = a2[3];
  long long v29 = a2[2];
  long long v30 = v14;
  int v15 = *(_DWORD *)(a1 + 96);
  uint64_t v16 = *(void *)(a1 + 104);
  uint64_t v17 = *(void *)(a1 + 128);
  uint64_t v18 = *(void *)(a1 + 136);
  int v19 = *(_DWORD *)(a1 + 168);
  *(void *)&long long v34 = *(void *)(a1 + 88);
  DWORD2(v34) = v15;
  *(_OWORD *)&v35[8] = *(_OWORD *)(a1 + 112);
  *(void *)long long v35 = v16;
  *(void *)&v35[24] = v17;
  *(void *)uint64_t v36 = v18;
  *(_OWORD *)&v36[8] = *(_OWORD *)(a1 + 144);
  *(void *)&v36[24] = *(void *)(a1 + 160);
  LODWORD(v37) = v19;
  double v20 = *(void **)(a1 + 192);
  if (v20)
  {
    id v21 = *(id *)(a1 + 192);
LABEL_5:
    outlined retain of _GestureInputs((uint64_t)a2);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v23 = v20;
    _GestureInputs.mergeViewInputs(_:viewSubgraph:)((uint64_t *)&v34, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    *(_OWORD *)&v36[16] = v31;
    long long v37 = v32;
    v38[0] = v33[0];
    *(_OWORD *)((char *)v38 + 12) = *(_OWORD *)((char *)v33 + 12);
    long long v34 = v27;
    *(_OWORD *)long long v35 = v28;
    *(_OWORD *)&v35[16] = v29;
    *(_OWORD *)uint64_t v36 = v30;
    outlined retain of _GestureInputs((uint64_t)&v34);
    specialized static LayoutGesture._makeGesture(gesture:inputs:)(v7, (uint64_t)&v34, (double *)v25);
    outlined release of _GestureInputs((uint64_t)&v34);
    specialized _GestureOutputs.overrideDefaultValues(_:)(v25[0], v25[1], v26, a3, a4);
    outlined release of _GestureInputs((uint64_t)&v34);
    return swift_bridgeObjectRelease();
  }
  id v22 = *(void **)(a1 + 184);
  if (v22)
  {
    id v21 = v22;
    double v20 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in DefaultLayoutViewResponder.makeGesture(inputs:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  specialized static Update.begin()();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #4 in MatchedGeometryScope.frame<A>(index:for:view:);
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = one-time initialization token for actions;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  int v5 = static Update.actions;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  uint64_t v8 = &v5[2 * v7];
  v8[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v8[5] = v3;
  static Update.actions = v5;
  swift_bridgeObjectRelease();
  static Update.end()();

  return swift_release();
}

void DefaultLayoutViewResponder.init()()
{
}

uint64_t DefaultLayoutViewResponder.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  uint64_t v1 = *(void *)(v0 + 200);

  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
}

uint64_t protocol witness for AnyGestureResponder.inputs.getter in conformance GestureResponder<A>@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 104);
  uint64_t v4 = *(void *)(v1 + 128);
  uint64_t v5 = *(void *)(v1 + 136);
  int v6 = *(_DWORD *)(v1 + 168);
  *(void *)a1 = *(void *)(v1 + 88);
  *(_DWORD *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 112);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 144);
  *(void *)(a1 + 72) = *(void *)(v1 + 160);
  *(_DWORD *)(a1 + 80) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

id protocol witness for AnyGestureContainingResponder.viewSubgraph.getter in conformance GestureResponder<A>()
{
  return *(id *)(v0 + 176);
}

uint64_t specialized DefaultLayoutViewResponder.init(inputs:viewSubgraph:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = a1[2];
  int v7 = *((_DWORD *)a1 + 20);
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_DWORD *)(a3 + 96) = v5;
  *(void *)(a3 + 104) = v6;
  long long v8 = *(_OWORD *)(a1 + 5);
  *(_OWORD *)(a3 + 112) = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a3 + 128) = v8;
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(a1 + 7);
  *(void *)(a3 + 160) = a1[9];
  *(_DWORD *)(a3 + 168) = v7;
  *(void *)(a3 + 176) = a2;
  uint64_t v9 = MEMORY[0x263F8EE78];
  *(void *)(a3 + 40) = MEMORY[0x263F8EE78];
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(void *)(a3 + 80) = v9;
  *(void *)(a3 + 88) = v4;
  *(void *)(a3 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  uint64_t v10 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v10 + 200);
  uint64_t v11 = *(void *)(v10 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(a3 + 24) = v11;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return a3;
}

unint64_t lazy protocol witness table accessor for type DefaultLayoutResponderFilter and conformance DefaultLayoutResponderFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultLayoutResponderFilter and conformance DefaultLayoutResponderFilter;
  if (!lazy protocol witness table cache variable for type DefaultLayoutResponderFilter and conformance DefaultLayoutResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultLayoutResponderFilter and conformance DefaultLayoutResponderFilter);
  }
  return result;
}

uint64_t sub_245D24A48()
{
  return AGGraphSetValue();
}

_DWORD *sub_245D24ABC@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_245D24AC8(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

ValueMetadata *type metadata accessor for DefaultLayoutResponderFilter()
{
  return &type metadata for DefaultLayoutResponderFilter;
}

uint64_t method lookup function for DefaultLayoutViewResponder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DefaultLayoutViewResponder);
}

uint64_t dispatch thunk of DefaultLayoutViewResponder.__allocating_init(inputs:)()
{
  return (*(uint64_t (**)(void))(v0 + 344))();
}

uint64_t dispatch thunk of DefaultLayoutViewResponder.__allocating_init(inputs:viewSubgraph:)()
{
  return (*(uint64_t (**)(void))(v0 + 352))();
}

unint64_t lazy protocol witness table accessor for type External<DefaultLayoutGesture> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<DefaultLayoutGesture> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<DefaultLayoutGesture> and conformance External<A>)
  {
    _ss23_ContiguousArrayStorageCyyXlGMaTm_0(255, &lazy cache variable for type metadata for External<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, MEMORY[0x263F288C8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<DefaultLayoutGesture> and conformance External<A>);
  }
  return result;
}

uint64_t sub_245D24BA0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in DefaultLayoutViewResponder.makeGesture(inputs:)()
{
  return closure #1 in closure #1 in DefaultLayoutViewResponder.makeGesture(inputs:)(*(void *)(v0 + 16));
}

uint64_t sub_245D24BB8()
{
  return swift_deallocObject();
}

uint64_t sub_245D24BC8()
{
  swift_release();

  return swift_deallocObject();
}

void _ss23_ContiguousArrayStorageCyyXlGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for DefaultRule<GesturePhase<()>>()
{
  if (!lazy cache variable for type metadata for DefaultRule<GesturePhase<()>>)
  {
    _ss23_ContiguousArrayStorageCyyXlGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    lazy protocol witness table accessor for type GesturePhase<()> and conformance GesturePhase<A>();
    unint64_t v0 = type metadata accessor for DefaultRule();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DefaultRule<GesturePhase<()>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type GesturePhase<()> and conformance GesturePhase<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type GesturePhase<()> and conformance GesturePhase<A>;
  if (!lazy protocol witness table cache variable for type GesturePhase<()> and conformance GesturePhase<A>)
  {
    _ss23_ContiguousArrayStorageCyyXlGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GesturePhase<()> and conformance GesturePhase<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type DefaultRule<GestureDebug.Data> and conformance DefaultRule<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for DefaultRule<GestureDebug.Data>()
{
  if (!lazy cache variable for type metadata for DefaultRule<GestureDebug.Data>)
  {
    unint64_t v0 = type metadata accessor for DefaultRule();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DefaultRule<GestureDebug.Data>);
    }
  }
}

uint64_t ViewResponder.init()()
{
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  uint64_t v1 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v1 + 200);
  uint64_t v2 = *(void *)(v1 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v0 + 24) = v2;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t ViewResponder.deinit()
{
  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  swift_weakDestroy();
  return v0;
}

uint64_t ViewResponder.gestureContainer.getter()
{
  return 0;
}

double ViewResponder.opacity.getter()
{
  return 1.0;
}

uint64_t ViewResponder.allowsHitTesting.getter()
{
  return 1;
}

uint64_t ViewResponder.children.getter()
{
  return MEMORY[0x263F8EE78];
}

uint64_t ViewResponder.description.getter()
{
  v1._countAndFlagsBits = 0x2865646F6ELL;
  v1._object = (void *)0xE500000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v0 + 200))();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0;
}

double ViewResponder.ContainsPointsCache.init()@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t static ViewResponder.ContainsPointsResult.passthrough(to:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = a1;
  return swift_bridgeObjectRetain();
}

void *ViewResponder.ContainsPointsResult.init(mask:priority:children:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(void *)a3 = *result;
  *(double *)(a3 + 8) = a4;
  *(void *)(a3 + 16) = a2;
  return result;
}

uint64_t ViewResponder.ContainsPointsCache.fetch(key:_:)@<X0>(uint64_t a1@<X0>, void (*a2)(void *__return_ptr)@<X1>, uint64_t *a3@<X8>)
{
  Swift::String v4 = v3;
  uint64_t v7 = v3[3];
  if (!v7 || (*v3 & 0x100000000) != 0 || (a1 & 0x100000000) != 0 || *v3 != a1)
  {
    a2(v13);
    uint64_t v10 = v13[0];
    uint64_t v11 = v13[1];
    uint64_t v12 = v13[2];
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *Swift::String v4 = a1 & 0x1FFFFFFFFLL;
    v4[1] = v10;
    _OWORD v4[2] = v11;
    v4[3] = v12;
    *a3 = v10;
    a3[1] = v11;
    a3[2] = v12;
  }
  else
  {
    uint64_t v8 = v3[2];
    *a3 = v3[1];
    a3[1] = v8;
    a3[2] = v7;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t ViewResponder.descriptionName.getter()
{
  return recursiveDescriptionName(_:)();
}

uint64_t ViewResponder.parent.setter(uint64_t a1)
{
  specialized ViewResponder.parent.setter(a1);

  return swift_release();
}

void static ViewResponder.ContainsPointsOptions.platformDefault.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static ViewRespondersKey.defaultValue.getter()
{
  return MEMORY[0x263F8EE78];
}

uint64_t static ViewRespondersKey._includesRemovedValues.getter()
{
  return 1;
}

uint64_t static ViewRespondersKey.reduce(value:nextValue:)(uint64_t a1, uint64_t (*a2)(void))
{
  unint64_t v2 = a2();
  return specialized Array.append<A>(contentsOf:)(v2);
}

uint64_t ViewResponder.host.getter()
{
  swift_beginAccess();
  return MEMORY[0x24C527E00](v0 + 16);
}

uint64_t ViewResponder.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  uint64_t v1 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v1 + 200);
  uint64_t v2 = *(void *)(v1 + 208);
  swift_retain();
  swift_release();
  swift_beginAccess();
  *(void *)(v0 + 24) = v2;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

void (*ViewResponder.parent.modify(void *a1))(uint64_t a1, char a2)
{
  Swift::String v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[9] = v1;
  swift_beginAccess();
  v3[8] = swift_weakLoadStrong();
  return ViewResponder.parent.modify;
}

void ViewResponder.parent.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 64);
  if (a2)
  {
    uint64_t v4 = swift_retain();
    specialized ViewResponder.parent.setter(v4);
    swift_release();
  }
  else
  {
    if (swift_weakLoadStrong())
    {
      swift_release();
      if (!v3)
      {
        uint64_t v5 = v2[9] + 16;
        swift_beginAccess();
        if (MEMORY[0x24C527E00](v5))
        {
          uint64_t v6 = *(void *)(v2[9] + 24);
          uint64_t ObjectType = swift_getObjectType();
          unint64_t v8 = type metadata accessor for EventGraphHost();
          (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v6 + 16))(v8, v8, ObjectType, v6);
          swift_unknownObjectRelease();
          if (v2[6])
          {
            uint64_t v9 = v2[9];
            uint64_t v10 = v2[7];
            uint64_t v11 = swift_getObjectType();
            (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v10);
            swift_unknownObjectRelease();
            uint64_t v12 = EventBindingManager.willRemoveResponder(_:)(v9);
            (*(void (**)(uint64_t))(*(void *)v9 + 120))(v12);
            swift_release();
          }
        }
      }
    }
    swift_weakAssign();
  }
  swift_release();

  free(v2);
}

double static ViewResponder.gestureContainmentPriority.getter()
{
  return 16.0;
}

uint64_t ViewResponder.ContainsPointsOptions.rawValue.getter()
{
  return *(void *)v0;
}

SwiftUI::ViewResponder::ContainsPointsOptions __swiftcall ViewResponder.ContainsPointsOptions.init(rawValue:)(SwiftUI::ViewResponder::ContainsPointsOptions rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

void static ViewResponder.ContainsPointsOptions.allowDisabledViews.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static ViewResponder.ContainsPointsOptions.useZDistanceAsPriority.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static ViewResponder.ContainsPointsOptions.disablePointCloudHitTesting.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static ViewResponder.ContainsPointsOptions.allow3DResponders.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static ViewResponder.ContainsPointsOptions.crossingServerIDBoundary.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static ViewResponder.ContainsPointsOptions.uncached.getter(void *a1@<X8>)
{
  *a1 = 32;
}

void ViewResponder.ContainsPointsResult.mask.getter(void *a1@<X8>)
{
  *a1 = *v1;
}

void *ViewResponder.ContainsPointsResult.mask.setter(void *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*ViewResponder.ContainsPointsResult.mask.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ViewResponder.ContainsPointsResult.priority.getter()
{
  return *(double *)(v0 + 8);
}

void ViewResponder.ContainsPointsResult.priority.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*ViewResponder.ContainsPointsResult.priority.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ViewResponder.ContainsPointsResult.children.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ViewResponder.ContainsPointsResult.children.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*ViewResponder.ContainsPointsResult.children.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void static ViewResponder.ContainsPointsResult.stop.getter(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = MEMORY[0x263F8EE78];
}

uint64_t ViewResponder.containsGlobalPoints(_:cacheKey:options:)@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 192))();
  *a1 = 0;
  a1[1] = 0;
  a1[2] = result;
  return result;
}

uint64_t ViewResponder.childCount.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 192))();
  if (v1 >> 62) {
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t ViewResponder.child(at:)(unint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 192))();
  if ((result & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x24C523D60](a1, result);
    goto LABEL_5;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10) > a1)
  {
    uint64_t v4 = *(void *)(result + 8 * a1 + 32);
    swift_retain();
LABEL_5:
    swift_bridgeObjectRelease();
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t ViewResponder.descriptionChildren.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 192))();
  uint64_t v2 = specialized _arrayForceCast<A, B>(_:)(v1);
  swift_bridgeObjectRelease();
  return v2;
}

Swift::Void __swiftcall ViewResponder.printTree(depth:)(Swift::Int depth)
{
  uint64_t v17 = indentString(_:)(depth);
  unint64_t v18 = v3;
  v4._countAndFlagsBits = 43;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v1 + 200))();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 32;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *))(*(void *)v1 + 216))(&v17);
  specialized static Log.eventDebug(_:)(v17, v18);
  uint64_t v10 = swift_bridgeObjectRelease();
  unint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 192))(v10);
  unint64_t v12 = v11;
  if (!(v11 >> 62))
  {
    uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  if (!v13) {
    goto LABEL_11;
  }
LABEL_3:
  BOOL v14 = __OFADD__(depth, 1);
  Swift::Int v15 = depth + 1;
  if (v14)
  {
    __break(1u);
  }
  else if (v13 >= 1)
  {
    for (uint64_t i = 0; i != v13; ++i)
    {
      if ((v12 & 0xC000000000000001) != 0) {
        MEMORY[0x24C523D60](i, v12);
      }
      else {
        swift_retain();
      }
      ViewResponder.printTree(depth:)(v15);
      swift_release();
    }
    goto LABEL_11;
  }
  __break(1u);
}

uint64_t indentString(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = result;
    if (result)
    {
      do
      {
        v2._countAndFlagsBits = 8316;
        v2._object = (void *)0xE200000000000000;
        String.append(_:)(v2);
        --v1;
      }
      while (v1);
      return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ViewResponder.__ivar_destroyer()
{
  outlined destroy of weak GestureGraphDelegate?(v0 + 16);

  return swift_weakDestroy();
}

uint64_t ViewResponder.__deallocating_deinit()
{
  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ViewResponder()
{
  return ViewResponder.description.getter();
}

uint64_t protocol witness for CustomRecursiveStringConvertible.descriptionName.getter in conformance ViewResponder()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t protocol witness for CustomRecursiveStringConvertible.descriptionChildren.getter in conformance ViewResponder()
{
  unint64_t v1 = (*(uint64_t (**)(void))(**(void **)v0 + 192))();
  uint64_t v2 = specialized _arrayForceCast<A, B>(_:)(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t static ViewGraph.eventGraphHost.getter()
{
  uint64_t v0 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  if (MEMORY[0x24C527E00](v0 + 200))
  {
    uint64_t v1 = *(void *)(v0 + 208);
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v3 = type metadata accessor for EventGraphHost();
    (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v1 + 16))(&v5, v3, v3, ObjectType, v1);
    swift_unknownObjectRelease();
    return v5;
  }
  else
  {
    swift_release();
    return 0;
  }
}

uint64_t specialized ViewResponder.parent.setter(uint64_t a1)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_release();
    if (!a1)
    {
      swift_beginAccess();
      if (MEMORY[0x24C527E00](v1 + 2))
      {
        uint64_t v3 = v1[3];
        uint64_t ObjectType = swift_getObjectType();
        unint64_t v5 = type metadata accessor for EventGraphHost();
        (*(void (**)(void *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v3 + 16))(v10, v5, v5, ObjectType, v3);
        swift_unknownObjectRelease();
        if (v10[0])
        {
          uint64_t v6 = v10[1];
          uint64_t v7 = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v6);
          swift_unknownObjectRelease();
          uint64_t v8 = EventBindingManager.willRemoveResponder(_:)((uint64_t)v1);
          (*(void (**)(uint64_t))(*v1 + 120))(v8);
          swift_release();
        }
      }
    }
  }
  return swift_weakAssign();
}

unint64_t lazy protocol witness table accessor for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions;
  if (!lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions;
  if (!lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions;
  if (!lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions;
  if (!lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions);
  }
  return result;
}

uint64_t sub_245D25F08@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x24C527E00](v4);
  uint64_t v6 = *(void *)(v3 + 24);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_245D25F64(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 24) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_245D25FC0@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_245D26010()
{
  uint64_t v0 = swift_retain();
  specialized ViewResponder.parent.setter(v0);

  return swift_release();
}

ValueMetadata *type metadata accessor for ViewRespondersKey()
{
  return &type metadata for ViewRespondersKey;
}

uint64_t method lookup function for ViewResponder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ViewResponder);
}

uint64_t dispatch thunk of ViewResponder.gestureContainer.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of ViewResponder.opacity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of ViewResponder.allowsHitTesting.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of ViewResponder.containsGlobalPoints(_:cacheKey:options:)(uint64_t a1, unint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v2 + 168))(a1, a2 | ((HIDWORD(a2) & 1) << 32));
}

uint64_t dispatch thunk of ViewResponder.addContentPath(to:kind:in:observer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of ViewResponder.addObserver(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of ViewResponder.children.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of ViewResponder.descriptionName.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of ViewResponder.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of ViewResponder.extendPrintTree(string:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t destroy for ViewResponder.ContainsPointsCache()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ViewResponder.ContainsPointsCache(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ViewResponder.ContainsPointsCache(uint64_t a1, int *a2)
{
  int v3 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)a1 = v3;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ViewResponder.ContainsPointsCache(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ViewResponder.ContainsPointsCache()
{
  return &type metadata for ViewResponder.ContainsPointsCache;
}

ValueMetadata *type metadata accessor for ViewResponder.ContainsPointsOptions()
{
  return &type metadata for ViewResponder.ContainsPointsOptions;
}

void *assignWithCopy for ViewResponder.ContainsPointsResult(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for ViewResponder.ContainsPointsResult(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ViewResponder.ContainsPointsResult()
{
  return &type metadata for ViewResponder.ContainsPointsResult;
}

uint64_t ContentPathChanges.rawValue.getter()
{
  return *v0;
}

uint64_t ContentPathChanges.rawValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*ContentPathChanges.rawValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentPathChanges.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ContentPathChanges.data.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ContentPathChanges.size.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static ContentPathChanges.transform.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t TrivialContentPathObserver.contentPathDidChange(for:changes:transform:finished:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a7 + 16))(a1, a6, a7);
  *a5 = 1;
  return result;
}

uint64_t TrivialContentPathObserver.respondersDidChange(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

unint64_t lazy protocol witness table accessor for type ContentPathChanges and conformance ContentPathChanges()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges;
  if (!lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges;
  if (!lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges;
  if (!lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges;
  if (!lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentPathChanges()
{
  return &type metadata for ContentPathChanges;
}

uint64_t dispatch thunk of ContentPathObserver.respondersDidChange(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ContentPathObserver.contentPathDidChange(for:changes:transform:finished:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

uint64_t dispatch thunk of TrivialContentPathObserver.contentPathDidChange(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t BlurStyle.init(radius:isOpaque:dither:hardEdges:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(double *)a3 = a4;
  *(unsigned char *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 9) = a2;
  return result;
}

BOOL BlurStyle.isIdentity.getter()
{
  return *v0 <= 0.0;
}

double BlurStyle.radius.getter()
{
  return *(double *)v0;
}

uint64_t (*BlurStyle.radius.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t BlurStyle.isOpaque.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t BlurStyle.isOpaque.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*BlurStyle.isOpaque.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t BlurStyle.dither.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t BlurStyle.dither.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 9) = result;
  return result;
}

uint64_t (*BlurStyle.dither.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL static BlurStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return ((*(double *)a1 != *(double *)a2) | ((*(unsigned char *)(a1 + 8) ^ *(unsigned char *)(a2 + 8)) | (*(unsigned char *)(a2 + 9) ^ *(unsigned char *)(a1 + 9))) & 1) == 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance BlurStyle(uint64_t a1, uint64_t a2)
{
  return ((*(double *)a1 != *(double *)a2) | ((*(unsigned char *)(a1 + 8) ^ *(unsigned char *)(a2 + 8)) | (*(unsigned char *)(a2 + 9) ^ *(unsigned char *)(a1 + 9))) & 1) == 0;
}

double BlurStyle.animatableData.getter()
{
  return *(double *)v0;
}

void BlurStyle.animatableData.setter(double a1)
{
  *uint64_t v1 = a1;
}

double (*BlurStyle.animatableData.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

void BlurStyle.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  double v4 = *(double *)v2;
  char v5 = *(unsigned char *)(v2 + 8);
  char v6 = *(unsigned char *)(v2 + 9);
  if (*(double *)v2 != 0.0)
  {
    double v7 = fabs(v4);
    if (v7 >= 65536.0) {
      Swift::UInt v8 = 9;
    }
    else {
      Swift::UInt v8 = 13;
    }
    ProtobufEncoder.encodeVarint(_:)(v8);
    if (v7 >= 65536.0)
    {
      uint64_t v11 = a1[1];
      int64_t v12 = v11 + 8;
      if (__OFADD__(v11, 8))
      {
        __break(1u);
      }
      else if (a1[2] >= v12)
      {
        a1[1] = v12;
        *(double *)(*a1 + v11) = v4;
        goto LABEL_12;
      }
      *(double *)ProtobufEncoder.growBufferSlow(to:)(v12) = v4;
    }
    else
    {
      uint64_t v9 = a1[1];
      int64_t v10 = v9 + 4;
      if (__OFADD__(v9, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&double v4 = v4;
        if (a1[2] >= v10)
        {
          a1[1] = v10;
          *(_DWORD *)(*a1 + v9) = LODWORD(v4);
          goto LABEL_12;
        }
      }
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v10) = LODWORD(v4);
    }
  }
LABEL_12:
  if (v5)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if (v6)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
}

unint64_t BlurStyle.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    BOOL v7 = 0;
    BOOL v8 = 0;
    double v9 = 0.0;
    while (1)
    {
      unint64_t result = v3[3];
      if (result)
      {
        unint64_t v11 = v3[4];
        if (v5 < v11) {
          goto LABEL_14;
        }
        if (v11 < v5) {
          goto LABEL_53;
        }
        v3[3] = 0;
      }
      unint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7) {
        goto LABEL_53;
      }
LABEL_14:
      unint64_t v12 = result >> 3;
      if (result >> 3 == 3)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_53;
          }
          unint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
            JUMPOUT(0x245D26B80);
          }
          unint64_t v15 = v3[1] + result;
          if (v6 < v15) {
            goto LABEL_53;
          }
          v3[3] = 24;
          v3[4] = v15;
        }
        unint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        BOOL v8 = result != 0;
      }
      else if (v12 == 2)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_53;
          }
          unint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_56;
          }
          unint64_t v16 = v3[1] + result;
          if (v6 < v16)
          {
LABEL_53:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          v3[3] = 16;
          v3[4] = v16;
        }
        unint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        BOOL v7 = result != 0;
      }
      else if (v12 == 1)
      {
        unint64_t v13 = result & 7;
        if (v13 == 5)
        {
          uint64_t v17 = (float *)v3[1];
          if (v6 < (unint64_t)(v17 + 1)) {
            goto LABEL_53;
          }
          float v18 = *v17;
          v3[1] = v17 + 1;
          double v9 = v18;
        }
        else
        {
          if (v13 == 2)
          {
            unint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_57;
            }
            BOOL v14 = (double *)v3[1];
            if (v6 < (unint64_t)v14 + result) {
              goto LABEL_53;
            }
            v3[3] = 9;
            v3[4] = (char *)v14 + result;
          }
          else
          {
            if (v13 != 1) {
              goto LABEL_53;
            }
            BOOL v14 = (double *)v3[1];
          }
          if (v6 < (unint64_t)(v14 + 1)) {
            goto LABEL_53;
          }
          double v9 = *v14;
          v3[1] = v14 + 1;
        }
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            unint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            break;
          case 1uLL:
            unint64_t v10 = v3[1] + 8;
            if (v6 >= v10) {
              goto LABEL_6;
            }
            goto LABEL_53;
          case 2uLL:
            unint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_58;
            }
            unint64_t v10 = v3[1] + result;
            if (v6 < v10) {
              goto LABEL_53;
            }
LABEL_6:
            v3[1] = v10;
            break;
          case 5uLL:
            unint64_t v10 = v3[1] + 4;
            if (v6 < v10) {
              goto LABEL_53;
            }
            goto LABEL_6;
          default:
            goto LABEL_53;
        }
      }
      unint64_t v5 = v3[1];
      unint64_t v6 = v3[2];
      if (v5 >= v6) {
        goto LABEL_4;
      }
    }
  }
  BOOL v8 = 0;
  BOOL v7 = 0;
  double v9 = 0.0;
LABEL_4:
  v3[3] = 0;
  *(double *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 9) = v8;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance BlurStyle(void *a1)
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance BlurStyle@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return BlurStyle.init(from:)(a1, a2);
}

double sub_245D26BD8@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_245D26BE4(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

uint64_t getEnumTagSinglePayload for BlurStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for BlurStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BlurStyle()
{
  return &type metadata for BlurStyle;
}

BOOL static Image.Interpolation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Image.Interpolation.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Image.Interpolation.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Image.interpolation(_:)(char *a1, uint64_t a2)
{
  char v3 = *a1;
  type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.InterpolationProvider>, (void (*)(void))lazy protocol witness table accessor for type Image.InterpolationProvider and conformance Image.InterpolationProvider);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 24) = v3;
  swift_retain();
  return v4;
}

unint64_t lazy protocol witness table accessor for type Image.InterpolationProvider and conformance Image.InterpolationProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.InterpolationProvider and conformance Image.InterpolationProvider;
  if (!lazy protocol witness table cache variable for type Image.InterpolationProvider and conformance Image.InterpolationProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.InterpolationProvider and conformance Image.InterpolationProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Image.InterpolationProvider and conformance Image.InterpolationProvider;
  if (!lazy protocol witness table cache variable for type Image.InterpolationProvider and conformance Image.InterpolationProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.InterpolationProvider and conformance Image.InterpolationProvider);
  }
  return result;
}

uint64_t Image.antialiased(_:)(char a1, uint64_t a2)
{
  type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.AntialiasedProvider>, (void (*)(void))lazy protocol witness table accessor for type Image.AntialiasedProvider and conformance Image.AntialiasedProvider);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 24) = a1;
  swift_retain();
  return v4;
}

void type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for ImageProviderBox();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Image.AntialiasedProvider and conformance Image.AntialiasedProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.AntialiasedProvider and conformance Image.AntialiasedProvider;
  if (!lazy protocol witness table cache variable for type Image.AntialiasedProvider and conformance Image.AntialiasedProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.AntialiasedProvider and conformance Image.AntialiasedProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Image.AntialiasedProvider and conformance Image.AntialiasedProvider;
  if (!lazy protocol witness table cache variable for type Image.AntialiasedProvider and conformance Image.AntialiasedProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.AntialiasedProvider and conformance Image.AntialiasedProvider);
  }
  return result;
}

void protocol witness for ImageProvider.resolve(in:) in conformance Image.InterpolationProvider(uint64_t a1@<X8>)
{
  char v3 = v1[8];
  (*(void (**)(void))(**(void **)v1 + 80))();
  *(unsigned char *)(a1 + 98) = v3;
  Image.Resolved.image.didset();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Image.InterpolationProvider(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = a1[8];
  int v3 = *(unsigned __int8 *)(a2 + 8);
  return (*(void *)a1 == *(void *)a2 || ((*(uint64_t (**)(void))(**(void **)a1 + 96))() & 1) != 0) && v2 == v3;
}

void protocol witness for ImageProvider.resolve(in:) in conformance Image.AntialiasedProvider(uint64_t a1@<X8>)
{
  char v3 = v1[8];
  (*(void (**)(void))(**(void **)v1 + 80))();
  *(unsigned char *)(a1 + 97) = v3;
  Image.Resolved.image.didset();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Image.AntialiasedProvider(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = a1[8];
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (*(void *)a1 == *(void *)a2 || ((*(uint64_t (**)(void))(**(void **)a1 + 96))() & 1) != 0) {
    return v2 ^ v3 ^ 1u;
  }
  else {
    return 0;
  }
}

uint64_t Image.Interpolation.protobufValue.getter()
{
  return *v0;
}

unint64_t Image.Interpolation.init(protobufValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 4;
  if (result < 4) {
    char v2 = result;
  }
  *a2 = v2;
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.Interpolation and conformance Image.Interpolation()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.Interpolation and conformance Image.Interpolation;
  if (!lazy protocol witness table cache variable for type Image.Interpolation and conformance Image.Interpolation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Interpolation and conformance Image.Interpolation);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Image.Interpolation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245D27218);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Image.Interpolation()
{
  return &type metadata for Image.Interpolation;
}

uint64_t assignWithCopy for Image.AntialiasedProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for Image.AntialiasedProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

void *type metadata accessor for Image.AntialiasedProvider()
{
  return &unk_26FA7D518;
}

void *type metadata accessor for Image.InterpolationProvider()
{
  return &unk_26FA7D658;
}

unint64_t instantiation function for generic protocol witness table for Image.AntialiasedProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Image.AntialiasedProvider and conformance Image.AntialiasedProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Image.InterpolationProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Image.InterpolationProvider and conformance Image.InterpolationProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

id _ShapeStyle_ResolverMode.bundle.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

void _ShapeStyle_ResolverMode.bundle.setter(void *a1)
{
  *id v1 = a1;
}

uint64_t (*_ShapeStyle_ResolverMode.bundle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_ResolverMode.foregroundLevels.getter()
{
  return *(unsigned __int16 *)(v0 + 8);
}

uint64_t _ShapeStyle_ResolverMode.foregroundLevels.setter(uint64_t result)
{
  *(_WORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_ShapeStyle_ResolverMode.foregroundLevels.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_ResolverMode.Options.rawValue.getter()
{
  return *v0;
}

uint64_t _ShapeStyle_ResolverMode.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static _ShapeStyle_ResolverMode.Options.foregroundPalette.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static _ShapeStyle_ResolverMode.Options.background.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static _ShapeStyle_ResolverMode.Options.multicolor.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void _ShapeStyle_ResolverMode.options.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 10);
}

unsigned char *_ShapeStyle_ResolverMode.options.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 10) = *result;
  return result;
}

uint64_t (*_ShapeStyle_ResolverMode.options.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_ResolverMode.init(foregroundLevels:options:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = *a2;
  *(void *)a3 = 0;
  *(_WORD *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 10) = v3;
  return result;
}

unsigned char *_ShapeStyle_ResolverMode.formUnion(_:)(unsigned char *result)
{
  unsigned int v2 = *((unsigned __int16 *)result + 4);
  char v3 = result[10];
  id v4 = *(id *)v1;
  if (!*(void *)v1)
  {
    id v4 = *(id *)result;
    unint64_t result = *(id *)result;
  }
  *(void *)uint64_t v1 = v4;
  unsigned int v5 = *(unsigned __int16 *)(v1 + 8);
  if (v2 > v5) {
    LOWORD(v5) = v2;
  }
  *(_WORD *)(v1 + 8) = v5;
  *(unsigned char *)(v1 + 10) |= v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for _ShapeStyle_ResolverMode(uint64_t a1, uint64_t a2)
{
  char v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_ResolverMode(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  unsigned int v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  return a1;
}

uint64_t assignWithTake for _ShapeStyle_ResolverMode(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_ResolverMode(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 11)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_ResolverMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 11) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 11) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_ResolverMode()
{
  return &type metadata for _ShapeStyle_ResolverMode;
}

ValueMetadata *type metadata accessor for _ShapeStyle_ResolverMode.Options()
{
  return &type metadata for _ShapeStyle_ResolverMode.Options;
}

uint64_t assignWithCopy for ShapeStyleResolver(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 13);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ShapeStyleResolver(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 13);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of _ShapeStyle_Pack.Fill.AnimatableData?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  if (a11 != 255) {
    return outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  }
  return result;
}

uint64_t outlined consume of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  if (a13)
  {
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static AnyEquatable.== infix(_:_:)(uint64_t a1, void *a2)
{
  if (*(void *)a1 == *a2) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)a1 + 80))() & 1;
  }
}

uint64_t AnyEquatable.hash.getter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

__n128 AnyEquatable.init(hash:)@<Q0>(__n128 *a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int32 v4 = a1[1].n128_u32[0];
  type metadata accessor for HashEquatableBox();
  uint64_t v5 = swift_allocObject();
  __n128 result = *a1;
  *(__n128 *)(v5 + 16) = *a1;
  *(_DWORD *)(v5 + 32) = v4;
  *a2 = v5;
  return result;
}

uint64_t type metadata accessor for HashEquatableBox()
{
  return self;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyEquatable(uint64_t a1, void *a2)
{
  if (*(void *)a1 == *a2) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)a1 + 80))() & 1;
  }
}

ValueMetadata *type metadata accessor for AnyEquatable()
{
  return &type metadata for AnyEquatable;
}

void AnyEquatableBox.isEqual(to:)()
{
}

void AnyEquatableBox.hash.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 1;
}

uint64_t _AnyEquatableBox.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    char v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t _AnyEquatableBox.hash.getter@<X0>(uint64_t a1@<X8>)
{
  return makeStableIDData<A>(from:)(v1 + *(void *)(*(void *)v1 + 120), *(void *)(*(void *)v1 + 104), a1);
}

BOOL HashEquatableBox.isEqual(to:)(uint64_t a1)
{
  if (*(__objc2_class **)a1 != _TtC7SwiftUIP33_5FED8E8437E1C5DEB2554486604823AB16HashEquatableBox) {
    return 0;
  }
  if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v1[1], *(int32x4_t *)(a1 + 16))), 0xFuLL)))) {
    return v1[2].i32[0] == *(_DWORD *)(a1 + 32);
  }
  return 0;
}

__n128 HashEquatableBox.hash.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int32 v2 = v1[2].n128_u32[0];
  __n128 result = v1[1];
  *a1 = result;
  a1[1].n128_u32[0] = v2;
  a1[1].n128_u8[4] = 0;
  return result;
}

uint64_t HashEquatableBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t getEnumTagSinglePayload for IntelligenceLightSourceLayer(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IntelligenceLightSourceLayer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245D29C40);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IntelligenceLightSourceLayer()
{
  return &type metadata for IntelligenceLightSourceLayer;
}

Class protocol witness for PlatformViewFactory.makePlatformView() in conformance IntelligenceLightSourceLayer()
{
  return CoreViewMakeIntelligenceLightSourceView(*(unsigned __int8 *)(v0 + 1));
}

uint64_t protocol witness for PlatformViewFactory.updatePlatformView(_:) in conformance IntelligenceLightSourceLayer(void *a1)
{
  return CoreViewUpdateIntelligenceLightSourceView(*a1, *(unsigned __int8 *)(v1 + 1));
}

ValueMetadata *protocol witness for AnyViewFactory.viewType.getter in conformance IntelligenceLightSourceLayer()
{
  return &type metadata for EmptyView;
}

int64_t ProtobufEncoder.cgFloatField(_:_:defaultValue:)(int64_t result, uint64_t a2, char a3, double a4)
{
  double v5 = a4;
  if ((a3 & 1) == 0 && *(double *)&a2 == a4) {
    return result;
  }
  double v6 = fabs(a4);
  uint64_t v7 = 5;
  if (v6 >= 65536.0) {
    uint64_t v7 = 1;
  }
  ProtobufEncoder.encodeVarint(_:)(v7 | (8 * result));
  if (v6 >= 65536.0)
  {
    uint64_t v9 = v4[1];
    int64_t v10 = v9 + 8;
    if (__OFADD__(v9, 8))
    {
      __break(1u);
    }
    else if (v4[2] >= v10)
    {
      v4[1] = v10;
      __n128 result = *v4 + v9;
LABEL_12:
      *(double *)__n128 result = v5;
      return result;
    }
    __n128 result = ProtobufEncoder.growBufferSlow(to:)(v10);
    goto LABEL_12;
  }
  uint64_t v8 = v4[1];
  __n128 result = v8 + 4;
  if (__OFADD__(v8, 4))
  {
    __break(1u);
  }
  else
  {
    *(float *)&double v5 = v5;
    if (v4[2] >= result)
    {
      v4[1] = result;
      *(_DWORD *)(*v4 + v8) = LODWORD(v5);
      return result;
    }
  }
  __n128 result = ProtobufEncoder.growBufferSlow(to:)(result);
  *(_DWORD *)__n128 result = LODWORD(v5);
  return result;
}

void ProtobufEncoder.enumField<A, B>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v25 = a8;
  uint64_t v24 = a7;
  uint64_t v26 = a2;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v15 = (char *)&v24 - v14;
  uint64_t v16 = *(void *)(a5 - 8);
  double v18 = MEMORY[0x270FA5388](v17);
  double v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, double))(a6 + 16))(a4, a6, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v15, a5);
    char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, a5);
    if (v22) {
      return;
    }
  }
  Swift::UInt v23 = (*(uint64_t (**)(uint64_t))(v25 + 8))(a5);
  ProtobufEncoder.encodeVarint(_:)(8 * v21);
  ProtobufEncoder.encodeVarint(_:)(v23);
}

uint64_t ProtobufEncoder.messageField<A, B>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a4, a6);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * v11) | 2);
    return ProtobufEncoder.encodeMessage<A>(_:)(a2, a5, a8);
  }
  return result;
}

uint64_t ProtobufEncoder.messageField<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
  ProtobufEncoder.encodeVarint(_:)((8 * v9) | 2);
  return ProtobufEncoder.encodeMessage<A>(_:)(a2, a4, a6);
}

int64_t ProtobufEncoder.cgFloatField<A>(_:_:defaultValue:)(double a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  int64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  if ((a4 & 1) != 0 || *(double *)&a3 != a1)
  {
    double v11 = fabs(a1);
    uint64_t v12 = 5;
    if (v11 >= 65536.0) {
      uint64_t v12 = 1;
    }
    ProtobufEncoder.encodeVarint(_:)(v12 | (8 * result));
    if (v11 >= 65536.0)
    {
      uint64_t v14 = v6[1];
      int64_t result = v14 + 8;
      if (__OFADD__(v14, 8))
      {
        __break(1u);
      }
      else if (v6[2] >= result)
      {
        v6[1] = result;
        *(double *)(*v6 + v14) = a1;
        return result;
      }
      int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
      *(double *)int64_t result = a1;
      return result;
    }
    uint64_t v13 = v6[1];
    int64_t result = v13 + 4;
    if (__OFADD__(v13, 4))
    {
      __break(1u);
    }
    else
    {
      *(float *)&a1 = a1;
      if (v6[2] >= result)
      {
        v6[1] = result;
        *(_DWORD *)(*v6 + v13) = LODWORD(a1);
        return result;
      }
    }
    int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
    *(_DWORD *)int64_t result = LODWORD(a1);
  }
  return result;
}

uint64_t ProtobufEncoder.stringField<A>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 16))(a6, a7);
  uint64_t v10 = result;
  if (a2 || a3 != 0xE000000000000000)
  {
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0) {
      return ProtobufEncoder.stringFieldAlways(_:_:)(v10);
    }
  }
  return result;
}

void ProtobufEncoder.uintField<A>(_:_:defaultValue:)(uint64_t a1, Swift::UInt a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  if ((a4 & 1) != 0 || a2 != a3)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * v9);
    ProtobufEncoder.encodeVarint(_:)(a2);
  }
}

uint64_t ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v5;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  ProtobufEncoder.encodeVarint(_:)((8 * v9) | 2);
  uint64_t v10 = *(void *)(v5 + 8);
  double v11 = *(void **)(v5 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    double v11 = (void *)result;
  }
  unint64_t v14 = v11[2];
  unint64_t v13 = v11[3];
  if (v14 >= v13 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v11);
    double v11 = (void *)result;
  }
  uint64_t v11[2] = v14 + 1;
  v11[v14 + 4] = v10;
  *(void *)(v7 + 24) = v11;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v7 + 8) = v10 + 1;
    uint64_t result = a2(v7);
    if (!v6) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

void ProtobufEncoder.intField<A>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  if ((a4 & 1) != 0 || a2 != a3)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * v9);
    ProtobufEncoder.encodeVarint(_:)((2 * a2) ^ (a2 >> 63));
  }
}

void ProtobufEncoder.BOOLField<A>(_:_:defaultValue:)(uint64_t a1, int a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  int v7 = a3;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  if (v7 == 2 || ((((a3 & 1) == 0) ^ a2) & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * v8);
    ProtobufEncoder.encodeVarint(_:)(a2 & 1);
  }
}

int64_t ProtobufEncoder.doubleField<A>(_:_:defaultValue:)(double a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  int64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  if ((a4 & 1) != 0 || *(double *)&a3 != a1)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * result) | 1);
    uint64_t v11 = v6[1];
    int64_t result = v11 + 8;
    if (__OFADD__(v11, 8))
    {
      __break(1u);
    }
    else if (v6[2] >= result)
    {
      v6[1] = result;
      *(double *)(*v6 + v11) = a1;
      return result;
    }
    int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
    *(double *)int64_t result = a1;
  }
  return result;
}

uint64_t ProtobufEncoder.codableField<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
  return ProtobufEncoder.codableField<A>(_:_:)(v7, a2, a4);
}

int64_t ProtobufEncoder.floatField<A>(_:_:defaultValue:)(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  if ((a3 & 0x100000000) != 0 || *(float *)&a3 != a1)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * result) | 5);
    uint64_t v9 = v5[1];
    int64_t result = v9 + 4;
    if (__OFADD__(v9, 4))
    {
      __break(1u);
    }
    else if (v5[2] >= result)
    {
      v5[1] = result;
      *(float *)(*v5 + v9) = a1;
      return result;
    }
    int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
    *(float *)int64_t result = a1;
  }
  return result;
}

Swift::Void __swiftcall ProtobufEncoder.uintField(_:_:defaultValue:)(Swift::UInt _, Swift::UInt a2, Swift::UInt_optional defaultValue)
{
  if (defaultValue.is_nil || a2 != defaultValue.value)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * _);
    ProtobufEncoder.encodeVarint(_:)(a2);
  }
}

uint64_t ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ProtobufEncoder.encodeMessage<A>(_:)(a2, a3, a4);
}

Swift::Void __swiftcall ProtobufEncoder.floatField(_:_:defaultValue:)(Swift::UInt _, Swift::Float a2, Swift::Float_optional *defaultValue)
{
  if (((unint64_t)defaultValue & 0x100000000) != 0 || *(float *)&defaultValue != a2)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * _) | 5);
    uint64_t v5 = v3[1];
    int64_t v6 = v5 + 4;
    if (__OFADD__(v5, 4))
    {
      __break(1u);
    }
    else if (v3[2] >= v6)
    {
      v3[1] = v6;
      uint64_t v7 = (Swift::Float *)(*v3 + v5);
LABEL_6:
      *uint64_t v7 = a2;
      return;
    }
    uint64_t v7 = (Swift::Float *)ProtobufEncoder.growBufferSlow(to:)(v6);
    goto LABEL_6;
  }
}

void ProtobufEncoder.dataField(_:_:)(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 && a3 != a2)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
    ProtobufEncoder.encodeData(_:)(a2, a3);
  }
}

void ProtobufEncoder.dataField(_:_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v3 = a3 >> 62;
  switch(a3 >> 62)
  {
    case 1uLL:
      if ((int)a2 != a2 >> 32) {
        goto LABEL_5;
      }
      break;
    case 2uLL:
      if (*(void *)(a2 + 16) != *(void *)(a2 + 24))
      {
LABEL_5:
        ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
        if (v3 == 2)
        {
          uint64_t v6 = *(void *)(a2 + 16);
          uint64_t v7 = *(void *)(a2 + 24);
          swift_retain();
          swift_retain();
          specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v6, v7);
          swift_release();
          swift_release();
        }
        else
        {
          if (a2 >> 32 < (int)a2) {
            __break(1u);
          }
          swift_retain();
          specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a2, a2 >> 32);
          outlined consume of Data._Representation(a2, a3);
        }
      }
      break;
    case 3uLL:
      return;
    default:
      if ((a3 & 0xFF000000000000) != 0)
      {
        ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
        uint64_t v8 = a2;
        __int16 v9 = a3;
        char v10 = BYTE2(a3);
        char v11 = BYTE3(a3);
        char v12 = BYTE4(a3);
        char v13 = BYTE5(a3);
        ProtobufEncoder.encodeData(_:)(&v8, (unsigned char *)&v8 + BYTE6(a3));
      }
      break;
  }
}

Swift::Void __swiftcall ProtobufEncoder.doubleField(_:_:defaultValue:)(Swift::UInt _, Swift::Double a2, Swift::Double_optional defaultValue)
{
  if ((v3 & 1) != 0 || *(double *)&defaultValue.is_nil != a2)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * _) | 1);
    uint64_t v6 = v4[1];
    int64_t v7 = v6 + 8;
    if (__OFADD__(v6, 8))
    {
      __break(1u);
    }
    else if (v4[2] >= v7)
    {
      v4[1] = v7;
      uint64_t v8 = (Swift::Double *)(*v4 + v6);
LABEL_6:
      *uint64_t v8 = a2;
      return;
    }
    uint64_t v8 = (Swift::Double *)ProtobufEncoder.growBufferSlow(to:)(v7);
    goto LABEL_6;
  }
}

uint64_t static ProtobufEncoder.encoding(_:)(void (*a1)(void **))
{
  return specialized static ProtobufEncoder.encoding(_:)(a1);
}

void ProtobufEncoder.enumField<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
  Swift::UInt v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(a4, a6);
  ProtobufEncoder.encodeVarint(_:)(8 * v8);

  ProtobufEncoder.encodeVarint(_:)(v9);
}

Swift::Void __swiftcall ProtobufEncoder.uint64Field(_:_:defaultValue:)(Swift::UInt _, Swift::UInt64 a2, Swift::UInt64_optional defaultValue)
{
  if (defaultValue.is_nil || a2 != defaultValue.value)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * _);
    ProtobufEncoder.encodeVarint(_:)(a2);
  }
}

uint64_t static ProtobufEncoder.EncodingError.== infix(_:_:)()
{
  return 1;
}

void ProtobufEncoder.EncodingError.hash(into:)()
{
}

Swift::Int ProtobufEncoder.EncodingError.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t ProtobufEncoder.userInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ProtobufEncoder.userInfo.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*ProtobufEncoder.userInfo.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ProtobufEncoder.takeData()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Data.Deallocator();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  if (!*v0) {
    return 0;
  }
  uint64_t v8 = v0[1];
  (*(void (**)(char *, void, uint64_t, double))(v3 + 104))(v6, *MEMORY[0x263F06EF0], v2, v4);
  Data.Deallocator._deallocator.getter();
  if (v8)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    uint64_t v9 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    uint64_t v10 = specialized Data._Representation.init(_:count:)(v9, v8);
    swift_release();
  }
  else
  {
    char v11 = (void (*)(uint64_t, void))Data.Deallocator._deallocator.getter();
    v11(v7, 0);
    swift_release();
    swift_release();
    uint64_t v10 = 0;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *uint64_t v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return v10;
}

uint64_t static ProtobufEncoder.encoding<A>(_:)()
{
  return specialized static ProtobufEncoder.encoding(_:)((void (*)(void **))partial apply for closure #1 in static ProtobufEncoder.encoding<A>(_:));
}

Swift::Void __swiftcall ProtobufEncoder.BOOLField(_:_:defaultValue:)(Swift::UInt _, Swift::Bool a2, Swift::Bool_optional defaultValue)
{
  if (defaultValue.value == 2 || ((!defaultValue.value ^ a2) & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * _);
    ProtobufEncoder.encodeVarint(_:)(a2);
  }
}

Swift::Void __swiftcall ProtobufEncoder.encodeVarint(_:)(Swift::UInt a1)
{
  Swift::UInt v2 = a1;
  if (a1 > 0x7F)
  {
    char v4 = __clz(a1);
    uint64_t v5 = (((37 * (70 - v4)) >> 8)
        + (((70 - v4 - ((unsigned __int16)(37 * (70 - v4)) >> 8)) & 0xFE) >> 1)) >> 2;
    uint64_t v3 = v1[1];
    int64_t v6 = v3 + v5;
    if (!__OFADD__(v3, v5)) {
      goto LABEL_5;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v3 = v1[1];
  if (v3 < v1[2])
  {
    *(unsigned char *)(*v1 + v3) = a1;
    v1[1] = v3 + 1;
    return;
  }
  int64_t v6 = v3 + 1;
  if (__OFADD__(v3, 1)) {
    goto LABEL_12;
  }
LABEL_5:
  if (v1[2] < v6)
  {
LABEL_13:
    uint64_t v7 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v6);
    goto LABEL_7;
  }
  v1[1] = v6;
  uint64_t v7 = (unsigned char *)(*v1 + v3);
LABEL_7:
  LOBYTE(v8) = v2 & 0x7F;
  if (v2 >= 0x80)
  {
    do
    {
      char v9 = v8 | 0x80;
      uint64_t v8 = (v2 >> 7) & 0x7F;
      *v7++ = v9;
      BOOL v10 = v2 >= 0x4000;
      v2 >>= 7;
    }
    while (v10);
  }
  *uint64_t v7 = v8;
}

void ProtobufEncoder.enumField<A>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = a5;
  uint64_t v21 = a1;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  char v12 = (char *)&v20 - v11;
  uint64_t v13 = *(void *)(a4 - 8);
  double v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a3, v9, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v12, a4);
    char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, a4);
    if (v18) {
      return;
    }
  }
  Swift::UInt v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(a4, a6);
  ProtobufEncoder.encodeVarint(_:)(8 * v21);
  ProtobufEncoder.encodeVarint(_:)(v19);
}

void ProtobufEncoder.enumField<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::UInt v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  ProtobufEncoder.encodeVarint(_:)(8 * a1);

  ProtobufEncoder.encodeVarint(_:)(v5);
}

Swift::Void __swiftcall ProtobufEncoder.intField(_:_:defaultValue:)(Swift::UInt _, Swift::Int a2, Swift::Int_optional defaultValue)
{
  if (defaultValue.is_nil || a2 != defaultValue.value)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * _);
    ProtobufEncoder.encodeVarint(_:)((2 * a2) ^ (a2 >> 63));
  }
}

Swift::Void __swiftcall ProtobufEncoder.encodeVarintZZ(_:)(Swift::Int a1)
{
}

Swift::Void __swiftcall ProtobufEncoder.int64Field(_:_:defaultValue:)(Swift::UInt _, Swift::Int64 a2, Swift::Int64_optional defaultValue)
{
  if (defaultValue.is_nil || a2 != defaultValue.value)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * _);
    ProtobufEncoder.encodeVarint(_:)((2 * a2) ^ (a2 >> 63));
  }
}

Swift::Void __swiftcall ProtobufEncoder.encodeVarint64ZZ(_:)(Swift::Int64 a1)
{
}

Swift::Void __swiftcall ProtobufEncoder.fixed32Field(_:_:defaultValue:)(Swift::UInt _, Swift::UInt32 a2, Swift::UInt32_optional defaultValue)
{
  if ((*(void *)&defaultValue.value & 0x100000000) != 0 || defaultValue.value != a2)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * _) | 5);
    uint64_t v5 = v3[1];
    int64_t v6 = v5 + 4;
    if (__OFADD__(v5, 4))
    {
      __break(1u);
    }
    else if (v3[2] >= v6)
    {
      v3[1] = v6;
      uint64_t v7 = (_DWORD *)(*v3 + v5);
LABEL_6:
      *uint64_t v7 = a2;
      return;
    }
    uint64_t v7 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v6);
    goto LABEL_6;
  }
}

Swift::Void __swiftcall ProtobufEncoder.encodeFixed32(_:)(Swift::UInt32 a1)
{
  uint64_t v3 = v1[1];
  int64_t v4 = v3 + 4;
  if (__OFADD__(v3, 4))
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1[2] < v4)
  {
LABEL_6:
    uint64_t v5 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v4);
    goto LABEL_4;
  }
  v1[1] = v4;
  uint64_t v5 = (_DWORD *)(*v1 + v3);
LABEL_4:
  *uint64_t v5 = a1;
}

Swift::Void __swiftcall ProtobufEncoder.fixed64Field(_:_:defaultValue:)(Swift::UInt _, Swift::UInt64 a2, Swift::UInt64_optional defaultValue)
{
  if (defaultValue.is_nil || a2 != defaultValue.value)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * _) | 1);
    uint64_t v5 = v3[1];
    int64_t v6 = v5 + 8;
    if (__OFADD__(v5, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= v6)
    {
      v3[1] = v6;
      uint64_t v7 = (void *)(*v3 + v5);
LABEL_6:
      *uint64_t v7 = a2;
      return;
    }
    uint64_t v7 = (void *)ProtobufEncoder.growBufferSlow(to:)(v6);
    goto LABEL_6;
  }
}

Swift::Void __swiftcall ProtobufEncoder.encodeFixed64(_:)(Swift::UInt64 a1)
{
  uint64_t v3 = v1[1];
  int64_t v4 = v3 + 8;
  if (__OFADD__(v3, 8))
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1[2] < v4)
  {
LABEL_6:
    uint64_t v5 = (void *)ProtobufEncoder.growBufferSlow(to:)(v4);
    goto LABEL_4;
  }
  v1[1] = v4;
  uint64_t v5 = (void *)(*v1 + v3);
LABEL_4:
  *uint64_t v5 = a1;
}

Swift::Void __swiftcall ProtobufEncoder.encodeFloat(_:)(Swift::Float a1)
{
  uint64_t v3 = v1[1];
  int64_t v4 = v3 + 4;
  if (__OFADD__(v3, 4))
  {
    __break(1u);
    goto LABEL_6;
  }
  Swift::Float v2 = a1;
  if (v1[2] < v4)
  {
LABEL_6:
    uint64_t v5 = (Swift::Float *)ProtobufEncoder.growBufferSlow(to:)(v4);
    goto LABEL_4;
  }
  v1[1] = v4;
  uint64_t v5 = (Swift::Float *)(*v1 + v3);
LABEL_4:
  *uint64_t v5 = v2;
}

double *ProtobufEncoder.encodeDouble(_:)(double a1)
{
  uint64_t v3 = v1[1];
  int64_t v4 = v3 + 8;
  if (__OFADD__(v3, 8))
  {
    __break(1u);
    goto LABEL_6;
  }
  double v2 = a1;
  if (v1[2] < v4)
  {
LABEL_6:
    uint64_t result = (double *)ProtobufEncoder.growBufferSlow(to:)(v4);
    goto LABEL_4;
  }
  v1[1] = v4;
  uint64_t result = (double *)(*v1 + v3);
LABEL_4:
  *uint64_t result = v2;
  return result;
}

void ProtobufEncoder.encodeData(_:)(unsigned char *a1, unsigned char *a2)
{
  size_t v5 = a2 - a1;
  if (a1) {
    Swift::UInt v6 = a2 - a1;
  }
  else {
    Swift::UInt v6 = 0;
  }
  ProtobufEncoder.encodeVarint(_:)(v6);
  if (!a1 || a2 == a1) {
    return;
  }
  uint64_t v7 = v2[1];
  int64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v2[2] < v8)
  {
LABEL_14:
    uint64_t v9 = (void *)ProtobufEncoder.growBufferSlow(to:)(v8);
    goto LABEL_10;
  }
  v2[1] = v8;
  uint64_t v9 = (void *)(*v2 + v7);
LABEL_10:

  memcpy(v9, a1, v5);
}

uint64_t ProtobufEncoder.packedField(_:_:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = v2;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v5 = *(void *)(v2 + 8);
  Swift::UInt v6 = *(void **)(v2 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    Swift::UInt v6 = (void *)result;
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
    Swift::UInt v6 = (void *)result;
  }
  void v6[2] = v9 + 1;
  v6[v9 + 4] = v5;
  *(void *)(v3 + 24) = v6;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v5 + 1;
    a2(v3);
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

uint64_t ProtobufEncoder.endLengthDelimited()()
{
  int64_t v1 = v0[3];
  if (*(void *)(v1 + 16))
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v3 = *(void *)(v1 + 16);
      if (v3) {
        goto LABEL_4;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v1);
  int64_t v1 = result;
  uint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    goto LABEL_18;
  }
LABEL_4:
  uint64_t v4 = v3 - 1;
  uint64_t v5 = *(void *)(v1 + 8 * v4 + 32);
  *(void *)(v1 + 16) = v4;
  v0[3] = v1;
  uint64_t v3 = v0[1];
  int64_t v1 = v3 - (v5 + 1);
  if (__OFSUB__(v3, v5 + 1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v1 > 127)
  {
    unsigned __int8 v6 = 70 - __clz(v1);
    uint64_t v7 = (((37 * v6) >> 8) + (((v6 - ((unsigned __int16)(37 * v6) >> 8)) & 0xFE) >> 1)) >> 2;
    goto LABEL_9;
  }
  if (v3 >= v0[2])
  {
    while (1)
    {
      if (v1 < 0) {
        goto LABEL_25;
      }
      uint64_t v7 = 1;
LABEL_9:
      int64_t v8 = v3 + v7 - 1;
      if (!__OFADD__(v3, v7 - 1)) {
        break;
      }
LABEL_20:
      __break(1u);
    }
    if (v0[2] < v8)
    {
      uint64_t v9 = ProtobufEncoder.growBufferSlow(to:)(v8);
    }
    else
    {
      v0[1] = v8;
      uint64_t v9 = *v0 + v3;
    }
    if (__OFSUB__(0, v1 + 1))
    {
      __break(1u);
LABEL_25:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v10 = (unsigned char *)(v9 - (v1 + 1));
    uint64_t result = (uint64_t)memmove(&v10[v7], (const void *)(v9 - v1), v1);
    LOBYTE(v11) = v1 & 0x7F;
    if (v1 >= 128)
    {
      do
      {
        char v12 = v11 | 0x80;
        uint64_t v11 = ((unint64_t)v1 >> 7) & 0x7F;
        *v10++ = v12;
        BOOL v13 = (unint64_t)v1 >= 0x4000;
        int64_t v1 = (unint64_t)v1 >> 7;
      }
      while (v13);
    }
    *uint64_t v10 = v11;
  }
  else
  {
    *(unsigned char *)(*v0 + v5) = v1;
  }
  return result;
}

uint64_t ProtobufEncoder.messageField(_:_:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = v2;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v6 = *(void *)(v2 + 8);
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    uint64_t v7 = (void *)result;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    uint64_t v7 = (void *)result;
  }
  _OWORD v7[2] = v10 + 1;
  v7[v10 + 4] = v6;
  *(void *)(v4 + 24) = v7;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v4 + 8) = v6 + 1;
    uint64_t result = a2(v4);
    if (!v3) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

uint64_t ProtobufEncoder.messageField<A>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
    return ProtobufEncoder.encodeMessage<A>(_:)(a2, a4, a6);
  }
  return result;
}

uint64_t ProtobufEncoder.encodeMessage<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 8);
  int64_t v8 = *(void **)(v3 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    int64_t v8 = (void *)result;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    int64_t v8 = (void *)result;
  }
  _OWORD v8[2] = v11 + 1;
  v8[v11 + 4] = v7;
  *(void *)(v3 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v7 + 1;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 8))(v3, a2, a3);
    if (!v4) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufEncoder.stringField(_:_:defaultValue:)(Swift::UInt _, Swift::String a2, Swift::String_optional defaultValue)
{
  if (!defaultValue.value._object
    || (a2._countAndFlagsBits != defaultValue.value._countAndFlagsBits || a2._object != defaultValue.value._object)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    ProtobufEncoder.stringFieldAlways(_:_:)(_);
  }
}

uint64_t ProtobufEncoder.stringFieldAlways(_:_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for String.Encoding();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  static String.Encoding.utf8.getter();
  uint64_t v8 = String.data(using:allowLossyConversion:)();
  unint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v10 >> 60 == 15)
  {
    lazy protocol witness table accessor for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError();
    swift_allocError();
    return swift_willThrow();
  }
  else
  {
    switch(v10 >> 62)
    {
      case 1uLL:
        if (v8 >> 32 < (int)v8) {
          __break(1u);
        }
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v8, v8 >> 32);
        if (v1) {
          goto LABEL_15;
        }
        outlined consume of Data?(v8, v10);
        break;
      case 2uLL:
        uint64_t v13 = *(void *)(v8 + 16);
        uint64_t v14 = *(void *)(v8 + 24);
        swift_retain();
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v13, v14);
        if (v2)
        {
          swift_release();
          swift_release();
          __break(1u);
LABEL_15:
          outlined consume of Data?(v8, v10);
          __break(1u);
          JUMPOUT(0x245D2C034);
        }
        swift_release();
        swift_release();
        break;
      case 3uLL:
        memset(v16, 0, 14);
        char v12 = v16;
        goto LABEL_8;
      default:
        v16[0] = v8;
        LOWORD(v16[1]) = v10;
        BYTE2(v16[1]) = BYTE2(v10);
        BYTE3(v16[1]) = BYTE3(v10);
        BYTE4(v16[1]) = BYTE4(v10);
        BYTE5(v16[1]) = BYTE5(v10);
        char v12 = (char *)v16 + BYTE6(v10);
LABEL_8:
        ProtobufEncoder.encodeData(_:)(v16, v12);
        break;
    }
    return outlined consume of Data?(v8, v10);
  }
}

uint64_t ProtobufEncoder.codableField<A>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) == 0) {
    return ProtobufEncoder.codableField<A>(_:_:)(a1, a2, a4);
  }
  return result;
}

uint64_t ProtobufEncoder.codableField<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v7 = *((void *)v3 + 2);
  long long v15 = *v3;
  uint64_t v16 = v7;
  long long v17 = *(long long *)((char *)v3 + 24);
  uint64_t result = ProtobufEncoder.binaryPlistData<A>(for:)(a2, a3);
  if (!v4)
  {
    unint64_t v10 = v9;
    uint64_t v11 = result;
    switch(v9 >> 62)
    {
      case 1uLL:
        if (result >> 32 < (int)result) {
          __break(1u);
        }
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v11, v11 >> 32);
        outlined consume of Data._Representation(v11, v10);
        uint64_t result = outlined consume of Data._Representation(v11, v10);
        break;
      case 2uLL:
        uint64_t v13 = *(void *)(result + 16);
        uint64_t v14 = *(void *)(result + 24);
        swift_retain();
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v13, v14);
        swift_release();
        swift_release();
        uint64_t result = outlined consume of Data._Representation(v11, v10);
        break;
      case 3uLL:
        *(void *)((char *)&v15 + 6) = 0;
        *(void *)&long long v15 = 0;
        char v12 = &v15;
        goto LABEL_6;
      default:
        *(void *)&long long v15 = result;
        WORD4(v15) = v9;
        BYTE10(v15) = BYTE2(v9);
        BYTE11(v15) = BYTE3(v9);
        BYTE12(v15) = BYTE4(v9);
        BYTE13(v15) = BYTE5(v9);
        char v12 = (long long *)((char *)&v15 + BYTE6(v9));
LABEL_6:
        ProtobufEncoder.encodeData(_:)(&v15, v12);
        uint64_t result = outlined consume of Data._Representation(v11, v10);
        break;
    }
  }
  return result;
}

Swift::Void __swiftcall ProtobufEncoder.emptyField(_:)(Swift::UInt a1)
{
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  v3[v5 + 4] = v2;
  *(void *)(v1 + 24) = v3;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + 8) = v2 + 1;
    ProtobufEncoder.endLengthDelimited()();
  }
}

void ProtobufEncoder.uint64Field<A>(_:_:defaultValue:)(uint64_t a1, Swift::UInt a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  if ((a4 & 1) != 0 || a2 != a3)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * v9);
    ProtobufEncoder.encodeVarint(_:)(a2);
  }
}

void ProtobufEncoder.int64Field<A>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  if ((a4 & 1) != 0 || a2 != a3)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * v9);
    ProtobufEncoder.encodeVarint(_:)((2 * a2) ^ (a2 >> 63));
  }
}

int64_t ProtobufEncoder.fixed32Field<A>(_:_:defaultValue:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  if ((a3 & 0x100000000) != 0 || a3 != a2)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * result) | 5);
    uint64_t v9 = v5[1];
    int64_t result = v9 + 4;
    if (__OFADD__(v9, 4))
    {
      __break(1u);
    }
    else if (v5[2] >= result)
    {
      v5[1] = result;
      *(_DWORD *)(*v5 + v9) = a2;
      return result;
    }
    int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
    *(_DWORD *)int64_t result = a2;
  }
  return result;
}

int64_t ProtobufEncoder.fixed64Field<A>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  int64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  if ((a4 & 1) != 0 || a2 != a3)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * result) | 1);
    uint64_t v11 = v6[1];
    int64_t result = v11 + 8;
    if (__OFADD__(v11, 8))
    {
      __break(1u);
    }
    else if (v6[2] >= result)
    {
      v6[1] = result;
      *(void *)(*v6 + v11) = a2;
      return result;
    }
    int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
    *(void *)int64_t result = a2;
  }
  return result;
}

void ProtobufEncoder.dataField<A>(_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);

  ProtobufEncoder.dataField(_:_:)(v7, a2, a3);
}

void ProtobufEncoder.dataField<A>(_:_:)(uint64_t a1, unsigned char *a2, unsigned char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  if (a2 && a3 != a2)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * v7) | 2);
    ProtobufEncoder.encodeData(_:)(a2, a3);
  }
}

uint64_t ProtobufEncoder.packedField<A>(_:_:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  ProtobufEncoder.encodeVarint(_:)((8 * v8) | 2);
  uint64_t v9 = *(void *)(v5 + 8);
  unint64_t v10 = *(void **)(v5 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    unint64_t v10 = (void *)result;
  }
  unint64_t v13 = v10[2];
  unint64_t v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
    unint64_t v10 = (void *)result;
  }
  void v10[2] = v13 + 1;
  v10[v13 + 4] = v9;
  *(void *)(v6 + 24) = v10;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v6 + 8) = v9 + 1;
    a2(v6);
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

uint64_t ProtobufEncoder.codableField<A, B>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a4, a6);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) == 0) {
    return ProtobufEncoder.codableField<A>(_:_:)(v8, a2, a5);
  }
  return result;
}

Swift::Void __swiftcall ProtobufEncoder.encodeBool(_:)(Swift::Bool a1)
{
  uint64_t v3 = v1[1];
  int64_t v4 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1[2] < v4)
  {
LABEL_6:
    uint64_t v5 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v4);
    goto LABEL_4;
  }
  v1[1] = v4;
  uint64_t v5 = (unsigned char *)(*v1 + v3);
LABEL_4:
  *uint64_t v5 = a1;
}

uint64_t ProtobufEncoder.growBufferSlow(to:)(int64_t a1)
{
  int64_t v2 = a1;
  if (a1 <= 128) {
    a1 = 128;
  }
  size_t v3 = malloc_good_size(a1);
  int64_t v4 = realloc(*(void **)v1, v3);
  if (v4)
  {
    uint64_t v5 = *(void *)(v1 + 8);
    *(void *)uint64_t v1 = v4;
    *(void *)(v1 + 8) = v2;
    *(void *)(v1 + 16) = v3;
    return (uint64_t)v4 + v5;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  int64_t v4 = (unsigned char *)__DataStorage._bytes.getter();
  if (v4)
  {
    uint64_t v5 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v5))
    {
LABEL_13:
      __break(1u);
      return;
    }
    v4 += a1 - v5;
  }
  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  unint64_t v10 = &v4[v9];
  if (v4) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  ProtobufEncoder.encodeData(_:)(v4, v11);
}

uint64_t specialized static ProtobufEncoder.encoding(_:)(void (*a1)(void **))
{
  memset(v4, 0, sizeof(v4));
  uint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v6 = MEMORY[0x263F8EE80];
  a1(v4);
  if (v1)
  {
    free(v4[0]);
    uint64_t v2 = v5;
  }
  else
  {
    uint64_t v2 = ProtobufEncoder.takeData()();
    free(v4[0]);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t partial apply for closure #1 in static ProtobufEncoder.encoding<A>(_:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 + 24) + 8))(a1, *(void *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError()
{
  unint64_t result = lazy protocol witness table cache variable for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError;
  if (!lazy protocol witness table cache variable for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError;
  if (!lazy protocol witness table cache variable for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError);
  }
  return result;
}

uint64_t initializeWithCopy for ProtobufEncoder(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ProtobufEncoder(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ProtobufEncoder(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ProtobufEncoder()
{
  return &type metadata for ProtobufEncoder;
}

unsigned char *storeEnumTagSinglePayload for ProtobufEncoder.EncodingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x245D2CE38);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProtobufEncoder.EncodingError()
{
  return &type metadata for ProtobufEncoder.EncodingError;
}

uint64_t specialized static ProtobufEncoder.encoding(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder + 32);
  if (a3) {
    swift_unknownObjectRetain();
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = RBImageCopyCGImage();
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    specialized ProtobufEncoder.encodeMessage<A>(_:)((uint64_t)v6);

    swift_unknownObjectRelease();
    if (!v3)
    {
      uint64_t v4 = ProtobufEncoder.takeData()();
      free(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v4;
    }
  }
  else
  {
    lazy protocol witness table accessor for type CodableRBImage.Error and conformance CodableRBImage.Error();
    swift_allocError();
    swift_willThrow();
    swift_unknownObjectRelease();
  }
  free(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized static ProtobufEncoder.encoding(_:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = MEMORY[0x263F8EE78];
  uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder + 32);
  swift_bridgeObjectRetain();
  uint64_t v5 = a2;
  CodableCGFont.encode(to:)((uint64_t)v8, v5);

  if (v3)
  {
    free(v8[0]);
    uint64_t v6 = v9;
  }
  else
  {
    uint64_t v6 = ProtobufEncoder.takeData()();
    free(v8[0]);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized static ProtobufEncoder.encoding(_:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v8 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
  specialized ProtobufEncoder.encodeMessage<A>(_:)(a2, a3);
  if (v3)
  {
    free(0);
    uint64_t v6 = v8;
  }
  else
  {
    uint64_t v6 = ProtobufEncoder.takeData()();
    free(0);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t lazy protocol witness table accessor for type CodableRBImage.Error and conformance CodableRBImage.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableRBImage.Error and conformance CodableRBImage.Error;
  if (!lazy protocol witness table cache variable for type CodableRBImage.Error and conformance CodableRBImage.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableRBImage.Error and conformance CodableRBImage.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableRBImage.Error and conformance CodableRBImage.Error;
  if (!lazy protocol witness table cache variable for type CodableRBImage.Error and conformance CodableRBImage.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableRBImage.Error and conformance CodableRBImage.Error);
  }
  return result;
}

id Text.Effect.Content.fontSize(scale:)(void *a1, double a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for AnyDynamicAttributeModifier<TextScaleAttributeModifier>();
  *(double *)(swift_allocObject() + 16) = a2;
  id v7 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_retain();
  MEMORY[0x24C522D60](v8);
  if (*(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();
  return v7;
}

uint64_t type metadata accessor for AnyAttributeModifier()
{
  return self;
}

uint64_t type metadata completion function for AnyDynamicAttributeModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for AttributeModifier.modify(attributes:) in conformance AnyAttributeModifier()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t AnyDynamicAttributeModifier.modify(attributes:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 104) + 8))(a1, *(void *)(*(void *)v1 + 96));
}

uint64_t AnyDynamicAttributeModifier.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 96) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 112));
}

uint64_t AnyDynamicAttributeModifier.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 96) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 112));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnyDynamicAttributeModifier()
{
  return __swift_instantiateGenericMetadata();
}

NSAttributedString_optional __swiftcall Text.Effect.Content.resolveIfModified()()
{
  uint64_t v3 = v2;
  uint64_t v4 = (__objc2_meth_list *)v1;
  uint64_t v5 = v0;
  if ((unint64_t)v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v7 = (unint64_t)v3 >> 62;
    if (v6) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t v7 = (unint64_t)v2 >> 62;
    if (v6) {
      goto LABEL_5;
    }
  }
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = (__objc2_meth_list *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v8) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v8 = *(__objc2_meth_list **)(((unint64_t)v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v8) {
      goto LABEL_17;
    }
  }
LABEL_5:
  [(__objc2_prot_list *)v5 mutableCopy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMutableAttributedString();
  swift_dynamicCast();
  uint64_t v8 = v29;
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)(((unint64_t)v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v10 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
  if (!v9)
  {
    if (!v6) {
      goto LABEL_17;
    }
    char v22 = 0;
LABEL_13:
    if (one-time initialization token for kitFont == -1) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }
  char v22 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))[(__objc2_prot_list *)v5 length];
  uint64_t v11 = (__objc2_prot *)swift_allocObject();
  v11->prots = v5;
  v11->inst_meths = v4;
  v11->class_meths = v3;
  v11->opt_inst_meths = v8;
  uint64_t v10 = (__objc2_prot **)swift_allocObject();
  void v10[2] = (__objc2_prot *)partial apply for closure #1 in Text.Effect.Content.resolveIfModified();
  v10[3] = v11;
  long long v27 = _sSDySo21NSAttributedStringKeyaypGSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIggyy_AceIIeggyy_TRTA_0;
  uint64_t v28 = (uint64_t)v10;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v24 = 1107296256;
  uint64_t v25 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  uint64_t v26 = &block_descriptor_13;
  unint64_t v12 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v13 = v5;
  uint64_t v14 = v8;
  swift_retain();
  swift_release();
  -[__objc2_prot_list enumerateAttributesInRange:options:usingBlock:](v13, sel_enumerateAttributesInRange_options_usingBlock_, 0, v22, 0x100000, v12);
  _Block_release(v12);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v13 & 1) == 0)
  {
    if (!v6)
    {
LABEL_16:
      swift_release();
      goto LABEL_17;
    }
    char v22 = partial apply for closure #1 in Text.Effect.Content.resolveIfModified();
    uint64_t v10 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
    goto LABEL_13;
  }
  __break(1u);
LABEL_22:
  swift_once();
LABEL_14:
  uint64_t v21 = static NSAttributedStringKey.kitFont;
  id v15 = [v5 (SEL)v10[128]];
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v5;
  *(void *)(v16 + 24) = v4;
  *(void *)(v16 + 32) = v3;
  *(_WORD *)(v16 + 40) = 515;
  *(void *)(v16 + 48) = &type metadata for DefaultFontDefinition;
  *(void *)(v16 + 56) = &protocol witness table for DefaultFontDefinition;
  *(_WORD *)(v16 + 64) = 1;
  *(void *)(v16 + 72) = v8;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = partial apply for closure #2 in Text.Effect.Content.resolveIfModified();
  *(void *)(v17 + 24) = v16;
  long long v27 = _sypSgSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgnyy_AacGIegnyy_TRTA_0;
  uint64_t v28 = v17;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v24 = 1107296256;
  uint64_t v25 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  uint64_t v26 = &block_descriptor_14_0;
  uint64_t v18 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::UInt v19 = v5;
  uint64_t v8 = v8;
  swift_retain();
  swift_release();
  -[__objc2_prot_list enumerateAttribute:inRange:options:usingBlock:](v19, sel_enumerateAttribute_inRange_options_usingBlock_, v21, 0, v15, 0, v18);
  _Block_release(v18);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v22);
  swift_release();
  if (v19)
  {
    __break(1u);
    goto LABEL_16;
  }
LABEL_17:
  uint64_t v20 = (objc_class *)v8;
  result.is_nil = v1;
  result.value.super.isa = v20;
  return result;
}

unint64_t type metadata accessor for NSMutableAttributedString()
{
  unint64_t result = lazy cache variable for type metadata for NSMutableAttributedString;
  if (!lazy cache variable for type metadata for NSMutableAttributedString)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
  }
  return result;
}

void closure #1 in Text.Effect.Content.resolveIfModified()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, void *a8)
{
  uint64_t v16 = a1;
  if (a7 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v12 = *(void *)((a7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v12) {
    goto LABEL_11;
  }
LABEL_3:
  if (v12 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v12; ++i)
  {
    if ((a7 & 0xC000000000000001) != 0)
    {
      uint64_t v14 = MEMORY[0x24C523D60](i, a7);
    }
    else
    {
      uint64_t v14 = *(void *)(a7 + 8 * i + 32);
      swift_retain();
    }
    (*(void (**)(uint64_t *))(*(void *)v14 + 80))(&v16);
    swift_release();
  }
  swift_bridgeObjectRelease();
LABEL_12:
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a8, sel_setAttributes_range_, isa, a2, a3);
}

uint64_t sub_245D2DC60()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in Text.Effect.Content.resolveIfModified()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  closure #1 in Text.Effect.Content.resolveIfModified()(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void **)(v4 + 40));
}

uint64_t sub_245D2DCBC()
{
  return swift_deallocObject();
}

void closure #2 in Text.Effect.Content.resolveIfModified()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, __int16 a8, uint64_t a9, uint64_t a10, __int16 a11, void *a12)
{
  type metadata accessor for CTFontRef(0);
  type metadata accessor for Any?();
  uint64_t v14 = (const void *)Optional._bridgeToObjectiveC()();
  id v15 = (const __CTFont *)static CTFontRef.make(platformFont:)(v14);
  swift_unknownObjectRelease();
  if (v15)
  {
    __int16 v18 = a8;
    uint64_t v19 = a9;
    uint64_t v20 = a10;
    __int16 v21 = a11 & 0x1FF;
    id v16 = (id)specialized Text.Effect.Content.resolveFont(_:context:)(v15, (char *)&v18, a6);
    if (one-time initialization token for kitFont != -1) {
      swift_once();
    }
    objc_msgSend(a12, sel_addAttribute_value_range_, static NSAttributedStringKey.kitFont, v16);
  }
}

void WeightDeltaModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1, double a2, double a3, double a4)
{
  uint64_t v8 = *a1;
  CTFontRef v9 = CTFontCreateWithFontDescriptor(*a1, 0.0, 0);
  CTFontGetWeight();
  double v11 = (v10 + 1.0) * 500.0 + a2;
  if (v11 < a3) {
    double v11 = a3;
  }
  if (v11 > a4) {
    double v11 = a4;
  }
  double v12 = (v11 + -500.0) / 500.0;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;
  type metadata accessor for _ContiguousArrayStorage<(CFStringRef, Any)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(String, [String : CGFloat])>, (void (*)(uint64_t))type metadata accessor for (String, [String : CGFloat]));
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  *(void *)(inited + 32) = v13;
  *(void *)(inited + 40) = v15;
  type metadata accessor for _ContiguousArrayStorage<(CFStringRef, Any)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(String, CGFloat)>, (void (*)(uint64_t))type metadata accessor for (String, CGFloat));
  uint64_t v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_2461B9DC0;
  *(void *)(v20 + 32) = v16;
  *(void *)(v20 + 40) = v18;
  *(double *)(v20 + 48) = v12;
  *(void *)(inited + 48) = specialized Dictionary.init(dictionaryLiteral:)(v20);
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for [String : CGFloat]();
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CTFontDescriptorRef CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v8, isa);

  *a1 = CopyWithAttributes;
}

void protocol witness for FontModifier.modify(descriptor:in:) in conformance WeightDeltaModifier(CTFontDescriptorRef *a1)
{
  WeightDeltaModifier.modify(descriptor:in:)(a1, *v1, v1[1], v1[2]);
}

double protocol witness for FontModifier.modify(traits:) in conformance WeightDeltaModifier(uint64_t a1)
{
  double v2 = *v1 + (*(double *)(a1 + 8) + 1.0) * 500.0;
  if (v1[1] > v2) {
    double v2 = v1[1];
  }
  if (v1[2] < v2) {
    double v2 = v1[2];
  }
  double result = (v2 + -500.0) / 500.0;
  *(double *)(a1 + 8) = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance WeightDeltaModifier()
{
  double v1 = *v0;
  double v2 = v0[1];
  double v3 = v0[2];
  Hasher.init(_seed:)();
  if ((*(void *)&v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)&v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  specialized ClosedRange<>.hash(into:)(v2, v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance WeightDeltaModifier()
{
  double v1 = *((double *)v0 + 1);
  double v2 = *((double *)v0 + 2);
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *v0;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);

  specialized ClosedRange<>.hash(into:)(v1, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WeightDeltaModifier()
{
  double v1 = *v0;
  double v2 = v0[1];
  double v3 = v0[2];
  Hasher.init(_seed:)();
  if ((*(void *)&v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)&v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  specialized ClosedRange<>.hash(into:)(v2, v3);
  return Hasher._finalize()();
}

uint64_t TextScaleAttributeModifier.modify(attributes:)(double a1)
{
  if (one-time initialization token for _textScale != -1) {
    swift_once();
  }
  double v2 = (void *)static NSAttributedStringKey._textScale;
  type metadata accessor for CFStringRef(0);
  uint64_t v8 = v3;
  v7[0] = @"NSTextScaleSecondary";
  id v4 = v2;
  uint64_t v5 = @"NSTextScaleSecondary";
  specialized Dictionary.subscript.setter((uint64_t)v7, v4);
  if (one-time initialization token for _textScaleRatio != -1) {
    swift_once();
  }
  uint64_t v8 = MEMORY[0x263F8EF38];
  *(double *)unint64_t v7 = a1;
  specialized Dictionary.subscript.setter((uint64_t)v7, (id)static NSAttributedStringKey._textScaleRatio);
  if (one-time initialization token for _textScaleStaticWeightMatching != -1) {
    swift_once();
  }
  uint64_t v8 = MEMORY[0x263F8D4F8];
  LOBYTE(v7[0]) = 0;
  return specialized Dictionary.subscript.setter((uint64_t)v7, (id)static NSAttributedStringKey._textScaleStaticWeightMatching);
}

uint64_t protocol witness for AttributeModifier.modify(attributes:) in conformance TextScaleAttributeModifier()
{
  return TextScaleAttributeModifier.modify(attributes:)(*v0);
}

uint64_t sub_245D2E2D8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #2 in Text.Effect.Content.resolveIfModified()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(v4 + 65)) {
    __int16 v5 = 256;
  }
  else {
    __int16 v5 = 0;
  }
  closure #2 in Text.Effect.Content.resolveIfModified()(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(_WORD *)(v4 + 40), *(void *)(v4 + 48), *(void *)(v4 + 56), v5 | *(unsigned __int8 *)(v4 + 64), *(void **)(v4 + 72));
}

uint64_t sub_245D2E380()
{
  return swift_deallocObject();
}

void specialized ClosedRange<>.hash(into:)(double a1, double a2)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
}

uint64_t specialized Text.Effect.Content.resolveFont(_:context:)(const __CTFont *a1, char *a2, unint64_t a3)
{
  char v5 = *a2;
  char v6 = a2[1];
  long long v24 = *(_OWORD *)(a2 + 8);
  char v7 = a2[24];
  char v8 = a2[25];
  CTFontRef v9 = CTFontCopyFontDescriptor(a1);
  long long v29 = v9;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v10 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v10 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v10) {
    goto LABEL_11;
  }
LABEL_3:
  if (v10 < 1)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v12 = 0;
  do
  {
    if ((a3 & 0xC000000000000001) != 0)
    {
      uint64_t v13 = MEMORY[0x24C523D60](v12, a3);
    }
    else
    {
      uint64_t v13 = *(void *)(a3 + 8 * v12 + 32);
      swift_retain();
    }
    ++v12;
    v25[0] = v5;
    v25[1] = v6;
    long long v26 = v24;
    char v27 = v7;
    char v28 = v8;
    (*(void (**)(const __CTFontDescriptor **, unsigned char *))(*(void *)v13 + 80))(&v29, v25);
    swift_release();
  }
  while (v10 != v12);
  swift_bridgeObjectRelease();
  CTFontRef v9 = v29;
LABEL_12:
  uint64_t v14 = CTFontCreateWithFontDescriptor(v9, 0.0, 0);
  uint64_t result = (uint64_t)CTFontCopyDefaultCascadeListForLanguages(a1, 0);
  if (result)
  {
    uint64_t v15 = (void *)result;
    type metadata accessor for _ContiguousArrayStorage<(CFStringRef, Any)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>, (void (*)(uint64_t))type metadata accessor for (CFStringRef, Any));
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
    uint64_t v17 = (void *)*MEMORY[0x263F039A8];
    *(void *)(inited + 32) = *MEMORY[0x263F039A8];
    type metadata accessor for CFArrayRef(0);
    *(void *)(inited + 64) = v18;
    *(void *)(inited + 40) = v15;
    id v19 = v17;
    id v20 = v15;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    char v22 = CTFontDescriptorCreateWithAttributes(isa);

    CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(v14, 0.0, 0, v22);
    return (uint64_t)CopyWithAttributes;
  }
LABEL_15:
  __break(1u);
  return result;
}

void type metadata accessor for AnyDynamicAttributeModifier<TextScaleAttributeModifier>()
{
  if (!lazy cache variable for type metadata for AnyDynamicAttributeModifier<TextScaleAttributeModifier>)
  {
    unint64_t v0 = type metadata accessor for AnyDynamicAttributeModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyDynamicAttributeModifier<TextScaleAttributeModifier>);
    }
  }
}

void *type metadata accessor for TextScaleAttributeModifier()
{
  return &unk_26FA6E568;
}

ValueMetadata *type metadata accessor for WeightDeltaModifier()
{
  return &type metadata for WeightDeltaModifier;
}

uint64_t destroy for Text.Effect.Content(id *a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for Text.Effect.Content(void *a1, uint64_t a2)
{
  Swift::UInt64 v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Effect.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Text.Effect.Content(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.Content()
{
  return &type metadata for Text.Effect.Content;
}

unint64_t instantiation function for generic protocol witness table for WeightDeltaModifier(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type WeightDeltaModifier and conformance WeightDeltaModifier();
  *(void *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(CFStringRef, Any)>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for _ContiguousArrayStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _ZStackLayout@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)a1;
  int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  int v20 = *(_DWORD *)(a1 + 28);
  int v21 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 36);
  int v19 = *(_DWORD *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v25 = *(void *)(a1 + 56);
  uint64_t v26 = *(void *)(a1 + 48);
  int v24 = *(_DWORD *)(a1 + 64);
  uint64_t v23 = *(void *)(a1 + 72);
  char v22 = *(unsigned char *)(a1 + 80);
  unint64_t v11 = AGCreateWeakAttribute();
  int v12 = v11;
  unint64_t v13 = HIDWORD(v11);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = v12;
  *(_DWORD *)(v14 + 20) = v13;
  *(void *)(v14 + 24) = v4;
  *(void *)(v14 + 32) = a2;
  *(void *)(v14 + 40) = a3;
  type metadata accessor for UnaryElements<BodyUnaryViewGenerator<_ZStackLayout>>(0, &lazy cache variable for type metadata for UnaryElements<BodyUnaryViewGenerator<_ZStackLayout>>, &lazy cache variable for type metadata for BodyUnaryViewGenerator<_ZStackLayout>, (uint64_t)&type metadata for _ZStackLayout);
  v41[3] = v15;
  v41[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v16 = swift_allocObject();
  v41[0] = v16;
  *(void *)(v16 + 16) = partial apply for specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:);
  *(void *)(v16 + 24) = v14;
  *(void *)(v16 + 32) = v7;
  *(_DWORD *)(v16 + 40) = v8;
  *(void *)(v16 + 48) = v9;
  *(_DWORD *)(v16 + 56) = v21;
  *(_DWORD *)(v16 + 60) = v20;
  *(_DWORD *)(v16 + 64) = v19;
  *(_DWORD *)(v16 + 68) = v18;
  *(void *)(v16 + 72) = v10;
  uint64_t v28 = v7;
  int v29 = v8;
  uint64_t v30 = v9;
  int v31 = v21;
  int v32 = v20;
  int v33 = v19;
  int v34 = v18;
  uint64_t v35 = v10;
  uint64_t v36 = v26;
  uint64_t v37 = v25;
  int v38 = v24;
  uint64_t v39 = v23;
  char v40 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v41, &v28, 1, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  return swift_release();
}

uint64_t static _VariadicView_UnaryViewRoot._viewListCount(inputs:body:)()
{
  return 1;
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance _ZStackLayout(uint64_t a1)
{
}

void _VariadicView_ViewRoot<>.body(children:)()
{
}

void specialized static View.makeViewList(view:inputs:)(uint64_t a1, uint64_t a2)
{
  static DynamicPropertyCache.fields(of:)(MEMORY[0x263F8E628], (uint64_t)&v4);
  char v3 = v5;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v4) = v3;
  specialized static View.makeBody(view:inputs:fields:)();
}

{
  uint64_t v2;
  char v4;
  uint64_t v5;
  char v6;

  static DynamicPropertyCache.fields(of:)(v2, (uint64_t)&v5);
  uint64_t v4 = v6;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v5) = v4;
  specialized static View.makeBody(view:inputs:fields:)();
}

void sub_245D2F51C()
{
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  outlined retain of _ViewListInputs(v0);
  if (ShouldRecordTree)
  {
    AGSubgraphBeginTreeElement();
    specialized static View.makeViewList(view:inputs:)(v2, v0);
  }
  specialized static View.makeViewList(view:inputs:)(v2, v0);
}

void sub_245D2F690()
{
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  outlined retain of _ViewListInputs(v0);
  if (ShouldRecordTree)
  {
    AGSubgraphBeginTreeElement();
    specialized static View.makeViewList(view:inputs:)(v2, v0);
  }
  specialized static View.makeViewList(view:inputs:)(v2, v0);
}

uint64_t specialized static View.makeViewList(view:inputs:)(int a1, uint64_t a2)
{
  static DynamicPropertyCache.fields(of:)(v2, (uint64_t)&v22);
  long long v5 = v22;
  unsigned __int8 v6 = v23;
  unsigned int v7 = DWORD1(v23);
  long long v8 = *(_OWORD *)(a2 + 48);
  long long v18 = *(_OWORD *)(a2 + 32);
  long long v19 = v8;
  long long v20 = *(_OWORD *)(a2 + 64);
  char v21 = *(unsigned char *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v16 = *(_OWORD *)a2;
  long long v17 = v9;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v22) = v6;
  specialized static View.makeBody(view:inputs:fields:)(&v15, (uint64_t)&v22, a1, (uint64_t)&v16, v5, *((uint64_t *)&v5 + 1), v6 | ((unint64_t)v7 << 32));
  uint64_t v10 = v15;
  unint64_t v13 = *((void *)&v22 + 1);
  uint64_t v14 = v22;
  char v11 = v23;
  type metadata accessor for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>();
  long long v24 = v18;
  long long v25 = v19;
  long long v26 = v20;
  char v27 = v21;
  long long v22 = v16;
  long long v23 = v17;
  if (AGSubgraphShouldRecordTree())
  {
    outlined retain of _ViewListInputs((uint64_t)&v22);
    AGSubgraphBeginTreeElement();
    specialized static ModifiedContent<>._makeViewList(view:inputs:)(v10, (uint64_t)&v22, (void (*)(void))type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>, 32, (void (*)(uint64_t, uint64_t))specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:), (void (*)(uint64_t, uint64_t))specialized _ViewListOutputs.multiModifier<A>(_:inputs:));
    AGSubgraphEndTreeElement();
  }
  else
  {
    outlined retain of _ViewListInputs((uint64_t)&v22);
    specialized static ModifiedContent<>._makeViewList(view:inputs:)(v10, (uint64_t)&v22, (void (*)(void))type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>, 32, (void (*)(uint64_t, uint64_t))specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:), (void (*)(uint64_t, uint64_t))specialized _ViewListOutputs.multiModifier<A>(_:inputs:));
  }
  outlined release of _ViewListInputs((uint64_t)&v22);
  if ((v11 & 1) == 0)
  {
    LOBYTE(v15) = v6;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v5, *((uint64_t *)&v5 + 1), v6, v14, v13, (const char *)&type metadata for _IntelligenceSupport.AnimatingText, (void (*)(void))type metadata accessor for _IntelligenceSupport.AnimatingText.Type);
  }
  outlined release of _ViewListInputs((uint64_t)&v22);
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _VStackLayout@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)a1;
  int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  int v20 = *(_DWORD *)(a1 + 28);
  int v21 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 36);
  int v19 = *(_DWORD *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v25 = *(void *)(a1 + 56);
  uint64_t v26 = *(void *)(a1 + 48);
  int v24 = *(_DWORD *)(a1 + 64);
  uint64_t v23 = *(void *)(a1 + 72);
  char v22 = *(unsigned char *)(a1 + 80);
  unint64_t v11 = AGCreateWeakAttribute();
  int v12 = v11;
  unint64_t v13 = HIDWORD(v11);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = v12;
  *(_DWORD *)(v14 + 20) = v13;
  *(void *)(v14 + 24) = v4;
  *(void *)(v14 + 32) = a2;
  *(void *)(v14 + 40) = a3;
  type metadata accessor for UnaryElements<BodyUnaryViewGenerator<_ZStackLayout>>(0, &lazy cache variable for type metadata for UnaryElements<BodyUnaryViewGenerator<_VStackLayout>>, &lazy cache variable for type metadata for BodyUnaryViewGenerator<_VStackLayout>, (uint64_t)&type metadata for _VStackLayout);
  v41[3] = v15;
  v41[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v16 = swift_allocObject();
  v41[0] = v16;
  *(void *)(v16 + 16) = partial apply for specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:);
  *(void *)(v16 + 24) = v14;
  *(void *)(v16 + 32) = v7;
  *(_DWORD *)(v16 + 40) = v8;
  *(void *)(v16 + 48) = v9;
  *(_DWORD *)(v16 + 56) = v21;
  *(_DWORD *)(v16 + 60) = v20;
  *(_DWORD *)(v16 + 64) = v19;
  *(_DWORD *)(v16 + 68) = v18;
  *(void *)(v16 + 72) = v10;
  uint64_t v28 = v7;
  int v29 = v8;
  uint64_t v30 = v9;
  int v31 = v21;
  int v32 = v20;
  int v33 = v19;
  int v34 = v18;
  uint64_t v35 = v10;
  uint64_t v36 = v26;
  uint64_t v37 = v25;
  int v38 = v24;
  uint64_t v39 = v23;
  char v40 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v41, &v28, 1, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  return swift_release();
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance _VStackLayout(uint64_t a1)
{
}

uint64_t specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(int a1, uint64_t a2, uint64_t a3, char a4, char *a5, uint64_t a6)
{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (uint64_t)&type metadata for Rectangle.AsymmetricalInset, (void (*)(void))type metadata accessor for Rectangle.AsymmetricalInset.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (uint64_t)&type metadata for CombinedContentShape, (void (*)(void))type metadata accessor for CombinedContentShape.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (uint64_t)&type metadata for VariableBlurEffect, (void (*)(void))type metadata accessor for VariableBlurEffect.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (uint64_t)&type metadata for SummarySymbol, (void (*)(void))type metadata accessor for SummarySymbol.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, MEMORY[0x263F8E628], (void (*)(void))type metadata accessor for Never.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (uint64_t)&type metadata for ViewListArchivedAnimation.Effect, (void (*)(void))type metadata accessor for ViewListArchivedAnimation.Effect.Type);
}

uint64_t specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(int a1, uint64_t a2, uint64_t a3, char a4, char *a5, uint64_t a6, uint64_t a7, void (*a8)(void))
{
  HIDWORD(v10) = HIDWORD(a6);
  LOBYTE(v12) = a4;
  uint64_t v49 = a2;
  LODWORD(v13) = a1;
  uint64_t v14 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void **)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  long long v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.event.getter();
  uint64_t result = kdebug_is_enabled();
  if (!result) {
    return result;
  }
  uint64_t v47 = v17;
  if (one-time initialization token for _signpostLog != -1) {
LABEL_24:
  }
    swift_once();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    return result;
  }
  uint64_t v54 = (const char *)a7;
  a8(0);
  uint64_t v44 = String.init<A>(describing:)();
  a8 = v19;
  uint64_t v43 = specialized static Tracing.libraryName(defining:)();
  uint64_t v21 = v20;
  id v22 = (id)AGGraphGetAttributeGraph();
  uint64_t Counter = AGGraphGetCounter();

  if (v12)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v40 = v21;
  double v41 = a8;
  uint64_t v38 = v14;
  int v39 = v13;
  uint64_t v48 = a5;
  char v60 = 0;
  a7 = v49;
  outlined copy of DynamicPropertyCache.Fields.Layout();
  if (!HIDWORD(v10))
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  unint64_t v12 = 0;
  int v23 = 0;
  uint64_t v37 = (void (**)(char *, uint64_t))(v15 + 1);
  uint64_t v15 = (void *)(a7 + 48);
  int v24 = HIDWORD(v10) - 1;
  long long v36 = xmmword_2461D6DD0;
  uint64_t v46 = (HIDWORD(v10) - 1);
  a5 = v47;
  while (v48)
  {
    uint64_t v14 = (uint64_t)&v48[v23];
    if (v24 == v12) {
      int v23 = 0;
    }
    else {
      v23 += *(_DWORD *)(v14 + 8);
    }
    unint64_t v25 = *(void *)(a7 + 16);
    if (v12 == v25) {
      goto LABEL_19;
    }
    if (v12 >= v25)
    {
      __break(1u);
      goto LABEL_24;
    }
    a8 = (void (*)(void))*(v15 - 2);
    uint64_t v13 = *v15;
    uint64_t v10 = static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if (kdebug_is_enabled())
    {
      char v26 = OS_os_log.signpostsEnabled.getter();
      int v24 = v46;
      if (v26)
      {
        int v45 = v10;
        static OSSignpostID.exclusive.getter();
        _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, MEMORY[0x263F8E0F8]);
        uint64_t v27 = swift_allocObject();
        *(_OWORD *)(v27 + 16) = v36;
        uint64_t v28 = _typeName(_:qualified:)();
        a8 = v29;
        uint64_t v10 = MEMORY[0x263F8D310];
        *(void *)(v27 + 56) = MEMORY[0x263F8D310];
        unint64_t v30 = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v27 + 32) = v28;
        *(void *)(v27 + 40) = a8;
        uint64_t v31 = MEMORY[0x263F8D9D0];
        *(void *)(v27 + 96) = MEMORY[0x263F8D9D0];
        uint64_t v32 = MEMORY[0x263F8DA20];
        *(void *)(v27 + 64) = v30;
        *(void *)(v27 + 72) = v14;
        *(void *)(v27 + 136) = v10;
        *(void *)(v27 + 144) = v30;
        uint64_t v33 = v44;
        *(void *)(v27 + 104) = v32;
        *(void *)(v27 + 112) = v33;
        uint64_t v34 = v40;
        *(void *)(v27 + 120) = v41;
        *(void *)(v27 + 176) = v10;
        *(void *)(v27 + 184) = v30;
        *(void *)(v27 + 152) = v43;
        *(void *)(v27 + 160) = v34;
        *(void *)(v27 + 216) = MEMORY[0x263F8D6C8];
        *(void *)(v27 + 224) = MEMORY[0x263F8D750];
        *(void *)(v27 + 192) = v13;
        *(void *)(v27 + 256) = MEMORY[0x263F8E8F8];
        *(void *)(v27 + 264) = MEMORY[0x263F8E960];
        *(_DWORD *)(v27 + 232) = v39;
        *(void *)(v27 + 296) = v31;
        *(void *)(v27 + 304) = v32;
        if (Counter < 0) {
          goto LABEL_26;
        }
        *(void *)(v27 + 272) = Counter;
        char v59 = v45;
        uint64_t v57 = _signpostLog;
        char v58 = &dword_245728000;
        uint64_t v54 = "LinkCreate";
        uint64_t v55 = 10;
        char v56 = 2;
        id v51 = "Attached: %{public}@ [ %p ] to %{public}@ (in %{public}@) at offset +%d [%d] (%p)";
        uint64_t v52 = 81;
        char v53 = 2;
        uint64_t v50 = v27;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        (*v37)(a5, v38);
        swift_bridgeObjectRelease();
        a7 = v49;
        int v24 = v46;
        if (v60) {
          goto LABEL_19;
        }
      }
    }
    int v35 = v12;
    v15 += 4;
    ++v12;
    if (v24 == v35 && !v23) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_26:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(int a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  HIDWORD(v6) = HIDWORD(a6);
  LOBYTE(v8) = a4;
  uint64_t v46 = a2;
  LODWORD(v9) = a1;
  uint64_t v10 = type metadata accessor for OSSignpostID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (void *)((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  static os_signpost_type_t.event.getter();
  uint64_t result = kdebug_is_enabled();
  if ((result & 1) == 0) {
    return result;
  }
  if (one-time initialization token for _signpostLog != -1) {
LABEL_24:
  }
    swift_once();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    return result;
  }
  uint64_t v44 = v11;
  type metadata accessor for TypedElement<ViewListOptionsInput>(0, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
  id v51 = v15;
  type metadata accessor for SingleTapGesture<TappableEvent>.Type();
  uint64_t v43 = String.init<A>(describing:)();
  uint64_t v17 = v16;
  unint64_t v42 = specialized static Tracing.libraryName(defining:)();
  uint64_t v19 = v18;
  id v20 = (id)AGGraphGetAttributeGraph();
  uint64_t Counter = AGGraphGetCounter();

  if (v8)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v39 = v19;
  uint64_t v40 = v17;
  long long v36 = v13;
  uint64_t v37 = v10;
  int v38 = v9;
  uint64_t v45 = a5;
  char v57 = 0;
  outlined copy of DynamicPropertyCache.Fields.Layout();
  if (!HIDWORD(v6))
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  unint64_t v21 = 0;
  LODWORD(v10) = 0;
  int v35 = (void (**)(void *, uint64_t))(v44 + 8);
  uint64_t v13 = (void *)(v46 + 48);
  a5 = (HIDWORD(v6) - 1);
  long long v33 = xmmword_2461D6DD0;
  uint64_t v34 = a5;
  while (v45)
  {
    uint64_t v11 = v45 + (int)v10;
    if (a5 == v21) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = (*(_DWORD *)(v11 + 8) + v10);
    }
    unint64_t v22 = *(void *)(v46 + 16);
    if (v21 == v22) {
      goto LABEL_19;
    }
    if (v21 >= v22)
    {
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v8 = *(v13 - 2);
    uint64_t v9 = *v13;
    uint64_t v6 = static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if (kdebug_is_enabled() & 1) != 0 && (OS_os_log.signpostsEnabled.getter())
    {
      LODWORD(v44) = v6;
      int v23 = v36;
      static OSSignpostID.exclusive.getter();
      _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, MEMORY[0x263F8E0F8]);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = v33;
      uint64_t v25 = _typeName(_:qualified:)();
      uint64_t v8 = v26;
      uint64_t v6 = MEMORY[0x263F8D310];
      *(void *)(v24 + 56) = MEMORY[0x263F8D310];
      unint64_t v27 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v24 + 32) = v25;
      *(void *)(v24 + 40) = v8;
      uint64_t v28 = MEMORY[0x263F8D9D0];
      *(void *)(v24 + 96) = MEMORY[0x263F8D9D0];
      uint64_t v29 = MEMORY[0x263F8DA20];
      *(void *)(v24 + 64) = v27;
      *(void *)(v24 + 72) = v11;
      *(void *)(v24 + 136) = v6;
      *(void *)(v24 + 144) = v27;
      uint64_t v30 = v43;
      *(void *)(v24 + 104) = v29;
      *(void *)(v24 + 112) = v30;
      uint64_t v31 = v39;
      *(void *)(v24 + 120) = v40;
      *(void *)(v24 + 176) = v6;
      *(void *)(v24 + 184) = v27;
      *(void *)(v24 + 152) = v42;
      *(void *)(v24 + 160) = v31;
      *(void *)(v24 + 216) = MEMORY[0x263F8D6C8];
      *(void *)(v24 + 224) = MEMORY[0x263F8D750];
      *(void *)(v24 + 192) = v9;
      *(void *)(v24 + 256) = MEMORY[0x263F8E8F8];
      *(void *)(v24 + 264) = MEMORY[0x263F8E960];
      *(_DWORD *)(v24 + 232) = v38;
      *(void *)(v24 + 296) = v28;
      *(void *)(v24 + 304) = v29;
      if (Counter < 0) {
        goto LABEL_26;
      }
      *(void *)(v24 + 272) = Counter;
      char v56 = v44;
      uint64_t v54 = _signpostLog;
      uint64_t v55 = &dword_245728000;
      id v51 = "LinkCreate";
      uint64_t v52 = 10;
      char v53 = 2;
      uint64_t v48 = "Attached: %{public}@ [ %p ] to %{public}@ (in %{public}@) at offset +%d [%d] (%p)";
      uint64_t v49 = 81;
      char v50 = 2;
      uint64_t v47 = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      (*v35)(v23, v37);
      swift_bridgeObjectRelease();
      a5 = v34;
      if (v57) {
        goto LABEL_19;
      }
    }
    int v32 = v21;
    v13 += 4;
    ++v21;
    if (a5 == v32 && !v10) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_26:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  long long v32;
  uint64_t v33;
  void (**v34)(void *, uint64_t);
  void *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t Counter;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  char v49;
  const char *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  int *v54;
  char v55;
  char v56;

  HIDWORD(v6) = HIDWORD(a6);
  LOBYTE(v8) = a4;
  uint64_t v45 = a2;
  LODWORD(v9) = a1;
  uint64_t v10 = type metadata accessor for OSSignpostID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (void *)((char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  static os_signpost_type_t.event.getter();
  uint64_t result = kdebug_is_enabled();
  if ((result & 1) == 0) {
    return result;
  }
  if (one-time initialization token for _signpostLog != -1) {
LABEL_24:
  }
    swift_once();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    return result;
  }
  uint64_t v43 = v11;
  char v50 = (const char *)&type metadata for DistanceGesture;
  type metadata accessor for DistanceGesture.Type();
  unint64_t v42 = String.init<A>(describing:)();
  uint64_t v16 = v15;
  double v41 = specialized static Tracing.libraryName(defining:)();
  uint64_t v18 = v17;
  uint64_t v19 = (id)AGGraphGetAttributeGraph();
  uint64_t Counter = AGGraphGetCounter();

  if (v8)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  int v38 = v18;
  uint64_t v39 = v16;
  int v35 = v13;
  long long v36 = v10;
  uint64_t v37 = v9;
  uint64_t v44 = a5;
  char v56 = 0;
  outlined copy of DynamicPropertyCache.Fields.Layout();
  if (!HIDWORD(v6))
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  id v20 = 0;
  LODWORD(v10) = 0;
  uint64_t v34 = (void (**)(void *, uint64_t))(v43 + 8);
  uint64_t v13 = (void *)(v45 + 48);
  a5 = (HIDWORD(v6) - 1);
  int v32 = xmmword_2461D6DD0;
  long long v33 = a5;
  while (v44)
  {
    uint64_t v11 = v44 + (int)v10;
    if (a5 == v20) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = (*(_DWORD *)(v11 + 8) + v10);
    }
    unint64_t v21 = *(void *)(v45 + 16);
    if (v20 == v21) {
      goto LABEL_19;
    }
    if (v20 >= v21)
    {
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v8 = *(v13 - 2);
    uint64_t v9 = *v13;
    uint64_t v6 = static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if (kdebug_is_enabled() & 1) != 0 && (OS_os_log.signpostsEnabled.getter())
    {
      LODWORD(v43) = v6;
      unint64_t v22 = v35;
      static OSSignpostID.exclusive.getter();
      _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, MEMORY[0x263F8E0F8]);
      int v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = v32;
      uint64_t v24 = _typeName(_:qualified:)();
      uint64_t v8 = v25;
      uint64_t v6 = MEMORY[0x263F8D310];
      *(void *)(v23 + 56) = MEMORY[0x263F8D310];
      uint64_t v26 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v23 + 32) = v24;
      *(void *)(v23 + 40) = v8;
      unint64_t v27 = MEMORY[0x263F8D9D0];
      *(void *)(v23 + 96) = MEMORY[0x263F8D9D0];
      uint64_t v28 = MEMORY[0x263F8DA20];
      *(void *)(v23 + 64) = v26;
      *(void *)(v23 + 72) = v11;
      *(void *)(v23 + 136) = v6;
      *(void *)(v23 + 144) = v26;
      uint64_t v29 = v42;
      *(void *)(v23 + 104) = v28;
      *(void *)(v23 + 112) = v29;
      uint64_t v30 = v38;
      *(void *)(v23 + 120) = v39;
      *(void *)(v23 + 176) = v6;
      *(void *)(v23 + 184) = v26;
      *(void *)(v23 + 152) = v41;
      *(void *)(v23 + 160) = v30;
      *(void *)(v23 + 216) = MEMORY[0x263F8D6C8];
      *(void *)(v23 + 224) = MEMORY[0x263F8D750];
      *(void *)(v23 + 192) = v9;
      *(void *)(v23 + 256) = MEMORY[0x263F8E8F8];
      *(void *)(v23 + 264) = MEMORY[0x263F8E960];
      *(_DWORD *)(v23 + 232) = v37;
      *(void *)(v23 + 296) = v27;
      *(void *)(v23 + 304) = v28;
      if (Counter < 0) {
        goto LABEL_26;
      }
      *(void *)(v23 + 272) = Counter;
      uint64_t v55 = v43;
      char v53 = _signpostLog;
      uint64_t v54 = &dword_245728000;
      char v50 = "LinkCreate";
      id v51 = 10;
      uint64_t v52 = 2;
      uint64_t v47 = "Attached: %{public}@ [ %p ] to %{public}@ (in %{public}@) at offset +%d [%d] (%p)";
      uint64_t v48 = 81;
      uint64_t v49 = 2;
      uint64_t v46 = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      (*v34)(v22, v36);
      swift_bridgeObjectRelease();
      a5 = v33;
      if (v56) {
        goto LABEL_19;
      }
    }
    uint64_t v31 = v20;
    v13 += 4;
    ++v20;
    if (a5 == v31 && !v10) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_26:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(int a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for SafeAreaPaddingModifier, (void (*)(void))type metadata accessor for SafeAreaPaddingModifier.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for _ColorMonochromeEffect, (void (*)(void))type metadata accessor for _ColorMonochromeEffect.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for _ColorMultiplyEffect, (void (*)(void))type metadata accessor for _ColorMultiplyEffect.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for Rectangle, (void (*)(void))type metadata accessor for Rectangle.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for Rectangle._Inset, (void (*)(void))type metadata accessor for Rectangle._Inset.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for _TestApp.RootView, (void (*)(void))type metadata accessor for _TestApp.RootView.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for AnyShape, (void (*)(void))type metadata accessor for AnyShape.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for Ellipse, (void (*)(void))type metadata accessor for Ellipse.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for Ellipse._Inset, (void (*)(void))type metadata accessor for Ellipse._Inset.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for Capsule, (void (*)(void))type metadata accessor for Capsule.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for Capsule._Inset, (void (*)(void))type metadata accessor for Capsule._Inset.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for Circle, (void (*)(void))type metadata accessor for Circle.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for Circle._Inset, (void (*)(void))type metadata accessor for Circle._Inset.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for Path, (void (*)(void))type metadata accessor for Path.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for UnevenRoundedRectangle, (void (*)(void))type metadata accessor for UnevenRoundedRectangle.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for UnevenRoundedRectangle._Inset, (void (*)(void))type metadata accessor for UnevenRoundedRectangle._Inset.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for ContainerRelativeShape, (void (*)(void))type metadata accessor for ContainerRelativeShape.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for ContainerRelativeShape._Inset, (void (*)(void))type metadata accessor for ContainerRelativeShape._Inset.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol, (void (*)(void))type metadata accessor for _IntelligenceSupport.AnimatingSummarySymbol.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for _IntelligenceSupport.AnimatingText, (void (*)(void))type metadata accessor for _IntelligenceSupport.AnimatingText.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for EllipticalGradient, (void (*)(void))type metadata accessor for EllipticalGradient.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for RoundedRectangle, (void (*)(void))type metadata accessor for RoundedRectangle.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for RoundedRectangle._Inset, (void (*)(void))type metadata accessor for RoundedRectangle._Inset.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for AngularGradient, (void (*)(void))type metadata accessor for AngularGradient.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for RadialGradient, (void (*)(void))type metadata accessor for RadialGradient.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for LinearGradient, (void (*)(void))type metadata accessor for LinearGradient.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for _ShadowEffect, (void (*)(void))type metadata accessor for _ShadowEffect.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (const char *)&type metadata for MeshGradient, (void (*)(void))type metadata accessor for MeshGradient.Type);
}

uint64_t specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(int a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, const char *a7, void (*a8)(void))
{
  LOBYTE(v12) = a4;
  unint64_t v48 = a2;
  LODWORD(v13) = a1;
  uint64_t v14 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void **)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.event.getter();
  uint64_t result = kdebug_is_enabled();
  if (!result) {
    return result;
  }
  if (one-time initialization token for _signpostLog != -1) {
LABEL_24:
  }
    swift_once();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    return result;
  }
  char v53 = a7;
  a8(0);
  uint64_t v45 = String.init<A>(describing:)();
  a8 = v19;
  uint64_t v44 = specialized static Tracing.libraryName(defining:)();
  uint64_t v21 = v20;
  id v22 = (id)AGGraphGetAttributeGraph();
  uint64_t Counter = AGGraphGetCounter();

  if (v12)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v41 = v21;
  unint64_t v42 = a8;
  int v38 = v17;
  uint64_t v39 = v14;
  int v40 = v13;
  uint64_t v47 = a5;
  unint64_t v23 = HIDWORD(a6);
  char v59 = 0;
  a6 = v48;
  swift_bridgeObjectRetain();
  if (!v23)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  a7 = 0;
  LODWORD(v14) = 0;
  uint64_t v37 = (void (**)(char *, uint64_t))(v15 + 1);
  uint64_t v15 = (void *)(a6 + 48);
  a5 = (v23 - 1);
  long long v35 = xmmword_2461D6DD0;
  uint64_t v36 = a5;
  while (v47)
  {
    uint64_t v17 = (char *)(v47 + (int)v14);
    if (a5 == a7) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = (*((_DWORD *)v17 + 2) + v14);
    }
    uint64_t v24 = *(const char **)(a6 + 16);
    if (a7 == v24) {
      goto LABEL_19;
    }
    if (a7 >= v24)
    {
      __break(1u);
      goto LABEL_24;
    }
    a8 = (void (*)(void))*(v15 - 2);
    uint64_t v13 = *v15;
    LODWORD(v12) = static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if kdebug_is_enabled() && (OS_os_log.signpostsEnabled.getter())
    {
      int v46 = v12;
      uint64_t v25 = v38;
      static OSSignpostID.exclusive.getter();
      _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, MEMORY[0x263F8E0F8]);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = v35;
      uint64_t v27 = _typeName(_:qualified:)();
      a8 = v28;
      uint64_t v12 = MEMORY[0x263F8D310];
      *(void *)(v26 + 56) = MEMORY[0x263F8D310];
      unint64_t v29 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v26 + 32) = v27;
      *(void *)(v26 + 40) = a8;
      uint64_t v30 = MEMORY[0x263F8D9D0];
      *(void *)(v26 + 96) = MEMORY[0x263F8D9D0];
      uint64_t v31 = MEMORY[0x263F8DA20];
      *(void *)(v26 + 64) = v29;
      *(void *)(v26 + 72) = v17;
      *(void *)(v26 + 136) = v12;
      *(void *)(v26 + 144) = v29;
      uint64_t v32 = v45;
      *(void *)(v26 + 104) = v31;
      *(void *)(v26 + 112) = v32;
      uint64_t v33 = v41;
      *(void *)(v26 + 120) = v42;
      *(void *)(v26 + 176) = v12;
      *(void *)(v26 + 184) = v29;
      *(void *)(v26 + 152) = v44;
      *(void *)(v26 + 160) = v33;
      *(void *)(v26 + 216) = MEMORY[0x263F8D6C8];
      *(void *)(v26 + 224) = MEMORY[0x263F8D750];
      *(void *)(v26 + 192) = v13;
      *(void *)(v26 + 256) = MEMORY[0x263F8E8F8];
      *(void *)(v26 + 264) = MEMORY[0x263F8E960];
      *(_DWORD *)(v26 + 232) = v40;
      *(void *)(v26 + 296) = v30;
      *(void *)(v26 + 304) = v31;
      if (Counter < 0) {
        goto LABEL_26;
      }
      *(void *)(v26 + 272) = Counter;
      char v58 = v46;
      uint64_t v56 = _signpostLog;
      char v57 = &dword_245728000;
      char v53 = "LinkCreate";
      uint64_t v54 = 10;
      char v55 = 2;
      char v50 = "Attached: %{public}@ [ %p ] to %{public}@ (in %{public}@) at offset +%d [%d] (%p)";
      uint64_t v51 = 81;
      char v52 = 2;
      uint64_t v49 = v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      (*v37)(v25, v39);
      swift_bridgeObjectRelease();
      a6 = v48;
      a5 = v36;
      if (v59) {
        goto LABEL_19;
      }
    }
    int v34 = (int)a7;
    v15 += 4;
    ++a7;
    if (a5 == v34 && !v14) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_26:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static ViewModifierContentProvider.providerMakeViewList(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  long long v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v42[16] = *(_OWORD *)(a1 + 32);
  long long v43 = v4;
  long long v44 = *(_OWORD *)(a1 + 64);
  char v45 = *(unsigned char *)(a1 + 80);
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v41 = *(_OWORD *)a1;
  *(_OWORD *)unint64_t v42 = v5;
  outlined retain of _ViewListInputs(a1);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.getter(v3, &v32);
  swift_release();
  if (v32)
  {
    uint64_t v6 = *(void *)(v32 + 40);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t *))(v32 + 16);
    uint64_t v7 = *(void *)(v32 + 24);
    int v9 = *(unsigned __int8 *)(v32 + 32);
    outlined copy of BodyInputElement();
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    int v9 = 255;
  }
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v41, v6);
  swift_release();
  swift_release();
  if (v9)
  {
    if (v9 != 255)
    {
      uint64_t v32 = v41;
      int v33 = DWORD2(v41);
      uint64_t v34 = *(void *)v42;
      long long v35 = *(_OWORD *)&v42[8];
      uint64_t v36 = *(void *)&v42[24];
      long long v37 = v43;
      int v38 = v44;
      uint64_t v39 = *((void *)&v44 + 1);
      char v40 = v45;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      uint64_t v20 = swift_bridgeObjectRetain();
      v8(v20, &v32);
      outlined consume of BodyInputElement?((uint64_t)v8, v7, v9);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      return swift_release_n();
    }
    if ((BYTE8(v43) & 0x10) != 0)
    {
      uint64_t v32 = v41;
      int v33 = DWORD2(v41);
      uint64_t v34 = *(void *)v42;
      long long v35 = *(_OWORD *)&v42[8];
      uint64_t v36 = *(void *)&v42[24];
      long long v37 = v43;
      int v38 = v44;
      uint64_t v39 = *((void *)&v44 + 1);
      char v40 = v45;
      static _ViewListOutputs.nonEmptyParentViewList(inputs:)((uint64_t)&v32, a2);
    }
    else
    {
      uint64_t v30 = &type metadata for EmptyViewListElements;
      uint64_t v31 = &protocol witness table for EmptyViewListElements;
      uint64_t v32 = v41;
      int v33 = DWORD2(v41);
      uint64_t v34 = *(void *)v42;
      long long v35 = *(_OWORD *)&v42[8];
      uint64_t v36 = *(void *)&v42[24];
      long long v37 = v43;
      int v38 = v44;
      uint64_t v39 = *((void *)&v44 + 1);
      char v40 = v45;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v29, &v32, 0, a2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v10 = v41;
    int v11 = DWORD2(v41);
    uint64_t v12 = *(void *)v42;
    uint64_t v28 = a2;
    unsigned int v14 = *(_DWORD *)&v42[8];
    unsigned int v13 = *(_DWORD *)&v42[12];
    unsigned int v15 = *(_DWORD *)&v42[16];
    unsigned int v22 = *(_DWORD *)&v42[20];
    uint64_t v16 = *(void *)&v42[24];
    uint64_t v26 = *((void *)&v43 + 1);
    uint64_t v27 = v43;
    uint64_t v23 = *((void *)&v44 + 1);
    char v24 = v45;
    int v25 = v44;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v8;
    *(void *)(v17 + 24) = v7;
    type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<BodyUnaryViewGenerator<_ViewModifier_Content<SafeAreaPaddingModifier>>>, (uint64_t (*)(uint64_t))type metadata accessor for BodyUnaryViewGenerator<_ViewModifier_Content<SafeAreaPaddingModifier>>, (uint64_t)&protocol witness table for BodyUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
    uint64_t v30 = v18;
    uint64_t v31 = &protocol witness table for UnaryElements<A>;
    uint64_t v19 = swift_allocObject();
    v29[0] = v19;
    *(void *)(v19 + 16) = partial apply for closure #1 in static ViewModifierContentProvider.providerMakeViewList(view:inputs:);
    *(void *)(v19 + 24) = v17;
    *(void *)(v19 + 32) = v10;
    *(_DWORD *)(v19 + 40) = v11;
    *(void *)(v19 + 48) = v12;
    *(_DWORD *)(v19 + 56) = v14;
    *(_DWORD *)(v19 + 60) = v13;
    *(_DWORD *)(v19 + 64) = v15;
    *(_DWORD *)(v19 + 68) = v22;
    *(void *)(v19 + 72) = v16;
    uint64_t v32 = v10;
    int v33 = v11;
    uint64_t v34 = v12;
    *(void *)&long long v35 = __PAIR64__(v13, v14);
    *((void *)&v35 + 1) = __PAIR64__(v22, v15);
    uint64_t v36 = v16;
    *(void *)&long long v37 = v27;
    *((void *)&v37 + 1) = v26;
    int v38 = v25;
    uint64_t v39 = v23;
    char v40 = v24;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of BodyInputElement?((uint64_t)v8, v7, 0);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v29, &v32, 1, v28);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    swift_release();
    outlined consume of BodyInputElement?((uint64_t)v8, v7, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance GroupContainer@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v9 = *a1;
  uint64_t v10 = *a2;
  int v11 = *((_DWORD *)a2 + 2);
  uint64_t v12 = a2[2];
  int v13 = *((_DWORD *)a2 + 20);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a3;
  *(void *)(v14 + 24) = a4;
  uint64_t v20 = v10;
  int v21 = v11;
  uint64_t v22 = v12;
  long long v15 = *(_OWORD *)(a2 + 5);
  long long v23 = *(_OWORD *)(a2 + 3);
  long long v24 = v15;
  long long v25 = *(_OWORD *)(a2 + 7);
  uint64_t v26 = a2[9];
  int v27 = v13;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = thunk for @callee_guaranteed (@in_guaranteed _Graph, @in_guaranteed _ViewInputs) -> (@out _ViewListOutputs)partial apply;
  *(void *)(v16 + 24) = v14;
  *(void *)(v16 + 32) = v5;
  *(_DWORD *)(v16 + 40) = v9;
  swift_retain();
  static _ViewOutputs.multiView(inputs:body:)((uint64_t)&v20, (uint64_t)partial apply for specialized closure #1 in closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:), v16, a5);
  swift_release();
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v13 = *a1;
  long long v14 = *(_OWORD *)(a2 + 48);
  _DWORD v18[2] = *(_OWORD *)(a2 + 32);
  v18[3] = v14;
  float v18[4] = *(_OWORD *)(a2 + 64);
  int v19 = *(_DWORD *)(a2 + 80);
  long long v15 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v15;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)((uint64_t)partial apply for thunk for @callee_guaranteed (@in_guaranteed _Graph, @in_guaranteed _ViewInputs) -> (@out _ViewListOutputs), v16, (uint64_t)v18, v7, v13, a5, a6, a7);
  LOBYTE(a6) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a6) {
    __break(1u);
  }
  return result;
}

uint64_t static _VariadicView_MultiViewRoot._viewListCount(inputs:body:)(long long *a1, uint64_t (*a2)(long long *))
{
  int v2 = *((_DWORD *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 3);
  long long v5 = *a1;
  int v6 = v2;
  uint64_t v7 = v3;
  return a2(&v5);
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance GroupContainer()
{
}

void specialized static View.makeBody(view:inputs:fields:)()
{
  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v0._countAndFlagsBits = 0xD000000000000038;
    v0._object = (void *)0x800000024621DBE0;
    String.append(_:)(v0);
    v1._countAndFlagsBits = 0x726576654ELL;
    v1._object = (void *)0xE500000000000000;
    String.append(_:)(v1);
    v2._countAndFlagsBits = 0x6C63206120736920;
    v2._object = (void *)0xEC0000002E737361;
    String.append(_:)(v2);
  }
  else
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _HStackLayout@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)a1;
  int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  int v20 = *(_DWORD *)(a1 + 28);
  int v21 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 36);
  int v19 = *(_DWORD *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v25 = *(void *)(a1 + 56);
  uint64_t v26 = *(void *)(a1 + 48);
  int v24 = *(_DWORD *)(a1 + 64);
  uint64_t v23 = *(void *)(a1 + 72);
  char v22 = *(unsigned char *)(a1 + 80);
  unint64_t v11 = AGCreateWeakAttribute();
  int v12 = v11;
  unint64_t v13 = HIDWORD(v11);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = v12;
  *(_DWORD *)(v14 + 20) = v13;
  *(void *)(v14 + 24) = v4;
  *(void *)(v14 + 32) = a2;
  *(void *)(v14 + 40) = a3;
  type metadata accessor for UnaryElements<BodyUnaryViewGenerator<_ZStackLayout>>(0, &lazy cache variable for type metadata for UnaryElements<BodyUnaryViewGenerator<_HStackLayout>>, &lazy cache variable for type metadata for BodyUnaryViewGenerator<_HStackLayout>, (uint64_t)&type metadata for _HStackLayout);
  v41[3] = v15;
  v41[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v16 = swift_allocObject();
  v41[0] = v16;
  *(void *)(v16 + 16) = partial apply for specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:);
  *(void *)(v16 + 24) = v14;
  *(void *)(v16 + 32) = v7;
  *(_DWORD *)(v16 + 40) = v8;
  *(void *)(v16 + 48) = v9;
  *(_DWORD *)(v16 + 56) = v21;
  *(_DWORD *)(v16 + 60) = v20;
  *(_DWORD *)(v16 + 64) = v19;
  *(_DWORD *)(v16 + 68) = v18;
  *(void *)(v16 + 72) = v10;
  uint64_t v28 = v7;
  int v29 = v8;
  uint64_t v30 = v9;
  int v31 = v21;
  int v32 = v20;
  int v33 = v19;
  int v34 = v18;
  uint64_t v35 = v10;
  uint64_t v36 = v26;
  uint64_t v37 = v25;
  int v38 = v24;
  uint64_t v39 = v23;
  char v40 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v41, &v28, 1, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  return swift_release();
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance _HStackLayout(uint64_t a1)
{
}

uint64_t protocol witness for static _VariadicView_AnyImplicitRoot.visitType<A>(visitor:) in conformance _HStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _VariadicView_ImplicitRoot.visitType<A>(visitor:)(a1, a4, a2, (uint64_t)&protocol witness table for _HStackLayout, a3);
}

uint64_t _VariadicView.Tree.root.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _VariadicView.Tree.root.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_VariadicView.Tree.root.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _VariadicView.Tree.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t _VariadicView.Tree.content.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 44), a1);
}

uint64_t (*_VariadicView.Tree.content.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _VariadicView_Root.viewListOptions.getter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 8))();
  *a2 = result;
  return result;
}

uint64_t static _VariadicView_Root._viewListCount(inputs:body:)()
{
  return 0;
}

void static ViewListOptionsInput.defaultValue.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t Attribute = AGWeakAttributeGetAttribute();
  int v9 = Attribute;
  if (Attribute == *MEMORY[0x263F288F8])
  {
    *(void *)a4 = MEMORY[0x263F8EE78];
    *(_DWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 12) = Attribute;
  }
  else
  {
    MEMORY[0x270FA5388](Attribute);
    v16[2] = a2;
    void v16[3] = a3;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v10 = static CoreGlue.shared;
    long long v11 = *(_OWORD *)(a1 + 48);
    v17[2] = *(_OWORD *)(a1 + 32);
    v17[3] = v11;
    v17[4] = *(_OWORD *)(a1 + 64);
    int v18 = *(_DWORD *)(a1 + 80);
    int v19 = v9;
    long long v12 = *(_OWORD *)(a1 + 16);
    v17[0] = *(_OWORD *)a1;
    v17[1] = v12;
    unint64_t v13 = *(void (**)(int *, _OWORD *, uint64_t (*)(uint64_t, uint64_t *), void *, ValueMetadata *, unint64_t))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0xB0);
    unint64_t v14 = lazy protocol witness table accessor for type _HStackLayout and conformance _HStackLayout();
    id v15 = v10;
    v13(&v19, v17, partial apply for closure #1 in closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:), v16, &type metadata for _HStackLayout, v14);
  }
}

{
  uint64_t Attribute;
  int v9;
  void *v10;
  long long v11;
  long long v12;
  void (*v13)(int *, _OWORD *, uint64_t (*)(), void *, ValueMetadata *, unint64_t);
  unint64_t v14;
  id v15;
  void v16[4];
  _OWORD v17[5];
  int v18;
  int v19;

  uint64_t Attribute = AGWeakAttributeGetAttribute();
  int v9 = Attribute;
  if (Attribute == *MEMORY[0x263F288F8])
  {
    *(void *)a4 = MEMORY[0x263F8EE78];
    *(_DWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 12) = Attribute;
  }
  else
  {
    MEMORY[0x270FA5388](Attribute);
    v16[2] = a2;
    void v16[3] = a3;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v10 = static CoreGlue.shared;
    long long v11 = *(_OWORD *)(a1 + 48);
    v17[2] = *(_OWORD *)(a1 + 32);
    v17[3] = v11;
    v17[4] = *(_OWORD *)(a1 + 64);
    int v18 = *(_DWORD *)(a1 + 80);
    int v19 = v9;
    long long v12 = *(_OWORD *)(a1 + 16);
    v17[0] = *(_OWORD *)a1;
    v17[1] = v12;
    unint64_t v13 = *(void (**)(int *, _OWORD *, uint64_t (*)(), void *, ValueMetadata *, unint64_t))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0xB0);
    unint64_t v14 = lazy protocol witness table accessor for type _VStackLayout and conformance _VStackLayout();
    id v15 = v10;
    v13(&v19, v17, closure #1 in closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)partial apply, v16, &type metadata for _VStackLayout, v14);
  }
}

{
  uint64_t Attribute;
  int v9;
  void *v10;
  long long v11;
  long long v12;
  void (*v13)(int *, _OWORD *, uint64_t (*)(), void *, ValueMetadata *, unint64_t);
  unint64_t v14;
  id v15;
  void v16[4];
  _OWORD v17[5];
  int v18;
  int v19;

  uint64_t Attribute = AGWeakAttributeGetAttribute();
  int v9 = Attribute;
  if (Attribute == *MEMORY[0x263F288F8])
  {
    *(void *)a4 = MEMORY[0x263F8EE78];
    *(_DWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 12) = Attribute;
  }
  else
  {
    MEMORY[0x270FA5388](Attribute);
    v16[2] = a2;
    void v16[3] = a3;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v10 = static CoreGlue.shared;
    long long v11 = *(_OWORD *)(a1 + 48);
    v17[2] = *(_OWORD *)(a1 + 32);
    v17[3] = v11;
    v17[4] = *(_OWORD *)(a1 + 64);
    int v18 = *(_DWORD *)(a1 + 80);
    int v19 = v9;
    long long v12 = *(_OWORD *)(a1 + 16);
    v17[0] = *(_OWORD *)a1;
    v17[1] = v12;
    unint64_t v13 = *(void (**)(int *, _OWORD *, uint64_t (*)(), void *, ValueMetadata *, unint64_t))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0xB0);
    unint64_t v14 = lazy protocol witness table accessor for type _ZStackLayout and conformance _ZStackLayout();
    id v15 = v10;
    v13(&v19, v17, closure #1 in closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)partial apply, v16, &type metadata for _ZStackLayout, v14);
  }
}

uint64_t sub_245D37BF4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed _Graph, @in_guaranteed _ViewInputs) -> (@out _ViewListOutputs)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a6;
  *(void *)(v16 + 24) = a7;
  *(void *)(v16 + 32) = a1;
  *(void *)(v16 + 40) = a2;
  *(void *)(v16 + 48) = a4;
  *(_DWORD *)(v16 + 56) = a5;
  swift_retain();
  static _ViewOutputs.multiView(inputs:body:)(a3, (uint64_t)partial apply for closure #1 in closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:), v16, a8);

  return swift_release();
}

void specialized closure #1 in closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)(uint64_t a1, void (*a2)(void *__return_ptr), uint64_t a3, uint64_t a4)
{
  long long v6 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v14[16] = *(_OWORD *)(a1 + 32);
  long long v15 = v6;
  long long v16 = *(_OWORD *)(a1 + 64);
  int v17 = *(_DWORD *)(a1 + 80);
  long long v7 = *(_OWORD *)(a1 + 16);
  long long v13 = *(_OWORD *)a1;
  *(_OWORD *)unint64_t v14 = v7;
  a2(v12);
  int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 40);
  int v11 = *MEMORY[0x263F288F8];
  *(void *)&long long v13 = *(void *)a1;
  DWORD2(v13) = v8;
  *(void *)unint64_t v14 = v9;
  *(_OWORD *)&_OWORD v14[8] = *(_OWORD *)(a1 + 24);
  long long v15 = 0uLL;
  *(void *)&v14[24] = v10;
  LODWORD(v16) = v11;
  *((void *)&v16 + 1) = MEMORY[0x263F8EE88];
  LOBYTE(v17) = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListOutputs.makeAttribute(inputs:)((uint64_t *)&v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)v12);
  static DynamicPropertyCache.fields(of:)(a4, (uint64_t)&v13);
  LOBYTE(v9) = v14[0];
  outlined retain of _ViewInputs(a1);
  LOBYTE(v13) = v9;
  specialized static _VariadicView_ViewRoot.makeBody(root:list:inputs:fields:)();
}

void sub_245D37E70()
{
  uint64_t v1 = *(unsigned int *)(v0 - 176);
  _ViewInputs.implicitRootBodyInputs.getter(v0 - 176);
  if (AGSubgraphShouldRecordTree())
  {
    AGSubgraphBeginTreeElement();
    specialized static View.makeViewList(view:inputs:)(v1, v0 - 176);
  }
  specialized static View.makeViewList(view:inputs:)(v1, v0 - 176);
}

uint64_t closure #1 in closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *), uint64_t a4, uint64_t a5, int a6, unint64_t a7)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  unsigned int v10 = *(_DWORD *)(a2 + 24);
  unsigned int v11 = *(_DWORD *)(a2 + 28);
  unsigned int v13 = *(_DWORD *)(a2 + 32);
  unsigned int v12 = *(_DWORD *)(a2 + 36);
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v37 = *(void *)(a2 + 48);
  unsigned int v47 = *(_DWORD *)(a2 + 56);
  unsigned int v45 = *(_DWORD *)(a2 + 60);
  unsigned int v43 = *(_DWORD *)(a2 + 64);
  unsigned int v42 = *(_DWORD *)(a2 + 68);
  unsigned int v41 = *(_DWORD *)(a2 + 72);
  int v38 = *(_DWORD *)(a2 + 80);
  unsigned int v40 = *(_DWORD *)(a2 + 76);
  uint64_t v73 = *(void *)a2;
  uint64_t v7 = v73;
  LODWORD(v74) = v8;
  uint64_t v75 = v9;
  *(void *)&long long v76 = __PAIR64__(v11, v10);
  *((void *)&v76 + 1) = __PAIR64__(v12, v13);
  uint64_t v77 = v14;
  uint64_t v78 = v37;
  *(void *)&long long v79 = __PAIR64__(v45, v47);
  *((void *)&v79 + 1) = __PAIR64__(v42, v43);
  unint64_t v80 = __PAIR64__(v40, v41);
  int v81 = v38;
  a3(&v54, a1, &v73);
  int v15 = *MEMORY[0x263F288F8];
  uint64_t v73 = v7;
  LODWORD(v74) = v8;
  uint64_t v75 = v9;
  *(void *)&long long v76 = __PAIR64__(v11, v10);
  *((void *)&v76 + 1) = __PAIR64__(v12, v13);
  uint64_t v78 = 0;
  *(void *)&long long v79 = 0;
  uint64_t v77 = v14;
  DWORD2(v79) = v15;
  unint64_t v80 = MEMORY[0x263F8EE88];
  LOBYTE(v81) = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  int v16 = _ViewListOutputs.makeAttribute(inputs:)(&v73);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)&v54);
  static DynamicPropertyCache.fields(of:)(a7, (uint64_t)&v73);
  uint64_t v18 = v73;
  uint64_t v17 = v74;
  char v19 = v75;
  int v20 = HIDWORD(v75);
  uint64_t v73 = v7;
  LODWORD(v74) = v8;
  uint64_t v75 = v9;
  *(void *)&long long v76 = __PAIR64__(v11, v10);
  *((void *)&v76 + 1) = __PAIR64__(v12, v13);
  uint64_t v77 = v14;
  uint64_t v78 = v37;
  *(void *)&long long v79 = __PAIR64__(v45, v47);
  *((void *)&v79 + 1) = __PAIR64__(v42, v43);
  unint64_t v80 = __PAIR64__(v40, v41);
  int v81 = v38;
  int v52 = a6;
  uint64_t v44 = v18;
  uint64_t v46 = v17;
  uint64_t v54 = v18;
  uint64_t v55 = v17;
  char v48 = v19;
  LOBYTE(v56) = v19;
  int v34 = v20;
  HIDWORD(v56) = v20;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _VariadicView_ViewRoot.makeBody(root:list:inputs:fields:)(&v53, (uint64_t)&v63, &v52, v16, (uint64_t)&v73, &v54);
  unsigned int v49 = v53;
  uint64_t v32 = v63;
  uint64_t v33 = v64;
  char v39 = v65;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = v73;
  LODWORD(v55) = v74;
  uint64_t v56 = v75;
  long long v57 = v76;
  uint64_t v58 = v77;
  uint64_t v59 = v78;
  long long v60 = v79;
  unint64_t v61 = v80;
  int v62 = v81;
  _ViewInputs.implicitRootBodyInputs.getter((uint64_t)&v63);
  uint64_t v22 = v63;
  int v23 = v64;
  uint64_t v24 = v65;
  long long v36 = v66;
  uint64_t v25 = v67;
  uint64_t v26 = v68;
  uint64_t v27 = v69;
  int v35 = v70;
  unint64_t v28 = v71;
  char v29 = v72;
  if (AGSubgraphShouldRecordTree()) {
    AGSubgraphBeginTreeElement();
  }
  int v53 = v49;
  uint64_t v54 = v22;
  LODWORD(v55) = v23;
  uint64_t v56 = v24;
  long long v57 = v36;
  uint64_t v58 = v25;
  uint64_t v59 = v26;
  *(void *)&long long v60 = v27;
  DWORD2(v60) = v35;
  unint64_t v61 = v28;
  LOBYTE(v62) = v29;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v53, &v54, AssociatedTypeWitness, AssociatedConformanceWitness);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v49, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v39 & 1) == 0)
  {
    uint64_t v63 = v32;
    uint64_t v64 = v33;
    int v53 = a6;
    uint64_t v54 = v44;
    uint64_t v55 = v46;
    LOBYTE(v56) = v48;
    HIDWORD(v56) = v34;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v53, &v54, a7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

void specialized static _VariadicView_ViewRoot.makeBody(root:list:inputs:fields:)()
{
  if (AGTypeGetKind() - 2 < 4)
  {
    if ((id)AGSubgraphGetCurrent())
    {
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    __break(1u);
  }
  _StringGuts.grow(_:)(75);
  v0._countAndFlagsBits = 0xD00000000000003DLL;
  v0._object = (void *)0x800000024621FCA0;
  String.append(_:)(v0);
  v1._object = (void *)0x800000024621FCE0;
  v1._countAndFlagsBits = 0xD000000000000035;
  String.append(_:)(v1);
  v2._countAndFlagsBits = 0x6C63206120736920;
  v2._object = (void *)0xEC0000002E737361;
  String.append(_:)(v2);
LABEL_6:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _VariadicView_Children.list.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AnyTrackedValue(v1, a1);
}

uint64_t _VariadicView_Children.list.setter(long long *a1)
{
  __swift_destroy_boxed_opaque_existential_1(v1);

  return outlined init with take of ScrollStateRequest(a1, v1);
}

uint64_t (*_VariadicView_Children.list.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id _VariadicView_Children.contentSubgraph.getter()
{
  return *(id *)(v0 + 40);
}

void _VariadicView_Children.contentSubgraph.setter(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
}

uint64_t (*_VariadicView_Children.contentSubgraph.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _VariadicView_Children.transform.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t _VariadicView_Children.transform.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = v2;
  return result;
}

uint64_t (*_VariadicView_Children.transform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _VariadicView_Children.content.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of _VariadicView_Children(v1, a1);
}

uint64_t static _VariadicView_ViewRoot._viewListCount(inputs:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = a1[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[0] = v1;
  v8[1] = v2;
  int v9 = v3;
  uint64_t v10 = v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t static _VariadicView.Tree<>._viewListCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a3;
  uint64_t v25 = a5;
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  int v9 = *(_DWORD *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a4 + 8);
  unsigned int v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v13 = v12(a2, v11);
  uint64_t v14 = swift_retain();
  uint64_t v15 = specialized find<A>(_:key:)(v14);
  if (!v15 || (Swift::UInt value = v7, v13 != *(void *)(v15 + 72)))
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(0, &lazy cache variable for type metadata for TypedElement<ViewListOptionsInput>, (uint64_t)&type metadata for ViewListOptionsInput, (uint64_t)&protocol witness table for ViewListOptionsInput, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(void *)(swift_allocObject() + 72) = v13;
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ViewListOptionsInput, 0, v7).value;
  }
  uint64_t v17 = swift_release();
  v26[0] = value;
  v26[1] = v8;
  int v27 = v9;
  uint64_t v28 = v10;
  MEMORY[0x270FA5388](v17);
  void v21[2] = a2;
  v21[3] = v24;
  void v21[4] = a4;
  _OWORD v21[5] = v25;
  v21[6] = v7;
  v21[7] = v8;
  int v22 = v9;
  uint64_t v23 = v10;
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t (*)(uint64_t *), void *, uint64_t, uint64_t))(a4 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v19 = v18(v26, partial apply for closure #1 in static _VariadicView.Tree<>._viewListCount(inputs:), v21, a2, a4);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v19;
}

uint64_t closure #1 in static _VariadicView.Tree<>._viewListCount(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  int v13 = *((_DWORD *)a1 + 4);
  uint64_t v14 = a1[3];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v15 = specialized find<A>(_:key:)(a2);
  if (v15) {
    uint64_t v16 = *(void *)(v15 + 72);
  }
  else {
    uint64_t v16 = 0;
  }
  swift_bridgeObjectRelease();
  swift_release_n();
  v19[0] = v11;
  v19[1] = v16 | v12;
  int v20 = v13;
  uint64_t v21 = v14;
  uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(a9 + 40))(v19, a7, a9);
  swift_bridgeObjectRelease();
  swift_release();
  return v17;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance <> _VariadicView.Tree<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static _VariadicView.Tree<>._viewListCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t _ViewInputs.implicitRootType.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    int v3 = (uint64_t *)(v2 + 72);
  }
  else
  {
    int v3 = (uint64_t *)&static ImplicitRootType.defaultValue;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v4 = *v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return v4;
}

uint64_t key path getter for _ViewInputs.implicitRootType : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _ViewInputs.implicitRootType.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _ViewInputs.implicitRootType : _ViewInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t (*_ViewInputs.implicitRootType.modify(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    long long v6 = (uint64_t *)(v5 + 72);
    uint64_t v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    long long v6 = (uint64_t *)&static ImplicitRootType.defaultValue;
    uint64_t v7 = (uint64_t *)&off_26B0F1518;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v8 = *v7;
  uint64_t v9 = *v6;
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  *uint64_t v3 = v9;
  v3[1] = v8;
  return _ViewInputs.implicitRootType.modify;
}

uint64_t _ViewListInputs.implicitRootType.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(v2 + 72);
  }
  else
  {
    uint64_t v3 = (uint64_t *)&static ImplicitRootType.defaultValue;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v4 = *v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return v4;
}

uint64_t key path getter for _ViewListInputs.implicitRootType : _ViewListInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _ViewListInputs.implicitRootType.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t _ViewListInputs.implicitRootType.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

uint64_t (*_ViewListInputs.implicitRootType.modify(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    long long v6 = (uint64_t *)(v5 + 72);
    uint64_t v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    long long v6 = (uint64_t *)&static ImplicitRootType.defaultValue;
    uint64_t v7 = (uint64_t *)&off_26B0F1518;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v8 = *v7;
  uint64_t v9 = *v6;
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  *uint64_t v3 = v9;
  v3[1] = v8;
  return _ViewInputs.implicitRootType.modify;
}

void _ViewInputs.implicitRootType.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[4];
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();

  free(v1);
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance ImplicitRootType@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = static ImplicitRootType.defaultValue;
  *a1 = *(_OWORD *)&static ImplicitRootType.defaultValue;
  return result;
}

uint64_t specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (double *)&v19);
  unint64_t v14 = v19;
  uint64_t v16 = v20;
  uint64_t v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    unint64_t v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    unint64_t v20 = v14;
    int v21 = v16;
    int v22 = v15;
    int v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
    type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags> and conformance DynamicBody<A, B>, (void (*)(uint64_t))type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v18 = v16 | (v15 << 32);
  }
  else
  {
    unint64_t v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    unint64_t v14 = 0;
    uint64_t v18 = 0;
  }
  *a1 = result;
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v18;
  *(unsigned char *)(a2 + 16) = v15 == 0;
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  uint64_t v24 = *MEMORY[0x263EF8340];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (double *)&v19);
  unint64_t v14 = v19;
  uint64_t v16 = v20;
  uint64_t v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    unint64_t v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    unint64_t v20 = v14;
    int v21 = v16;
    int v22 = v15;
    int v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
    type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>();
    lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags> and conformance DynamicBody<A, B>, (void (*)(uint64_t))type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v18 = v16 | (v15 << 32);
  }
  else
  {
    unint64_t v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>();
    lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    unint64_t v14 = 0;
    uint64_t v18 = 0;
  }
  *a1 = result;
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v18;
  *(unsigned char *)(a2 + 16) = v15 == 0;
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  uint64_t v24 = *MEMORY[0x263EF8340];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (double *)&v19);
  unint64_t v14 = v19;
  uint64_t v16 = v20;
  uint64_t v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    unint64_t v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    unint64_t v20 = v14;
    int v21 = v16;
    int v22 = v15;
    int v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
    type metadata accessor for DynamicBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type DynamicBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags> and conformance DynamicBody<A, B>, (void (*)(uint64_t))type metadata accessor for DynamicBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v18 = v16 | (v15 << 32);
  }
  else
  {
    unint64_t v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    unint64_t v14 = 0;
    uint64_t v18 = 0;
  }
  *a1 = result;
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v18;
  *(unsigned char *)(a2 + 16) = v15 == 0;
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  uint64_t v24 = *MEMORY[0x263EF8340];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (double *)&v19);
  unint64_t v14 = v19;
  uint64_t v16 = v20;
  uint64_t v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    unint64_t v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    unint64_t v20 = v14;
    int v21 = v16;
    int v22 = v15;
    int v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
    type metadata accessor for DynamicBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>();
    lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type DynamicBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags> and conformance DynamicBody<A, B>, (void (*)(uint64_t))type metadata accessor for DynamicBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v18 = v16 | (v15 << 32);
  }
  else
  {
    unint64_t v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>();
    lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    unint64_t v14 = 0;
    uint64_t v18 = 0;
  }
  *a1 = result;
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v18;
  *(unsigned char *)(a2 + 16) = v15 == 0;
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  uint64_t v24 = *MEMORY[0x263EF8340];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (double *)&v19);
  unint64_t v14 = v19;
  uint64_t v16 = v20;
  uint64_t v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    unint64_t v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    unint64_t v20 = v14;
    int v21 = v16;
    int v22 = v15;
    int v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>();
    type metadata accessor for DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>, (void (*)(uint64_t))type metadata accessor for DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v18 = v16 | (v15 << 32);
  }
  else
  {
    unint64_t v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>();
    type metadata accessor for StaticBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    unint64_t v14 = 0;
    uint64_t v18 = 0;
  }
  *a1 = result;
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v18;
  *(unsigned char *)(a2 + 16) = v15 == 0;
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  uint64_t v24 = *MEMORY[0x263EF8340];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (double *)&v19);
  unint64_t v14 = v19;
  uint64_t v16 = v20;
  uint64_t v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    unint64_t v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    unint64_t v20 = v14;
    int v21 = v16;
    int v22 = v15;
    int v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>();
    type metadata accessor for DynamicBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>();
    lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type DynamicBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags> and conformance DynamicBody<A, B>, (void (*)(uint64_t))type metadata accessor for DynamicBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v18 = v16 | (v15 << 32);
  }
  else
  {
    unint64_t v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>();
    type metadata accessor for StaticBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>();
    lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    unint64_t v14 = 0;
    uint64_t v18 = 0;
  }
  *a1 = result;
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v18;
  *(unsigned char *)(a2 + 16) = v15 == 0;
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  uint64_t v24 = *MEMORY[0x263EF8340];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (double *)&v19);
  unint64_t v14 = v19;
  uint64_t v16 = v20;
  uint64_t v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    unint64_t v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    unint64_t v20 = v14;
    int v21 = v16;
    int v22 = v15;
    int v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>();
    type metadata accessor for DynamicBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type DynamicBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags> and conformance DynamicBody<A, B>, (void (*)(uint64_t))type metadata accessor for DynamicBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v18 = v16 | (v15 << 32);
  }
  else
  {
    unint64_t v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>();
    type metadata accessor for StaticBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    unint64_t v14 = 0;
    uint64_t v18 = 0;
  }
  *a1 = result;
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v18;
  *(unsigned char *)(a2 + 16) = v15 == 0;
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  uint64_t v24 = *MEMORY[0x263EF8340];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (double *)&v19);
  unint64_t v14 = v19;
  uint64_t v16 = v20;
  uint64_t v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    unint64_t v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    unint64_t v20 = v14;
    int v21 = v16;
    int v22 = v15;
    int v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>();
    type metadata accessor for DynamicBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>();
    lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type DynamicBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags> and conformance DynamicBody<A, B>, (void (*)(uint64_t))type metadata accessor for DynamicBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v18 = v16 | (v15 << 32);
  }
  else
  {
    unint64_t v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>();
    type metadata accessor for StaticBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>();
    lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    unint64_t v14 = 0;
    uint64_t v18 = 0;
  }
  *a1 = result;
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v18;
  *(unsigned char *)(a2 + 16) = v15 == 0;
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  uint64_t v24 = *MEMORY[0x263EF8340];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (double *)&v19);
  unint64_t v14 = v19;
  uint64_t v16 = v20;
  uint64_t v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    unint64_t v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    unint64_t v20 = v14;
    int v21 = v16;
    int v22 = v15;
    int v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>();
    type metadata accessor for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>(0, &lazy cache variable for type metadata for DynamicBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, AsyncThreadFlags>, (uint64_t)&type metadata for AsyncThreadFlags, (uint64_t)&protocol witness table for AsyncThreadFlags, (uint64_t (*)(uint64_t, void *))type metadata accessor for DynamicBody);
    lazy protocol witness table accessor for type StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type DynamicBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, AsyncThreadFlags> and conformance DynamicBody<A, B>, &lazy cache variable for type metadata for DynamicBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, AsyncThreadFlags>, (uint64_t (*)(uint64_t, void *))type metadata accessor for DynamicBody);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v18 = v16 | (v15 << 32);
  }
  else
  {
    unint64_t v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>();
    type metadata accessor for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>(0, &lazy cache variable for type metadata for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, AsyncThreadFlags>, (uint64_t)&type metadata for AsyncThreadFlags, (uint64_t)&protocol witness table for AsyncThreadFlags, (uint64_t (*)(uint64_t, void *))type metadata accessor for StaticBody);
    lazy protocol witness table accessor for type StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, AsyncThreadFlags> and conformance StaticBody<A, B>, &lazy cache variable for type metadata for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, AsyncThreadFlags>, (uint64_t (*)(uint64_t, void *))type metadata accessor for StaticBody);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    unint64_t v14 = 0;
    uint64_t v18 = 0;
  }
  *a1 = result;
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v18;
  *(unsigned char *)(a2 + 16) = v15 == 0;
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  uint64_t v24 = *MEMORY[0x263EF8340];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (double *)&v19);
  unint64_t v14 = v19;
  uint64_t v16 = v20;
  uint64_t v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    unint64_t v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    unint64_t v20 = v14;
    int v21 = v16;
    int v22 = v15;
    int v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>();
    type metadata accessor for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>(0, &lazy cache variable for type metadata for DynamicBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>, (uint64_t)&type metadata for MainThreadFlags, (uint64_t)&protocol witness table for MainThreadFlags, (uint64_t (*)(uint64_t, void *))type metadata accessor for DynamicBody);
    lazy protocol witness table accessor for type StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type DynamicBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags> and conformance DynamicBody<A, B>, &lazy cache variable for type metadata for DynamicBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>, (uint64_t (*)(uint64_t, void *))type metadata accessor for DynamicBody);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v18 = v16 | (v15 << 32);
  }
  else
  {
    unint64_t v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>();
    type metadata accessor for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>(0, &lazy cache variable for type metadata for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>, (uint64_t)&type metadata for MainThreadFlags, (uint64_t)&protocol witness table for MainThreadFlags, (uint64_t (*)(uint64_t, void *))type metadata accessor for StaticBody);
    lazy protocol witness table accessor for type StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags> and conformance StaticBody<A, B>, &lazy cache variable for type metadata for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>, (uint64_t (*)(uint64_t, void *))type metadata accessor for StaticBody);
    uint64_t result = Attribute.init<A>(body:value:flags:update:)();
    unint64_t v14 = 0;
    uint64_t v18 = 0;
  }
  *a1 = result;
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v18;
  *(unsigned char *)(a2 + 16) = v15 == 0;
  return result;
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance _LayoutRoot<A>()
{
}

uint64_t specialized static ModifiedContent<>._makeViewList(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>(0, (unint64_t *)&lazy cache variable for type metadata for _ForegroundStyleModifier2<AngularGradient, Color>, (uint64_t (*)(void, void *))type metadata accessor for _ForegroundStyleModifier2);
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v5 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      goto LABEL_9;
    }
LABEL_12:
    unint64_t v7 = *(void *)a1;
    uint64_t v8 = *(void *)(a1 + 16);
    int v20 = *(_DWORD *)(a1 + 8);
    int v21 = *(_DWORD *)(a1 + 36);
    uint64_t v9 = *(void *)(a1 + 40);
    int v19 = *(_DWORD *)(a1 + 32) | 0x20;
    uint64_t v10 = *(void *)(a1 + 24);
    swift_beginAccess();
    unint64_t v24 = __PAIR64__(*(_DWORD *)(v8 + 16), OffsetAttribute2);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>(0, &lazy cache variable for type metadata for _ForegroundStyleModifier2<AngularGradient, Color>.ForegroundStyleEnvironment, (uint64_t (*)(void, void *))type metadata accessor for _ForegroundStyleModifier2.ForegroundStyleEnvironment);
    lazy protocol witness table accessor for type _ForegroundStyleModifier2<AngularGradient, Color>.ForegroundStyleEnvironment and conformance _ForegroundStyleModifier2<A, B>.ForegroundStyleEnvironment();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    int v11 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v12 = MEMORY[0x263F8EE78];
    unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
    uint64_t v14 = swift_allocObject();
    *(_DWORD *)(v14 + 16) = v11;
    *(void *)(v14 + 24) = v12;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    *(_WORD *)(v14 + 80) = 256;
    *(void *)(v14 + 88) = v13;
    swift_release();
    int v22 = ShouldRecordTree;
    uint64_t v16 = *(void *)(a1 + 48);
    uint64_t v15 = *(void *)(a1 + 56);
    int v17 = *(_DWORD *)(a1 + 64);
    uint64_t v18 = *(void *)(a1 + 72);
    LOBYTE(v12) = *(unsigned char *)(a1 + 80);
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    outlined retain of _ViewListInputs(a1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v24 = v7;
    int v25 = v20;
    uint64_t v26 = v14;
    uint64_t v27 = v10;
    int v28 = v19;
    int v29 = v21;
    uint64_t v30 = v9;
    uint64_t v31 = v16;
    uint64_t v32 = v15;
    int v33 = v17;
    uint64_t v34 = v18;
    char v35 = v12;
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)((uint64_t *)&v24, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    uint64_t result = swift_release_n();
    if (!v22) {
      return result;
    }
    return AGSubgraphEndTreeElement();
  }
  if (static Semantics.forced >= v5) {
    goto LABEL_12;
  }
LABEL_9:
  specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)((uint64_t *)a1, a2);
  uint64_t result = specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(OffsetAttribute2, (long long *)a1);
  if (ShouldRecordTree) {
    return AGSubgraphEndTreeElement();
  }
  return result;
}

{
  unsigned int OffsetAttribute2;
  int ShouldRecordTree;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t result;
  int v17;
  int v18;
  int v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  long long v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  uint64_t v32 = *MEMORY[0x263EF8340];
  type metadata accessor for ChildEnvironment<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unsigned int v5 = *(void *)a1;
  long long v6 = *(void *)(a1 + 16);
  uint64_t v18 = *(_DWORD *)(a1 + 8);
  int v19 = *(_DWORD *)(a1 + 36);
  unint64_t v7 = *(void *)(a1 + 40);
  int v17 = *(_DWORD *)(a1 + 32) | 0x20;
  uint64_t v8 = *(void *)(a1 + 24);
  swift_beginAccess();
  int v21 = __PAIR64__(*(_DWORD *)(v6 + 16), OffsetAttribute2);
  int v22 = 0;
  int v23 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _ViewListInputs(a1);
  type metadata accessor for ChildEnvironment<Font?>(0, &lazy cache variable for type metadata for ChildEnvironment<Font?>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for ChildEnvironment);
  lazy protocol witness table accessor for type ChildEnvironment<Font?> and conformance ChildEnvironment<A>();
  uint64_t v9 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v10 = MEMORY[0x263F8EE78];
  int v11 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v12 = swift_allocObject();
  *(_DWORD *)(v12 + 16) = v9;
  *(void *)(v12 + 24) = v10;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_WORD *)(v12 + 80) = 256;
  *(void *)(v12 + 88) = v11;
  swift_release();
  unint64_t v13 = *(void *)(a1 + 72);
  uint64_t v14 = *(unsigned char *)(a1 + 80);
  uint64_t v15 = *(_DWORD *)(a1 + 64);
  int v21 = v5;
  LODWORD(v22) = v18;
  int v23 = v12;
  unint64_t v24 = v8;
  int v25 = v17;
  uint64_t v26 = v19;
  uint64_t v27 = v7;
  int v28 = *(_OWORD *)(a1 + 48);
  int v29 = v15;
  uint64_t v30 = v13;
  uint64_t v31 = v14;
  specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)((uint64_t)&v21, a2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (ShouldRecordTree) {
    return AGSubgraphEndTreeElement();
  }
  return result;
}

{
  uint64_t OffsetAttribute2;
  long long v5;
  long long v6;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  char v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  char v21;

  type metadata accessor for TypedElement<ViewListOptionsInput>(0, &lazy cache variable for type metadata for _ValueTransactionModifier<Bool>, MEMORY[0x263F8D4F8], MEMORY[0x263F8D510], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ValueTransactionModifier);
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  if (AGSubgraphShouldRecordTree())
  {
    AGSubgraphBeginTreeElement();
    unsigned int v5 = *(_OWORD *)(a1 + 48);
    uint64_t v12 = *(_OWORD *)(a1 + 32);
    unint64_t v13 = v5;
    uint64_t v14 = *(_OWORD *)(a1 + 64);
    uint64_t v15 = *(unsigned char *)(a1 + 80);
    long long v6 = *(_OWORD *)(a1 + 16);
    uint64_t v10 = *(_OWORD *)a1;
    int v11 = v6;
    outlined retain of _ViewListInputs(a1);
    specialized static _ValueTransactionModifier._makeInputs(modifier:inputs:)(OffsetAttribute2, (uint64_t)&v10);
    uint64_t v18 = v12;
    int v19 = v13;
    int v20 = v14;
    int v21 = v15;
    uint64_t v16 = v10;
    int v17 = v11;
    specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)(&v16, a2);
    outlined release of _ViewListInputs((uint64_t)&v16);
    return AGSubgraphEndTreeElement();
  }
  else
  {
    uint64_t v8 = *(_OWORD *)(a1 + 48);
    uint64_t v12 = *(_OWORD *)(a1 + 32);
    unint64_t v13 = v8;
    uint64_t v14 = *(_OWORD *)(a1 + 64);
    uint64_t v15 = *(unsigned char *)(a1 + 80);
    uint64_t v9 = *(_OWORD *)(a1 + 16);
    uint64_t v10 = *(_OWORD *)a1;
    int v11 = v9;
    outlined retain of _ViewListInputs(a1);
    specialized static _ValueTransactionModifier._makeInputs(modifier:inputs:)(OffsetAttribute2, (uint64_t)&v10);
    uint64_t v18 = v12;
    int v19 = v13;
    int v20 = v14;
    int v21 = v15;
    uint64_t v16 = v10;
    int v17 = v11;
    specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)(&v16, a2);
    return outlined release of _ViewListInputs((uint64_t)&v16);
  }
}

uint64_t specialized static ModifiedContent<>._makeViewList(view:inputs:)(uint64_t a1, long long *a2)
{
  return specialized static ModifiedContent<>._makeViewList(view:inputs:)(a1, a2, 264, (void (*)(long long *, uint64_t))specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:));
}

uint64_t specialized static ModifiedContent<>._makeViewList(view:inputs:)(uint64_t a1, long long *a2, uint64_t a3, void (*a4)(long long *, uint64_t))
{
  type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>();
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  if (AGSubgraphShouldRecordTree())
  {
    AGSubgraphBeginTreeElement();
    a4(a2, a1);
    specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(OffsetAttribute2, a2);
    return AGSubgraphEndTreeElement();
  }
  else
  {
    a4(a2, a1);
    return specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(OffsetAttribute2, a2);
  }
}

uint64_t specialized static ModifiedContent<>._makeViewList(view:inputs:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, void (*a5)(uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t))
{
  a3(0);
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  if (AGSubgraphShouldRecordTree())
  {
    AGSubgraphBeginTreeElement();
    a5(a2, a1);
    a6(OffsetAttribute2, a2);
    return AGSubgraphEndTreeElement();
  }
  else
  {
    a5(a2, a1);
    return ((uint64_t (*)(uint64_t, uint64_t))a6)(OffsetAttribute2, a2);
  }
}

uint64_t specialized static ModifiedContent<>._makeViewList(view:inputs:)@<X0>(long long *a1@<X1>, uint64_t a2@<X8>)
{
  type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>();
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  char v6 = ShouldRecordTree;
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  type metadata accessor for ViewBodyAccessor<SummarySymbol>(0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SafeAreaPaddingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier, (uint64_t)&type metadata for SafeAreaPaddingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ViewModifier_Content);
  AGGraphCreateOffsetAttribute2();
  if (v6)
  {
    AGSubgraphBeginTreeElement();
    specialized static ViewModifierContentProvider.providerMakeViewList(view:inputs:)((uint64_t)a1, a2);
    AGSubgraphEndTreeElement();
    specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(OffsetAttribute2, a1);
    return AGSubgraphEndTreeElement();
  }
  else
  {
    specialized static ViewModifierContentProvider.providerMakeViewList(view:inputs:)((uint64_t)a1, a2);
    return specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(OffsetAttribute2, a1);
  }
}

uint64_t specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  AGGraphCreateOffsetAttribute2();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v5 = AGCreateWeakAttribute();
  int v6 = v5;
  unint64_t v7 = HIDWORD(v5);
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = a1[2];
  uint64_t v11 = a1[5];
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<Image>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<Image>, (uint64_t)&type metadata for Image, (uint64_t)&protocol witness table for Image);
  v19[3] = v12;
  float v19[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v13 = swift_allocObject();
  v19[0] = v13;
  *(_DWORD *)(v13 + 16) = v6;
  *(_DWORD *)(v13 + 20) = v7;
  *(void *)(v13 + 24) = v8;
  *(_DWORD *)(v13 + 32) = v9;
  *(void *)(v13 + 40) = v10;
  *(_OWORD *)(v13 + 48) = *(_OWORD *)(a1 + 3);
  *(void *)(v13 + 64) = v11;
  long long v14 = *((_OWORD *)a1 + 3);
  v17[2] = *((_OWORD *)a1 + 2);
  v17[3] = v14;
  v17[4] = *((_OWORD *)a1 + 4);
  char v18 = *((unsigned char *)a1 + 80);
  long long v15 = *((_OWORD *)a1 + 1);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v19, (uint64_t *)v17, 1, a2);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  if (ShouldRecordTree) {
    return AGSubgraphEndTreeElement();
  }
  return result;
}

{
  int ShouldRecordTree;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;
  long long v15;
  uint64_t result;
  _OWORD v17[5];
  char v18;
  void v19[5];

  AGGraphCreateOffsetAttribute2();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v5 = AGCreateWeakAttribute();
  int v6 = v5;
  unint64_t v7 = HIDWORD(v5);
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = a1[2];
  uint64_t v11 = a1[5];
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<Text>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<Text>, (uint64_t)&type metadata for Text, (uint64_t)&protocol witness table for Text);
  v19[3] = v12;
  float v19[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v13 = swift_allocObject();
  v19[0] = v13;
  *(_DWORD *)(v13 + 16) = v6;
  *(_DWORD *)(v13 + 20) = v7;
  *(void *)(v13 + 24) = v8;
  *(_DWORD *)(v13 + 32) = v9;
  *(void *)(v13 + 40) = v10;
  *(_OWORD *)(v13 + 48) = *(_OWORD *)(a1 + 3);
  *(void *)(v13 + 64) = v11;
  long long v14 = *((_OWORD *)a1 + 3);
  v17[2] = *((_OWORD *)a1 + 2);
  v17[3] = v14;
  v17[4] = *((_OWORD *)a1 + 4);
  char v18 = *((unsigned char *)a1 + 80);
  long long v15 = *((_OWORD *)a1 + 1);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v19, (uint64_t *)v17, 1, a2);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  if (ShouldRecordTree) {
    return AGSubgraphEndTreeElement();
  }
  return result;
}

uint64_t specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _s7SwiftUI15ModifiedContentVyAA13SummarySymbol33_5039765D26D33F565D3CDFCA69D19B23LLVAA25_ValueTransactionModifierVySdGGMaTm_0(0, &lazy cache variable for type metadata for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, &lazy cache variable for type metadata for _ValueTransactionModifier<Bool>, MEMORY[0x263F8D4F8], MEMORY[0x263F8D510]);
  AGGraphCreateOffsetAttribute2();
  if (AGSubgraphShouldRecordTree())
  {
    AGSubgraphBeginTreeElement();
    specialized static ModifiedContent<>._makeViewList(view:inputs:)(a1, a2);
    return AGSubgraphEndTreeElement();
  }
  else
  {
    return specialized static ModifiedContent<>._makeViewList(view:inputs:)(a1, a2);
  }
}

uint64_t specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  long long v6 = a1[2];
  v9[1] = a1[1];
  v9[2] = v6;
  v9[0] = *a1;
  int v7 = OffsetAttribute2;
  if ((BYTE4(v6) & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of _GraphInputs((uint64_t)v9);
    type metadata accessor for TypedElement<ViewListOptionsInput>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<SummarySymbol>, (uint64_t)&type metadata for SummarySymbol, (uint64_t)&protocol witness table for SummarySymbol, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>();
    int v7 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
    outlined release of _GraphInputs((uint64_t)v9);
  }
  uint64_t result = specialized static View.makeViewList(view:inputs:)(v7, (uint64_t)a1, a2);
  if (ShouldRecordTree) {
    return AGSubgraphEndTreeElement();
  }
  return result;
}

uint64_t specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)(long long *a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>);
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  if (!AGSubgraphShouldRecordTree()) {
    return specialized static ModifiedContent<>._makeViewList(view:inputs:)(OffsetAttribute2, a1, 176, (void (*)(long long *, uint64_t))specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:));
  }
  AGSubgraphBeginTreeElement();
  specialized static ModifiedContent<>._makeViewList(view:inputs:)(OffsetAttribute2, a1, 176, (void (*)(long long *, uint64_t))specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:));

  return AGSubgraphEndTreeElement();
}

uint64_t specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(0);
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  if (!AGSubgraphShouldRecordTree()) {
    return specialized static ModifiedContent<>._makeViewList(view:inputs:)(OffsetAttribute2, a1, (void (*)(void))type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>, 88, (void (*)(uint64_t, uint64_t))specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:), (void (*)(uint64_t, uint64_t))specialized _ViewListOutputs.multiModifier<A>(_:inputs:));
  }
  AGSubgraphBeginTreeElement();
  specialized static ModifiedContent<>._makeViewList(view:inputs:)(OffsetAttribute2, a1, (void (*)(void))type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>, 88, (void (*)(uint64_t, uint64_t))specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:), (void (*)(uint64_t, uint64_t))specialized _ViewListOutputs.multiModifier<A>(_:inputs:));

  return AGSubgraphEndTreeElement();
}

uint64_t specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>();
  AGGraphCreateOffsetAttribute2();
  if (AGSubgraphShouldRecordTree())
  {
    AGSubgraphBeginTreeElement();
    specialized static ModifiedContent<>._makeViewList(view:inputs:)(a1, a2);
    return AGSubgraphEndTreeElement();
  }
  else
  {
    return specialized static ModifiedContent<>._makeViewList(view:inputs:)(a1, a2);
  }
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance SubviewsRoot<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)(a1, a2, a3, a4, a5, WitnessTable, a6);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._viewListCount(inputs:body:) in conformance SubviewsRoot<A>(long long *a1, uint64_t (*a2)(long long *))
{
  return static _VariadicView_MultiViewRoot._viewListCount(inputs:body:)(a1, a2);
}

uint64_t specialized static _ValueTransactionModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  AGGraphCreateOffsetAttribute2();
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v3 = (id)AGSubgraphGetCurrent();
    if (!v3)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v4 = v3;
    id v5 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v5 = (id)AGGraphGetAttributeGraph();
  }
  if (!AGGraphGetContext()) {
    __break(1u);
  }
  swift_retain();

  swift_beginAccess();
  swift_release();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for TypedElement<ViewListOptionsInput>(0, &lazy cache variable for type metadata for ValueTransactionSeed<Bool>, MEMORY[0x263F8D4F8], MEMORY[0x263F8D510], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ValueTransactionSeed);
  lazy protocol witness table accessor for type ValueTransactionSeed<Bool> and conformance ValueTransactionSeed<A>();
  Attribute.init<A>(body:value:flags:update:)();
  uint64_t v6 = AGGraphSetFlags();
  MEMORY[0x270FA5388](v6);
  swift_getKeyPath();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for (_:)();
  type metadata accessor for Focus<_ValueTransactionModifier<Bool>, (_:)>();
  lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type Focus<_ValueTransactionModifier<Bool>, (_:)> and conformance Focus<A, B>, (void (*)(uint64_t))type metadata accessor for Focus<_ValueTransactionModifier<Bool>, (_:)>);
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ChildValueTransaction and conformance ChildValueTransaction();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(a2 + 28) = result;
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._viewListCount(inputs:body:) in conformance SectionsRoot<A>(long long *a1, uint64_t (*a2)(long long *))
{
  return static _VariadicView_MultiViewRoot._viewListCount(inputs:body:)(a1, a2);
}

void specialized _VariadicView_ViewRoot<>.body(children:)(uint64_t a1, uint64_t a2)
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = a2;
  v3._object = (void *)0xED000074756F7961;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 46;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized _VariadicView_ViewRoot<>.body(children:)()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_245D3C088()
{
  return swift_deallocObject();
}

uint64_t sub_245D3C098()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed _Graph, @in_guaranteed _ViewInputs) -> (@out _ViewListOutputs)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_245D3C0D0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static _VariadicView.Tree<>._viewListCount(inputs:)(uint64_t *a1)
{
  return closure #1 in static _VariadicView.Tree<>._viewListCount(inputs:)(a1, *(void *)(v1 + 48), *(void *)(v1 + 56), *(unsigned int *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_245D3C118()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t instantiation function for generic protocol witness table for <> _VariadicView.Tree<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for _VariadicView()
{
  return &type metadata for _VariadicView;
}

uint64_t dispatch thunk of static _VariadicView_Root._viewListOptions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for ViewListOptionsInput()
{
  return &type metadata for ViewListOptionsInput;
}

uint64_t dispatch thunk of static _VariadicView_ViewRoot._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of static _VariadicView_ViewRoot._makeViewList(root:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of static _VariadicView_ViewRoot._viewListCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of _VariadicView_ViewRoot.body(children:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t storeEnumTagSinglePayload for _VariadicView_Children(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t dispatch thunk of static _VariadicView_AnyImplicitRoot.visitType<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of static _VariadicView_ImplicitRoot.implicitRoot.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of _VariadicView_ImplicitRootVisitor.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t destroy for MakeViewRoot()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MakeViewRoot(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  uint64_t v4 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MakeViewRoot(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  uint64_t v4 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for MakeViewRoot(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for MakeViewRoot(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MakeViewRoot(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for MakeViewRoot()
{
  return &unk_26FA45D88;
}

uint64_t sub_245D3C6E8()
{
  return swift_deallocObject();
}

uint64_t sub_245D3C6F8()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for specialized closure #1 in closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2)
{
  void (*v4)(void *__return_ptr);
  uint64_t v5;
  long long v6;
  long long v7;
  _OWORD v8[5];
  int v9;

  long long v4 = (void (*)(void *__return_ptr))v2[2];
  uint64_t v3 = v2[3];
  id v5 = v2[4];
  long long v6 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v6;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v7;
  specialized closure #1 in closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)((uint64_t)v8, v4, v3, v5);
}

unint64_t type metadata accessor for GroupContainer.Type()
{
  unint64_t result = lazy cache variable for type metadata for GroupContainer.Type;
  if (!lazy cache variable for type metadata for GroupContainer.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for GroupContainer.Type);
  }
  return result;
}

unint64_t type metadata accessor for Never.Type()
{
  unint64_t result = lazy cache variable for type metadata for Never.Type;
  if (!lazy cache variable for type metadata for Never.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Never.Type);
  }
  return result;
}

unint64_t type metadata accessor for VariableBlurEffect.Type()
{
  unint64_t result = lazy cache variable for type metadata for VariableBlurEffect.Type;
  if (!lazy cache variable for type metadata for VariableBlurEffect.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for VariableBlurEffect.Type);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>)
  {
    type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>(255, (unint64_t *)&lazy cache variable for type metadata for _ForegroundStyleModifier2<AngularGradient, Color>, (uint64_t (*)(void, void *))type metadata accessor for _ForegroundStyleModifier2);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>);
    }
  }
}

unint64_t type metadata accessor for SummarySymbol.Type()
{
  unint64_t result = lazy cache variable for type metadata for SummarySymbol.Type;
  if (!lazy cache variable for type metadata for SummarySymbol.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SummarySymbol.Type);
  }
  return result;
}

void type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void *))
{
  if (!*a2)
  {
    v6[0] = &type metadata for AngularGradient;
    v6[1] = &type metadata for Color;
    void v6[2] = &protocol witness table for AngularGradient;
    v6[3] = &protocol witness table for Color;
    unint64_t v4 = a3(0, v6);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ForegroundStyleModifier2<AngularGradient, Color>.ForegroundStyleEnvironment and conformance _ForegroundStyleModifier2<A, B>.ForegroundStyleEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type _ForegroundStyleModifier2<AngularGradient, Color>.ForegroundStyleEnvironment and conformance _ForegroundStyleModifier2<A, B>.ForegroundStyleEnvironment;
  if (!lazy protocol witness table cache variable for type _ForegroundStyleModifier2<AngularGradient, Color>.ForegroundStyleEnvironment and conformance _ForegroundStyleModifier2<A, B>.ForegroundStyleEnvironment)
  {
    type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>(255, &lazy cache variable for type metadata for _ForegroundStyleModifier2<AngularGradient, Color>.ForegroundStyleEnvironment, (uint64_t (*)(void, void *))type metadata accessor for _ForegroundStyleModifier2.ForegroundStyleEnvironment);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundStyleModifier2<AngularGradient, Color>.ForegroundStyleEnvironment and conformance _ForegroundStyleModifier2<A, B>.ForegroundStyleEnvironment);
  }
  return result;
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<SummarySymbol>(255, &lazy cache variable for type metadata for ViewBodyAccessor<SummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type SummarySymbol and conformance SummarySymbol, (uint64_t)&type metadata for SummarySymbol, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<SummarySymbol> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<SummarySymbol> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<SummarySymbol> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<SummarySymbol> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for ViewBodyAccessor<SummarySymbol>(255, &lazy cache variable for type metadata for ViewBodyAccessor<SummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type SummarySymbol and conformance SummarySymbol, (uint64_t)&type metadata for SummarySymbol, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<SummarySymbol> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<SummarySymbol>(255, &lazy cache variable for type metadata for ViewBodyAccessor<SummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type SummarySymbol and conformance SummarySymbol, (uint64_t)&type metadata for SummarySymbol, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<SummarySymbol> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<SummarySymbol>(255, &lazy cache variable for type metadata for ViewBodyAccessor<SummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type SummarySymbol and conformance SummarySymbol, (uint64_t)&type metadata for SummarySymbol, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<SummarySymbol> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<SummarySymbol>(255, &lazy cache variable for type metadata for ViewBodyAccessor<SummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type SummarySymbol and conformance SummarySymbol, (uint64_t)&type metadata for SummarySymbol, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<SummarySymbol> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t type metadata accessor for Rectangle.AsymmetricalInset.Type()
{
  unint64_t result = lazy cache variable for type metadata for Rectangle.AsymmetricalInset.Type;
  if (!lazy cache variable for type metadata for Rectangle.AsymmetricalInset.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Rectangle.AsymmetricalInset.Type);
  }
  return result;
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>)
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle.AsymmetricalInset>, (uint64_t)&type metadata for Rectangle.AsymmetricalInset, (uint64_t)&protocol witness table for Rectangle.AsymmetricalInset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle.AsymmetricalInset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle.AsymmetricalInset> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<Rectangle.AsymmetricalInset> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Rectangle.AsymmetricalInset> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle.AsymmetricalInset>, (uint64_t)&type metadata for Rectangle.AsymmetricalInset, (uint64_t)&protocol witness table for Rectangle.AsymmetricalInset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Rectangle.AsymmetricalInset> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>)
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle.AsymmetricalInset>, (uint64_t)&type metadata for Rectangle.AsymmetricalInset, (uint64_t)&protocol witness table for Rectangle.AsymmetricalInset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle.AsymmetricalInset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>)
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle.AsymmetricalInset>, (uint64_t)&type metadata for Rectangle.AsymmetricalInset, (uint64_t)&protocol witness table for Rectangle.AsymmetricalInset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle.AsymmetricalInset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>)
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle.AsymmetricalInset>, (uint64_t)&type metadata for Rectangle.AsymmetricalInset, (uint64_t)&protocol witness table for Rectangle.AsymmetricalInset, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle.AsymmetricalInset> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<CombinedContentShape, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t type metadata accessor for CombinedContentShape.Type()
{
  unint64_t result = lazy cache variable for type metadata for CombinedContentShape.Type;
  if (!lazy cache variable for type metadata for CombinedContentShape.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CombinedContentShape.Type);
  }
  return result;
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>)
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(255, &lazy cache variable for type metadata for ViewBodyAccessor<CombinedContentShape>, (uint64_t)&type metadata for CombinedContentShape, (uint64_t)&protocol witness table for CombinedContentShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<CombinedContentShape> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<CombinedContentShape> and conformance ViewBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewBodyAccessor<CombinedContentShape> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<CombinedContentShape> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(255, &lazy cache variable for type metadata for ViewBodyAccessor<CombinedContentShape>, (uint64_t)&type metadata for CombinedContentShape, (uint64_t)&protocol witness table for CombinedContentShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<CombinedContentShape> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>)
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(255, &lazy cache variable for type metadata for ViewBodyAccessor<CombinedContentShape>, (uint64_t)&type metadata for CombinedContentShape, (uint64_t)&protocol witness table for CombinedContentShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<CombinedContentShape> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for DynamicBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>)
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(255, &lazy cache variable for type metadata for ViewBodyAccessor<CombinedContentShape>, (uint64_t)&type metadata for CombinedContentShape, (uint64_t)&protocol witness table for CombinedContentShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<CombinedContentShape> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>)
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(255, &lazy cache variable for type metadata for ViewBodyAccessor<CombinedContentShape>, (uint64_t)&type metadata for CombinedContentShape, (uint64_t)&protocol witness table for CombinedContentShape, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<CombinedContentShape> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>);
    }
  }
}

unint64_t type metadata accessor for SafeAreaPaddingModifier.Type()
{
  unint64_t result = lazy cache variable for type metadata for SafeAreaPaddingModifier.Type;
  if (!lazy cache variable for type metadata for SafeAreaPaddingModifier.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SafeAreaPaddingModifier.Type);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>();
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for BodyUnaryViewGenerator<_ViewModifier_Content<SafeAreaPaddingModifier>>()
{
  if (!lazy cache variable for type metadata for BodyUnaryViewGenerator<_ViewModifier_Content<SafeAreaPaddingModifier>>)
  {
    type metadata accessor for ViewBodyAccessor<SummarySymbol>(255, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SafeAreaPaddingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier, (uint64_t)&type metadata for SafeAreaPaddingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ViewModifier_Content);
    unint64_t v0 = type metadata accessor for BodyUnaryViewGenerator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for BodyUnaryViewGenerator<_ViewModifier_Content<SafeAreaPaddingModifier>>);
    }
  }
}

unint64_t type metadata accessor for _ColorMultiplyEffect.Type()
{
  unint64_t result = lazy cache variable for type metadata for _ColorMultiplyEffect.Type;
  if (!lazy cache variable for type metadata for _ColorMultiplyEffect.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _ColorMultiplyEffect.Type);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DynamicViewList<AnyView> and conformance DynamicViewList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DynamicViewList<AnyView> and conformance DynamicViewList<A>;
  if (!lazy protocol witness table cache variable for type DynamicViewList<AnyView> and conformance DynamicViewList<A>)
  {
    type metadata accessor for ViewBodyAccessor<SummarySymbol>(255, &lazy cache variable for type metadata for DynamicViewList<AnyView>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyView and conformance AnyView, (uint64_t)&type metadata for AnyView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DynamicViewList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicViewList<AnyView> and conformance DynamicViewList<A>);
  }
  return result;
}

unint64_t type metadata accessor for _TestApp.RootView.Type()
{
  unint64_t result = lazy cache variable for type metadata for _TestApp.RootView.Type;
  if (!lazy cache variable for type metadata for _TestApp.RootView.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _TestApp.RootView.Type);
  }
  return result;
}

unint64_t type metadata accessor for MeshGradient.Type()
{
  unint64_t result = lazy cache variable for type metadata for MeshGradient.Type;
  if (!lazy cache variable for type metadata for MeshGradient.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MeshGradient.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t type metadata accessor for ContainerRelativeShape._Inset.Type()
{
  unint64_t result = lazy cache variable for type metadata for ContainerRelativeShape._Inset.Type;
  if (!lazy cache variable for type metadata for ContainerRelativeShape._Inset.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ContainerRelativeShape._Inset.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<ContainerRelativeShape, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t type metadata accessor for ContainerRelativeShape.Type()
{
  unint64_t result = lazy cache variable for type metadata for ContainerRelativeShape.Type;
  if (!lazy cache variable for type metadata for ContainerRelativeShape.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ContainerRelativeShape.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Circle._Inset, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t type metadata accessor for Circle._Inset.Type()
{
  unint64_t result = lazy cache variable for type metadata for Circle._Inset.Type;
  if (!lazy cache variable for type metadata for Circle._Inset.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Circle._Inset.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Ellipse._Inset, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t type metadata accessor for Ellipse._Inset.Type()
{
  unint64_t result = lazy cache variable for type metadata for Ellipse._Inset.Type;
  if (!lazy cache variable for type metadata for Ellipse._Inset.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Ellipse._Inset.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Capsule._Inset, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t type metadata accessor for Capsule._Inset.Type()
{
  unint64_t result = lazy cache variable for type metadata for Capsule._Inset.Type;
  if (!lazy cache variable for type metadata for Capsule._Inset.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Capsule._Inset.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t type metadata accessor for UnevenRoundedRectangle._Inset.Type()
{
  unint64_t result = lazy cache variable for type metadata for UnevenRoundedRectangle._Inset.Type;
  if (!lazy cache variable for type metadata for UnevenRoundedRectangle._Inset.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UnevenRoundedRectangle._Inset.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<RoundedRectangle._Inset, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t type metadata accessor for RoundedRectangle._Inset.Type()
{
  unint64_t result = lazy cache variable for type metadata for RoundedRectangle._Inset.Type;
  if (!lazy cache variable for type metadata for RoundedRectangle._Inset.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RoundedRectangle._Inset.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle._Inset, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t type metadata accessor for Rectangle._Inset.Type()
{
  unint64_t result = lazy cache variable for type metadata for Rectangle._Inset.Type;
  if (!lazy cache variable for type metadata for Rectangle._Inset.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Rectangle._Inset.Type);
  }
  return result;
}

unint64_t type metadata accessor for Circle.Type()
{
  unint64_t result = lazy cache variable for type metadata for Circle.Type;
  if (!lazy cache variable for type metadata for Circle.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Circle.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Ellipse, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t type metadata accessor for Ellipse.Type()
{
  unint64_t result = lazy cache variable for type metadata for Ellipse.Type;
  if (!lazy cache variable for type metadata for Ellipse.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Ellipse.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Capsule, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t type metadata accessor for Capsule.Type()
{
  unint64_t result = lazy cache variable for type metadata for Capsule.Type;
  if (!lazy cache variable for type metadata for Capsule.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Capsule.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<UnevenRoundedRectangle, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t type metadata accessor for UnevenRoundedRectangle.Type()
{
  unint64_t result = lazy cache variable for type metadata for UnevenRoundedRectangle.Type;
  if (!lazy cache variable for type metadata for UnevenRoundedRectangle.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UnevenRoundedRectangle.Type);
  }
  return result;
}

unint64_t type metadata accessor for RoundedRectangle.Type()
{
  unint64_t result = lazy cache variable for type metadata for RoundedRectangle.Type;
  if (!lazy cache variable for type metadata for RoundedRectangle.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RoundedRectangle.Type);
  }
  return result;
}

unint64_t type metadata accessor for Rectangle.Type()
{
  unint64_t result = lazy cache variable for type metadata for Rectangle.Type;
  if (!lazy cache variable for type metadata for Rectangle.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Rectangle.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Path, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t type metadata accessor for Path.Type()
{
  unint64_t result = lazy cache variable for type metadata for Path.Type;
  if (!lazy cache variable for type metadata for Path.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Path.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<AnyShape, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t type metadata accessor for AnyShape.Type()
{
  unint64_t result = lazy cache variable for type metadata for AnyShape.Type;
  if (!lazy cache variable for type metadata for AnyShape.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AnyShape.Type);
  }
  return result;
}

void _s7SwiftUI15ModifiedContentVyAA13SummarySymbol33_5039765D26D33F565D3CDFCA69D19B23LLVAA25_ValueTransactionModifierVySdGGMaTm_0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(255, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ValueTransactionModifier);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ChildEnvironment<Font?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_2(255, &lazy cache variable for type metadata for Font?, (uint64_t)&type metadata for Font, MEMORY[0x263F8D8F0]);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t type metadata accessor for _IntelligenceSupport.AnimatingSummarySymbol.Type()
{
  unint64_t result = lazy cache variable for type metadata for _IntelligenceSupport.AnimatingSummarySymbol.Type;
  if (!lazy cache variable for type metadata for _IntelligenceSupport.AnimatingSummarySymbol.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _IntelligenceSupport.AnimatingSummarySymbol.Type);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ChildEnvironment<Font?> and conformance ChildEnvironment<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ChildEnvironment<Font?> and conformance ChildEnvironment<A>;
  if (!lazy protocol witness table cache variable for type ChildEnvironment<Font?> and conformance ChildEnvironment<A>)
  {
    type metadata accessor for ChildEnvironment<Font?>(255, &lazy cache variable for type metadata for ChildEnvironment<Font?>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for ChildEnvironment);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChildEnvironment<Font?> and conformance ChildEnvironment<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ValueTransactionSeed<Bool> and conformance ValueTransactionSeed<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ValueTransactionSeed<Bool> and conformance ValueTransactionSeed<A>;
  if (!lazy protocol witness table cache variable for type ValueTransactionSeed<Bool> and conformance ValueTransactionSeed<A>)
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(255, &lazy cache variable for type metadata for ValueTransactionSeed<Bool>, MEMORY[0x263F8D4F8], MEMORY[0x263F8D510], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ValueTransactionSeed);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ValueTransactionSeed<Bool> and conformance ValueTransactionSeed<A>);
  }
  return result;
}

uint64_t sub_245D3E078()
{
  return 16;
}

__n128 sub_245D3E084(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata accessor for Focus<_ValueTransactionModifier<Bool>, (_:)>()
{
  if (!lazy cache variable for type metadata for Focus<_ValueTransactionModifier<Bool>, (_:)>)
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(255, &lazy cache variable for type metadata for _ValueTransactionModifier<Bool>, MEMORY[0x263F8D4F8], MEMORY[0x263F8D510], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ValueTransactionModifier);
    type metadata accessor for (_:)();
    unint64_t v0 = type metadata accessor for Focus();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<_ValueTransactionModifier<Bool>, (_:)>);
    }
  }
}

unint64_t type metadata accessor for _IntelligenceSupport.AnimatingText.Type()
{
  unint64_t result = lazy cache variable for type metadata for _IntelligenceSupport.AnimatingText.Type;
  if (!lazy cache variable for type metadata for _IntelligenceSupport.AnimatingText.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _IntelligenceSupport.AnimatingText.Type);
  }
  return result;
}

void type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(255, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
    unint64_t v6 = type metadata accessor for UnaryElements();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for DynamicBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<SummarySymbol>(255, &lazy cache variable for type metadata for GestureBodyAccessor<DistanceGesture>, (uint64_t (*)(void))lazy protocol witness table accessor for type DistanceGesture and conformance DistanceGesture, (uint64_t)&type metadata for DistanceGesture, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GestureBodyAccessor);
    lazy protocol witness table accessor for type GestureBodyAccessor<DistanceGesture> and conformance GestureBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>);
    }
  }
}

void type metadata accessor for ViewBodyAccessor<SummarySymbol>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type GestureBodyAccessor<DistanceGesture> and conformance GestureBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type GestureBodyAccessor<DistanceGesture> and conformance GestureBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type GestureBodyAccessor<DistanceGesture> and conformance GestureBodyAccessor<A>)
  {
    type metadata accessor for ViewBodyAccessor<SummarySymbol>(255, &lazy cache variable for type metadata for GestureBodyAccessor<DistanceGesture>, (uint64_t (*)(void))lazy protocol witness table accessor for type DistanceGesture and conformance DistanceGesture, (uint64_t)&type metadata for DistanceGesture, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GestureBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureBodyAccessor<DistanceGesture> and conformance GestureBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for StaticBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<SummarySymbol>(255, &lazy cache variable for type metadata for GestureBodyAccessor<DistanceGesture>, (uint64_t (*)(void))lazy protocol witness table accessor for type DistanceGesture and conformance DistanceGesture, (uint64_t)&type metadata for DistanceGesture, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GestureBodyAccessor);
    lazy protocol witness table accessor for type GestureBodyAccessor<DistanceGesture> and conformance GestureBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>);
    }
  }
}

unint64_t type metadata accessor for DistanceGesture.Type()
{
  unint64_t result = lazy cache variable for type metadata for DistanceGesture.Type;
  if (!lazy cache variable for type metadata for DistanceGesture.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for DistanceGesture.Type);
  }
  return result;
}

void type metadata accessor for DynamicBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for DynamicBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<SummarySymbol>(255, &lazy cache variable for type metadata for GestureBodyAccessor<DistanceGesture>, (uint64_t (*)(void))lazy protocol witness table accessor for type DistanceGesture and conformance DistanceGesture, (uint64_t)&type metadata for DistanceGesture, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GestureBodyAccessor);
    lazy protocol witness table accessor for type GestureBodyAccessor<DistanceGesture> and conformance GestureBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for DynamicBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DynamicBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>);
    }
  }
}

void type metadata accessor for StaticBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>)
  {
    type metadata accessor for ViewBodyAccessor<SummarySymbol>(255, &lazy cache variable for type metadata for GestureBodyAccessor<DistanceGesture>, (uint64_t (*)(void))lazy protocol witness table accessor for type DistanceGesture and conformance DistanceGesture, (uint64_t)&type metadata for DistanceGesture, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GestureBodyAccessor);
    lazy protocol witness table accessor for type GestureBodyAccessor<DistanceGesture> and conformance GestureBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>);
    }
  }
}

uint64_t partial apply for specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(uint64_t a1)
{
  return partial apply for specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(a1, (uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:));
}

{
  return partial apply for specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(a1, (uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:));
}

{
  return partial apply for specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(a1, (uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:));
}

void type metadata accessor for UnaryElements<BodyUnaryViewGenerator<_ZStackLayout>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_2(255, a3, a4, (uint64_t (*)(void, uint64_t))type metadata accessor for BodyUnaryViewGenerator);
    unint64_t v5 = type metadata accessor for UnaryElements();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t type metadata accessor for _ShadowEffect.Type()
{
  unint64_t result = lazy cache variable for type metadata for _ShadowEffect.Type;
  if (!lazy cache variable for type metadata for _ShadowEffect.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _ShadowEffect.Type);
  }
  return result;
}

unint64_t type metadata accessor for _ColorMonochromeEffect.Type()
{
  unint64_t result = lazy cache variable for type metadata for _ColorMonochromeEffect.Type;
  if (!lazy cache variable for type metadata for _ColorMonochromeEffect.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _ColorMonochromeEffect.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, AngularGradient>>(uint64_t a1)
{
}

unint64_t type metadata accessor for AngularGradient.Type()
{
  unint64_t result = lazy cache variable for type metadata for AngularGradient.Type;
  if (!lazy cache variable for type metadata for AngularGradient.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AngularGradient.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, EllipticalGradient>>(uint64_t a1)
{
}

unint64_t type metadata accessor for EllipticalGradient.Type()
{
  unint64_t result = lazy cache variable for type metadata for EllipticalGradient.Type;
  if (!lazy cache variable for type metadata for EllipticalGradient.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for EllipticalGradient.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, RadialGradient>>(uint64_t a1)
{
}

unint64_t type metadata accessor for RadialGradient.Type()
{
  unint64_t result = lazy cache variable for type metadata for RadialGradient.Type;
  if (!lazy cache variable for type metadata for RadialGradient.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RadialGradient.Type);
  }
  return result;
}

unint64_t type metadata accessor for LinearGradient.Type()
{
  unint64_t result = lazy cache variable for type metadata for LinearGradient.Type;
  if (!lazy cache variable for type metadata for LinearGradient.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LinearGradient.Type);
  }
  return result;
}

uint64_t sub_245D3E8C8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(uint64_t a1, uint64_t (*a2)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = v2[2];
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  uint64_t v7 = v2[5];
  long long v8 = *(_OWORD *)(a1 + 48);
  uint64_t v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v8;
  v11[4] = *(_OWORD *)(a1 + 64);
  int v12 = *(_DWORD *)(a1 + 80);
  long long v9 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v9;
  return a2(v11, v4, v5, v6, v7);
}

uint64_t objectdestroy_37Tm()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void type metadata accessor for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, void *))
{
  if (!*a2)
  {
    type metadata accessor for GestureBodyAccessor<SingleTapGesture<TappableEvent>>();
    v13[0] = v10;
    v13[1] = a3;
    uint64_t v13[2] = lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type GestureBodyAccessor<SingleTapGesture<TappableEvent>> and conformance GestureBodyAccessor<A>, (void (*)(uint64_t))type metadata accessor for GestureBodyAccessor<SingleTapGesture<TappableEvent>>);
    void v13[3] = a4;
    unint64_t v11 = a5(a1, v13);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for GestureBodyAccessor<SingleTapGesture<TappableEvent>>()
{
  if (!lazy cache variable for type metadata for GestureBodyAccessor<SingleTapGesture<TappableEvent>>)
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(255, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
    lazy protocol witness table accessor for type SingleTapGesture<TappableEvent> and conformance SingleTapGesture<A>();
    unint64_t v0 = type metadata accessor for GestureBodyAccessor();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GestureBodyAccessor<SingleTapGesture<TappableEvent>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SingleTapGesture<TappableEvent> and conformance SingleTapGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type SingleTapGesture<TappableEvent> and conformance SingleTapGesture<A>;
  if (!lazy protocol witness table cache variable for type SingleTapGesture<TappableEvent> and conformance SingleTapGesture<A>)
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(255, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleTapGesture<TappableEvent> and conformance SingleTapGesture<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, AsyncThreadFlags> and conformance StaticBody<A, B>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>(255, a2, (uint64_t)&type metadata for AsyncThreadFlags, (uint64_t)&protocol witness table for AsyncThreadFlags, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t type metadata accessor for SingleTapGesture<TappableEvent>.Type()
{
  unint64_t result = lazy cache variable for type metadata for SingleTapGesture<TappableEvent>.Type;
  if (!lazy cache variable for type metadata for SingleTapGesture<TappableEvent>.Type)
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(255, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SingleTapGesture<TappableEvent>.Type);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags> and conformance StaticBody<A, B>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>(255, a2, (uint64_t)&type metadata for MainThreadFlags, (uint64_t)&protocol witness table for MainThreadFlags, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_245D3ECEC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)(a1, a2, *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(_DWORD *)(v2 + 56), *(void *)(v2 + 16));
}

ValueMetadata *type metadata accessor for ImplicitRootType()
{
  return &type metadata for ImplicitRootType;
}

uint64_t assignWithCopy for ViewRootBodyAccessor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  id v5 = v3;

  return a1;
}

uint64_t assignWithTake for ViewRootBodyAccessor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  return a1;
}

uint64_t destroy for MakeModifiedRoot()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MakeModifiedRoot(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v4;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MakeModifiedRoot(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  return a1;
}

uint64_t assignWithTake for MakeModifiedRoot(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

uint64_t sub_245D3F0D0()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t type metadata accessor for ViewListArchivedAnimation.Effect.Type()
{
  unint64_t result = lazy cache variable for type metadata for ViewListArchivedAnimation.Effect.Type;
  if (!lazy cache variable for type metadata for ViewListArchivedAnimation.Effect.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ViewListArchivedAnimation.Effect.Type);
  }
  return result;
}

BOOL static ContentStyle.Primitive.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

SwiftUI::ContentStyle::ID __swiftcall ContentStyle.ID.init(truncatingLevel:)(Swift::Int truncatingLevel)
{
  if (truncatingLevel <= 4)
  {
    if (truncatingLevel > 4u) {
      __break(1u);
    }
    else {
      *uint64_t v1 = truncatingLevel;
    }
  }
  else
  {
    LOBYTE(truncatingLevel) = 4;
    *uint64_t v1 = 4;
  }
  return (char)truncatingLevel;
}

SwiftUI::ContentStyle::Primitive __swiftcall ContentStyle.Primitive.init(_:)(SwiftUI::ContentStyle::Primitive result)
{
  *uint64_t v1 = *(unsigned char *)result;
  return result;
}

SwiftUI::ContentStyle::Style __swiftcall ContentStyle.Style.init(id:primitive:)(SwiftUI::ContentStyle::ID id, SwiftUI::ContentStyle::Primitive primitive)
{
  char v3 = *(unsigned char *)primitive;
  *uint64_t v2 = *(unsigned char *)id;
  v2[1] = v3;
  result.id = id;
  return result;
}

uint64_t ContentStyle.MaterialStyle.init(material:base:)@<X0>(uint64_t result@<X0>, __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = *(unsigned char *)(result + 8);
  int v4 = *(_DWORD *)(result + 12);
  __int16 v5 = *a2;
  *(void *)a3 = *(void *)result;
  *(unsigned char *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 12) = v4;
  *(_WORD *)(a3 + 16) = v5;
  return result;
}

uint64_t static HierarchicalShapeStyle.quaternary.getter()
{
  return 3;
}

uint64_t static HierarchicalShapeStyle.quinary.getter()
{
  return 4;
}

SwiftUI::ContentStyle::ID_optional __swiftcall ContentStyle.ID.init(rawValue:)(SwiftUI::ContentStyle::ID_optional rawValue)
{
  SwiftUI::ContentStyle::ID value = rawValue.value;
  if (rawValue.value >= SwiftUI_ContentStyle_ID_unknownDefault) {
    SwiftUI::ContentStyle::ID value = SwiftUI_ContentStyle_ID_unknownDefault;
  }
  *uint64_t v1 = value;
  return rawValue;
}

uint64_t ContentStyle.ID.rawValue.getter()
{
  return *v0;
}

SwiftUI::ContentStyle::ID_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContentStyle.ID(Swift::Int8 *a1)
{
  return ContentStyle.ID.init(rawValue:)(*a1);
}

void ContentStyle.Primitive.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ContentStyle.Primitive.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void ContentStyle.Style.id.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *ContentStyle.Style.id.setter(unsigned char *result)
{
  *Swift::UInt v1 = *result;
  return result;
}

uint64_t (*ContentStyle.Style.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ContentStyle.Style.primitive.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

unsigned char *ContentStyle.Style.primitive.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 1) = *result;
  return result;
}

uint64_t (*ContentStyle.Style.primitive.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ContentStyle.Style.hash(into:)()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

BOOL static ContentStyle.Style.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Int ContentStyle.Style.hashValue.getter()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt8 v2 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContentStyle.Style()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt8 v2 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ContentStyle.Style()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContentStyle.Style()
{
  Hasher.init(_seed:)();
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t ContentStyle.MaterialStyle.material.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  int v3 = *(_DWORD *)(v1 + 12);
  *(void *)a1 = *(void *)v1;
  unsigned __int8 v4 = *(unsigned char *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return outlined copy of Material.ID(v2, v4);
}

uint64_t ContentStyle.MaterialStyle.material.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  int v4 = *((_DWORD *)a1 + 3);
  uint64_t result = outlined consume of Material.ID(*(void *)v1, *(unsigned char *)(v1 + 8));
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = v3;
  *(_DWORD *)(v1 + 12) = v4;
  return result;
}

uint64_t (*ContentStyle.MaterialStyle.material.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ContentStyle.MaterialStyle.base.getter(_WORD *a1@<X8>)
{
  *a1 = *(_WORD *)(v1 + 16);
}

_WORD *ContentStyle.MaterialStyle.base.setter(_WORD *result)
{
  *(_WORD *)(v1 + 16) = *result;
  return result;
}

uint64_t (*ContentStyle.MaterialStyle.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ContentStyle.MaterialStyle.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  Swift::UInt32 v4 = *(_DWORD *)(v1 + 12);
  Swift::UInt v5 = *(unsigned __int8 *)(v1 + 17);
  Swift::UInt8 v6 = *(unsigned char *)(v1 + 16);
  unsigned __int8 v7 = *(unsigned char *)(v1 + 8);
  outlined copy of Material.ID(*(void *)v1, v7);
  Material.ID.hash(into:)(a1);
  Hasher._combine(_:)(v4);
  outlined consume of Material.ID(v3, v7);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
}

Swift::Int ContentStyle.MaterialStyle.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 12);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 17);
  unsigned __int8 v4 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  outlined copy of Material.ID(v1, v4);
  Material.ID.hash(into:)((uint64_t)v7);
  Hasher._combine(_:)(v2);
  outlined consume of Material.ID(v1, v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContentStyle.MaterialStyle()
{
  uint64_t v1 = *(void *)v0;
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 12);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 17);
  unsigned __int8 v4 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  outlined copy of Material.ID(v1, v4);
  Material.ID.hash(into:)((uint64_t)v7);
  Hasher._combine(_:)(v2);
  outlined consume of Material.ID(v1, v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ContentStyle.MaterialStyle(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  Swift::UInt32 v4 = *(_DWORD *)(v1 + 12);
  Swift::UInt v5 = *(unsigned __int8 *)(v1 + 17);
  Swift::UInt8 v6 = *(unsigned char *)(v1 + 16);
  unsigned __int8 v7 = *(unsigned char *)(v1 + 8);
  outlined copy of Material.ID(*(void *)v1, v7);
  Material.ID.hash(into:)(a1);
  Hasher._combine(_:)(v4);
  outlined consume of Material.ID(v3, v7);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContentStyle.MaterialStyle()
{
  Hasher.init(_seed:)();
  uint64_t v1 = *(void *)v0;
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 12);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 17);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 16);
  unsigned __int8 v6 = *(unsigned char *)(v0 + 8);
  outlined copy of Material.ID(*(void *)v0, v6);
  Material.ID.hash(into:)((uint64_t)v7);
  Hasher._combine(_:)(v2);
  outlined consume of Material.ID(v1, v6);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t HierarchicalShapeStyle.id.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*HierarchicalShapeStyle.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static HierarchicalShapeStyle.sharedPrimary.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for sharedPrimary);
}

uint64_t HierarchicalShapeStyle.level.getter(uint64_t result)
{
  return result;
}

unsigned char *static HierarchicalShapeStyle._apply(to:)(unsigned char *result)
{
  *uint64_t result = 1;
  return result;
}

uint64_t static LegacyContentStyle.sharedPrimary.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for sharedPrimary);
}

void LegacyContentStyle.id.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *LegacyContentStyle.id.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*LegacyContentStyle.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t LegacyContentStyle.color.getter()
{
  return swift_retain();
}

uint64_t LegacyContentStyle.color.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*LegacyContentStyle.color.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentStyle.ID.level.getter()
{
  return *v0;
}

SwiftUI::SystemColorType __swiftcall SystemColorType.init(_:)(SwiftUI::SystemColorType result)
{
  *uint64_t v1 = *(unsigned char *)result + 13;
  return result;
}

uint64_t Color.init(_:)(unsigned char *a1)
{
  switch(*a1)
  {
    case 1:
      if (one-time initialization token for secondary != -1) {
        goto LABEL_14;
      }
      break;
    case 2:
      if (one-time initialization token for tertiary != -1) {
        goto LABEL_14;
      }
      break;
    case 3:
      if (one-time initialization token for quaternary != -1) {
        goto LABEL_14;
      }
      break;
    case 4:
      if (one-time initialization token for quinary != -1) {
        goto LABEL_14;
      }
      break;
    default:
      if (one-time initialization token for primary != -1) {
LABEL_14:
      }
        swift_once();
      break;
  }

  return swift_retain();
}

SwiftUI::ContentStyle::ID_optional __swiftcall ContentStyle.ID.init(level:)(Swift::Int level)
{
  if (level < 5u && (char)level == level) {
    char v3 = level;
  }
  else {
    char v3 = 5;
  }
  *uint64_t v1 = v3;
  return (SwiftUI::ContentStyle::ID_optional)level;
}

uint64_t HierarchicalShapeStyleModifier.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t HierarchicalShapeStyleModifier.base.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*HierarchicalShapeStyleModifier.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t HierarchicalShapeStyleModifier.level.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t HierarchicalShapeStyleModifier.level.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*HierarchicalShapeStyleModifier.level.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unint64_t lazy protocol witness table accessor for type ContentStyle.ID and conformance ContentStyle.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentStyle.ID and conformance ContentStyle.ID;
  if (!lazy protocol witness table cache variable for type ContentStyle.ID and conformance ContentStyle.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentStyle.ID and conformance ContentStyle.ID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentStyle.ID and conformance ContentStyle.ID;
  if (!lazy protocol witness table cache variable for type ContentStyle.ID and conformance ContentStyle.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentStyle.ID and conformance ContentStyle.ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentStyle.Primitive and conformance ContentStyle.Primitive()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentStyle.Primitive and conformance ContentStyle.Primitive;
  if (!lazy protocol witness table cache variable for type ContentStyle.Primitive and conformance ContentStyle.Primitive)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentStyle.Primitive and conformance ContentStyle.Primitive);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentStyle.Style and conformance ContentStyle.Style()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentStyle.Style and conformance ContentStyle.Style;
  if (!lazy protocol witness table cache variable for type ContentStyle.Style and conformance ContentStyle.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentStyle.Style and conformance ContentStyle.Style);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ContentStyle.ID(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ContentStyle.ID and conformance ContentStyle.ID();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for ContentStyle()
{
  return &type metadata for ContentStyle;
}

unsigned char *storeEnumTagSinglePayload for ContentStyle.ID(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245D3FF14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentStyle.ID()
{
  return &type metadata for ContentStyle.ID;
}

unsigned char *storeEnumTagSinglePayload for ContentStyle.Primitive(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245D40018);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentStyle.Primitive()
{
  return &type metadata for ContentStyle.Primitive;
}

uint64_t getEnumTagSinglePayload for ContentStyle.Style(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 65282 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65282 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65282;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
LABEL_17:
  unsigned int v6 = *((unsigned __int8 *)a1 + 1);
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentStyle.Style(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65282 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 254;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245D401B0);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentStyle.Style()
{
  return &type metadata for ContentStyle.Style;
}

uint64_t initializeBufferWithCopyOfBuffer for ContentStyle.MaterialStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Material.ID(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for ContentStyle.MaterialStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Material.ID(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  *(void *)a1 = v4;
  unsigned __int8 v7 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Material.ID(v6, v7);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for ContentStyle.MaterialStyle(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of Material.ID(v5, v6);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentStyle.MaterialStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentStyle.MaterialStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentStyle.MaterialStyle()
{
  return &type metadata for ContentStyle.MaterialStyle;
}

uint64_t initializeBufferWithCopyOfBuffer for LegacyContentStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LegacyContentStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for LegacyContentStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for LegacyContentStyle()
{
  return &type metadata for LegacyContentStyle;
}

uint64_t *initializeBufferWithCopyOfBuffer for HierarchicalShapeStyleModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  BOOL v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *BOOL v4 = *a2;
    BOOL v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for HierarchicalShapeStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for HierarchicalShapeStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for HierarchicalShapeStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HierarchicalShapeStyleModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245D407ECLL);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for HierarchicalShapeStyleModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245D409ACLL);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t protocol witness for DynamicPropertyBox.getState<A>(type:) in conformance Namespace.Box@<X0>(uint64_t a1@<X8>)
{
  return DynamicPropertyBox.getState<A>(type:)(a1);
}

uint64_t DynamicPropertyBox.getState<A>(type:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Binding();
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t DynamicPropertyBehaviors.rawValue.getter()
{
  return *v0;
}

uint64_t DynamicPropertyBehaviors.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static DynamicPropertyBehaviors.allowsAsync.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static DynamicPropertyBehaviors.requiresMainThread.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void DynamicPropertyCache.Fields.behaviors.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 20);
}

_DWORD *DynamicPropertyCache.Fields.behaviors.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + 20) = *result;
  return result;
}

uint64_t (*DynamicPropertyCache.Fields.behaviors.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

Swift::String_optional __swiftcall DynamicPropertyCache.Fields.name(at:)(Swift::Int at)
{
  uint64_t v3 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  if ((v1[16] & 1) == 0)
  {
    uint64_t v6 = *(void **)v1;
    uint64_t v7 = *(void *)(*(void *)v1 + 16);
    if (!v7) {
      goto LABEL_11;
    }
    if (v6[6] == at)
    {
      size_t v8 = v6 + 7;
      goto LABEL_8;
    }
    if (v7 == 1) {
      goto LABEL_11;
    }
    if (v6[10] == at)
    {
      size_t v8 = v6 + 11;
LABEL_8:
      if (*v8)
      {
        static String.Encoding.utf8.getter();
        uint64_t v4 = String.init(cString:encoding:)();
        goto LABEL_19;
      }
LABEL_11:
      uint64_t v4 = 0;
      unsigned int v5 = 0;
      goto LABEL_19;
    }
    if (v7 == 2) {
      goto LABEL_11;
    }
    size_t v8 = v6 + 15;
    uint64_t v9 = 2;
    while (1)
    {
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      if (*(v8 - 1) == at) {
        goto LABEL_8;
      }
      uint64_t v4 = 0;
      unsigned int v5 = 0;
      v8 += 4;
      ++v9;
      if (v10 == v7) {
        goto LABEL_19;
      }
    }
    __break(1u);
  }
LABEL_19:
  result.value._object = v5;
  result.value._countAndFlagsBits = v4;
  return result;
}

uint64_t DynamicPropertyCache.Fields._name(at:)(uint64_t result)
{
  if (v1[16]) {
    return 0;
  }
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 16);
  if (!v3) {
    return 0;
  }
  if (*(void *)(v2 + 48) == result) {
    return *(void *)(v2 + 56);
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v4 = v2 + 88;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v6 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    if (*(void *)(v4 - 8) == result) {
      return *(void *)v4;
    }
    v4 += 32;
    if (v6 == v3) {
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t static DynamicProperty.addTreeValue<A>(_:at:in:flags:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = AGSubgraphShouldRecordTree();
  if (result) {
    return static DynamicProperty.addTreeValueSlow<A>(_:as:in:fieldOffset:flags:)(a1, v7, a3, a2);
  }
  return result;
}

uint64_t static DynamicProperty.addTreeValueSlow<A>(_:as:in:fieldOffset:flags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static DynamicPropertyCache.fields(of:)(a3, (uint64_t)&v6);
  DynamicPropertyCache.Fields._name(at:)(a4);
  outlined consume of DynamicPropertyCache.Fields.Layout();

  return AGSubgraphAddTreeValue();
}

uint64_t static StaticBody.container.getter()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t static StaticBody.metaProperties<A>(as:attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (swift_getAssociatedTypeWitness() != a5) {
    return MEMORY[0x263F8EE78];
  }
  AGGraphGetAttributeInfo();
  uint64_t v7 = v6;
  type metadata accessor for _ContiguousArrayStorage<(String, AGAttribute)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(String, AGAttribute)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, AGAttribute), MEMORY[0x263F8E0F8]);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2461B9DC0;
  *(void *)(v5 + 32) = 0x666C657340;
  *(void *)(v5 + 40) = 0xE500000000000000;
  *(_DWORD *)(v5 + 48) = *(_DWORD *)(v7 + *(int *)(type metadata accessor for StaticBody() + 52));
  return v5;
}

uint64_t protocol witness for static BodyAccessorRule.container.getter in conformance StaticBody<A, B>()
{
  return static StaticBody.container.getter();
}

uint64_t protocol witness for static BodyAccessorRule.value<A>(as:attribute:) in conformance StaticBody<A, B>@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  return static StaticBody.value<A>(as:attribute:)(a2[2], a2[3], a1, a2[4], a2[5], (void (*)(void, void *))type metadata accessor for StaticBody, a3);
}

void protocol witness for static BodyAccessorRule.buffer<A>(as:attribute:) in conformance StaticBody<A, B>(uint64_t a1@<X8>)
{
}

uint64_t protocol witness for static BodyAccessorRule.metaProperties<A>(as:attribute:) in conformance StaticBody<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static StaticBody.metaProperties<A>(as:attribute:)(a1, a2, *(void *)(a4 + 16), *(void *)(a4 + 24), a3);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StaticBody<A, B>()
{
  return specialized StaticBody.description.getter();
}

uint64_t static StaticBody.value<A>(as:attribute:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void (*a6)(void, void *)@<X7>, uint64_t a7@<X8>)
{
  if (swift_getAssociatedTypeWitness() == a3)
  {
    AGGraphGetAttributeInfo();
    v18[0] = a1;
    v18[1] = a2;
    _DWORD v18[2] = a4;
    v18[3] = a5;
    a6(0, v18);
    uint64_t Value = AGGraphGetValue();
    uint64_t v17 = *(void *)(a3 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a7, Value, a3);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(a7, 0, 1, a3);
  }
  else
  {
    int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56);
    return v14(a7, 1, 1, a3);
  }
}

uint64_t static DynamicBody.buffer<A>(as:attribute:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  uint64_t result = swift_getAssociatedTypeWitness();
  uint64_t v5 = result;
  long long v6 = 0uLL;
  if (result == a1)
  {
    AGGraphGetAttributeInfo();
    uint64_t v8 = v7;
    uint64_t result = type metadata accessor for DynamicBody();
    long long v6 = *(_OWORD *)(v8 + *(int *)(result + 60));
  }
  *(_OWORD *)a2 = v6;
  *(unsigned char *)(a2 + 16) = v5 != a1;
  return result;
}

uint64_t static DynamicBody.metaProperties<A>(as:attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (swift_getAssociatedTypeWitness() != a5) {
    return MEMORY[0x263F8EE78];
  }
  AGGraphGetAttributeInfo();
  uint64_t v7 = v6;
  type metadata accessor for _ContiguousArrayStorage<(String, AGAttribute)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(String, AGAttribute)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, AGAttribute), MEMORY[0x263F8E0F8]);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2461BDD50;
  *(void *)(v5 + 32) = 0x666C657340;
  *(void *)(v5 + 40) = 0xE500000000000000;
  uint64_t v8 = type metadata accessor for DynamicBody();
  *(_DWORD *)(v5 + 48) = *(_DWORD *)(v7 + *(int *)(v8 + 52));
  *(void *)(v5 + 56) = 0x7469746E65646940;
  *(void *)(v5 + 64) = 0xE900000000000079;
  *(_DWORD *)(v5 + 72) = *(_DWORD *)(v7 + *(int *)(v8 + 56));
  return v5;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance StaticBody<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for static BodyAccessorRule.value<A>(as:attribute:) in conformance DynamicBody<A, B>@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  return static StaticBody.value<A>(as:attribute:)(a2[2], a2[3], a1, a2[4], a2[5], (void (*)(void, void *))type metadata accessor for DynamicBody, a3);
}

uint64_t protocol witness for static BodyAccessorRule.buffer<A>(as:attribute:) in conformance DynamicBody<A, B>@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return static DynamicBody.buffer<A>(as:attribute:)(a1, a2);
}

uint64_t protocol witness for static BodyAccessorRule.metaProperties<A>(as:attribute:) in conformance DynamicBody<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static DynamicBody.metaProperties<A>(as:attribute:)(a1, a2, *(void *)(a4 + 16), *(void *)(a4 + 24), a3);
}

uint64_t changedBodyProperties<A>(of:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ContiguousArrayStorage<(String, AGAttribute)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(AGDescriptionOption, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (AGDescriptionOption, Any), MEMORY[0x263F8E0F8]);
  uint64_t v2 = 0;
  uint64_t v3 = (void *)*MEMORY[0x263F28900];
  uint64_t v4 = MEMORY[0x263F8D310];
  uint64_t v5 = MEMORY[0x263F8D6C8];
  while (1)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    *(void *)(inited + 64) = v4;
    *(void *)(inited + 32) = v3;
    *(void *)(inited + 40) = 0x72662F6B63617473;
    *(void *)(inited + 48) = 0xEB00000000656D61;
    id v7 = v3;
    uint64_t v8 = MEMORY[0x24C522820](0x6E695F656D617266, 0xEB00000000786564);
    *(void *)(inited + 104) = v5;
    *(void *)(inited + 72) = v8;
    *(void *)(inited + 80) = v2;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for AGDescriptionOption(0);
    lazy protocol witness table accessor for type AGDescriptionOption and conformance AGDescriptionOption();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v10 = (id)AGGraphDescription();

    if (v10)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v64, 0, sizeof(v64));
    }
    outlined init with take of Any?((uint64_t)v64, (uint64_t)&v65);
    if (*((void *)&v66 + 1)) {
      break;
    }
    _sypSgWOhTm_7((uint64_t)&v65, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for _DynamicPropertyBuffer?);
LABEL_3:
    if (++v2 == 32) {
      return MEMORY[0x263F8EE78];
    }
  }
  type metadata accessor for [Int : CGFloat](0, (unint64_t *)&lazy cache variable for type metadata for [String : Any]);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_3;
  }
  int v11 = v63;
  if (!v63[2]) {
    goto LABEL_16;
  }
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(0x64692D65646F6ELL, 0xE700000000000000);
  if ((v13 & 1) == 0
    || (outlined init with copy of Any(v63[7] + 32 * v12, (uint64_t)&v65), (swift_dynamicCast() & 1) == 0)
    || !v63[2]
    || (unsigned int v58 = v64[0],
        unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(0x7079742D666C6573, 0xE900000000000065),
        (v15 & 1) == 0)
    || (outlined init with copy of Any(v63[7] + 32 * v14, (uint64_t)&v65),
        type metadata accessor for BodyAccessorRule.Type(),
        (swift_dynamicCast() & 1) == 0)
    || (uint64_t v57 = *((void *)&v64[0] + 1),
        uint64_t v16 = *(void *)&v64[0],
        (*(uint64_t (**)(void))(*((void *)&v64[0] + 1) + 8))(*(void *)&v64[0]) != a1))
  {
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_3;
  }
  uint64_t v53 = v16;
  char v18 = (void *)MEMORY[0x263F8EE78];
  uint64_t v63 = (void *)MEMORY[0x263F8EE78];
  if ((AGGraphGetValueState() & 0x80) == 0) {
    goto LABEL_37;
  }
  if (one-time initialization token for latestTriggers != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v19 = static ObservationRegistrar.latestTriggers;
  if ((unint64_t)static ObservationRegistrar.latestTriggers >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v26) {
      goto LABEL_35;
    }
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20)
    {
LABEL_23:
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20 & ~(v20 >> 63), 0);
      if (v20 < 0)
      {
LABEL_84:
        __break(1u);
        return result;
      }
      uint64_t v21 = 0;
      unint64_t v61 = v19 & 0xC000000000000001;
      uint64_t v22 = v19;
      do
      {
        if (v61) {
          MEMORY[0x24C523D60](v21, v19);
        }
        else {
          swift_retain();
        }
        *(void *)&long long v65 = 0;
        *((void *)&v65 + 1) = 0xE000000000000000;
        type metadata accessor for AnyKeyPath();
        _print_unlocked<A, B>(_:_:)();
        swift_release();
        long long v23 = v65;
        int v62 = v18;
        unint64_t v25 = v18[2];
        unint64_t v24 = v18[3];
        if (v25 >= v24 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
        }
        ++v21;
        _DWORD v18[2] = v25 + 1;
        *(_OWORD *)&v18[2 * v25 + 4] = v23;
        uint64_t v19 = v22;
      }
      while (v20 != v21);
    }
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  uint64_t v20 = *(void *)((static ObservationRegistrar.latestTriggers & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v20) {
    goto LABEL_23;
  }
LABEL_35:
  swift_bridgeObjectRelease();
  char v18 = &outlined read-only object #0 of changedBodyProperties<A>(of:);
LABEL_36:
  specialized Array.append<A>(contentsOf:)((uint64_t)v18);
LABEL_37:
  uint64_t v27 = v57;
  uint64_t v28 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(v57 + 32))(a2, v58, a2, v16, v57);
  uint64_t v56 = *(void *)(v28 + 16);
  if (!v56)
  {
    swift_bridgeObjectRelease();
    goto LABEL_80;
  }
  uint64_t v54 = v28;
  if (v11[2]
    && (unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(0x737475706E69, 0xE600000000000000), (v30 & 1) != 0))
  {
    outlined init with copy of Any(v11[7] + 32 * v29, (uint64_t)&v65);
  }
  else
  {
    long long v65 = 0u;
    long long v66 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v66 + 1))
  {
    uint64_t result = _sypSgWOhTm_7((uint64_t)&v65, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for _DynamicPropertyBuffer?);
    uint64_t v31 = v54;
    goto LABEL_48;
  }
  type metadata accessor for [[String : Any]]();
  uint64_t result = swift_dynamicCast();
  uint64_t v31 = v54;
  if ((result & 1) == 0)
  {
LABEL_48:
    uint64_t v55 = v31 + 32;
    goto LABEL_49;
  }
  uint64_t v55 = v54 + 32;
  uint64_t v32 = v62;
  if (!v62) {
LABEL_49:
  }
    uint64_t v32 = (void *)MEMORY[0x263F8EE78];
  unint64_t v33 = 0;
  while (2)
  {
    if (v33 >= *(void *)(v31 + 16))
    {
      __break(1u);
      goto LABEL_84;
    }
    uint64_t v34 = (uint64_t *)(v55 + 24 * v33);
    uint64_t v36 = *v34;
    uint64_t v35 = v34[1];
    int v37 = *((_DWORD *)v34 + 4);
    uint64_t v38 = v32[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v38)
    {
      swift_bridgeObjectRelease();
LABEL_66:
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_52;
    }
    uint64_t v39 = 0;
    while (2)
    {
      uint64_t v40 = v32[v39 + 4];
      if (!*(void *)(v40 + 16))
      {
LABEL_57:
        if (v38 == ++v39)
        {
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v31 = v54;
          goto LABEL_52;
        }
        continue;
      }
      break;
    }
    swift_bridgeObjectRetain();
    unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(25705, 0xE200000000000000);
    if ((v42 & 1) == 0
      || (outlined init with copy of Any(*(void *)(v40 + 56) + 32 * v41, (uint64_t)&v65), (swift_dynamicCast() & 1) == 0)
      || v62 != v37)
    {
      swift_bridgeObjectRelease();
      goto LABEL_57;
    }
    swift_bridgeObjectRelease();
    if (*(void *)(v40 + 16))
    {
      unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(0x6465676E616863, 0xE700000000000000);
      uint64_t v31 = v54;
      if (v44)
      {
        outlined init with copy of Any(*(void *)(v40 + 56) + 32 * v43, (uint64_t)&v65);
      }
      else
      {
        long long v65 = 0u;
        long long v66 = 0u;
      }
    }
    else
    {
      long long v65 = 0u;
      long long v66 = 0u;
      uint64_t v31 = v54;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v66 + 1))
    {
      _sypSgWOhTm_7((uint64_t)&v65, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for _DynamicPropertyBuffer?);
      goto LABEL_66;
    }
    if (!swift_dynamicCast() || (v62 & 1) == 0) {
      goto LABEL_66;
    }
    unsigned int v45 = v63;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63[2] + 1, 1, v63);
      unsigned int v45 = (void *)result;
    }
    unint64_t v47 = v45[2];
    unint64_t v46 = v45[3];
    if (v47 >= v46 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v46 > 1), v47 + 1, 1, v45);
      unsigned int v45 = (void *)result;
    }
    v45[2] = v47 + 1;
    char v48 = &v45[2 * v47];
    v48[4] = v36;
    v48[5] = v35;
    uint64_t v63 = v45;
LABEL_52:
    if (++v33 != v56) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v53;
  uint64_t v27 = v57;
LABEL_80:
  swift_bridgeObjectRelease();
  (*(void (**)(long long *__return_ptr, uint64_t, void, uint64_t, uint64_t, uint64_t))(v27 + 24))(&v65, a2, v58, a2, v16, v27);
  if ((v66 & 1) == 0)
  {
    unsigned int v49 = DWORD2(v65);
    uint64_t v50 = v65;
    uint64_t v51 = HIDWORD(*((void *)&v65 + 1));
    static DynamicPropertyCache.fields(of:)(a1, (uint64_t)&v65);
    long long v52 = v65;
    *(void *)&long long v65 = v50;
    *((void *)&v65 + 1) = __PAIR64__(v51, v49);
    specialized _DynamicPropertyBuffer.applyChanged(to:)((uint64_t)&v65, v52, *((uint64_t *)&v52 + 1), v66 | ((unint64_t)DWORD1(v66) << 32), (uint64_t *)&v63);
    outlined consume of DynamicPropertyCache.Fields.Layout();
  }
  return (uint64_t)v63;
}

uint64_t closure #2 in changedBodyProperties<A>(of:)(Swift::Int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  Swift::String_optional v6 = DynamicPropertyCache.Fields.name(at:)(a1);
  if (v6.value._object)
  {
    object = v6.value._object;
    uint64_t v8 = (void *)*a5;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *a5 = (uint64_t)v8;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      uint64_t v8 = (void *)result;
      *a5 = result;
    }
    unint64_t v11 = v8[2];
    unint64_t v10 = v8[3];
    if (v11 >= v10 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
      uint64_t v8 = (void *)result;
      *a5 = result;
    }
    void v8[2] = v11 + 1;
    unint64_t v12 = &v8[2 * v11];
    v12[4] = v6.value._countAndFlagsBits;
    char v13 = v12 + 4;
  }
  else
  {
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    object = (void *)0xE100000000000000;
    char v15 = (void *)*a5;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *a5 = (uint64_t)v15;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
      char v15 = (void *)result;
      *a5 = result;
    }
    unint64_t v17 = v15[2];
    unint64_t v16 = v15[3];
    if (v17 >= v16 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v15);
      char v15 = (void *)result;
      *a5 = result;
    }
    uint64_t v15[2] = v17 + 1;
    char v18 = &v15[2 * v17];
    void v18[4] = 64;
    char v13 = v18 + 4;
  }
  v13[1] = object;
  return result;
}

uint64_t printChangedBodyProperties<A>(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = changedBodyProperties<A>(of:)(a1, a2);
  uint64_t v3 = AGTypeID.description.getter();
  uint64_t v5 = v4;
  if (*(void *)(v2 + 16))
  {
    type metadata accessor for _DynamicPropertyBuffer?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_2461B9DC0;
    v7._countAndFlagsBits = 8250;
    v7._object = (void *)0xE200000000000000;
    String.append(_:)(v7);
    uint64_t v8 = v3;
    uint64_t v9 = MEMORY[0x263F8D310];
    type metadata accessor for _DynamicPropertyBuffer?(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v10 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v12 = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = 0x6465676E61686320;
    v14._object = (void *)0xE90000000000002ELL;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    *(void *)(v6 + 56) = v9;
    *(void *)(v6 + 32) = v8;
    *(void *)(v6 + 40) = v5;
    print(_:separator:terminator:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for _DynamicPropertyBuffer?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_2461B9DC0;
    v17._countAndFlagsBits = 0x6E6168636E75203ALL;
    v17._object = (void *)0xEC0000002E646567;
    String.append(_:)(v17);
    *(void *)(v16 + 56) = MEMORY[0x263F8D310];
    *(void *)(v16 + 32) = v3;
    *(void *)(v16 + 40) = v5;
    print(_:separator:terminator:)();
    return swift_bridgeObjectRelease();
  }
}

void logChangedBodyProperties<A>(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = changedBodyProperties<A>(of:)(a1, a2);
  uint64_t v3 = AGTypeID.description.getter();
  unint64_t v5 = v4;
  if (*(void *)(v2 + 16))
  {
    if (one-time initialization token for propertyChangeLog != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.propertyChangeLog);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Swift::String v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v18 = v10;
      *(_DWORD *)uint64_t v9 = 136446466;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v5, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v9 + 12) = 2082;
      type metadata accessor for _DynamicPropertyBuffer?(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v11 = BidirectionalCollection<>.joined(separator:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_245728000, v7, v8, "%{public}s: %{public}s changed.", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C527CC0](v10, -1, -1);
      MEMORY[0x24C527CC0](v9, -1, -1);

      return;
    }

    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for propertyChangeLog != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.propertyChangeLog);
    swift_bridgeObjectRetain();
    Swift::String v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = v17;
      *(_DWORD *)uint64_t v16 = 136446210;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v5, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_245728000, v14, v15, "%{public}s: unchanged.", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C527CC0](v17, -1, -1);
      MEMORY[0x24C527CC0](v16, -1, -1);

      return;
    }
  }
  swift_bridgeObjectRelease_n();
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = 2 * a2;
  return result;
}

void type metadata accessor for (AGDescriptionOption, Any)()
{
  if (!lazy cache variable for type metadata for (AGDescriptionOption, Any))
  {
    type metadata accessor for AGDescriptionOption(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AGDescriptionOption, Any));
    }
  }
}

unint64_t type metadata accessor for BodyAccessorRule.Type()
{
  unint64_t result = lazy cache variable for type metadata for BodyAccessorRule.Type;
  if (!lazy cache variable for type metadata for BodyAccessorRule.Type)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for BodyAccessorRule);
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BodyAccessorRule.Type);
  }
  return result;
}

uint64_t specialized StaticBody.description.getter()
{
  swift_getAssociatedTypeWitness();

  return _typeName(_:qualified:)();
}

void type metadata accessor for [[String : Any]]()
{
  if (!lazy cache variable for type metadata for [[String : Any]])
  {
    type metadata accessor for [Int : CGFloat](255, (unint64_t *)&lazy cache variable for type metadata for [String : Any]);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [[String : Any]]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors()
{
  unint64_t result = lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors;
  if (!lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors;
  if (!lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors;
  if (!lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors;
  if (!lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors);
  }
  return result;
}

uint64_t dispatch thunk of static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t dispatch thunk of static DynamicProperty._propertyBehaviors.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DynamicProperty.update()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for DynamicPropertyBehaviors()
{
  return &type metadata for DynamicPropertyBehaviors;
}

uint64_t dispatch thunk of DynamicPropertyBox.destroy()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of DynamicPropertyBox.reset()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of DynamicPropertyBox.update(property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of DynamicPropertyBox.getState<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

ValueMetadata *type metadata accessor for DynamicPropertyCache()
{
  return &type metadata for DynamicPropertyCache;
}

uint64_t initializeBufferWithCopyOfBuffer for DynamicPropertyCache.Fields(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  outlined copy of DynamicPropertyCache.Fields.Layout();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  return a1;
}

uint64_t assignWithCopy for DynamicPropertyCache.Fields(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  outlined copy of DynamicPropertyCache.Fields.Layout();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  return a1;
}

uint64_t assignWithTake for DynamicPropertyCache.Fields(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicPropertyCache.Fields(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicPropertyCache.Fields(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DynamicPropertyCache.Fields()
{
  return &type metadata for DynamicPropertyCache.Fields;
}

uint64_t dispatch thunk of BodyAccessor.updateBody(of:changed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static BodyAccessorRule.container.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static BodyAccessorRule.value<A>(as:attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of static BodyAccessorRule.buffer<A>(as:attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of static BodyAccessorRule.metaProperties<A>(as:attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t destroy for DynamicPropertyCache.Fields.Layout()
{
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t initializeBufferWithCopyOfBuffer for DynamicPropertyCache.Fields.Layout(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of DynamicPropertyCache.Fields.Layout();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DynamicPropertyCache.Fields.Layout(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of DynamicPropertyCache.Fields.Layout();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of DynamicPropertyCache.Fields.Layout();
  return a1;
}

uint64_t assignWithTake for DynamicPropertyCache.Fields.Layout(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of DynamicPropertyCache.Fields.Layout();
  return a1;
}

ValueMetadata *type metadata accessor for DynamicPropertyCache.Fields.Layout()
{
  return &type metadata for DynamicPropertyCache.Fields.Layout;
}

ValueMetadata *type metadata accessor for AsyncThreadFlags()
{
  return &type metadata for AsyncThreadFlags;
}

uint64_t assignWithCopy for StaticBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(_DWORD *)((*(void *)(v5 + 40) + 3 + a1) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v5 + 40) + 3 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t assignWithTake for StaticBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(_DWORD *)((*(void *)(v5 + 24) + 3 + a1) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v5 + 24) + 3 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for StaticBody(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFFC;
    if ((v6 & 0xFFFFFFFC) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245D42E38);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for StaticBody(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) != 0xFFFFFFFC)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245D42FF8);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

ValueMetadata *type metadata accessor for MainThreadFlags()
{
  return &type metadata for MainThreadFlags;
}

uint64_t *initializeBufferWithCopyOfBuffer for DynamicBody(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4) > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v10 = (_DWORD *)(((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    int v11 = (_DWORD *)(((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    *unsigned int v10 = *v11;
    int v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *int v12 = *v13;
    int v14 = (_OWORD *)(((unint64_t)v12 + 11) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v15 = (_OWORD *)(((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8);
    *int v14 = *v15;
    *(_DWORD *)(((unint64_t)v14 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v15 + 19) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t assignWithCopy for DynamicBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 3;
  unint64_t v7 = v6 + a1;
  size_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  v7 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v7 = *v8;
  uint64_t v9 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v10 = (_DWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned int v10 = *v9;
  unint64_t v11 = ((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v11 = *(void *)v12;
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(_DWORD *)(v11 + 12) = *(_DWORD *)(v12 + 12);
  *(_DWORD *)((v11 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)((v12 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for DynamicBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 3;
  unint64_t v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  size_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v7 = *v8;
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  unint64_t v11 = (_OWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = (_OWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v11 = *v12;
  *(_DWORD *)(((unint64_t)v11 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for DynamicBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 3;
  unint64_t v7 = v6 + a1;
  size_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  v7 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v7 = *v8;
  uint64_t v9 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v10 = (_DWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned int v10 = *v9;
  unint64_t v11 = ((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v11 = *(void *)v12;
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(_DWORD *)(v11 + 12) = *(_DWORD *)(v12 + 12);
  *(_DWORD *)((v11 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)((v12 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicBody(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2
    && *((unsigned char *)a1
       + ((((((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
           + 11) & 0xFFFFFFFFFFFFFFF8)
         + 19) & 0xFFFFFFFFFFFFFFF8 | 4)))
  {
    return v5 + *a1 + 1;
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for DynamicBody(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = (((((((*(void *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
      + 19) & 0xFFFFFFFFFFFFFFF8 | 4;
  if (v7 >= a2)
  {
    if (v7 < a3) {
      a1[v8] = 0;
    }
    if (a2)
    {
      unsigned int v10 = *(void (**)(void))(v6 + 56);
      v10();
    }
  }
  else
  {
    unsigned int v9 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v9;
    if (v7 < a3) {
      a1[v8] = 1;
    }
  }
}

ValueMetadata *type metadata accessor for DynamicPropertyCache.TaggedFields()
{
  return &type metadata for DynamicPropertyCache.TaggedFields;
}

ValueMetadata *type metadata accessor for DynamicPropertyCache.Field()
{
  return &type metadata for DynamicPropertyCache.Field;
}

void type metadata accessor for (String, AGAttribute)()
{
  if (!lazy cache variable for type metadata for (String, AGAttribute))
  {
    type metadata accessor for AGAttribute(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, AGAttribute));
    }
  }
}

uint64_t static Update.threadIsUpdating.getter()
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  LODWORD(result) = _MovableLockIsOwner(static Update._lock);
  if (static Update.dispatchDepth < static Update.depth) {
    return result;
  }
  else {
    return 0;
  }
}

BOOL static Update.isActive.getter()
{
  return static Update.depth != 0;
}

BOOL static Update.isOwner.getter()
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  return _MovableLockIsOwner(static Update._lock);
}

void static Update.assertIsLocked()()
{
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (lockAssertionsAreEnabled)
  {
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    if (!_MovableLockIsOwner(static Update._lock))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
}

uint64_t static Update.canDispatch.getter()
{
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    if (static Update.depth == 1)
    {
      if (one-time initialization token for actions != -1) {
        swift_once();
      }
      return *((void *)static Update.actions + 2) != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t closure #1 in static Update.dispatchActions()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unsigned int v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for traceHost != -1) {
    swift_once();
  }
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    uint64_t v24 = v3;
    uint64_t v6 = one-time initialization token for _signpostLog;
    swift_unknownObjectRetain();
    if (v6 != -1) {
      swift_once();
    }
    id v7 = (id)_signpostLog;
    OSSignpostID.init(log:object:)();
    static os_signpost_type_t.begin.getter();
    OSSignpostID.rawValue.getter();
    kdebug_trace();
    uint64_t v8 = specialized static Update.begin()();
    uint64_t v9 = static Update.dispatchDepth;
    uint64_t v10 = static Update.depth;
    static Update.dispatchDepth = static Update.depth;
    uint64_t v11 = *(void *)(a1 + 16);
    if (!v11)
    {
LABEL_11:
      static Update.dispatchDepth = v9;
      static Update.end()(v8);
      static os_signpost_type_t.end.getter();
      OSSignpostID.rawValue.getter();
      kdebug_trace();
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v5, v2);
    }
    uint64_t v23 = v2;
    swift_bridgeObjectRetain();
    uint64_t v12 = a1 + 40;
    while (1)
    {
      int v13 = *(void (**)(uint64_t))(v12 - 8);
      uint64_t v14 = swift_retain();
      v13(v14);
      swift_release();
      if (static Update.depth != v10) {
        goto LABEL_20;
      }
      v12 += 16;
      if (!--v11)
      {
        uint64_t v8 = swift_bridgeObjectRelease();
        uint64_t v2 = v23;
        goto LABEL_11;
      }
    }
  }
  uint64_t v16 = specialized static Update.begin()();
  uint64_t v17 = static Update.dispatchDepth;
  uint64_t v18 = static Update.depth;
  static Update.dispatchDepth = static Update.depth;
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = a1 + 40;
    while (1)
    {
      uint64_t v21 = *(void (**)(uint64_t))(v20 - 8);
      uint64_t v22 = swift_retain();
      v21(v22);
      swift_release();
      if (static Update.depth != v18) {
        break;
      }
      v20 += 16;
      if (!--v19)
      {
        uint64_t v16 = swift_bridgeObjectRelease();
        goto LABEL_17;
      }
    }
LABEL_20:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_17:
  static Update.dispatchDepth = v17;

  return static Update.end()(v16);
}

uint64_t sub_245D43C60()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245D43C98()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Update.dispatchActions()()
{
  return closure #1 in static Update.dispatchActions()(*(void *)(v0 + 16));
}

ValueMetadata *type metadata accessor for Update()
{
  return &type metadata for Update;
}

uint64_t sub_245D43CE8()
{
  return swift_deallocObject();
}

void DistanceGesture.StateType.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
}

void protocol witness for GestureStateProtocol.init() in conformance DistanceGesture.StateType(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
}

double DistanceGesture.minimumDistance.getter()
{
  return *(double *)v0;
}

void DistanceGesture.minimumDistance.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*DistanceGesture.minimumDistance.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double DistanceGesture.maximumDistance.getter()
{
  return *(double *)(v0 + 8);
}

void DistanceGesture.maximumDistance.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*DistanceGesture.maximumDistance.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void DistanceGesture.init(minimumDistance:maximumDistance:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

uint64_t DistanceGesture.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v3;
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = partial apply for closure #1 in DistanceGesture.body.getter;
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t closure #1 in DistanceGesture.body.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  float64x2_t v7 = *(float64x2_t *)(a2 + 48);
  int v8 = *(unsigned __int8 *)(a2 + 72);
  if ((v8 - 1) >= 2)
  {
    if (*(unsigned char *)(a2 + 72)) {
      goto LABEL_19;
    }
    if (v6 == 1)
    {
      uint64_t result = outlined consume of GesturePhase<SpatialEvent>(*(void *)a2, *(void *)(a2 + 8), 1, *(void *)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 40), *(uint64_t *)&v7.f64[0], *(uint64_t *)&v7.f64[1], *(void *)(a2 + 64), 0);
LABEL_15:
      *(void *)a3 = 0;
      __int16 v13 = 1;
LABEL_20:
      *(_WORD *)(a3 + 8) = v13;
      return result;
    }
  }
  if (*(unsigned char *)(result + 16))
  {
    *(float64x2_t *)uint64_t result = v7;
    *(unsigned char *)(result + 16) = 0;
    double v9 = 0.0;
    if (v8) {
      goto LABEL_7;
    }
  }
  else
  {
    float64x2_t v11 = vsubq_f64(*(float64x2_t *)result, v7);
    double v9 = sqrt(vaddvq_f64(vmulq_f64(v11, v11)));
    double v12 = *(double *)(result + 24);
    if (v12 <= v9) {
      double v12 = v9;
    }
    *(double *)(result + 24) = v12;
    if (v8)
    {
LABEL_7:
      if (v8 == 1)
      {
        if (v9 <= a4)
        {
          double v10 = *(double *)(result + 24);
          *(double *)a3 = v9;
          *(unsigned char *)(a3 + 8) = 0;
          *(unsigned char *)(a3 + 9) = v10 >= a5;
          return result;
        }
      }
      else if (*(double *)(result + 24) >= a5 && v9 < a4)
      {
        *(double *)a3 = v9;
        __int16 v13 = 512;
        goto LABEL_20;
      }
LABEL_19:
      *(void *)a3 = 0;
      __int16 v13 = 768;
      goto LABEL_20;
    }
  }
  if (v6 == 1) {
    goto LABEL_15;
  }
  *(double *)a3 = v9;
  *(_WORD *)(a3 + 8) = 0;
  return result;
}

uint64_t sub_245D43F28()
{
  return swift_deallocObject();
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in DistanceGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for Gesture.body.getter in conformance DistanceGesture@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v3;
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = closure #1 in DistanceGesture.body.getterpartial apply;
  *(void *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for DistanceGesture()
{
  return &type metadata for DistanceGesture;
}

ValueMetadata *type metadata accessor for DistanceGesture.StateType()
{
  return &type metadata for DistanceGesture.StateType;
}

uint64_t sub_245D43FD0()
{
  return lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>);
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_245D44060()
{
  return swift_deallocObject();
}

void SymbolRenderingMode.Storage.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static SymbolRenderingMode.Storage.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t SymbolRenderingMode.Storage.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6F7268636F6E6F6DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6C6F6369746C756DLL;
      break;
    case 2:
      unint64_t result = 0x6863726172656968;
      break;
    case 3:
      unint64_t result = 0x657474656C6170;
      break;
    case 4:
      unint64_t result = 0x6572726566657270;
      break;
    case 5:
      unint64_t result = 0xD000000000000019;
      break;
    case 6:
      unint64_t result = 0xD000000000000016;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SymbolRenderingMode.Storage.CodingKeys()
{
  return SymbolRenderingMode.Storage.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SymbolRenderingMode.Storage.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SymbolRenderingMode.Storage.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymbolRenderingMode.Storage.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymbolRenderingMode.Storage.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymbolRenderingMode.Storage.MonochromeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymbolRenderingMode.Storage.MonochromeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymbolRenderingMode.Storage.MulticolorCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymbolRenderingMode.Storage.MulticolorCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SymbolRenderingMode.Storage.PaletteCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymbolRenderingMode.Storage.PaletteCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymbolRenderingMode.Storage.PaletteCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymbolRenderingMode.Storage.PreferredCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymbolRenderingMode.Storage.PreferredCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int SymbolRenderingMode.Storage.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void SymbolRenderingMode.storage.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *SymbolRenderingMode.storage.setter(unsigned char *result)
{
  *Swift::UInt v1 = *result;
  return result;
}

uint64_t (*SymbolRenderingMode.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unsigned char *SymbolRenderingMode.init(storage:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void static SymbolRenderingMode.monochrome.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static SymbolRenderingMode.preferred.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t static SymbolRenderingMode.preferredIfEnabled.getter@<X0>(unsigned char *a1@<X8>)
{
  if (one-time initialization token for preferredIfEnabled != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static SymbolRenderingMode.preferredIfEnabled;
  return result;
}

uint64_t SymbolRenderingMode.Storage.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys, (uint64_t)&unk_26FA5F8B0, MEMORY[0x263F8E0C0]);
  uint64_t v56 = *(void *)(v5 - 8);
  uint64_t v57 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v55 = (char *)&v36 - v6;
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys, (uint64_t)&unk_26FA5F8D0, v4);
  uint64_t v53 = *(void *)(v7 - 8);
  uint64_t v54 = v7;
  MEMORY[0x270FA5388](v7);
  long long v52 = (char *)&v36 - v8;
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys, (uint64_t)&unk_26FA5F8F0, v4);
  uint64_t v50 = *(void *)(v9 - 8);
  uint64_t v51 = v9;
  MEMORY[0x270FA5388](v9);
  unsigned int v49 = (char *)&v36 - v10;
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SymbolRenderingMode.Storage.PreferredCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys, (uint64_t)&unk_26FA5F830, v4);
  uint64_t v47 = *(void *)(v11 - 8);
  uint64_t v48 = v11;
  MEMORY[0x270FA5388](v11);
  unint64_t v46 = (char *)&v36 - v12;
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys, (uint64_t)&unk_26FA5F810, v4);
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v45 = v13;
  MEMORY[0x270FA5388](v13);
  unint64_t v43 = (char *)&v36 - v14;
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SymbolRenderingMode.Storage.HierarchicalCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys, (uint64_t)&unk_26FA5F890, v4);
  uint64_t v41 = *(void *)(v15 - 8);
  uint64_t v42 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v40 = (char *)&v36 - v16;
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SymbolRenderingMode.Storage.MulticolorCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys, (uint64_t)&unk_26FA5F870, v4);
  uint64_t v39 = v17;
  uint64_t v38 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v36 - v18;
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SymbolRenderingMode.Storage.MonochromeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys, (uint64_t)&unk_26FA5F850, v4);
  uint64_t v21 = v20;
  uint64_t v37 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v36 - v22;
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SymbolRenderingMode.Storage.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys, (uint64_t)&unk_26FA5F780, v4);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v58 = v24;
  uint64_t v59 = v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v36 - v26;
  uint64_t v28 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v28)
  {
    case 1:
      char v61 = 1;
      lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys();
      uint64_t v30 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v19, v39);
      return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v27, v30);
    case 2:
      char v62 = 2;
      lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys();
      uint64_t v31 = v40;
      uint64_t v29 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v33 = v41;
      uint64_t v32 = v42;
      goto LABEL_9;
    case 3:
      char v63 = 3;
      lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys();
      uint64_t v31 = v43;
      uint64_t v29 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v33 = v44;
      uint64_t v32 = v45;
      goto LABEL_9;
    case 4:
      char v64 = 4;
      lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys();
      uint64_t v31 = v46;
      uint64_t v29 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v33 = v47;
      uint64_t v32 = v48;
      goto LABEL_9;
    case 5:
      char v65 = 5;
      lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys();
      uint64_t v31 = v49;
      uint64_t v29 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v33 = v50;
      uint64_t v32 = v51;
      goto LABEL_9;
    case 6:
      char v66 = 6;
      lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys();
      uint64_t v31 = v52;
      uint64_t v29 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v33 = v53;
      uint64_t v32 = v54;
LABEL_9:
      (*(void (**)(char *, uint64_t))(v33 + 8))(v31, v32);
      return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v27, v29);
    case 7:
      char v67 = 7;
      lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys();
      uint64_t v35 = v55;
      uint64_t v30 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v35, v57);
      return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v27, v30);
    default:
      char v60 = 0;
      lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys();
      uint64_t v29 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v23, v21);
      return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v27, v29);
  }
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys);
  }
  return result;
}

uint64_t SymbolRenderingMode.Storage.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v69 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, (unint64_t *)&lazy cache variable for type metadata for KeyedDecodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys, (uint64_t)&unk_26FA5F8B0, MEMORY[0x263F8E040]);
  uint64_t v63 = *(void *)(v4 - 8);
  uint64_t v64 = v4;
  MEMORY[0x270FA5388](v4);
  char v72 = (char *)&v48 - v5;
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys, (uint64_t)&unk_26FA5F8D0, v3);
  uint64_t v51 = v6;
  uint64_t v50 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v68 = (char *)&v48 - v7;
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys, (uint64_t)&unk_26FA5F8F0, v3);
  uint64_t v61 = *(void *)(v8 - 8);
  uint64_t v62 = v8;
  MEMORY[0x270FA5388](v8);
  unint64_t v71 = (char *)&v48 - v9;
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SymbolRenderingMode.Storage.PreferredCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys, (uint64_t)&unk_26FA5F830, v3);
  uint64_t v59 = *(void *)(v10 - 8);
  uint64_t v60 = v10;
  MEMORY[0x270FA5388](v10);
  char v67 = (char *)&v48 - v11;
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SymbolRenderingMode.Storage.PaletteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys, (uint64_t)&unk_26FA5F810, v3);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v57 = v12;
  uint64_t v58 = v13;
  MEMORY[0x270FA5388](v12);
  int v70 = (char *)&v48 - v14;
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SymbolRenderingMode.Storage.HierarchicalCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys, (uint64_t)&unk_26FA5F890, v3);
  uint64_t v55 = *(void *)(v15 - 8);
  uint64_t v56 = v15;
  MEMORY[0x270FA5388](v15);
  char v66 = (char *)&v48 - v16;
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SymbolRenderingMode.Storage.MulticolorCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys, (uint64_t)&unk_26FA5F870, v3);
  uint64_t v54 = v17;
  uint64_t v53 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  char v65 = (char *)&v48 - v18;
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SymbolRenderingMode.Storage.MonochromeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys, (uint64_t)&unk_26FA5F850, v3);
  uint64_t v20 = v19;
  uint64_t v52 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v48 - v21;
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SymbolRenderingMode.Storage.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys, (uint64_t)&unk_26FA5F780, v3);
  uint64_t v24 = v23;
  uint64_t v25 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v48 - v26;
  uint64_t v28 = a1[3];
  uint64_t v73 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v28);
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys();
  uint64_t v29 = v74;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v29) {
    goto LABEL_15;
  }
  uint64_t v74 = v22;
  uint64_t v49 = v20;
  uint64_t v31 = v70;
  uint64_t v30 = v71;
  uint64_t v32 = v72;
  uint64_t v33 = v25;
  uint64_t v34 = v27;
  uint64_t v35 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v35 + 16) != 1)
  {
    uint64_t v38 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v39;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v40 = &type metadata for SymbolRenderingMode.Storage;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v38 - 8) + 104))(v40, *MEMORY[0x263F8DCB0], v38);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v27, v24);
LABEL_15:
    uint64_t v45 = (uint64_t)v73;
    return __swift_destroy_boxed_opaque_existential_1(v45);
  }
  char v36 = *(unsigned char *)(v35 + 32);
  switch(v36)
  {
    case 1:
      char v76 = 1;
      lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys();
      uint64_t v41 = v65;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v41, v54);
      break;
    case 2:
      char v77 = 2;
      lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys();
      uint64_t v42 = v66;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v44 = v55;
      uint64_t v43 = v56;
      goto LABEL_10;
    case 3:
      char v78 = 3;
      lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v31, v57);
      break;
    case 4:
      char v79 = 4;
      lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys();
      uint64_t v42 = v67;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v44 = v59;
      uint64_t v43 = v60;
LABEL_10:
      (*(void (**)(char *, uint64_t))(v44 + 8))(v42, v43);
      break;
    case 5:
      char v80 = 5;
      lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v30, v62);
      break;
    case 6:
      char v81 = 6;
      lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys();
      unint64_t v46 = v68;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v46, v51);
      break;
    case 7:
      char v82 = 7;
      lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v32, v64);
      break;
    default:
      char v75 = 0;
      lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys();
      uint64_t v37 = v74;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v37, v49);
      break;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v34, v24);
  uint64_t v45 = (uint64_t)v73;
  *uint64_t v69 = v36;
  return __swift_destroy_boxed_opaque_existential_1(v45);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SymbolRenderingMode.Storage@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return SymbolRenderingMode.Storage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SymbolRenderingMode.Storage(void *a1)
{
  return SymbolRenderingMode.Storage.encode(to:)(a1);
}

void static SymbolRenderingMode.hierarchicalUnlessSlashed.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

void static SymbolRenderingMode.hierarchicalSlashBadge.getter(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

void static SymbolRenderingMode.paletteSlashBadge.getter(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t View.symbolRenderingMode(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  View.environment<A>(_:_:)(KeyPath, a1, a2, a3);

  return swift_release();
}

uint64_t EnvironmentValues.symbolRenderingMode.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.symbolRenderingMode : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a2);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a2);
  }
  return swift_release_n();
}

uint64_t sub_245D45F98(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.symbolRenderingMode.setter(&v2);
}

uint64_t protocol witness for ImageProvider.resolveNamedImage(in:) in conformance Image.SymbolRenderingModeProvider(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ImageResolutionContext();
  uint64_t v4 = v3 - 8;
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  char v8 = *((unsigned char *)v1 + 8);
  outlined init with copy of ImageResolutionContext(a1, (uint64_t)v6);
  v6[*(int *)(v4 + 40)] = v8;
  (*(void (**)(char *))(*(void *)v7 + 88))(v6);
  return outlined destroy of ImageResolutionContext((uint64_t)v6);
}

uint64_t (*EnvironmentValues.symbolRenderingMode.modify(uint64_t a1))(uint64_t a1)
{
  char v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SymbolRenderingModeKey>();
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 8;
    }
    *char v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.symbolRenderingMode.modify;
}

uint64_t EnvironmentValues.symbolRenderingMode.modify(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 24);
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    uint64_t v5 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage);
  }
  return result;
}

uint64_t sub_245D462B8(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.symbolRenderingMode.setter(&v2);
}

uint64_t sub_245D462F0()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<SymbolRenderingMode?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SymbolRenderingMode?>)
  {
    type metadata accessor for SymbolRenderingMode?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SymbolRenderingMode?>);
    }
  }
}

void type metadata accessor for SymbolRenderingMode?()
{
  if (!lazy cache variable for type metadata for SymbolRenderingMode?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SymbolRenderingMode?);
    }
  }
}

ValueMetadata *type metadata accessor for SymbolRenderingModeKey()
{
  return &type metadata for SymbolRenderingModeKey;
}

void *type metadata accessor for Image.SymbolRenderingModeProvider()
{
  return &unk_26FA7D8B8;
}

void *type metadata accessor for SymbolRenderingMode.Storage.CodingKeys()
{
  return &unk_26FA5F780;
}

void *type metadata accessor for SymbolRenderingMode.Storage.MonochromeCodingKeys()
{
  return &unk_26FA5F850;
}

void *type metadata accessor for SymbolRenderingMode.Storage.MulticolorCodingKeys()
{
  return &unk_26FA5F870;
}

void *type metadata accessor for SymbolRenderingMode.Storage.HierarchicalCodingKeys()
{
  return &unk_26FA5F890;
}

void *type metadata accessor for SymbolRenderingMode.Storage.PaletteCodingKeys()
{
  return &unk_26FA5F810;
}

void *type metadata accessor for SymbolRenderingMode.Storage.PreferredCodingKeys()
{
  return &unk_26FA5F830;
}

void *type metadata accessor for SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys()
{
  return &unk_26FA5F8F0;
}

void *type metadata accessor for SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys()
{
  return &unk_26FA5F8D0;
}

void *type metadata accessor for SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys()
{
  return &unk_26FA5F8B0;
}

uint64_t specialized static Image.SymbolRenderingModeProvider.== infix(_:_:)(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = a1[8];
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (*(void *)a1 != *(void *)a2 && ((*(uint64_t (**)(void))(**(void **)a1 + 96))() & 1) == 0) {
    return 0;
  }
  if (v2 == 8)
  {
    if (v3 != 8) {
      return 0;
    }
  }
  else if (v3 == 8 || v2 != v3)
  {
    return 0;
  }
  return 1;
}

uint64_t specialized SymbolRenderingMode.Storage.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F7268636F6E6F6DLL && a2 == 0xEA0000000000656DLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F6369746C756DLL && a2 == 0xEA0000000000726FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6863726172656968 && a2 == 0xEC0000006C616369 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657474656C6170 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6572726566657270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000024621FFC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000024621FFE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000246220000)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t dispatch thunk of static ZStackParameterSmuggler.makeParameterSmuggledZStackView<A>(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

void Shader.ResolvedShader.animatableData.getter(void *a1@<X8>)
{
  int v3 = *v1;
  id v4 = v3;

  ShaderVectorData.init(rbShader:)(v3, a1);
}

void static ShaderVectorData.zero.getter(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t static ShaderVectorData.- infix(_:_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  return static ShaderVectorData.- infix(_:_:)(a1, a2, (uint64_t (*)(void *, uint64_t *))specialized static ShaderVectorData.-= infix(_:_:), a3);
}

Swift::Void __swiftcall ShaderVectorData.scale(by:)(Swift::Double by)
{
  BOOL v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 16);
  if (v3)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_23;
    }
    while (1)
    {
      unint64_t v5 = 0;
      char v6 = v2 + 4;
      float v7 = by;
      uint64_t v24 = v2;
      uint64_t v25 = v3;
      uint64_t v23 = v2 + 4;
      float v27 = v7;
LABEL_7:
      if (v5 < v2[2]) {
        break;
      }
      __break(1u);
LABEL_23:
      BOOL v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    }
    unint64_t v9 = v5 + 1;
    uint64_t v10 = (float32x4_t *)&v6[3 * v5];
    float32x4_t v11 = *v10;
    __int8 v12 = v10[1].i8[0];
    switch(v12)
    {
      case 1:
        unsigned long long v8 = COERCE_UNSIGNED_INT(v7 * v11.f32[0]) | (unsigned __int128)((unint64_t)COERCE_UNSIGNED_INT(v7 * v11.f32[1]) << 32);
        goto LABEL_5;
      case 2:
        *(void *)&unsigned long long v8 = COERCE_UNSIGNED_INT(v7 * v11.f32[0]) | ((unint64_t)COERCE_UNSIGNED_INT(v7 * v11.f32[1]) << 32);
        *((void *)&v8 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(v7, v11, 2));
        goto LABEL_5;
      case 3:
        float32x2_t v13 = vmul_n_f32((float32x2_t)vmovn_s64((int64x2_t)v11), v7);
        v14.i64[0] = v13.u32[0];
        v14.i64[1] = v13.u32[1];
        unsigned long long v8 = (unsigned __int128)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_n_f32((float32x2_t)vshrn_n_s64((int64x2_t)v11, 0x20uLL), v7), 0x20uLL), v14);
        goto LABEL_5;
      case 4:
        uint64_t v15 = v10->i64[0];
        int64_t v16 = *(void *)(v11.i64[0] + 16);
        if (v16)
        {
          float32x4_t v26 = *v10;
          unint64_t v28 = MEMORY[0x263F8EE78];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
          unint64_t v17 = v28;
          uint64_t v18 = (_DWORD *)(v15 + 32);
          unint64_t v19 = *(void *)(v28 + 16);
          float v20 = v27;
          do
          {
            LODWORD(by) = *v18;
            unint64_t v21 = *(void *)(v28 + 24);
            if (v19 >= v21 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v19 + 1, 1);
              float v20 = v27;
            }
            *(void *)(v28 + 16) = v19 + 1;
            *(float *)(v28 + 4 * v19 + 32) = *(float *)&by * v20;
            ++v18;
            ++v19;
            --v16;
          }
          while (v16);
          outlined consume of ShaderVectorData.Element(v15, v26.i64[1], 4);
          outlined consume of ShaderVectorData.Element(v15, v26.i64[1], 4);
          BOOL v2 = v24;
          uint64_t v3 = v25;
          char v6 = v23;
        }
        else
        {
          outlined consume of ShaderVectorData.Element(v11.i64[0], v11.i64[1], 4);
          unint64_t v17 = MEMORY[0x263F8EE78];
        }
        unsigned long long v8 = v17;
        float v7 = v27;
        goto LABEL_5;
      case 5:
        goto LABEL_6;
      default:
        DWORD1(v8) = 0;
        *((void *)&v8 + 1) = 0;
        *(float *)&unsigned long long v8 = v7 * v11.f32[0];
LABEL_5:
        *uint64_t v10 = (float32x4_t)v8;
        v10[1].i8[0] = v12;
LABEL_6:
        unint64_t v5 = v9;
        if (v9 != v3) {
          goto LABEL_7;
        }
        *uint64_t v22 = v2;
        break;
    }
  }
}

double ShaderVectorData.magnitudeSquared.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  if (v2)
  {
    uint64_t v3 = (void *)(v1 + 32);
    id v4 = (uint64_t *)(v1 + 40);
    uint64_t v5 = 1;
    char v6 = v3;
    double result = 0.0;
    while (2)
    {
      unsigned long long v8 = (float32x4_t *)*v6;
      uint64_t v9 = *v4;
      switch(*((unsigned char *)v6 + 16))
      {
        case 1:
          float v10 = (float)(COERCE_FLOAT(*v6) * COERCE_FLOAT(*v6)) + (float)(*((float *)&v8 + 1) * *((float *)&v8 + 1));
          goto LABEL_19;
        case 2:
          float v10 = (float)(*(float *)&v9 * *(float *)&v9)
              + (float)((float)(COERCE_FLOAT(*v6) * COERCE_FLOAT(*v6))
                      + (float)(*((float *)&v8 + 1) * *((float *)&v8 + 1)));
          goto LABEL_19;
        case 3:
          float v10 = (float)(*((float *)&v9 + 1) * *((float *)&v9 + 1))
              + (float)((float)(*(float *)&v9 * *(float *)&v9)
                      + (float)((float)(*(float *)&v8 * *(float *)&v8)
                              + (float)(*((float *)&v8 + 1) * *((float *)&v8 + 1))));
          goto LABEL_19;
        case 4:
          unint64_t v11 = v8[1].u64[0];
          if (!v11)
          {
            float v10 = 0.0;
            goto LABEL_19;
          }
          if (v11 < 8)
          {
            uint64_t v12 = 0;
            float v10 = 0.0;
LABEL_17:
            unint64_t v17 = v11 - v12;
            uint64_t v18 = &v8[2].f32[v12];
            do
            {
              float v19 = *v18++;
              float v10 = v10 + (float)(v19 * v19);
              --v17;
            }
            while (v17);
            goto LABEL_19;
          }
          uint64_t v12 = v11 & 0x7FFFFFFFFFFFFFF8;
          float32x2_t v13 = v8 + 3;
          float v10 = 0.0;
          uint64_t v14 = v11 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            float32x4_t v15 = vmulq_f32(v13[-1], v13[-1]);
            float32x4_t v16 = vmulq_f32(*v13, *v13);
            float v10 = (float)((float)((float)((float)((float)((float)((float)(v10 + v15.f32[0]) + v15.f32[1]) + v15.f32[2])
                                                + v15.f32[3])
                                        + v16.f32[0])
                                + v16.f32[1])
                        + v16.f32[2])
                + v16.f32[3];
            v13 += 2;
            v14 -= 8;
          }
          while (v14);
          if (v11 != v12) {
            goto LABEL_17;
          }
LABEL_19:
          double result = result + v10;
          if (v5 == v2) {
            return result;
          }
LABEL_20:
          char v6 = &v3[3 * v5];
          id v4 = v6 + 1;
          if (!__OFADD__(v5++, 1)) {
            continue;
          }
          __break(1u);
          break;
        case 5:
          double result = result + 0.0;
          if (v5 == v2) {
            return result;
          }
          goto LABEL_20;
        default:
          float v10 = *(float *)&v8 * *(float *)&v8;
          goto LABEL_19;
      }
      break;
    }
  }
  return 0.0;
}

uint64_t static ShaderVectorData.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

id one-time initialization function for default()
{
  id result = objc_msgSend(self, sel_defaultLibrary);
  static ShaderLibrary.default = (uint64_t)result;
  return result;
}

id static ShaderLibrary.default.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)static ShaderLibrary.default;
  *a1 = static ShaderLibrary.default;

  return v2;
}

id static ShaderLibrary.bundle(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(self, sel_defaultLibraryWithBundle_, a1);
  *a2 = result;
  return result;
}

void ShaderLibrary.init(data:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v7 = objc_msgSend(self, sel_libraryWithData_, isa);
  outlined consume of Data._Representation(a1, a2);

  *a3 = v7;
}

uint64_t ShaderLibrary.init(url:)@<X0>(uint64_t a1@<X0>, NSURL *a2@<X8>)
{
  URL._bridgeToObjectiveC()(a2);
  uint64_t v5 = v4;
  char v6 = (objc_class *)objc_msgSend(self, sel_libraryWithContentsOfURL_, v4);

  uint64_t v7 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
  a2->super.Class isa = v6;
  return result;
}

uint64_t static ShaderLibrary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  char v6 = (void *)static ShaderLibrary.default;
  *a3 = static ShaderLibrary.default;
  a3[1] = a1;
  a3[2] = a2;
  id v7 = v6;

  return swift_bridgeObjectRetain();
}

void *ShaderFunction.init(library:name:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = *result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t ShaderLibrary.subscript.getter@<X0>(void *a1@<X0>, void *a2@<X1>, void **a3@<X8>)
{
  id v4 = *v3;
  *a3 = *v3;
  a3[1] = a1;
  a3[2] = a2;
  id v5 = v4;

  return swift_bridgeObjectRetain();
}

BOOL static ShaderLibrary.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t ShaderLibrary.init(rbShaderLibrary:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

id ShaderLibrary.rbShaderLibrary.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

id ShaderFunction.library.getter@<X0>(void **a1@<X8>)
{
  id v2 = *v1;
  *a1 = *v1;
  return v2;
}

void ShaderFunction.library.setter(void **a1)
{
  id v2 = *a1;

  *id v1 = v2;
}

uint64_t (*ShaderFunction.library.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ShaderFunction.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ShaderFunction.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*ShaderFunction.name.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ShaderFunction.dynamicallyCall(withArguments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = *(void *)(v2 + 16);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = a1;
  id v6 = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

__n128 Shader.init(function:arguments:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  __n128 result = *a1;
  unint64_t v4 = a1[1].n128_u64[0];
  a3[2].n128_u32[0] = 0;
  *a3 = result;
  a3[1].n128_u64[0] = v4;
  a3[1].n128_u64[1] = a2;
  return result;
}

uint64_t static ShaderFunction.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  if (a1[1] == a2[1] && a1[2] == a2[2]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ShaderFunction(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  if (a1[1] == a2[1] && a1[2] == a2[2]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Shader.Argument.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Shader.Argument.Storage(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized static Shader.Argument.Storage.== infix(_:_:));
}

void static Shader.Argument._float(_:)(uint64_t a1@<X8>, unsigned int a2@<S0>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
}

void static Shader.Argument._float2(_:_:)(uint64_t a1@<X8>, unsigned int a2@<S0>, unsigned int a3@<S1>)
{
  *(void *)a1 = a2 | ((unint64_t)a3 << 32);
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
}

void static Shader.Argument._float3(_:_:_:)(uint64_t a1@<X8>, unsigned int a2@<S0>, unsigned int a3@<S1>, unsigned int a4@<S2>)
{
  *(void *)a1 = a2 | ((unint64_t)a3 << 32);
  *(void *)(a1 + 8) = a4;
  *(unsigned char *)(a1 + 16) = 2;
}

int8x16_t static Shader.Argument._float4(_:_:_:_:)@<Q0>(int8x16_t *a1@<X8>, unsigned int a2@<S0>, int32x2_t a3@<D1>, unsigned int a4@<S2>, __int32 a5@<S3>)
{
  a3.i32[1] = a5;
  v5.i64[0] = a2;
  v5.i64[1] = a4;
  int8x16_t result = vorrq_s8((int8x16_t)vshll_n_s32(a3, 0x20uLL), v5);
  *a1 = result;
  a1[1].i8[0] = 3;
  return result;
}

uint64_t static Shader.Argument.floatArray(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 4;
  return swift_bridgeObjectRetain();
}

void static Shader.Argument.boundingRect.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 9;
}

uint64_t static Shader.Argument.color(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 5;
  return swift_retain();
}

uint64_t static Shader.Argument.colorArray(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 6;
  return swift_bridgeObjectRetain();
}

uint64_t static Shader.Argument.image(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 7;
  return swift_retain();
}

uint64_t static Shader.Argument.data(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(unsigned char *)(a3 + 16) = 8;
  return outlined copy of Data._Representation(a1, a2);
}

uint64_t static Shader.Argument.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static Shader.Argument.Storage.== infix(_:_:)(*(void **)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Shader.Argument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Shader.Argument.Storage(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))static Shader.Argument.Storage.== infix(_:_:));
}

uint64_t Shader.Options.rawValue.getter()
{
  return *v0;
}

uint64_t Shader.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static Shader.Options.dithersColor.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static Shader.Options.colorFilter.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static Shader.Options.distortionFilter.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static Shader.Options.alphaOnlyLayer.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

uint64_t Shader.function.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  *a1 = *(void *)v1;
  a1[1] = v3;
  a1[2] = v4;
  id v5 = v2;

  return swift_bridgeObjectRetain();
}

__n128 Shader.function.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  uint64_t v3 = *(void **)v1;
  swift_bridgeObjectRelease();

  __n128 result = v5;
  *(__n128 *)uint64_t v1 = v5;
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t (*Shader.function.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Shader.arguments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Shader.arguments.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*Shader.arguments.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Shader.options.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 32);
}

_DWORD *Shader.options.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + 32) = *result;
  return result;
}

uint64_t (*Shader.options.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Shader.dithersColor.getter()
{
  return *(_DWORD *)(v0 + 32) & 1;
}

uint64_t Shader.dithersColor.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 32) = *(_DWORD *)(v1 + 32) & 0xFFFFFFFE | result & 1;
  return result;
}

unsigned __int8 *(*Shader.dithersColor.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 32) & 1;
  return Shader.dithersColor.modify;
}

unsigned __int8 *Shader.dithersColor.modify(unsigned __int8 *result)
{
  *(_DWORD *)(*(void *)result + 32) = *(_DWORD *)(*(void *)result + 32) & 0xFFFFFFFE | result[8];
  return result;
}

uint64_t Shader.alphaOnlyLayer.getter()
{
  return (*(unsigned __int8 *)(v0 + 32) >> 3) & 1;
}

uint64_t Shader.alphaOnlyLayer.setter(uint64_t result)
{
  if (result) {
    int v2 = 8;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 32) = *(_DWORD *)(v1 + 32) & 0xFFFFFFF7 | v2;
  return result;
}

unsigned char *(*Shader.alphaOnlyLayer.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + 32) & 8) != 0;
  return Shader.alphaOnlyLayer.modify;
}

unsigned char *Shader.alphaOnlyLayer.modify(unsigned char *result)
{
  if (result[8]) {
    int v1 = 8;
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(*(void *)result + 32) = *(_DWORD *)(*(void *)result + 32) & 0xFFFFFFF7 | v1;
  return result;
}

id Shader.ResolvedShader.rbShader.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

void Shader.ResolvedShader.rbShader.setter(void *a1)
{
  *id v1 = a1;
}

uint64_t (*Shader.ResolvedShader.rbShader.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Shader.ResolvedShader.maxSampleOffset.getter()
{
  return *(double *)(v0 + 8);
}

void Shader.ResolvedShader.maxSampleOffset.setter(double a1, double a2)
{
  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

uint64_t (*Shader.ResolvedShader.maxSampleOffset.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Shader.ResolvedShader.options.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 24);
}

_DWORD *Shader.ResolvedShader.options.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + 24) = *result;
  return result;
}

uint64_t (*Shader.ResolvedShader.options.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Shader.ResolvedShader.init(rbShader:maxSampleOffset:options:)@<X0>(uint64_t result@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  int v5 = *a2;
  *(void *)a3 = result;
  *(double *)(a3 + 8) = a4;
  *(double *)(a3 + 16) = a5;
  *(_DWORD *)(a3 + 24) = v5;
  return result;
}

id Shader.makeRBShader(in:)(uint64_t *a1)
{
  uint64_t v134 = *MEMORY[0x263EF8340];
  type metadata accessor for CGRect?(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))type metadata accessor for Text.Style);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v108 = (uint64_t)v99 - v4;
  uint64_t v105 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x270FA5388](v105);
  unint64_t v104 = (void *)((char *)v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v6);
  uint64_t v103 = (char *)v99 - v7;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  unint64_t v11 = *(void **)v1;
  uint64_t v10 = *(void *)(v1 + 8);
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v13 = *(void *)(v1 + 24);
  id v14 = objc_allocWithZone(MEMORY[0x263F638A8]);
  id v15 = v11;
  swift_bridgeObjectRetain();
  float32x4_t v16 = (void *)MEMORY[0x24C522820](v10, v12);
  swift_bridgeObjectRelease();
  id v17 = objc_msgSend(v14, sel_initWithLibrary_function_, v15, v16);

  uint64_t v18 = *(void *)(v13 + 16);
  if (v18)
  {
    uint64_t v19 = v13 + 32;
    int v101 = *MEMORY[0x263F288F8];
    swift_bridgeObjectRetain();
    unint64_t v20 = 0;
    uint64_t v110 = v9;
    uint64_t v111 = v18;
    uint64_t v112 = v13 + 32;
    uint64_t v113 = v8;
    id v107 = v17;
    uint64_t v100 = v13;
    while (2)
    {
      if (v20 >= *(void *)(v13 + 16))
      {
        __break(1u);
LABEL_56:
        __break(1u);
      }
      uint64_t v24 = v19 + 24 * v20;
      float32x4_t v26 = *(uint64_t **)v24;
      unint64_t v25 = *(void *)(v24 + 8);
      uint64_t v27 = *(unsigned __int8 *)(v24 + 16);
      unint64_t v114 = v20 + 1;
      switch(v27)
      {
        case 1:
          *(void *)&v125[0] = v26;
          objc_msgSend(v17, sel_setArgumentBytes_atIndex_type_count_flags_, v125, v20, 2, 1, 0);
          uint64_t v21 = (uint64_t)v26;
          unint64_t v22 = v25;
          char v23 = 1;
          goto LABEL_4;
        case 2:
          *(void *)&v125[0] = v26;
          DWORD2(v125[0]) = v25;
          objc_msgSend(v17, sel_setArgumentBytes_atIndex_type_count_flags_, v125, v20, 3, 1, 0);
          uint64_t v21 = (uint64_t)v26;
          unint64_t v22 = v25;
          char v23 = 2;
          goto LABEL_4;
        case 3:
          *(void *)&v125[0] = v26;
          *((void *)&v125[0] + 1) = v25;
          objc_msgSend(v17, sel_setArgumentBytes_atIndex_type_count_flags_, v125, v20, 4, 1, 0);
          uint64_t v21 = (uint64_t)v26;
          unint64_t v22 = v25;
          char v23 = 3;
          goto LABEL_4;
        case 4:
          uint64_t v28 = v26[2];
          outlined copy of Shader.Argument.Storage((uint64_t)v26, v25, 4);
          uint64_t v29 = v28;
          uint64_t v18 = v111;
          uint64_t v19 = v112;
          objc_msgSend(v17, sel_setArgumentBytes_atIndex_type_count_flags_, v26 + 4, v20, 1, v29, 3);
          uint64_t v21 = (uint64_t)v26;
          unint64_t v22 = v25;
          char v23 = 4;
          goto LABEL_4;
        case 5:
          if (v8 == 1)
          {
            v125[0] = 0uLL;
            outlined copy of Shader.Argument.Storage((uint64_t)v26, v25, 5);
          }
          else
          {
            *(void *)&v125[0] = v8;
            *((void *)&v125[0] + 1) = v110;
            uint64_t v30 = *(float (**)(_OWORD *))(*v26 + 104);
            outlined copy of Shader.Argument.Storage((uint64_t)v26, v25, 5);
            outlined copy of EnvironmentValues?(v113);
            float v31 = v30(v125);
            uint64_t v18 = v111;
            uint64_t v19 = v112;
            uint64_t v8 = v113;
            float v32 = v31;
            unsigned int v34 = v33;
            unsigned int v36 = v35;
            unsigned int v38 = v37;
            outlined consume of EnvironmentValues?(v113);
            *(void *)&v125[0] = __PAIR64__(v34, LODWORD(v32));
            *((void *)&v125[0] + 1) = __PAIR64__(v38, v36);
          }
          objc_msgSend(v17, sel_setArgumentBytes_atIndex_type_count_flags_, v125, v20, 5, 1, 0);
          objc_msgSend(v17, sel_setArgumentColorSpace_atIndex_, 2, v20);
          uint64_t v21 = (uint64_t)v26;
          unint64_t v22 = v25;
          char v23 = 5;
          goto LABEL_4;
        case 6:
          if (v8 == 1) {
            goto LABEL_19;
          }
          unint64_t v39 = v26[2];
          if (v39 >> 59) {
            goto LABEL_56;
          }
          uint64_t v40 = v26 + 4;
          unint64_t v109 = v25;
          outlined copy of Shader.Argument.Storage((uint64_t)v26, v25, 6);
          uint64_t isStackAllocationSafe = outlined copy of EnvironmentValues?(v8);
          unint64_t v106 = v39;
          if ((uint64_t)(16 * v39) < 1025
            || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
          {
            v99[1] = v99;
            double v42 = MEMORY[0x270FA5388](isStackAllocationSafe);
            uint64_t v102 = (uint64_t)v99 - v43;
            uint64_t v44 = v110;
            if (v39)
            {
              uint64_t v45 = (float *)(v102 + 8);
              uint64_t v46 = v106;
              do
              {
                uint64_t v47 = *v40++;
                *(void *)&v125[0] = v8;
                *((void *)&v125[0] + 1) = v44;
                uint64_t v48 = *(float (**)(_OWORD *))(*(void *)v47 + 104);
                swift_retain();
                float v49 = v48(v125);
                uint64_t v8 = v113;
                float v50 = v49;
                int v52 = v51;
                int v54 = v53;
                int v56 = v55;
                swift_release();
                *(v45 - 2) = v50;
                *((_DWORD *)v45 - 1) = v52;
                *(_DWORD *)uint64_t v45 = v54;
                *((_DWORD *)v45 + 1) = v56;
                v45 += 4;
                --v46;
              }
              while (v46);
            }
            id v17 = v107;
            objc_msgSend(v107, sel_setArgumentBytes_atIndex_type_count_flags_, v102, v20, 5, v106, 3, v42);
            objc_msgSend(v17, sel_setArgumentColorSpace_atIndex_, 2, v20);
          }
          else
          {
            uint64_t v102 = swift_slowAlloc();
            uint64_t v80 = v110;
            if (v39)
            {
              char v81 = (float *)(v102 + 8);
              uint64_t v82 = v106;
              do
              {
                uint64_t v83 = *v40++;
                *(void *)&v125[0] = v8;
                *((void *)&v125[0] + 1) = v80;
                long long v84 = *(float (**)(_OWORD *))(*(void *)v83 + 104);
                swift_retain();
                float v85 = v84(v125);
                uint64_t v8 = v113;
                float v86 = v85;
                int v88 = v87;
                int v90 = v89;
                int v92 = v91;
                swift_release();
                *(v81 - 2) = v86;
                *((_DWORD *)v81 - 1) = v88;
                *(_DWORD *)char v81 = v90;
                *((_DWORD *)v81 + 1) = v92;
                v81 += 4;
                --v82;
              }
              while (v82);
            }
            id v17 = v107;
            uint64_t v93 = v102;
            objc_msgSend(v107, sel_setArgumentBytes_atIndex_type_count_flags_, v102, v20, 5, v106, 3);
            objc_msgSend(v17, sel_setArgumentColorSpace_atIndex_, 2, v20);
            MEMORY[0x24C527CC0](v93, -1, -1);
          }
          outlined consume of Shader.Argument.Storage((uint64_t)v26, v109, 6);
          outlined consume of EnvironmentValues?(v8);
          uint64_t v13 = v100;
          uint64_t v18 = v111;
          uint64_t v19 = v112;
          goto LABEL_5;
        case 7:
          if (v8 == 1)
          {
            LODWORD(v125[0]) = 0;
            *((void *)&v125[0] + 1) = 0;
            objc_msgSend(v17, sel_setArgumentBytes_atIndex_type_count_flags_, v125, v20, 7, 1, 0);
            goto LABEL_5;
          }
          uint64_t v57 = type metadata accessor for Text.Style(0);
          uint64_t v58 = *(void (**)(void))(*(void *)(v57 - 8) + 56);
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v58)(v108, 1, 1, v57);
          uint64_t v59 = v104;
          v104[2] = 0;
          unint64_t v60 = v25;
          uint64_t v61 = (int *)v105;
          unint64_t v106 = (unint64_t)v59 + *(int *)(v105 + 24);
          v58();
          uint64_t v62 = v110;
          uint64_t v8 = v113;
          uint64_t v102 = v61[7];
          int v63 = v101;
          *(_DWORD *)((char *)v59 + v102) = v101;
          *((unsigned char *)v59 + v61[8]) = 8;
          *((unsigned char *)v59 + v61[9]) = 3;
          uint64_t v64 = v61[10];
          unint64_t v65 = v60;
          *((unsigned char *)v59 + v64) = 1;
          *uint64_t v59 = v8;
          v59[1] = v62;
          outlined copy of Shader.Argument.Storage((uint64_t)v26, v60, 7);
          outlined copy of EnvironmentValues?(v8);
          outlined copy of Shader.Argument.Storage((uint64_t)v26, v60, 7);
          outlined copy of EnvironmentValues?(v8);
          outlined assign with take of Text.Style?(v108, v106);
          uint64_t v66 = (uint64_t)v103;
          *(_DWORD *)((char *)v59 + v102) = v63;
          outlined init with take of ImageResolutionContext((uint64_t)v59, v66);
          (*(void (**)(long long *__return_ptr, uint64_t))(*v26 + 80))(&v115, v66);
          outlined destroy of ImageResolutionContext(v66);
          long long v131 = v122;
          long long v132 = v123;
          *(_OWORD *)unsigned int v133 = *(_OWORD *)v124;
          *(_DWORD *)&v133[15] = *(_DWORD *)&v124[15];
          long long v127 = v118;
          long long v128 = v119;
          long long v129 = v120;
          long long v130 = v121;
          v125[0] = v115;
          v125[1] = v116;
          v126[0] = *(_OWORD *)v117;
          v126[1] = *(_OWORD *)&v117[16];
          char v67 = (void *)v115;
          char v68 = BYTE8(v115);
          double v69 = *((double *)&v116 + 1);
          unint64_t v109 = v65;
          if (BYTE8(v115) > 3u)
          {
            if (BYTE8(v115) == 4)
            {
              int v70 = (void *)v115;
              outlined copy of GraphicsImage.Contents?((id)v115, 4);
              id v17 = v107;
              uint64_t v19 = v112;
              goto LABEL_51;
            }
            int v70 = (void *)v115;
            id v17 = v107;
            uint64_t v19 = v112;
            if (BYTE8(v115) == 255) {
              goto LABEL_51;
            }
          }
          else
          {
            if (!BYTE8(v115))
            {
              outlined copy of GraphicsImage.Contents?((id)v115, 0);
              outlined copy of GraphicsImage.Contents?(v67, 0);
              v79.SwiftUI::ContentStyle::ID value = (CGImageRef)v67;
              id v17 = v107;
              int v70 = v67;
LABEL_49:
              uint64_t v94 = v79.value;
              LODWORD(v115) = RBImageMakeCGImage();
              *((void *)&v115 + 1) = v95;
              objc_msgSend(v17, sel_setArgumentBytes_atIndex_type_count_flags_, &v115, v20, 7, 1, 0);

              unint64_t v96 = v109;
              outlined consume of Shader.Argument.Storage((uint64_t)v26, v109, 7);
              outlined release of Image.Resolved((uint64_t)v125);
              outlined consume of EnvironmentValues?(v8);
              outlined consume of Shader.Argument.Storage((uint64_t)v26, v96, 7);
              outlined consume of GraphicsImage.Contents?(v70, v68);
              uint64_t v18 = v111;
              uint64_t v19 = v112;
              goto LABEL_5;
            }
            int v70 = (void *)v115;
            id v17 = v107;
            uint64_t v19 = v112;
            if (BYTE8(v115) == 1)
            {
              outlined copy of GraphicsImage.Contents?((id)v115, 1);
              LODWORD(v115) = RBImageMakeIOSurface();
              *((void *)&v115 + 1) = v71;
              objc_msgSend(v17, sel_setArgumentBytes_atIndex_type_count_flags_, &v115, v20, 7, 1, 0);
              unint64_t v72 = v109;
              outlined consume of Shader.Argument.Storage((uint64_t)v26, v109, 7);
              outlined release of Image.Resolved((uint64_t)v125);
              outlined consume of EnvironmentValues?(v8);
              outlined consume of Shader.Argument.Storage((uint64_t)v26, v72, 7);
              uint64_t v73 = v70;
              char v74 = 1;
              goto LABEL_52;
            }
          }
          *(void *)&long long v115 = v70;
          *(_OWORD *)&v117[12] = *(_OWORD *)((char *)v126 + 12);
          v117[28] = BYTE12(v126[1]);
          long long v118 = v127;
          long long v119 = v128;
          double v76 = 0.0;
          LODWORD(v120) = v129;
          double v77 = 0.0;
          if (*(double *)&v116 != 0.0)
          {
            double v78 = *(double *)v117;
            switch(v117[8])
            {
              case 4:
              case 5:
              case 6:
              case 7:
                double v78 = *((double *)&v116 + 1);
                double v69 = *(double *)v117;
                break;
              default:
                break;
            }
            double v76 = 1.0 / *(double *)&v116 * v69;
            double v77 = 1.0 / *(double *)&v116 * v78;
          }
          outlined copy of GraphicsImage.Contents?(v70, SBYTE8(v115));
          v79.SwiftUI::ContentStyle::ID value = GraphicsImage.render(at:prefersMask:)((CGSize)__PAIR128__(*(unint64_t *)&v77, *(unint64_t *)&v76), 0).value;
          uint64_t v19 = v112;
          if (v79.value) {
            goto LABEL_49;
          }
LABEL_51:
          unint64_t v97 = v109;
          outlined consume of Shader.Argument.Storage((uint64_t)v26, v109, 7);
          outlined release of Image.Resolved((uint64_t)v125);
          outlined consume of EnvironmentValues?(v8);
          outlined consume of Shader.Argument.Storage((uint64_t)v26, v97, 7);
          uint64_t v73 = v70;
          char v74 = v68;
LABEL_52:
          outlined consume of GraphicsImage.Contents?(v73, v74);
          uint64_t v18 = v111;
LABEL_5:
          unint64_t v20 = v114;
          if (v114 != v18) {
            continue;
          }
          swift_bridgeObjectRelease();
          break;
        case 8:
          if (v8 == 1)
          {
LABEL_19:
            objc_msgSend(v17, sel_setArgumentBytes_atIndex_type_count_flags_);
          }
          else
          {
            outlined copy of Shader.Argument.Storage((uint64_t)v26, v25, 8);
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v17, sel_setArgumentData_atIndex_type_flags_, isa, v20, 0, 3);
            outlined consume of Shader.Argument.Storage((uint64_t)v26, v25, 8);

            uint64_t v19 = v112;
          }
          goto LABEL_5;
        case 9:
          objc_msgSend(v17, sel_setArgumentBytes_atIndex_type_count_flags_);
          uint64_t v21 = (uint64_t)v26;
          unint64_t v22 = v25;
          char v23 = 9;
          goto LABEL_4;
        default:
          LODWORD(v125[0]) = v26;
          objc_msgSend(v17, sel_setArgumentBytes_atIndex_type_count_flags_, v125, v20, 1, 1, 0);
          uint64_t v21 = (uint64_t)v26;
          unint64_t v22 = v25;
          char v23 = 0;
LABEL_4:
          outlined consume of Shader.Argument.Storage(v21, v22, v23);
          goto LABEL_5;
      }
      break;
    }
  }
  return v17;
}

uint64_t Shader.compile(as:)(int *a1)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 32) = v4;
  *(_DWORD *)(v2 + 48) = *(_DWORD *)(v1 + 32);
  *(_DWORD *)(v2 + 52) = v3;
  return MEMORY[0x270FA2498](Shader.compile(as:), 0, 0);
}

uint64_t Shader.compile(as:)()
{
  id v1 = objc_msgSend(self, sel_sharedDefaultDevice);
  *(void *)(v0 + 56) = v1;
  if (v1)
  {
    int v2 = *(_DWORD *)(v0 + 52);
    uint64_t v3 = swift_task_alloc();
    *(void *)(v0 + 64) = v3;
    *(void *)(v3 + 16) = v0 + 16;
    *(_DWORD *)(v3 + 24) = v2;
    *(void *)(v3 + 32) = v1;
    long long v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v4;
    *long long v4 = v0;
    v4[1] = Shader.compile(as:);
    return MEMORY[0x270FA2360]();
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    int v2 = Shader.compile(as:);
  }
  else
  {
    swift_task_dealloc();
    int v2 = Shader.compile(as:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void closure #1 in Shader.compile(as:)(uint64_t a1, long long *a2, uint64_t a3, void *a4)
{
  type metadata accessor for CheckedContinuation<(), Error>();
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v8);
  long long v12 = a2[1];
  long long aBlock = *a2;
  long long v19 = v12;
  LODWORD(v20) = *((_DWORD *)a2 + 8);
  long long v22 = xmmword_24619B520;
  id v13 = Shader.makeRBShader(in:)((uint64_t *)&v22);
  objc_msgSend(v13, sel_setType_, a3, aBlock, v19, v20);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v14 = (void *)static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v15 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v16 + v15, (char *)&aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  unint64_t v20 = partial apply for closure #1 in closure #1 in Shader.compile(as:);
  uint64_t v21 = v16;
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v19 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  *((void *)&v19 + 1) = &block_descriptor_15;
  id v17 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(a4, sel_compileShader_completionQueue_handler_, v13, v14, v17);
  _Block_release(v17);
}

uint64_t closure #1 in closure #1 in Shader.compile(as:)(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    type metadata accessor for CheckedContinuation<(), Error>();
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    type metadata accessor for CheckedContinuation<(), Error>();
    return CheckedContinuation.resume(returning:)();
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void static Shader.UsageType.shapeStyle.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void static Shader.UsageType.colorEffect.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static Shader.UsageType.distortionEffect.getter(_DWORD *a1@<X8>)
{
  *a1 = 3;
}

void static Shader.UsageType.layerEffect.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void Shader.UsageType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static Shader.UsageType.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int Shader.UsageType.hashValue.getter()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

id Shader.rbShader(in:)(_OWORD *a1)
{
  uint64_t v2 = v1[1];
  int v3 = *((_DWORD *)v1 + 8);
  uint64_t v6 = *v1;
  uint64_t v7 = v2;
  long long v8 = *((_OWORD *)v1 + 1);
  int v9 = v3;
  *(_OWORD *)uint64_t v5 = *a1;
  return Shader.makeRBShader(in:)(v5);
}

uint64_t View.colorEffect(_:isEnabled:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 32) | 2;
  v6[0] = *(void *)a1;
  v6[1] = v3;
  long long v7 = *(_OWORD *)(a1 + 16);
  int v8 = v4;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = a2;
  return View.modifier<A>(_:)(v6, a3, &type metadata for _ShaderFilterEffect);
}

uint64_t View.layerEffect(_:maxSampleOffset:isEnabled:)(uint64_t a1, char a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 32);
  v8[0] = *(void *)a1;
  v8[1] = v5;
  long long v9 = *(_OWORD *)(a1 + 16);
  int v10 = v6;
  double v11 = a4;
  double v12 = a5;
  char v13 = a2;
  return View.modifier<A>(_:)(v8, a3, &type metadata for _ShaderFilterEffect);
}

uint64_t View.distortionEffect(_:maxSampleOffset:isEnabled:)(uint64_t a1, char a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 32) | 4;
  v8[0] = *(void *)a1;
  v8[1] = v5;
  long long v9 = *(_OWORD *)(a1 + 16);
  int v10 = v6;
  double v11 = a4;
  double v12 = a5;
  char v13 = a2;
  return View.modifier<A>(_:)(v8, a3, &type metadata for _ShaderFilterEffect);
}

uint64_t _ShaderFilterEffect.init(shader:maxSampleOffset:enabled:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5 = *(void *)(result + 8);
  int v6 = *(_DWORD *)(result + 32);
  *(void *)a3 = *(void *)result;
  *(void *)(a3 + 8) = v5;
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(result + 16);
  *(_DWORD *)(a3 + 32) = v6;
  *(double *)(a3 + 40) = a4;
  *(double *)(a3 + 48) = a5;
  *(unsigned char *)(a3 + 56) = a2;
  return result;
}

uint64_t _ShaderFilterEffect.shader.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  int v6 = *(_DWORD *)(v1 + 32);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 32) = v6;
  id v7 = v2;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

__n128 _ShaderFilterEffect.shader.setter(__n128 *a1)
{
  unint64_t v3 = a1->n128_u64[0];
  unint64_t v4 = a1->n128_u64[1];
  unsigned __int32 v5 = a1[2].n128_u32[0];
  int v6 = *(void **)v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(void *)uint64_t v1 = v3;
  *(void *)(v1 + 8) = v4;
  __n128 result = a1[1];
  *(__n128 *)(v1 + 16) = result;
  *(_DWORD *)(v1 + 32) = v5;
  return result;
}

uint64_t (*_ShaderFilterEffect.shader.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _ShaderFilterEffect.maxSampleOffset.getter()
{
  return *(double *)(v0 + 40);
}

void _ShaderFilterEffect.maxSampleOffset.setter(double a1, double a2)
{
  *(double *)(v2 + 40) = a1;
  *(double *)(v2 + 48) = a2;
}

uint64_t (*_ShaderFilterEffect.maxSampleOffset.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShaderFilterEffect.enabled.getter()
{
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t _ShaderFilterEffect.enabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 56) = result;
  return result;
}

uint64_t (*_ShaderFilterEffect.enabled.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ShaderFilterEffect._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a1 + 48);
  uint64_t v13[2] = *(_OWORD *)(a1 + 32);
  void v13[3] = v5;
  void v13[4] = *(_OWORD *)(a1 + 64);
  int v14 = *(_DWORD *)(a1 + 80);
  long long v6 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v6;
  swift_beginAccess();
  type metadata accessor for PropertyList.Tracker();
  uint64_t v7 = swift_allocObject();
  type metadata accessor for AtomicBuffer<TrackerData>();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = MEMORY[0x263F8EE80];
  *(_DWORD *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  *(void *)(v8 + 32) = v9;
  uint64_t v10 = MEMORY[0x263F8EE78];
  *(void *)(v8 + 40) = v9;
  *(void *)(v8 + 48) = v10;
  *(unsigned char *)(v8 + 56) = 0;
  *(void *)(v7 + 16) = v8;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type _ShaderFilterEffect.ResolvedEffect and conformance _ShaderFilterEffect.ResolvedEffect();
  uint64_t v11 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(v11, (uint64_t)v13, a2, a3);
}

void _ShaderFilterEffect.ResolvedEffect.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  unint64_t v4 = *(void **)Value;
  unint64_t v3 = *(void **)(Value + 8);
  uint64_t v5 = *(void *)(Value + 16);
  uint64_t v6 = *(void *)(Value + 24);
  int v7 = *(_DWORD *)(Value + 32);
  long long v23 = *(_OWORD *)(Value + 40);
  int v8 = *(unsigned __int8 *)(Value + 56);
  if (v9)
  {
    id v12 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v10 = *(void *)AGGraphGetValue();
    swift_retain();
    id v21 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v11 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v10);
    swift_release();
    if ((v11 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
  }
  id v22 = v3;
  uint64_t v13 = *(void *)(v1 + 8);
  PropertyList.Tracker.reset()();
  uint64_t v14 = *(void *)AGGraphGetValue();
  if (v14) {
    uint64_t v15 = *(void *)(v14 + 64);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void *)(v13 + 16);
  swift_retain_n();
  swift_retain_n();
  id v17 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v16 + 16));
  *(void *)(v16 + 24) = v15;
  os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 16));
  swift_release();
  swift_release();
  swift_release();
  if (v8)
  {
    id v25 = v17;
    *(void *)&long long v26 = v22;
    *((void *)&v26 + 1) = v5;
    uint64_t v27 = v6;
    int v18 = v7;
    int v28 = v7;
    v24[0] = v14;
    v24[1] = v13;
    id v19 = Shader.makeRBShader(in:)(v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    swift_release();
    long long v20 = v23;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    swift_release();
    id v19 = 0;
    int v18 = 0;
    long long v20 = 0uLL;
  }
  id v25 = v19;
  long long v26 = v20;
  LODWORD(v27) = v18;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void protocol witness for static StatefulRule.initialValue.getter in conformance _ShaderFilterEffect.ResolvedEffect(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 1;
  *(_DWORD *)(a1 + 24) = 0;
}

void Shader.ResolvedShader.encode(to:)(uint64_t a1)
{
  uint64_t v3 = v1;
  double v5 = *(double *)(v3 + 8);
  double v6 = *(double *)(v3 + 16);
  Swift::UInt v7 = *(unsigned int *)(v3 + 24);
  if (*(void *)v3)
  {
    int v8 = *(id *)v3;
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = *(void **)(a1 + 24);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    }
    unint64_t v12 = v10[2];
    unint64_t v11 = v10[3];
    unint64_t v13 = v12 + 1;
    if (v12 >= v11 >> 1) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v10);
    }
    void v10[2] = v13;
    v10[v12 + 4] = v9;
    *(void *)(a1 + 24) = v10;
    uint64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_21:
      int v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      goto LABEL_13;
    }
    Swift::UInt v27 = v7;
    *(void *)(a1 + 8) = v14;
    double v15 = *(double *)a1;
    uint64_t v16 = *(void *)(a1 + 16);
    uint64_t v17 = *(void *)(a1 + 32);
    int v18 = (objc_class *)type metadata accessor for RBDisplayListEncoderDelegate();
    id v19 = (char *)objc_allocWithZone(v18);
    long long v20 = (double *)&v19[OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder];
    *long long v20 = v15;
    *((void *)v20 + 1) = v14;
    *((void *)v20 + 2) = v16;
    *((void *)v20 + 3) = v10;
    *((void *)v20 + 4) = v17;
    v26.receiver = v19;
    v26.super_class = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v21 = objc_msgSendSuper2(&v26, sel_init);
    id v22 = v8;
    id v23 = v21;
    specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(v22, a1, v22, v23);
    if (v2)
    {

      return;
    }

    ProtobufEncoder.endLengthDelimited()();
    Swift::UInt v7 = v27;
  }
  if (v5 == 0.0 && v6 == 0.0) {
    goto LABEL_17;
  }
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  unint64_t v13 = *(void *)(a1 + 8);
  int v8 = *(void **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_21;
  }
LABEL_13:
  unint64_t v25 = v8[2];
  unint64_t v24 = v8[3];
  if (v25 >= v24 >> 1) {
    int v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v8);
  }
  void v8[2] = v25 + 1;
  v8[v25 + 4] = v13;
  *(void *)(a1 + 24) = v8;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    return;
  }
  *(void *)(a1 + 8) = v13 + 1;
  CGSize.encode(to:)((double *)a1, v5, v6);
  ProtobufEncoder.endLengthDelimited()();
LABEL_17:
  if (v7)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(v7);
  }
}

void *closure #1 in closure #1 in Shader.ResolvedShader.encode(to:)(void *a1, uint64_t a2)
{
  v6[1] = *(id *)MEMORY[0x263EF8340];
  v6[0] = 0;
  id v2 = objc_msgSend(a1, sel_encodedDataForDelegate_error_, a2, v6);
  id v3 = v6[0];
  if (v2)
  {
    unint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v4 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v4;
}

void Shader.ResolvedShader.init(from:)(void *a1@<X0>, double *a2@<X8>)
{
  unint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  if (v6 >= v7)
  {
    LODWORD(v8) = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    double v11 = 0.0;
LABEL_4:
    a1[3] = 0;
    *(void *)a2 = v9;
    a2[1] = v11;
    *((void *)a2 + 2) = v10;
    *((_DWORD *)a2 + 6) = v8;
    return;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  double v11 = 0.0;
  int v56 = a2;
  while (1)
  {
    unint64_t v13 = a1[3];
    if (v13)
    {
      unint64_t v14 = a1[4];
      if (v6 < v14) {
        goto LABEL_14;
      }
      if (v14 < v6) {
        goto LABEL_62;
      }
      a1[3] = 0;
    }
    unint64_t v15 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_67;
    }
    unint64_t v13 = v15;
    if (v15 <= 7) {
      goto LABEL_62;
    }
LABEL_14:
    unint64_t v16 = v13 >> 3;
    if (v13 >> 3 == 3)
    {
      if ((v13 & 7) != 0)
      {
        if ((v13 & 7) != 2) {
          goto LABEL_62;
        }
        uint64_t v35 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_67;
        }
        if (v35 < 0) {
          goto LABEL_73;
        }
        unint64_t v36 = a1[1] + v35;
        if (v7 < v36) {
          goto LABEL_62;
        }
        a1[3] = 24;
        a1[4] = v36;
      }
      uint64_t v37 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        goto LABEL_67;
      }
      uint64_t v8 = v37;
      goto LABEL_7;
    }
    if (v16 != 2) {
      break;
    }
    if ((v13 & 7) != 2) {
      goto LABEL_62;
    }
    id v3 = (void *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    }
    unint64_t v39 = v3[2];
    unint64_t v38 = v3[3];
    if (v39 >= v38 >> 1) {
      id v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v3);
    }
    v3[2] = v39 + 1;
    v3[v39 + 4] = v7;
    a1[5] = v3;
    uint64_t v40 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_67;
    }
    if (v40 < 0) {
      goto LABEL_69;
    }
    unint64_t v41 = a1[1] + v40;
    if (v7 < v41) {
      goto LABEL_62;
    }
    a1[2] = v41;
    double v42 = specialized CGPoint.init(from:)(a1);
    id v3 = (void *)a1[5];
    if (!v3[2]) {
      goto LABEL_71;
    }
    double v11 = v42;
    uint64_t v10 = v43;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v44 = v3[2];
      if (!v44) {
        goto LABEL_61;
      }
    }
    else
    {
      id v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      uint64_t v44 = v3[2];
      if (!v44)
      {
LABEL_61:
        __break(1u);
LABEL_62:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        goto LABEL_67;
      }
    }
    uint64_t v45 = v44 - 1;
    uint64_t v46 = v3[v45 + 4];
    v3[2] = v45;
    a1[5] = v3;
    a1[2] = v46;
LABEL_7:
    unint64_t v6 = a1[1];
    unint64_t v7 = a1[2];
    if (v6 >= v7) {
      goto LABEL_4;
    }
  }
  if (v16 != 1)
  {
    switch(v13 & 7)
    {
      case 0uLL:
        ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_67;
        }
        goto LABEL_7;
      case 1uLL:
        unint64_t v12 = a1[1] + 8;
        if (v7 < v12) {
          goto LABEL_62;
        }
        goto LABEL_6;
      case 2uLL:
        uint64_t v47 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_67;
        }
        if (v47 < 0) {
          goto LABEL_74;
        }
        unint64_t v12 = a1[1] + v47;
        if (v7 < v12) {
          goto LABEL_62;
        }
LABEL_6:
        a1[1] = v12;
        break;
      case 5uLL:
        unint64_t v12 = a1[1] + 4;
        if (v7 < v12) {
          goto LABEL_62;
        }
        goto LABEL_6;
      default:
        goto LABEL_62;
    }
    goto LABEL_7;
  }
  uint64_t v57 = v8;
  uint64_t v58 = v9;
  uint64_t v9 = (void *)a1[2];
  uint64_t v61 = a1[3];
  uint64_t v17 = a1[4];
  int v18 = (void *)a1[5];
  uint64_t v19 = a1[6];
  long long v20 = (objc_class *)type metadata accessor for RBDisplayListDecoderDelegate();
  long long v59 = *(_OWORD *)a1;
  id v21 = (char *)objc_allocWithZone(v20);
  id v22 = &v21[OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder];
  *(_OWORD *)id v22 = v59;
  a2 = (double *)v9;
  uint64_t v23 = v61;
  *((void *)v22 + 2) = v9;
  *((void *)v22 + 3) = v23;
  *((void *)v22 + 4) = v17;
  *((void *)v22 + 5) = v18;
  *((void *)v22 + 6) = v19;
  v60.receiver = v21;
  v60.super_class = v20;
  id v24 = (id)v59;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = objc_msgSendSuper2(&v60, sel_init);
  if ((v13 & 7) != 2) {
    goto LABEL_63;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
  }
  uint64_t v8 = v57;
  unint64_t v26 = v18[2];
  unint64_t v25 = v18[3];
  if (v26 >= v25 >> 1) {
    int v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v18);
  }
  _DWORD v18[2] = v26 + 1;
  v18[v26 + 4] = v9;
  a1[5] = v18;
  uint64_t v27 = ProtobufDecoder.decodeVarint()();
  if (v2) {
    goto LABEL_64;
  }
  if ((v27 & 0x8000000000000000) == 0)
  {
    unint64_t v28 = a1[1] + v27;
    if ((unint64_t)v9 < v28)
    {
LABEL_63:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
LABEL_64:

      uint64_t v9 = v58;
      goto LABEL_67;
    }
    a1[2] = v28;
    id v3 = v3;
    uint64_t v29 = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)((uint64_t)a1, v3);
    uint64_t v9 = v58;
    uint64_t v30 = (void *)a1[5];
    if (!v30[2]) {
      goto LABEL_70;
    }
    float v31 = v29;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v32 = v30[2];
      if (!v32) {
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew()(v30);
      uint64_t v32 = v30[2];
      if (!v32) {
        goto LABEL_72;
      }
    }
    uint64_t v33 = v32 - 1;
    uint64_t v34 = v30[v33 + 4];
    v30[2] = v33;

    a1[5] = v30;
    a1[2] = v34;

    uint64_t v9 = v31;
    a2 = v56;
    goto LABEL_7;
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
  __break(1u);
  int v52 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
  uint64_t v53 = v52[2];
  if (v53)
  {
    uint64_t v48 = v53 - 1;
    uint64_t v49 = v52[v48 + 4];
    v52[2] = v48;

    a1[5] = v52;
    a1[2] = v49;
  }
  else
  {
    __break(1u);
    __break(1u);
    int v54 = specialized _ArrayBuffer._consumeAndCreateNew()(v52);
    uint64_t v55 = v54[2];
    if (!v55)
    {
      __break(1u);
      JUMPOUT(0x245D4A238);
    }
    uint64_t v50 = v55 - 1;
    uint64_t v51 = v54[v50 + 4];
    v54[2] = v50;
    a1[5] = v54;
    a1[2] = v51;
  }
LABEL_67:
}

id closure #1 in closure #1 in Shader.ResolvedShader.init(from:)@<X0>(uint64_t a1@<X2>, void *a2@<X8>)
{
  v10[1] = *(id *)MEMORY[0x263EF8340];
  unint64_t v4 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v10[0] = 0;
  id v6 = objc_msgSend(v4, sel_decodedObjectWithData_delegate_error_, isa, a1, v10);

  id v7 = v10[0];
  if (v6)
  {
    *a2 = v6;
    return v7;
  }
  else
  {
    id v9 = v10[0];
    _convertNSErrorToError(_:)();

    return (id)swift_willThrow();
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance Shader.ResolvedShader(uint64_t a1)
{
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance Shader.ResolvedShader(void *a1@<X0>, double *a2@<X8>)
{
}

void Shader.ResolvedShader.draw(path:style:in:bounds:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  outlined init with take of CGRect?(a4, (uint64_t)v37);
  uint64_t v8 = v37[0];
  uint64_t v9 = v37[1];
  uint64_t v10 = v37[2];
  uint64_t v11 = v37[3];
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  uint64_t v14 = a2[2];
  uint64_t v15 = a2[3];
  uint64_t v16 = a2[4];
  char v26 = *((unsigned char *)a2 + 40);
  uint64_t v17 = *(void **)v4;
  uint64_t v18 = *(void *)(v4 + 8);
  uint64_t v19 = *(void *)(v4 + 16);
  int v20 = *(_DWORD *)(v4 + 24);
  outlined init with take of CGRect?(a4, (uint64_t)v38);
  if (v38[32] == 1)
  {
    Path.boundingRect.getter();
    uint64_t v8 = v21;
    uint64_t v9 = v22;
    uint64_t v10 = v23;
    uint64_t v11 = v24;
  }
  v31[0] = v17;
  v31[1] = v18;
  v31[2] = v19;
  int v32 = v20;
  uint64_t v33 = v8;
  uint64_t v34 = v9;
  uint64_t v35 = v10;
  uint64_t v36 = v11;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi2_((uint64_t)v31);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v31, (uint64_t)v30);
  v28[0] = v12;
  v28[1] = v13;
  _OWORD v28[2] = v14;
  void v28[3] = v15;
  v28[4] = v16;
  char v29 = v26;
  id v25 = v17;
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v30, (uint64_t)v28, a3);
}

uint64_t Shader.ResolvedShader.isCALayerCompatible.getter()
{
  return 0;
}

void static Shader.ResolvedShader.leafProtobufTag.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 8;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t Shader.ResolvedShader.rbFillFlags.getter()
{
  return *(_DWORD *)(v0 + 24) & 1;
}

void protocol witness for ResolvedPaint.draw(path:style:in:bounds:) in conformance Shader.ResolvedShader(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  outlined init with take of CGRect?(a4, (uint64_t)v37);
  uint64_t v8 = v37[0];
  uint64_t v9 = v37[1];
  uint64_t v10 = v37[2];
  uint64_t v11 = v37[3];
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  uint64_t v14 = a2[2];
  uint64_t v15 = a2[3];
  uint64_t v16 = a2[4];
  char v26 = *((unsigned char *)a2 + 40);
  uint64_t v17 = *(void **)v4;
  uint64_t v18 = *(void *)(v4 + 8);
  uint64_t v19 = *(void *)(v4 + 16);
  int v20 = *(_DWORD *)(v4 + 24);
  outlined init with take of CGRect?(a4, (uint64_t)v38);
  if (v38[32] == 1)
  {
    Path.boundingRect.getter();
    uint64_t v8 = v21;
    uint64_t v9 = v22;
    uint64_t v10 = v23;
    uint64_t v11 = v24;
  }
  v31[0] = v17;
  v31[1] = v18;
  v31[2] = v19;
  int v32 = v20;
  uint64_t v33 = v8;
  uint64_t v34 = v9;
  uint64_t v35 = v10;
  uint64_t v36 = v11;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi2_((uint64_t)v31);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v31, (uint64_t)v30);
  v28[0] = v12;
  v28[1] = v13;
  _OWORD v28[2] = v14;
  void v28[3] = v15;
  v28[4] = v16;
  char v29 = v26;
  id v25 = v17;
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v30, (uint64_t)v28, a3);
}

void protocol witness for static ResolvedPaint.leafProtobufTag.getter in conformance Shader.ResolvedShader(uint64_t a1@<X8>)
{
  *(void *)a1 = 8;
  *(unsigned char *)(a1 + 8) = 0;
}

void key path setter for Shader.ResolvedShader.animatableData : Shader.ResolvedShader(uint64_t a1, void **a2)
{
  id v3 = *a2;
  swift_bridgeObjectRetain();
  uint64_t v4 = ShaderVectorData.updating(rbShader:)(v3);
  swift_bridgeObjectRelease();

  *a2 = v4;
}

void Shader.ResolvedShader.animatableData.setter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  id v3 = ShaderVectorData.updating(rbShader:)(*v0);
  swift_bridgeObjectRelease();

  *uint64_t v1 = v3;
}

void ShaderVectorData.init(rbShader:)(void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    unint64_t v4 = (unint64_t)objc_msgSend(a1, sel_numberOfArguments);
    if ((v4 & 0x8000000000000000) != 0) {
      goto LABEL_42;
    }
    unint64_t v5 = v4;
    uint64_t v23 = a2;
    if (v4)
    {
      uint64_t v6 = 0;
      id v7 = (void *)MEMORY[0x263F8EE78];
      while (1)
      {
        if (v6 == v5)
        {
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          JUMPOUT(0x245D4A9C0);
        }
        objc_msgSend(a1, sel_argumentAtIndex_, v6);
        uint64_t v10 = v25;
        uint64_t v9 = (int *)v26;
        if (v25 == 1)
        {
          switch(v24)
          {
            case 1:
              uint64_t v11 = 0;
              char v13 = 0;
              uint64_t v12 = (char *)*v26;
              break;
            case 2:
              uint64_t v11 = 0;
              uint64_t v12 = *(char **)v26;
              char v13 = 1;
              break;
            case 3:
              uint64_t v12 = *(char **)v26;
              uint64_t v11 = v26[2];
              char v13 = 2;
              break;
            case 4:
            case 5:
              uint64_t v12 = *(char **)v26;
              uint64_t v11 = *((void *)v26 + 1);
              char v13 = 3;
              break;
            default:
              uint64_t v12 = 0;
              uint64_t v11 = 0;
              char v13 = 5;
              break;
          }
        }
        else
        {
          if (v24 != 1)
          {
            if (v24 != 5)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                id v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
              }
              unint64_t v19 = v7[2];
              unint64_t v18 = v7[3];
              if (v19 >= v18 >> 1) {
                id v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v7);
              }
              _OWORD v7[2] = v19 + 1;
              int v20 = &v7[3 * v19];
              float v20[4] = 0;
              v20[5] = 0;
              *((unsigned char *)v20 + 48) = 5;
              goto LABEL_6;
            }
            if ((unint64_t)(v25 - 0x2000000000000000) >> 62 != 3) {
              goto LABEL_41;
            }
            uint64_t v10 = 4 * v25;
          }
          uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10 & ~(v10 >> 63), 0, MEMORY[0x263F8EE78]);
          if (v10 < 0) {
            goto LABEL_40;
          }
          uint64_t v12 = v14;
          if (v10)
          {
            unint64_t v15 = *((void *)v14 + 2);
            do
            {
              int v16 = *v9;
              unint64_t v17 = *((void *)v12 + 3);
              if (v15 >= v17 >> 1) {
                uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v15 + 1, 1, v12);
              }
              *((void *)v12 + 2) = v15 + 1;
              *(_DWORD *)&v12[4 * v15 + 32] = v16;
              ++v9;
              ++v15;
              --v10;
            }
            while (v10);
          }
          uint64_t v11 = 0;
          char v13 = 4;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
        }
        unint64_t v22 = v7[2];
        unint64_t v21 = v7[3];
        if (v22 >= v21 >> 1) {
          id v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v7);
        }
        _OWORD v7[2] = v22 + 1;
        uint64_t v8 = &v7[3 * v22];
        v8[4] = v12;
        v8[5] = v11;
        *((unsigned char *)v8 + 48) = v13;
LABEL_6:
        if (++v6 == v5) {
          goto LABEL_37;
        }
      }
    }
    id v7 = (void *)MEMORY[0x263F8EE78];
LABEL_37:

    a2 = v23;
  }
  else
  {
    id v7 = (void *)MEMORY[0x263F8EE78];
  }
  *a2 = v7;
}

void *ShaderVectorData.updating(rbShader:)(void *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *v1;
  id v3 = a1;
  objc_msgSend(v3, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for RBShader);
  swift_dynamicCast();
  unint64_t v4 = v15;
  uint64_t v5 = *(void *)(v2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    id v7 = (char *)(v2 + 48);
    do
    {
      uint64_t v9 = *((void *)v7 - 2);
      uint64_t v8 = *((void *)v7 - 1);
      int v10 = *v7;
      outlined copy of ShaderVectorData.Element(v9, v8, *v7);
      objc_msgSend(v3, sel_argumentAtIndex_, v6);
      switch((int)v16)
      {
        case 1:
          if (v10 == 4)
          {
            objc_msgSend(v15, sel_setArgumentBytes_atIndex_type_count_flags_, v9 + 32, v6, 1, *(void *)(v9 + 16), HIDWORD(v16));
            goto LABEL_22;
          }
          if (v10 == 3)
          {
            uint64_t v16 = v9;
            uint64_t v17 = v8;
          }
          else
          {
            if (v10) {
              goto LABEL_18;
            }
            LODWORD(v16) = v9;
          }
          objc_msgSend(v15, sel_setArgumentBytes_atIndex_type_count_flags_, &v16, v6, 1, 1);
          break;
        case 2:
          if (v10 != 1) {
            goto LABEL_18;
          }
          uint64_t v16 = v9;
          objc_msgSend(v15, (SEL)&selRef_setStrokedRoundedRect_cornerRadius_cornerStyle_lineWidth_ + 1, &v16, v6, 2, 1);
          break;
        case 3:
          if (v10 != 2) {
            goto LABEL_18;
          }
          uint64_t v16 = v9;
          LODWORD(v17) = v8;
          objc_msgSend(v15, (SEL)&selRef_setStrokedRoundedRect_cornerRadius_cornerStyle_lineWidth_ + 1, &v16, v6, 3, 1);
          break;
        case 5:
          if (v10 == 4)
          {
            objc_msgSend(v15, (SEL)&selRef_setStrokedRoundedRect_cornerRadius_cornerStyle_lineWidth_ + 1, v9 + 32, v6, 5, *(void *)(v9 + 16) >> 2, HIDWORD(v16));
LABEL_22:
            uint64_t v11 = v9;
            uint64_t v12 = v8;
            char v13 = 4;
            goto LABEL_19;
          }
          if (v10 != 3) {
            goto LABEL_18;
          }
          uint64_t v16 = v9;
          uint64_t v17 = v8;
          objc_msgSend(v15, (SEL)&selRef_setStrokedRoundedRect_cornerRadius_cornerStyle_lineWidth_ + 1, &v16, v6, 5, 1);
          break;
        default:
LABEL_18:
          uint64_t v11 = v9;
          uint64_t v12 = v8;
          char v13 = v10;
LABEL_19:
          outlined consume of ShaderVectorData.Element(v11, v12, v13);
          break;
      }
      ++v6;
      v7 += 24;
    }
    while (v5 != v6);

    swift_bridgeObjectRelease();
  }
  else
  {
  }
  return v4;
}

void (*Shader.ResolvedShader.animatableData.modify(void *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  id v3 = *v1;
  id v4 = v3;
  ShaderVectorData.init(rbShader:)(v3, a1);
  return Shader.ResolvedShader.animatableData.modify;
}

void Shader.ResolvedShader.animatableData.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  if (a2)
  {
    id v3 = *v2;
    swift_bridgeObjectRetain();
    id v4 = ShaderVectorData.updating(rbShader:)(v3);
    swift_bridgeObjectRelease();

    *uint64_t v2 = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *v2;
    uint64_t v6 = ShaderVectorData.updating(rbShader:)(*v2);
    swift_bridgeObjectRelease();

    *uint64_t v2 = v6;
  }
}

void protocol witness for Animatable.animatableData.getter in conformance Shader.ResolvedShader(void *a1@<X8>)
{
  id v3 = *v1;
  id v4 = v3;

  ShaderVectorData.init(rbShader:)(v3, a1);
}

void protocol witness for Animatable.animatableData.setter in conformance Shader.ResolvedShader()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  id v3 = ShaderVectorData.updating(rbShader:)(*v0);
  swift_bridgeObjectRelease();

  *uint64_t v1 = v3;
}

void (*protocol witness for Animatable.animatableData.modify in conformance Shader.ResolvedShader(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Shader.ResolvedShader.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

id Shader.ResolvedShader.effectValue(size:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v7 = *(void *)(v3 + 8);
  uint64_t v12 = *(void **)v3;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(unsigned int *)(v3 + 24);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v12;
  *(void *)(v10 + 24) = v7;
  *(void *)(v10 + 32) = v8;
  *(void *)(v10 + 40) = v9;
  *(double *)(v10 + 48) = a2;
  *(double *)(v10 + 56) = a3;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_DWORD *)(v10 + 128) = 0;
  *(unsigned char *)(v10 + 132) = 15;
  *(void *)a1 = v10;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;

  return v12;
}

uint64_t Shader.ResolvedShader.rbFilterFlags.getter()
{
  int v1 = *(_DWORD *)(v0 + 24);
  if ((v1 & 2) != 0)
  {
    if (v1)
    {
      uint64_t result = 17;
      if ((v1 & 8) != 0) {
        return result | 0x40;
      }
    }
    else
    {
      uint64_t result = 1;
      if ((v1 & 8) != 0) {
        return result | 0x40;
      }
    }
  }
  else if ((v1 & 4) != 0)
  {
    if (v1)
    {
      uint64_t result = 18;
      if ((v1 & 8) == 0) {
        return result;
      }
      return result | 0x40;
    }
    uint64_t result = 2;
    if ((v1 & 8) != 0) {
      return result | 0x40;
    }
  }
  else
  {
    if ((v1 & 1) == 0)
    {
      uint64_t result = 0;
      if ((v1 & 8) == 0) {
        return result;
      }
      return result | 0x40;
    }
    uint64_t result = 16;
    if ((v1 & 8) != 0) {
      return result | 0x40;
    }
  }
  return result;
}

id protocol witness for _RendererEffect.effectValue(size:) in conformance Shader.ResolvedShader@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v7 = *(void *)(v3 + 8);
  uint64_t v12 = *(void **)v3;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(unsigned int *)(v3 + 24);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v12;
  *(void *)(v10 + 24) = v7;
  *(void *)(v10 + 32) = v8;
  *(void *)(v10 + 40) = v9;
  *(double *)(v10 + 48) = a2;
  *(double *)(v10 + 56) = a3;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_DWORD *)(v10 + 128) = 0;
  *(unsigned char *)(v10 + 132) = 15;
  *(void *)a1 = v10;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;

  return v12;
}

uint64_t static ShaderVectorData.+ infix(_:_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  return static ShaderVectorData.- infix(_:_:)(a1, a2, (uint64_t (*)(void *, uint64_t *))specialized static ShaderVectorData.+= infix(_:_:), a3);
}

uint64_t static ShaderVectorData.- infix(_:_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void *, uint64_t *)@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *a2;
  *a4 = *a1;
  uint64_t v8 = v6;
  swift_bridgeObjectRetain();
  return a3(a4, &v8);
}

Swift::Void __swiftcall ShaderVectorData.Element.scale(by:)(Swift::Double by)
{
  float32x4_t v2 = *v1;
  __int8 v3 = v1[1].i8[0];
  switch(v3)
  {
    case 1:
      float v7 = by;
      unsigned long long v6 = COERCE_UNSIGNED_INT(v7 * v2.f32[0]) | (unsigned __int128)((unint64_t)COERCE_UNSIGNED_INT(v7 * v2.f32[1]) << 32);
      goto LABEL_14;
    case 2:
      float v8 = by;
      *(void *)&unsigned long long v6 = COERCE_UNSIGNED_INT(v8 * v2.f32[0]) | ((unint64_t)COERCE_UNSIGNED_INT(v8 * v2.f32[1]) << 32);
      *((void *)&v6 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(v8, v2, 2));
      goto LABEL_14;
    case 3:
      float v9 = by;
      float32x2_t v10 = vmul_n_f32((float32x2_t)vmovn_s64((int64x2_t)v2), v9);
      v11.i64[0] = v10.u32[0];
      v11.i64[1] = v10.u32[1];
      unsigned long long v6 = (unsigned __int128)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_n_f32((float32x2_t)vshrn_n_s64((int64x2_t)v2, 0x20uLL), v9), 0x20uLL), v11);
      goto LABEL_14;
    case 4:
      uint64_t v12 = v1->i64[0];
      int64_t v13 = *(void *)(v2.i64[0] + 16);
      if (v13)
      {
        float32x4_t v20 = *v1;
        unint64_t v21 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
        float v14 = by;
        unint64_t v15 = v21;
        uint64_t v16 = (float *)(v12 + 32);
        unint64_t v17 = *(void *)(v21 + 16);
        do
        {
          float v18 = *v16;
          unint64_t v19 = *(void *)(v21 + 24);
          if (v17 >= v19 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v17 + 1, 1);
          }
          *(void *)(v21 + 16) = v17 + 1;
          *(float *)(v21 + 4 * v17 + 32) = v18 * v14;
          ++v16;
          ++v17;
          --v13;
        }
        while (v13);
        outlined consume of ShaderVectorData.Element(v12, v20.i64[1], 4);
        outlined consume of ShaderVectorData.Element(v12, v20.i64[1], 4);
      }
      else
      {
        outlined consume of ShaderVectorData.Element(v2.i64[0], v2.i64[1], 4);
        unint64_t v15 = MEMORY[0x263F8EE78];
      }
      unsigned long long v6 = v15;
      goto LABEL_14;
    case 5:
      return;
    default:
      float v5 = by;
      DWORD1(v6) = 0;
      *((void *)&v6 + 1) = 0;
      *(float *)&unsigned long long v6 = v5 * v2.f32[0];
LABEL_14:
      *int v1 = (float32x4_t)v6;
      v1[1].i8[0] = v3;
      return;
  }
}

double ShaderVectorData.Element.magnitudeSquared.getter(float32x4_t *a1, uint64_t a2, char a3)
{
  double result = 0.0;
  switch(a3)
  {
    case 1:
      return (float)((float)(*(float *)&a1 * *(float *)&a1) + (float)(*((float *)&a1 + 1) * *((float *)&a1 + 1)));
    case 2:
      return (float)((float)(*(float *)&a2 * *(float *)&a2)
                   + (float)((float)(*(float *)&a1 * *(float *)&a1) + (float)(*((float *)&a1 + 1) * *((float *)&a1 + 1))));
    case 3:
      return (float)((float)(*((float *)&a2 + 1) * *((float *)&a2 + 1))
                   + (float)((float)(*(float *)&a2 * *(float *)&a2)
                           + (float)((float)(*(float *)&a1 * *(float *)&a1)
                                   + (float)(*((float *)&a1 + 1) * *((float *)&a1 + 1)))));
    case 4:
      unint64_t v5 = a1[1].u64[0];
      if (!v5) {
        return result;
      }
      if (v5 < 8)
      {
        uint64_t v6 = 0;
        float v4 = 0.0;
LABEL_12:
        unint64_t v11 = v5 - v6;
        uint64_t v12 = &a1[2].f32[v6];
        do
        {
          float v13 = *v12++;
          float v4 = v4 + (float)(v13 * v13);
          --v11;
        }
        while (v11);
        return v4;
      }
      uint64_t v6 = v5 & 0x7FFFFFFFFFFFFFF8;
      float v7 = a1 + 3;
      float v4 = 0.0;
      uint64_t v8 = v5 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v9 = vmulq_f32(v7[-1], v7[-1]);
        float32x4_t v10 = vmulq_f32(*v7, *v7);
        float v4 = (float)((float)((float)((float)((float)((float)((float)(v4 + v9.f32[0]) + v9.f32[1]) + v9.f32[2])
                                           + v9.f32[3])
                                   + v10.f32[0])
                           + v10.f32[1])
                   + v10.f32[2])
           + v10.f32[3];
        v7 += 2;
        v8 -= 8;
      }
      while (v8);
      if (v5 != v6) {
        goto LABEL_12;
      }
      return v4;
    case 5:
      return result;
    default:
      return (float)(*(float *)&a1 * *(float *)&a1);
  }
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance ShaderVectorData@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance ShaderVectorData(a1, a2, (uint64_t (*)(void *, uint64_t *))specialized static ShaderVectorData.+= infix(_:_:), a3);
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance ShaderVectorData@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance ShaderVectorData(a1, a2, (uint64_t (*)(void *, uint64_t *))specialized static ShaderVectorData.-= infix(_:_:), a3);
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance ShaderVectorData@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void *, uint64_t *)@<X4>, void *a4@<X8>)
{
  uint64_t v6 = *a2;
  *a4 = *a1;
  uint64_t v8 = v6;
  swift_bridgeObjectRetain();
  return a3(a4, &v8);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ShaderVectorData(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

void protocol witness for static AdditiveArithmetic.zero.getter in conformance ShaderVectorData.Element(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 5;
}

double protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance ShaderVectorData.Element@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance ShaderVectorData.Element(a1, a2, (void (*)(long long *, uint64_t, uint64_t, uint64_t))specialized static ShaderVectorData.Element.+= infix(_:_:), a3);
}

uint64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance ShaderVectorData.Element(int64x2_t *a1, uint64_t a2)
{
  return specialized static ShaderVectorData.Element.+= infix(_:_:)(a1, *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

double protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance ShaderVectorData.Element@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance ShaderVectorData.Element(a1, a2, (void (*)(long long *, uint64_t, uint64_t, uint64_t))specialized static ShaderVectorData.Element.-= infix(_:_:), a3);
}

double protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance ShaderVectorData.Element@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(long long *, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  char v9 = *(unsigned char *)(a1 + 16);
  uint64_t v10 = *((unsigned __int8 *)a2 + 16);
  *(void *)&long long v13 = *(void *)a1;
  *((void *)&v13 + 1) = v6;
  char v14 = v9;
  outlined copy of ShaderVectorData.Element(v13, v6, v9);
  a3(&v13, v7, v8, v10);
  char v11 = v14;
  double result = *(double *)&v13;
  *(_OWORD *)a4 = v13;
  *(unsigned char *)(a4 + 16) = v11;
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance ShaderVectorData.Element(int64x2_t *a1, uint64_t a2)
{
  return specialized static ShaderVectorData.Element.-= infix(_:_:)(a1, *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ShaderVectorData.Element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Shader.Argument.Storage(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized static ShaderVectorData.Element.== infix(_:_:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Shader.Argument.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

double protocol witness for VectorArithmetic.magnitudeSquared.getter in conformance ShaderVectorData.Element()
{
  return ShaderVectorData.Element.magnitudeSquared.getter(*(float32x4_t **)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

BOOL specialized static Shader.ResolvedShader.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float32x4_t v2 = *(void **)a1;
  double v4 = *(double *)(a1 + 8);
  double v3 = *(double *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  uint64_t v6 = *(void **)a2;
  double v8 = *(double *)(a2 + 8);
  double v7 = *(double *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 24);
  if (!*(void *)a1)
  {
    if (!v6 && v4 == v8 && v3 == v7) {
      return v5 == v9;
    }
    return 0;
  }
  if (!v6) {
    return 0;
  }
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for RBShader);
  id v10 = v6;
  id v11 = v2;
  char v12 = static NSObject.== infix(_:_:)();

  BOOL result = 0;
  if ((v12 & 1) != 0 && v4 == v8 && v3 == v7) {
    return v5 == v9;
  }
  return result;
}

BOOL specialized static ShaderVectorData.Element.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a3)
  {
    case 1:
      if (a6 != 1) {
        goto LABEL_30;
      }
      BOOL result = *(float *)&a1 == *(float *)&a4 && *((float *)&a1 + 1) == *((float *)&a4 + 1);
      break;
    case 2:
      if (a6 != 2) {
        goto LABEL_30;
      }
      BOOL result = *(float *)&a1 == *(float *)&a4
            && *((float *)&a1 + 1) == *((float *)&a4 + 1)
            && *(float *)&a2 == *(float *)&a5;
      break;
    case 3:
      if (a6 != 3) {
        goto LABEL_30;
      }
      BOOL result = *(float *)&a1 == *(float *)&a4
            && *((float *)&a1 + 1) == *((float *)&a4 + 1)
            && *(float *)&a2 == *(float *)&a5
            && *((float *)&a2 + 1) == *((float *)&a5 + 1);
      break;
    case 4:
      if (a6 != 4) {
        goto LABEL_30;
      }
      BOOL result = specialized static Array<A>.== infix(_:_:)(a1, a4);
      break;
    case 5:
      if (a6 != 5 || a5 | a4) {
        goto LABEL_30;
      }
      BOOL result = 1;
      break;
    default:
      if (a6) {
LABEL_30:
      }
        BOOL result = 0;
      else {
        BOOL result = *(float *)&a1 == *(float *)&a4;
      }
      break;
  }
  return result;
}

uint64_t specialized static ShaderVectorData.Element.+= infix(_:_:)(int64x2_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  int64x2_t v4 = *a1;
  switch(a1[1].i8[0])
  {
    case 1:
      if (a4 != 1)
      {
        int64x2_t v50 = *a1;
        outlined copy of ShaderVectorData.Element(a2, a3, a4);
        uint64_t v10 = v50.i64[1];
        uint64_t v9 = v50.i64[0];
        char v11 = 1;
        goto LABEL_24;
      }
      LODWORD(v12) = HIDWORD(a1->i64[0]);
      float v13 = COERCE_FLOAT(*a1);
      outlined consume of ShaderVectorData.Element(v4.i64[0], v4.i64[1], 1);
      uint64_t result = outlined consume of ShaderVectorData.Element(a2, a3, 1);
      a1->i64[0] = COERCE_UNSIGNED_INT(*(float *)&a2 + v13) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&a2 + 1) + v12) << 32);
      a1->i64[1] = 0;
      a1[1].i8[0] = 1;
      return result;
    case 2:
      if (a4 != 2)
      {
        int64x2_t v51 = *a1;
        outlined copy of ShaderVectorData.Element(a2, a3, a4);
        uint64_t v10 = v51.i64[1];
        uint64_t v9 = v51.i64[0];
        char v11 = 2;
        goto LABEL_24;
      }
      float v15 = COERCE_FLOAT(a1->i64[1]);
      LODWORD(v16) = HIDWORD(a1->i64[0]);
      float v17 = COERCE_FLOAT(*a1);
      outlined consume of ShaderVectorData.Element(v4.i64[0], v4.i64[1], 2);
      uint64_t result = outlined consume of ShaderVectorData.Element(a2, a3, 2);
      a1->i64[0] = COERCE_UNSIGNED_INT(*(float *)&a2 + v17) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&a2 + 1) + v16) << 32);
      a1->i64[1] = COERCE_UNSIGNED_INT(*(float *)&a3 + v15);
      a1[1].i8[0] = 2;
      return result;
    case 3:
      int64x2_t v48 = *a1;
      if (a4 != 3)
      {
        outlined copy of ShaderVectorData.Element(a2, a3, a4);
        uint64_t v10 = v48.i64[1];
        uint64_t v9 = v48.i64[0];
        char v11 = 3;
        goto LABEL_24;
      }
      float32x2_t v18 = (float32x2_t)vmovn_s64(v4);
      v19.i64[0] = a2;
      v19.i64[1] = a3;
      int64x2_t v46 = v19;
      float32x2_t v45 = (float32x2_t)__PAIR64__(a3, a2);
      outlined consume of ShaderVectorData.Element(v4.i64[0], v4.i64[1], 3);
      uint64_t result = outlined consume of ShaderVectorData.Element(a2, a3, 3);
      float32x2_t v20 = vadd_f32(v45, v18);
      v21.i64[0] = v20.u32[0];
      v21.i64[1] = v20.u32[1];
      *(int8x16_t *)a1 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v46, 0x20uLL), (float32x2_t)vshrn_n_s64(v48, 0x20uLL)), 0x20uLL), v21);
      a1[1].i8[0] = 3;
      return result;
    case 4:
      uint64_t v22 = a1->i64[0];
      if (a4 != 4)
      {
        int64x2_t v52 = *a1;
        outlined copy of ShaderVectorData.Element(a2, a3, a4);
        outlined copy of ShaderVectorData.Element(v22, v52.i64[1], 4);
        uint64_t v9 = v22;
        uint64_t v10 = v52.i64[1];
        char v11 = 4;
        goto LABEL_24;
      }
      uint64_t v23 = *(void *)(v4.i64[0] + 16);
      uint64_t v24 = a1->i64[1];
      if (v23 != *(void *)(a2 + 16))
      {
        outlined copy of ShaderVectorData.Element(a2, a3, 4);
        outlined copy of ShaderVectorData.Element(v22, v24, 4);
        outlined consume of ShaderVectorData.Element(v22, v24, 4);
        uint64_t v31 = a2;
        uint64_t v32 = a3;
        char v33 = 4;
        goto LABEL_25;
      }
      outlined copy of ShaderVectorData.Element(v4.i64[0], v4.i64[1], 4);
      outlined copy of ShaderVectorData.Element(a2, a3, 4);
      outlined copy of ShaderVectorData.Element(v22, v24, 4);
      if (!v23) {
        goto LABEL_44;
      }
      uint64_t v25 = (char *)v22;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_14;
      }
      break;
    case 5:
      int64x2_t v49 = *a1;
      outlined copy of ShaderVectorData.Element(a2, a3, a4);
      uint64_t v10 = v49.i64[1];
      uint64_t v9 = v49.i64[0];
      char v11 = 5;
      goto LABEL_24;
    default:
      if (a4)
      {
        int64x2_t v47 = *a1;
        outlined copy of ShaderVectorData.Element(a2, a3, a4);
        uint64_t v10 = v47.i64[1];
        uint64_t v9 = v47.i64[0];
        char v11 = 0;
LABEL_24:
        outlined consume of ShaderVectorData.Element(v9, v10, v11);
        uint64_t v31 = a2;
        uint64_t v32 = a3;
        char v33 = a4;
LABEL_25:
        return outlined consume of ShaderVectorData.Element(v31, v32, v33);
      }
      else
      {
        float v34 = COERCE_FLOAT(*a1);
        outlined consume of ShaderVectorData.Element(v4.i64[0], v4.i64[1], 0);
        uint64_t result = outlined consume of ShaderVectorData.Element(a2, a3, 0);
        a1->i64[0] = COERCE_UNSIGNED_INT(*(float *)&a2 + v34);
        a1->i64[1] = 0;
        a1[1].i8[0] = 0;
      }
      return result;
  }
LABEL_48:
  uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v22);
LABEL_14:
  unint64_t v26 = a2 + 32;
  unint64_t v27 = *((void *)v25 + 2);
  unint64_t v28 = v23 - 1;
  if (v27 >= v23 - 1) {
    unint64_t v29 = v23 - 1;
  }
  else {
    unint64_t v29 = *((void *)v25 + 2);
  }
  if (v29 >= 8)
  {
    if (v27 < v28) {
      unint64_t v28 = *((void *)v25 + 2);
    }
    uint64_t v35 = 4 * v28 + 36;
    if ((unint64_t)(v25 + 32) >= a2 + v35 || v26 >= (unint64_t)&v25[v35])
    {
      unint64_t v37 = v29 + 1;
      uint64_t v38 = v37 & 7;
      if ((v37 & 7) == 0) {
        uint64_t v38 = 8;
      }
      unint64_t v30 = v37 - v38;
      unint64_t v39 = (float32x4_t *)(a2 + 48);
      uint64_t v40 = (float32x4_t *)(v25 + 48);
      unint64_t v41 = v30;
      do
      {
        float32x4_t v42 = vaddq_f32(*v39, *v40);
        v40[-1] = vaddq_f32(v39[-1], v40[-1]);
        *uint64_t v40 = v42;
        v39 += 2;
        v40 += 2;
        v41 -= 8;
      }
      while (v41);
    }
    else
    {
      unint64_t v30 = 0;
    }
  }
  else
  {
    unint64_t v30 = 0;
  }
  do
  {
    if (v30 >= v27)
    {
      __break(1u);
      goto LABEL_48;
    }
    uint64_t v43 = 4 * v30;
    float v44 = *(float *)(v26 + 4 * v30++);
    *(float *)&v25[v43 + 32] = v44 + *(float *)&v25[v43 + 32];
  }
  while (v23 != v30);
LABEL_44:
  outlined consume of ShaderVectorData.Element(v22, v24, 4);
  outlined consume of ShaderVectorData.Element(a2, a3, 4);

  return swift_bridgeObjectRelease();
}

uint64_t specialized static ShaderVectorData.+= infix(_:_:)(uint64_t result, uint64_t *a2)
{
  float32x4_t v2 = (void *)result;
  uint64_t v3 = *a2;
  int64x2_t v4 = *(void **)result;
  uint64_t v5 = *(void *)(*(void *)result + 16);
  if (v5 == *(void *)(*a2 + 16))
  {
    if (v5)
    {
      unint64_t v6 = 0;
      unint64_t v7 = 0;
      while (1)
      {
        uint64_t v8 = *(void *)(v3 + v6 + 32);
        uint64_t v9 = *(void *)(v3 + v6 + 40);
        char v10 = *(unsigned char *)(v3 + v6 + 48);
        outlined copy of ShaderVectorData.Element(v8, v9, v10);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
          int64x2_t v4 = (void *)result;
        }
        if (v7 >= v4[2]) {
          break;
        }
        ++v7;
        specialized static ShaderVectorData.Element.+= infix(_:_:)((int64x2_t *)&v4[v6 / 8 + 4], v8, v9, v10);
        uint64_t result = outlined consume of ShaderVectorData.Element(v8, v9, v10);
        v6 += 24;
        if (v5 == v7)
        {
          *float32x4_t v2 = v4;
          return result;
        }
      }
      __break(1u);
    }
  }
  else if (!v5)
  {
    swift_bridgeObjectRelease();
    *float32x4_t v2 = v3;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t specialized static ShaderVectorData.Element.-= infix(_:_:)(int64x2_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  int64x2_t v4 = *a1;
  switch(a1[1].i8[0])
  {
    case 1:
      if (a4 != 1)
      {
        int64x2_t v50 = *a1;
        outlined copy of ShaderVectorData.Element(a2, a3, a4);
        uint64_t v10 = v50.i64[1];
        uint64_t v9 = v50.i64[0];
        char v11 = 1;
        goto LABEL_24;
      }
      LODWORD(v12) = HIDWORD(a1->i64[0]);
      float v13 = COERCE_FLOAT(*a1);
      outlined consume of ShaderVectorData.Element(v4.i64[0], v4.i64[1], 1);
      uint64_t result = outlined consume of ShaderVectorData.Element(a2, a3, 1);
      a1->i64[0] = COERCE_UNSIGNED_INT(v13 - *(float *)&a2) | ((unint64_t)COERCE_UNSIGNED_INT(v12 - *((float *)&a2 + 1)) << 32);
      a1->i64[1] = 0;
      a1[1].i8[0] = 1;
      return result;
    case 2:
      if (a4 != 2)
      {
        int64x2_t v51 = *a1;
        outlined copy of ShaderVectorData.Element(a2, a3, a4);
        uint64_t v10 = v51.i64[1];
        uint64_t v9 = v51.i64[0];
        char v11 = 2;
        goto LABEL_24;
      }
      float v15 = COERCE_FLOAT(a1->i64[1]);
      LODWORD(v16) = HIDWORD(a1->i64[0]);
      float v17 = COERCE_FLOAT(*a1);
      outlined consume of ShaderVectorData.Element(v4.i64[0], v4.i64[1], 2);
      uint64_t result = outlined consume of ShaderVectorData.Element(a2, a3, 2);
      a1->i64[0] = COERCE_UNSIGNED_INT(v17 - *(float *)&a2) | ((unint64_t)COERCE_UNSIGNED_INT(v16 - *((float *)&a2 + 1)) << 32);
      a1->i64[1] = COERCE_UNSIGNED_INT(v15 - *(float *)&a3);
      a1[1].i8[0] = 2;
      return result;
    case 3:
      int64x2_t v48 = *a1;
      if (a4 != 3)
      {
        outlined copy of ShaderVectorData.Element(a2, a3, a4);
        uint64_t v10 = v48.i64[1];
        uint64_t v9 = v48.i64[0];
        char v11 = 3;
        goto LABEL_24;
      }
      float32x2_t v18 = (float32x2_t)vmovn_s64(v4);
      v19.i64[0] = a2;
      v19.i64[1] = a3;
      int64x2_t v46 = v19;
      float32x2_t v45 = (float32x2_t)__PAIR64__(a3, a2);
      outlined consume of ShaderVectorData.Element(v4.i64[0], v4.i64[1], 3);
      uint64_t result = outlined consume of ShaderVectorData.Element(a2, a3, 3);
      float32x2_t v20 = vsub_f32(v18, v45);
      v21.i64[0] = v20.u32[0];
      v21.i64[1] = v20.u32[1];
      *(int8x16_t *)a1 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(v48, 0x20uLL), (float32x2_t)vshrn_n_s64(v46, 0x20uLL)), 0x20uLL), v21);
      a1[1].i8[0] = 3;
      return result;
    case 4:
      uint64_t v22 = a1->i64[0];
      if (a4 != 4)
      {
        int64x2_t v52 = *a1;
        outlined copy of ShaderVectorData.Element(a2, a3, a4);
        outlined copy of ShaderVectorData.Element(v22, v52.i64[1], 4);
        uint64_t v9 = v22;
        uint64_t v10 = v52.i64[1];
        char v11 = 4;
        goto LABEL_24;
      }
      uint64_t v23 = *(void *)(v4.i64[0] + 16);
      uint64_t v24 = a1->i64[1];
      if (v23 != *(void *)(a2 + 16))
      {
        outlined copy of ShaderVectorData.Element(a2, a3, 4);
        outlined copy of ShaderVectorData.Element(v22, v24, 4);
        outlined consume of ShaderVectorData.Element(v22, v24, 4);
        uint64_t v31 = a2;
        uint64_t v32 = a3;
        char v33 = 4;
        goto LABEL_25;
      }
      outlined copy of ShaderVectorData.Element(v4.i64[0], v4.i64[1], 4);
      outlined copy of ShaderVectorData.Element(a2, a3, 4);
      outlined copy of ShaderVectorData.Element(v22, v24, 4);
      if (!v23) {
        goto LABEL_44;
      }
      uint64_t v25 = (char *)v22;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_14;
      }
      break;
    case 5:
      a1->i64[0] = a2;
      a1->i64[1] = a3;
      a1[1].i8[0] = a4;
      int64x2_t v49 = v4;
      outlined copy of ShaderVectorData.Element(a2, a3, a4);
      outlined copy of ShaderVectorData.Element(a2, a3, a4);
      ShaderVectorData.Element.scale(by:)(-1.0);
      uint64_t v10 = v49.i64[1];
      uint64_t v9 = v49.i64[0];
      char v11 = 5;
      goto LABEL_24;
    default:
      if (a4)
      {
        int64x2_t v47 = *a1;
        outlined copy of ShaderVectorData.Element(a2, a3, a4);
        uint64_t v10 = v47.i64[1];
        uint64_t v9 = v47.i64[0];
        char v11 = 0;
LABEL_24:
        outlined consume of ShaderVectorData.Element(v9, v10, v11);
        uint64_t v31 = a2;
        uint64_t v32 = a3;
        char v33 = a4;
LABEL_25:
        return outlined consume of ShaderVectorData.Element(v31, v32, v33);
      }
      else
      {
        float v34 = COERCE_FLOAT(*a1);
        outlined consume of ShaderVectorData.Element(v4.i64[0], v4.i64[1], 0);
        uint64_t result = outlined consume of ShaderVectorData.Element(a2, a3, 0);
        a1->i64[0] = COERCE_UNSIGNED_INT(v34 - *(float *)&a2);
        a1->i64[1] = 0;
        a1[1].i8[0] = 0;
      }
      return result;
  }
LABEL_48:
  uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v22);
LABEL_14:
  unint64_t v26 = a2 + 32;
  unint64_t v27 = *((void *)v25 + 2);
  unint64_t v28 = v23 - 1;
  if (v27 >= v23 - 1) {
    unint64_t v29 = v23 - 1;
  }
  else {
    unint64_t v29 = *((void *)v25 + 2);
  }
  if (v29 >= 8)
  {
    if (v27 < v28) {
      unint64_t v28 = *((void *)v25 + 2);
    }
    uint64_t v35 = 4 * v28 + 36;
    if ((unint64_t)(v25 + 32) >= a2 + v35 || v26 >= (unint64_t)&v25[v35])
    {
      unint64_t v37 = v29 + 1;
      uint64_t v38 = v37 & 7;
      if ((v37 & 7) == 0) {
        uint64_t v38 = 8;
      }
      unint64_t v30 = v37 - v38;
      unint64_t v39 = (float32x4_t *)(a2 + 48);
      uint64_t v40 = (float32x4_t *)(v25 + 48);
      unint64_t v41 = v30;
      do
      {
        float32x4_t v42 = vsubq_f32(*v40, *v39);
        v40[-1] = vsubq_f32(v40[-1], v39[-1]);
        *uint64_t v40 = v42;
        v39 += 2;
        v40 += 2;
        v41 -= 8;
      }
      while (v41);
    }
    else
    {
      unint64_t v30 = 0;
    }
  }
  else
  {
    unint64_t v30 = 0;
  }
  do
  {
    if (v30 >= v27)
    {
      __break(1u);
      goto LABEL_48;
    }
    uint64_t v43 = 4 * v30;
    float v44 = *(float *)(v26 + 4 * v30++);
    *(float *)&v25[v43 + 32] = *(float *)&v25[v43 + 32] - v44;
  }
  while (v23 != v30);
LABEL_44:
  outlined consume of ShaderVectorData.Element(v22, v24, 4);
  outlined consume of ShaderVectorData.Element(a2, a3, 4);

  return swift_bridgeObjectRelease();
}

void specialized static ShaderVectorData.-= infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int64x2_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  if (v5 == *(void *)(*a2 + 16))
  {
    if (v5)
    {
      unint64_t v6 = 0;
      unint64_t v7 = 0;
      while (1)
      {
        uint64_t v8 = *(void *)(v3 + v6 + 32);
        uint64_t v9 = *(void *)(v3 + v6 + 40);
        char v10 = *(unsigned char *)(v3 + v6 + 48);
        outlined copy of ShaderVectorData.Element(v8, v9, v10);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64x2_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
        }
        if (v7 >= v4[2]) {
          break;
        }
        ++v7;
        specialized static ShaderVectorData.Element.-= infix(_:_:)((int64x2_t *)&v4[v6 / 8 + 4], v8, v9, v10);
        outlined consume of ShaderVectorData.Element(v8, v9, v10);
        v6 += 24;
        if (v5 == v7)
        {
          *(void *)a1 = v4;
          return;
        }
      }
      __break(1u);
    }
  }
  else if (!v5)
  {
    swift_bridgeObjectRelease();
    *(void *)a1 = v3;
    swift_bridgeObjectRetain();
    ShaderVectorData.scale(by:)(-1.0);
  }
}

uint64_t specialized static Shader.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 24);
  int v6 = *(_DWORD *)(a2 + 32);
  if (*(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16)) {
    return specialized static Array<A>.== infix(_:_:)(v3, v5) & (v4 == v6);
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if (v8) {
    return specialized static Array<A>.== infix(_:_:)(v3, v5) & (v4 == v6);
  }
  return result;
}

uint64_t specialized static Shader.Argument.Storage.== infix(_:_:)(void *a1, unint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6)
{
  switch(a3)
  {
    case 1:
      if (a6 != 1) {
        goto LABEL_61;
      }
      return *(float *)&a1 == *(float *)&a4 && *((float *)&a1 + 1) == *((float *)&a4 + 1);
    case 2:
      if (a6 != 2) {
        goto LABEL_61;
      }
      return *(float *)&a1 == *(float *)&a4
          && *((float *)&a1 + 1) == *((float *)&a4 + 1)
          && *(float *)&a2 == *(float *)&a5;
    case 3:
      if (a6 != 3) {
        goto LABEL_61;
      }
      return *(float *)&a1 == *(float *)&a4
          && *((float *)&a1 + 1) == *((float *)&a4 + 1)
          && *(float *)&a2 == *(float *)&a5
          && *((float *)&a2 + 1) == *((float *)&a5 + 1);
    case 4:
      if (a6 != 4) {
        goto LABEL_61;
      }
      return specialized static Array<A>.== infix(_:_:)((uint64_t)a1, a4);
    case 5:
      if (a6 != 5) {
        goto LABEL_61;
      }
      if (a1 == (void *)a4) {
        goto LABEL_45;
      }
      char v14 = *(uint64_t (**)(uint64_t))(*a1 + 88);
      outlined copy of Shader.Argument.Storage((uint64_t)a1, a2, 5);
      outlined copy of Shader.Argument.Storage(a4, a5, 5);
      char v15 = v14(a4);
      outlined consume of Shader.Argument.Storage(a4, a5, 5);
      uint64_t v16 = (uint64_t)a1;
      unint64_t v17 = a2;
      char v18 = 5;
      goto LABEL_39;
    case 6:
      if (a6 != 6) {
        goto LABEL_61;
      }
      uint64_t result = specialized static Array<A>.== infix(_:_:)((uint64_t)a1, a4);
      break;
    case 7:
      if (a6 != 7) {
        goto LABEL_61;
      }
      if (a1 == (void *)a4)
      {
LABEL_45:
        uint64_t result = 1;
      }
      else
      {
        int64x2_t v19 = *(uint64_t (**)(uint64_t))(*a1 + 96);
        outlined copy of Shader.Argument.Storage((uint64_t)a1, a2, 7);
        outlined copy of Shader.Argument.Storage(a4, a5, 7);
        char v15 = v19(a4);
        outlined consume of Shader.Argument.Storage(a4, a5, 7);
        uint64_t v16 = (uint64_t)a1;
        unint64_t v17 = a2;
        char v18 = 7;
LABEL_39:
        outlined consume of Shader.Argument.Storage(v16, v17, v18);
        uint64_t result = v15 & 1;
      }
      break;
    case 8:
      if (a6 == 8)
      {
        uint64_t v20 = 0;
        switch(a2 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(a1), a1))
            {
              __break(1u);
LABEL_64:
              __break(1u);
LABEL_65:
              __break(1u);
LABEL_66:
              __break(1u);
              JUMPOUT(0x245D4CA6CLL);
            }
            uint64_t v20 = HIDWORD(a1) - (int)a1;
LABEL_49:
            outlined copy of Data._Representation((uint64_t)a1, a2);
LABEL_50:
            switch(a5 >> 62)
            {
              case 1uLL:
                LODWORD(v23) = HIDWORD(a4) - a4;
                if (__OFSUB__(HIDWORD(a4), a4)) {
                  goto LABEL_65;
                }
                uint64_t v23 = (int)v23;
LABEL_55:
                if (v20 != v23)
                {
LABEL_60:
                  outlined consume of Shader.Argument.Storage((uint64_t)a1, a2, 8);
                  goto LABEL_61;
                }
                if (v20 < 1)
                {
LABEL_62:
                  outlined consume of Shader.Argument.Storage((uint64_t)a1, a2, 8);
                  return 1;
                }
                outlined copy of Data._Representation(a4, a5);
                char v27 = specialized Data._Representation.withUnsafeBytes<A>(_:)((uint64_t)a1, a2, a4, a5);
                outlined consume of Shader.Argument.Storage((uint64_t)a1, a2, 8);
                if (v27) {
                  goto LABEL_45;
                }
                break;
              case 2uLL:
                uint64_t v25 = *(void *)(a4 + 16);
                uint64_t v24 = *(void *)(a4 + 24);
                BOOL v26 = __OFSUB__(v24, v25);
                uint64_t v23 = v24 - v25;
                if (!v26) {
                  goto LABEL_55;
                }
                goto LABEL_66;
              case 3uLL:
                if (v20) {
                  goto LABEL_60;
                }
                goto LABEL_62;
              default:
                uint64_t v23 = BYTE6(a5);
                goto LABEL_55;
            }
            break;
          case 2uLL:
            uint64_t v22 = a1[2];
            uint64_t v21 = a1[3];
            uint64_t v20 = v21 - v22;
            if (!__OFSUB__(v21, v22)) {
              goto LABEL_49;
            }
            goto LABEL_64;
          case 3uLL:
            goto LABEL_50;
          default:
            uint64_t v20 = BYTE6(a2);
            goto LABEL_50;
        }
      }
      goto LABEL_61;
    case 9:
      if (a6 == 9 && !(a5 | a4)) {
        goto LABEL_45;
      }
      goto LABEL_61;
    default:
      if (a6) {
LABEL_61:
      }
        uint64_t result = 0;
      else {
        uint64_t result = *(float *)&a1 == *(float *)&a4;
      }
      break;
  }
  return result;
}

void partial apply for closure #1 in Shader.compile(as:)(uint64_t a1)
{
  closure #1 in Shader.compile(as:)(a1, *(long long **)(v1 + 16), *(unsigned int *)(v1 + 24), *(void **)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type _ShaderFilterEffect.ResolvedEffect and conformance _ShaderFilterEffect.ResolvedEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShaderFilterEffect.ResolvedEffect and conformance _ShaderFilterEffect.ResolvedEffect;
  if (!lazy protocol witness table cache variable for type _ShaderFilterEffect.ResolvedEffect and conformance _ShaderFilterEffect.ResolvedEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShaderFilterEffect.ResolvedEffect and conformance _ShaderFilterEffect.ResolvedEffect);
  }
  return result;
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi2_(uint64_t result)
{
  *(void *)(result + 96) = *(void *)(result + 96) & 0xFF0301FFLL | 0x3000000000000000;
  return result;
}

uint64_t sub_245D4CB34()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type Shader.Options and conformance Shader.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options;
  if (!lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options;
  if (!lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options;
  if (!lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options;
  if (!lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Shader.UsageType and conformance Shader.UsageType()
{
  unint64_t result = lazy protocol witness table cache variable for type Shader.UsageType and conformance Shader.UsageType;
  if (!lazy protocol witness table cache variable for type Shader.UsageType and conformance Shader.UsageType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shader.UsageType and conformance Shader.UsageType);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Shader.ResolvedShader(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader();
  unint64_t result = lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader();
  *(void *)(a1 + 16) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ShaderVectorData(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_245D4CEE0@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 32) & 1;
  return result;
}

unsigned __int8 *sub_245D4CEF0(unsigned __int8 *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a2 + 32) & 0xFFFFFFFE | *result;
  return result;
}

uint64_t sub_245D4CF08@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(unsigned char *)(result + 32) & 8) != 0;
  return result;
}

unsigned char *sub_245D4CF18(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 8;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a2 + 32) & 0xFFFFFFF7 | v2;
  return result;
}

void sub_245D4CF3C(id *a1@<X0>, void *a2@<X8>)
{
  id v3 = *a1;
  id v4 = *a1;
  ShaderVectorData.init(rbShader:)(v3, &v5);
  *a2 = v5;
}

ValueMetadata *type metadata accessor for ShaderLibrary()
{
  return &type metadata for ShaderLibrary;
}

uint64_t destroy for ShaderFunction(id *a1)
{
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for ShaderFunction(void *a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ShaderFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ShaderFunction(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v5 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ShaderFunction()
{
  return &type metadata for ShaderFunction;
}

uint64_t initializeWithCopy for Shader(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  id v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Shader(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy36_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Shader(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Shader(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 36)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Shader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 36) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Shader()
{
  return &type metadata for Shader;
}

uint64_t initializeBufferWithCopyOfBuffer for Shader.Argument(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for Shader.Argument(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of Shader.Argument.Storage);
}

uint64_t *assignWithCopy for Shader.Argument(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for Shader.Argument(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of Shader.Argument.Storage, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Shader.Argument.Storage);
}

uint64_t *assignWithTake for Shader.Argument(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for Shader.Argument(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Shader.Argument.Storage);
}

ValueMetadata *type metadata accessor for Shader.Argument()
{
  return &type metadata for Shader.Argument;
}

ValueMetadata *type metadata accessor for Shader.Options()
{
  return &type metadata for Shader.Options;
}

uint64_t initializeWithCopy for Shader.ResolvedShader(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for Shader.ResolvedShader(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for Shader.ResolvedShader(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Shader.ResolvedShader(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 28)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Shader.ResolvedShader(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 28) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Shader.ResolvedShader()
{
  return &type metadata for Shader.ResolvedShader;
}

ValueMetadata *type metadata accessor for Shader.UsageType()
{
  return &type metadata for Shader.UsageType;
}

uint64_t destroy for Shader(id *a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ShaderFilterEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  id v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ShaderFilterEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for _ShaderFilterEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShaderFilterEffect(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShaderFilterEffect(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShaderFilterEffect()
{
  return &type metadata for _ShaderFilterEffect;
}

ValueMetadata *type metadata accessor for ShaderVectorData()
{
  return &type metadata for ShaderVectorData;
}

uint64_t sub_245D4D76C()
{
  return swift_getWitnessTable();
}

uint64_t initializeBufferWithCopyOfBuffer for ShaderVectorData.Element(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for Shader.Argument(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of ShaderVectorData.Element);
}

uint64_t destroy for ShaderVectorData.Element(uint64_t a1)
{
  return outlined consume of ShaderVectorData.Element(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t *assignWithCopy for ShaderVectorData.Element(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for Shader.Argument(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of ShaderVectorData.Element, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of ShaderVectorData.Element);
}

uint64_t *assignWithTake for ShaderVectorData.Element(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for Shader.Argument(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of ShaderVectorData.Element);
}

uint64_t getEnumTagSinglePayload for ShaderVectorData.Element(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ShaderVectorData.Element(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 251;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ShaderVectorData.Element(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 4u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t destructiveInjectEnumTag for ShaderVectorData.Element(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(void *)__n128 result = a2 - 5;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 5;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ShaderVectorData.Element()
{
  return &type metadata for ShaderVectorData.Element;
}

uint64_t destroy for Shader.Argument.Storage(uint64_t a1)
{
  return outlined consume of Shader.Argument.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for Shader.Argument(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for Shader.Argument(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for Shader.Argument(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Shader.Argument(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF7 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 247);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 9) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Shader.Argument(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF6)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 247;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF7) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF7) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for Shader.Argument.Storage(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 8u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 9);
  }
}

uint64_t destructiveInjectEnumTag for Shader.Argument.Storage(uint64_t result, unsigned int a2)
{
  if (a2 >= 9)
  {
    *(void *)__n128 result = a2 - 9;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 9;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Shader.Argument.Storage()
{
  return &type metadata for Shader.Argument.Storage;
}

void *type metadata accessor for _ShaderFilterEffect.ResolvedEffect()
{
  return &unk_26FA60728;
}

unint64_t instantiation function for generic protocol witness table for _ShaderFilterEffect.ResolvedEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ShaderFilterEffect.ResolvedEffect and conformance _ShaderFilterEffect.ResolvedEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ShaderVectorData.Element(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ShaderVectorData.Element and conformance ShaderVectorData.Element();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ShaderVectorData.Element and conformance ShaderVectorData.Element()
{
  unint64_t result = lazy protocol witness table cache variable for type ShaderVectorData.Element and conformance ShaderVectorData.Element;
  if (!lazy protocol witness table cache variable for type ShaderVectorData.Element and conformance ShaderVectorData.Element)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderVectorData.Element and conformance ShaderVectorData.Element);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShaderVectorData.Element and conformance ShaderVectorData.Element;
  if (!lazy protocol witness table cache variable for type ShaderVectorData.Element and conformance ShaderVectorData.Element)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderVectorData.Element and conformance ShaderVectorData.Element);
  }
  return result;
}

void type metadata accessor for CheckedContinuation<(), Error>()
{
  if (!lazy cache variable for type metadata for CheckedContinuation<(), Error>)
  {
    type metadata accessor for Error();
    unint64_t v0 = type metadata accessor for CheckedContinuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<(), Error>);
    }
  }
}

uint64_t sub_245D4DC68()
{
  type metadata accessor for CheckedContinuation<(), Error>();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in Shader.compile(as:)(void *a1)
{
  type metadata accessor for CheckedContinuation<(), Error>();

  return closure #1 in closure #1 in Shader.compile(as:)(a1);
}

double GraphicsImage.size.getter()
{
  double v1 = *(double *)(v0 + 16);
  double result = 0.0;
  if (v1 != 0.0)
  {
    double v3 = *(double *)(v0 + 24);
    switch(*(unsigned char *)(v0 + 40))
    {
      case 4:
      case 5:
      case 6:
      case 7:
        double v3 = *(double *)(v0 + 32);
        break;
      default:
        return 1.0 / v1 * v3;
    }
    return 1.0 / v1 * v3;
  }
  return result;
}

void GraphicsImage.styleResolverMode.getter(uint64_t a1@<X8>)
{
  int v3 = v1[8];
  if (v3 == 2)
  {
    uint64_t v4 = *(void *)v1;
    char v5 = *(void **)(*(void *)v1 + 16);
    uint64_t v6 = *(void **)(*(void *)v1 + 32);
    uint64_t v7 = *(void **)(v4 + 48);
    id v8 = v5;
    outlined copy of Image.Location(v6);
    id v9 = v7;
    id v10 = v8;
    outlined copy of Image.Location(v6);
    id v11 = v9;
    __int16 v12 = (unsigned __int16)objc_msgSend(v10, sel_styleMask);
    char v14 = v6;
    outlined copy of Image.Location(v6);
    _ShapeStyle_ResolverMode.init(rbSymbolStyleMask:location:)(v12, &v14, a1);

    outlined consume of Image.Location(v6);
    outlined consume of Image.Location(v6);
  }
  else
  {
    if (v3 == 255)
    {
      *(void *)a1 = 0;
      *(_WORD *)(a1 + 8) = 0;
    }
    else
    {
      __int16 v13 = (v1[60] & 1) == 0;
      *(void *)a1 = 0;
      *(_WORD *)(a1 + 8) = v13;
    }
    *(unsigned char *)(a1 + 10) = 0;
  }
}

BOOL GraphicsImage.isTemplate.getter()
{
  return (*(unsigned char *)(v0 + 60) & 1) == 0;
}

BOOL ResolvedVectorGlyph.isClear(styles:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((objc_msgSend(*v1, sel_styleMask) & 0x1200) != 0)
  {
    return 0;
  }
  else
  {
    uint64_t v6 = v2;
    char v5 = 0;
    return _ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v5);
  }
}

id GraphicsImage.contents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)v1;
  *(void *)a1 = *(void *)v1;
  char v3 = *(unsigned char *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  return outlined copy of GraphicsImage.Contents?(v2, v3);
}

void GraphicsImage.contents.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  outlined consume of GraphicsImage.Contents?(*(void **)v1, *(unsigned char *)(v1 + 8));
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = v3;
}

uint64_t (*GraphicsImage.contents.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double GraphicsImage.scale.getter()
{
  return *(double *)(v0 + 16);
}

void GraphicsImage.scale.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*GraphicsImage.scale.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double GraphicsImage.unrotatedPixelSize.getter()
{
  return *(double *)(v0 + 24);
}

void GraphicsImage.unrotatedPixelSize.setter(double a1, double a2)
{
  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*GraphicsImage.unrotatedPixelSize.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t GraphicsImage.orientation.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t GraphicsImage.orientation.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 40) = result;
  return result;
}

uint64_t (*GraphicsImage.orientation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t GraphicsImage.maskColor.getter()
{
  return *(void *)(v0 + 44);
}

uint64_t GraphicsImage.maskColor.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 44) = result;
  *(void *)(v3 + 52) = a2;
  *(unsigned char *)(v3 + 60) = a3 & 1;
  return result;
}

uint64_t (*GraphicsImage.maskColor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 GraphicsImage.resizingInfo.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 96);
  __n128 result = *(__n128 *)(v1 + 64);
  long long v4 = *(_OWORD *)(v1 + 80);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

__n128 GraphicsImage.resizingInfo.setter(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 32);
  __n128 result = *(__n128 *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 80) = v4;
  *(unsigned char *)(v1 + 96) = v2;
  return result;
}

uint64_t (*GraphicsImage.resizingInfo.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t GraphicsImage.isAntialiased.getter()
{
  return *(unsigned __int8 *)(v0 + 97);
}

uint64_t GraphicsImage.isAntialiased.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 97) = result;
  return result;
}

uint64_t (*GraphicsImage.isAntialiased.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void GraphicsImage.interpolation.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 98);
}

unsigned char *GraphicsImage.interpolation.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 98) = *result;
  return result;
}

uint64_t (*GraphicsImage.interpolation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void GraphicsImage.allowedDynamicRange.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 99);
}

unsigned char *GraphicsImage.allowedDynamicRange.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 99) = *result;
  return result;
}

uint64_t (*GraphicsImage.allowedDynamicRange.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double GraphicsImage.pixelSize.getter()
{
  double result = *(double *)(v0 + 24);
  switch(*(unsigned char *)(v0 + 40))
  {
    case 4:
    case 5:
    case 6:
    case 7:
      double result = *(double *)(v0 + 32);
      break;
    default:
      return result;
  }
  return result;
}

void *ResolvedVectorGlyph.styleResolverMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void **)v1;
  long long v4 = *(void **)(v1 + 16);
  __int16 v5 = (unsigned __int16)objc_msgSend(v3, sel_styleMask);
  uint64_t v7 = v4;
  outlined copy of Image.Location(v4);
  return _ShapeStyle_ResolverMode.init(rbSymbolStyleMask:location:)(v5, &v7, a1);
}

void GraphicsImage.headroom.getter(double *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 8)) {
    goto LABEL_11;
  }
  uint64_t v3 = *(void **)v1;
  outlined copy of GraphicsImage.Contents(v3, 0);
  long long v4 = CGImageGetColorSpace((CGImageRef)v3);
  if (!v4)
  {
LABEL_10:
    outlined consume of GraphicsImage.Contents?(v3, 0);
LABEL_11:
    if (one-time initialization token for standard != -1) {
      swift_once();
    }
    double v7 = *(double *)&static Image.Headroom.standard;
    goto LABEL_14;
  }
  __int16 v5 = v4;
  if (!CGColorSpaceUsesITUR_2100TF(v4))
  {

    goto LABEL_10;
  }
  if (CGImageGetHeadroom())
  {
    outlined consume of GraphicsImage.Contents?(v3, 0);

    double v7 = 0.0;
LABEL_14:
    *a1 = v7;
    return;
  }
  if (CGColorSpaceIsHLGBased(v5))
  {
    if (one-time initialization token for highHLG != -1) {
      swift_once();
    }
    uint64_t v6 = &static Image.Headroom.highHLG;
  }
  else
  {
    if (one-time initialization token for high != -1) {
      swift_once();
    }
    uint64_t v6 = &static Image.Headroom.high;
  }
  uint64_t v8 = *v6;
  outlined consume of GraphicsImage.Contents?(v3, 0);

  *(void *)a1 = v8;
}

void GraphicsImage.encode(to:)(double *a1)
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for NamedImage.Key(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = *(double *)v1;
  int v10 = *((unsigned __int8 *)v1 + 8);
  double v12 = *((double *)v1 + 2);
  double v11 = *((double *)v1 + 3);
  double v13 = *((double *)v1 + 4);
  uint64_t v14 = *((unsigned __int8 *)v1 + 40);
  uint64_t v15 = *(uint64_t *)((char *)v1 + 44);
  uint64_t v16 = *(uint64_t *)((char *)v1 + 52);
  int v17 = *((unsigned __int8 *)v1 + 60);
  uint64_t v18 = v1[8];
  uint64_t v19 = v1[9];
  uint64_t v20 = v1[10];
  uint64_t v21 = v1[11];
  int v22 = *((unsigned __int8 *)v1 + 96);
  int v23 = *((unsigned __int8 *)v1 + 97);
  Swift::UInt v24 = *((unsigned __int8 *)v1 + 98);
  Swift::UInt v25 = *((unsigned __int8 *)v1 + 99);
  uint64_t v59 = v18;
  uint64_t v58 = v19;
  uint64_t v57 = v20;
  uint64_t v56 = v21;
  int v62 = v22;
  uint64_t v61 = v16;
  uint64_t v60 = v15;
  int v63 = v17;
  uint64_t v64 = v14;
  switch(v10)
  {
    case 3:
      LODWORD(v55) = v23;
      Swift::UInt v29 = v24;
      Swift::UInt v30 = v25;
      uint64_t v31 = *(void *)(*(void *)&v9 + 16);
      uint64_t v32 = *(void **)(*(void *)&v9 + 24);
      swift_retain();
      outlined copy of Image.Location?(v32);
      swift_bridgeObjectRetain();
      ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(v31);
      swift_release();
      char v33 = v32;
      Swift::UInt v25 = v30;
      Swift::UInt v24 = v29;
      int v23 = v55;
      outlined consume of Image.Location?(v33);
      swift_bridgeObjectRelease();
      if (!v4) {
        goto LABEL_22;
      }
      break;
    case 5:
      Swift::UInt v55 = v24;
      uint64_t v34 = swift_projectBox();
      outlined init with copy of NamedImage.Key(v34, (uint64_t)v8);
      ProtobufEncoder.encodeVarint(_:)(0x22uLL);
      uint64_t v35 = *((void *)a1 + 1);
      uint64_t v36 = (void *)*((void *)a1 + 3);
      int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      Swift::UInt v24 = v25;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_9;
      }
      goto LABEL_59;
    case 4:
      LODWORD(v3) = *(_DWORD *)(*(void *)&v9 + 16);
      float v26 = *(float *)(*(void *)&v9 + 20);
      float v27 = *(float *)(*(void *)&v9 + 24);
      float v28 = *(float *)(*(void *)&v9 + 28);
      ProtobufEncoder.encodeVarint(_:)(0xAuLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(*(float *)&v3, v26, v27, v28);
      if (!v4) {
        goto LABEL_22;
      }
      return;
    default:
      double v65 = v9;
      char v66 = v10;
      double v67 = v12;
      double v68 = v11;
      double v69 = v13;
      char v70 = v14;
      uint64_t v71 = v15;
      uint64_t v72 = v16;
      char v73 = v17;
      uint64_t v74 = v18;
      uint64_t v75 = v19;
      uint64_t v76 = v20;
      uint64_t v77 = v21;
      char v78 = v22;
      double v39 = 0.0;
      char v79 = v23;
      char v80 = v24;
      double v40 = 0.0;
      char v81 = v25;
      if (v12 != 0.0)
      {
        double v41 = v13;
        double v42 = v11;
        switch(v14)
        {
          case 4:
          case 5:
          case 6:
          case 7:
            double v41 = v11;
            double v42 = v13;
            break;
          default:
            break;
        }
        double v39 = 1.0 / v12 * v42;
        double v40 = 1.0 / v12 * v41;
      }
      v43.CGImageRef value = GraphicsImage.render(at:prefersMask:)((CGSize)__PAIR128__(*(unint64_t *)&v40, *(unint64_t *)&v39), 0).value;
      if (v43.value)
      {
        CGImageRef value = v43.value;
        double v65 = v9;
        char v66 = v10;
        double v67 = v12;
        double v68 = v11;
        double v69 = v13;
        char v70 = v64;
        uint64_t v71 = v60;
        uint64_t v72 = v61;
        char v73 = v63;
        uint64_t v74 = v59;
        uint64_t v75 = v58;
        uint64_t v76 = v57;
        uint64_t v77 = v56;
        char v78 = v62;
        char v79 = v23;
        char v80 = v24;
        char v81 = v25;
        uint64_t v64 = GraphicsImage.bitmapOrientation.getter();
        float32x2_t v45 = value;
        ProtobufEncoder.encodeVarint(_:)(0x12uLL);
        specialized ProtobufEncoder.encodeMessage<A>(_:)((uint64_t)v45);

        if (v4) {
          return;
        }
      }
LABEL_22:
      if (v12 == 1.0) {
        goto LABEL_33;
      }
      double v3 = fabs(v12);
      if (v3 >= 65536.0) {
        Swift::UInt v46 = 41;
      }
      else {
        Swift::UInt v46 = 45;
      }
      ProtobufEncoder.encodeVarint(_:)(v46);
      if (v3 < 65536.0)
      {
        uint64_t v47 = *((void *)a1 + 1);
        int64_t isUniquelyReferenced_nonNull_native = v47 + 4;
        if (!__OFADD__(v47, 4))
        {
          *(float *)&double v3 = v12;
          if (*((void *)a1 + 2) >= isUniquelyReferenced_nonNull_native)
          {
            *((void *)a1 + 1) = isUniquelyReferenced_nonNull_native;
            *(_DWORD *)(*(void *)a1 + v47) = LODWORD(v3);
            goto LABEL_33;
          }
          goto LABEL_62;
        }
        goto LABEL_61;
      }
      uint64_t v48 = *((void *)a1 + 1);
      int64_t v49 = v48 + 8;
      if (__OFADD__(v48, 8))
      {
        __break(1u);
      }
      else if (*((void *)a1 + 2) >= v49)
      {
        *((void *)a1 + 1) = v49;
        *(double *)(*(void *)a1 + v48) = v12;
        goto LABEL_33;
      }
      *(double *)ProtobufEncoder.growBufferSlow(to:)(v49) = v12;
      while (1)
      {
LABEL_33:
        ProtobufEncoder.encodeVarint(_:)(0x32uLL);
        uint64_t v35 = *((void *)a1 + 1);
        uint64_t v36 = (void *)*((void *)a1 + 3);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
        }
        unint64_t v51 = v36[2];
        unint64_t v50 = v36[3];
        uint64_t v8 = (char *)(v51 + 1);
        if (v51 >= v50 >> 1) {
          uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v36);
        }
        v36[2] = v8;
        v36[v51 + 4] = v35;
        *((void *)a1 + 3) = v36;
        if (!__OFADD__(v35, 1)) {
          break;
        }
        __break(1u);
LABEL_59:
        int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
        uint64_t v36 = (void *)isUniquelyReferenced_nonNull_native;
LABEL_9:
        Swift::UInt v25 = v36[2];
        unint64_t v38 = v36[3];
        if (v25 >= v38 >> 1)
        {
          int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v25 + 1, 1, v36);
          uint64_t v36 = (void *)isUniquelyReferenced_nonNull_native;
        }
        v36[2] = v25 + 1;
        v36[v25 + 4] = v35;
        *((void *)a1 + 3) = v36;
        if (!__OFADD__(v35, 1))
        {
          *((void *)a1 + 1) = v35 + 1;
          NamedImage.Key.encode(to:)(a1);
          if (v4)
          {
            outlined destroy of NamedImage.Key((uint64_t)v8, type metadata accessor for NamedImage.Key);
            return;
          }
          ProtobufEncoder.endLengthDelimited()();
          outlined destroy of NamedImage.Key((uint64_t)v8, type metadata accessor for NamedImage.Key);
          Swift::UInt v25 = v24;
          Swift::UInt v24 = v55;
          goto LABEL_22;
        }
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native) = LODWORD(v3);
      }
      *((void *)a1 + 1) = v35 + 1;
      CGSize.encode(to:)(a1, v11, v13);
      ProtobufEncoder.endLengthDelimited()();
      Swift::UInt v52 = 2;
      switch((char)v64)
      {
        case 1:
          goto LABEL_45;
        case 2:
          Swift::UInt v52 = 6;
          goto LABEL_45;
        case 3:
          Swift::UInt v52 = 4;
          goto LABEL_45;
        case 4:
          Swift::UInt v52 = 1;
          goto LABEL_45;
        case 5:
          Swift::UInt v52 = 3;
          goto LABEL_45;
        case 6:
          Swift::UInt v52 = 7;
          goto LABEL_45;
        case 7:
          Swift::UInt v52 = 5;
LABEL_45:
          ProtobufEncoder.encodeVarint(_:)(0x38uLL);
          ProtobufEncoder.encodeVarint(_:)(v52);
          break;
        default:
          break;
      }
      if ((v63 & 1) != 0
        || (uint64_t v53 = v60,
            uint64_t v54 = v61,
            ProtobufEncoder.encodeVarint(_:)(0x42uLL),
            specialized ProtobufEncoder.encodeMessage<A>(_:)(*(float *)&v53, *((float *)&v53 + 1), *(float *)&v54, *((float *)&v54 + 1)), !v4))
      {
        if (v62 == 2
          || (v82[0] = v59,
              v82[1] = v58,
              v82[2] = v57,
              v82[3] = v56,
              char v83 = v62 & 1,
              ProtobufEncoder.encodeVarint(_:)(0x4AuLL),
              specialized ProtobufEncoder.encodeMessage<A>(_:)((uint64_t)v82),
              !v4))
        {
          if (v23)
          {
            if (v24 == 1) {
              goto LABEL_52;
            }
          }
          else
          {
            ProtobufEncoder.encodeVarint(_:)(0x50uLL);
            ProtobufEncoder.encodeVarint(_:)(0);
            if (v24 == 1)
            {
LABEL_52:
              if (v25 == 3) {
                return;
              }
              goto LABEL_53;
            }
          }
          ProtobufEncoder.encodeVarint(_:)(0x58uLL);
          ProtobufEncoder.encodeVarint(_:)(v24);
          if (v25 == 3) {
            return;
          }
LABEL_53:
          ProtobufEncoder.encodeVarint(_:)(0x60uLL);
          ProtobufEncoder.encodeVarint(_:)(v25);
        }
      }
      break;
  }
}

void GraphicsImage.init(from:)(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CodingUserInfoKey();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  double v9 = (char *)&v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for NamedImage.Key(0);
  MEMORY[0x270FA5388](v10 - 8);
  double v12 = (char *)&v149 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = 1;
  char v175 = 1;
  BOOL v176 = 1;
  unint64_t v14 = (unint64_t)a1[1];
  unint64_t v15 = (unint64_t)a1[2];
  if (v14 >= v15)
  {
    char v141 = 0;
    uint64_t v16 = 0;
    int8x16_t v142 = 0uLL;
    LOBYTE(v19) = -1;
    char v143 = 3;
    double v20 = 1.0;
    uint64_t v21 = 0;
    char v144 = 2;
    char v145 = 1;
    char v146 = 1;
    double v22 = 0.0;
    long long v147 = 0uLL;
    long long v148 = 0uLL;
    goto LABEL_177;
  }
  uint64_t v163 = v12;
  char v156 = v9;
  uint64_t v157 = v6;
  uint64_t v152 = a2;
  LODWORD(v165) = 0;
  uint64_t v16 = 0;
  int v17 = (void **)(a1 + 5);
  int v155 = (void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  long long v154 = (void (**)(uint64_t, uint64_t))(v7 + 8);
  uint64_t v18 = 8;
  LODWORD(v19) = 255;
  int v162 = 3;
  double v20 = 1.0;
  uint64_t v21 = 0;
  int v174 = 1;
  int v161 = 2;
  uint64_t v153 = MEMORY[0x263F8EE58] + 8;
  double v22 = 0.0;
  double v23 = 0.0;
  double v24 = 0.0;
  uint64_t v25 = 0;
  int8x16_t v160 = 0u;
  long long v159 = 0u;
  long long v158 = 0u;
  while (2)
  {
    unint64_t v26 = (unint64_t)a1[3];
    if (v26)
    {
      id v27 = a1[4];
      if (v14 < (unint64_t)v27) {
        goto LABEL_11;
      }
      if ((unint64_t)v27 < v14) {
        goto LABEL_178;
      }
      a1[3] = 0;
    }
    unint64_t v28 = ProtobufDecoder.decodeVarint()();
    if (v3) {
      goto LABEL_185;
    }
    unint64_t v26 = v28;
    if (v28 <= 7)
    {
LABEL_178:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
LABEL_185:
      outlined consume of GraphicsImage.Contents?(v16, (char)v19);
      return;
    }
LABEL_11:
    switch(v26 >> 3)
    {
      case 1uLL:
        Swift::UInt v29 = v17;
        uint64_t v30 = v18;
        uint64_t v31 = (float *)swift_allocObject();
        if ((v26 & 7) != 2) {
          goto LABEL_182;
        }
        CGRect v164 = v16;
        *(void *)&long long v151 = v29;
        uint64_t v32 = *v29;
        char v33 = (char)v19;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
        }
        unint64_t v35 = v32[2];
        unint64_t v34 = v32[3];
        if (v35 >= v34 >> 1) {
          uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v32);
        }
        v32[2] = v35 + 1;
        v32[v35 + 4] = v15;
        a1[5] = v32;
        uint64_t v36 = ProtobufDecoder.decodeVarint()();
        if (v3)
        {
          LOBYTE(v19) = v33;
          uint64_t v16 = v164;
LABEL_184:
          swift_deallocUninitializedObject();
          goto LABEL_185;
        }
        if (v36 < 0)
        {
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
LABEL_193:
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
LABEL_201:
          __break(1u);
LABEL_202:
          __break(1u);
LABEL_203:
          __break(1u);
LABEL_204:
          __break(1u);
LABEL_205:
          __break(1u);
LABEL_206:
          __break(1u);
LABEL_207:
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          JUMPOUT(0x245D4FF38);
        }
        LOBYTE(v19) = v33;
        unint64_t v37 = (unint64_t)a1[1] + v36;
        uint64_t v16 = v164;
        if (v15 < v37)
        {
LABEL_182:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_184;
        }
        *(double *)&long long v149 = v22;
        *(void *)&long long v150 = v21;
        double v38 = v20;
        uint64_t v39 = v25;
        a1[2] = (id)v37;
        float v40 = specialized Color.Resolved.init(from:)(a1);
        float v44 = (void **)v151;
        float32x2_t v45 = *(void **)v151;
        if (!*(void *)(*(void *)v151 + 16)) {
          goto LABEL_194;
        }
        float v46 = v40;
        int v47 = v41;
        int v48 = v42;
        int v49 = v43;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v50 = v45[2];
          if (!v50) {
            goto LABEL_201;
          }
        }
        else
        {
          float32x2_t v45 = specialized _ArrayBuffer._consumeAndCreateNew()(v45);
          uint64_t v50 = v45[2];
          if (!v50) {
            goto LABEL_201;
          }
        }
        uint64_t v51 = v50 - 1;
        Swift::UInt v52 = (void *)v45[v51 + 4];
        v45[2] = v51;
        a1[5] = v45;
        a1[2] = v52;
        v31[4] = v46;
        *((_DWORD *)v31 + 5) = v47;
        *((_DWORD *)v31 + 6) = v48;
        *((_DWORD *)v31 + 7) = v49;
        outlined consume of GraphicsImage.Contents?(v16, (char)v19);
        LODWORD(v19) = 4;
        uint64_t v16 = v31;
        uint64_t v18 = v30;
        int v17 = v44;
        uint64_t v25 = v39;
        double v20 = v38;
        uint64_t v21 = v150;
        double v22 = *(double *)&v149;
LABEL_170:
        if (v18 != 8)
        {
LABEL_3:
          LODWORD(v165) = v18;
          uint64_t v21 = v25;
          double v22 = v24;
          double v20 = v23;
        }
        unint64_t v14 = (unint64_t)a1[1];
        unint64_t v15 = (unint64_t)a1[2];
        if (v14 < v15) {
          continue;
        }
        char v145 = v175;
        char v13 = v176;
        a2 = v152;
        char v143 = v162;
        char v146 = v174;
        char v144 = v161;
        int8x16_t v142 = v160;
        long long v147 = v159;
        long long v148 = v158;
        char v141 = (char)v165;
LABEL_177:
        a1[3] = 0;
        *(void *)a2 = v16;
        *(unsigned char *)(a2 + 8) = (_BYTE)v19;
        *(double *)(a2 + 16) = v20;
        *(double *)(a2 + 24) = v22;
        *(void *)(a2 + 32) = v21;
        *(unsigned char *)(a2 + 40) = v141;
        *(int8x16_t *)(a2 + 44) = v142;
        *(unsigned char *)(a2 + 60) = v145;
        *(_OWORD *)(a2 + 64) = v147;
        *(_OWORD *)(a2 + 80) = v148;
        *(unsigned char *)(a2 + 96) = v144;
        *(unsigned char *)(a2 + 97) = v13;
        *(unsigned char *)(a2 + 98) = v146;
        *(unsigned char *)(a2 + 99) = v143;
        return;
      case 2uLL:
        if ((v26 & 7) != 2) {
          goto LABEL_178;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          goto LABEL_185;
        }
        Class v53 = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)((uint64_t)a1);
        uint64_t v3 = 0;
        if (!(*v17)[2]) {
          goto LABEL_190;
        }
        Class v54 = v53;
        uint64_t v55 = specialized Array._customRemoveLast()();
        if (!v55) {
          uint64_t v55 = specialized Array.remove(at:)((*v17)[2] - 1);
        }
        a1[2] = (id)v55;
        outlined consume of GraphicsImage.Contents?(v16, (char)v19);
        LODWORD(v19) = 0;
        uint64_t v16 = v54;
        goto LABEL_170;
      case 3uLL:
        uint64_t v56 = v18;
        uint64_t v57 = swift_allocObject();
        if ((v26 & 7) != 2) {
          goto LABEL_182;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          goto LABEL_184;
        }
        VectorImageLayer.init(from:)(a1, (double **)(v57 + 16));
        uint64_t v3 = 0;
        if (!(*v17)[2]) {
          goto LABEL_191;
        }
        uint64_t v58 = specialized Array._customRemoveLast()();
        if (!v58) {
          uint64_t v58 = specialized Array.remove(at:)((*v17)[2] - 1);
        }
        a1[2] = (id)v58;
        outlined consume of GraphicsImage.Contents?(v16, (char)v19);
        LODWORD(v19) = 3;
        uint64_t v16 = (void *)v57;
        uint64_t v18 = v56;
        goto LABEL_170;
      case 4uLL:
        if ((v26 & 7) != 2) {
          goto LABEL_178;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          goto LABEL_185;
        }
        NamedImage.Key.init(from:)(a1, (uint64_t)v163);
        uint64_t v3 = 0;
        uint64_t v59 = *v17;
        if (!(*v17)[2]) {
          goto LABEL_192;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v60 = v59[2];
          if (!v60) {
            goto LABEL_193;
          }
        }
        else
        {
          uint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew()(v59);
          uint64_t v60 = v59[2];
          if (!v60) {
            goto LABEL_193;
          }
        }
        char v61 = (char)v19;
        uint64_t v62 = v60 - 1;
        int v63 = (void *)v59[v62 + 4];
        v59[2] = v62;
        a1[5] = v59;
        a1[2] = v63;
        uint64_t v64 = a1[6];
        uint64_t v65 = one-time initialization token for namedImagesKey;
        id v165 = *a1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        BOOL v66 = v65 == -1;
        uint64_t v67 = v157;
        uint64_t v68 = (uint64_t)v156;
        if (!v66) {
          swift_once();
        }
        uint64_t v69 = __swift_project_value_buffer(v67, (uint64_t)static ArchiveReader.namedImagesKey);
        (*v155)(v68, v69, v67);
        if (v64[2] && (unint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)(v68), (v71 & 1) != 0))
        {
          outlined init with copy of Any(v64[7] + 32 * v70, (uint64_t)&v168);
        }
        else
        {
          long long v168 = 0u;
          long long v169 = 0u;
        }
        (*v154)(v68, v67);
        if (*((void *)&v169 + 1))
        {
          if (swift_dynamicCast())
          {
            uint64_t v19 = v16;
            uint64_t v133 = v166;
            uint64_t v132 = v167;
            goto LABEL_139;
          }
        }
        else
        {
          outlined destroy of NamedImage.Key((uint64_t)&v168, (uint64_t (*)(void))type metadata accessor for Any?);
        }
        uint64_t v19 = v16;
        if (one-time initialization token for sharedCache != -1) {
          swift_once();
        }
        uint64_t v133 = static NamedImage.sharedCache;
        uint64_t v132 = unk_26B0EE920;
        swift_retain();
        swift_retain();
LABEL_139:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        *(void *)&long long v168 = v133;
        *((void *)&v168 + 1) = v132;
        uint64_t v134 = (uint64_t)v163;
        NamedImage.Cache.decode(_:)((uint64_t)v163, (CGImage **)&v170);
        swift_release();
        swift_release();
        outlined destroy of NamedImage.Key(v134, type metadata accessor for NamedImage.Key);
        uint64_t v16 = (void *)v170;
        int v135 = BYTE8(v170);
        double v24 = *((double *)&v171 + 1);
        double v23 = *(double *)&v171;
        uint64_t v25 = v172;
        uint64_t v18 = v173;
        outlined consume of GraphicsImage.Contents?(v19, v61);
        LODWORD(v19) = v135;
        goto LABEL_3;
      case 5uLL:
        unint64_t v72 = v26 & 7;
        if (v72 == 5)
        {
          uint64_t v136 = (float *)a1[1];
          if (v15 < (unint64_t)(v136 + 1)) {
            goto LABEL_178;
          }
          float v137 = *v136;
          a1[1] = v136 + 1;
          double v20 = v137;
        }
        else
        {
          if (v72 == 2)
          {
            uint64_t v138 = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_185;
            }
            if (v138 < 0) {
              goto LABEL_206;
            }
            char v73 = (double *)a1[1];
            if (v15 < (unint64_t)v73 + v138) {
              goto LABEL_178;
            }
            a1[3] = (id)41;
            a1[4] = (char *)v73 + v138;
          }
          else
          {
            if (v72 != 1) {
              goto LABEL_178;
            }
            char v73 = (double *)a1[1];
          }
          if (v15 < (unint64_t)(v73 + 1)) {
            goto LABEL_178;
          }
          double v20 = *v73;
          a1[1] = v73 + 1;
        }
        goto LABEL_170;
      case 6uLL:
        if ((v26 & 7) != 2) {
          goto LABEL_178;
        }
        LODWORD(v164) = v19;
        uint64_t v19 = v16;
        uint64_t v74 = v17;
        uint64_t v75 = *v17;
        uint64_t v76 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v75[2] + 1, 1, v75);
        }
        unint64_t v78 = v75[2];
        unint64_t v77 = v75[3];
        if (v78 >= v77 >> 1) {
          uint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v77 > 1), v78 + 1, 1, v75);
        }
        v75[2] = v78 + 1;
        v75[v78 + 4] = v15;
        a1[5] = v75;
        uint64_t v79 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_181;
        }
        if (v79 < 0) {
          goto LABEL_187;
        }
        unint64_t v80 = (unint64_t)a1[1] + v79;
        if (v15 < v80) {
          goto LABEL_180;
        }
        uint64_t v18 = v76;
        a1[2] = (id)v80;
        double v81 = specialized CGPoint.init(from:)(a1);
        char v83 = *v74;
        if (!(*v74)[2]) {
          goto LABEL_195;
        }
        double v22 = v81;
        uint64_t v21 = v82;
        int v17 = v74;
        uint64_t v16 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v83 = specialized _ArrayBuffer._consumeAndCreateNew()(v83);
        }
        LODWORD(v19) = v164;
        uint64_t v84 = v83[2];
        if (!v84) {
          goto LABEL_198;
        }
        uint64_t v85 = v84 - 1;
        float v86 = (void *)v83[v85 + 4];
        v83[2] = v85;
        a1[5] = v83;
        a1[2] = v86;
        goto LABEL_170;
      case 7uLL:
        if ((v26 & 7) == 0) {
          goto LABEL_72;
        }
        if ((v26 & 7) != 2) {
          goto LABEL_178;
        }
        uint64_t v87 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_185;
        }
        if (v87 < 0) {
          goto LABEL_202;
        }
        unint64_t v88 = (unint64_t)a1[1] + v87;
        if (v15 < v88) {
          goto LABEL_178;
        }
        a1[3] = (id)56;
        a1[4] = (id)v88;
LABEL_72:
        unint64_t v89 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_185;
        }
        if (v89 > 0xFF)
        {
LABEL_74:
          LODWORD(v165) = 0;
          goto LABEL_170;
        }
        switch((char)v89)
        {
          case 1:
            int v120 = 4;
            break;
          case 2:
            int v120 = 1;
            break;
          case 3:
            int v120 = 5;
            break;
          case 4:
            int v120 = 3;
            break;
          case 5:
            int v120 = 7;
            break;
          case 6:
            int v120 = 2;
            break;
          case 7:
            int v120 = 6;
            break;
          default:
            goto LABEL_74;
        }
        long long v121 = &v178;
        goto LABEL_169;
      case 8uLL:
        if ((v26 & 7) != 2) {
          goto LABEL_178;
        }
        LODWORD(v164) = v19;
        uint64_t v19 = v16;
        int v90 = v17;
        int v91 = *v17;
        uint64_t v92 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v91[2] + 1, 1, v91);
        }
        unint64_t v94 = v91[2];
        unint64_t v93 = v91[3];
        if (v94 >= v93 >> 1) {
          int v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v93 > 1), v94 + 1, 1, v91);
        }
        v91[2] = v94 + 1;
        v91[v94 + 4] = v15;
        a1[5] = v91;
        uint64_t v95 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_181;
        }
        if (v95 < 0) {
          goto LABEL_188;
        }
        unint64_t v96 = (unint64_t)a1[1] + v95;
        if (v15 < v96) {
          goto LABEL_180;
        }
        uint64_t v18 = v92;
        a1[2] = (id)v96;
        *(float *)v97.i32 = specialized Color.Resolved.init(from:)(a1);
        long long v149 = v98;
        long long v150 = v99;
        long long v151 = v100;
        int8x16_t v160 = v97;
        int v101 = *v90;
        if (!(*v90)[2]) {
          goto LABEL_196;
        }
        int v17 = v90;
        uint64_t v16 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v101 = specialized _ArrayBuffer._consumeAndCreateNew()(v101);
        }
        LODWORD(v19) = v164;
        unsigned __int32 v102 = v160.i32[0];
        v103.i32[0] = v151;
        __int32 v104 = v150;
        uint64_t v105 = v101[2];
        if (!v105) {
          goto LABEL_199;
        }
        uint64_t v106 = v105 - 1;
        id v107 = (void *)v101[v106 + 4];
        v101[2] = v106;
        a1[5] = v101;
        a1[2] = v107;
        v103.i32[1] = v104;
        v108.i64[0] = v102;
        v108.i64[1] = v149;
        int8x16_t v160 = vorrq_s8((int8x16_t)vshll_n_s32(v103, 0x20uLL), v108);
        char v175 = 0;
        goto LABEL_170;
      case 9uLL:
        if ((v26 & 7) != 2) {
          goto LABEL_178;
        }
        LODWORD(v164) = v19;
        uint64_t v19 = v16;
        unint64_t v109 = v17;
        uint64_t v110 = *v17;
        uint64_t v111 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v110[2] + 1, 1, v110);
        }
        unint64_t v113 = v110[2];
        unint64_t v112 = v110[3];
        if (v113 >= v112 >> 1) {
          uint64_t v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v112 > 1), v113 + 1, 1, v110);
        }
        v110[2] = v113 + 1;
        v110[v113 + 4] = v15;
        a1[5] = v110;
        uint64_t v114 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_181;
        }
        if (v114 < 0) {
          goto LABEL_189;
        }
        unint64_t v115 = (unint64_t)a1[1] + v114;
        if (v15 >= v115)
        {
          uint64_t v18 = v111;
          a1[2] = (id)v115;
          Image.ResizingInfo.init(from:)((unint64_t)a1, (uint64_t)&v170);
          long long v116 = *v109;
          if (!(*v109)[2]) {
            goto LABEL_197;
          }
          int v17 = v109;
          uint64_t v16 = v19;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v116 = specialized _ArrayBuffer._consumeAndCreateNew()(v116);
          }
          LODWORD(v19) = v164;
          uint64_t v117 = v116[2];
          if (!v117) {
            goto LABEL_200;
          }
          uint64_t v118 = v117 - 1;
          long long v119 = (void *)v116[v118 + 4];
          v116[2] = v118;
          a1[5] = v116;
          a1[2] = v119;
          long long v159 = v170;
          long long v158 = v171;
          int v120 = v172;
          long long v121 = &v177;
LABEL_169:
          *((_DWORD *)v121 - 64) = v120;
          goto LABEL_170;
        }
LABEL_180:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_181:
        uint64_t v16 = v19;
        LOBYTE(v19) = (_BYTE)v164;
        goto LABEL_185;
      case 0xAuLL:
        if ((v26 & 7) == 0) {
          goto LABEL_107;
        }
        if ((v26 & 7) != 2) {
          goto LABEL_178;
        }
        uint64_t v122 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_185;
        }
        if (v122 < 0) {
          goto LABEL_203;
        }
        unint64_t v123 = (unint64_t)a1[1] + v122;
        if (v15 < v123) {
          goto LABEL_178;
        }
        a1[3] = (id)80;
        a1[4] = (id)v123;
LABEL_107:
        uint64_t v124 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_185;
        }
        BOOL v176 = v124 != 0;
        goto LABEL_170;
      case 0xBuLL:
        if ((v26 & 7) == 0) {
          goto LABEL_115;
        }
        if ((v26 & 7) != 2) {
          goto LABEL_178;
        }
        uint64_t v125 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_185;
        }
        if (v125 < 0) {
          goto LABEL_204;
        }
        unint64_t v126 = (unint64_t)a1[1] + v125;
        if (v15 < v126) {
          goto LABEL_178;
        }
        a1[3] = (id)88;
        a1[4] = (id)v126;
LABEL_115:
        uint64_t v127 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_185;
        }
        int v174 = 0;
        switch(v127)
        {
          case 0:
            goto LABEL_170;
          case 2:
            int v128 = 2;
            goto LABEL_161;
          case 3:
            int v128 = 3;
            goto LABEL_161;
          default:
            int v128 = 1;
LABEL_161:
            int v174 = v128;
            break;
        }
        goto LABEL_170;
      case 0xCuLL:
        if ((v26 & 7) == 0) {
          goto LABEL_124;
        }
        if ((v26 & 7) != 2) {
          goto LABEL_178;
        }
        uint64_t v129 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_185;
        }
        if (v129 < 0) {
          goto LABEL_205;
        }
        unint64_t v130 = (unint64_t)a1[1] + v129;
        if (v15 < v130) {
          goto LABEL_178;
        }
        a1[3] = (id)96;
        a1[4] = (id)v130;
LABEL_124:
        uint64_t v131 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_185;
        }
        switch(v131)
        {
          case 0:
            int v162 = 0;
            goto LABEL_170;
          case 1:
            int v120 = 1;
            break;
          case 2:
            int v120 = 2;
            break;
          default:
            int v120 = 3;
            break;
        }
        long long v121 = (uint64_t *)((char *)&v177 + 4);
        goto LABEL_169;
      default:
        switch(v26 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_185;
            }
            goto LABEL_170;
          case 1uLL:
            unint64_t v139 = (unint64_t)a1[1] + 8;
            goto LABEL_153;
          case 2uLL:
            uint64_t v140 = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_185;
            }
            if (v140 < 0) {
              goto LABEL_207;
            }
            unint64_t v139 = (unint64_t)a1[1] + v140;
LABEL_153:
            if (v15 < v139) {
              goto LABEL_178;
            }
            a1[1] = (id)v139;
            break;
          case 5uLL:
            unint64_t v139 = (unint64_t)a1[1] + 4;
            goto LABEL_153;
          default:
            goto LABEL_178;
        }
        goto LABEL_170;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance GraphicsImage(double *a1)
{
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance GraphicsImage(id *a1@<X0>, uint64_t a2@<X8>)
{
}

id ResolvedVectorGlyph.animator.getter()
{
  return *v0;
}

void ResolvedVectorGlyph.layoutDirection.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

id ResolvedVectorGlyph.location.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 16);
  *a1 = v2;
  return outlined copy of Image.Location(v2);
}

uint64_t ResolvedVectorGlyph.animatorVersion.getter()
{
  return *(unsigned int *)(v0 + 24);
}

uint64_t ResolvedVectorGlyph.animatorVersion.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*ResolvedVectorGlyph.animatorVersion.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvedVectorGlyph.allowsContentTransitions.getter()
{
  return *(unsigned __int8 *)(v0 + 28);
}

uint64_t ResolvedVectorGlyph.allowsContentTransitions.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 28) = result;
  return result;
}

uint64_t (*ResolvedVectorGlyph.allowsContentTransitions.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvedVectorGlyph.preservesVectorRepresentation.getter()
{
  return *(unsigned __int8 *)(v0 + 29);
}

uint64_t ResolvedVectorGlyph.preservesVectorRepresentation.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 29) = result;
  return result;
}

uint64_t (*ResolvedVectorGlyph.preservesVectorRepresentation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id ResolvedVectorGlyph.flipsRightToLeft.getter()
{
  return objc_msgSend(*v0, sel_flipsRightToLeft);
}

id ResolvedVectorGlyph.renderingMode.getter@<X0>(char *a1@<X8>)
{
  id result = objc_msgSend(*v1, sel_renderingMode);
  char v4 = 8;
  if ((int)result > 127)
  {
    switch(result)
    {
      case 0x80:
        char v4 = 5;
        break;
      case 0x82:
        char v4 = 7;
        break;
      case 0x81:
        char v4 = 6;
        break;
      default:
        char v4 = 8;
        break;
    }
  }
  else
  {
    switch((int)result)
    {
      case 0:
        char v4 = 4;
        break;
      case 1:
        char v4 = 0;
        break;
      case 2:
        char v4 = 1;
        break;
      case 3:
        char v4 = 2;
        break;
      case 4:
        char v4 = 3;
        break;
      default:
        break;
    }
  }
  *a1 = v4;
  return result;
}

id ResolvedVectorGlyph.alignmentRect.getter()
{
  return objc_msgSend(*v0, sel_alignmentRect);
}

uint64_t GraphicsImage.renderedSize(at:)(double a1, double a2)
{
  double v3 = *(double *)(v2 + 16);
  int v4 = *(unsigned __int8 *)(v2 + 96);
  if (v4 == 2
    || (uint64_t result = 0,
        (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(v2 + 64)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(v2 + 80)))))) & 1) == 0)&& (v4 & 1) != 0)
  {
    double v6 = a2;
    switch(*(unsigned char *)(v2 + 40))
    {
      case 4:
      case 5:
      case 6:
      case 7:
        double v6 = a1;
        a1 = a2;
        break;
      default:
        break;
    }
    double v7 = 0.0;
    double v8 = 0.0;
    if (v3 != 0.0)
    {
      double v9 = 1.0 / v3;
      double v7 = *(double *)(v2 + 24) * v9;
      double v8 = v9 * *(double *)(v2 + 32);
    }
    if (a1 == v7 && v6 == v8) {
      return 0;
    }
    else {
      return *(void *)&a1;
    }
  }
  return result;
}

uint64_t outlined init with copy of NamedImage.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NamedImage.Key(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id outlined copy of Image.Location?(id result)
{
  if (result != (id)2) {
    return outlined copy of Image.Location(result);
  }
  return result;
}

uint64_t sub_245D5031C()
{
  swift_release();
  uint64_t v1 = *(void **)(v0 + 24);
  if ((unint64_t)v1 >= 3) {

  }
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245D5036C()
{
  return swift_deallocObject();
}

uint64_t initializeWithCopy for GraphicsImage(uint64_t a1, uint64_t *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 8);
  if (v4 == 255)
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  }
  else
  {
    uint64_t v5 = *a2;
    outlined copy of GraphicsImage.Contents((id)*a2, *((unsigned char *)a2 + 8));
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 16) = a2[2];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)((char *)a2 + 44);
  *(unsigned char *)(a1 + 60) = *((unsigned char *)a2 + 60);
  long long v6 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 80) = v6;
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(unsigned char *)(a1 + 98) = *((unsigned char *)a2 + 98);
  *(unsigned char *)(a1 + 99) = *((unsigned char *)a2 + 99);
  return a1;
}

uint64_t assignWithCopy for GraphicsImage(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned __int8 *)(a1 + 8) == 255)
  {
    if (v4 == 255)
    {
      id v10 = *(id *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)a1 = v10;
    }
    else
    {
      id v8 = *(id *)a2;
      outlined copy of GraphicsImage.Contents(*(id *)a2, *(unsigned char *)(a2 + 8));
      *(void *)a1 = v8;
      *(unsigned char *)(a1 + 8) = v4;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of GraphicsImage.Contents(a1);
    char v9 = *(unsigned char *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = v9;
  }
  else
  {
    id v5 = *(id *)a2;
    outlined copy of GraphicsImage.Contents(*(id *)a2, *(unsigned char *)(a2 + 8));
    long long v6 = *(void **)a1;
    *(void *)a1 = v5;
    char v7 = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    outlined consume of GraphicsImage.Contents(v6, v7);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  long long v11 = *(_OWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_OWORD *)(a1 + 44) = v11;
  long long v12 = *(_OWORD *)(a2 + 64);
  long long v13 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v13;
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
  return a1;
}

uint64_t assignWithTake for GraphicsImage(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 == 255) {
    goto LABEL_5;
  }
  int v5 = *(unsigned __int8 *)(a2 + 8);
  if (v5 == 255)
  {
    outlined destroy of GraphicsImage.Contents(a1);
LABEL_5:
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    goto LABEL_6;
  }
  long long v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of GraphicsImage.Contents(v6, v4);
LABEL_6:
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(_WORD *)(a1 + 98) = *(_WORD *)(a2 + 98);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphicsImage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 100)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 97);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphicsImage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 96) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 100) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 100) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 97) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphicsImage()
{
  return &type metadata for GraphicsImage;
}

uint64_t initializeBufferWithCopyOfBuffer for GraphicsImage.Contents(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of GraphicsImage.Contents(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

void destroy for GraphicsImage.Contents(uint64_t a1)
{
}

uint64_t assignWithCopy for GraphicsImage.Contents(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of GraphicsImage.Contents(*(id *)a2, v4);
  int v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of GraphicsImage.Contents(v5, v6);
  return a1;
}

uint64_t assignWithTake for GraphicsImage.Contents(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of GraphicsImage.Contents(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphicsImage.Contents(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphicsImage.Contents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for GraphicsImage.Contents(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GraphicsImage.Contents()
{
  return &type metadata for GraphicsImage.Contents;
}

void destroy for ResolvedVectorGlyph(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if ((unint64_t)v2 >= 2) {

  }
  unsigned int v3 = *(void **)(a1 + 32);
}

uint64_t initializeWithCopy for ResolvedVectorGlyph(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  char v5 = *(void **)(a2 + 16);
  id v6 = v4;
  if ((unint64_t)v5 >= 2) {
    id v7 = v5;
  }
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 28) = *(_WORD *)(a2 + 28);
  id v8 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v8;
  id v9 = v8;
  return a1;
}

uint64_t assignWithCopy for ResolvedVectorGlyph(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a2;
  char v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  id v7 = *(void **)(a1 + 16);
  id v8 = *(void **)(a2 + 16);
  if ((unint64_t)v7 >= 2)
  {
    if ((unint64_t)v8 >= 2)
    {
      *(void *)(a1 + 16) = v8;
      id v10 = v8;

      goto LABEL_8;
    }

    id v8 = *(void **)(a2 + 16);
    goto LABEL_6;
  }
  if ((unint64_t)v8 < 2)
  {
LABEL_6:
    *(void *)(a1 + 16) = v8;
    goto LABEL_8;
  }
  *(void *)(a1 + 16) = v8;
  id v9 = v8;
LABEL_8:
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  long long v11 = *(void **)(a2 + 32);
  long long v12 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v11;
  id v13 = v11;

  return a1;
}

uint64_t assignWithTake for ResolvedVectorGlyph(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  char v5 = *(void **)(a1 + 16);
  unint64_t v6 = *(void *)(a2 + 16);
  if ((unint64_t)v5 >= 2)
  {
    if (v6 >= 2)
    {
      *(void *)(a1 + 16) = v6;

      goto LABEL_6;
    }
  }
  *(void *)(a1 + 16) = v6;
LABEL_6:
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  id v7 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  return a1;
}

ValueMetadata *type metadata accessor for ResolvedVectorGlyph()
{
  return &type metadata for ResolvedVectorGlyph;
}

uint64_t static GraphicsContext.ClipOptions.inverse.getter()
{
  return 1;
}

uint64_t GraphicsContext.identifier.getter()
{
  return RBDrawingStateGetIdentifier();
}

void GraphicsContext.addFilter(_:in:)(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v202 = *MEMORY[0x263EF8340];
  double v13 = *(double *)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  unint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  uint64_t v23 = *(void *)(a1 + 80);
  uint64_t v22 = *(void *)(a1 + 88);
  uint64_t v25 = *(void *)(a1 + 96);
  uint64_t v24 = *(void *)(a1 + 104);
  int v26 = *(_DWORD *)(a1 + 112);
  switch(*(unsigned char *)(a1 + 116))
  {
    case 1:
      if (v13 > 0.0)
      {
        uint64_t v181 = *(void *)(a1 + 8) & 1;
        uint64_t v182 = v22;
        uint64_t v183 = v23;
        id v186 = (id)v14;
        uint64_t v188 = v15;
        uint64_t v187 = v17;
        uint64_t v185 = v16;
        uint64_t v184 = v18;
        outlined copy of VariableBlurStyle.Mask((id)v14, v15, v17, v16, v19, v18, v20, v21, v23, v22, v25, v24, v26, BYTE1(v26));
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v180 = v11;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v179 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          uint64_t v178 = (uint64_t *)swift_allocObject();
          uint64_t v50 = swift_retain();
          long long v11 = v180;
          *uint64_t v180 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v50, v179, 1, 0);
          uint64_t isUniquelyReferenced_nonNull_native = swift_release();
        }
        if ((v26 & 0xFF00) == 0x200)
        {
          RBDrawingStateAddBlurFilter();
          BYTE4(v174) = 1;
          LODWORD(v174) = v26;
          uint64_t v172 = v25;
          uint64_t v173 = v24;
          uint64_t v171 = v182;
          uint64_t v169 = v21;
          uint64_t v170 = v183;
          uint64_t v168 = v20;
          double v51 = v13;
          int v52 = v12;
          id v53 = v186;
          char v54 = v188;
          uint64_t v55 = v187;
          uint64_t v56 = v185;
        }
        else
        {
          LODWORD(v179) = (v12 >> 5) & 8 | v181;
          uint64_t v178 = &v175;
          *(void *)&long long v196 = v186;
          BYTE8(v196) = v188;
          *((void *)&v141 + 1) = v20;
          *(void *)&long long v141 = v184;
          uint64_t v140 = v141 >> 32;
          *((void *)&v141 + 1) = v21;
          *(void *)&long long v141 = v20;
          *(void *)&long long v197 = v187;
          *((void *)&v197 + 1) = v185;
          *(void *)uint64_t v198 = v19;
          *(void *)&v198[12] = v140;
          v198[8] = v184;
          *(void *)&v198[20] = v141 >> 32;
          v198[28] = BYTE4(v21) & 1;
          *(void *)&long long v199 = v183;
          *((void *)&v199 + 1) = v182;
          *(void *)&long long v200 = v25;
          *((void *)&v200 + 1) = v24;
          LOWORD(v201) = v26 & 0x1FF;
          BYTE2(v201) = BYTE2(v26);
          HIBYTE(v201) = HIBYTE(v26);
          int8x16_t v142 = *(void **)(*(void *)(*v11 + 16) + 40);
          long long v193 = v199;
          long long v194 = v200;
          int v195 = v201;
          long long v192 = *(_OWORD *)&v198[16];
          long long v191 = *(_OWORD *)v198;
          long long v190 = v197;
          long long v189 = v196;
          MEMORY[0x270FA5388](isUniquelyReferenced_nonNull_native);
          uint64_t v177 = &v167;
          uint64_t v168 = (uint64_t)v142;
          uint64_t v169 = (uint64_t)&v196;
          LODWORD(v170) = v143;
          uint64_t v171 = *(void *)&a2;
          uint64_t v172 = *(void *)&a3;
          uint64_t v173 = *(void *)&a4;
          double v174 = a5;
          MEMORY[0x270FA5388](v144);
          outlined copy of GraphicsFilter(*(id *)&v13, v12, v145, v146, v147, v148, v19, v149, v20, v21, v150, v151, v25, v24, v26, SBYTE2(v26));
          id v176 = v142;
          GraphicsImage.withRBImage(image:color:)((void (*)(uint64_t))partial apply for closure #1 in RBFill.setImage(_:destRect:in:), v152, v153, v154, v155, (uint64_t)v177, (void (*)(__n128, __n128, __n128, __n128))closure #2 in RBFill.setImage(_:destRect:in:)partial apply);

          RBDrawingStateAddVariableBlurFilter();
          id v156 = v186;
          uint64_t v157 = v185;
          outlined consume of GraphicsFilter(*(void **)&v13, v12, v186, v188, v187, v185, v19, v184, v20, v21, v183, v182, v25, v24, v26, SBYTE2(v26));
          int v166 = v26;
          uint64_t v164 = v25;
          uint64_t v165 = v24;
          uint64_t v163 = v182;
          uint64_t v161 = v21;
          uint64_t v162 = v183;
          uint64_t v160 = v20;
          double v51 = v13;
          int v52 = v12;
          id v53 = v156;
          char v54 = v188;
          uint64_t v55 = v187;
          uint64_t v56 = v157;
        }
        goto LABEL_134;
      }
      return;
    case 2:
      char v57 = BYTE4(v16) & 2;
      if ((v16 & 0x100000000) == 0)
      {
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
      if ((v16 & 0x200000000) != 0)
      {
        char v158 = BYTE4(*(void *)(a1 + 40));
        char v159 = swift_isUniquelyReferenced_nonNull_native();
        if ((v158 & 4) != 0) {
          char v57 = 6;
        }
        else {
          char v57 = 5;
        }
        if (v159) {
          goto LABEL_39;
        }
LABEL_38:
        uint64_t v58 = v11;
        uint64_t v59 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v60 = swift_retain();
        uint64_t v61 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v60, v59, 1, 0);
        long long v11 = v58;
        *uint64_t v58 = v61;
        swift_release();
        goto LABEL_39;
      }
      char v57 = 5;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_38;
      }
LABEL_39:
      if (*(_DWORD *)(*(void *)(*v11 + 16) + 64) != 2) {
        RBColorFromLinear();
      }
      specialized RBShadowFlags.init(_:)(v57);
      RBDrawingStateAddShadowStyle3();
      return;
    case 3:
      *(void *)&long long v196 = *(void *)a1;
      *((void *)&v196 + 1) = v12;
      *(void *)&long long v197 = v14;
      *((void *)&v197 + 1) = v15;
      *(void *)uint64_t v198 = v17;
      *(void *)&v198[8] = v16;
      *(void *)&v198[16] = v19;
      *(void *)&v198[24] = v18;
      *(void *)&long long v199 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v62 = v11;
        uint64_t v63 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v64 = swift_retain();
        *uint64_t v62 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v64, v63, 1, 0);
        swift_release();
      }
      RBDrawingState.addProjectionTransform(_:)();
      return;
    case 4:
      *(void *)&long long v196 = *(void *)a1;
      *((void *)&v196 + 1) = v12;
      *(void *)&long long v197 = v14;
      *((void *)&v197 + 1) = v15;
      *(void *)uint64_t v198 = v17;
      *(void *)&v198[8] = v16;
      *(void *)&v198[16] = v19;
      *(void *)&v198[24] = v18;
      *(void *)&long long v199 = v20;
      *((void *)&v199 + 1) = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v65 = v11;
        uint64_t v66 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v67 = swift_retain();
        *uint64_t v65 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v67, v66, 1, 0);
        swift_release();
      }
      RBDrawingStateAddColorMatrixFilter();
      return;
    case 5:
      if (*(float *)&v13 != 1.0
        || (*((float *)&v13 + 1) == 1.0 ? (BOOL v68 = *(float *)&v12 == 1.0) : (BOOL v68 = 0),
            v68 ? (BOOL v69 = *((float *)&v12 + 1) == 1.0) : (BOOL v69 = 0),
            !v69))
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          unint64_t v70 = v11;
          uint64_t v71 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v72 = swift_retain();
          uint64_t v73 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v72, v71, 1, 0);
          long long v11 = v70;
          *unint64_t v70 = v73;
          swift_release();
        }
        if (*(_DWORD *)(*(void *)(*v11 + 16) + 64) != 2) {
          RBColorFromLinear();
        }
        RBDrawingStateAddColorMultiplyFilter();
      }
      return;
    case 6:
      if (v13 != 0.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v75 = v11;
          uint64_t v76 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v77 = swift_retain();
          uint64_t v78 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v77, v76, 1, 0);
          long long v11 = v75;
          *uint64_t v75 = v78;
          swift_release();
        }
        uint64_t v79 = *(void *)(*v11 + 24);
        if (*(_DWORD *)(*(void *)(*v11 + 16) + 64) == 2) {
          uint64_t v80 = 1;
        }
        else {
          uint64_t v80 = 2;
        }
        v74.n128_f64[0] = v13;
        MEMORY[0x270F5AB38](v79, v80, v74);
      }
      return;
    case 7:
      float v81 = v13;
      if (v81 != 1.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          char v83 = v11;
          uint64_t v84 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v85 = swift_retain();
          uint64_t v86 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v85, v84, 1, 0);
          long long v11 = v83;
          *char v83 = v86;
          swift_release();
        }
        uint64_t v87 = *(void *)(*v11 + 24);
        if (*(_DWORD *)(*(void *)(*v11 + 16) + 64) == 2) {
          uint64_t v88 = 1;
        }
        else {
          uint64_t v88 = 2;
        }
        v82.n128_f32[0] = v13;
        MEMORY[0x270F5AB80](v87, v88, v82);
      }
      return;
    case 8:
      float v89 = v13;
      if (v89 != 0.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          int v91 = v11;
          uint64_t v92 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v93 = swift_retain();
          uint64_t v94 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v93, v92, 1, 0);
          long long v11 = v91;
          *int v91 = v94;
          swift_release();
        }
        uint64_t v95 = *(void *)(*v11 + 24);
        if (*(_DWORD *)(*(void *)(*v11 + 16) + 64) == 2) {
          uint64_t v96 = 1;
        }
        else {
          uint64_t v96 = 2;
        }
        v90.n128_f32[0] = v13;
        MEMORY[0x270F5AB00](v95, v96, v90);
      }
      return;
    case 9:
      float v97 = v13;
      if (v97 != 1.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          long long v99 = v11;
          uint64_t v100 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v101 = swift_retain();
          uint64_t v102 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v101, v100, 1, 0);
          long long v11 = v99;
          *long long v99 = v102;
          swift_release();
        }
        uint64_t v103 = *(void *)(*v11 + 24);
        if (*(_DWORD *)(*(void *)(*v11 + 16) + 64) == 2) {
          uint64_t v104 = 1;
        }
        else {
          uint64_t v104 = 2;
        }
        v98.n128_f32[0] = v13;
        MEMORY[0x270F5AB28](v103, v104, v98);
      }
      return;
    case 0xA:
      float v34 = v13;
      if (v34 != 0.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v36 = v11;
          uint64_t v37 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v38 = swift_retain();
          uint64_t v39 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v38, v37, 1, 0);
          long long v11 = v36;
          *uint64_t v36 = v39;
          swift_release();
        }
        uint64_t v40 = *(void *)(*v11 + 24);
        if (*(_DWORD *)(*(void *)(*v11 + 16) + 64) == 2) {
          uint64_t v41 = 1;
        }
        else {
          uint64_t v41 = 2;
        }
        v35.n128_f32[0] = v13;
        MEMORY[0x270F5AB30](v40, v41, v35);
      }
      return;
    case 0xB:
      unsigned __int32 v105 = *(void *)(a1 + 16);
      if (*(float *)&v14 != 0.0)
      {
        uint64_t v106 = *(void *)(a1 + 16);
        unsigned __int32 v108 = HIDWORD(*(void *)a1);
        unsigned __int32 v107 = *(void *)a1;
        unsigned __int32 v109 = *(void *)(a1 + 8);
        unsigned __int32 v110 = HIDWORD(*(void *)(a1 + 8));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v117 = v11;
          uint64_t v118 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v119 = swift_retain();
          uint64_t v120 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v119, v118, 1, 0);
          long long v11 = v117;
          *uint64_t v117 = v120;
          swift_release();
        }
        uint64_t v121 = *(void *)(*v11 + 24);
        int v122 = *(_DWORD *)(*(void *)(*v11 + 16) + 64);
        unint64_t v123 = v11;
        uint64_t v124 = 1;
        if (v122 != 2)
        {
          RBColorFromLinear();
          unsigned __int32 v107 = v111.n128_u32[0];
          unsigned __int32 v108 = v112.n128_u32[0];
          unsigned __int32 v109 = v113.n128_u32[0];
          unsigned __int32 v110 = v114.n128_u32[0];
          if (*(_DWORD *)(*(void *)(*v123 + 16) + 64) == 2) {
            uint64_t v124 = 1;
          }
          else {
            uint64_t v124 = 2;
          }
        }
        v116.n128_u32[0] = HIDWORD(v106);
        v111.n128_u32[0] = v105;
        v112.n128_u32[0] = v107;
        v113.n128_u32[0] = v108;
        v114.n128_u32[0] = v109;
        v115.n128_u32[0] = v110;
        MEMORY[0x270F5AB18](v121, v124, v111, v112, v113, v114, v115, v116);
      }
      return;
    case 0xC:
      return;
    case 0xD:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v125 = v11;
        uint64_t v126 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v127 = swift_retain();
        *uint64_t v125 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v127, v126, 1, 0);
        swift_release();
      }
      *(double *)&long long v196 = v13;
      *((void *)&v196 + 1) = v12;
      RBDrawingStateAddLuminanceCurveFilter();
      return;
    case 0xE:
      *(void *)&long long v196 = *(void *)a1;
      *((void *)&v196 + 1) = v12;
      *(void *)&long long v197 = v14;
      *((void *)&v197 + 1) = v15;
      *(void *)uint64_t v198 = v17;
      *(void *)&v198[8] = v16;
      *(void *)&v198[16] = v19;
      *(void *)&v198[24] = v18;
      *(void *)&long long v200 = 2952790016;
      GraphicsContext.addFilter(_:options:)((uint64_t)&v196, 0, a7, a8, a9, a10, a11);
      return;
    case 0xF:
      uint64_t v188 = *(void *)(a1 + 24);
      uint64_t v184 = v18;
      uint64_t v183 = v23;
      uint64_t v182 = v22;
      if (v13 == 0.0)
      {
        unint64_t v130 = (void *)v14;
        uint64_t v131 = v17;
        uint64_t v132 = v16;
        outlined consume of GraphicsFilter(0, v12, (id)v14, v15, v17, v16, v19, v18, v20, v21, v23, v22, v25, v24, v26, SBYTE2(v26));
        BYTE4(v174) = 15;
        LODWORD(v174) = v26;
        uint64_t v172 = v25;
        uint64_t v173 = v24;
        uint64_t v171 = v182;
        uint64_t v169 = v21;
        uint64_t v170 = v183;
        uint64_t v168 = v20;
        double v51 = 0.0;
        int v52 = v12;
        id v53 = v130;
        char v54 = v188;
        uint64_t v55 = v131;
        uint64_t v56 = v132;
LABEL_134:
        outlined consume of GraphicsFilter(*(void **)&v51, v52, v53, v54, v55, v56, v19, v184, v160, v161, v162, v163, v164, v165, v166, SBYTE2(v166));
      }
      else
      {
        uint64_t v181 = v21;
        uint64_t v187 = v17;
        uint64_t v185 = v16;
        id v186 = (id)v14;
        id v128 = *(id *)&v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v179 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          uint64_t v178 = (uint64_t *)swift_allocObject();
          uint64_t v129 = swift_retain();
          *long long v11 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v129, v179, 1, 0);
          swift_release();
        }
        long long v196 = 0uLL;
        *(void *)&long long v197 = v187;
        *((void *)&v197 + 1) = v185;
        *(double *)&long long v189 = v13;
        *((void *)&v189 + 1) = v12;
        *(void *)&long long v190 = v186;
        DWORD2(v190) = v188;
        Shader.ResolvedShader.rbFilterFlags.getter();
        RBDrawingStateAddShaderFilter();
        outlined consume of GraphicsFilter(*(void **)&v13, v12, v186, v188, v187, v185, v19, v184, v20, v181, v183, v182, v25, v24, v26, SBYTE2(v26));
        outlined consume of GraphicsFilter(*(void **)&v13, v12, v186, v188, v187, v185, v19, v184, v20, v181, v183, v182, v25, v24, v26, SBYTE2(v26));
      }
      return;
    case 0x10:
      if (v12 | *(void *)&v13 | v14 | v15 | v17 | v16 | v19 | v18 | v20 | v21 | v23 | v22 | v25 | v24) {
        BOOL v42 = 0;
      }
      else {
        BOOL v42 = v26 == 0;
      }
      if (v42) {
        goto LABEL_118;
      }
      if (v26 || *(void *)&v13 != 1 || v14 | v12 | v15 | v17 | v16 | v19 | v18 | v20 | v21 | v23 | v22 | v25 | v24)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v134 = v11;
          uint64_t v135 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v136 = swift_retain();
          uint64_t v137 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v136, v135, 1, 0);
          long long v11 = v134;
          *uint64_t v134 = v137;
          swift_release();
        }
        uint64_t v138 = *(void *)(*v11 + 24);
        if (*(_DWORD *)(*(void *)(*v11 + 16) + 64) == 2) {
          uint64_t v139 = 1;
        }
        else {
          uint64_t v139 = 2;
        }
        v133.n128_u32[0] = 1.0;
        MEMORY[0x270F5AB08](v138, v139, v133);
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          int v43 = v11;
          uint64_t v44 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v45 = swift_retain();
          uint64_t v46 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v45, v44, 1, 0);
          long long v11 = v43;
          *int v43 = v46;
          swift_release();
        }
        uint64_t v47 = *(void *)(*v11 + 24);
        if (*(_DWORD *)(*(void *)(*v11 + 16) + 64) == 2) {
          uint64_t v48 = 1;
        }
        else {
          uint64_t v48 = 2;
        }
        MEMORY[0x270F5AB48](v47, v48);
      }
      return;
    default:
      if (v13 > 0.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v31 = v11;
          uint64_t v32 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v33 = swift_retain();
          *uint64_t v31 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v33, v32, 1, 0);
          swift_release();
        }
LABEL_118:
        RBDrawingStateAddBlurFilter();
      }
      return;
  }
}

void *GraphicsContext.fill(_:with:style:)(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  outlined init with take of GraphicsContext.ResolvedShading(a2, (uint64_t)v13);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v13, (uint64_t)v12);
  uint64_t v8 = a3 & 0x101;
  long long v9 = 0u;
  long long v10 = 0u;
  char v11 = 0;
  return GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v12, (uint64_t)&v8, a4);
}

void GraphicsContext.draw(_:in:style:shading:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, CGFloat a5, CGFloat a6, double a7, double a8)
{
  int v117 = a2;
  uint64_t v132 = *(void **)a1;
  int v13 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  unsigned int v126 = *(unsigned __int8 *)(a1 + 40);
  unint64_t v17 = *(void *)(a1 + 44);
  unint64_t v18 = *(void *)(a1 + 52);
  LODWORD(v116) = *(unsigned __int8 *)(a1 + 60);
  float64x2_t v20 = *(float64x2_t *)(a1 + 64);
  float64x2_t v19 = *(float64x2_t *)(a1 + 80);
  int v21 = *(unsigned __int8 *)(a1 + 96);
  int v125 = *(unsigned __int8 *)(a1 + 97);
  int v124 = *(unsigned __int8 *)(a1 + 98);
  int v123 = *(unsigned __int8 *)(a1 + 99);
  uint64_t v22 = *(void **)a3;
  uint64_t v23 = *(void *)(a3 + 8);
  uint64_t v25 = *(void *)(a3 + 16);
  uint64_t v24 = *(void *)(a3 + 24);
  uint64_t v26 = *(void *)(a3 + 32);
  uint64_t v131 = *(void *)(a3 + 40);
  uint64_t v127 = *(void *)(a3 + 48);
  uint64_t v27 = *(void *)(a3 + 64);
  uint64_t v130 = *(void *)(a3 + 56);
  int v28 = *(unsigned __int8 *)(a3 + 72);
  uint64_t v128 = v24;
  float64x2_t v119 = v19;
  float64x2_t v118 = v20;
  int v129 = v13;
  if ((v13 & 0xFE) != 2) {
    goto LABEL_8;
  }
  if (v21 != 2)
  {
    if (one-time initialization token for resizable != -1)
    {
      int v115 = v21;
      uint64_t v111 = v23;
      unint64_t v91 = v17;
      unint64_t v92 = v18;
      uint64_t v93 = v26;
      swift_once();
      uint64_t v26 = v93;
      unint64_t v18 = v92;
      unint64_t v17 = v91;
      uint64_t v23 = v111;
      LOBYTE(v13) = v129;
      float64x2_t v20 = v118;
      int v21 = v115;
      float64x2_t v19 = v119;
    }
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)static Image.ResizingInfo.resizable, v20), (int32x4_t)vceqq_f64((float64x2_t)xmmword_268EEEF70, v19))), 0xFuLL))) & 1) == 0|| ((((v21 & 1) == 0) ^ byte_268EEEF80) & 1) == 0)
    {
      goto LABEL_8;
    }
  }
  *(void *)&long long v140 = v132;
  BYTE8(v140) = v13;
  *(void *)&long long v141 = v14;
  *((void *)&v141 + 1) = v15;
  *(void *)int8x16_t v142 = v16;
  v142[8] = v126;
  *(void *)&v142[12] = v17;
  *(void *)&v142[20] = v18;
  v142[28] = v116;
  float64x2_t v143 = v20;
  float64x2_t v144 = v19;
  LOBYTE(v145) = v21;
  BYTE1(v145) = v125;
  BYTE2(v145) = v124;
  HIBYTE(v145) = v123;
  *(void *)&long long v133 = v22;
  *((void *)&v133 + 1) = v23;
  *(void *)&long long v134 = v25;
  *((void *)&v134 + 1) = v24;
  *(void *)&long long v135 = v26;
  *((void *)&v135 + 1) = v131;
  *(void *)&long long v136 = v127;
  *((void *)&v136 + 1) = v130;
  *(void *)&v137.f64[0] = v27;
  LOBYTE(v137.f64[1]) = v28;
  int v29 = v21;
  uint64_t v30 = v25;
  uint64_t v31 = v23;
  unint64_t v32 = v17;
  uint64_t v33 = v27;
  float v34 = v22;
  unint64_t v35 = v18;
  uint64_t v36 = v26;
  BOOL v37 = specialized GraphicsContext.drawAsVector(image:rect:style:shading:)((uint64_t)&v140, (uint64_t)&v133, (void *)a4, a5, a6, a7, a8);
  uint64_t v26 = v36;
  unint64_t v18 = v35;
  uint64_t v22 = v34;
  uint64_t v27 = v33;
  unint64_t v17 = v32;
  uint64_t v23 = v31;
  uint64_t v25 = v30;
  uint64_t v24 = v128;
  LOBYTE(v13) = v129;
  int v21 = v29;
  if (!v37)
  {
LABEL_8:
    uint64_t v38 = *(void *)(a4 + 24);
    float v39 = *(float *)(a4 + 48);
    int v122 = *(_DWORD *)(a4 + 52);
    uint64_t v121 = a4;
    uint64_t v120 = v22;
    uint64_t v111 = v23;
    uint64_t v109 = v25;
    uint64_t v112 = v26;
    uint64_t v108 = v27;
    int v110 = v28;
    int v115 = v21;
    if (v28 == 255)
    {
      float v114 = v39;
      uint64_t v46 = v132;
      char v47 = v13;
      unint64_t v48 = v17;
      unint64_t v49 = v18;
      outlined copy of GraphicsImage.Contents?(v132, v13);
      outlined copy of GraphicsImage.Contents?(v132, v47);
      uint64_t v113 = v38;
      char v50 = v116;
    }
    else
    {
      uint64_t v116 = v38;
      if (v28 == 1)
      {
        uint64_t v41 = *(void *)(a4 + 32);
        uint64_t v40 = *(void *)(a4 + 40);
        uint64_t v107 = v14;
        uint64_t v106 = v15;
        uint64_t v105 = v16;
        float v114 = v39;
        uint64_t v103 = v40;
        uint64_t v102 = v41;
        uint64_t v42 = v25;
        if (v41 == 1)
        {
          uint64_t v43 = *(void *)(a4 + 16);
          uint64_t v44 = *(void *)(v43 + 48);
          uint64_t v45 = *(void *)(v43 + 56);
          swift_retain();
          swift_retain();
        }
        else
        {
          uint64_t v45 = v40;
          uint64_t v44 = v41;
        }
        uint64_t v104 = v45;
        uint64_t v113 = v44;
        *(void *)&long long v140 = v44;
        *((void *)&v140 + 1) = v45;
        uint64_t v58 = (float (**)(long long *))(*v22 + 104);
        uint64_t v101 = *v58;
        uint64_t v100 = v58;
        uint64_t v59 = v22;
        outlined copy of GraphicsContext.Shading?(v22, v23, v42, v128, v112, v131, v127, v130, v27, 1u);
        outlined copy of GraphicsImage.Contents?(v132, v129);
        outlined copy of GraphicsContext.Shading?(v22, v23, v42, v128, v112, v131, v127, v130, v27, 1u);
        outlined copy of GraphicsImage.Contents?(v132, v129);
        outlined copy of GraphicsContext.Shading?(v22, v23, v42, v128, v112, v131, v127, v130, v27, 1u);
        outlined copy of EnvironmentValues?(v102);
        float v60 = v101(&v140);
        unsigned int v62 = v61;
        unsigned int v64 = v63;
        unsigned int v66 = v65;
        outlined consume of GraphicsContext.Shading?(v22, v23, v42, v128, v112, v131, v127, v130, v27, 1u);
        outlined consume of GraphicsContext.Shading?(v22, v23, v42, v128, v112, v131, v127, v130, v27, 1u);
        uint64_t v46 = v132;
        outlined consume of GraphicsContext.Shading.Storage(v59, v23, v42, v128, v112, v131, v127, v130, v27, 1);
        swift_release();
        swift_release();
        char v50 = 0;
        unint64_t v48 = LODWORD(v60) | ((unint64_t)v62 << 32);
        unint64_t v49 = v64 | ((unint64_t)v66 << 32);
        uint64_t v38 = v116;
        uint64_t v113 = v116;
        char v47 = v129;
        a4 = v121;
        uint64_t v14 = v107;
        uint64_t v15 = v106;
        uint64_t v16 = v105;
      }
      else
      {
        char v51 = v13;
        uint64_t v52 = v26;
        outlined copy of GraphicsImage.Contents?(v132, v13);
        outlined copy of GraphicsImage.Contents?(v132, v51);
        id v53 = v22;
        char v54 = v22;
        uint64_t v55 = v27;
        outlined copy of GraphicsContext.Shading?(v53, v23, v25, v24, v52, v131, v127, v130, v27, v28);
        uint64_t v56 = v25;
        uint64_t v57 = v52;
        uint64_t v113 = RBDrawingStateInit();
        uint64_t v38 = RBDrawingStateBeginLayer();
        a4 = v121;
        outlined consume of GraphicsContext.Shading?(v54, v23, v56, v24, v57, v131, v127, v130, v55, v28);
        int v122 = 0;
        unint64_t v48 = 0;
        unint64_t v49 = 0;
        char v50 = 1;
        float v114 = 1.0;
        char v47 = v129;
        uint64_t v46 = v132;
      }
    }
    uint64_t v67 = *(void *)(a4 + 16);
    double v68 = *(double *)(a4 + 56);
    id v69 = *(id *)(v67 + 32);
    objc_msgSend(v69, sel_setRect_, a5, a6, a7, a8);
    RBShape.setRenderingMode(style:shapeDistance:)(v68);

    v142[8] = v126;
    *(void *)&long long v140 = v46;
    BYTE8(v140) = v47;
    *(void *)&long long v141 = v14;
    *((void *)&v141 + 1) = v15;
    *(void *)int8x16_t v142 = v16;
    *(void *)&v142[12] = v48;
    *(void *)&v142[20] = v49;
    v142[28] = v50;
    float64x2_t v143 = v118;
    float64x2_t v144 = v119;
    LOBYTE(v145) = v115;
    BYTE1(v145) = v125;
    BYTE2(v145) = v124;
    HIBYTE(v145) = v123;
    float64x2_t v137 = v118;
    float64x2_t v138 = v119;
    int v139 = v145;
    long long v133 = v140;
    long long v134 = v141;
    long long v136 = *(_OWORD *)&v142[16];
    long long v135 = *(_OWORD *)v142;
    MEMORY[0x270FA5388](v70);
    v94[2] = v71;
    v94[3] = &v140;
    int v95 = v72;
    CGFloat v96 = a5;
    CGFloat v97 = a6;
    double v98 = a7;
    double v99 = a8;
    MEMORY[0x270FA5388](v73);
    id v75 = v74;
    GraphicsImage.withRBImage(image:color:)((void (*)(uint64_t))partial apply for closure #1 in RBFill.setImage(_:destRect:in:), v76, v77, v78, v79, (uint64_t)v94, (void (*)(__n128, __n128, __n128, __n128))closure #2 in RBFill.setImage(_:destRect:in:)partial apply);

    outlined consume of GraphicsImage.Contents?(v46, v47);
    *(void *)(v67 + 264) = 0;
    swift_release();
    RBDrawingStateDrawShape();
    if (v38 != v113)
    {
      uint64_t v80 = v113;
      RBDrawingStateClipLayer();
      unsigned __int8 v81 = v110;
      if (v110 == 255)
      {
        __break(1u);
        return;
      }
      *(void *)&long long v133 = v120;
      char v82 = v111;
      *((void *)&v133 + 1) = v111;
      uint64_t v83 = v109;
      *(void *)&long long v134 = v109;
      uint64_t v84 = v128;
      *((void *)&v134 + 1) = v128;
      uint64_t v85 = v112;
      *(void *)&long long v135 = v112;
      uint64_t v86 = v131;
      *((void *)&v135 + 1) = v131;
      uint64_t v87 = v127;
      *(void *)&long long v136 = v127;
      *((void *)&v136 + 1) = v130;
      uint64_t v88 = v108;
      *(void *)&v137.f64[0] = v108;
      LOBYTE(v137.f64[1]) = v110;
      float v89 = (void *)v121;
      float v90 = *(float *)(v121 + 48);
      unsigned int v126 = *(_DWORD *)(v121 + 52);
      outlined copy of GraphicsContext.Shading.Storage(v120, v111, v109, v128, v112, v131, v127, v130, v108, v110);
      GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)((uint64_t)&v133, v80, v126, v89, a5, a6, a7, a8, v90);
      outlined consume of GraphicsContext.Shading?(v120, v82, v83, v84, v85, v86, v87, v130, v88, v81);
      RBDrawingStateDestroy();
      char v47 = v129;
    }
    outlined consume of GraphicsImage.Contents?(v132, v47);
  }
}

uint64_t GraphicsContext.blendMode.getter(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t static GraphicsContext.ShadowOptions.shadowOnly.getter()
{
  return 2;
}

void GraphicsContext.addFilter(_:options:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v231 = *MEMORY[0x263EF8340];
  double v9 = *(double *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  unint64_t v11 = *(void *)(a1 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  unint64_t v13 = *(void *)(a1 + 32);
  unint64_t v12 = *(void *)(a1 + 40);
  unint64_t v15 = *(void *)(a1 + 48);
  unint64_t v14 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  uint64_t v18 = *(void *)(a1 + 80);
  float64x2_t v19 = v7;
  char v20 = a2;
  switch(v18 >> 27)
  {
    case 1u:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v23 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v24 = swift_retain();
        *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v24, v23, 1, 0);
        swift_release();
      }
      RBDrawingStateAddRotationStyle();
      return;
    case 2u:
      double v213 = *(double *)a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v25 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v26 = swift_retain();
        *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v26, v25, 1, 0);
        swift_release();
      }
      RBDrawingStateAddRotation3DStyle();
      return;
    case 3u:
      double v213 = *(double *)(a1 + 72);
      uint64_t v214 = v16;
      unint64_t v210 = v14;
      uint64_t v215 = v10;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v212 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v27 = swift_retain();
        *id v7 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v27, v212, 1, 0);
        swift_release();
      }
      uint64_t v209 = v12;
      uint64_t v28 = v215;
      uint64_t v212 = HIDWORD(v13);
      unsigned int v207 = v7;
      uint64_t v29 = *v7;
      uint64_t v31 = *(void *)(*v7 + 32);
      uint64_t v30 = *(void *)(*v19 + 40);
      unint64_t v205 = v30;
      char v32 = v11;
      if (v31 == 1)
      {
        uint64_t v33 = *(void *)(v29 + 16);
        float v34 = *(void **)(v33 + 48);
        uint64_t v35 = *(void *)(v33 + 56);
        swift_retain();
        swift_retain();
        uint64_t v28 = v215;
      }
      else
      {
        uint64_t v35 = v30;
        float v34 = (void *)v31;
      }
      id v206 = v34;
      unint64_t v216 = (unint64_t)v34;
      unint64_t v211 = v35;
      unint64_t v217 = v35;
      uint64_t v162 = (float (**)(unint64_t *))(**(void **)&v9 + 104);
      unsigned __int8 v204 = *v162;
      uint64_t v203 = v162;
      uint64_t v163 = v28;
      outlined copy of GraphicsContext.Filter.Storage(*(void **)&v9, (id)v8, v32, v28, v13, v209, v15, v210, v214, *(uint64_t *)&v213, v18);
      outlined copy of EnvironmentValues?(v31);
      v204(&v216);
      outlined consume of GraphicsContext.Filter.Storage(*(void **)&v9, (id)v8, v32, v163, v13, v209, v15, v210, v214, *(uint64_t *)&v213, v18);
      swift_release();
      swift_release();
      if (*(_DWORD *)(*(void *)(*v207 + 16) + 64) != 2) {
        RBColorFromLinear();
      }
      specialized RBShadowFlags.init(_:)(v212);
      RBDrawingStateAddShadowStyle();
      uint64_t v202 = v18;
      uint64_t v201 = *(void *)&v213;
      uint64_t v200 = v214;
      double v40 = v9;
      uint64_t v41 = (void *)v8;
      char v42 = v32;
      uint64_t v43 = v215;
      uint64_t v44 = v13;
      uint64_t v45 = v209;
      goto LABEL_201;
    case 4u:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v36 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v37 = swift_retain();
        *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v37, v36, 1, 0);
        swift_release();
      }
      if (*(_DWORD *)(*(void *)(*v19 + 16) + 64) != 2) {
        RBColorFromLinear();
      }
      specialized RBShadowFlags.init(_:)(v15);
      RBDrawingStateAddShadowStyle3();
      return;
    case 5u:
      double v213 = *(double *)(a1 + 72);
      double v226 = *(double *)&v13;
      unint64_t v227 = v12;
      uint64_t v215 = v10;
      unint64_t v228 = v15;
      unint64_t v229 = v14;
      char v230 = v16;
      uint64_t v212 = v15;
      unint64_t v210 = v14;
      uint64_t v214 = v16;
      outlined copy of Path.Storage(v13, v12, v15, v14, v16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v38 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v39 = swift_retain();
        *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v39, v38, 1, 0);
        swift_release();
      }
      Path.retainRBPath()();
      unint64_t v216 = 0x3FF0000000000000;
      unint64_t v217 = 0;
      unint64_t v218 = 0;
      unint64_t v219 = 0x3FF0000000000000;
      unint64_t v220 = 0;
      unint64_t v221 = 0;
      RBDrawingStateAddPathProjectionStyle();
      RBPathRelease();
      uint64_t v202 = v18;
      uint64_t v201 = *(void *)&v213;
      uint64_t v200 = v214;
      double v40 = v9;
      uint64_t v41 = (void *)v8;
      char v42 = v11;
      uint64_t v43 = v215;
      uint64_t v44 = v13;
      uint64_t v45 = v12;
      goto LABEL_126;
    case 6u:
      unint64_t v211 = *(void *)(a1 + 32);
      uint64_t v212 = v15;
      uint64_t v209 = v12;
      unsigned int v207 = v7;
      uint64_t v46 = *v7;
      uint64_t v48 = *(void *)(*v7 + 32);
      unint64_t v47 = *(void *)(*v19 + 40);
      unint64_t v208 = v11;
      LODWORD(v206) = a2;
      unint64_t v205 = v47;
      if (v48 == 1)
      {
        uint64_t v49 = *(void *)(v46 + 16);
        unint64_t v50 = *(void *)(v49 + 48);
        unint64_t v51 = *(void *)(v49 + 56);
        uint64_t v215 = v10;
        unint64_t v52 = v14;
        uint64_t v53 = v16;
        uint64_t v54 = v17;
        swift_retain();
        unint64_t v55 = v50;
        swift_retain();
        uint64_t v17 = v54;
        uint64_t v16 = v53;
        unint64_t v14 = v52;
        unint64_t v10 = v215;
      }
      else
      {
        unint64_t v51 = v47;
        unint64_t v55 = v48;
      }
      *(void *)&double v213 = v17;
      uint64_t v214 = v16;
      unint64_t v216 = v55;
      unint64_t v217 = v51;
      unsigned __int8 v204 = *(float (**)(unint64_t *))(**(void **)&v9 + 104);
      char v164 = v208;
      unint64_t v165 = v10;
      unint64_t v166 = v14;
      outlined copy of GraphicsContext.Filter.Storage(*(void **)&v9, (id)v8, v208, v10, v211, v209, v212, v14, v16, v17, v18);
      outlined copy of EnvironmentValues?(v48);
      float v167 = v204(&v216);
      float v169 = v168;
      float v171 = v170;
      float v173 = v172;
      swift_release();
      swift_release();
      if (v167 == 1.0 && v169 == 1.0 && v171 == 1.0 && v173 == 1.0) {
        goto LABEL_193;
      }
      uint64_t v177 = v207;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v178 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v179 = swift_retain();
        *unsigned int v207 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v179, v178, 1, 0);
        swift_release();
      }
      char v180 = v164;
      uint64_t v181 = v211;
      if (*(_DWORD *)(*(void *)(*v177 + 16) + 64) != 2) {
        RBColorFromLinear();
      }
      RBDrawingStateAddColorMultiplyFilter();
      goto LABEL_192;
    case 7u:
      if (*(float *)&v9 != 1.0 || *((float *)&v9 + 1) != 1.0 || *(float *)&v8 != 1.0 || *((float *)&v8 + 1) != 1.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v59 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v60 = swift_retain();
          *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v60, v59, 1, 0);
          swift_release();
        }
        if (*(_DWORD *)(*(void *)(*v19 + 16) + 64) != 2) {
          RBColorFromLinear();
        }
        RBDrawingStateAddColorMultiplyFilter();
      }
      return;
    case 8u:
      unint64_t v211 = *(void *)(a1 + 32);
      uint64_t v212 = v15;
      uint64_t v209 = v12;
      unsigned int v207 = v7;
      uint64_t v61 = *v7;
      uint64_t v63 = *(void *)(*v7 + 32);
      unint64_t v62 = *(void *)(*v19 + 40);
      unint64_t v208 = v11;
      LODWORD(v206) = a2;
      unint64_t v205 = v62;
      if (v63 == 1)
      {
        uint64_t v64 = *(void *)(v61 + 16);
        unint64_t v65 = *(void *)(v64 + 48);
        unint64_t v66 = *(void *)(v64 + 56);
        uint64_t v215 = v10;
        unint64_t v67 = v14;
        uint64_t v68 = v16;
        uint64_t v69 = v17;
        swift_retain();
        unint64_t v70 = v65;
        swift_retain();
        uint64_t v17 = v69;
        uint64_t v16 = v68;
        unint64_t v14 = v67;
        unint64_t v10 = v215;
      }
      else
      {
        unint64_t v66 = v62;
        unint64_t v70 = v63;
      }
      *(void *)&double v213 = v17;
      uint64_t v214 = v16;
      unint64_t v216 = v70;
      unint64_t v217 = v66;
      unsigned __int8 v204 = *(float (**)(unint64_t *))(**(void **)&v9 + 104);
      char v164 = v208;
      unint64_t v165 = v10;
      unint64_t v166 = v14;
      outlined copy of GraphicsContext.Filter.Storage(*(void **)&v9, (id)v8, v208, v10, v211, v209, v212, v14, v16, v17, v18);
      outlined copy of EnvironmentValues?(v63);
      float v182 = v204(&v216);
      float v184 = v183;
      float v186 = v185;
      float v188 = v187;
      swift_release();
      swift_release();
      if (v182 == 1.0 && v184 == 1.0 && v186 == 1.0 && v188 == 1.0)
      {
LABEL_193:
        uint64_t v202 = v18;
        uint64_t v201 = *(void *)&v213;
        uint64_t v200 = v214;
        double v40 = v9;
        uint64_t v41 = (void *)v8;
        char v42 = v164;
        uint64_t v43 = v165;
        uint64_t v44 = v211;
      }
      else
      {
        long long v192 = v207;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v193 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v194 = swift_retain();
          *unsigned int v207 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v194, v193, 1, 0);
          swift_release();
        }
        char v180 = v164;
        uint64_t v181 = v211;
        if (*(_DWORD *)(*(void *)(*v192 + 16) + 64) != 2) {
          RBColorFromLinear();
        }
        RBDrawingStateAddAlphaMultiplyFilter();
LABEL_192:
        uint64_t v202 = v18;
        uint64_t v201 = *(void *)&v213;
        uint64_t v200 = v214;
        double v40 = v9;
        uint64_t v41 = (void *)v8;
        char v42 = v180;
        uint64_t v43 = v165;
        uint64_t v44 = v181;
      }
      uint64_t v45 = v209;
      uint64_t v127 = v212;
      uint64_t v195 = v166;
      goto LABEL_203;
    case 9u:
      unint64_t v216 = *(void *)a1;
      unint64_t v217 = v8;
      unint64_t v218 = v11;
      unint64_t v219 = v10;
      unint64_t v220 = v13;
      unint64_t v221 = v12;
      unint64_t v222 = v15;
      unint64_t v223 = v14;
      uint64_t v224 = v16;
      uint64_t v225 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v71 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v72 = swift_retain();
        *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v72, v71, 1, 0);
        swift_release();
      }
      RBDrawingStateAddColorMatrixFilter();
      return;
    case 0xAu:
      if (v9 != 0.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v74 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v75 = swift_retain();
          *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v75, v74, 1, 0);
          swift_release();
        }
        uint64_t v76 = *v19;
        uint64_t v77 = 1;
        if ((v20 & 1) == 0)
        {
          if (*(_DWORD *)(*(void *)(v76 + 16) + 64) == 2) {
            uint64_t v77 = 1;
          }
          else {
            uint64_t v77 = 2;
          }
        }
        uint64_t v78 = *(void *)(v76 + 24);
        v73.n128_f64[0] = v9;
        MEMORY[0x270F5AB38](v78, v77, v73);
      }
      return;
    case 0xBu:
      if (*(float *)&v9 != 1.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v80 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v81 = swift_retain();
          *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v81, v80, 1, 0);
          swift_release();
        }
        uint64_t v82 = *v19;
        uint64_t v83 = 1;
        if ((v20 & 1) == 0)
        {
          if (*(_DWORD *)(*(void *)(v82 + 16) + 64) == 2) {
            uint64_t v83 = 1;
          }
          else {
            uint64_t v83 = 2;
          }
        }
        uint64_t v84 = *(void *)(v82 + 24);
        v79.n128_u32[0] = LODWORD(v9);
        MEMORY[0x270F5AB80](v84, v83, v79);
      }
      return;
    case 0xCu:
      if (*(float *)&v9 != 0.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v86 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v87 = swift_retain();
          *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v87, v86, 1, 0);
          swift_release();
        }
        uint64_t v88 = *v19;
        uint64_t v89 = 1;
        if ((v20 & 1) == 0)
        {
          if (*(_DWORD *)(*(void *)(v88 + 16) + 64) == 2) {
            uint64_t v89 = 1;
          }
          else {
            uint64_t v89 = 2;
          }
        }
        uint64_t v90 = *(void *)(v88 + 24);
        v85.n128_u32[0] = LODWORD(v9);
        MEMORY[0x270F5AB00](v90, v89, v85);
      }
      return;
    case 0xDu:
      if (*(float *)&v9 != 1.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v92 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v93 = swift_retain();
          *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v93, v92, 1, 0);
          swift_release();
        }
        uint64_t v94 = *v19;
        uint64_t v95 = 1;
        if ((v20 & 1) == 0)
        {
          if (*(_DWORD *)(*(void *)(v94 + 16) + 64) == 2) {
            uint64_t v95 = 1;
          }
          else {
            uint64_t v95 = 2;
          }
        }
        uint64_t v96 = *(void *)(v94 + 24);
        v91.n128_u32[0] = LODWORD(v9);
        MEMORY[0x270F5AB28](v96, v95, v91);
      }
      return;
    case 0xEu:
      if (*(float *)&v9 != 0.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v98 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v99 = swift_retain();
          *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v99, v98, 1, 0);
          swift_release();
        }
        uint64_t v100 = *v19;
        uint64_t v101 = 1;
        if ((v20 & 1) == 0)
        {
          if (*(_DWORD *)(*(void *)(v100 + 16) + 64) == 2) {
            uint64_t v101 = 1;
          }
          else {
            uint64_t v101 = 2;
          }
        }
        uint64_t v102 = *(void *)(v100 + 24);
        v97.n128_u32[0] = LODWORD(v9);
        MEMORY[0x270F5AB08](v102, v101, v97);
      }
      return;
    case 0xFu:
      if (*(float *)&v9 != 0.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v104 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v105 = swift_retain();
          *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v105, v104, 1, 0);
          swift_release();
        }
        uint64_t v106 = *v19;
        uint64_t v107 = 1;
        if ((v20 & 1) == 0)
        {
          if (*(_DWORD *)(*(void *)(v106 + 16) + 64) == 2) {
            uint64_t v107 = 1;
          }
          else {
            uint64_t v107 = 2;
          }
        }
        uint64_t v108 = *(void *)(v106 + 24);
        v103.n128_u32[0] = LODWORD(v9);
        MEMORY[0x270F5AB30](v108, v107, v103);
      }
      return;
    case 0x10u:
      if (v9 > 0.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v109 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v110 = swift_retain();
          *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v110, v109, 1, 0);
          swift_release();
        }
        RBDrawingStateAddBlurFilter();
      }
      return;
    case 0x11u:
      double v111 = *(double *)a1;
      if (v9 > 0.0)
      {
        unint64_t v216 = *(void *)(a1 + 8);
        unint64_t v217 = v11;
        unint64_t v218 = v10;
        unint64_t v219 = v13;
        unint64_t v220 = v12;
        unint64_t v221 = v15;
        unint64_t v222 = v14;
        unint64_t v223 = v16;
        uint64_t v224 = v17;
        LOBYTE(v225) = v18;
        GraphicsContext.addVariableBlurFilter(radius:mask:flags:)((uint64_t *)&v216, (2 * (a2 & 1)) | HIDWORD(v18), a3, v111, a4, v16, a6, a7);
      }
      return;
    case 0x12u:
      unint64_t v211 = *(void *)(a1 + 32);
      uint64_t v212 = v15;
      uint64_t v112 = *v7;
      uint64_t v114 = *(void *)(*v7 + 32);
      uint64_t v113 = *(void *)(*v19 + 40);
      unint64_t v208 = v11;
      uint64_t v215 = v10;
      unint64_t v210 = v14;
      uint64_t v209 = v113;
      if (v114 == 1)
      {
        uint64_t v115 = *(void *)(v112 + 16);
        unint64_t v117 = *(void *)(v115 + 48);
        unint64_t v116 = *(void *)(v115 + 56);
        unsigned int v207 = v19;
        uint64_t v118 = v16;
        uint64_t v119 = v17;
        swift_retain();
        swift_retain();
        uint64_t v17 = v119;
        uint64_t v16 = v118;
        unint64_t v14 = v210;
        unint64_t v10 = v215;
      }
      else
      {
        unint64_t v116 = v113;
        unint64_t v117 = v114;
      }
      unint64_t v216 = v117;
      unint64_t v217 = v116;
      long long v196 = *(void (**)(unint64_t *))(*(void *)v8 + 104);
      *(void *)&double v213 = v17;
      uint64_t v214 = v16;
      outlined copy of GraphicsContext.Filter.Storage(*(void **)&v9, (id)v8, v208, v10, v211, v12, v212, v14, v16, v17, v18);
      outlined copy of EnvironmentValues?(v114);
      v196(&v216);
      swift_release();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v197 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v198 = swift_retain();
        *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v198, v197, 1, 0);
        swift_release();
      }
      if (*(_DWORD *)(*(void *)(*v19 + 16) + 64) != 2) {
        RBColorFromLinear();
      }
      unint64_t v15 = v212;
      RBDrawingStateAddAlphaThresholdFilter();
      uint64_t v202 = v18;
      uint64_t v201 = *(void *)&v213;
      uint64_t v200 = v214;
      double v40 = v9;
      uint64_t v41 = (void *)v8;
      char v42 = v208;
      uint64_t v43 = v215;
      uint64_t v44 = v211;
      uint64_t v45 = v12;
LABEL_201:
      uint64_t v127 = v15;
      goto LABEL_202;
    case 0x13u:
      double v213 = *(double *)(a1 + 72);
      uint64_t v214 = v16;
      unint64_t v210 = v14;
      uint64_t v215 = v10;
      unint64_t v211 = v13;
      uint64_t v212 = v15;
      uint64_t v209 = v12;
      unint64_t v208 = v11;
      outlined copy of EitherGradient(*(uint64_t *)&v9, v8 & 1);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v121 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v122 = swift_retain();
        *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v122, v121, 1, 0);
        uint64_t isUniquelyReferenced_nonNull_native = swift_release();
      }
      double v226 = v9;
      LOBYTE(v227) = v8 & 1;
      uint64_t v123 = *(void *)(*v19 + 32);
      uint64_t v124 = *(void *)(*v19 + 16);
      unint64_t v125 = v123;
      unint64_t v126 = *(void *)(*v19 + 40);
      if (v123 == 1)
      {
        unint64_t v125 = *(void *)(v124 + 48);
        unint64_t v126 = *(void *)(v124 + 56);
        swift_retain();
        uint64_t isUniquelyReferenced_nonNull_native = swift_retain();
      }
      unsigned int v207 = (uint64_t *)&v203;
      unint64_t v216 = v125;
      unint64_t v217 = v126;
      MEMORY[0x270FA5388](isUniquelyReferenced_nonNull_native);
      uint64_t v202 = (uint64_t)v19;
      outlined copy of EnvironmentValues?(v123);
      withGradient(_:in:colorSpace:do:)((uint64_t)&v226, (uint64_t *)&v216);
      swift_release();
      swift_release();
      double v40 = v9;
      uint64_t v41 = (void *)v8;
      char v42 = v208;
      uint64_t v43 = v215;
      uint64_t v44 = v211;
      uint64_t v45 = v209;
LABEL_126:
      uint64_t v127 = v212;
LABEL_202:
      uint64_t v195 = v210;
LABEL_203:
      outlined consume of GraphicsContext.Filter.Storage(*(void **)&v40, v41, v42, v43, v44, v45, v127, v195, v200, v201, v202);
      break;
    case 0x14u:
      if (*(float *)&v11 != 0.0)
      {
        unsigned __int32 v129 = HIDWORD(*(void *)a1);
        unsigned __int32 v128 = *(void *)a1;
        unsigned __int32 v130 = *(void *)(a1 + 8);
        unsigned __int32 v131 = HIDWORD(*(void *)(a1 + 8));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v138 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v139 = swift_retain();
          *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v139, v138, 1, 0);
          swift_release();
        }
        uint64_t v140 = *(void *)(*v19 + 24);
        if (*(_DWORD *)(*(void *)(*v19 + 16) + 64) != 2)
        {
          RBColorFromLinear();
          unsigned __int32 v128 = v132.n128_u32[0];
          unsigned __int32 v129 = v133.n128_u32[0];
          unsigned __int32 v130 = v134.n128_u32[0];
          unsigned __int32 v131 = v135.n128_u32[0];
        }
        uint64_t v141 = 1;
        if ((v20 & 1) == 0)
        {
          if (*(_DWORD *)(*(void *)(*v19 + 16) + 64) == 2) {
            uint64_t v141 = 1;
          }
          else {
            uint64_t v141 = 2;
          }
        }
        v137.n128_u32[0] = HIDWORD(v11);
        v132.n128_u32[0] = v11;
        v133.n128_u32[0] = v128;
        v134.n128_u32[0] = v129;
        v135.n128_u32[0] = v130;
        v136.n128_u32[0] = v131;
        MEMORY[0x270F5AB18](v140, v141, v132, v133, v134, v135, v136, v137);
      }
      break;
    case 0x15u:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v142 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v143 = swift_retain();
        *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v143, v142, 1, 0);
        swift_release();
      }
      unint64_t v216 = *(void *)&v9;
      unint64_t v217 = v8;
      RBDrawingStateAddLuminanceCurveFilter();
      break;
    case 0x16u:
      LODWORD(v206) = a2;
      uint64_t v144 = HIDWORD(*(void *)&v9);
      unint64_t v145 = HIDWORD(v8);
      uint64_t v214 = HIDWORD(v11);
      uint64_t v215 = v10;
      *(void *)&double v213 = HIDWORD(v10);
      unint64_t v211 = v13;
      unint64_t v146 = HIDWORD(v13);
      uint64_t v212 = HIDWORD(v15);
      unint64_t v210 = v14;
      uint64_t v209 = HIDWORD(v14);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        unsigned __int8 v204 = (float (*)(unint64_t *))RBDrawingStateInit();
        unsigned int v207 = (uint64_t *)HIDWORD(*(void *)&v9);
        type metadata accessor for GraphicsContext.Storage();
        unint64_t v205 = HIDWORD(v12);
        swift_allocObject();
        uint64_t v147 = swift_retain();
        LODWORD(v145) = HIDWORD(v8);
        LODWORD(v144) = HIDWORD(v9);
        *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v147, (uint64_t)v204, 1, 0);
        swift_release();
      }
      unint64_t v216 = __PAIR64__(v144, LODWORD(v9));
      unint64_t v217 = __PAIR64__(v145, v8);
      unint64_t v218 = __PAIR64__(v214, v11);
      unint64_t v219 = __PAIR64__(LODWORD(v213), v215);
      unint64_t v220 = __PAIR64__(v146, v211);
      unint64_t v221 = v12;
      unint64_t v222 = __PAIR64__(v212, v15);
      unint64_t v223 = __PAIR64__(v209, v210);
      RBDrawingStateAddRGBACurvesFilter();
      break;
    case 0x17u:
      uint64_t v209 = *(void *)(a1 + 80);
      unint64_t v211 = v13;
      id v206 = (id)v8;
      uint64_t v212 = v15;
      unsigned int v207 = v7;
      uint64_t v148 = *v7;
      uint64_t v149 = *(void *)(*v7 + 32);
      unint64_t v150 = *(void *)(*v19 + 40);
      uint64_t v215 = v10;
      unint64_t v210 = v14;
      if (v149 == 1)
      {
        uint64_t v151 = *(void *)(v148 + 16);
        uint64_t v152 = *(void *)(v151 + 48);
        unint64_t v153 = *(void *)(v151 + 56);
        uint64_t v154 = v16;
        uint64_t v155 = v17;
        swift_retain();
        uint64_t v156 = v152;
        swift_retain();
        uint64_t v17 = v155;
        uint64_t v16 = v154;
        unint64_t v14 = v210;
        unint64_t v10 = v215;
      }
      else
      {
        unint64_t v153 = v150;
        uint64_t v156 = v149;
      }
      *(void *)&double v213 = v17;
      uint64_t v214 = v16;
      HIDWORD(v219) = HIDWORD(v10);
      LODWORD(v220) = v211;
      double v226 = *(double *)&v156;
      unint64_t v227 = v153;
      outlined copy of GraphicsContext.Filter.Storage(*(void **)&v9, v206, v11, v10, v211, v12, v212, v14, v16, v17, v209);
      outlined copy of EnvironmentValues?(v149);
      id v199 = Shader.makeRBShader(in:)((uint64_t *)&v226);
      swift_release();
      swift_release();
      unint64_t v216 = (unint64_t)v199;
      unint64_t v217 = v12;
      unint64_t v218 = v212;
      LODWORD(v219) = v211;
      GraphicsContext.addShaderFilter(_:size:)((id *)&v216);
      outlined consume of GraphicsContext.Filter.Storage(*(void **)&v9, v206, v11, v215, v211, v12, v212, v210, v214, *(uint64_t *)&v213, v209);

      break;
    case 0x18u:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v157 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v158 = swift_retain();
        *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v158, v157, 1, 0);
        swift_release();
      }
      uint64_t v159 = *v19;
      uint64_t v160 = 1;
      if ((v20 & 1) == 0)
      {
        if (*(_DWORD *)(*(void *)(v159 + 16) + 64) == 2) {
          uint64_t v160 = 1;
        }
        else {
          uint64_t v160 = 2;
        }
      }
      uint64_t v161 = *(void *)(v159 + 24);
      MEMORY[0x270F5AB48](v161, v160);
      break;
    default:
      unint64_t v216 = *(void *)a1;
      unint64_t v217 = v8;
      unint64_t v218 = v11;
      unint64_t v219 = v10;
      unint64_t v220 = v13;
      unint64_t v221 = v12;
      unint64_t v222 = v15;
      unint64_t v223 = v14;
      uint64_t v224 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v21 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v22 = swift_retain();
        *float64x2_t v19 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v22, v21, 1, 0);
        swift_release();
      }
      RBDrawingState.addProjectionTransform(_:)();
      break;
  }
}

uint64_t GraphicsContext.draw(contentsOf:)()
{
  return RBDrawingStateDrawDisplayList();
}

uint64_t GraphicsContext.drawLayer(content:)(void (*a1)(uint64_t *))
{
  return GraphicsContext.drawLayer(flags:content:)(0, a1);
}

uint64_t GraphicsContext.draw(displayList:)()
{
  return RBDrawingStateDrawDisplayList2();
}

void GraphicsContext.setTransition(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = *(unsigned int *)(a1 + 8) | ((unint64_t)(*(unsigned __int16 *)(a1 + 12) | (*(unsigned __int8 *)(a1 + 14) << 16)) << 32);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *uint64_t v2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v6, v5, 1, 0);
    swift_release();
  }
  if (BYTE6(v4) == 2)
  {
    id v10 = objc_msgSend(self, sel_defaultTransition);
    RBDrawingStateSetTransition();
  }
  else
  {
    id v10 = ContentTransition.rbTransition.getter();
    RBDrawingStateSetTransition();
    if ((v4 & 0xFF0000000000) == 0 && (v3 & 0xC000000000) == 0x4000000000 && (v3 & 0x100000000) != 0)
    {
      outlined copy of ContentTransition.Storage(v3, v4, 0);
      Class isa = Float._bridgeToObjectiveC()().super.super.isa;
      RBDrawingStateSetAttribute();
    }
  }
}

uint64_t GraphicsContext.drawLayer(flags:content:)(char a1, void (*a2)(uint64_t *))
{
  uint64_t v4 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  uint64_t v5 = swift_retain();
  uint64_t v7 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v5, v4, 0, (a1 & 0x20) == 0);
  swift_retain();
  a2(&v7);
  swift_release();
  RBDrawingStateDrawLayer();
  return swift_release();
}

uint64_t GraphicsContext.clipToLayer(opacity:options:content:)(uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *uint64_t v3 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v6, v5, 1, 0);
    swift_release();
  }
  uint64_t v7 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  uint64_t v8 = swift_retain();
  uint64_t v10 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v8, v7, 0, 1);
  swift_retain();
  a2(&v10);
  swift_release();
  RBDrawingStateClipLayer();
  return swift_release();
}

Swift::Void __swiftcall GraphicsContext.concatenate(_:)(CGAffineTransform *a1)
{
  uint64_t v2 = v1;
  CGFloat a = a1->a;
  CGFloat b = a1->b;
  CGFloat c = a1->c;
  CGFloat d = a1->d;
  tdouble x = a1->tx;
  tdouble y = a1->ty;
  v11.CGFloat a = a1->a;
  v11.CGFloat b = b;
  v11.CGFloat c = c;
  v11.CGFloat d = d;
  v11.tdouble x = tx;
  v11.tdouble y = ty;
  if (!CGAffineTransformIsIdentity(&v11))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v10 = swift_retain();
      *uint64_t v2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v10, v9, 1, 0);
      swift_release();
    }
    v11.CGFloat a = a;
    v11.CGFloat b = b;
    v11.CGFloat c = c;
    v11.CGFloat d = d;
    v11.tdouble x = tx;
    v11.tdouble y = ty;
    RBDrawingStateConcatCTM();
  }
}

__n128 static GraphicsContext.Filter.projectionTransform(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v5;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 64) = v2;
  return result;
}

uint64_t GraphicsContext.clipBoundingRect.getter()
{
  return RBDrawingStateGetClipBoundingBox();
}

double static GraphicsContext.Shading.backdrop.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 57) = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void GraphicsContext._addAnimation(_:id:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *uint64_t v2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v5, v4, 1, 0);
    swift_release();
  }
  if (a1)
  {
    id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63858]), sel_init);
    (*(void (**)(void *__return_ptr))(*(void *)a1 + 96))(v15);
    uint64_t v6 = v15[0];
    uint64_t v7 = v15[1];
    uint64_t v8 = v15[2];
    uint64_t v9 = v15[3];
    uint64_t v10 = v15[4];
    char v11 = v16;
    Animation.Function.apply(to:)(v14, v12, v13);
    outlined consume of Animation.Function(v6, v7, v8, v9, v10, v11);
  }
  else
  {
    id v14 = 0;
  }
  RBDrawingStateAddAnimationStyle();
}

uint64_t GraphicsContext.stroke(_:with:lineWidth:)(uint64_t a1, uint64_t a2, double *a3, double a4)
{
  uint64_t v4 = *(void *)(a2 + 64);
  char v5 = *(unsigned char *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 16);
  v14[0] = *(_OWORD *)a2;
  v14[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  v14[2] = *(_OWORD *)(a2 + 32);
  void v14[3] = v7;
  uint64_t v15 = v4;
  char v16 = v5;
  double v9 = a4;
  long long v10 = xmmword_2461BDB90;
  uint64_t v11 = MEMORY[0x263F8EE78];
  uint64_t v12 = 0;
  char v13 = 1;
  return GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v14, (uint64_t)&v9, a3);
}

uint64_t GraphicsContext.init(displayList:environment:)(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  type metadata accessor for GraphicsContext.Storage();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 32) = xmmword_24619B520;
  *(void *)(v5 + 48) = 1065353216;
  *(void *)(v5 + 56) = 0x7FF8000000000000;
  v9[0] = v3;
  v9[1] = v4;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  id v6 = a1;
  *(void *)(v5 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v6, v9);
  uint64_t State = RBDisplayListGetState();

  *(void *)(v5 + 24) = State;
  *(unsigned char *)(v5 + 64) = 0;
  return v5;
}

uint64_t static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t *a2, uint64_t a3, char a4, void (*a5)(uint64_t *))
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  int v29 = 0;
  float v30 = 1.0;
  uint64_t v11 = MEMORY[0x24C5269B0](a1, &v30, &v29);
  if (v11)
  {
    uint64_t v12 = v11;
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 32) = xmmword_24619B520;
    *(void *)(v13 + 48) = 1065353216;
    *(void *)(v13 + 56) = 0x7FF8000000000000;
    id v14 = (id)RBDrawingStateGetDisplayList();
    uint64_t v31 = v10;
    uint64_t v32 = v9;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(void *)(v13 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v14, &v31);
    *(void *)(v13 + 24) = v12;
    *(unsigned char *)(v13 + 64) = 0;
    uint64_t v31 = v13;
    float v15 = v30;
    if (v30 == 1.0)
    {
      int v16 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v19 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v20 = swift_retain();
        uint64_t v21 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v20, v19, 1, 0);
        uint64_t v31 = v21;
        swift_release();
        uint64_t v13 = v21;
      }
      *(float *)(v13 + 48) = v15;
      int v16 = *(_DWORD *)(v13 + 52);
    }
    int v22 = v29;
    if (v16 != v29)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v23 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v24 = swift_retain();
        uint64_t v31 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v24, v23, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v31 + 52) = v22;
    }
    a5(&v31);
  }
  else
  {
    id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
    objc_msgSend(v17, sel_setProfile_, 1);
    objc_msgSend(v17, sel_setDefaultColorSpace_, 1);
    ClipBoundingBodouble x = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v17, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if (a4)
    {
      if (v9)
      {
        swift_retain_n();
        swift_retain_n();
        double v18 = specialized PropertyList.Tracker.value<A>(_:for:)(v10);
        swift_release_n();
      }
      else
      {
        uint64_t v25 = swift_retain_n();
        double v18 = specialized closure #1 in PropertyList.subscript.getter(v25);
      }
      swift_release_n();
    }
    else
    {
      double v18 = *(double *)&a3;
    }
    objc_msgSend(v17, sel_setDeviceScale_, v18);
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 32) = xmmword_24619B520;
    *(void *)(v26 + 48) = 1065353216;
    *(void *)(v26 + 56) = 0x7FF8000000000000;
    uint64_t v31 = v10;
    uint64_t v32 = v9;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    id v27 = v17;
    swift_retain();
    *(void *)(v26 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v27, &v31);
    *(void *)(v26 + 24) = RBDisplayListGetState();
    *(unsigned char *)(v26 + 64) = 0;
    uint64_t v31 = v26;
    a5(&v31);
    objc_msgSend(v27, sel_renderInContext_options_, a1, 0);
  }
  return swift_release();
}

void GraphicsContext.withCGContext(content:)(void (*a1)(CGContext *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (CGContext *)(id)RBDrawingStateBeginCGContext();
  id v6 = v5;
  CGBlendMode v7 = *(_DWORD *)(a3 + 52);
  if (v7) {
    CGContextSetBlendMode(v5, v7);
  }
  a1(v6);
  RBDrawingStateEndCGContext();
}

uint64_t GraphicsContext.drawingState.getter()
{
  uint64_t v1 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v2 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v3 = swift_retain();
    *(void *)uint64_t v1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v3, v2, 1, 0);
    swift_release();
  }
  return *(void *)(*(void *)v1 + 24);
}

uint64_t static GraphicsContext.BlendMode.normal.getter()
{
  return 0;
}

uint64_t specialized ShapeStyle.isMultiLevel(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(v7, 0, sizeof(v7));
  char v8 = 5;
  uint64_t v9 = 0;
  unsigned __int8 v10 = 5;
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0;
  char v16 = 1;
  __int16 v17 = 0;
  uint64_t v3 = *(void (**)(void *))(*(void *)a3 + 80);
  swift_retain();
  swift_retain();
  v3(v7);
  uint64_t v4 = v9;
  int v5 = v10;
  outlined copy of _ShapeStyle_Shape.Result(v9, v10);
  outlined consume of _ShapeStyle_Shape.Result(v4, v5);
  swift_release();
  swift_release();
  swift_release();
  if (v5 == 4)
  {
    if (v4) {
      return 1;
    }
  }
  else
  {
    outlined consume of _ShapeStyle_Shape.Result(v4, v5);
  }
  return 0;
}

void GraphicsImage.withRBImage(image:color:)(void (*a1)(uint64_t), __n128 a2, __n128 a3, __n128 a4, __n128 a5, uint64_t a6, void (*a7)(__n128, __n128, __n128, __n128))
{
  CGImageRef value = *(_DWORD **)v7;
  unsigned int v11 = *(unsigned __int8 *)(v7 + 8);
  a4.n128_u64[0] = *(void *)(v7 + 16);
  a5.n128_u64[0] = *(void *)(v7 + 24);
  if (v11 > 3)
  {
    if (v11 == 4)
    {
      a2.n128_u32[0] = value[4];
      a3.n128_u32[0] = value[5];
      a4.n128_u32[0] = value[6];
      a5.n128_u32[0] = value[7];
      if ((*(unsigned char *)(v7 + 60) & 1) == 0)
      {
        a5.n128_f32[0] = a5.n128_f32[0] * COERCE_FLOAT(HIDWORD(*(void *)(v7 + 52)));
        a4.n128_u32[0] = *(void *)(v7 + 52);
        a3.n128_u32[0] = HIDWORD(*(void *)(v7 + 44));
        a2.n128_u32[0] = *(void *)(v7 + 44);
      }
      goto LABEL_22;
    }
    if (v11 == 255)
    {
LABEL_15:
      a2.n128_u64[0] = 0;
      a3.n128_u64[0] = 0;
      a4.n128_u64[0] = 0;
      a5.n128_u64[0] = 0;
LABEL_22:
      a7(a2, a3, a4, a5);
      return;
    }
  }
  else
  {
    if (!*(unsigned char *)(v7 + 8))
    {
      outlined copy of GraphicsImage.Contents?(*(id *)v7, 0);
      goto LABEL_17;
    }
    if (v11 == 1)
    {
      outlined copy of GraphicsImage.Contents?(*(id *)v7, 1);
      uint64_t IOSurface = RBImageMakeIOSurface();
      a1(IOSurface);
      outlined consume of GraphicsImage.Contents?(value, 1);
      return;
    }
  }
  double v13 = 0.0;
  double v14 = 0.0;
  if (a4.n128_f64[0] != 0.0)
  {
    double v15 = *(double *)(v7 + 32);
    switch(*(unsigned char *)(v7 + 40))
    {
      case 4:
      case 5:
      case 6:
      case 7:
        double v15 = *(double *)(v7 + 24);
        a5.n128_u64[0] = *(void *)(v7 + 32);
        break;
      default:
        break;
    }
    double v16 = 1.0 / a4.n128_f64[0];
    double v13 = v16 * a5.n128_f64[0];
    double v14 = v16 * v15;
  }
  v17.CGImageRef value = GraphicsImage.render(at:prefersMask:)((CGSize)__PAIR128__(*(unint64_t *)&v14, *(unint64_t *)&v13), 0).value;
  if (!v17.value) {
    goto LABEL_15;
  }
  CGImageRef value = v17.value;
LABEL_17:
  uint64_t v19 = value;
  uint64_t CGImage = RBImageMakeCGImage();
  a1(CGImage);
}

uint64_t one-time initialization function for _textDrawingContext()
{
  type metadata accessor for TextDrawingContext();
  uint64_t v0 = swift_allocObject();
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81668]), sel_init);
  objc_msgSend(v1, sel_setWrapsForTruncationMode_, 1);
  objc_msgSend(v1, sel_setWantsBaselineOffset_, 1);
  objc_msgSend(v1, sel_setWantsScaledLineHeight_, 1);
  objc_msgSend(v1, sel_setWantsScaledBaselineOffset_, 1);
  objc_msgSend(v1, sel_setCachesLayout_, 1);
  _sSo6CGRectVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<NSStringDrawingContext>, (uint64_t (*)(uint64_t))type metadata accessor for NSStringDrawingContext, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = v1;
  *(void *)(v0 + 16) = result;
  static GraphicsContext.Storage.Shared._textDrawingContext = v0;
  return result;
}

void *GraphicsContext.Storage.Shared.resolvedForeground(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  if (*a1 == 1)
  {
    outlined init with take of GraphicsContext.ResolvedShading?(v2 + 80, (uint64_t)v30, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v30, (uint64_t)v36, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    if (_s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg((uint64_t)v36) != 1)
    {
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v36, a2);
      outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v30, (uint64_t)v13, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
      return outlined retain of GraphicsContext.ResolvedShading(v13, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of GraphicsContext.ResolvedShading);
    }
    uint64_t v5 = *(void *)(v2 + 48);
    uint64_t v6 = *(void *)(v2 + 56);
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
  }
  v19[0] = 0;
  v19[1] = 0;
  void v19[2] = 1;
  char v20 = 1;
  uint64_t v21 = 0;
  char v22 = 5;
  uint64_t v23 = v5;
  uint64_t v24 = v6;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  char v28 = 1;
  __int16 v29 = 0;
  outlined copy of EnvironmentValues?(v4);
  specialized ForegroundStyle._apply(to:)((uint64_t)v19);
  uint64_t v7 = v21;
  char v8 = v22;
  if (v22 == 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
  }
  v36[0] = v9;
  LOBYTE(v13[0]) = 0;
  _ShapeStyle_Pack.subscript.getter((unsigned __int8 *)v13, 0, (uint64_t)v30);
  swift_bridgeObjectRelease();
  v13[0] = v30[0];
  v13[1] = v30[1];
  uint64_t v13[2] = v30[2];
  void v13[3] = v30[3];
  void v13[4] = v30[4];
  char v14 = v31;
  int v15 = v32;
  uint64_t v16 = v33;
  char v17 = v34;
  uint64_t v18 = v35;
  GraphicsContext.ResolvedShading.init(_:)((uint64_t)v13, (uint64_t)v36);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v36, (uint64_t)v30);
  if (v4 == 1)
  {
    outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v30, (uint64_t)v12);
    _ViewInputs.base.modify(v12, v10);
    outlined init with take of GraphicsContext.ResolvedShading?(v2 + 80, (uint64_t)v13, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v12, v2 + 80, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    outlined retain of GraphicsContext.ResolvedShading(v30, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of GraphicsContext.ResolvedShading);
    outlined retain of GraphicsContext.ResolvedShading(v13, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading?);
  }
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v30, a2);
  outlined consume of _ShapeStyle_Shape.Result(v7, v8);
  swift_release();
  swift_release();
  return (void *)swift_release();
}

uint64_t GraphicsContext.Storage.deinit()
{
  if (*(unsigned char *)(v0 + 64) == 1) {
    RBDrawingStateDestroy();
  }
  swift_release();
  outlined consume of EnvironmentValues?(*(void *)(v0 + 32));
  return v0;
}

uint64_t GraphicsContext.init(drawingState:environment:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  type metadata accessor for GraphicsContext.Storage();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 32) = xmmword_24619B520;
  *(void *)(v5 + 48) = 1065353216;
  *(void *)(v5 + 56) = 0x7FF8000000000000;
  id v6 = (id)RBDrawingStateGetDisplayList();
  v8[0] = v3;
  v8[1] = v4;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  *(void *)(v5 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v6, v8);
  *(void *)(v5 + 24) = a1;
  *(unsigned char *)(v5 + 64) = 0;
  return v5;
}

uint64_t GraphicsContext.environment.getter@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = v3;
  uint64_t v5 = a1[5];
  if (v3 == 1)
  {
    uint64_t v6 = a1[2];
    uint64_t v4 = *(void *)(v6 + 48);
    uint64_t v5 = *(void *)(v6 + 56);
    swift_retain();
    swift_retain();
  }
  *a2 = v4;
  a2[1] = v5;

  return outlined copy of EnvironmentValues?(v3);
}

id GraphicsContext.displayList.getter(uint64_t a1)
{
  return *(id *)(*(void *)(a1 + 16) + 16);
}

uint64_t static GraphicsContext.BlendMode.multiply.getter()
{
  return 1;
}

uint64_t static GraphicsContext.BlendMode.screen.getter()
{
  return 2;
}

uint64_t static GraphicsContext.BlendMode.overlay.getter()
{
  return 3;
}

uint64_t static GraphicsContext.BlendMode.darken.getter()
{
  return 4;
}

uint64_t static GraphicsContext.BlendMode.lighten.getter()
{
  return 5;
}

uint64_t static GraphicsContext.BlendMode.colorDodge.getter()
{
  return 6;
}

uint64_t static GraphicsContext.BlendMode.colorBurn.getter()
{
  return 7;
}

uint64_t static GraphicsContext.BlendMode.softLight.getter()
{
  return 8;
}

uint64_t static GraphicsContext.BlendMode.hardLight.getter()
{
  return 9;
}

uint64_t static GraphicsContext.BlendMode.difference.getter()
{
  return 10;
}

uint64_t static GraphicsContext.BlendMode.exclusion.getter()
{
  return 11;
}

uint64_t static GraphicsContext.BlendMode.hue.getter()
{
  return 12;
}

uint64_t static GraphicsContext.BlendMode.saturation.getter()
{
  return 13;
}

uint64_t static GraphicsContext.BlendMode.color.getter()
{
  return 14;
}

uint64_t static GraphicsContext.BlendMode.luminosity.getter()
{
  return 15;
}

uint64_t static GraphicsContext.BlendMode.clear.getter()
{
  return 16;
}

uint64_t static GraphicsContext.BlendMode.copy.getter()
{
  return 17;
}

uint64_t static GraphicsContext.BlendMode.sourceIn.getter()
{
  return 18;
}

uint64_t static GraphicsContext.BlendMode.sourceOut.getter()
{
  return 19;
}

uint64_t static GraphicsContext.BlendMode.sourceAtop.getter()
{
  return 20;
}

uint64_t static GraphicsContext.BlendMode.destinationOver.getter()
{
  return 21;
}

uint64_t static GraphicsContext.BlendMode.destinationIn.getter()
{
  return 22;
}

uint64_t static GraphicsContext.BlendMode.destinationOut.getter()
{
  return 23;
}

uint64_t static GraphicsContext.BlendMode.destinationAtop.getter()
{
  return 24;
}

uint64_t static GraphicsContext.BlendMode.xor.getter()
{
  return 25;
}

uint64_t static GraphicsContext.BlendMode.plusDarker.getter()
{
  return 26;
}

uint64_t static GraphicsContext.BlendMode.plusLighter.getter()
{
  return 27;
}

uint64_t (*GraphicsContext.opacity.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  *(double *)a1 = *(float *)(*(void *)v1 + 48);
  return GraphicsContext.opacity.modify;
}

uint64_t GraphicsContext.opacity.modify(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  float v2 = *(double *)a1;
  uint64_t result = *v1;
  if (*(float *)(*v1 + 48) != v2)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t v4 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v5 = swift_retain();
      *uint64_t v1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v5, v4, 1, 0);
      uint64_t result = swift_release();
    }
    *(float *)(*v1 + 48) = v2;
  }
  return result;
}

uint64_t (*GraphicsContext.blendMode.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)v1 + 52);
  return GraphicsContext.blendMode.modify;
}

uint64_t GraphicsContext.blendMode.modify(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)a1;
  int v2 = *(_DWORD *)(a1 + 8);
  uint64_t result = **(void **)a1;
  if (*(_DWORD *)(result + 52) != v2)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t v4 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v5 = swift_retain();
      *uint64_t v1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v5, v4, 1, 0);
      uint64_t result = swift_release();
    }
    *(_DWORD *)(*v1 + 52) = v2;
  }
  return result;
}

void static GraphicsContext._ShapeRenderingMode.default.getter(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
}

void static GraphicsContext._ShapeRenderingMode.innerDistance(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(_DWORD *)a1 = 2;
  *(double *)(a1 + 8) = a2;
}

void static GraphicsContext._ShapeRenderingMode.outerDistance(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(_DWORD *)a1 = 3;
  *(double *)(a1 + 8) = a2;
}

void GraphicsContext._ShapeRenderingMode.hash(into:)()
{
  Swift::UInt64 v1 = *(void *)(v0 + 8);
  Hasher._combine(_:)(*(_DWORD *)v0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
}

BOOL static GraphicsContext._ShapeRenderingMode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
}

Swift::Int GraphicsContext._ShapeRenderingMode.hashValue.getter()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v2;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance GraphicsContext._ShapeRenderingMode()
{
  Swift::UInt64 v1 = *(void *)(v0 + 8);
  Hasher._combine(_:)(*(_DWORD *)v0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GraphicsContext._ShapeRenderingMode()
{
  Hasher.init(_seed:)();
  Swift::UInt64 v1 = *(void *)(v0 + 8);
  Hasher._combine(_:)(*(_DWORD *)v0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GraphicsContext._ShapeRenderingMode(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
}

uint64_t GraphicsContext._shapeRenderingMode.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  double v2 = fabs(*(double *)(result + 56));
  uint64_t v3 = *(void *)(result + 56);
  BOOL v4 = (~v3 & 0x7FF0000000000000) != 0;
  if ((v3 & 0xFFFFFFFFFFFFFLL) == 0) {
    BOOL v4 = 1;
  }
  if (v3 >= 0) {
    int v5 = 2;
  }
  else {
    int v5 = 3;
  }
  if (!v4) {
    int v5 = 0;
  }
  double v6 = 0.0;
  if (v4) {
    double v6 = v2;
  }
  *(_DWORD *)a2 = v5;
  *(double *)(a2 + 8) = v6;
  return result;
}

uint64_t GraphicsContext._shapeRenderingMode.setter(uint64_t a1)
{
  double v2 = v1;
  double v3 = *(double *)(a1 + 8);
  if (*(_DWORD *)a1 == 2)
  {
    if (v3 > 0.0) {
      double v4 = *(double *)(a1 + 8);
    }
    else {
      double v4 = 0.0;
    }
  }
  else
  {
    if (*(_DWORD *)a1 != 3)
    {
      double v4 = NAN;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    if (v3 <= 0.0) {
      double v3 = 0.0;
    }
    double v4 = -v3;
  }
  uint64_t result = *v1;
  if (*(double *)(*v1 + 56) == v4) {
    return result;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
LABEL_11:
    uint64_t v6 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v7 = swift_retain();
    *double v2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v7, v6, 1, 0);
    uint64_t result = swift_release();
  }
LABEL_12:
  *(double *)(*v2 + 56) = v4;
  return result;
}

uint64_t (*GraphicsContext._shapeRenderingMode.modify(uint64_t a1))(int *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  double v2 = fabs(*(double *)(*(void *)v1 + 56));
  uint64_t v3 = *(void *)(*(void *)v1 + 56);
  BOOL v4 = (~v3 & 0x7FF0000000000000) != 0;
  if ((v3 & 0xFFFFFFFFFFFFFLL) == 0) {
    BOOL v4 = 1;
  }
  if (v3 >= 0) {
    int v5 = 2;
  }
  else {
    int v5 = 3;
  }
  if (!v4) {
    int v5 = 0;
  }
  double v6 = 0.0;
  if (v4) {
    double v6 = v2;
  }
  *(_DWORD *)a1 = v5;
  *(double *)(a1 + 8) = v6;
  return GraphicsContext._shapeRenderingMode.modify;
}

uint64_t GraphicsContext._shapeRenderingMode.modify(int *a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = *((void *)a1 + 1);
    int v4 = *a1;
    uint64_t v5 = v2;
    a1 = &v4;
  }
  return GraphicsContext._shapeRenderingMode.setter((uint64_t)a1);
}

uint64_t (*GraphicsContext.identifier.modify(uint64_t a1))(uint64_t **a1)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = RBDrawingStateGetIdentifier();
  return GraphicsContext.identifier.modify;
}

uint64_t GraphicsContext.identifier.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v2 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v3 = swift_retain();
    *uint64_t v1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v3, v2, 1, 0);
    swift_release();
  }

  return RBDrawingStateSetIdentifier();
}

uint64_t GraphicsContext.namespace.getter()
{
  return UUID.init(uuid:)();
}

uint64_t GraphicsContext.setIdentifier(_:in:)()
{
  uint64_t v1 = v0;
  UUID.uuid.getter();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v2 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v3 = swift_retain();
    *uint64_t v1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v3, v2, 1, 0);
    swift_release();
  }

  return RBDrawingStateSetIdentifier2();
}

void GraphicsContext.addAnimation(_:id:)(uint64_t a1)
{
  UUID.uuid.getter();

  GraphicsContext._addAnimation(_:id:)(a1);
}

uint64_t key path getter for GraphicsContext.environment : GraphicsContext@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(*(void *)a1 + 40);
  if (v3 == 1)
  {
    uint64_t v6 = *(void *)(*(void *)a1 + 16);
    uint64_t v4 = *(void *)(v6 + 48);
    uint64_t v5 = *(void *)(v6 + 56);
    swift_retain();
    swift_retain();
  }
  *a2 = v4;
  a2[1] = v5;

  return outlined copy of EnvironmentValues?(v3);
}

uint64_t key path setter for GraphicsContext.environment : GraphicsContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 32);
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 40) = v2;
  swift_retain();
  swift_retain();

  return outlined consume of EnvironmentValues?(v5);
}

uint64_t GraphicsContext.environment.setter(_OWORD *a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(_OWORD *)(*(void *)v1 + 32) = *a1;
  return outlined consume of EnvironmentValues?(v2);
}

uint64_t (*GraphicsContext.environment.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = (uint64_t)v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 32);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v3 + 40);
  if (v4 == 1)
  {
    uint64_t v7 = *(void *)(v3 + 16);
    uint64_t v5 = *(void *)(v7 + 48);
    uint64_t v6 = *(void *)(v7 + 56);
    swift_retain();
    swift_retain();
  }
  *a1 = v5;
  a1[1] = v6;
  outlined copy of EnvironmentValues?(v4);
  return GraphicsContext.environment.modify;
}

uint64_t GraphicsContext.environment.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = **(void **)(a1 + 16);
  uint64_t v4 = *(void *)(v3 + 32);
  *(void *)(v3 + 32) = *(void *)a1;
  *(void *)(v3 + 40) = v2;
  if (a2)
  {
    swift_retain();
    swift_retain();
    outlined consume of EnvironmentValues?(v4);
    swift_release();
    return swift_release();
  }
  else
  {
    return outlined consume of EnvironmentValues?(v4);
  }
}

void (*GraphicsContext.transform.modify(void *a1))(_OWORD **a1, char a2)
{
  uint64_t v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  RBDrawingStateGetCTM();
  *((_OWORD *)v3 + 6) = v5;
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = v7;
  return GraphicsContext.transform.modify;
}

void GraphicsContext.transform.modify(_OWORD **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2) {
    uint64_t v3 = *a1;
  }
  else {
    uint64_t v3 = *a1 + 3;
  }
  long long v4 = v2[7];
  *uint64_t v3 = v2[6];
  v3[1] = v4;
  v3[2] = v2[8];
  GraphicsContext.transform.setter();

  free(v2);
}

void GraphicsContext.scaleBy(x:y:)(double a1, double a2)
{
  if (a1 != 1.0 || a2 != 1.0)
  {
    long long v4 = v2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v6 = swift_retain();
      *long long v4 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v6, v5, 1, 0);
      swift_release();
    }
    RBDrawingStateScaleCTM();
  }
}

uint64_t GraphicsContext.clip(to:opacity:style:options:)(uint64_t a1, __int16 a2, char a3, double a4)
{
  uint64_t v5 = a2 & 0x101;
  long long v6 = 0u;
  long long v7 = 0u;
  char v8 = 0;
  return GraphicsContext.clip(to:opacity:style:options:)(a1, (uint64_t)&v5, a3, a4);
}

uint64_t static GraphicsContext.Filter.shadow(color:radius:x:y:blendMode:options:)@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  *(void *)a4 = a1;
  *(double *)(a4 + 8) = a5;
  *(double *)(a4 + 16) = a6;
  *(double *)(a4 + 24) = a7;
  *(void *)(a4 + 32) = a2 | (unint64_t)(a3 << 32);
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(void *)(a4 + 72) = 0;
  *(void *)(a4 + 80) = 402653184;
  return swift_retain();
}

uint64_t static GraphicsContext.Filter.pathProjection(startPoint:endPoint:path:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6 = *(unsigned __int8 *)(a1 + 32);
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  long long v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 48) = v7;
  *(void *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 72) = xmmword_2461DCF30;
  outlined init with take of Path.Storage(a1, (uint64_t)v9);
  return outlined retain of Path.Storage((uint64_t)v9);
}

uint64_t static GraphicsContext.Filter.colorMultiply(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 805306368;
  return swift_retain();
}

uint64_t static GraphicsContext.Filter.alphaMultiply(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0x40000000;
  return swift_retain();
}

__n128 static GraphicsContext.Filter.colorMatrix(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  long long v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v3;
  __n128 result = *(__n128 *)(a1 + 64);
  *(__n128 *)(a2 + 64) = result;
  *(void *)(a2 + 80) = 1207959552;
  return result;
}

__n128 static GraphicsContext.Filter.colorMatrix(_:isPremultiplied:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a3 + 48) = v4;
  __n128 result = *(__n128 *)(a1 + 64);
  *(__n128 *)(a3 + 64) = result;
  *(void *)(a3 + 80) = a2 & 1 | 0x48000000;
  return result;
}

double static GraphicsContext.Filter.hueRotation(_:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 1342177280;
  return result;
}

double static GraphicsContext.Filter.saturation(_:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  *(float *)&unsigned int v2 = a2;
  *(void *)a1 = v2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 1476395008;
  return result;
}

double static GraphicsContext.Filter.brightness(_:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  *(float *)&unsigned int v2 = a2;
  *(void *)a1 = v2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 1610612736;
  return result;
}

double static GraphicsContext.Filter.contrast(_:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  *(float *)&unsigned int v2 = a2;
  *(void *)a1 = v2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 1744830464;
  return result;
}

double static GraphicsContext.Filter.colorInvert(_:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  *(float *)&unsigned int v2 = a2;
  *(void *)a1 = v2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 1879048192;
  return result;
}

double static GraphicsContext.Filter.grayscale(_:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  *(float *)&unsigned int v2 = a2;
  *(void *)a1 = v2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 2013265920;
  return result;
}

double static GraphicsContext.Filter.luminanceToAlpha.getter@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 80) = 3221225472;
  return result;
}

double static GraphicsContext.Filter.blur(radius:options:)@<D0>(char a1@<W0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3 = a1 & 1;
  *(double *)a2 = a3;
  uint64_t v4 = 8;
  if (a1) {
    uint64_t v4 = 9;
  }
  if ((a1 & 2) != 0) {
    uint64_t v3 = v4;
  }
  *(void *)(a2 + 8) = v3;
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(void *)(a2 + 80) = 0x80000000;
  return result;
}

void *static GraphicsContext.Filter.variableBlur(maxRadius:mask:options:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 72);
  unint64_t v14 = (unint64_t)(a2 & 1) << 32;
  uint64_t v15 = 0x900000000;
  if ((a2 & 1) == 0) {
    uint64_t v15 = 0x800000000;
  }
  if ((a2 & 2) != 0) {
    unint64_t v14 = v15;
  }
  *(double *)a3 = a4;
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = v6;
  *(void *)(a3 + 32) = v7;
  *(void *)(a3 + 40) = v8;
  *(void *)(a3 + 48) = v9;
  *(void *)(a3 + 56) = v10;
  *(void *)(a3 + 64) = v11;
  *(void *)(a3 + 72) = v12;
  *(void *)(a3 + 80) = v14 | 0x88000000 | v13;
  return outlined copy of GraphicsContext.Shading.Storage(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t static GraphicsContext.Filter.alphaThreshold(min:max:color:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  if (a3 >= a4)
  {
    _StringGuts.grow(_:)(28);
    v7._object = (void *)0x8000000246220070;
    v7._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v7);
    Double.write<A>(to:)();
    v8._countAndFlagsBits = 3943982;
    v8._object = (void *)0xE300000000000000;
    String.append(_:)(v8);
    Double.write<A>(to:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(float *)&unsigned int v4 = a3;
    *(float *)&unsigned int v5 = a4;
    *(void *)a2 = v4 | ((unint64_t)v5 << 32);
    *(void *)(a2 + 8) = a1;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(void *)(a2 + 80) = 2415919104;
    return swift_retain();
  }
  return result;
}

uint64_t static GraphicsContext.Filter.alphaGradient(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 2550136832;
  return swift_bridgeObjectRetain();
}

{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 1;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(void *)(a2 + 80) = 2550136832;
  return swift_retain();
}

uint64_t static GraphicsContext.Filter.colorShader(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(unsigned int *)(a1 + 32) | 2;
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 3087007744;
  id v7 = v2;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t static GraphicsContext.Filter.distortionShader(_:maxSampleOffset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(a1 + 32) | 4;
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = v8;
  *(double *)(a2 + 40) = a3;
  *(double *)(a2 + 48) = a4;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 3087007744;
  id v9 = v4;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t static GraphicsContext.Filter.layerShader(_:maxSampleOffset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(a1 + 32);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = v8;
  *(double *)(a2 + 40) = a3;
  *(double *)(a2 + 48) = a4;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 3087007744;
  id v9 = v4;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t static GraphicsContext.ShadowOptions.shadowAbove.getter()
{
  return 1;
}

uint64_t static GraphicsContext.ShadowOptions.invertsAlpha.getter()
{
  return 4;
}

uint64_t static GraphicsContext.ShadowOptions.disablesGroup.getter()
{
  return 8;
}

uint64_t static GraphicsContext.BlurOptions.opaque.getter()
{
  return 1;
}

uint64_t static GraphicsContext.BlurOptions.dithersResult.getter()
{
  return 2;
}

uint64_t static GraphicsContext.FilterOptions.linearColor.getter()
{
  return 1;
}

uint64_t RBDrawingState.addProjectionTransform(_:)()
{
  return RBDrawingStateAddProjectionStyle();
}

void *GraphicsContext.addVariableBlurFilter(radius:mask:flags:)(uint64_t *a1, unsigned int a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v9 = v8;
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v13 = a1[3];
  uint64_t v15 = a1[4];
  uint64_t v16 = a1[5];
  uint64_t v18 = a1[6];
  uint64_t v17 = a1[7];
  uint64_t v19 = a1[8];
  char v20 = *((unsigned char *)a1 + 72);
  switch(v20)
  {
    case 0:
      *(void *)&long long v96 = *a1;
      *((void *)&v96 + 1) = v12;
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v96);
      goto LABEL_10;
    case 4:
      uint64_t v67 = a1[2];
      uint64_t v21 = *v8;
      uint64_t v22 = *(void *)(*v8 + 32);
      uint64_t v23 = v22;
      uint64_t v24 = *(void *)(*v9 + 40);
      uint64_t v64 = a1[3];
      if (v22 == 1)
      {
        uint64_t v25 = *(void *)(v21 + 16);
        uint64_t v23 = *(void *)(v25 + 48);
        uint64_t v24 = *(void *)(v25 + 56);
        uint64_t v68 = a1[5];
        uint64_t v26 = a1[4];
        uint64_t v27 = a1[7];
        swift_retain();
        swift_retain();
        uint64_t v17 = v27;
        uint64_t v15 = v26;
        uint64_t v16 = v68;
        uint64_t v13 = v64;
      }
      v83[0] = 0;
      v83[1] = 0;
      v83[2] = 1;
      char v84 = 1;
      uint64_t v85 = 0;
      char v86 = 5;
      uint64_t v87 = v23;
      uint64_t v88 = v24;
      long long v89 = 0u;
      long long v90 = 0u;
      uint64_t v91 = 0;
      char v92 = 1;
      __int16 v93 = 0;
      char v28 = *(void (**)(void *))(*(void *)v11 + 80);
      uint64_t v65 = v15;
      uint64_t v69 = v17;
      outlined copy of GraphicsContext.Shading.Storage((void *)v11, v12, v67, v13, v15, v16, v18, v17, v19, 4);
      outlined copy of EnvironmentValues?(v22);
      v28(v83);
      uint64_t v29 = v85;
      char v62 = v86;
      uint64_t v61 = v85;
      if (v86 == 1) {
        swift_bridgeObjectRetain();
      }
      else {
        uint64_t v29 = MEMORY[0x263F8EE78];
      }
      *(void *)&long long v96 = v29;
      LOBYTE(v94) = 0;
      _ShapeStyle_Pack.subscript.getter((unsigned __int8 *)&v94, 0, (uint64_t)&v72);
      swift_bridgeObjectRelease();
      unsigned __int8 v59 = BYTE8(v72);
      uint64_t v60 = v72;
      unsigned __int8 v57 = BYTE8(v73);
      uint64_t v58 = v73;
      uint64_t v55 = *((void *)&v74 + 1);
      uint64_t v56 = v74;
      uint64_t v53 = *((void *)&v75 + 1);
      uint64_t v54 = v75;
      uint64_t v44 = v77;
      char v45 = v78;
      uint64_t v51 = v76;
      uint64_t v52 = v80;
      long long v96 = v72;
      long long v97 = v73;
      long long v98 = v74;
      long long v99 = v75;
      uint64_t v100 = v76;
      uint64_t v101 = v77;
      char v102 = v78;
      int v103 = v79;
      uint64_t v104 = v80;
      unsigned __int8 v46 = v81;
      unsigned __int8 v105 = v81;
      uint64_t v106 = v82;
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi3_((uint64_t)&v96);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v96, (uint64_t)&v94);
      GraphicsContext.addVariableBlurFilter(radius:mask:flags:)((uint64_t)&v94, a2, a4);
      outlined consume of GraphicsContext.Shading.Storage((void *)v11, v12, v67, v64, v65, v16, v18, v69, v19, 4);
      outlined consume of _ShapeStyle_Pack.Fill(v60, v59, v58, v57, v56, v55, v54, v53, v51, v44, v45);
      outlined consume of GraphicsBlendMode?(v52, v46);
      swift_bridgeObjectRelease();
      outlined consume of _ShapeStyle_Shape.Result(v61, v62);
      swift_release();
      swift_release();
      return (void *)swift_release();
    case 8:
      if (!*(void *)(v11 + 16))
      {
        __break(1u);
        JUMPOUT(0x245D58080);
      }
      uint64_t v30 = *(void *)(v11 + 96);
      char v31 = *(unsigned char *)(v11 + 104);
      long long v32 = *(_OWORD *)(v11 + 48);
      long long v96 = *(_OWORD *)(v11 + 32);
      long long v97 = v32;
      long long v33 = *(_OWORD *)(v11 + 80);
      long long v98 = *(_OWORD *)(v11 + 64);
      long long v99 = v33;
      uint64_t v100 = v30;
      LOBYTE(v101) = v31;
      return (void *)GraphicsContext.addVariableBlurFilter(radius:mask:flags:)(&v96, a2, a3, v13, v15, a7, a8, v17, a4);
    case 9:
      outlined init with take of GraphicsContext.ResolvedShading(v11 + 16, (uint64_t)&v96);
LABEL_10:
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v96, (uint64_t)&v94);
      return GraphicsContext.addVariableBlurFilter(radius:mask:flags:)((uint64_t)&v94, a2, a4);
    case 10:
      if (v12 | v11 | v14 | v13 | v15 | v16 | v18 | v17 | v19) {
        goto LABEL_12;
      }
      uint64_t v47 = *(void *)(*v8 + 16);
      uint64_t v48 = *(void *)(*v9 + 32);
      if (v48 == 1)
      {
        uint64_t v49 = *(void *)(v47 + 48);
        uint64_t v50 = *(void *)(v47 + 56);
        swift_retain();
        swift_retain();
      }
      else
      {
        uint64_t v50 = *(void *)(*v9 + 40);
        uint64_t v49 = *(void *)(*v9 + 32);
      }
      uint64_t v94 = v49;
      uint64_t v95 = v50;
      outlined copy of EnvironmentValues?(v48);
      GraphicsContext.Storage.Shared.resolvedForeground(in:)(&v94, (uint64_t)&v96);
      swift_release();
      swift_release();
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v96, (uint64_t)&v94);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v94, (uint64_t)&v72);
      GraphicsContext.addVariableBlurFilter(radius:mask:flags:)((uint64_t)&v72, a2, a4);
      uint64_t result = outlined retain of GraphicsContext.ResolvedShading(&v94, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading);
      break;
    default:
LABEL_12:
      uint64_t v70 = a1[7];
      uint64_t v66 = a1[6];
      uint64_t v35 = a1[5];
      uint64_t v36 = a1[4];
      uint64_t v37 = a1[3];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v63 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v38 = swift_retain();
        *uint64_t v8 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v38, v63, 1, 0);
        swift_release();
      }
      uint64_t v39 = *v8;
      uint64_t v40 = *(void *)(*v8 + 16);
      *(void *)&long long v96 = v11;
      *((void *)&v96 + 1) = v12;
      *(void *)&long long v97 = v14;
      *((void *)&v97 + 1) = v37;
      *(void *)&long long v98 = v36;
      *((void *)&v98 + 1) = v35;
      *(void *)&long long v99 = v66;
      *((void *)&v99 + 1) = v70;
      uint64_t v100 = v19;
      LOBYTE(v101) = v20;
      uint64_t v41 = *(void *)(v39 + 32);
      if (v41 == 1)
      {
        uint64_t v42 = *(void *)(v40 + 48);
        uint64_t v43 = *(void *)(v40 + 56);
        swift_retain();
        swift_retain();
      }
      else
      {
        uint64_t v43 = *(void *)(v39 + 40);
        uint64_t v42 = *(void *)(v39 + 32);
      }
      uint64_t v94 = v42;
      uint64_t v95 = v43;
      swift_retain();
      outlined copy of EnvironmentValues?(v41);
      GraphicsContext.Storage.Shared.setShading(_:in:)((uint64_t)&v96, &v94);
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = (void *)RBDrawingStateAddVariableBlurFilter();
      break;
  }
  return result;
}

void GraphicsContext.addShaderFilter(_:size:)(id *a1)
{
  if (*a1)
  {
    unsigned int v2 = v1;
    id v3 = *a1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v4 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v5 = swift_retain();
      *unsigned int v2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v5, v4, 1, 0);
      swift_release();
    }
    Shader.ResolvedShader.rbFilterFlags.getter();
    RBDrawingStateAddShaderFilter();
  }
}

void *GraphicsContext.Shading.storage.getter@<X0>(uint64_t a1@<X8>)
{
  unsigned int v2 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v10 = *(void *)(v1 + 64);
  char v11 = *(unsigned char *)(v1 + 72);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 72) = v11;
  return outlined copy of GraphicsContext.Shading.Storage(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
}

__n128 GraphicsContext.Shading.storage.setter(long long *a1)
{
  long long v8 = *a1;
  long long v6 = a1[2];
  long long v7 = a1[1];
  __n128 v5 = (__n128)a1[3];
  uint64_t v2 = *((void *)a1 + 8);
  char v3 = *((unsigned char *)a1 + 72);
  outlined consume of GraphicsContext.Shading.Storage(*(void **)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(unsigned char *)(v1 + 72));
  *(_OWORD *)uint64_t v1 = v8;
  *(_OWORD *)(v1 + 16) = v7;
  __n128 result = v5;
  *(_OWORD *)(v1 + 32) = v6;
  *(__n128 *)(v1 + 48) = v5;
  *(void *)(v1 + 64) = v2;
  *(unsigned char *)(v1 + 72) = v3;
  return result;
}

uint64_t (*GraphicsContext.Shading.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double static GraphicsContext.Shading.foreground.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 72) = 10;
  return result;
}

uint64_t static GraphicsContext.Shading.palette(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    *(void *)a2 = a1;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(unsigned char *)(a2 + 72) = 8;
    return swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

double static GraphicsContext.Shading.color(_:red:green:blue:opacity:)@<D0>(unsigned char *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  float v7 = a3;
  float v8 = a4;
  float v9 = a5;
  float v10 = a6;
  if (*a1)
  {
    if (*a1 != 1)
    {
      float v11 = a3;
      float v12 = specialized Color.Resolved.init(displayP3Red:green:blue:opacity:)(v11, v8, v9);
      Color.Resolved.displayP3Components.getter(v12, v13, v14);
    }
    RBColorFromLinear();
    float v7 = v15;
    float v10 = v16;
  }
  *(void *)a2 = LODWORD(v7) | ((unint64_t)LODWORD(v8) << 32);
  *(void *)(a2 + 8) = LODWORD(v9) | ((unint64_t)LODWORD(v10) << 32);
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 2;
  return result;
}

double static GraphicsContext.Shading.color(_:white:opacity:)@<D0>(unsigned char *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  float v5 = a3;
  float v6 = a4;
  if (*a1)
  {
    float v7 = a3;
    if (*a1 != 1)
    {
      float v10 = specialized Color.Resolved.init(displayP3Red:green:blue:opacity:)(v7, v5, v5);
      Color.Resolved.displayP3Components.getter(v10, v11, v12);
    }
    RBColorFromLinear();
    float v5 = v13;
    float v6 = v14;
  }
  else
  {
    float v8 = a3;
    float v9 = a3;
  }
  *(void *)a2 = LODWORD(v9) | ((unint64_t)LODWORD(v8) << 32);
  *(void *)(a2 + 8) = LODWORD(v5) | ((unint64_t)LODWORD(v6) << 32);
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 2;
  return result;
}

uint64_t static GraphicsContext.Shading.shader(_:bounds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  float v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(a1 + 32);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v9;
  *(void *)(a2 + 32) = v10;
  *(double *)(a2 + 40) = a3;
  *(double *)(a2 + 48) = a4;
  *(double *)(a2 + 56) = a5;
  *(double *)(a2 + 64) = a6;
  *(unsigned char *)(a2 + 72) = 3;
  id v11 = v6;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t static GraphicsContext.Shading.meshGradient(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  unint64_t v7 = *(unsigned __int8 *)(a1 + 56) | ((unint64_t)*(unsigned __int8 *)(a1 + 57) << 8);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = v2;
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = v5;
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = v7;
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 6;
  swift_bridgeObjectRetain();
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t static GraphicsContext.Shading.radialGradient(_:center:startRadius:endRadius:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = 0;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(double *)(a3 + 40) = a7;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = (a2 << 32) | 1;
  *(unsigned char *)(a3 + 72) = 5;
  return swift_bridgeObjectRetain();
}

{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = 1;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(double *)(a3 + 40) = a7;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = (a2 << 32) | 1;
  *(unsigned char *)(a3 + 72) = 5;
  return swift_retain();
}

uint64_t static GraphicsContext.Shading.radialGradient(_:startCenter:startRadius:endCenter:endRadius:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D5>)
{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = 0;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(double *)(a3 + 40) = a7;
  *(double *)(a3 + 48) = a8;
  *(double *)(a3 + 56) = a9;
  *(void *)(a3 + 64) = (a2 << 32) | 2;
  *(unsigned char *)(a3 + 72) = 5;
  return swift_bridgeObjectRetain();
}

{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = 1;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(double *)(a3 + 40) = a7;
  *(double *)(a3 + 48) = a8;
  *(double *)(a3 + 56) = a9;
  *(void *)(a3 + 64) = (a2 << 32) | 2;
  *(unsigned char *)(a3 + 72) = 5;
  return swift_retain();
}

uint64_t static GraphicsContext.Shading.conicGradient(_:center:angle:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = 0;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = (a2 << 32) | 4;
  *(unsigned char *)(a3 + 72) = 5;
  return swift_bridgeObjectRetain();
}

{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = 1;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = (a2 << 32) | 4;
  *(unsigned char *)(a3 + 72) = 5;
  return swift_retain();
}

uint64_t static GraphicsContext.Shading.angularGradient(_:center:startAngle:endAngle:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = 0;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(double *)(a3 + 40) = a7;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = (a2 << 32) | 5;
  *(unsigned char *)(a3 + 72) = 5;
  return swift_bridgeObjectRetain();
}

{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = 1;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(double *)(a3 + 40) = a7;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = (a2 << 32) | 5;
  *(unsigned char *)(a3 + 72) = 5;
  return swift_retain();
}

uint64_t static GraphicsContext.Shading.tiledImage(_:origin:sourceRect:scale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>, double a9@<D6>)
{
  *(void *)a2 = a1;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  *(double *)(a2 + 40) = a7;
  *(double *)(a2 + 48) = a8;
  *(double *)(a2 + 56) = a9;
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 7;
  return swift_retain();
}

uint64_t static GraphicsContext.GradientOptions.repeat.getter()
{
  return 1;
}

uint64_t static GraphicsContext.GradientOptions.mirror.getter()
{
  return 2;
}

uint64_t static GraphicsContext.GradientOptions.linearColor.getter()
{
  return 4;
}

uint64_t GraphicsContext.drawLayer(options:content:)(char a1, void (*a2)(uint64_t *))
{
  return GraphicsContext.drawLayer(flags:content:)(a1, a2);
}

uint64_t GraphicsContext.stroke(_:with:style:)(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(a3 + 32);
  uint64_t v10 = *(void *)(a2 + 64);
  char v11 = *(unsigned char *)(a2 + 72);
  long long v12 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v12;
  long long v13 = *(_OWORD *)(a2 + 48);
  void v20[2] = *(_OWORD *)(a2 + 32);
  v20[3] = v13;
  uint64_t v21 = v10;
  char v22 = v11;
  long long v15 = *(_OWORD *)a3;
  uint64_t v16 = v8;
  uint64_t v17 = v7;
  uint64_t v18 = v9;
  char v19 = 1;
  swift_bridgeObjectRetain();
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v20, (uint64_t)&v15, a4);

  return outlined release of StrokeStyle(a3);
}

double GraphicsContext.ResolvedImage.size.getter()
{
  double v1 = *(double *)(v0 + 16);
  double result = 0.0;
  if (v1 != 0.0)
  {
    double v3 = *(double *)(v0 + 24);
    switch(*(unsigned char *)(v0 + 40))
    {
      case 4:
      case 5:
      case 6:
      case 7:
        double v3 = *(double *)(v0 + 32);
        break;
      default:
        return 1.0 / v1 * v3;
    }
    return 1.0 / v1 * v3;
  }
  return result;
}

double GraphicsContext.ResolvedImage.baseline.getter()
{
  return *(double *)(v0 + 104);
}

void *GraphicsContext.ResolvedImage.shading.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 112);
  uint64_t v3 = *(void *)(v1 + 120);
  uint64_t v4 = *(void *)(v1 + 128);
  uint64_t v5 = *(void *)(v1 + 136);
  uint64_t v6 = *(void *)(v1 + 144);
  uint64_t v7 = *(void *)(v1 + 152);
  uint64_t v8 = *(void *)(v1 + 160);
  uint64_t v9 = *(void *)(v1 + 168);
  uint64_t v10 = *(void *)(v1 + 176);
  unsigned __int8 v11 = *(unsigned char *)(v1 + 184);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 72) = v11;
  return outlined copy of GraphicsContext.Shading?(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
}

__n128 GraphicsContext.ResolvedImage.shading.setter(long long *a1)
{
  long long v8 = *a1;
  long long v6 = a1[2];
  long long v7 = a1[1];
  __n128 v5 = (__n128)a1[3];
  uint64_t v2 = *((void *)a1 + 8);
  char v3 = *((unsigned char *)a1 + 72);
  outlined consume of GraphicsContext.Shading?(*(void **)(v1 + 112), *(void *)(v1 + 120), *(void *)(v1 + 128), *(void *)(v1 + 136), *(void *)(v1 + 144), *(void *)(v1 + 152), *(void *)(v1 + 160), *(void *)(v1 + 168), *(void *)(v1 + 176), *(unsigned char *)(v1 + 184));
  *(_OWORD *)(v1 + 112) = v8;
  *(_OWORD *)(v1 + 128) = v7;
  __n128 result = v5;
  *(_OWORD *)(v1 + 144) = v6;
  *(__n128 *)(v1 + 160) = v5;
  *(void *)(v1 + 176) = v2;
  *(unsigned char *)(v1 + 184) = v3;
  return result;
}

uint64_t (*GraphicsContext.ResolvedImage.shading.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double GraphicsContext.resolve(_:)@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v47 = a1;
  _sSo6CGRectVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, type metadata accessor for Text.Style, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  long long v7 = (char *)&v43 - v6;
  long long v8 = (int *)type metadata accessor for ImageResolutionContext();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  uint64_t v48 = (uint64_t)&v43 - v12;
  uint64_t v14 = a2[4];
  uint64_t v13 = a2[5];
  uint64_t v15 = v14;
  *(void *)&long long v46 = v13;
  if (v14 == 1)
  {
    uint64_t v16 = a2[2];
    uint64_t v15 = *(void *)(v16 + 48);
    uint64_t v13 = *(void *)(v16 + 56);
    swift_retain();
    swift_retain();
  }
  uint64_t v44 = v15;
  *(void *)&long long v45 = v13;
  uint64_t v17 = type metadata accessor for Text.Style(0);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  v18(v7, 1, 1, v17);
  int v19 = *MEMORY[0x263F288F8];
  id v10[2] = 0;
  uint64_t v20 = (uint64_t)v10 + v8[6];
  v18((char *)v20, 1, 1, v17);
  uint64_t v21 = v8[7];
  *(_DWORD *)((char *)v10 + v21) = v19;
  *((unsigned char *)v10 + v8[8]) = 8;
  *((unsigned char *)v10 + v8[9]) = 3;
  *((unsigned char *)v10 + v8[10]) = 1;
  uint64_t v22 = v45;
  *uint64_t v10 = v44;
  v10[1] = v22;
  outlined copy of EnvironmentValues?(v14);
  outlined assign with take of Text.Style?((uint64_t)v7, v20);
  *(_DWORD *)((char *)v10 + v21) = v19;
  uint64_t v23 = v48;
  outlined init with take of ImageResolutionContext((uint64_t)v10, v48);
  uint64_t v24 = v8[10];
  if (*(unsigned char *)(v23 + v24)) {
    *(unsigned char *)(v23 + v24) &= ~1u;
  }
  (*(void (**)(id *__return_ptr, uint64_t))(*(void *)v47 + 80))(&v50, v23);
  id v25 = v50;
  char v26 = v51;
  double v27 = v52;
  double v28 = v53;
  double v29 = v54;
  char v30 = v55;
  long long v47 = v56;
  char v31 = v57;
  long long v46 = v58;
  long long v45 = v59;
  char v32 = v60;
  double v33 = 0.0;
  char v34 = v61;
  char v35 = v62;
  double v36 = 0.0;
  char v37 = v63;
  if (v52 == 0.0)
  {
    uint64_t v38 = v64;
    if (!v64) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  double v42 = v54;
  switch(v55)
  {
    case 4:
    case 5:
    case 6:
    case 7:
      double v42 = v53;
      break;
    default:
      break;
  }
  double v36 = 1.0 / v52 * v42;
  uint64_t v38 = v64;
  if (v64) {
LABEL_7:
  }
    double v33 = *(double *)(v38 + 16);
LABEL_8:
  outlined copy of GraphicsImage.Contents?(v50, v51);
  outlined release of Image.Resolved((uint64_t)&v50);
  char v49 = v31;
  outlined destroy of ImageResolutionContext(v23, (uint64_t (*)(void))type metadata accessor for ImageResolutionContext);
  char v39 = -1;
  if ((v31 & 1) == 0)
  {
    outlined consume of GraphicsContext.Shading?(0, 0, 0, 0, 0, 0, 0, 0, 0, 0xFFu);
    char v39 = 10;
  }
  *(void *)a3 = v25;
  *(unsigned char *)(a3 + 8) = v26;
  *(double *)(a3 + 16) = v27;
  *(double *)(a3 + 24) = v28;
  *(double *)(a3 + 32) = v29;
  *(unsigned char *)(a3 + 40) = v30;
  *(_OWORD *)(a3 + 44) = v47;
  *(unsigned char *)(a3 + 60) = v31;
  long long v40 = v45;
  *(_OWORD *)(a3 + 64) = v46;
  *(_OWORD *)(a3 + 80) = v40;
  *(unsigned char *)(a3 + 96) = v32;
  *(unsigned char *)(a3 + 97) = v34;
  *(unsigned char *)(a3 + 98) = v35;
  *(unsigned char *)(a3 + 99) = v37;
  *(double *)(a3 + 104) = v36 - v33;
  double result = 0.0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(void *)(a3 + 176) = 0;
  *(unsigned char *)(a3 + 184) = v39;
  return result;
}

void GraphicsContext.draw(_:in:style:)(uint64_t a1, __int16 a2, uint64_t a3, CGFloat a4, CGFloat a5, double a6, double a7)
{
  uint64_t v11 = *(void *)(a1 + 32);
  char v12 = *(unsigned char *)(a1 + 40);
  char v13 = *(unsigned char *)(a1 + 60);
  char v14 = *(unsigned char *)(a1 + 96);
  char v15 = *(unsigned char *)(a1 + 97);
  __int16 v16 = *(_WORD *)(a1 + 98);
  uint64_t v17 = *(void **)(a1 + 112);
  uint64_t v18 = *(void *)(a1 + 120);
  uint64_t v19 = *(void *)(a1 + 128);
  uint64_t v20 = *(void *)(a1 + 136);
  uint64_t v21 = *(void *)(a1 + 144);
  uint64_t v22 = *(void *)(a1 + 152);
  uint64_t v24 = *(void *)(a1 + 160);
  uint64_t v23 = *(void *)(a1 + 168);
  uint64_t v25 = *(void *)(a1 + 176);
  unsigned __int8 v26 = *(unsigned char *)(a1 + 184);
  char v27 = *(unsigned char *)(a1 + 8);
  id v35 = *(id *)a1;
  id v30 = v35;
  char v36 = v27;
  char v29 = v27;
  long long v37 = *(_OWORD *)(a1 + 16);
  uint64_t v38 = v11;
  char v39 = v12;
  long long v40 = *(_OWORD *)(a1 + 44);
  char v41 = v13;
  long long v28 = *(_OWORD *)(a1 + 80);
  long long v42 = *(_OWORD *)(a1 + 64);
  long long v43 = v28;
  char v44 = v14;
  char v45 = v15;
  __int16 v46 = v16;
  v33[0] = v17;
  v33[1] = v18;
  _OWORD v33[2] = v19;
  v33[3] = v20;
  uint64_t v33[4] = v21;
  v33[5] = v22;
  v33[6] = v24;
  v33[7] = v23;
  v33[8] = v25;
  unsigned __int8 v34 = v26;
  outlined copy of GraphicsImage.Contents?(v35, v27);
  outlined copy of GraphicsContext.Shading?(v17, v18, v19, v20, v21, v22, v24, v23, v25, v26);
  GraphicsContext.draw(_:in:style:shading:)((uint64_t)&v35, a2 & 0x101, (uint64_t)v33, a3, a4, a5, a6, a7);
  outlined consume of GraphicsContext.Shading?(v17, v18, v19, v20, v21, v22, v24, v23, v25, v26);

  outlined consume of GraphicsImage.Contents?(v30, v29);
}

void GraphicsContext.draw(_:at:anchor:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6 = *(void **)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  double v8 = *(double *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  char v11 = *(unsigned char *)(a1 + 40);
  long long v12 = *(_OWORD *)(a1 + 44);
  char v13 = *(unsigned char *)(a1 + 60);
  long long v14 = *(_OWORD *)(a1 + 64);
  long long v15 = *(_OWORD *)(a1 + 80);
  char v16 = *(unsigned char *)(a1 + 96);
  char v17 = *(unsigned char *)(a1 + 97);
  char v18 = *(unsigned char *)(a1 + 98);
  char v19 = *(unsigned char *)(a1 + 99);
  uint64_t v20 = *(void **)(a1 + 112);
  uint64_t v21 = *(void *)(a1 + 120);
  uint64_t v22 = *(void *)(a1 + 128);
  uint64_t v23 = *(void *)(a1 + 136);
  uint64_t v24 = *(void *)(a1 + 144);
  uint64_t v25 = *(void *)(a1 + 152);
  double v26 = 0.0;
  uint64_t v27 = *(void *)(a1 + 160);
  uint64_t v28 = *(void *)(a1 + 168);
  uint64_t v29 = *(void *)(a1 + 176);
  double v30 = 0.0;
  unsigned __int8 v31 = *(unsigned char *)(a1 + 184);
  if (v8 != 0.0)
  {
    double v32 = *(double *)(a1 + 32);
    double v33 = *(double *)(a1 + 24);
    switch(*(unsigned char *)(a1 + 40))
    {
      case 4:
      case 5:
      case 6:
      case 7:
        double v32 = *(double *)(a1 + 24);
        double v33 = *(double *)(a1 + 32);
        break;
      default:
        break;
    }
    double v26 = 1.0 / v8 * v33;
    double v30 = 1.0 / v8 * v32;
  }
  char v41 = *(void **)a1;
  CGFloat v34 = a3 - v26 * a5;
  char v42 = v7;
  CGFloat v35 = a4 - v30 * a6;
  double v43 = v8;
  uint64_t v44 = v9;
  uint64_t v45 = v10;
  char v46 = v11;
  long long v47 = v12;
  char v48 = v13;
  long long v49 = v14;
  long long v50 = v15;
  char v51 = v16;
  char v52 = v17;
  char v53 = v18;
  char v54 = v19;
  v39[0] = v20;
  v39[1] = v21;
  v39[2] = v22;
  v39[3] = v23;
  v39[4] = v24;
  uint64_t v39[5] = v25;
  v39[6] = v27;
  v39[7] = v28;
  v39[8] = v29;
  unsigned __int8 v40 = v31;
  char v38 = v7;
  long long v37 = v6;
  outlined copy of GraphicsImage.Contents?(v6, v7);
  outlined copy of GraphicsContext.Shading?(v20, v21, v22, v23, v24, v25, v27, v28, v29, v31);
  GraphicsContext.draw(_:in:style:shading:)((uint64_t)&v41, 256, (uint64_t)v39, a2, v34, v35, v26, v30);
  outlined consume of GraphicsContext.Shading?(v20, v21, v22, v23, v24, v25, v27, v28, v29, v31);

  outlined consume of GraphicsImage.Contents?(v37, v38);
}

uint64_t GraphicsContext.draw(_:in:style:)(uint64_t a1, __int16 a2, void *a3, CGFloat a4, CGFloat a5, double a6, double a7)
{
  GraphicsContext.resolve(_:)(a1, a3, (uint64_t)&v40);
  char v11 = v52;
  char v12 = v53;
  uint64_t v13 = v54;
  uint64_t v14 = v55;
  uint64_t v15 = v56;
  uint64_t v16 = v57;
  uint64_t v18 = v58;
  uint64_t v17 = v59;
  uint64_t v19 = v60;
  unsigned __int8 v20 = v61;
  id v28 = v40;
  id v23 = v40;
  char v29 = v41;
  char v22 = v41;
  long long v30 = v42;
  uint64_t v31 = v43;
  char v32 = v44;
  long long v33 = v45;
  char v34 = v46;
  long long v35 = v47;
  long long v36 = v48;
  char v37 = v49;
  char v38 = v50;
  __int16 v39 = v51;
  v26[0] = v52;
  v26[1] = v53;
  void v26[2] = v54;
  v26[3] = v55;
  v26[4] = v56;
  float v26[5] = v57;
  v26[6] = v58;
  v26[7] = v59;
  v26[8] = v60;
  unsigned __int8 v27 = v61;
  outlined copy of GraphicsImage.Contents?(v40, v41);
  outlined copy of GraphicsContext.Shading?(v11, v12, v13, v14, v15, v16, v18, v17, v19, v20);
  GraphicsContext.draw(_:in:style:shading:)((uint64_t)&v28, a2 & 0x101, (uint64_t)v26, (uint64_t)a3, a4, a5, a6, a7);
  outlined consume of GraphicsContext.Shading?(v11, v12, v13, v14, v15, v16, v18, v17, v19, v20);
  outlined consume of GraphicsImage.Contents?(v23, v22);
  return outlined release of GraphicsContext.ResolvedImage((uint64_t)&v40);
}

uint64_t GraphicsContext.draw(_:at:anchor:)(uint64_t a1, void *a2, double a3, double a4, double a5, double a6)
{
  GraphicsContext.resolve(_:)(a1, a2, (uint64_t)v14);
  v12[8] = v14[8];
  v12[9] = v14[9];
  v13[0] = v15[0];
  *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)((char *)v15 + 9);
  v12[4] = v14[4];
  v12[5] = v14[5];
  v12[6] = v14[6];
  v12[7] = v14[7];
  v12[0] = v14[0];
  v12[1] = v14[1];
  v12[2] = v14[2];
  v12[3] = v14[3];
  GraphicsContext.draw(_:at:anchor:)((uint64_t)v12, (uint64_t)a2, a3, a4, a5, a6);
  return outlined release of GraphicsContext.ResolvedImage((uint64_t)v14);
}

void *GraphicsContext.ResolvedText.shading.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + 64);
  uint64_t v9 = *(void *)(v1 + 72);
  uint64_t v10 = *(void *)(v1 + 80);
  char v11 = *(unsigned char *)(v1 + 88);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 72) = v11;
  return outlined copy of GraphicsContext.Shading.Storage(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
}

__n128 GraphicsContext.ResolvedText.shading.setter(long long *a1)
{
  long long v8 = *a1;
  long long v6 = a1[2];
  long long v7 = a1[1];
  __n128 v5 = (__n128)a1[3];
  uint64_t v2 = *((void *)a1 + 8);
  char v3 = *((unsigned char *)a1 + 72);
  outlined consume of GraphicsContext.Shading.Storage(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(unsigned char *)(v1 + 88));
  *(_OWORD *)(v1 + 16) = v8;
  *(_OWORD *)(v1 + 32) = v7;
  __n128 result = v5;
  *(_OWORD *)(v1 + 48) = v6;
  *(__n128 *)(v1 + 64) = v5;
  *(void *)(v1 + 80) = v2;
  *(unsigned char *)(v1 + 88) = v3;
  return result;
}

uint64_t (*GraphicsContext.ResolvedText.shading.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

CGSize __swiftcall GraphicsContext.ResolvedText.measure(in:)(CGSize in)
{
  double height = in.height;
  double width = in.width;
  uint64_t v4 = *v1;
  if (one-time initialization token for _textDrawingContext != -1) {
    swift_once();
  }
  __n128 v5 = *(double (**)(uint64_t, double, double))(*(void *)v4 + 264);
  uint64_t v6 = swift_retain();
  double v7 = v5(v6, width, height);
  double v9 = v8;
  swift_release();
  double v10 = v7;
  double v11 = v9;
  result.double height = v11;
  result.double width = v10;
  return result;
}

uint64_t GraphicsContext.ResolvedText.firstBaseline(in:)(double a1, double a2)
{
  uint64_t v5 = *v2;
  if (one-time initialization token for firstTextBaseline != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(uint64_t, double, double))(*(void *)v5 + 272))(static VerticalAlignment.firstTextBaseline, a1, a2);
}

uint64_t GraphicsContext.ResolvedText.lastBaseline(in:)(double a1, double a2)
{
  uint64_t v5 = *v2;
  if (one-time initialization token for lastTextBaseline != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(uint64_t, double, double))(*(void *)v5 + 272))(static VerticalAlignment.lastTextBaseline, a1, a2);
}

uint64_t GraphicsContext.resolve(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = a5[4];
  if (v12 == 1)
  {
    uint64_t v13 = a5[2];
    uint64_t v14 = *(void *)(v13 + 48);
    uint64_t v15 = *(void *)(v13 + 56);
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v15 = a5[5];
    uint64_t v14 = a5[4];
  }
  *(void *)&v29[0] = v14;
  *((void *)&v29[0] + 1) = v15;
  uint64_t v36 = 0;
  uint64_t v37 = 2;
  uint64_t v35 = 0;
  outlined copy of EnvironmentValues?(v12);
  uint64_t v16 = Text.resolveAttributedStringAndProperties(in:includeDefaultAttributes:options:idiom:)((uint64_t)v38, (uint64_t *)v29, 1, (float64_t *)&v37, &v35, a1, a2, a3 & 1, a4);
  swift_release();
  swift_release();
  uint64_t v17 = a5[4];
  uint64_t v18 = v17;
  uint64_t v19 = a5[5];
  if (v17 == 1)
  {
    uint64_t v20 = a5[2];
    uint64_t v18 = *(void *)(v20 + 48);
    uint64_t v19 = *(void *)(v20 + 56);
    swift_retain();
    swift_retain();
  }
  uint64_t v35 = v18;
  uint64_t v36 = v19;
  uint64_t v21 = *(void *)(a4 + 16);
  if (v21)
  {
    char v22 = (unsigned char *)(a4 + 40);
    while (1)
    {
      if ((*v22 & 0xE0) == 0xC0)
      {
        type metadata accessor for CollapsibleTextModifier();
        if (swift_dynamicCastClass()) {
          break;
        }
      }
      v22 += 16;
      if (!--v21) {
        goto LABEL_12;
      }
    }
    char v23 = 1;
  }
  else
  {
LABEL_12:
    char v23 = 0;
  }
  v34[0] = v39;
  uint64_t v24 = v40;
  uint64_t v25 = v41;
  unsigned __int8 v33 = 2;
  __int16 v32 = 512;
  uint64_t v30 = 0;
  memset(v29, 0, sizeof(v29));
  long long v31 = xmmword_24619B530;
  uint64_t v37 = MEMORY[0x263F8EE78];
  outlined copy of EnvironmentValues?(v17);
  uint64_t v26 = specialized static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(v16, (unint64_t *)&v35, (char *)&v32, v23, v34, v29, &v37, v24, 0.0, 0.0, 0.0, 0.0, v25, &v33, 0);

  outlined release of Text.ResolvedProperties(v38);
  swift_release();
  swift_release();
  uint64_t v27 = a5[2];
  *(void *)a6 = v26;
  *(void *)(a6 + 8) = v27;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(void *)(a6 + 80) = 0;
  *(unsigned char *)(a6 + 88) = 10;
  return swift_retain();
}

uint64_t GraphicsContext.resolve(_:layoutProperties:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11 = a6[4];
  uint64_t v12 = (void *)a6[2];
  unint64_t v13 = v11;
  uint64_t v14 = a6[5];
  if (v11 == 1)
  {
    unint64_t v13 = v12[6];
    uint64_t v14 = v12[7];
    swift_retain();
    swift_retain();
  }
  *(void *)&long long v78 = v13;
  *((void *)&v78 + 1) = v14;
  if (v12[9])
  {
    uint64_t result = outlined copy of EnvironmentValues?(v11);
  }
  else
  {
    if (v14)
    {
      outlined copy of EnvironmentValues?(v11);
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v13, (uint64_t)&v68);
      swift_release_n();
      swift_release_n();
    }
    else
    {
      long long v54 = v13;
      outlined copy of EnvironmentValues?(v11);
      swift_retain();
      TextLayoutProperties.init(from:)((uint64_t *)&v54, (uint64_t)&v68);
    }
    uint64_t v16 = swift_allocObject();
    long long v17 = v75;
    *(_OWORD *)(v16 + 112) = v74;
    *(_OWORD *)(v16 + 128) = v17;
    *(_OWORD *)(v16 + 144) = v76;
    *(unsigned char *)(v16 + 160) = v77;
    long long v18 = v71;
    *(_OWORD *)(v16 + 48) = v70;
    *(_OWORD *)(v16 + 64) = v18;
    long long v19 = v73;
    *(_OWORD *)(v16 + 80) = v72;
    *(_OWORD *)(v16 + 96) = v19;
    long long v20 = v69;
    *(_OWORD *)(v16 + 16) = v68;
    *(_OWORD *)(v16 + 32) = v20;
    v12[9] = v16;
    uint64_t result = swift_release();
  }
  long long v21 = *(_OWORD *)(a5 + 112);
  long long v74 = *(_OWORD *)(a5 + 96);
  long long v75 = v21;
  long long v76 = *(_OWORD *)(a5 + 128);
  char v77 = *(unsigned char *)(a5 + 144);
  long long v22 = *(_OWORD *)(a5 + 48);
  long long v70 = *(_OWORD *)(a5 + 32);
  long long v71 = v22;
  long long v23 = *(_OWORD *)(a5 + 80);
  long long v72 = *(_OWORD *)(a5 + 64);
  long long v73 = v23;
  long long v24 = *(_OWORD *)(a5 + 16);
  long long v68 = *(_OWORD *)a5;
  long long v69 = v24;
  uint64_t v25 = v12[9];
  if (v25)
  {
    long long v26 = *(_OWORD *)(v25 + 112);
    long long v27 = *(_OWORD *)(v25 + 144);
    long long v61 = *(_OWORD *)(v25 + 128);
    long long v62 = v27;
    long long v28 = *(_OWORD *)(v25 + 48);
    long long v29 = *(_OWORD *)(v25 + 80);
    long long v30 = *(_OWORD *)(v25 + 96);
    long long v57 = *(_OWORD *)(v25 + 64);
    long long v58 = v29;
    char v63 = *(unsigned char *)(v25 + 160);
    long long v59 = v30;
    long long v60 = v26;
    long long v31 = *(_OWORD *)(v25 + 32);
    long long v54 = *(_OWORD *)(v25 + 16);
    long long v55 = v31;
    long long v56 = v28;
    TextLayoutProperties.update(_:from:)((uint64_t *)&v78, (uint64_t)&v54);
    long long v54 = v78;
    *(void *)&v79[0] = 2;
    v49[0] = 0uLL;
    swift_retain();
    swift_retain();
    __int16 v32 = Text.resolveAttributedStringAndProperties(in:includeDefaultAttributes:options:idiom:)((uint64_t)v64, (uint64_t *)&v54, 1, v79, (uint64_t *)v49, a1, a2, a3 & 1, a4);
    swift_release();
    swift_release();
    uint64_t v36 = *(void *)(a4 + 16);
    if (v36)
    {
      uint64_t v37 = (unsigned char *)(a4 + 40);
      do
      {
        if ((*v37 & 0xE0) == 0xC0)
        {
          type metadata accessor for CollapsibleTextModifier();
          if (swift_dynamicCastClass())
          {
            char v38 = 1;
            goto LABEL_19;
          }
        }
        v37 += 16;
        --v36;
      }
      while (v36);
      char v38 = 0;
    }
    else
    {
      char v38 = 0;
    }
LABEL_19:
    long long v39 = *(_OWORD *)(a5 + 96);
    long long v40 = *(_OWORD *)(a5 + 128);
    long long v61 = *(_OWORD *)(a5 + 112);
    long long v62 = v40;
    long long v41 = *(_OWORD *)(a5 + 32);
    long long v42 = *(_OWORD *)(a5 + 64);
    long long v43 = *(_OWORD *)(a5 + 80);
    long long v57 = *(_OWORD *)(a5 + 48);
    long long v58 = v42;
    char v63 = *(unsigned char *)(a5 + 144);
    long long v59 = v43;
    long long v60 = v39;
    long long v44 = *(_OWORD *)(a5 + 16);
    long long v54 = *(_OWORD *)a5;
    long long v55 = v44;
    long long v56 = v41;
    memset(v79, 0, sizeof(v79));
    char v80 = 1;
    v53[0] = 512;
    __int16 v52 = v65;
    uint64_t v50 = 0;
    memset(v49, 0, sizeof(v49));
    long long v51 = xmmword_24619B530;
    uint64_t v48 = MEMORY[0x263F8EE78];
    uint64_t v45 = specialized static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(v32, &v54, (uint64_t)v79, (char *)v53, v38, &v52, (uint64_t)v49, &v48, 0.0, 0.0, 0.0, 0.0, *(double *)&v41, v33, v34, v35, v66, v67, 0.0,
            1);

    outlined release of Text.ResolvedProperties(v64);
    swift_release();
    swift_release();
    *(void *)a7 = v45;
    *(void *)(a7 + 8) = v12;
    *(_OWORD *)(a7 + 16) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(void *)(a7 + 80) = 0;
    *(unsigned char *)(a7 + 88) = 10;
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *GraphicsContext.draw(_:in:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  double v10 = *(void **)a1;
  if (*(_WORD *)(*(void *)a1 + 260))
  {
    unint64_t v13 = *(void **)a1;
    uint64_t v15 = *(void **)(a1 + 16);
    uint64_t v16 = *(void *)(a1 + 24);
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 40);
    uint64_t v19 = *(void *)(a1 + 48);
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    uint64_t v22 = *(void *)(a1 + 72);
    uint64_t v23 = *(void *)(a1 + 80);
    char v24 = *(unsigned char *)(a1 + 88);
    outlined copy of GraphicsContext.Shading.Storage(v15, v16, v17, v18, v19, v20, v21, v22, v23, v24);
    GraphicsContext.Shading.resolve(in:levels:)(a2, 1, v25);
    outlined consume of GraphicsContext.Shading.Storage(v15, v16, v17, v18, v19, v20, v21, v22, v23, v24);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v25, (uint64_t)v26, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v26, (uint64_t)v27, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    uint64_t result = (void *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg((uint64_t)v27);
    if (result != 1)
    {
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v27, (uint64_t)v25);
      GraphicsContext.draw(_:in:shading:)(v13, (uint64_t)v25, a2, a3, a4, a5, a6);
      return outlined retain of GraphicsContext.ResolvedShading(v26, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading?);
    }
  }
  else
  {
    swift_retain();
    uint64_t v11 = swift_retain();
    specialized GraphicsContext.withPlatformContext(content:)(v11, v10, a3, a4, a5, a6);
    swift_release();
    return (void *)swift_release();
  }
  return result;
}

uint64_t GraphicsContext.draw(_:in:)(void *a1, double a2, double a3, double a4, double a5)
{
  swift_retain();
  uint64_t v10 = swift_retain();
  specialized GraphicsContext.withPlatformContext(content:)(v10, a1, a2, a3, a4, a5);
  swift_release();

  return swift_release();
}

void GraphicsContext.draw(_:in:shading:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  outlined init with take of GraphicsContext.ResolvedShading(a2, (uint64_t)v124);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v124, (uint64_t)v125);
  int v10 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOg((uint64_t)v125);
  if (v10 == 2)
  {
    uint64_t v19 = (float *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v125);
    float v12 = *v19;
    float v14 = v19[1];
    float v16 = v19[2];
    float v18 = v19[3];
    goto LABEL_5;
  }
  if (v10 == 1)
  {
    _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v125);
    RBColorFromLinear();
    float v12 = v11;
    float v14 = v13;
    float v16 = v15;
    float v18 = v17;
LABEL_5:
    GraphicsContext.draw(_:in:sRGBColor:)(a1, a3, a4, a5, a6, a7, v12, v14, v16, v18);
    return;
  }
  id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
  objc_msgSend(v20, sel_setDefaultColorSpace_, 1);
  objc_msgSend(v20, sel_setDeviceScale_, GraphicsContext.userToDeviceScale.getter());
  LODWORD(v21) = 1.0;
  id v22 = objc_msgSend(v20, sel_beginCGContextWithAlpha_flags_, 0, v21);
  id v23 = objc_msgSend(objc_allocWithZone((Class)CoreGraphicsContext), sel_initWithCGContext_, v22);
  objc_msgSend(v23, sel_push);
  if (one-time initialization token for _textDrawingContext != -1) {
    swift_once();
  }
  uint64_t v24 = static GraphicsContext.Storage.Shared._textDrawingContext;
  if (a1[27])
  {
    swift_retain();
    BOOL v25 = NSAttributedString.isDynamic.getter();
  }
  else
  {
    swift_retain();
    BOOL v25 = 0;
  }
  (*(void (**)(void, BOOL, uint64_t, void, double, double, double, double, double, double))(*a1 + 288))(0, v25, v24, 0, a4, a5, a6, a7, a6, a7);
  swift_release();
  [v23 pop];

  objc_msgSend(v20, sel_endCGContext);
  id v95 = objc_msgSend(v20, sel_moveContents);
  uint64_t v26 = *(void *)(a3 + 16);
  long long v27 = *(void **)(v26 + 248);
  if (v27)
  {
    id v94 = v27;
    objc_msgSend(v94, sel_removeAll);
  }
  else
  {
    id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63878]), sel_init);
    long long v29 = *(void **)(v26 + 248);
    *(void *)(v26 + 248) = v28;
    id v94 = v28;
  }
  RBDrawingStateBeginLayer();
  if (one-time initialization token for keyColorAnyAlpha != -1) {
    swift_once();
  }
  LODWORD(v31) = HIDWORD(static RBColor.keyColorAnyAlpha);
  LODWORD(v30) = static RBColor.keyColorAnyAlpha;
  LODWORD(v32) = dword_26B111960;
  LODWORD(v33) = unk_26B111964;
  objc_msgSend(v94, sel_addConditionWithFillColor_colorSpace_, 2, v30, v31, v32, v33);
  objc_msgSend(v94, sel_setInvertsResult_, 1);
  objc_msgSend(v94, sel_copyFilteredDisplayList_, v95);
  RBDrawingStateDrawDisplayList();
  swift_unknownObjectRelease();
  objc_msgSend(v94, sel_setInvertsResult_, 0);
  double v34 = *(void **)(v26 + 256);
  if (v34)
  {
    id v93 = v34;
    objc_msgSend(v93, sel_removeAll);
  }
  else
  {
    id v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63880]), sel_init);
    uint64_t v36 = *(void **)(v26 + 256);
    *(void *)(v26 + 256) = v35;
    id v93 = v35;
  }
  uint64_t v37 = swift_bridgeObjectRetain();
  uint64_t v38 = specialized Sequence.reversed()(v37);
  uint64_t v39 = *(void *)(v38 + 16);
  long long v40 = (_DWORD *)MEMORY[0x263F638D8];
  if (v39)
  {
    id v91 = v20;
    int v41 = *MEMORY[0x263F638E0];
    int v42 = *MEMORY[0x263F638D8];
    int v43 = *(_DWORD *)(MEMORY[0x263F638D8] + 4);
    int v45 = *(_DWORD *)(MEMORY[0x263F638D8] + 8);
    int v44 = *(_DWORD *)(MEMORY[0x263F638D8] + 12);
    uint64_t v104 = v39 - 1;
    uint64_t v46 = 32;
    for (i = v38; ; uint64_t v38 = i)
    {
      uint64_t v99 = v46;
      uint64_t v47 = v38 + v46;
      long long v49 = *(_OWORD *)(v47 + 32);
      long long v48 = *(_OWORD *)(v47 + 48);
      long long v50 = *(_OWORD *)(v47 + 16);
      v106[0] = *(_OWORD *)v47;
      v106[1] = v50;
      long long v107 = v49;
      long long v108 = v48;
      uint64_t v51 = *(void *)(v47 + 112);
      long long v53 = *(_OWORD *)(v47 + 80);
      long long v52 = *(_OWORD *)(v47 + 96);
      long long v109 = *(_OWORD *)(v47 + 64);
      long long v110 = v53;
      long long v111 = v52;
      uint64_t v112 = v51;
      long long v54 = (void *)*((void *)&v106[0] + 1);
      uint64_t v103 = *(void *)&v106[0];
      unsigned __int8 v55 = v50;
      uint64_t v101 = (void *)v107;
      char v102 = (void *)*((void *)&v50 + 1);
      uint64_t v100 = *((void *)&v107 + 1);
      long long v56 = v108;
      long long v57 = v109;
      uint64_t v58 = v53;
      char v59 = BYTE8(v53);
      uint64_t v60 = v52;
      unsigned __int8 v61 = BYTE8(v52);
      uint64_t v113 = *((void *)&v106[0] + 1);
      long long v114 = v50;
      long long v115 = v107;
      long long v116 = v108;
      long long v117 = v109;
      uint64_t v118 = v53;
      char v119 = BYTE8(v53);
      int v120 = HIDWORD(v53);
      uint64_t v121 = v52;
      char v122 = BYTE8(v52);
      uint64_t v123 = v51;
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi3_((uint64_t)&v113);
      outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v106);
      outlined copy of _ShapeStyle_Pack.Fill(v54, v55, v102, v101, v100, v56, *((uint64_t *)&v56 + 1), v57, *((uint64_t *)&v57 + 1), v58, v59);
      outlined copy of GraphicsBlendMode?(v60, v61);
      swift_bridgeObjectRetain();
      uint64_t v62 = RBDrawingStateInit();
      RBDrawingStateBeginLayer();
      LODWORD(v63) = -1.0;
      LODWORD(v64) = -1.0;
      *(float *)&double v65 = (float)v103 * 0.00097656;
      LODWORD(v66) = v41;
      LODWORD(v67) = v42;
      LODWORD(v68) = v43;
      LODWORD(v69) = v45;
      LODWORD(v70) = v44;
      objc_msgSend(v93, sel_addColorReplacementFrom_to_colorSpace_, 2, v63, v64, v65, v66, v67, v68, v69, v70);
      RBDrawingStateAddTransformStyle();
      objc_msgSend(v94, sel_removeAll);
      LODWORD(v71) = -1.0;
      LODWORD(v72) = -1.0;
      *(float *)&double v73 = (float)v103 * 0.00097656;
      LODWORD(v74) = v41;
      objc_msgSend(v94, sel_addConditionWithFillColor_colorSpace_, 2, v71, v72, v73, v74);
      objc_msgSend(v94, sel_copyFilteredDisplayList_, v95);
      RBDrawingStateDrawDisplayList();
      swift_unknownObjectRelease();
      RBDrawingStateClipLayer();
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v113, (uint64_t)v105);
      GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)((uint64_t)v105, v62, 0, a3, a4, a5, a6, a7, 1.0);
      RBDrawingStateDestroy();
      outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v106);
      outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v106);
      if (!v104) {
        break;
      }
      --v104;
      uint64_t v46 = v99 + 120;
    }
    swift_bridgeObjectRelease();
    id v20 = v91;
    long long v40 = (_DWORD *)MEMORY[0x263F638D8];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for foregroundKeyColorAnyAlpha != -1) {
    swift_once();
  }
  uint64_t v75 = static RBColor.foregroundKeyColorAnyAlpha;
  int v76 = dword_26B111980;
  int v77 = dword_26B111984;
  uint64_t v78 = RBDrawingStateInit();
  RBDrawingStateBeginLayer();
  LODWORD(v79) = *v40;
  LODWORD(v80) = v40[1];
  LODWORD(v81) = v40[2];
  LODWORD(v82) = v40[3];
  LODWORD(v84) = HIDWORD(v75);
  LODWORD(v83) = v75;
  LODWORD(v85) = v76;
  LODWORD(v86) = v77;
  objc_msgSend(v93, sel_addColorReplacementFrom_to_colorSpace_, 2, v83, v84, v85, v86, v79, v80, v81, v82);
  RBDrawingStateAddTransformStyle();
  objc_msgSend(v94, sel_removeAll);
  LODWORD(v88) = HIDWORD(v75);
  LODWORD(v87) = v75;
  LODWORD(v89) = v76;
  LODWORD(v90) = v77;
  objc_msgSend(v94, sel_addConditionWithFillColor_colorSpace_, 2, v87, v88, v89, v90);
  objc_msgSend(v94, sel_copyFilteredDisplayList_, v95);
  RBDrawingStateDrawDisplayList();
  swift_unknownObjectRelease();
  RBDrawingStateClipLayer();
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v124, (uint64_t)&v113);
  GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)((uint64_t)&v113, v78, 0, a3, a4, a5, a6, a7, 1.0);
  RBDrawingStateDestroy();
  RBDrawingStateDrawLayer();

  swift_unknownObjectRelease();
}

void *GraphicsContext.draw(_:at:anchor:)(uint64_t *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v10 = *a1;
  long long v29 = (void *)a1[2];
  uint64_t v11 = a1[5];
  uint64_t v27 = a1[4];
  uint64_t v28 = a1[3];
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  uint64_t v14 = a1[8];
  uint64_t v15 = a1[9];
  uint64_t v26 = a1[10];
  char v25 = *((unsigned char *)a1 + 88);
  if (one-time initialization token for _textDrawingContext != -1) {
    swift_once();
  }
  float v16 = *(double (**)(uint64_t, double, double))(*(void *)v10 + 264);
  uint64_t v17 = swift_retain();
  double v18 = v16(v17, INFINITY, INFINITY);
  double v20 = v19;
  swift_release();
  double v21 = a3 - v18 * a5;
  double v22 = a4 - v20 * a6;
  if (*(_WORD *)(v10 + 260))
  {
    outlined copy of GraphicsContext.Shading.Storage(v29, v28, v27, v11, v12, v13, v14, v15, v26, v25);
    GraphicsContext.Shading.resolve(in:levels:)(a2, 1, v31);
    outlined consume of GraphicsContext.Shading.Storage(v29, v28, v27, v11, v12, v13, v14, v15, v26, v25);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v31, (uint64_t)v32, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v32, (uint64_t)v33, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    uint64_t result = (void *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg((uint64_t)v33);
    if (result != 1)
    {
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v33, (uint64_t)v31);
      GraphicsContext.draw(_:in:shading:)((void *)v10, (uint64_t)v31, a2, v21, v22, v18, v20);
      return outlined retain of GraphicsContext.ResolvedShading(v32, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading?);
    }
  }
  else
  {
    swift_retain();
    uint64_t v23 = swift_retain();
    specialized GraphicsContext.withPlatformContext(content:)(v23, (void *)v10, v21, v22, v18, v20);
    swift_release();
    return (void *)swift_release();
  }
  return result;
}

void *GraphicsContext.draw(_:in:)(uint64_t a1, void *a2, char a3, uint64_t a4, void *a5, double a6, double a7, double a8, double a9)
{
  GraphicsContext.resolve(_:)(a1, a2, a3 & 1, a4, a5, (uint64_t)&v35);
  uint64_t v13 = (void *)v35;
  uint64_t v14 = v36;
  char v15 = v37;
  uint64_t v17 = v38;
  uint64_t v16 = v39;
  uint64_t v19 = v40;
  uint64_t v18 = v41;
  uint64_t v20 = v43;
  uint64_t v31 = v42;
  uint64_t v28 = v44;
  uint64_t v29 = v43;
  char v27 = v45;
  if (*(_WORD *)(v35 + 260))
  {
    uint64_t v26 = (void *)v35;
    uint64_t v23 = v36;
    uint64_t v24 = v44;
    char v25 = v45;
    outlined copy of GraphicsContext.Shading.Storage(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45);
    GraphicsContext.Shading.resolve(in:levels:)((uint64_t)a5, 1, v32);
    outlined consume of GraphicsContext.Shading.Storage(v23, v15, v17, v16, v19, v18, v31, v20, v24, v25);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v32, (uint64_t)v33, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v33, (uint64_t)v34, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    if (_s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg((uint64_t)v34) != 1)
    {
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v34, (uint64_t)v32);
      GraphicsContext.draw(_:in:shading:)(v26, (uint64_t)v32, (uint64_t)a5, a6, a7, a8, a9);
      outlined retain of GraphicsContext.ResolvedShading(v33, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading?);
    }
    swift_release();
    swift_release();
    return outlined consume of GraphicsContext.Shading.Storage(v23, v15, v17, v16, v19, v18, v31, v29, v28, v27);
  }
  else
  {
    swift_retain();
    uint64_t v21 = swift_retain();
    specialized GraphicsContext.withPlatformContext(content:)(v21, v13, a6, a7, a8, a9);
    swift_release();
    swift_release_n();
    swift_release();
    return outlined consume of GraphicsContext.Shading.Storage(v14, v15, v17, v16, v19, v18, v31, v29, v28, v27);
  }
}

void *GraphicsContext.draw(_:at:anchor:)(uint64_t a1, void *a2, char a3, uint64_t a4, void *a5, double a6, double a7, double a8, double a9)
{
  GraphicsContext.resolve(_:)(a1, a2, a3 & 1, a4, a5, (uint64_t)v37);
  uint64_t v14 = v37[0];
  char v15 = (void *)v37[2];
  char v16 = v38;
  uint64_t v18 = v39;
  uint64_t v17 = v40;
  uint64_t v32 = v41;
  uint64_t v33 = v42;
  uint64_t v28 = v43;
  uint64_t v29 = v44;
  uint64_t v31 = v45;
  char v30 = v46;
  if (one-time initialization token for _textDrawingContext != -1) {
    swift_once();
  }
  uint64_t v19 = *(double (**)(uint64_t, double, double))(*(void *)v14 + 264);
  uint64_t v20 = swift_retain();
  double v21 = v19(v20, INFINITY, INFINITY);
  double v23 = v22;
  swift_release();
  double v24 = a6 - v21 * a8;
  double v25 = a7 - v23 * a9;
  if (*(_WORD *)(v14 + 260))
  {
    outlined copy of GraphicsContext.Shading.Storage(v15, v16, v18, v17, v32, v33, v28, v29, v31, v30);
    GraphicsContext.Shading.resolve(in:levels:)((uint64_t)a5, 1, v34);
    outlined consume of GraphicsContext.Shading.Storage(v15, v16, v18, v17, v32, v33, v28, v29, v31, v30);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v34, (uint64_t)v35, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v35, (uint64_t)v36, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    if (_s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg((uint64_t)v36) != 1)
    {
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v36, (uint64_t)v34);
      GraphicsContext.draw(_:in:shading:)((void *)v14, (uint64_t)v34, (uint64_t)a5, v24, v25, v21, v23);
      outlined retain of GraphicsContext.ResolvedShading(v35, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading?);
    }
    swift_release();
    swift_release();
    return outlined consume of GraphicsContext.Shading.Storage(v15, v16, v18, v17, v32, v33, v28, v29, v31, v30);
  }
  else
  {
    swift_retain();
    uint64_t v26 = swift_retain();
    specialized GraphicsContext.withPlatformContext(content:)(v26, (void *)v14, v24, v25, v21, v23);
    swift_release();
    swift_release_n();
    swift_release();
    return outlined consume of GraphicsContext.Shading.Storage(v15, v16, v18, v17, v32, v33, v28, v29, v31, v30);
  }
}

uint64_t GraphicsContext.ResolvedSymbol.list.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t GraphicsContext.ResolvedSymbol.list.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*GraphicsContext.ResolvedSymbol.list.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double GraphicsContext.ResolvedSymbol.size.getter()
{
  return *(double *)(v0 + 8);
}

void GraphicsContext.ResolvedSymbol.size.setter(double a1, double a2)
{
  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

uint64_t (*GraphicsContext.ResolvedSymbol.size.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t GraphicsContext.ResolvedSymbol.init(list:size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *(void *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  return result;
}

uint64_t GraphicsContext.draw(_:at:anchor:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double v5 = *(double *)(a1 + 8);
  double v6 = *(double *)(a1 + 16);
  if (v5 / v5 == 1.0 && a2 - v5 * a4 == 0.0 && (a3 - v6 * a5 == 0.0 ? (BOOL v7 = v6 / v6 == 1.0) : (BOOL v7 = 0), v7))
  {
    return RBDrawingStateDrawDisplayList2();
  }
  else
  {
    RBDrawingStateInit();
    RBDrawingStateTranslateCTM();
    RBDrawingStateScaleCTM();
    RBDrawingStateDrawDisplayList2();
    return RBDrawingStateDestroy();
  }
}

void GraphicsContext.withPlatformContext(content:)(void (*a1)(id), uint64_t a2, uint64_t a3)
{
  double v6 = (CGContext *)(id)RBDrawingStateBeginCGContext();
  BOOL v7 = v6;
  CGBlendMode v8 = *(_DWORD *)(a3 + 52);
  if (v8) {
    CGContextSetBlendMode(v6, v8);
  }
  uint64_t v9 = *(void *)(a3 + 56);
  BOOL v10 = (v9 & 0xFFFFFFFFFFFFFLL) == 0 || (~v9 & 0x7FF0000000000000) != 0;
  if (v10) {
    _CGContextSetShapeDistance(*(double *)(a3 + 56));
  }
  id v11 = objc_msgSend(objc_allocWithZone((Class)CoreGraphicsContext), sel_initWithCGContext_, v7);
  a1(objc_msgSend(v11, sel_push));
  if (v3)
  {
    [v11 pop];
  }
  else
  {
    [v11 pop];

    if (v10) {
      _CGContextSetShapeDistance(NAN);
    }
  }
  RBDrawingStateEndCGContext();
}

void GraphicsContextSymbols.symbol<A>(for:)()
{
}

uint64_t GraphicsContextSymbols.deinit()
{
  return v0;
}

uint64_t GraphicsContextSymbols.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t GraphicsContext.init(rbDisplayList:environment:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  swift_unknownObjectRetain();
  self;
  uint64_t v4 = (void *)swift_dynamicCastObjCClassUnconditional();
  type metadata accessor for GraphicsContext.Storage();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 32) = xmmword_24619B520;
  *(void *)(v5 + 48) = 1065353216;
  *(void *)(v5 + 56) = 0x7FF8000000000000;
  v9[0] = v2;
  v9[1] = v3;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  id v6 = v4;
  *(void *)(v5 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v6, v9);
  uint64_t State = RBDisplayListGetState();
  swift_unknownObjectRelease();

  *(void *)(v5 + 24) = State;
  *(unsigned char *)(v5 + 64) = 0;
  return v5;
}

uint64_t GraphicsContext.rbDrawingState.getter()
{
  uint64_t v1 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v2 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v3 = swift_retain();
    *(void *)uint64_t v1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v3, v2, 1, 0);
    swift_release();
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)uint64_t v1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v5, v4, 1, 0);
    swift_release();
  }
  return *(void *)(*(void *)v1 + 24);
}

uint64_t GraphicsContext.draw(rbDisplayList:)()
{
  return RBDrawingStateDrawDisplayList2();
}

void *GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, double a5, double a6, double a7, double a8, float a9)
{
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v19 = *(void *)(a1 + 64);
  char v20 = *(unsigned char *)(a1 + 72);
  switch(v20)
  {
    case 0:
      objc_msgSend(*(id *)(a4[2] + 32), sel_setInfinite);
      uint64_t v26 = RBDrawingStateInit();
      RBDrawingStateClipShape();
      GraphicsContext.beginLayerWithBackdrop(color:in:)(*(float *)&v11, *((float *)&v11 + 1), *(float *)&v12, *((float *)&v12 + 1), v26, (uint64_t)a4);
      RBDrawingStateDrawLayer();
      return (void *)RBDrawingStateDestroy();
    case 4:
      int v79 = a3;
      uint64_t v28 = a4[5];
      uint64_t v73 = a4[4];
      uint64_t v29 = v73;
      uint64_t v72 = *(void *)(a1 + 64);
      if (v73 == 1)
      {
        uint64_t v30 = a4[2];
        uint64_t v29 = *(void *)(v30 + 48);
        uint64_t v28 = *(void *)(v30 + 56);
        swift_retain();
        swift_retain();
        uint64_t v19 = v72;
      }
      v82[0] = 0;
      v82[1] = 0;
      v82[2] = 1;
      char v83 = 1;
      uint64_t v84 = 0;
      char v85 = 5;
      uint64_t v86 = v29;
      uint64_t v87 = v28;
      long long v88 = 0u;
      long long v89 = 0u;
      uint64_t v90 = 0;
      char v91 = 1;
      __int16 v92 = 0;
      double v70 = *(void (**)(void *))(*(void *)v11 + 80);
      outlined copy of GraphicsContext.Shading.Storage((void *)v11, v12, v13, v14, v15, v16, v18, v17, v19, 4);
      outlined copy of EnvironmentValues?(v73);
      v70(v82);
      uint64_t v31 = v84;
      char v74 = v85;
      uint64_t v71 = v84;
      if (v85 == 1) {
        swift_bridgeObjectRetain();
      }
      else {
        uint64_t v31 = MEMORY[0x263F8EE78];
      }
      uint64_t v93 = v31;
      LOBYTE(v123[0]) = 0;
      _ShapeStyle_Pack.subscript.getter((unsigned __int8 *)v123, 0, (uint64_t)&v108);
      swift_bridgeObjectRelease();
      unsigned __int8 v68 = v109;
      uint64_t v69 = v108;
      unsigned __int8 v66 = v111;
      uint64_t v67 = v110;
      uint64_t v64 = v113;
      uint64_t v65 = v112;
      uint64_t v62 = v115;
      uint64_t v63 = v114;
      uint64_t v59 = v116;
      uint64_t v51 = v117;
      char v52 = v118;
      uint64_t v61 = v120;
      unsigned __int8 v60 = v121;
      uint64_t v93 = v108;
      uint64_t v94 = v109;
      uint64_t v95 = v110;
      uint64_t v96 = v111;
      uint64_t v97 = v112;
      uint64_t v98 = v113;
      uint64_t v99 = v114;
      uint64_t v100 = v115;
      uint64_t v101 = v116;
      uint64_t v102 = v117;
      char v103 = v118;
      int v104 = v119;
      uint64_t v105 = v120;
      unsigned __int8 v106 = v121;
      uint64_t v107 = v122;
      *(double *)uint64_t v123 = a5;
      *(double *)&v123[1] = a6;
      *(double *)&v123[2] = a7;
      *(double *)&_OWORD v123[3] = a8;
      char v124 = 0;
      GraphicsContext.draw(style:bounds:in:alpha:blendMode:)(&v93, (uint64_t)v123, a2, v79, (uint64_t)a4, a9);
      outlined consume of GraphicsContext.Shading.Storage((void *)v11, v12, v13, v14, v15, v16, v18, v17, v72, 4);
      outlined consume of _ShapeStyle_Pack.Fill(v69, v68, v67, v66, v65, v64, v63, v62, v59, v51, v52);
      outlined consume of GraphicsBlendMode?(v61, v60);
      swift_bridgeObjectRelease();
      outlined consume of _ShapeStyle_Shape.Result(v71, v74);
      swift_release();
      swift_release();
      return (void *)swift_release();
    case 8:
      unsigned int v80 = a3;
      if (!*(void *)(v11 + 16))
      {
        __break(1u);
        JUMPOUT(0x245D5BE10);
      }
      uint64_t v32 = *(void **)(v11 + 32);
      uint64_t v33 = *(void *)(v11 + 40);
      uint64_t v34 = *(void *)(v11 + 48);
      uint64_t v35 = *(void *)(v11 + 56);
      uint64_t v36 = *(void *)(v11 + 64);
      uint64_t v37 = *(void *)(v11 + 72);
      uint64_t v38 = *(void *)(v11 + 80);
      uint64_t v39 = *(void *)(v11 + 88);
      uint64_t v40 = *(void *)(v11 + 96);
      char v41 = *(unsigned char *)(v11 + 104);
      uint64_t v108 = (uint64_t)v32;
      uint64_t v109 = v33;
      uint64_t v110 = v34;
      uint64_t v111 = v35;
      uint64_t v112 = v36;
      uint64_t v113 = v37;
      uint64_t v114 = v38;
      uint64_t v115 = v39;
      uint64_t v116 = v40;
      LOBYTE(v117) = v41;
      outlined copy of GraphicsContext.Shading.Storage(v32, v33, v34, v35, v36, v37, v38, v39, v40, v41);
      GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)(&v108, a2, v80, a4, a5, a6, a7, a8, a9);
      return outlined consume of GraphicsContext.Shading.Storage(v32, v33, v34, v35, v36, v37, v38, v39, v40, v41);
    case 9:
      outlined init with take of GraphicsContext.ResolvedShading(v11 + 16, (uint64_t)&v108);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v108, (uint64_t)&v93);
      outlined retain of GraphicsContext.ResolvedShading(&v108, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of GraphicsContext.ResolvedShading);
      GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)((uint64_t)&v93, a2, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      uint64_t v43 = &v108;
      goto LABEL_25;
    case 10:
      if (v12 | v11 | v13 | v14 | v15 | v16 | v18 | v17 | v19) {
        goto LABEL_13;
      }
      uint64_t v54 = a4[2];
      uint64_t v55 = a4[4];
      if (v55 == 1)
      {
        uint64_t v57 = *(void *)(v54 + 48);
        uint64_t v58 = *(void *)(v54 + 56);
        swift_retain();
        swift_retain();
      }
      else
      {
        uint64_t v58 = a4[5];
        uint64_t v57 = a4[4];
      }
      uint64_t v93 = v57;
      uint64_t v94 = v58;
      outlined copy of EnvironmentValues?(v55);
      GraphicsContext.Storage.Shared.resolvedForeground(in:)(&v93, (uint64_t)&v108);
      swift_release();
      swift_release();
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v108, (uint64_t)&v93);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v93, (uint64_t)v82);
      GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)((uint64_t)v82, a2, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      uint64_t v43 = &v93;
LABEL_25:
      uint64_t result = outlined retain of GraphicsContext.ResolvedShading(v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading);
      break;
    default:
LABEL_13:
      uint64_t v75 = a4[2];
      uint64_t v78 = *(void *)(a1 + 48);
      uint64_t v44 = *(void *)(a1 + 56);
      uint64_t v45 = *(void *)(a1 + 16);
      uint64_t v47 = *(void *)(a1 + 64);
      objc_msgSend(*(id *)(v75 + 32), sel_setInfinite);
      uint64_t v108 = v11;
      uint64_t v109 = v12;
      uint64_t v110 = v45;
      uint64_t v111 = v14;
      uint64_t v112 = v15;
      uint64_t v113 = v16;
      uint64_t v114 = v78;
      uint64_t v115 = v44;
      uint64_t v116 = v47;
      LOBYTE(v117) = v20;
      uint64_t v48 = a4[4];
      if (v48 == 1)
      {
        uint64_t v49 = *(void *)(v75 + 48);
        uint64_t v50 = *(void *)(v75 + 56);
        swift_retain();
        swift_retain();
      }
      else
      {
        uint64_t v50 = a4[5];
        uint64_t v49 = a4[4];
      }
      uint64_t v93 = v49;
      uint64_t v94 = v50;
      outlined copy of EnvironmentValues?(v48);
      GraphicsContext.Storage.Shared.setShading(_:in:)((uint64_t)&v108, &v93);
      swift_release();
      swift_release();
      uint64_t result = (void *)RBDrawingStateDrawShape();
      break;
  }
  return result;
}

void GraphicsContext.draw(_:in:sRGBColor:)(void *a1, uint64_t a2, double a3, double a4, double a5, double a6, float a7, float a8, float a9, float a10)
{
  RBDrawingStateBeginLayer();
  uint64_t v20 = *(void *)(a2 + 16);
  double v21 = *(void **)(v20 + 256);
  if (v21)
  {
    id v36 = v21;
    objc_msgSend(v36, sel_removeAll);
  }
  else
  {
    id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63880]), sel_init);
    uint64_t v31 = *(void **)(v20 + 256);
    *(void *)(v20 + 256) = v30;
    id v36 = v30;
  }
  if (one-time initialization token for foregroundKeyColorAnyAlpha != -1) {
    swift_once();
  }
  LODWORD(v23) = HIDWORD(static RBColor.foregroundKeyColorAnyAlpha);
  LODWORD(v22) = static RBColor.foregroundKeyColorAnyAlpha;
  LODWORD(v24) = dword_26B111980;
  LODWORD(v25) = dword_26B111984;
  *(float *)&double v26 = a7;
  *(float *)&double v27 = a8;
  *(float *)&double v28 = a9;
  *(float *)&double v29 = a10;
  objc_msgSend(v36, sel_addColorReplacementFrom_to_colorSpace_, 1, v22, v23, v24, v25, v26, v27, v28, v29);
  RBDrawingStateAddTransformStyle();
  id v32 = (id)RBDrawingStateBeginCGContext();
  id v33 = objc_msgSend(objc_allocWithZone((Class)CoreGraphicsContext), sel_initWithCGContext_, v32);
  objc_msgSend(v33, sel_push);
  if (one-time initialization token for _textDrawingContext != -1) {
    swift_once();
  }
  uint64_t v34 = static GraphicsContext.Storage.Shared._textDrawingContext;
  if (a1[27])
  {
    swift_retain();
    BOOL v35 = NSAttributedString.isDynamic.getter();
  }
  else
  {
    swift_retain();
    BOOL v35 = 0;
  }
  (*(void (**)(void, BOOL, uint64_t, void, double, double, double, double, double, double))(*a1 + 288))(0, v35, v34, 0, a3, a4, a5, a6, a5, a6);
  swift_release();
  [v33 pop];

  RBDrawingStateEndCGContext();
  RBDrawingStateDrawLayer();
}

void *GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, float a9)
{
  outlined init with take of GraphicsContext.ResolvedShading(a1, (uint64_t)v45);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v45, (uint64_t)v46);
  int v17 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOg((uint64_t)v46);
  if (v17 == 8)
  {
    uint64_t result = (void *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v46);
    if (*(void *)(*result + 16))
    {
      outlined init with take of GraphicsContext.ResolvedShading(*result + 32, (uint64_t)v42);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v42, (uint64_t)v36);
      outlined retain of GraphicsContext.ResolvedShading(v42, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of GraphicsContext.ResolvedShading);
      GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)(v36, a2, a3, a4, a5, a6, a7, a8, a9);
      return outlined retain of GraphicsContext.ResolvedShading(v42, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading);
    }
    else
    {
      __break(1u);
    }
  }
  else if (v17 == 4)
  {
    uint64_t v25 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v46);
    char v26 = *(unsigned char *)(v25 + 80);
    int v27 = *(_DWORD *)(v25 + 84);
    uint64_t v28 = *(void *)(v25 + 88);
    char v29 = *(unsigned char *)(v25 + 96);
    uint64_t v30 = *(void *)(v25 + 104);
    long long v31 = *(_OWORD *)(v25 + 16);
    v36[0] = *(_OWORD *)v25;
    v36[1] = v31;
    long long v32 = *(_OWORD *)(v25 + 48);
    v36[2] = *(_OWORD *)(v25 + 32);
    v36[3] = v32;
    v36[4] = *(_OWORD *)(v25 + 64);
    char v37 = v26;
    int v38 = v27;
    uint64_t v39 = v28;
    char v40 = v29;
    uint64_t v41 = v30;
    *(double *)uint64_t v43 = a5;
    *(double *)&v43[1] = a6;
    *(double *)&v43[2] = a7;
    *(double *)&v43[3] = a8;
    char v44 = 0;
    outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v45, (uint64_t)v42);
    uint64_t v33 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v42);
    uint64_t v34 = *(void *)(v33 + 88);
    unsigned __int8 v35 = *(unsigned char *)(v33 + 96);
    outlined copy of _ShapeStyle_Pack.Fill(*(id *)v33, *(void *)(v33 + 8), *(void **)(v33 + 16), *(void **)(v33 + 24), *(void *)(v33 + 32), *(void *)(v33 + 40), *(void *)(v33 + 48), *(void *)(v33 + 56), *(void *)(v33 + 64), *(void *)(v33 + 72), *(unsigned char *)(v33 + 80));
    outlined copy of GraphicsBlendMode?(v34, v35);
    swift_bridgeObjectRetain();
    GraphicsContext.draw(style:bounds:in:alpha:blendMode:)((uint64_t *)v36, (uint64_t)v43, a2, a3, a4, a9);
    return outlined retain of GraphicsContext.ResolvedShading(v45, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading);
  }
  else if (v17)
  {
    objc_msgSend(*(id *)(*(void *)(a4 + 16) + 32), sel_setInfinite);
    outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v45, (uint64_t)v42);
    GraphicsContext.Storage.Shared.setShading(_:)((uint64_t)v42);
    return (void *)RBDrawingStateDrawShape();
  }
  else
  {
    uint64_t v18 = (float *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v46);
    float v19 = *v18;
    float v20 = v18[1];
    float v21 = v18[2];
    float v22 = v18[3];
    objc_msgSend(*(id *)(*(void *)(a4 + 16) + 32), sel_setInfinite);
    uint64_t v23 = RBDrawingStateInit();
    RBDrawingStateClipShape();
    GraphicsContext.beginLayerWithBackdrop(color:in:)(v19, v20, v21, v22, v23, a4);
    RBDrawingStateDrawLayer();
    return (void *)RBDrawingStateDestroy();
  }
  return result;
}

uint64_t specialized Sequence.reversed()(uint64_t a1)
{
  uint64_t v1 = (void *)specialized _copySequenceToContiguousArray<A>(_:)(a1);
  unint64_t v2 = v1[2];
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 < 2) {
    return (uint64_t)v1;
  }
  unint64_t v4 = 0;
  unint64_t v5 = v2 >> 1;
  unint64_t v6 = v2 - 1;
  uint64_t v7 = 120 * v2 - 88;
  for (uint64_t i = 4; ; i += 15)
  {
    if (v4 == v6) {
      goto LABEL_4;
    }
    unint64_t v9 = v1[2];
    if (v4 >= v9) {
      break;
    }
    long long v10 = *(_OWORD *)&v1[i];
    long long v11 = *(_OWORD *)&v1[i + 2];
    long long v12 = *(_OWORD *)&v1[i + 6];
    long long v54 = *(_OWORD *)&v1[i + 4];
    long long v55 = v12;
    long long v52 = v10;
    long long v53 = v11;
    long long v13 = *(_OWORD *)&v1[i + 8];
    long long v14 = *(_OWORD *)&v1[i + 10];
    long long v15 = *(_OWORD *)&v1[i + 12];
    uint64_t v59 = v1[i + 14];
    long long v57 = v14;
    long long v58 = v15;
    long long v56 = v13;
    if (v6 >= v9) {
      goto LABEL_13;
    }
    long long v16 = *(_OWORD *)((char *)v1 + v7);
    long long v17 = *(_OWORD *)((char *)v1 + v7 + 16);
    long long v18 = *(_OWORD *)((char *)v1 + v7 + 48);
    long long v62 = *(_OWORD *)((char *)v1 + v7 + 32);
    long long v63 = v18;
    long long v60 = v16;
    long long v61 = v17;
    long long v19 = *(_OWORD *)((char *)v1 + v7 + 64);
    long long v20 = *(_OWORD *)((char *)v1 + v7 + 80);
    long long v21 = *(_OWORD *)((char *)v1 + v7 + 96);
    uint64_t v67 = *(void *)((char *)v1 + v7 + 112);
    long long v65 = v20;
    long long v66 = v21;
    long long v64 = v19;
    outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v52);
    outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v60);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    }
    float v22 = &v1[i];
    long long v23 = *(_OWORD *)&v1[i];
    long long v24 = *(_OWORD *)&v1[i + 2];
    long long v25 = *(_OWORD *)&v1[i + 6];
    v48[2] = *(_OWORD *)&v1[i + 4];
    v48[3] = v25;
    v48[0] = v23;
    v48[1] = v24;
    long long v26 = *(_OWORD *)&v1[i + 8];
    long long v27 = *(_OWORD *)&v1[i + 10];
    long long v28 = *(_OWORD *)&v1[i + 12];
    uint64_t v49 = v1[i + 14];
    v48[5] = v27;
    v48[6] = v28;
    v48[4] = v26;
    uint64_t result = outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v48);
    long long v29 = v60;
    long long v30 = v61;
    long long v31 = v63;
    *((_OWORD *)v22 + 2) = v62;
    *((_OWORD *)v22 + 3) = v31;
    *(_OWORD *)float v22 = v29;
    *((_OWORD *)v22 + 1) = v30;
    long long v32 = v64;
    long long v33 = v65;
    long long v34 = v66;
    v22[14] = v67;
    *((_OWORD *)v22 + 5) = v33;
    *((_OWORD *)v22 + 6) = v34;
    *((_OWORD *)v22 + 4) = v32;
    if (v6 >= v1[2]) {
      goto LABEL_14;
    }
    unsigned __int8 v35 = (char *)v1 + v7;
    long long v36 = *(_OWORD *)((char *)v1 + v7);
    long long v37 = *(_OWORD *)((char *)v1 + v7 + 16);
    long long v38 = *(_OWORD *)((char *)v1 + v7 + 48);
    v50[2] = *(_OWORD *)((char *)v1 + v7 + 32);
    v50[3] = v38;
    v50[0] = v36;
    v50[1] = v37;
    long long v39 = *(_OWORD *)((char *)v1 + v7 + 64);
    long long v40 = *(_OWORD *)((char *)v1 + v7 + 80);
    long long v41 = *(_OWORD *)((char *)v1 + v7 + 96);
    uint64_t v51 = *(void *)((char *)v1 + v7 + 112);
    uint64_t v50[5] = v40;
    v50[6] = v41;
    v50[4] = v39;
    uint64_t result = outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v50);
    long long v42 = v55;
    long long v44 = v52;
    long long v43 = v53;
    *((_OWORD *)v35 + 2) = v54;
    *((_OWORD *)v35 + 3) = v42;
    *(_OWORD *)unsigned __int8 v35 = v44;
    *((_OWORD *)v35 + 1) = v43;
    long long v46 = v57;
    long long v45 = v58;
    long long v47 = v56;
    *((void *)v35 + 14) = v59;
    *((_OWORD *)v35 + 5) = v46;
    *((_OWORD *)v35 + 6) = v45;
    *((_OWORD *)v35 + 4) = v47;
LABEL_4:
    ++v4;
    --v6;
    v7 -= 120;
    if (v5 == v4) {
      return (uint64_t)v1;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t GraphicsContext.draw(style:bounds:in:alpha:blendMode:)(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, float a6)
{
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  uint64_t v11 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v12 = a1[5];
  uint64_t v14 = a1[6];
  uint64_t v15 = a1[7];
  uint64_t v16 = a1[8];
  uint64_t v17 = a1[9];
  char v18 = *((unsigned char *)a1 + 80);
  int v19 = *((_DWORD *)a1 + 21);
  uint64_t v20 = a1[11];
  char v21 = *((unsigned char *)a1 + 96);
  uint64_t v22 = a1[13];
  uint64_t v61 = *a1;
  uint64_t v62 = v9;
  uint64_t v63 = v10;
  uint64_t v64 = v11;
  uint64_t v65 = v13;
  uint64_t v66 = v12;
  uint64_t v67 = v14;
  uint64_t v68 = v15;
  uint64_t v52 = v17;
  uint64_t v53 = v16;
  uint64_t v69 = v16;
  uint64_t v70 = v17;
  char v51 = v18;
  char v71 = v18;
  int v72 = v19;
  uint64_t v50 = v20;
  uint64_t v73 = v20;
  char v49 = v21;
  char v74 = v21;
  uint64_t v48 = v22;
  uint64_t v75 = v22;
  long long v23 = _ShapeStyle_Pack.Style.color.getter();
  if (v25)
  {
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v37 = swift_retain();
    uint64_t v38 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v37, a3, 0, 0);
    *(float *)(v38 + 48) = a6;
    *(_DWORD *)(v38 + 52) = a4;
    uint64_t v61 = v8;
    uint64_t v62 = v9;
    uint64_t v63 = v10;
    uint64_t v64 = v11;
    uint64_t v65 = v13;
    uint64_t v66 = v12;
    uint64_t v67 = v14;
    uint64_t v68 = v15;
    uint64_t v69 = v53;
    uint64_t v70 = v52;
    char v71 = v51;
    int v72 = v19;
    uint64_t v73 = v50;
    char v74 = v49;
    uint64_t v75 = v48;
    uint64_t v40 = *MEMORY[0x263F00190];
    CGFloat v39 = *(double *)(MEMORY[0x263F00190] + 8);
    CGFloat v42 = *(double *)(MEMORY[0x263F00190] + 16);
    CGFloat v41 = *(double *)(MEMORY[0x263F00190] + 24);
    v79.origin.double x = *(CGFloat *)MEMORY[0x263F00190];
    v79.origin.double y = v39;
    v79.size.double width = v42;
    v79.size.double height = v41;
    if (CGRectIsNull(v79))
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      unsigned __int8 v47 = 6;
    }
    else
    {
      unsigned __int8 v47 = 0;
      uint64_t v43 = v40;
      uint64_t v44 = *(void *)&v39;
      uint64_t v45 = *(void *)&v42;
      uint64_t v46 = *(void *)&v41;
    }
    v76[0] = v43;
    v76[1] = v44;
    v76[2] = v45;
    v76[3] = v46;
    unsigned __int8 v77 = v47;
    uint64_t v57 = 256;
    long long v58 = 0u;
    long long v59 = 0u;
    char v60 = 0;
    swift_retain();
    _ShapeStyle_Pack.Style.draw(_:style:in:bounds:)(v76, &v57, v38, a2);
    outlined consume of Path.Storage(v43, v44, v45, v46, v47);
    return swift_release_n();
  }
  else
  {
    int v27 = HIDWORD(v23);
    int v26 = (int)v23;
    int v29 = HIDWORD(v24);
    int v28 = v24;
    uint64_t v30 = *(void *)(a5 + 16);
    objc_msgSend(*(id *)(v30 + 32), sel_setInfinite);
    unsigned __int8 v35 = *(void **)(v30 + 40);
    if (*(_DWORD *)(v30 + 64) != 2)
    {
      RBColorFromLinear();
      int v26 = LODWORD(v31);
      int v27 = LODWORD(v32);
      int v28 = LODWORD(v33);
      int v29 = LODWORD(v34);
    }
    LODWORD(v31) = v26;
    LODWORD(v32) = v27;
    LODWORD(v33) = v28;
    LODWORD(v34) = v29;
    objc_msgSend(v35, sel_setColor_, v31, v32, v33, v34);
    *(void *)(v30 + 264) = 0;
    swift_release();
    return RBDrawingStateDrawShape();
  }
}

uint64_t GraphicsContext.beginLayerWithBackdrop(color:in:)(float a1, float a2, float a3, float a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = RBDrawingStateBeginLayer();
  if (a4 != 0.0)
  {
    uint64_t v12 = *(void *)(a6 + 16);
    objc_msgSend(*(id *)(v12 + 32), sel_setInfinite);
    uint64_t v17 = *(void **)(v12 + 40);
    if (*(_DWORD *)(v12 + 64) != 2)
    {
      RBColorFromLinear();
      a1 = *(float *)&v13;
      a2 = *(float *)&v14;
      a3 = *(float *)&v15;
      a4 = *(float *)&v16;
    }
    *(float *)&double v13 = a1;
    *(float *)&double v14 = a2;
    *(float *)&double v15 = a3;
    *(float *)&double v16 = a4;
    objc_msgSend(v17, sel_setColor_, v13, v14, v15, v16);
    *(void *)(v12 + 264) = 0;
    swift_release();
    RBDrawingStateDrawShape();
  }
  return v11;
}

BOOL GraphicsContext.Shading.isMultiLevel(in:)(void *a1)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v10 = *(void *)(v1 + 64);
  int v11 = *(unsigned __int8 *)(v1 + 72);
  if (v11 == 4)
  {
    uint64_t v13 = a1[4];
    if (v13 == 1)
    {
      uint64_t v14 = a1[2];
      uint64_t v23 = *(void *)(v14 + 56);
      uint64_t v24 = *(void *)(v14 + 48);
      uint64_t v15 = *(void *)(v1 + 56);
      swift_retain();
      swift_retain();
      uint64_t v8 = v15;
      uint64_t v13 = 1;
    }
    else
    {
      uint64_t v23 = a1[5];
      uint64_t v24 = a1[4];
    }
    uint64_t v22 = v8;
    outlined copy of GraphicsContext.Shading.Storage((void *)v2, v3, v4, v5, v6, v7, v9, v8, v10, 4);
    outlined copy of EnvironmentValues?(v13);
    char v21 = specialized ShapeStyle.isMultiLevel(in:)(v24, v23, v2);
    swift_release();
    swift_release();
    outlined consume of GraphicsContext.Shading.Storage((void *)v2, v3, v4, v5, v6, v7, v9, v22, v10, 4);
    return v21 & 1;
  }
  else if (v11 == 8)
  {
    return *(void *)(v2 + 16) > 1uLL;
  }
  else if (v11 == 10 && !(v3 | v2 | v4 | v5 | v6 | v7 | v9 | v8 | v10))
  {
    uint64_t v16 = a1[4];
    if (v16 == 1)
    {
      uint64_t v17 = a1[2];
      uint64_t v18 = *(void *)(v17 + 48);
      uint64_t v19 = *(void *)(v17 + 56);
      swift_retain();
      swift_retain();
    }
    else
    {
      uint64_t v19 = a1[5];
      uint64_t v18 = a1[4];
    }
    outlined copy of EnvironmentValues?(v16);
    swift_retain();
    swift_retain();
    char v20 = specialized ShapeStyle.isMultiLevel(in:)(v18, v19);
    swift_release_n();
    swift_release_n();
    return v20 & 1;
  }
  else
  {
    return 0;
  }
}

void *GraphicsContext.addVariableBlurFilter(radius:mask:flags:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = v3;
  outlined init with take of GraphicsContext.ResolvedShading(a1, (uint64_t)v47);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v47, (uint64_t)v48);
  int v7 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOg((uint64_t)v48);
  if (v7 == 8)
  {
    uint64_t v16 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v48);
    if (!*(void *)(*(void *)v16 + 16))
    {
      __break(1u);
      JUMPOUT(0x245D5CF6CLL);
    }
    outlined init with take of GraphicsContext.ResolvedShading(*(void *)v16 + 32, (uint64_t)v44);
    outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v44, (uint64_t)v36);
    return (void *)GraphicsContext.addVariableBlurFilter(radius:mask:flags:)(v36, a2, a3);
  }
  else if (v7 == 4)
  {
    uint64_t v17 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v48);
    long long v34 = *(_OWORD *)(v17 + 16);
    long long v35 = *(_OWORD *)v17;
    long long v32 = *(_OWORD *)(v17 + 48);
    long long v33 = *(_OWORD *)(v17 + 32);
    uint64_t v18 = *(void *)(v17 + 64);
    uint64_t v19 = *(void *)(v17 + 72);
    char v20 = *(unsigned char *)(v17 + 80);
    int v21 = *(_DWORD *)(v17 + 84);
    uint64_t v22 = *(void *)(v17 + 88);
    char v23 = *(unsigned char *)(v17 + 96);
    uint64_t v31 = *(void *)(v17 + 104);
    outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v47, (uint64_t)v44);
    uint64_t v24 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v44);
    uint64_t v25 = *(void *)(v24 + 88);
    unsigned __int8 v26 = *(unsigned char *)(v24 + 96);
    outlined copy of _ShapeStyle_Pack.Fill(*(id *)v24, *(void *)(v24 + 8), *(void **)(v24 + 16), *(void **)(v24 + 24), *(void *)(v24 + 32), *(void *)(v24 + 40), *(void *)(v24 + 48), *(void *)(v24 + 56), *(void *)(v24 + 64), *(void *)(v24 + 72), *(unsigned char *)(v24 + 80));
    outlined copy of GraphicsBlendMode?(v25, v26);
    swift_bridgeObjectRetain();
    uint64_t v27 = RBDrawingStateBeginLayer();
    uint64_t v28 = *v3;
    v36[0] = v35;
    v36[1] = v34;
    v36[2] = v33;
    v36[3] = v32;
    uint64_t v37 = v18;
    uint64_t v38 = v19;
    char v39 = v20;
    int v40 = v21;
    uint64_t v41 = v22;
    char v42 = v23;
    uint64_t v43 = v31;
    memset(v45, 0, sizeof(v45));
    char v46 = 1;
    GraphicsContext.draw(style:bounds:in:alpha:blendMode:)((uint64_t *)v36, (uint64_t)v45, v27, 0, v28, 1.0);
    RBDrawingStateAddVariableBlurLayer();
    return outlined retain of GraphicsContext.ResolvedShading(v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading);
  }
  else if (v7)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v29 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v30 = swift_retain();
      *uint64_t v4 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v30, v29, 1, 0);
      swift_release();
    }
    outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v47, (uint64_t)v44);
    swift_retain();
    GraphicsContext.Storage.Shared.setShading(_:)((uint64_t)v44);
    swift_release();
    return (void *)RBDrawingStateAddVariableBlurFilter();
  }
  else
  {
    uint64_t v8 = (float *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v48);
    float v9 = *v8;
    float v10 = v8[1];
    float v11 = v8[2];
    float v12 = v8[3];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v13 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v14 = swift_retain();
      *uint64_t v4 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v14, v13, 1, 0);
      swift_release();
    }
    GraphicsContext.beginLayerWithBackdrop(color:in:)(v9, v10, v11, v12, *(void *)(*v4 + 24), *v4);
    return (void *)RBDrawingStateAddVariableBlurLayer();
  }
}

id RBShape.setStrokedPath(_:style:)(uint64_t a1, double *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *((void *)a2 + 3);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
LABEL_2:
    uint64_t v7 = Path.retainRBPath()();
    double v8 = *a2;
    uint64_t v9 = *((unsigned int *)a2 + 2);
    uint64_t v10 = *((unsigned int *)a2 + 3);
    double v11 = a2[2];
    double v12 = a2[4];
    v31[0] = 0x3FF0000000000000;
    v31[1] = 0;
    v31[2] = 0;
    void v31[3] = 0x3FF0000000000000;
    v31[4] = 0;
    v31[5] = 0;
    objc_msgSend(v2, sel_setStrokedRBPath_transform_lineWidth_lineCap_lineJoin_miterLimit_dashPhase_dashPattern_dashCount_, v7, v13, v31, v9, v10, v5 + 32, v8, v11, v12, v6);
    return (id)RBPathRelease();
  }
  else
  {
    outlined init with take of Path.Storage(a1, (uint64_t)v32);
    outlined init with take of Path.Storage((uint64_t)v32, (uint64_t)&v33);
    switch(v35)
    {
      case 0:
        if (*((_DWORD *)a2 + 3) || a2[2] < 1.4142) {
          goto LABEL_2;
        }
        id result = objc_msgSend(v2, sel_setStrokedRect_lineWidth_, *(_OWORD *)&v33, *(_OWORD *)&v34, *a2);
        break;
      case 1:
        CGPoint v15 = (CGPoint)v33;
        CGSize v16 = (CGSize)v34;
        v36.origin = (CGPoint)v33;
        v36.size = (CGSize)v34;
        double Width = CGRectGetWidth(v36);
        v37.origin = v15;
        v37.size = v16;
        if (Width != CGRectGetHeight(v37)) {
          goto LABEL_2;
        }
        v38.origin = v15;
        v38.size = v16;
        CGFloat v18 = v15.x + CGRectGetWidth(v38) * 0.5;
        v39.origin = v15;
        v39.size = v16;
        CGFloat v19 = v15.y + CGRectGetHeight(v39) * 0.5;
        v40.origin = v15;
        v40.size = v16;
        id result = objc_msgSend(v2, sel_setStrokedCircleAtPoint_radius_lineWidth_, v18, v19, CGRectGetWidth(v40) * 0.5, *a2);
        break;
      case 2:
        double v20 = *(double *)(v33.i64[0] + 48);
        if (v20 != *(double *)(v33.i64[0] + 56)) {
          goto LABEL_2;
        }
        uint64_t v21 = *(unsigned __int8 *)(v33.i64[0] + 64);
        double v23 = *(double *)(v33.i64[0] + 32);
        double v22 = *(double *)(v33.i64[0] + 40);
        double v25 = *(double *)(v33.i64[0] + 16);
        double v24 = *(double *)(v33.i64[0] + 24);
        v41.origin.double x = v25;
        v41.origin.double y = v24;
        v41.size.double width = v23;
        v41.size.double height = v22;
        double v26 = CGRectGetWidth(v41);
        v42.origin.double x = v25;
        v42.origin.double y = v24;
        v42.size.double width = v23;
        v42.size.double height = v22;
        double Height = CGRectGetHeight(v42);
        if (Height >= v26) {
          double Height = v26;
        }
        double v28 = Height * 0.5;
        if (v28 >= v20) {
          double v29 = v20;
        }
        else {
          double v29 = v28;
        }
        id result = objc_msgSend(v3, sel_setStrokedRoundedRect_cornerRadius_cornerStyle_lineWidth_, v21, v25, v24, v23, v22, v29, *a2);
        break;
      case 6:
        int8x16_t v30 = vorrq_s8(v33, v34);
        if (vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL))) {
          goto LABEL_2;
        }
        id result = objc_msgSend(v2, sel_setEmpty);
        break;
      default:
        goto LABEL_2;
    }
  }
  return result;
}

id closure #1 in RBFill.setImage(_:destRect:in:)(unsigned int a1, uint64_t a2, void *a3, uint64_t a4, int a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  outlined init with take of GraphicsContext.ResolvedShading?(a4 + 44, (uint64_t)v93, (unint64_t *)&lazy cache variable for type metadata for Color.Resolved?);
  outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v93, (uint64_t)v94, (unint64_t *)&lazy cache variable for type metadata for Color.Resolved?);
  if (v95)
  {
    uint64_t v18 = 0;
    unsigned int v19 = *MEMORY[0x263F638F0];
    unsigned int v20 = *(_DWORD *)(MEMORY[0x263F638F0] + 4);
    unsigned int v21 = *(_DWORD *)(MEMORY[0x263F638F0] + 8);
    unsigned int v22 = *(_DWORD *)(MEMORY[0x263F638F0] + 12);
  }
  else
  {
    unsigned int v19 = v94[0];
    unsigned int v20 = v94[1];
    unsigned int v21 = v94[2];
    unsigned int v22 = v94[3];
    if (a5 != 2)
    {
      RBColorFromLinear();
      unsigned int v20 = v23;
    }
    uint64_t v18 = 1;
  }
  int v24 = *(unsigned __int8 *)(a4 + 96);
  unsigned int v82 = v21;
  unsigned int v83 = v19;
  unsigned int v81 = v22;
  if (v24 == 2)
  {
    double v25 = 0.0;
    int v26 = 1;
    double v84 = 0.0;
    double v27 = 0.0;
    double v28 = 0.0;
  }
  else
  {
    double v27 = *(double *)(a4 + 80);
    double v28 = *(double *)(a4 + 88);
    int v26 = v24 & 1;
    double v25 = *(double *)(a4 + 64);
    double v84 = *(double *)(a4 + 72);
  }
  long long v29 = *(_OWORD *)(a4 + 80);
  long long v90 = *(_OWORD *)(a4 + 64);
  long long v91 = v29;
  int v92 = *(_DWORD *)(a4 + 96);
  long long v30 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)&v88.CGFloat a = *(_OWORD *)a4;
  *(_OWORD *)&v88.CGFloat c = v30;
  long long v31 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)&v88.tdouble x = *(_OWORD *)(a4 + 32);
  long long v89 = v31;
  long long v32 = (CGAffineTransform *)GraphicsImage.bitmapOrientation.getter();
  if (v25 == 0.0 && v84 == 0.0 && v27 == 0.0 && v28 == 0.0)
  {
    if (v26)
    {
      RBImageSimpleTransform();
      CGFloat b = v88.b;
      CGFloat a = v88.a;
      CGFloat d = v88.d;
      CGFloat c = v88.c;
      tdouble y = v88.ty;
      tdouble x = v88.tx;
      if ((_BYTE)v32)
      {
        specialized CGAffineTransform.init(orientation:in:)(v32, (long long *)&v88, 1.0, 1.0);
        CGAffineTransform t1 = v88;
        t2.CGFloat a = a;
        t2.CGFloat b = b;
        t2.CGFloat c = c;
        t2.CGFloat d = d;
        t2.tdouble x = tx;
        t2.tdouble y = ty;
        CGAffineTransformConcat(&v85, &t1, &t2);
        CGFloat a = v85.a;
        CGFloat b = v85.b;
        CGFloat c = v85.c;
        CGFloat d = v85.d;
        tdouble x = v85.tx;
        tdouble y = v85.ty;
      }
      uint64_t v43 = dword_2461DCF50[*(char *)(a4 + 98)];
      t1.CGFloat a = a;
      t1.CGFloat b = b;
      t1.CGFloat c = c;
      t1.CGFloat d = d;
      t1.tdouble x = tx;
      t1.tdouble y = ty;
      LODWORD(v35) = v82;
      LODWORD(v33) = v83;
      LODWORD(v34) = v20;
      LODWORD(v36) = v81;
      return objc_msgSend(a3, sel_setRBImage_transform_interpolation_tintColor_flags_, a1, a2, &t1, v43, v18, v33, v34, v35, v36);
    }
    else
    {
      RBTiledImageTransform();
      CGFloat v62 = v88.b;
      CGFloat v61 = v88.a;
      CGFloat v64 = v88.d;
      CGFloat v63 = v88.c;
      CGFloat v66 = v88.ty;
      CGFloat v65 = v88.tx;
      if ((_BYTE)v32)
      {
        specialized CGAffineTransform.init(orientation:in:)(v32, (long long *)&v88, 1.0, 1.0);
        CGAffineTransform t1 = v88;
        t2.CGFloat a = v61;
        t2.CGFloat b = v62;
        t2.CGFloat c = v63;
        t2.CGFloat d = v64;
        t2.tdouble x = v65;
        t2.tdouble y = v66;
        CGAffineTransformConcat(&v85, &t1, &t2);
        CGFloat v61 = v85.a;
        CGFloat v62 = v85.b;
        CGFloat v63 = v85.c;
        CGFloat v64 = v85.d;
        CGFloat v65 = v85.tx;
        CGFloat v66 = v85.ty;
      }
      uint64_t v67 = dword_2461DCF50[*(char *)(a4 + 98)];
      t1.CGFloat a = v61;
      t1.CGFloat b = v62;
      t1.CGFloat c = v63;
      t1.CGFloat d = v64;
      t1.tdouble x = v65;
      t1.tdouble y = v66;
      LODWORD(v59) = v82;
      LODWORD(v57) = v83;
      LODWORD(v58) = v20;
      LODWORD(v60) = v81;
      return objc_msgSend(a3, sel_setTiledRBImage_transform_sourceRect_interpolation_tintColor_flags_, a1, a2, &t1, v67, v18, 0.0, 0.0, 1.0, 1.0, v57, v58, v59, v60, 0, 0, 0x3FF0000000000000, 0x3FF0000000000000);
    }
  }
  else
  {
    double v78 = v25;
    double v45 = *(double *)(a4 + 16);
    double v46 = 0.0;
    double v47 = 0.0;
    if (v45 != 0.0)
    {
      double v48 = *(double *)(a4 + 24);
      double v49 = *(double *)(a4 + 32);
      switch(*(unsigned char *)(a4 + 40))
      {
        case 4:
        case 5:
        case 6:
        case 7:
          double v49 = *(double *)(a4 + 24);
          double v48 = *(double *)(a4 + 32);
          break;
        default:
          break;
      }
      double v50 = 1.0 / v45;
      double v46 = v50 * v48;
      double v47 = v50 * v49;
    }
    double v79 = v27;
    double v80 = v28;
    CGFloat v76 = a8;
    double v77 = 1.0 / v46;
    double v51 = 1.0 / v47;
    CGFloat v75 = a6;
    RBImageSimpleTransform();
    CGFloat v53 = v88.b;
    CGFloat v52 = v88.a;
    long long v54 = *(_OWORD *)&v88.c;
    CGFloat v55 = v88.ty;
    CGFloat v56 = v88.tx;
    if ((_BYTE)v32)
    {
      specialized CGAffineTransform.init(orientation:in:)(v32, (long long *)&v88, 1.0, 1.0);
      CGAffineTransform t1 = v88;
      t2.CGFloat a = v52;
      t2.CGFloat b = v53;
      *(_OWORD *)&t2.CGFloat c = v54;
      t2.tdouble x = v56;
      t2.tdouble y = v55;
      CGAffineTransformConcat(&v85, &t1, &t2);
      CGFloat v53 = v85.b;
      CGFloat v74 = v85.c;
      CGFloat v56 = v85.tx;
      CGFloat v72 = v85.a;
      CGFloat v73 = v85.d;
      CGFloat v71 = v85.ty;
    }
    else
    {
      CGFloat v73 = v88.d;
      CGFloat v74 = v88.c;
      CGFloat v71 = v88.ty;
      CGFloat v72 = v88.a;
    }
    v96.origin.double x = v75;
    v96.origin.double y = a7;
    v96.size.double width = v76;
    v96.size.double height = a9;
    double v70 = v77 * CGRectGetWidth(v96);
    v97.origin.double x = v75;
    v97.origin.double y = a7;
    v97.size.double width = v76;
    v97.size.double height = a9;
    CGFloat Height = CGRectGetHeight(v97);
    uint64_t v69 = dword_2461DCF50[*(char *)(a4 + 98)];
    t1.CGFloat a = v72;
    t1.CGFloat b = v53;
    t1.CGFloat c = v74;
    t1.CGFloat d = v73;
    t1.tdouble x = v56;
    t1.tdouble y = v71;
    return objc_msgSend(a3, sel_set9PartRBImage_transform_destinationRect_capInsets_repeat_interpolation_tintColor_flags_, a1, a2, &t1, v26 ^ 1u, v69, v18, 0.0, 0.0, v70, v51 * Height, v78 * v51, v84 * v77, v79 * v51, v80 * v77, __PAIR64__(v20, v83), __PAIR64__(v81, v82));
  }
}

id closure #1 in RBFill.setRepeatedImage(_:origin:scale:sourceRect:in:)(unsigned int a1, uint64_t a2, uint64_t a3, void *a4, int a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  RBTiledImageTransform();
  CGFloat b = v49.b;
  CGFloat a = v49.a;
  CGFloat d = v49.d;
  CGFloat c = v49.c;
  tdouble y = v49.ty;
  tdouble x = v49.tx;
  long long v25 = *(_OWORD *)(a3 + 80);
  long long v51 = *(_OWORD *)(a3 + 64);
  long long v52 = v25;
  int v53 = *(_DWORD *)(a3 + 96);
  long long v26 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v49.CGFloat a = *(_OWORD *)a3;
  *(_OWORD *)&v49.CGFloat c = v26;
  long long v27 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v49.tdouble x = *(_OWORD *)(a3 + 32);
  long long v50 = v27;
  double v28 = (CGAffineTransform *)GraphicsImage.bitmapOrientation.getter();
  if ((_BYTE)v28)
  {
    specialized CGAffineTransform.init(orientation:in:)(v28, (long long *)&v49, 1.0, 1.0);
    CGAffineTransform t1 = v49;
    t2.CGFloat a = a;
    t2.CGFloat b = b;
    t2.CGFloat c = c;
    t2.CGFloat d = d;
    t2.tdouble x = tx;
    t2.tdouble y = ty;
    CGAffineTransformConcat(&v46, &t1, &t2);
    CGFloat a = v46.a;
    CGFloat b = v46.b;
    CGFloat c = v46.c;
    CGFloat d = v46.d;
    tdouble x = v46.tx;
    tdouble y = v46.ty;
  }
  outlined init with take of GraphicsContext.ResolvedShading?(a3 + 44, (uint64_t)&v46, (unint64_t *)&lazy cache variable for type metadata for Color.Resolved?);
  outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)&v46, (uint64_t)&t2, (unint64_t *)&lazy cache variable for type metadata for Color.Resolved?);
  if (LOBYTE(t2.c))
  {
    uint64_t v33 = 0;
    LODWORD(v29) = *MEMORY[0x263F638F0];
    LODWORD(v30) = *(_DWORD *)(MEMORY[0x263F638F0] + 4);
    LODWORD(v31) = *(_DWORD *)(MEMORY[0x263F638F0] + 8);
    LODWORD(v32) = *(_DWORD *)(MEMORY[0x263F638F0] + 12);
  }
  else
  {
    LODWORD(v30) = HIDWORD(t2.a);
    LODWORD(v29) = LODWORD(t2.a);
    LODWORD(v32) = HIDWORD(t2.b);
    LODWORD(v31) = LODWORD(t2.b);
    if (a5 != 2)
    {
      RBColorFromLinear();
      LODWORD(v29) = v34;
      LODWORD(v30) = v35;
      LODWORD(v31) = v36;
      LODWORD(v32) = v37;
    }
    uint64_t v33 = 1;
  }
  uint64_t v38 = dword_2461DCF50[*(char *)(a3 + 98)];
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tdouble x = tx;
  t1.tdouble y = ty;
  return objc_msgSend(a4, sel_setTiledRBImage_transform_sourceRect_interpolation_tintColor_flags_, a1, a2, &t1, v38, v33, a9, a10, a11, a12, v29, v30, v31, v32, *(void *)&a9, *(void *)&a10, *(void *)&a11, *(void *)&a12);
}

id closure #2 in RBFill.setImage(_:destRect:in:)(id a1, int a2)
{
  if (a2 != 2) {
    RBColorFromLinear();
  }

  return objc_msgSend(a1, sel_setColor_);
}

uint64_t GraphicsContext.Storage.Shared.setColor(_:in:)(uint64_t result, long long *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 + 264);
  if (v4) {
    BOOL v5 = v4 == result;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void **)(v3 + 40);
    long long v8 = *a2;
    (*(void (**)(long long *))(*(void *)result + 104))(&v8);
    if (*(_DWORD *)(v3 + 64) != 2) {
      RBColorFromLinear();
    }
    objc_msgSend(v7, sel_setColor_);
    *(void *)(v3 + 264) = v6;
    swift_retain();
    return swift_release();
  }
  return result;
}

unsigned char *GraphicsContext.Storage.Shared.setMeshGradient(locations:colors:width:height:background:flags:)(unsigned char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (result[8])
  {
    if ((unsigned __int128)(a4 * (__int128)a5) >> 64 == (a4 * a5) >> 63)
    {
      uint64_t v7 = 2;
LABEL_6:
      LODWORD(v8) = a6;
      return objc_msgSend(*(id *)(v6 + 40), sel_setMeshGradientType_positions_colors_count_width_background_colorSpace_flags_, v7, *(void *)result + 32, a2, a4 * a5, a4, 2, v8);
    }
    __break(1u);
  }
  else if ((unsigned __int128)(a4 * (__int128)a5) >> 64 == (a4 * a5) >> 63)
  {
    uint64_t v7 = 1;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t GraphicsContext.Storage.Shared.setGradient(_:geometry:options:in:)(uint64_t *a1, long long *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *a1;
  char v5 = *((unsigned char *)a1 + 8);
  outlined init with take of GraphicsContext.GradientGeometry(a2, (uint64_t)v17);
  uint64_t v15 = v4;
  char v16 = v5;
  uint64_t v6 = ResolvedGradient.constantColor.getter();
  if (v12)
  {
    uint64_t v15 = v4;
    char v16 = v5;
    MEMORY[0x270FA5388](v6);
    return withGradient(_:in:do:)((uint64_t)&v15);
  }
  else
  {
    LODWORD(v9) = HIDWORD(v6);
    LODWORD(v8) = v6;
    LODWORD(v11) = HIDWORD(v7);
    LODWORD(v10) = v7;
    uint64_t v13 = *(void **)(v2 + 40);
    if (*(_DWORD *)(v3 + 64) != 2) {
      RBColorFromLinear();
    }
    objc_msgSend(v13, sel_setColor_, v8, v9, v10, v11);
    *(void *)(v3 + 264) = 0;
    return swift_release();
  }
}

uint64_t withGradient(_:in:do:)(uint64_t a1)
{
  if (*(void *)(*(void *)a1 + 16))
  {
    char v1 = 0;
    uint64_t v2 = (unsigned char *)(*(void *)a1 + 72);
    uint64_t v3 = *(void *)(*(void *)a1 + 16);
    do
    {
      if (v1) {
        char v1 = 1;
      }
      else {
        char v1 = *v2 ^ 1;
      }
      v2 += 48;
      --v3;
    }
    while (v3);
  }
  MEMORY[0x270FA5388](a1);
  MEMORY[0x270FA5388](v4);
  type metadata accessor for RBColor(0);
  MEMORY[0x270FA5388](v5);
  return AGTupleWithBuffer();
}

unint64_t closure #1 in withGradient(_:in:do:)(unint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (*(void *)(a4 + 16) <= result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v10 = a4 + 48 * result;
  int v12 = *(_DWORD *)(v10 + 32);
  int v13 = *(_DWORD *)(v10 + 36);
  uint64_t v11 = v10 + 32;
  int v14 = *(_DWORD *)(v11 + 8);
  int v15 = *(_DWORD *)(v11 + 12);
  if (a6 != 2) {
    id result = RBColorFromLinear();
  }
  *a2 = v12;
  a2[1] = v13;
  a2[2] = v14;
  a2[3] = v15;
  *(void *)a3 = *(void *)(v11 + 16);
  if (a7)
  {
    if (*(unsigned char *)(v11 + 40))
    {
      double v16 = 0.0;
      double v17 = 1.0;
      double v18 = 1.0;
      double v19 = 0.0;
    }
    else
    {
      double v19 = *(float *)(v11 + 24);
      double v16 = *(float *)(v11 + 28);
      double v18 = *(float *)(v11 + 32);
      double v17 = *(float *)(v11 + 36);
    }
    *(double *)(a3 + 8) = v19;
    *(double *)(a3 + 16) = v16;
    *(double *)(a3 + 24) = v18;
    *(double *)(a3 + 32) = v17;
  }
  return result;
}

uint64_t specialized GraphicsContext.Storage.init(list:environment:)(void *a1, long long *a2)
{
  uint64_t v3 = v2;
  *(_OWORD *)(v3 + 32) = xmmword_24619B520;
  *(void *)(v3 + 48) = 1065353216;
  *(void *)(v3 + 56) = 0x7FF8000000000000;
  long long v6 = *a2;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  *(void *)(v3 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(a1, (uint64_t *)&v6);
  *(void *)(v3 + 24) = RBDisplayListGetState();
  *(unsigned char *)(v3 + 64) = 0;
  return v3;
}

id partial apply for closure #1 in RBFill.setImage(_:destRect:in:)(unsigned int a1, uint64_t a2)
{
  return closure #1 in RBFill.setImage(_:destRect:in:)(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(_DWORD *)(v2 + 32), *(CGFloat *)(v2 + 40), *(CGFloat *)(v2 + 48), *(CGFloat *)(v2 + 56), *(CGFloat *)(v2 + 64));
}

void *outlined consume of GraphicsContext.Shading?(void *result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  if (a10 != 255) {
    return outlined consume of GraphicsContext.Shading.Storage(result, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

void *outlined copy of GraphicsContext.Shading?(void *result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  if (a10 != 255) {
    return outlined copy of GraphicsContext.Shading.Storage(result, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  int64_t v5 = a4 >> 1;
  if (a4 >> 1 == a3) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t result = swift_unknownObjectRetain();
  if (v5 > a3)
  {
    uint64_t v10 = a3 + 1;
    long long v6 = (void *)MEMORY[0x263F8EE78];
    uint64_t v11 = a2 + 80 * a3 + 40;
    uint64_t v15 = v5;
    while (1)
    {
      uint64_t v18 = v10;
      double v31 = v6;
      double v19 = *(void **)(v11 - 40);
      uint64_t v20 = *(void *)(v11 - 32);
      uint64_t v21 = *(void *)(v11 - 24);
      uint64_t v22 = *(void *)(v11 - 16);
      uint64_t v23 = *(void *)(v11 - 8);
      uint64_t v17 = *(void *)v11;
      uint64_t v24 = *(void *)(v11 + 8);
      uint64_t v25 = *(void *)(v11 + 16);
      uint64_t v26 = *(void *)(v11 + 24);
      char v27 = *(unsigned char *)(v11 + 32);
      outlined copy of GraphicsContext.Shading.Storage(v19, v20, v21, v22, v23, *(void *)v11, v24, v25, v26, v27);
      GraphicsContext.Shading.resolve(in:levels:)(v28, a5, 1);
      outlined consume of GraphicsContext.Shading.Storage(v19, v20, v21, v22, v23, v17, v24, v25, v26, v27);
      outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v28, (uint64_t)v29, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
      outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v29, (uint64_t)v30, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
      uint64_t result = _s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg((uint64_t)v30);
      if (result == 1)
      {
        uint64_t v12 = v15;
        long long v6 = v31;
      }
      else
      {
        long long v6 = v31;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
        }
        uint64_t v12 = v15;
        unint64_t v14 = v6[2];
        unint64_t v13 = v6[3];
        if (v14 >= v13 >> 1) {
          long long v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v6);
        }
        outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v29, (uint64_t)v28, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
        id v6[2] = v14 + 1;
        uint64_t result = outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v28, (uint64_t)&v6[20 * v14 + 4]);
      }
      if (v12 == v18) {
        break;
      }
      if (v18 >= a3)
      {
        v11 += 80;
        uint64_t v10 = v18 + 1;
        if (v18 < v12) {
          continue;
        }
      }
      goto LABEL_18;
    }
    swift_unknownObjectRelease();
    return (uint64_t)v6;
  }
LABEL_18:
  __break(1u);
  return result;
}

BOOL specialized GraphicsContext.drawAsVector(image:rect:style:shading:)(uint64_t a1, uint64_t a2, void *a3, CGFloat a4, CGFloat a5, double a6, double a7)
{
  int v7 = *(unsigned __int8 *)(a1 + 8);
  int v8 = v7 & 0xFE;
  if (v8 == 2)
  {
    uint64_t v11 = *(void **)a1;
    double v12 = *(double *)(a1 + 16);
    double v13 = *(double *)(a1 + 24);
    double v14 = *(double *)(a1 + 32);
    uint64_t v15 = (CGAffineTransform *)*(unsigned __int8 *)(a1 + 40);
    unint64_t v197 = *(void *)(a1 + 44);
    unint64_t v16 = *(void *)(a1 + 52);
    LOBYTE(v213) = *(unsigned char *)(a1 + 60);
    unint64_t v218 = *(void **)a2;
    *(void *)&long long v216 = *(void *)(a2 + 16);
    *((void *)&v216 + 1) = *(void *)(a2 + 8);
    CGFloat v17 = *(double *)(a2 + 32);
    CGFloat v210 = *(double *)(a2 + 24);
    CGFloat v19 = *(double *)(a2 + 40);
    CGFloat v18 = *(double *)(a2 + 48);
    uint64_t v20 = *(void **)(a2 + 56);
    unint64_t v215 = *(void *)(a2 + 64);
    int v21 = *(unsigned __int8 *)(a2 + 72);
    uint64_t v181 = RBDrawingStateBeginLayer();
    CGFloat c = 0.0;
    double v23 = 0.0;
    double v24 = 0.0;
    if (v12 != 0.0)
    {
      double v25 = v14;
      switch((unint64_t)v15)
      {
        case 4uLL:
        case 5uLL:
        case 6uLL:
        case 7uLL:
          double v25 = v13;
          double v13 = v14;
          break;
        default:
          break;
      }
      double v23 = 1.0 / v12 * v13;
      double v24 = 1.0 / v12 * v25;
    }
    uint64_t v214 = v20;
    uint64_t v186 = (uint64_t)a3;
    double a = a6 / v23;
    CGFloat v211 = v24;
    double d = a7 / v24;
    double v160 = a4;
    if (v15)
    {
      specialized CGAffineTransform.init(orientation:in:)(v15, v247, a6, a7);
      long long v198 = v247[1];
      long long v200 = v247[0];
      CGFloat v28 = v248;
      CGFloat v29 = v249;
      CGAffineTransformMakeTranslation(&t1, a4, a5);
      long long v203 = *(_OWORD *)&t1.c;
      long long v206 = *(_OWORD *)&t1.a;
      tdouble x = t1.tx;
      tdouble y = t1.ty;
      CGAffineTransformMakeTranslation(&t1, -a4, -a5);
      *(_OWORD *)&t2.double a = v200;
      *(_OWORD *)&t2.CGFloat c = v198;
      t2.tdouble x = v28;
      t2.tdouble y = v29;
      CGAffineTransformConcat(&v236, &t1, &t2);
      CGAffineTransform t1 = v236;
      *(_OWORD *)&t2.double a = v206;
      *(_OWORD *)&t2.CGFloat c = v203;
      t2.tdouble x = tx;
      t2.tdouble y = ty;
      CGAffineTransformConcat(&v236, &t1, &t2);
      CGAffineTransform t1 = v236;
      CGAffineTransformInvert(&t2, &t1);
      t1.double a = a6 / v23;
      t1.CGFloat c = 0.0;
      t1.CGFloat b = 0.0;
      t1.double d = d;
      t1.tdouble x = a4;
      t1.tdouble y = a5;
      CGAffineTransformConcat(&v236, &t1, &t2);
      double a = v236.a;
      CGFloat b = v236.b;
      CGFloat c = v236.c;
      double d = v236.d;
      a4 = v236.tx;
      CGFloat v33 = v236.ty;
      if (v7 != 3)
      {
LABEL_8:
        uint64_t v34 = (uint64_t)a3;
        if (v7 != 2) {
          goto LABEL_157;
        }
        unint64_t v208 = v16;
        int v35 = (void *)v11[2];
        int v36 = (void *)v11[4];
        int v37 = (void *)v11[6];
        RBDrawingStateGetCTM();
        CGFloat v194 = t1.b;
        CGFloat v195 = t1.a;
        CGFloat v192 = t1.d;
        CGFloat v193 = t1.c;
        CGFloat v190 = t1.ty;
        CGFloat v191 = t1.tx;
        id v38 = v35;
        uint64_t v159 = v36;
        outlined copy of Image.Location(v36);
        id v39 = v37;
        t1.double a = a;
        t1.CGFloat b = b;
        t1.CGFloat c = c;
        t1.double d = d;
        t1.tdouble x = a4;
        t1.tdouble y = v33;
        RBDrawingStateConcatCTM();
        id v40 = objc_msgSend(v38, sel_renderingMode);
        double v41 = a6;
        uint64_t v42 = *(void *)&v18;
        CGFloat v212 = v17;
        LODWORD(v18) = v21;
        uint64_t v154 = v39;
        id v155 = v38;
        if (v40 != 255) {
          goto LABEL_23;
        }
        if (v21 != 255)
        {
          *(void *)&t1.double a = v218;
          t1.CGFloat b = *((CGFloat *)&v216 + 1);
          *(void *)&t1.CGFloat c = v216;
          t1.double d = v210;
          t1.tdouble x = v17;
          t1.tdouble y = v19;
          uint64_t v243 = v42;
          float64x2_t v244 = v214;
          unint64_t v245 = v215;
          char v246 = v21;
          outlined copy of GraphicsContext.Shading.Storage(v218, SBYTE8(v216), v216, *(uint64_t *)&v210, *(uint64_t *)&v17, *(uint64_t *)&v19, v42, (uint64_t)v214, v215, v21);
          BOOL v43 = GraphicsContext.Shading.isMultiLevel(in:)(a3);
          outlined consume of GraphicsContext.Shading?(v218, SBYTE8(v216), v216, *(uint64_t *)&v210, *(uint64_t *)&v212, *(uint64_t *)&v19, v42, (uint64_t)v214, v215, v21);
          if (v43)
          {
            uint64_t v213 = v42;
            CGFloat v44 = v19;
            int v201 = 4;
            id v38 = objc_msgSend(v38, sel_beginUpdateWithRenderingMode_, 4);
            goto LABEL_25;
          }
        }
        if (one-time initialization token for preferredIfEnabled != -1) {
          goto LABEL_163;
        }
        while (1)
        {
          id v40 = (id)dword_2461DDC60[static SymbolRenderingMode.preferredIfEnabled];
LABEL_23:
          id v38 = objc_msgSend(v38, sel_beginUpdateWithRenderingMode_, v40);
          if (LODWORD(v18) == 255)
          {
            if (v213)
            {
              int v66 = 1065353216;
              LODWORD(v67) = 1065353216;
              int v68 = 1065353216;
              LODWORD(v69) = 1065353216;
            }
            else
            {
              int v66 = v197;
              unint64_t v67 = HIDWORD(v197);
              int v68 = v208;
              unint64_t v69 = HIDWORD(v208);
            }
            uint64_t v42 = v181;
            double v60 = v159;
            *(void *)&t2.double a = __PAIR64__(v67, v66);
            *(void *)&t2.CGFloat b = __PAIR64__(v69, v68);
            _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&t2);
            outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&t2, (uint64_t)&t1);
            if (v40 != 2) {
              goto LABEL_46;
            }
          }
          else
          {
            uint64_t v213 = v42;
            CGFloat v44 = v19;
            int v201 = (int)v40;
LABEL_25:
            __int16 v209 = MEMORY[0x24C526DB0](v38);
            *(void *)&v236.double a = v159;
            unsigned __int8 v204 = LOBYTE(v18);
            outlined copy of GraphicsContext.Shading?(v218, SBYTE8(v216), v216, *(uint64_t *)&v210, *(uint64_t *)&v212, *(uint64_t *)&v44, v213, (uint64_t)v214, v215, LOBYTE(v18));
            outlined copy of Image.Location(v159);
            _ShapeStyle_ResolverMode.init(rbSymbolStyleMask:location:)(v209, (void **)&v236, (uint64_t)&t2);
            LODWORD(v18) = v213;
            unint64_t v208 = *(void *)&t2.a;
            if (BYTE2(t2.b)) {
              int64_t b_low = LOWORD(t2.b);
            }
            else {
              int64_t b_low = LOWORD(t2.b) != 0;
            }
            *(void *)&t2.double a = v218;
            t2.CGFloat b = *((CGFloat *)&v216 + 1);
            *(void *)&t2.CGFloat c = v216;
            t2.double d = v210;
            t2.tdouble x = v212;
            t2.tdouble y = v44;
            uint64_t v238 = v213;
            uint64_t v239 = v214;
            unint64_t v240 = v215;
            unsigned __int8 v241 = v204;
            GraphicsContext.Shading.resolve(in:levels:)(v186, b_low, v234);
            outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v234, (uint64_t)&v236, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
            outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)&v236, (uint64_t)&t2, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
            if (_s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg((uint64_t)&t2) == 1)
            {
              outlined consume of GraphicsContext.Shading?(v218, SBYTE8(v216), v216, *(uint64_t *)&v210, *(uint64_t *)&v212, *(uint64_t *)&v44, v213, (uint64_t)v214, v215, v204);

              __asm { FMOV            V0.4S, #1.0 }
              long long v220 = _Q0;
              _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v220);
            }
            else
            {
              outlined consume of GraphicsContext.Shading?(v218, SBYTE8(v216), v216, *(uint64_t *)&v210, *(uint64_t *)&v212, *(uint64_t *)&v44, v213, (uint64_t)v214, v215, v204);

              outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)&v236, (uint64_t)&v220, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
            }
            outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v220, (uint64_t)v235);
            outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v235, (uint64_t)&t1);
            uint64_t v34 = v186;
            uint64_t v42 = v181;
            double v60 = v159;
            if (v201 != 2)
            {
LABEL_46:
              CGFloat v71 = 0.0;
              CGFloat v72 = 0.0;
              uint64_t v76 = 0;
              *(void *)&CGFloat v19 = 1;
              goto LABEL_47;
            }
          }
          uint64_t v61 = *(uint64_t *)(v34 + 32);
          CGFloat v62 = *(double *)&v61;
          CGFloat v63 = *(double *)(v34 + 40);
          if (v61 == 1)
          {
            uint64_t v64 = *(void *)(v34 + 16);
            CGFloat v62 = *(double *)(v64 + 48);
            CGFloat v63 = *(double *)(v64 + 56);
            swift_retain();
            swift_retain();
          }
          v236.double a = v62;
          v236.CGFloat b = v63;
          if ((unint64_t)v60 >= 2)
          {
            id v70 = v60;
            uint64_t v65 = (uint64_t)v60;
          }
          else
          {
            uint64_t v65 = 0;
          }
          outlined copy of EnvironmentValues?(v61);
          ResolvedMulticolorStyle.init(in:bundle:)((uint64_t *)&v236, v65, (uint64_t)&t2);
          CGFloat v71 = t2.a;
          CGFloat v72 = t2.b;
          CGFloat v19 = t2.d;
          uint64_t v73 = 256;
          if (!BYTE1(t2.c)) {
            uint64_t v73 = 0;
          }
          uint64_t v74 = v73 | LOBYTE(t2.c);
          uint64_t v75 = 0x10000;
          if (!BYTE2(t2.c)) {
            uint64_t v75 = 0;
          }
          uint64_t v76 = v74 | v75;
LABEL_47:
          uint64_t v157 = v76;
          CGFloat v158 = v72;
          CGFloat v156 = v71;
          updatedouble d = RBSymbolUpdateGroupCount();
          if ((updated & 0x8000000000000000) == 0)
          {
            uint64_t v78 = updated;
            if (!updated)
            {
LABEL_156:
              outlined retain of GraphicsContext.ResolvedShading(&t1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading);
              outlined consume of ResolvedMulticolorStyle?(*(uint64_t *)&v156, *(uint64_t *)&v158, v157, *(uint64_t *)&v19);
              objc_msgSend(v155, sel_endUpdate_, v38);

              outlined consume of Image.Location(v159);
              goto LABEL_157;
            }
            CGFloat v18 = 0.0;
            id v163 = v38;
            double v164 = v19;
            uint64_t v165 = updated;
            while (1)
            {
              if (*(void *)&v18 == v78) {
                goto LABEL_160;
              }
              uint64_t v79 = RBSymbolUpdateGroupSize();
              if (v79 < 0) {
                break;
              }
              uint64_t v80 = v79;
              if (v79)
              {
                CGFloat v81 = 0.0;
                uint64_t v189 = v79;
                while (1)
                {
                  *(void *)&t2.double a = v38;
                  t2.CGFloat b = v18;
                  t2.CGFloat c = v81;
                  LODWORD(v87) = RBSymbolUpdateLayerStyle();
                  *(void *)&t2.double a = v38;
                  t2.CGFloat b = v18;
                  t2.CGFloat c = v81;
                  RBSymbolUpdateLayerDrawingOpacity();
                  if (v88 <= 0.0 || v87 == 10) {
                    goto LABEL_58;
                  }
                  float v90 = v88;
                  uint64_t v87 = v87;
                  float v91 = 1.0;
                  switch((int)v87)
                  {
                    case 0:
                      goto LABEL_68;
                    case 5:
                      float v91 = 0.5;
                      uint64_t v87 = 1;
                      goto LABEL_68;
                    case 6:
                      float v91 = 0.25;
                      uint64_t v87 = 2;
                      goto LABEL_68;
                    case 7:
                      float v91 = 0.25;
                      uint64_t v87 = 3;
                      goto LABEL_68;
                    case 8:
                      float v91 = 0.25;
                      uint64_t v87 = 4;
LABEL_68:
                      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&t1, (uint64_t)&v236);
                      int v92 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOg((uint64_t)&v236);
                      if (v92 == 8)
                      {
                        uint64_t v99 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)&v236);
                        unint64_t v100 = *(void *)(*(void *)v99 + 16);
                        unint64_t v101 = v100 - 1;
                        if ((uint64_t)(v100 - 1) >= v87) {
                          unint64_t v101 = v87;
                        }
                        if (v101 >= v100)
                        {
                          __break(1u);
LABEL_160:
                          __break(1u);
                          goto LABEL_161;
                        }
                        outlined init with take of GraphicsContext.ResolvedShading(*(void *)v99 + 160 * v101 + 32, (uint64_t)&v220);
                        outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v220, (uint64_t)v234);
                        float v91 = 1.0;
                      }
                      else
                      {
                        if (v92 == 4)
                        {
                          uint64_t v93 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)&v236);
                          long long v216 = *(_OWORD *)v93;
                          uint64_t v213 = *(void *)(v93 + 24);
                          uint64_t v214 = *(void **)(v93 + 16);
                          CGFloat v210 = *(double *)(v93 + 40);
                          CGFloat v212 = *(double *)(v93 + 32);
                          unint64_t v208 = *(void *)(v93 + 48);
                          uint64_t v207 = *(void *)(v93 + 56);
                          uint64_t v205 = *(void *)(v93 + 64);
                          uint64_t v202 = *(void *)(v93 + 72);
                          float v94 = *(float *)(v93 + 84);
                          uint64_t v199 = *(void *)(v93 + 88);
                          int v95 = *(unsigned __int8 *)(v93 + 96);
                          unint64_t v218 = *(void **)(v93 + 104);
                          LODWORD(v215) = v95;
                          LODWORD(v197) = *(unsigned __int8 *)(v93 + 80);
                          if (*(unsigned char *)(v93 + 80))
                          {
                            outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&t1, (uint64_t)&v220);
                            uint64_t v96 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)&v220);
                            uint64_t v97 = *(void *)(v96 + 88);
                            unsigned __int8 v98 = *(unsigned char *)(v96 + 96);
                            outlined copy of _ShapeStyle_Pack.Fill(*(id *)v96, *(void *)(v96 + 8), *(void **)(v96 + 16), *(void **)(v96 + 24), *(void *)(v96 + 32), *(void *)(v96 + 40), *(void *)(v96 + 48), *(void *)(v96 + 56), *(void *)(v96 + 64), *(void *)(v96 + 72), *(unsigned char *)(v96 + 80));
                            outlined copy of GraphicsBlendMode?(v97, v98);
                            swift_bridgeObjectRetain();
LABEL_122:
                            long long v220 = v216;
                            CGFloat v221 = *(double *)&v214;
                            CGFloat v222 = *(double *)&v213;
                            CGFloat v223 = v212;
                            CGFloat v224 = v210;
                            unint64_t v225 = v208;
                            uint64_t v226 = v207;
                            uint64_t v227 = v205;
                            uint64_t v228 = v202;
                            char v229 = v197;
                            float v230 = v94;
                            uint64_t v231 = v199;
                            char v232 = v215;
                            long long v233 = v218;
                            _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi3_((uint64_t)&v220);
                            unsigned int v82 = &v220;
                            goto LABEL_56;
                          }
                          if (v95 == 255)
                          {
                            outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&t1, (uint64_t)&v220);
                            uint64_t v125 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)&v220);
                            double v174 = *(void **)(v125 + 16);
                            id v171 = *(id *)v125;
                            uint64_t v173 = *(void *)(v125 + 32);
                            uint64_t v126 = *(void *)(v125 + 64);
                            uint64_t v188 = *(void *)(v125 + 72);
                            char v185 = *(unsigned char *)(v125 + 80);
                            uint64_t v127 = *(void *)(v125 + 88);
                            uint64_t v168 = *(void *)(v125 + 40);
                            unsigned __int8 v128 = *(unsigned char *)(v125 + 96);
                            uint64_t v183 = *(void *)(v125 + 8);
                            uint64_t v178 = *(void *)(v125 + 56);
                            char v180 = *(void **)(v125 + 24);
                            uint64_t v176 = *(void *)(v125 + 48);
                            outlined copy of _ShapeStyle_Pack.Fill(*(id *)v125, v183, v174, v180, v173, v168, v176, v178, v126, v188, v185);
                            outlined copy of GraphicsBlendMode?(v127, v128);
                            swift_bridgeObjectRetain();
                            outlined copy of _ShapeStyle_Pack.Fill(v171, v183, v174, v180, v173, v168, v176, v178, v126, v188, v185);
                            outlined copy of GraphicsBlendMode?(v127, v128);
                            swift_bridgeObjectRetain();
                            outlined copy of _ShapeStyle_Pack.Fill(v171, v183, v174, v180, v173, v168, v176, v178, v126, v188, v185);
                            outlined copy of GraphicsBlendMode?(v127, v128);
                            swift_bridgeObjectRetain();
                            outlined copy of _ShapeStyle_Pack.Fill((id)v216, BYTE8(v216), v214, (void *)v213, *(uint64_t *)&v212, *(uint64_t *)&v210, v208, v207, v205, v202, 0);
                            uint64_t v123 = v199;
                            outlined copy of GraphicsBlendMode?(v199, 0xFFu);
                            uint64_t v129 = one-time initialization token for normal;
                            swift_bridgeObjectRetain();
                            if (v129 != -1) {
                              swift_once();
                            }
                            uint64_t v124 = static GraphicsBlendMode.normal;
                            char v187 = byte_26B0EB4A0;
                            outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
                            unsigned __int8 v122 = v215;
                          }
                          else
                          {
                            char v187 = v95 & 1;
                            outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&t1, (uint64_t)&v220);
                            uint64_t v117 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)&v220);
                            id v118 = *(id *)v117;
                            uint64_t v169 = *(void *)(v117 + 48);
                            uint64_t v170 = *(void *)(v117 + 32);
                            uint64_t v166 = *(void *)(v117 + 56);
                            float v167 = *(void **)(v117 + 16);
                            uint64_t v119 = *(void *)(v117 + 64);
                            uint64_t v184 = *(void *)(v117 + 72);
                            char v182 = *(unsigned char *)(v117 + 80);
                            uint64_t v120 = *(void *)(v117 + 88);
                            unsigned __int8 v121 = *(unsigned char *)(v117 + 96);
                            id v172 = *(id *)v117;
                            uint64_t v177 = *(void **)(v117 + 24);
                            uint64_t v179 = *(void *)(v117 + 8);
                            uint64_t v175 = *(void *)(v117 + 40);
                            outlined copy of _ShapeStyle_Pack.Fill(*(id *)v117, v179, v167, v177, v170, v175, v169, v166, v119, v184, v182);
                            outlined copy of GraphicsBlendMode?(v120, v121);
                            swift_bridgeObjectRetain();
                            outlined copy of _ShapeStyle_Pack.Fill(v118, v179, v167, v177, v170, v175, v169, v166, v119, v184, v182);
                            outlined copy of GraphicsBlendMode?(v120, v121);
                            swift_bridgeObjectRetain();
                            unsigned __int8 v122 = v215;
                            outlined copy of _ShapeStyle_Pack.Fill(v172, v179, v167, v177, v170, v175, v169, v166, v119, v184, v182);
                            outlined copy of GraphicsBlendMode?(v120, v121);
                            swift_bridgeObjectRetain();
                            outlined copy of _ShapeStyle_Pack.Fill((id)v216, BYTE8(v216), v214, (void *)v213, *(uint64_t *)&v212, *(uint64_t *)&v210, v208, v207, v205, v202, 0);
                            uint64_t v123 = v199;
                            outlined copy of GraphicsBlendMode?(v199, v215);
                            swift_bridgeObjectRetain();
                            uint64_t v124 = v199;
                          }
                          outlined copy of GraphicsBlendMode?(v123, v122);
                          outlined retain of GraphicsContext.ResolvedShading(&t1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading);
                          if (one-time initialization token for normal != -1) {
                            swift_once();
                          }
                          uint64_t v130 = static GraphicsBlendMode.normal;
                          char v131 = byte_26B0EB4A0;
                          uint64_t v34 = v186;
                          uint64_t v42 = v181;
                          id v38 = v163;
                          CGFloat v19 = v164;
                          uint64_t v80 = v189;
                          if (v187)
                          {
                            if (byte_26B0EB4A0)
                            {
                              swift_unknownObjectRetain();
                              outlined consume of GraphicsBlendMode(v124, 1);
                              outlined consume of GraphicsBlendMode(v130, 1);
                              if (v124 == v130)
                              {
LABEL_115:
                                uint64_t v132 = v218[2];
                                outlined retain of GraphicsContext.ResolvedShading(&t1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading);
                                outlined retain of GraphicsContext.ResolvedShading(&t1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading);
                                if (!v132)
                                {
                                  outlined retain of GraphicsContext.ResolvedShading(&t1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading);
                                  double v41 = a6;
                                  *(void *)&long long v220 = v216;
                                  DWORD2(v220) = DWORD2(v216);
                                  *((float *)&v220 + 3) = v94 * *((float *)&v216 + 3);
                                  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v220);
                                  char v103 = (CGAffineTransform *)&v220;
                                  goto LABEL_134;
                                }
                                goto LABEL_122;
                              }
LABEL_121:
                              outlined retain of GraphicsContext.ResolvedShading(&t1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading);
                              outlined retain of GraphicsContext.ResolvedShading(&t1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading);
                              goto LABEL_122;
                            }
                            swift_unknownObjectRetain();
                          }
                          else if ((byte_26B0EB4A0 & 1) == 0)
                          {
                            outlined consume of GraphicsBlendMode(v124, 0);
                            outlined consume of GraphicsBlendMode(v130, 0);
                            if (v124 == v130) {
                              goto LABEL_115;
                            }
                            goto LABEL_121;
                          }
                          outlined copy of GraphicsBlendMode(v130, v131);
                          outlined consume of GraphicsBlendMode(v124, v187);
                          outlined consume of GraphicsBlendMode(v130, v131);
                          uint64_t v34 = v186;
                          outlined consume of GraphicsBlendMode(v124, v187);
                          goto LABEL_121;
                        }
                        outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&t1, (uint64_t)v234);
                      }
                      float v90 = v90 * v91;
                      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v234, (uint64_t)&v220);
                      int v102 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOg((uint64_t)&v220);
                      if (v102 == 1)
                      {
                        _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)&v220);
                        char v103 = (CGAffineTransform *)v234;
LABEL_134:
                        outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v103, (uint64_t)&t2);
                        if (*(_DWORD *)(*(void *)(v34 + 16) + 64) != 2) {
                          RBColorFromLinear();
                        }
                        *(void *)&v236.double a = v38;
                        v236.CGFloat b = v18;
                        v236.CGFloat c = v81;
                        RBSymbolUpdateLayerDraw();
                        p_CGAffineTransform t2 = &t2;
                        goto LABEL_57;
                      }
                      if (v102 == 2)
                      {
                        _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)&v220);
                        if (*(_DWORD *)(*(void *)(v34 + 16) + 64) == 2) {
                          RBColorToLinear();
                        }
                        RBSymbolUpdateLayerDraw();
                        goto LABEL_58;
                      }
                      outlined retain of GraphicsContext.ResolvedShading(v234, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of GraphicsContext.ResolvedShading);
                      unsigned int v82 = (long long *)v234;
LABEL_56:
                      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v82, (uint64_t)v235);
                      uint64_t v83 = RBDrawingStateInit();
                      *(void *)&long long v220 = v38;
                      *((CGFloat *)&v220 + 1) = v18;
                      CGFloat v221 = v81;
                      RBSymbolUpdateLayerClip();
                      *(CGFloat *)&long long v220 = v195;
                      *((CGFloat *)&v220 + 1) = v194;
                      CGFloat v221 = v193;
                      CGFloat v222 = v192;
                      CGFloat v223 = v191;
                      CGFloat v224 = v190;
                      RBDrawingStateSetCTM();
                      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v235, (uint64_t)&v220);
                      float v84 = v90 * *(float *)(v34 + 48);
                      uint64_t v85 = *(unsigned int *)(v34 + 52);
                      outlined retain of GraphicsContext.ResolvedShading(v235, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of GraphicsContext.ResolvedShading);
                      GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)((uint64_t)&v220, v83, v85, v34, v160, a5, v41, a7, v84);
                      outlined retain of GraphicsContext.ResolvedShading(v235, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading);
                      RBDrawingStateDestroy();
                      p_CGAffineTransform t2 = (CGAffineTransform *)v235;
LABEL_57:
                      outlined retain of GraphicsContext.ResolvedShading(p_t2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of GraphicsContext.ResolvedShading);
LABEL_58:
                      if (v80 == ++*(void *)&v81) {
                        goto LABEL_50;
                      }
                      break;
                    case 9:
                      *(void *)&v236.double a = v38;
                      v236.CGFloat b = v18;
                      v236.CGFloat c = v81;
                      id v104 = (id)RBSymbolUpdateLayerColorName();
                      if (!v104) {
                        goto LABEL_58;
                      }
                      uint64_t v105 = v104;
                      uint64_t v106 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v108 = v107;

                      if (*(void *)&v19 == 1)
                      {
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        if (v106 == 0xD000000000000012 && v108 == 0x800000024621F720
                          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          float v115 = *((float *)&v156 + 1);
                          float v114 = *(float *)&v156;
                          float v91 = *((float *)&v158 + 1);
                          float v116 = *(float *)&v158;
LABEL_132:
                          uint64_t v80 = v189;
                          goto LABEL_133;
                        }
                        if (v106 == 0x6574696877 && v108 == 0xE500000000000000
                          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          float v114 = 1.0;
                          float v115 = 1.0;
                          float v116 = 1.0;
                          goto LABEL_132;
                        }
                        if (v106 == 0x6B63616C62 && v108 == 0xE500000000000000
                          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          float v114 = 0.0;
                          float v115 = 0.0;
                          float v116 = 0.0;
                          goto LABEL_132;
                        }
                        v236.double a = v156;
                        v236.CGFloat b = v158;
                        LOWORD(v236.c) = v157 & 0x101;
                        BYTE2(v236.c) = BYTE2(v157);
                        v236.double d = v19;
                        id v133 = *(id *)&v19;
                        ResolvedMulticolorStyle.environment.getter(v235);
                        CGFloat v134 = *(double *)v235;
                        unint64_t v218 = (void *)v235[1];
                        if (one-time initialization token for namedTypes != -1) {
                          swift_once();
                        }
                        uint64_t v135 = static SystemColorType.namedTypes;
                        if (*(void *)(static SystemColorType.namedTypes + 16))
                        {
                          swift_bridgeObjectRetain();
                          unint64_t v136 = specialized __RawDictionaryStorage.find<A>(_:)(v106, v108);
                          if (v137)
                          {
                            char v138 = *(unsigned char *)(*(void *)(v135 + 56) + v136);
                            swift_bridgeObjectRelease();
                            if (*(double *)&v218 == 0.0)
                            {
                              uint64_t v148 = swift_retain_n();
                              uint64_t v149 = specialized find<A>(_:key:)(v148);
                              if (v149)
                              {
                                uint64_t v139 = *(ValueMetadata **)(v149 + 72);
                                uint64_t v141 = *(_UNKNOWN ***)(v149 + 80);
                              }
                              else
                              {
                                uint64_t v139 = &type metadata for CoreUIDefaultSystemColorDefinition;
                                uint64_t v141 = &protocol witness table for CoreUIDefaultSystemColorDefinition;
                              }
                              swift_release_n();
                              CGFloat v142 = 0.0;
                            }
                            else
                            {
                              swift_retain_n();
                              swift_retain_n();
                              uint64_t v139 = (ValueMetadata *)specialized PropertyList.Tracker.value<A>(_:for:)(*(uint64_t *)&v134);
                              uint64_t v141 = v140;
                              swift_release_n();
                              swift_release_n();
                              CGFloat v142 = *(double *)&v218;
                            }
                            LOBYTE(v234[0]) = v138;
                            v236.double a = v134;
                            v236.CGFloat b = v142;
                            float v114 = ((float (*)(void *, CGAffineTransform *, ValueMetadata *, _UNKNOWN **))v141[1])(v234, &v236, v139, v141);
                            float v115 = v150;
                            float v116 = v151;
                            float v91 = v152;
                            swift_bridgeObjectRelease();
                            swift_release();
                            swift_release();
                            outlined consume of ResolvedMulticolorStyle?(*(uint64_t *)&v156, *(uint64_t *)&v158, v157, *(uint64_t *)&v19);
LABEL_155:
                            uint64_t v34 = v186;
                            uint64_t v42 = v181;
                            goto LABEL_132;
                          }
                          swift_bridgeObjectRelease();
                        }
                        if (v19 != 0.0)
                        {
                          v236.double a = v134;
                          *(void *)&v236.CGFloat b = v218;
                          *((CGFloat *)&v216 + 1) = v134;
                          outlined copy of ResolvedMulticolorStyle?(*(uint64_t *)&v156, *(uint64_t *)&v158, v157, *(void **)&v19);
                          swift_bridgeObjectRetain();
                          id v143 = Color.NamedColor.resolveCGColor(in:)((uint64_t *)&v236, v106, v108, *(void **)&v19);
                          swift_bridgeObjectRelease();
                          if (v143)
                          {
                            id v144 = v143;
                            unint64_t v215 = specialized Color.Resolved.init(failableCGColor:)(v144);
                            *(void *)&long long v216 = v145;
                            char v147 = v146;
                            outlined consume of ResolvedMulticolorStyle?(*(uint64_t *)&v156, *(uint64_t *)&v158, v157, *(uint64_t *)&v19);
                            swift_bridgeObjectRelease();

                            swift_release();
                            swift_release();
                            outlined consume of ResolvedMulticolorStyle?(*(uint64_t *)&v156, *(uint64_t *)&v158, v157, *(uint64_t *)&v19);
                            float v114 = 0.0;
                            float v115 = 0.0;
                            float v116 = 0.0;
                            float v91 = 0.0;
                            if ((v147 & 1) == 0)
                            {
                              float v115 = *((float *)&v215 + 1);
                              LODWORD(v114) = v215;
                              float v91 = *((float *)&v216 + 1);
                              LODWORD(v116) = v216;
                            }
                            goto LABEL_155;
                          }
                          outlined consume of ResolvedMulticolorStyle?(*(uint64_t *)&v156, *(uint64_t *)&v158, v157, *(uint64_t *)&v19);
                        }
                        swift_bridgeObjectRelease();
                        swift_release();
                        swift_release();
                        outlined consume of ResolvedMulticolorStyle?(*(uint64_t *)&v156, *(uint64_t *)&v158, v157, *(uint64_t *)&v19);
                      }
                      *(void *)&v236.double a = v38;
                      v236.CGFloat b = v18;
                      v236.CGFloat c = v81;
                      id v109 = (id)RBSymbolUpdateLayerDefaultColor();
                      uint64_t v80 = v189;
                      if (v109)
                      {
                        unint64_t v110 = specialized Color.Resolved.init(failableCGColor:)(v109);
                        if (v113) {
                          float v114 = 0.0;
                        }
                        else {
                          float v114 = *(float *)&v110;
                        }
                        if (v113) {
                          float v115 = 0.0;
                        }
                        else {
                          float v115 = *((float *)&v110 + 1);
                        }
                        if (v113) {
                          float v116 = 0.0;
                        }
                        else {
                          float v116 = v111;
                        }
                        if (v113) {
                          float v91 = 0.0;
                        }
                        else {
                          float v91 = v112;
                        }
                      }
                      else
                      {
                        float v114 = 1.0;
                        float v115 = 1.0;
                        float v116 = 1.0;
                      }
LABEL_133:
                      *(void *)&v236.double a = __PAIR64__(LODWORD(v115), LODWORD(v114));
                      *(void *)&v236.CGFloat b = __PAIR64__(LODWORD(v91), LODWORD(v116));
                      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v236);
                      char v103 = &v236;
                      goto LABEL_134;
                    default:
                      goto LABEL_58;
                  }
                }
              }
LABEL_50:
              ++*(void *)&v18;
              uint64_t v78 = v165;
              if (*(void *)&v18 == v165) {
                goto LABEL_156;
              }
            }
LABEL_161:
            __break(1u);
          }
          __break(1u);
LABEL_163:
          swift_once();
        }
      }
    }
    else
    {
      CGFloat v33 = a5;
      CGFloat b = 0.0;
      if (v7 != 3) {
        goto LABEL_8;
      }
    }
    uint64_t v45 = v11[2];
    CGAffineTransform v46 = (void *)v11[3];
    t1.double a = a;
    t1.CGFloat b = b;
    t1.CGFloat c = c;
    t1.double d = d;
    t1.tdouble x = a4;
    t1.tdouble y = v33;
    CGAffineTransformTranslate(&t2, &t1, 0.0, v211);
    CGAffineTransform t1 = t2;
    CGAffineTransformScale(&t2, &t1, 1.0, -1.0);
    long long v217 = *(_OWORD *)&t2.c;
    long long v219 = *(_OWORD *)&t2.a;
    CGFloat v47 = t2.tx;
    CGFloat v48 = t2.ty;
    swift_retain();
    outlined copy of Image.Location?(v46);
    swift_bridgeObjectRetain();
    *(_OWORD *)&t1.double a = v219;
    *(_OWORD *)&t1.CGFloat c = v217;
    t1.tdouble x = v47;
    t1.tdouble y = v48;
    RBDrawingStateConcatCTM();
    uint64_t v49 = RBDrawingStateInit();
    long long v50 = *(void (**)(uint64_t))(*(void *)v45 + 88);
    swift_retain();
    outlined copy of Image.Location?(v46);
    uint64_t v51 = swift_bridgeObjectRetain();
    v50(v51);
    swift_release();
    outlined consume of Image.Location?(v46);
    swift_bridgeObjectRelease();
    RBDrawingStateScaleCTM();
    uint64_t v52 = v49;
    if ((v213 & 1) == 0)
    {
      if (*(_DWORD *)(*(void *)(v186 + 16) + 64) != 2) {
        RBColorFromLinear();
      }
      RBDrawingStateAddAlphaMultiplyFilter2();
      uint64_t v52 = RBDrawingStateBeginLayer();
    }
    int v53 = *(void (**)(uint64_t))(*(void *)v45 + 96);
    swift_retain();
    outlined copy of Image.Location?(v46);
    uint64_t v54 = swift_bridgeObjectRetain();
    v53(v54);
    swift_release();
    outlined consume of Image.Location?(v46);
    swift_bridgeObjectRelease();
    RBDrawingStateDrawDisplayList();
    swift_unknownObjectRelease();
    if (v52 != v49) {
      RBDrawingStateDrawLayer();
    }
    RBDrawingStateDestroy();
    swift_release();
    outlined consume of Image.Location?(v46);
    swift_bridgeObjectRelease();
LABEL_157:
    RBDrawingStateDrawLayer();
    int v8 = 2;
  }
  return v8 == 2;
}

void *outlined copy of GraphicsContext.Filter.Storage(void *result, id a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  switch(a11 >> 27)
  {
    case 3u:
    case 6u:
    case 8u:
    case 0x12u:
      uint64_t result = (void *)swift_retain();
      break;
    case 5u:
      uint64_t result = (void *)outlined copy of Path.Storage(a5, a6, a7, a8, a9);
      break;
    case 0x11u:
      uint64_t result = outlined copy of GraphicsContext.Shading.Storage(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      break;
    case 0x13u:
      char v11 = a2 & 1;
      uint64_t result = (void *)outlined copy of EitherGradient((uint64_t)result, v11);
      break;
    case 0x17u:
      id v12 = result;
      swift_bridgeObjectRetain();
      uint64_t result = (void *)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void *outlined consume of GraphicsContext.Filter.Storage(void *result, id a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  switch(a11 >> 27)
  {
    case 3u:
    case 6u:
    case 8u:
    case 0x12u:
      uint64_t result = (void *)swift_release();
      break;
    case 5u:
      uint64_t result = (void *)outlined consume of Path.Storage(a5, a6, a7, a8, a9);
      break;
    case 0x11u:
      uint64_t result = outlined consume of GraphicsContext.Shading.Storage(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      break;
    case 0x13u:
      char v11 = a2 & 1;
      uint64_t result = (void *)outlined consume of EitherGradient((uint64_t)result, v11);
      break;
    case 0x17u:

      swift_bridgeObjectRelease();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t partial apply for closure #2 in GraphicsContext.addFilter(_:options:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return MEMORY[0x270F5AAD0](*(void *)(**(void **)(v4 + 16) + 24), a1, a2, a3, ((*(_DWORD *)(v4 + 24) & 1) << 6) | a4);
}

uint64_t outlined retain of Path.Storage(uint64_t a1)
{
  return a1;
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi3_(uint64_t result)
{
  *(void *)(result + 96) = *(void *)(result + 96) & 0xFF0301FFLL | 0x4000000000000000;
  return result;
}

uint64_t sub_245D600BC()
{
  outlined consume of GraphicsContext.ResolvedShading(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(_OWORD *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112));

  return swift_deallocObject();
}

uint64_t outlined release of GraphicsContext.ResolvedImage(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  id v12 = *(void **)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v6 = *(void *)(a1 + 152);
  uint64_t v7 = *(void *)(a1 + 160);
  uint64_t v8 = *(void *)(a1 + 168);
  uint64_t v9 = *(void *)(a1 + 176);
  unsigned __int8 v10 = *(unsigned char *)(a1 + 184);
  outlined consume of GraphicsImage.Contents?(*(void **)a1, *(unsigned char *)(a1 + 8));
  outlined consume of GraphicsContext.Shading?(v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

void specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v11 = *a2;
  double v10 = *((double *)a2 + 1);
  int v39 = 0;
  float v40 = 1.0;
  uint64_t v12 = MEMORY[0x24C5269B0](a1, &v40, &v39);
  if (v12)
  {
    uint64_t v13 = v12;
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 32) = xmmword_24619B520;
    *(void *)(v14 + 48) = 1065353216;
    *(void *)(v14 + 56) = 0x7FF8000000000000;
    id v15 = (id)RBDrawingStateGetDisplayList();
    double v41 = *(double *)&v11;
    double v42 = v10;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(void *)(v14 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v15, (uint64_t *)&v41);
    *(void *)(v14 + 24) = v13;
    *(unsigned char *)(v14 + 64) = 0;
    uint64_t v38 = v14;
    float v16 = v40;
    if (v40 == 1.0)
    {
      int v17 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v20 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v21 = swift_retain();
        uint64_t v38 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v21, v20, 1, 0);
        swift_release();
        uint64_t v14 = v38;
      }
      *(float *)(v14 + 48) = v16;
      int v17 = *(_DWORD *)(v14 + 52);
    }
    int v22 = v39;
    if (v17 != v39)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v23 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v24 = swift_retain();
        uint64_t v38 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v24, v23, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v38 + 52) = v22;
    }
    double v25 = *(const __CTLine **)a6;
    CFIndex v26 = *(void *)(a6 + 8);
    double v27 = *(double *)(a6 + 16);
    double v28 = *(double *)(a6 + 24);
    outlined retain of Text.Layout.Run((void **)a6);
    CGFloat v29 = (id)_CTLineGetRunAtIndex(v25, v26);
    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v29, (CFRange)0, &v41);

    outlined release of Text.Layout.Run((id *)a6);
    SwiftUITextAttachment.draw(in:at:)(&v38, v27 + v41, v28 + v42 - v43);
    swift_release();
  }
  else
  {
    id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
    objc_msgSend(v18, sel_setProfile_, 1);
    objc_msgSend(v18, sel_setDefaultColorSpace_, 1);
    ClipBoundingBodouble x = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v18, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if (a4)
    {
      if (v10 == 0.0)
      {
        uint64_t v30 = swift_retain_n();
        double v19 = specialized closure #1 in PropertyList.subscript.getter(v30);
      }
      else
      {
        swift_retain_n();
        swift_retain_n();
        double v19 = specialized PropertyList.Tracker.value<A>(_:for:)(v11);
        swift_release_n();
      }
      swift_release_n();
    }
    else
    {
      double v19 = *(double *)&a3;
    }
    objc_msgSend(v18, sel_setDeviceScale_, v19);
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 32) = xmmword_24619B520;
    *(void *)(v31 + 48) = 1065353216;
    *(void *)(v31 + 56) = 0x7FF8000000000000;
    double v41 = *(double *)&v11;
    double v42 = v10;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    id v32 = v18;
    swift_retain();
    *(void *)(v31 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v32, (uint64_t *)&v41);
    *(void *)(v31 + 24) = RBDisplayListGetState();
    *(unsigned char *)(v31 + 64) = 0;
    uint64_t v38 = v31;
    CGFloat v33 = *(const __CTLine **)a6;
    CFIndex v34 = *(void *)(a6 + 8);
    double v35 = *(double *)(a6 + 16);
    double v36 = *(double *)(a6 + 24);
    outlined retain of Text.Layout.Run((void **)a6);
    int v37 = (id)_CTLineGetRunAtIndex(v33, v34);
    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v37, (CFRange)0, &v41);

    outlined release of Text.Layout.Run((id *)a6);
    SwiftUITextAttachment.draw(in:at:)(&v38, v35 + v41, v36 + v42 - v43);
    objc_msgSend(v32, sel_renderInContext_options_, a1, 0);
    swift_release();
  }
}

{
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  float v17;
  int v18;
  id v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  const __CTLine *v26;
  CFIndex v27;
  double v28;
  double v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  const __CTLine *v34;
  CFIndex v35;
  double v36;
  double v37;
  void *v38;
  uint64_t v39;
  int v40;
  float v41;
  double v42;
  double v43;
  long long v44;
  long long v45;
  double v46;
  double v47;
  long long v48;
  long long v49;
  uint64_t v50;
  CGRect ClipBoundingBox;

  long long v50 = *MEMORY[0x263EF8340];
  uint64_t v12 = *a2;
  uint64_t v11 = *((double *)a2 + 1);
  float v40 = 0;
  double v41 = 1.0;
  uint64_t v13 = MEMORY[0x24C5269B0](a1, &v41, &v40);
  if (v13)
  {
    uint64_t v14 = v13;
    type metadata accessor for GraphicsContext.Storage();
    id v15 = swift_allocObject();
    *(_OWORD *)(v15 + 32) = xmmword_24619B520;
    *(void *)(v15 + 48) = 1065353216;
    *(void *)(v15 + 56) = 0x7FF8000000000000;
    float v16 = (id)RBDrawingStateGetDisplayList();
    CGAffineTransform v46 = *(double *)&v12;
    CGFloat v47 = v11;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(void *)(v15 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v16, (uint64_t *)&v46);
    *(void *)(v15 + 24) = v14;
    *(unsigned char *)(v15 + 64) = 0;
    int v39 = v15;
    int v17 = v41;
    if (v41 == 1.0)
    {
      id v18 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v21 = RBDrawingStateInit();
        swift_allocObject();
        int v22 = swift_retain();
        int v39 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v22, v21, 1, 0);
        swift_release();
        id v15 = v39;
      }
      *(float *)(v15 + 48) = v17;
      id v18 = *(_DWORD *)(v15 + 52);
    }
    uint64_t v23 = v40;
    if (v18 != v40)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v24 = RBDrawingStateInit();
        swift_allocObject();
        double v25 = swift_retain();
        int v39 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v25, v24, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v39 + 52) = v23;
    }
    CFIndex v26 = *(const __CTLine **)a6;
    double v27 = *(void *)(a6 + 8);
    double v28 = *(double *)(a6 + 16);
    CGFloat v29 = *(double *)(a6 + 24);
    outlined retain of Text.Layout.Run((void **)a6);
    uint64_t v30 = (id)_CTLineGetRunAtIndex(v26, v27);
    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v30, (CFRange)0, &v42);

    outlined release of Text.Layout.Run((id *)a6);
    CGAffineTransform v46 = v28 + v42;
    CGFloat v47 = v29 + v43;
    CGFloat v48 = v44;
    uint64_t v49 = v45;
    (*(void (**)(double *, uint64_t *))(*(void *)a5 + 104))(&v46, &v39);
    swift_release();
  }
  else
  {
    double v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
    objc_msgSend(v19, sel_setProfile_, 1);
    objc_msgSend(v19, sel_setDefaultColorSpace_, 1);
    ClipBoundingBodouble x = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v19, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if (a4)
    {
      if (v11 == 0.0)
      {
        uint64_t v31 = swift_retain_n();
        uint64_t v20 = specialized closure #1 in PropertyList.subscript.getter(v31);
      }
      else
      {
        swift_retain_n();
        swift_retain_n();
        uint64_t v20 = specialized PropertyList.Tracker.value<A>(_:for:)(v12);
        swift_release_n();
      }
      swift_release_n();
    }
    else
    {
      uint64_t v20 = *(double *)&a3;
    }
    objc_msgSend(v19, sel_setDeviceScale_, v20);
    type metadata accessor for GraphicsContext.Storage();
    id v32 = swift_allocObject();
    *(_OWORD *)(v32 + 32) = xmmword_24619B520;
    *(void *)(v32 + 48) = 1065353216;
    *(void *)(v32 + 56) = 0x7FF8000000000000;
    CGAffineTransform v46 = *(double *)&v12;
    CGFloat v47 = v11;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    CGFloat v33 = v19;
    swift_retain();
    *(void *)(v32 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v33, (uint64_t *)&v46);
    *(void *)(v32 + 24) = RBDisplayListGetState();
    *(unsigned char *)(v32 + 64) = 0;
    int v39 = v32;
    CFIndex v34 = *(const __CTLine **)a6;
    double v35 = *(void *)(a6 + 8);
    double v36 = *(double *)(a6 + 16);
    int v37 = *(double *)(a6 + 24);
    outlined retain of Text.Layout.Run((void **)a6);
    uint64_t v38 = (id)_CTLineGetRunAtIndex(v34, v35);
    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v38, (CFRange)0, &v42);

    outlined release of Text.Layout.Run((id *)a6);
    CGAffineTransform v46 = v36 + v42;
    CGFloat v47 = v37 + v43;
    CGFloat v48 = v44;
    uint64_t v49 = v45;
    (*(void (**)(double *, uint64_t *))(*(void *)a5 + 104))(&v46, &v39);
    objc_msgSend(v33, sel_renderInContext_options_, a1, 0);
    swift_release();
  }
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  float v17;
  int v18;
  id v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  int v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CGRect ClipBoundingBox;

  CFIndex v34 = *MEMORY[0x263EF8340];
  uint64_t v12 = *a2;
  uint64_t v11 = a2[1];
  uint64_t v30 = 0;
  uint64_t v31 = 1.0;
  uint64_t v13 = MEMORY[0x24C5269B0](a1, &v31, &v30);
  if (v13)
  {
    uint64_t v14 = v13;
    type metadata accessor for GraphicsContext.Storage();
    id v15 = swift_allocObject();
    *(_OWORD *)(v15 + 32) = xmmword_24619B520;
    *(void *)(v15 + 48) = 1065353216;
    *(void *)(v15 + 56) = 0x7FF8000000000000;
    float v16 = (id)RBDrawingStateGetDisplayList();
    id v32 = v12;
    CGFloat v33 = v11;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(void *)(v15 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v16, &v32);
    *(void *)(v15 + 24) = v14;
    *(unsigned char *)(v15 + 64) = 0;
    id v32 = v15;
    int v17 = v31;
    if (v31 == 1.0)
    {
      id v18 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v21 = RBDrawingStateInit();
        swift_allocObject();
        int v22 = swift_retain();
        uint64_t v23 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v22, v21, 1, 0);
        id v32 = v23;
        swift_release();
        id v15 = v23;
      }
      *(float *)(v15 + 48) = v17;
      id v18 = *(_DWORD *)(v15 + 52);
    }
    uint64_t v24 = v30;
    if (v18 != v30)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        double v25 = RBDrawingStateInit();
        swift_allocObject();
        CFIndex v26 = swift_retain();
        id v32 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v26, v25, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v32 + 52) = v24;
    }
    closure #1 in closure #1 in TextLinesLayer.draw(in:)(&v32, a5, a6);
    swift_release();
  }
  else
  {
    double v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
    objc_msgSend(v19, sel_setProfile_, 1);
    objc_msgSend(v19, sel_setDefaultColorSpace_, 1);
    ClipBoundingBodouble x = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v19, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if (a4)
    {
      if (v11)
      {
        swift_retain_n();
        swift_retain_n();
        uint64_t v20 = specialized PropertyList.Tracker.value<A>(_:for:)(v12);
        swift_release_n();
      }
      else
      {
        double v27 = swift_retain_n();
        uint64_t v20 = specialized closure #1 in PropertyList.subscript.getter(v27);
      }
      swift_release_n();
    }
    else
    {
      uint64_t v20 = *(double *)&a3;
    }
    objc_msgSend(v19, sel_setDeviceScale_, v20);
    type metadata accessor for GraphicsContext.Storage();
    double v28 = swift_allocObject();
    *(_OWORD *)(v28 + 32) = xmmword_24619B520;
    *(void *)(v28 + 48) = 1065353216;
    *(void *)(v28 + 56) = 0x7FF8000000000000;
    id v32 = v12;
    CGFloat v33 = v11;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    CGFloat v29 = v19;
    swift_retain();
    *(void *)(v28 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v29, &v32);
    *(void *)(v28 + 24) = RBDisplayListGetState();
    *(unsigned char *)(v28 + 64) = 0;
    id v32 = v28;
    closure #1 in closure #1 in TextLinesLayer.draw(in:)(&v32, a5, a6);
    objc_msgSend(v29, sel_renderInContext_options_, a1, 0);
    swift_release();
  }
}

void specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v14 = *a2;
  double v13 = *((double *)a2 + 1);
  int v58 = 0;
  float v59 = 1.0;
  uint64_t v15 = MEMORY[0x24C5269B0](a1, &v59, &v58);
  if (v15)
  {
    uint64_t v16 = v15;
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 32) = xmmword_24619B520;
    *(void *)(v17 + 48) = 1065353216;
    *(void *)(v17 + 56) = 0x7FF8000000000000;
    id v18 = (id)RBDrawingStateGetDisplayList();
    double v60 = *(double *)&v14;
    double v61 = v13;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(void *)(v17 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v18, (uint64_t *)&v60);
    *(void *)(v17 + 24) = v16;
    *(unsigned char *)(v17 + 64) = 0;
    uint64_t v57 = v17;
    float v19 = v59;
    if (v59 == 1.0)
    {
      int v20 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v23 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v24 = swift_retain();
        uint64_t v57 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v24, v23, 1, 0);
        swift_release();
        uint64_t v17 = v57;
      }
      *(float *)(v17 + 48) = v19;
      int v20 = *(_DWORD *)(v17 + 52);
    }
    int v25 = v58;
    if (v20 != v58)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v26 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v27 = swift_retain();
        uint64_t v57 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v27, v26, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v57 + 52) = v25;
    }
    double v28 = *(const __CTLine **)a7;
    CFIndex v29 = *(void *)(a7 + 8);
    double v30 = *(double *)(a7 + 16);
    double v31 = *(double *)(a7 + 24);
    outlined retain of Text.Layout.Run((void **)a7);
    id v32 = (id)_CTLineGetRunAtIndex(v28, v29);
    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v32, (CFRange)0, &v60);

    outlined release of Text.Layout.Run((id *)a7);
    double v33 = v62;
    double v34 = v30 + v60;
    double v35 = v31 + v61 - v63;
    double v36 = v63 + v64;
    outlined retain of Text.Layout.Run((void **)a7);
    int v37 = (id)_CTLineGetRunAtIndex(v28, v29);
    CFDictionaryRef v38 = CTRunGetAttributes((CTRunRef)v37);

    int v39 = (id)_CTLineGetRunAtIndex(v28, v29);
    outlined release of Text.Layout.Run((id *)a7);
    CFRange StringRange = CTRunGetStringRange((CTRunRef)v39);

    (*(void (**)(uint64_t, const __CFDictionary *, CFIndex, CFIndex, uint64_t *, double, double, double, double))(*(void *)a5 + 80))(a6, v38, StringRange.location, StringRange.length, &v57, v34, v35, v33, v36);
    swift_release();
  }
  else
  {
    id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
    objc_msgSend(v21, sel_setProfile_, 1);
    objc_msgSend(v21, sel_setDefaultColorSpace_, 1);
    ClipBoundingBodouble x = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v21, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if (a4)
    {
      if (v13 == 0.0)
      {
        uint64_t v41 = swift_retain_n();
        double v22 = specialized closure #1 in PropertyList.subscript.getter(v41);
      }
      else
      {
        swift_retain_n();
        swift_retain_n();
        double v22 = specialized PropertyList.Tracker.value<A>(_:for:)(v14);
        swift_release_n();
      }
      swift_release_n();
    }
    else
    {
      double v22 = *(double *)&a3;
    }
    objc_msgSend(v21, sel_setDeviceScale_, v22);
    type metadata accessor for GraphicsContext.Storage();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 32) = xmmword_24619B520;
    *(void *)(inited + 48) = 1065353216;
    *(void *)(inited + 56) = 0x7FF8000000000000;
    double v60 = *(double *)&v14;
    double v61 = v13;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    id v43 = v21;
    swift_retain();
    *(void *)(inited + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v43, (uint64_t *)&v60);
    *(void *)(inited + 24) = RBDisplayListGetState();
    *(unsigned char *)(inited + 64) = 0;
    uint64_t v57 = inited;
    uint64_t v44 = *(const __CTLine **)a7;
    CFIndex v45 = *(void *)(a7 + 8);
    double v46 = *(double *)(a7 + 16);
    double v47 = *(double *)(a7 + 24);
    outlined retain of Text.Layout.Run((void **)a7);
    CGFloat v48 = (id)_CTLineGetRunAtIndex(v44, v45);
    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v48, (CFRange)0, &v60);

    outlined release of Text.Layout.Run((id *)a7);
    double v49 = v62;
    double v50 = v46 + v60;
    double v51 = v47 + v61 - v63;
    double v52 = v63 + v64;
    outlined retain of Text.Layout.Run((void **)a7);
    int v53 = (id)_CTLineGetRunAtIndex(v44, v45);
    CFDictionaryRef v54 = CTRunGetAttributes((CTRunRef)v53);

    CGFloat v55 = (id)_CTLineGetRunAtIndex(v44, v45);
    outlined release of Text.Layout.Run((id *)a7);
    CFRange v56 = CTRunGetStringRange((CTRunRef)v55);

    (*(void (**)(uint64_t, const __CFDictionary *, CFIndex, CFIndex, uint64_t *, double, double, double, double))(*(void *)a5 + 80))(a6, v54, v56.location, v56.length, &v57, v50, v51, v49, v52);
    objc_msgSend(v43, sel_renderInContext_options_, a1, 0);
    swift_release();
  }
}

void specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v14 = *a2;
  uint64_t v13 = a2[1];
  int v58 = 0;
  float v59 = 1.0;
  uint64_t v15 = MEMORY[0x24C5269B0](a1, &v59, &v58);
  if (v15)
  {
    uint64_t v16 = v15;
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 32) = xmmword_24619B520;
    *(void *)(v17 + 48) = 1065353216;
    *(void *)(v17 + 56) = 0x7FF8000000000000;
    id v18 = (id)RBDrawingStateGetDisplayList();
    uint64_t v60 = v14;
    uint64_t v61 = v13;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(void *)(v17 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v18, &v60);
    *(void *)(v17 + 24) = v16;
    *(unsigned char *)(v17 + 64) = 0;
    uint64_t v57 = v17;
    float v19 = v59;
    if (v59 == 1.0)
    {
      int v20 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v23 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v24 = swift_retain();
        uint64_t v57 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v24, v23, 1, 0);
        swift_release();
        uint64_t v17 = v57;
      }
      *(float *)(v17 + 48) = v19;
      int v20 = *(_DWORD *)(v17 + 52);
    }
    int v25 = v58;
    if (v20 != v58)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v26 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v27 = swift_retain();
        uint64_t v57 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v27, v26, 1, 0);
        swift_release();
      }
      uint64_t v17 = v57;
      *(_DWORD *)(v57 + 52) = v25;
    }
    if (a5)
    {
      double v28 = *(double (**)(uint64_t))(*(void *)a5 + 112);
      uint64_t v29 = swift_retain();
      double v30 = v28(v29);
      if (v31 != 0.0 || v30 != 0.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v32 = RBDrawingStateInit();
          swift_allocObject();
          uint64_t v33 = swift_retain();
          uint64_t v57 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v33, v32, 1, 0);
          swift_release();
        }
        RBDrawingStateTranslateCTM();
      }
      uint64_t v60 = a6;
      LOBYTE(v61) = a7 & 1;
      uint64_t v62 = a8;
      (*(void (**)(uint64_t *, uint64_t *))(*(void *)a5 + 96))(&v60, &v57);
      swift_release();
    }
    else
    {
      uint64_t v34 = *(void *)(a6 + 16);
      if (v34)
      {
        swift_bridgeObjectRetain();
        uint64_t v35 = a6 + 40;
        do
        {
          int v36 = *(_DWORD *)(v35 + 32);
          char v37 = *(unsigned char *)(v35 + 8);
          int v39 = *(void **)(v35 - 8);
          uint64_t v38 = *(void *)v35;
          uint64_t v60 = (uint64_t)v39;
          uint64_t v61 = v38;
          LOBYTE(v62) = v37;
          long long v63 = *(_OWORD *)(v35 + 16);
          int v64 = v36;
          outlined copy of Text.Layout.Line.Line(v39, v38, v37);
          GraphicsContext.draw(_:options:)((uint64_t)&v60, 0, v17);
          outlined consume of Text.Layout.Line.Line(v39, v38, v37);
          v35 += 48;
          --v34;
        }
        while (v34);
        swift_bridgeObjectRelease();
      }
    }
    swift_release();
  }
  else
  {
    id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
    objc_msgSend(v21, sel_setProfile_, 1);
    objc_msgSend(v21, sel_setDefaultColorSpace_, 1);
    ClipBoundingBodouble x = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v21, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if (a4)
    {
      if (v13)
      {
        swift_retain_n();
        swift_retain_n();
        double v22 = specialized PropertyList.Tracker.value<A>(_:for:)(v14);
        swift_release_n();
      }
      else
      {
        uint64_t v40 = swift_retain_n();
        double v22 = specialized closure #1 in PropertyList.subscript.getter(v40);
      }
      swift_release_n();
    }
    else
    {
      double v22 = *(double *)&a3;
    }
    objc_msgSend(v21, sel_setDeviceScale_, v22);
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 32) = xmmword_24619B520;
    *(void *)(v41 + 48) = 1065353216;
    *(void *)(v41 + 56) = 0x7FF8000000000000;
    uint64_t v60 = v14;
    uint64_t v61 = v13;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    id v42 = v21;
    swift_retain();
    *(void *)(v41 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v42, &v60);
    *(void *)(v41 + 24) = RBDisplayListGetState();
    *(unsigned char *)(v41 + 64) = 0;
    uint64_t v57 = v41;
    if (a5)
    {
      id v43 = *(double (**)(uint64_t))(*(void *)a5 + 112);
      uint64_t v44 = swift_retain();
      double v45 = v43(v44);
      if (v46 != 0.0 || v45 != 0.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v47 = RBDrawingStateInit();
          swift_allocObject();
          uint64_t v48 = swift_retain();
          uint64_t v57 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v48, v47, 1, 0);
          swift_release();
        }
        RBDrawingStateTranslateCTM();
      }
      uint64_t v60 = a6;
      LOBYTE(v61) = a7 & 1;
      uint64_t v62 = a8;
      (*(void (**)(uint64_t *, uint64_t *))(*(void *)a5 + 96))(&v60, &v57);
      swift_release();
    }
    else
    {
      uint64_t v49 = *(void *)(a6 + 16);
      if (v49)
      {
        swift_bridgeObjectRetain();
        uint64_t v50 = a6 + 40;
        do
        {
          int v51 = *(_DWORD *)(v50 + 32);
          char v52 = *(unsigned char *)(v50 + 8);
          CFDictionaryRef v54 = *(void **)(v50 - 8);
          uint64_t v53 = *(void *)v50;
          uint64_t v60 = (uint64_t)v54;
          uint64_t v61 = v53;
          LOBYTE(v62) = v52;
          long long v63 = *(_OWORD *)(v50 + 16);
          int v64 = v51;
          outlined copy of Text.Layout.Line.Line(v54, v53, v52);
          GraphicsContext.draw(_:options:)((uint64_t)&v60, 0, v41);
          outlined consume of Text.Layout.Line.Line(v54, v53, v52);
          v50 += 48;
          --v49;
        }
        while (v49);
        swift_bridgeObjectRelease();
      }
    }
    objc_msgSend(v42, sel_renderInContext_options_, a1, 0);
    swift_release();
  }
}

uint64_t specialized GraphicsContext.clipToLayer(opacity:options:content:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  return specialized GraphicsContext.clipToLayer(opacity:options:content:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int16 v14;
  char v15;
  uint64_t v16;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v8 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v9 = swift_retain();
    *a2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v9, v8, 1, 0);
    swift_release();
  }
  double v10 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  uint64_t v11 = swift_retain();
  uint64_t v16 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v11, v10, 0, 1);
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v15 = BYTE2(a5);
  swift_retain();
  DisplayList.GraphicsRenderer.render(list:in:)(&v13, &v16);
  swift_release();
  RBDrawingStateClipLayer();
  return swift_release();
}

uint64_t specialized GraphicsContext.drawLayer(flags:content:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  __int16 v5 = a5;
  unsigned int v8 = HIWORD(a5);
  uint64_t v9 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  uint64_t v10 = swift_retain();
  uint64_t v15 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v10, v9, 0, (a1 & 0x20) == 0);
  uint64_t v12 = a4;
  __int16 v13 = v5;
  char v14 = v8;
  swift_retain();
  DisplayList.GraphicsRenderer.render(list:in:)(&v12, &v15);
  swift_release();
  RBDrawingStateDrawLayer();
  return swift_release();
}

void specialized GraphicsContext.withPlatformContext(content:)(uint64_t a1, void (*a2)(id, double, double), double a3, double a4)
{
  unsigned int v8 = (CGContext *)(id)RBDrawingStateBeginCGContext();
  uint64_t v9 = v8;
  CGBlendMode v10 = *(_DWORD *)(a1 + 52);
  if (v10) {
    CGContextSetBlendMode(v8, v10);
  }
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = ~v11 & 0x7FF0000000000000;
  uint64_t v13 = v11 & 0xFFFFFFFFFFFFFLL;
  if (v12) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = v13 == 0;
  }
  if (v14)
  {
    _CGContextSetShapeDistance(*(double *)(a1 + 56));
    id v15 = objc_msgSend(objc_allocWithZone((Class)CoreGraphicsContext), sel_initWithCGContext_, v9);
    a2(objc_msgSend(v15, sel_push), a3, a4);
    [v15 pop];

    _CGContextSetShapeDistance(NAN);
  }
  else
  {
    id v16 = objc_msgSend(objc_allocWithZone((Class)CoreGraphicsContext), sel_initWithCGContext_, v9);
    a2(objc_msgSend(v16, sel_push), a3, a4);
    [v16 pop];
  }
  RBDrawingStateEndCGContext();
}

uint64_t specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t *a2, uint64_t a3, char a4, void (*a5)(uint64_t *, double, double), double a6, double a7)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v14 = *a2;
  uint64_t v13 = a2[1];
  int v33 = 0;
  float v34 = 1.0;
  uint64_t v15 = MEMORY[0x24C5269B0](a1, &v34, &v33);
  if (v15)
  {
    uint64_t v16 = v15;
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 32) = xmmword_24619B520;
    *(void *)(v17 + 48) = 1065353216;
    *(void *)(v17 + 56) = 0x7FF8000000000000;
    id v18 = (id)RBDrawingStateGetDisplayList();
    uint64_t v35 = v14;
    uint64_t v36 = v13;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(void *)(v17 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v18, &v35);
    *(void *)(v17 + 24) = v16;
    *(unsigned char *)(v17 + 64) = 0;
    uint64_t v35 = v17;
    float v19 = v34;
    if (v34 == 1.0)
    {
      int v20 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v23 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v24 = swift_retain();
        uint64_t v25 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v24, v23, 1, 0);
        uint64_t v35 = v25;
        swift_release();
        uint64_t v17 = v25;
      }
      *(float *)(v17 + 48) = v19;
      int v20 = *(_DWORD *)(v17 + 52);
    }
    int v26 = v33;
    if (v20 != v33)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v27 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v28 = swift_retain();
        uint64_t v35 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v28, v27, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v35 + 52) = v26;
    }
    a5(&v35, a6, a7);
  }
  else
  {
    id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
    objc_msgSend(v21, sel_setProfile_, 1);
    objc_msgSend(v21, sel_setDefaultColorSpace_, 1);
    ClipBoundingBodouble x = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v21, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if (a4)
    {
      if (v13)
      {
        swift_retain_n();
        swift_retain_n();
        double v22 = specialized PropertyList.Tracker.value<A>(_:for:)(v14);
        swift_release_n();
      }
      else
      {
        uint64_t v29 = swift_retain_n();
        double v22 = specialized closure #1 in PropertyList.subscript.getter(v29);
      }
      swift_release_n();
    }
    else
    {
      double v22 = *(double *)&a3;
    }
    objc_msgSend(v21, sel_setDeviceScale_, v22);
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 32) = xmmword_24619B520;
    *(void *)(v30 + 48) = 1065353216;
    *(void *)(v30 + 56) = 0x7FF8000000000000;
    uint64_t v35 = v14;
    uint64_t v36 = v13;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    id v31 = v21;
    swift_retain();
    *(void *)(v30 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v31, &v35);
    *(void *)(v30 + 24) = RBDisplayListGetState();
    *(unsigned char *)(v30 + 64) = 0;
    uint64_t v35 = v30;
    a5(&v35, a6, a7);
    objc_msgSend(v31, sel_renderInContext_options_, a1, 0);
  }
  return swift_release();
}

uint64_t specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7, double a8, double a9, double a10)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v19 = *a2;
  uint64_t v18 = a2[1];
  int v45 = 0;
  float v46 = 1.0;
  uint64_t v20 = MEMORY[0x24C5269B0](a1, &v46, &v45);
  if (!v20)
  {
    id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
    objc_msgSend(v26, sel_setProfile_, 1);
    objc_msgSend(v26, sel_setDefaultColorSpace_, 1);
    ClipBoundingBodouble x = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v26, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if (a4)
    {
      if (v18)
      {
        swift_retain_n();
        swift_retain_n();
        double v27 = specialized PropertyList.Tracker.value<A>(_:for:)(v19);
        swift_release_n();
      }
      else
      {
        uint64_t v37 = swift_retain_n();
        double v27 = specialized closure #1 in PropertyList.subscript.getter(v37);
      }
      swift_release_n();
    }
    else
    {
      double v27 = *(double *)&a3;
    }
    objc_msgSend(v26, sel_setDeviceScale_, v27);
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 32) = xmmword_24619B520;
    *(void *)(v38 + 48) = 1065353216;
    *(void *)(v38 + 56) = 0x7FF8000000000000;
    uint64_t v48 = v19;
    uint64_t v49 = v18;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    id v39 = v26;
    swift_retain();
    *(void *)(v38 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v39, &v48);
    *(void *)(v38 + 24) = RBDisplayListGetState();
    *(unsigned char *)(v38 + 64) = 0;
    uint64_t v48 = v38;
    if (a8 == 0.0 && a9 == 0.0)
    {
      uint64_t v40 = *(__n128 **)(a5 + 8);
      if (v40)
      {
LABEL_28:
        double v47 = a10;
        swift_bridgeObjectRetain();
        swift_retain();
        specialized DisplayList.GraphicsRenderer.render(at:do:)((unint64_t *)&v47, v40, (uint64_t)v40, a6, a7 & 0xFFFFFF, (unint64_t *)&v48);
        swift_release();
        swift_bridgeObjectRelease();
        objc_msgSend(v39, sel_renderInContext_options_, a1, 0);

        return swift_release();
      }
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v42 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v43 = swift_retain();
        uint64_t v48 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v43, v42, 1, 0);
        swift_release();
      }
      RBDrawingStateTranslateCTM();
      uint64_t v40 = *(__n128 **)(a5 + 8);
      if (v40) {
        goto LABEL_28;
      }
    }
    LOBYTE(v47) = *(unsigned char *)a5;
    type metadata accessor for DisplayList.GraphicsRenderer();
    swift_allocObject();
    uint64_t v40 = (__n128 *)DisplayList.GraphicsRenderer.init(platformViewMode:)((char *)&v47);
    *(void *)(a5 + 8) = v40;
    goto LABEL_28;
  }
  uint64_t v21 = v20;
  type metadata accessor for GraphicsContext.Storage();
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 32) = xmmword_24619B520;
  *(void *)(v22 + 48) = 1065353216;
  *(void *)(v22 + 56) = 0x7FF8000000000000;
  id v23 = (id)RBDrawingStateGetDisplayList();
  uint64_t v48 = v19;
  uint64_t v49 = v18;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  swift_retain();
  swift_retain();
  *(void *)(v22 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v23, &v48);
  *(void *)(v22 + 24) = v21;
  *(unsigned char *)(v22 + 64) = 0;
  uint64_t v48 = v22;
  float v24 = v46;
  if (v46 == 1.0)
  {
    int v25 = 0;
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v28 = RBDrawingStateInit();
      swift_allocObject();
      uint64_t v29 = swift_retain();
      uint64_t v30 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v29, v28, 1, 0);
      uint64_t v48 = v30;
      swift_release();
      uint64_t v22 = v30;
    }
    *(float *)(v22 + 48) = v24;
    int v25 = *(_DWORD *)(v22 + 52);
  }
  int v31 = v45;
  if (v25 != v45)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v32 = RBDrawingStateInit();
      swift_allocObject();
      uint64_t v33 = swift_retain();
      uint64_t v48 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v33, v32, 1, 0);
      swift_release();
    }
    *(_DWORD *)(v48 + 52) = v31;
  }
  if (a8 != 0.0 || a9 != 0.0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v35 = RBDrawingStateInit();
      swift_allocObject();
      uint64_t v36 = swift_retain();
      uint64_t v48 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v36, v35, 1, 0);
      swift_release();
    }
    RBDrawingStateTranslateCTM();
    float v34 = *(__n128 **)(a5 + 8);
    if (v34) {
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  float v34 = *(__n128 **)(a5 + 8);
  if (!v34)
  {
LABEL_20:
    LOBYTE(v47) = *(unsigned char *)a5;
    type metadata accessor for DisplayList.GraphicsRenderer();
    swift_allocObject();
    float v34 = (__n128 *)DisplayList.GraphicsRenderer.init(platformViewMode:)((char *)&v47);
    *(void *)(a5 + 8) = v34;
  }
LABEL_16:
  double v47 = a10;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized DisplayList.GraphicsRenderer.render(at:do:)((unint64_t *)&v47, v34, (uint64_t)v34, a6, a7 & 0xFFFFFF, (unint64_t *)&v48);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

void specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t *a2, uint64_t a3, char a4, void *a5, double a6, double a7, float a8)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v16 = *a2;
  uint64_t v15 = a2[1];
  int v49 = 0;
  float v50 = 1.0;
  uint64_t v17 = MEMORY[0x24C5269B0](a1, &v50, &v49);
  if (v17)
  {
    uint64_t v18 = v17;
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 32) = xmmword_24619B520;
    *(void *)(v19 + 48) = 1065353216;
    *(void *)(v19 + 56) = 0x7FF8000000000000;
    id v20 = (id)RBDrawingStateGetDisplayList();
    uint64_t v51 = v16;
    uint64_t v52 = v15;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(void *)(v19 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v20, &v51);
    *(void *)(v19 + 24) = v18;
    *(unsigned char *)(v19 + 64) = 0;
    float v21 = v50;
    if (v50 == 1.0)
    {
      int v22 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v25 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v26 = swift_retain();
        uint64_t v27 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v26, v25, 1, 0);
        swift_release();
        uint64_t v19 = v27;
      }
      *(float *)(v19 + 48) = v21;
      int v22 = *(_DWORD *)(v19 + 52);
    }
    int v28 = v49;
    if (v22 != v49)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v29 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v30 = swift_retain();
        uint64_t v31 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v30, v29, 1, 0);
        swift_release();
        uint64_t v19 = v31;
      }
      *(_DWORD *)(v19 + 52) = v28;
    }
    if (a6 != 0.0 || a7 != 0.0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v32 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v33 = swift_retain();
        uint64_t v34 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v33, v32, 1, 0);
        swift_release();
        uint64_t v19 = v34;
      }
      RBDrawingStateTranslateCTM();
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v36 = RBDrawingStateInit();
      swift_allocObject();
      uint64_t v37 = swift_retain();
      uint64_t v38 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v37, v36, 1, 0);
      swift_release();
      uint64_t v19 = v38;
    }
    *(float *)&double v35 = a8;
    objc_msgSend(a5, sel_drawInState_by_, *(void *)(v19 + 24), v35);
    swift_release();
  }
  else
  {
    id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
    objc_msgSend(v23, sel_setProfile_, 1);
    objc_msgSend(v23, sel_setDefaultColorSpace_, 1);
    ClipBoundingBodouble x = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v23, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if (a4)
    {
      if (v15)
      {
        swift_retain_n();
        swift_retain_n();
        double v24 = specialized PropertyList.Tracker.value<A>(_:for:)(v16);
        swift_release_n();
      }
      else
      {
        uint64_t v39 = swift_retain_n();
        double v24 = specialized closure #1 in PropertyList.subscript.getter(v39);
      }
      swift_release_n();
    }
    else
    {
      double v24 = *(double *)&a3;
    }
    objc_msgSend(v23, sel_setDeviceScale_, v24);
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 32) = xmmword_24619B520;
    *(void *)(v40 + 48) = 1065353216;
    *(void *)(v40 + 56) = 0x7FF8000000000000;
    uint64_t v51 = v16;
    uint64_t v52 = v15;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    id v41 = v23;
    swift_retain();
    *(void *)(v40 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v41, &v51);
    *(void *)(v40 + 24) = RBDisplayListGetState();
    *(unsigned char *)(v40 + 64) = 0;
    if (a6 != 0.0 || a7 != 0.0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v42 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v43 = swift_retain();
        uint64_t v44 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v43, v42, 1, 0);
        swift_release();
        uint64_t v40 = v44;
      }
      RBDrawingStateTranslateCTM();
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v46 = RBDrawingStateInit();
      swift_allocObject();
      uint64_t v47 = swift_retain();
      uint64_t v48 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v47, v46, 1, 0);
      swift_release();
      uint64_t v40 = v48;
    }
    *(float *)&double v45 = a8;
    objc_msgSend(a5, sel_drawInState_by_, *(void *)(v40 + 24), v45);
    objc_msgSend(v41, sel_renderInContext_options_, a1, 0);
    swift_release();
  }
}

uint64_t sub_245D62B0C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t specialized GraphicsContext.drawLayer(flags:content:)(char a1, CGFloat a2, uint64_t a3, void *a4)
{
  uint64_t v7 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  uint64_t v8 = swift_retain();
  uint64_t v9 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v8, v7, 0, (a1 & 0x20) == 0);
  swift_retain();
  uint64_t v10 = v9;
  if (objc_msgSend(a4, sel_isGeometryFlipped))
  {
    v18.CGFloat b = 0.0;
    v18.CGFloat c = 0.0;
    v18.double a = 1.0;
    long long v17 = xmmword_2461DCF40;
    *(_OWORD *)&v18.double d = xmmword_2461DCF40;
    v18.tdouble y = a2;
    uint64_t v10 = v9;
    if (!CGAffineTransformIsIdentity(&v18))
    {
      uint64_t v10 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v11 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v12 = swift_retain();
        uint64_t v10 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v12, v11, 1, 0);
        swift_release();
      }
      v18.CGFloat b = 0.0;
      v18.CGFloat c = 0.0;
      v18.double a = 1.0;
      *(_OWORD *)&v18.double d = xmmword_2461DCF40;
      v18.tdouble y = a2;
      RBDrawingStateConcatCTM();
    }
  }
  uint64_t v13 = (CGContext *)(id)RBDrawingStateBeginCGContext();
  uint64_t v14 = v13;
  CGBlendMode v15 = *(_DWORD *)(v10 + 52);
  if (v15) {
    CGContextSetBlendMode(v13, v15);
  }
  objc_msgSend(a4, sel_renderInContext_, v14, v17);
  RBDrawingStateEndCGContext();
  swift_release();

  RBDrawingStateDrawLayer();
  return swift_release();
}

uint64_t specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6)
{
  int v58 = a6;
  uint64_t v59 = a5;
  uint64_t v73 = *MEMORY[0x263EF8340];
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>();
  uint64_t v60 = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  double v14 = MEMORY[0x270FA5388](v57);
  uint64_t v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGAffineTransform v18 = *(void **)a2;
  uint64_t v17 = *(void *)(a2 + 8);
  int v62 = 0;
  float v63 = 1.0;
  uint64_t v19 = MEMORY[0x24C5269B0](a1, &v63, &v62, v14);
  if (v19)
  {
    uint64_t v20 = v19;
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 32) = xmmword_24619B520;
    *(void *)(v21 + 48) = 1065353216;
    *(void *)(v21 + 56) = 0x7FF8000000000000;
    id v22 = (id)RBDrawingStateGetDisplayList();
    int v68 = v18;
    uint64_t v69 = v17;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(void *)(v21 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v22, (uint64_t *)&v68);
    *(void *)(v21 + 24) = v20;
    *(unsigned char *)(v21 + 64) = 0;
    uint64_t v61 = v21;
    float v23 = v63;
    if (v63 == 1.0)
    {
      int v24 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v27 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v28 = swift_retain();
        uint64_t v29 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v28, v27, 1, 0);
        uint64_t v61 = v29;
        swift_release();
        uint64_t v21 = v29;
      }
      *(float *)(v21 + 48) = v23;
      int v24 = *(_DWORD *)(v21 + 52);
    }
    int v30 = v62;
    if (v24 != v62)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v31 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v32 = swift_retain();
        uint64_t v61 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v32, v31, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v61 + 52) = v30;
    }
    uint64_t v33 = v58;
    uint64_t v34 = (uint64_t)v58 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D413TextRunsLayer_content;
    swift_beginAccess();
    uint64_t v36 = *(void *)(v34 + 8);
    char v37 = *(unsigned char *)(v34 + 16);
    int v38 = *(_DWORD *)(v34 + 40);
    int v68 = *(void **)v34;
    double v35 = v68;
    uint64_t v69 = v36;
    char v70 = v37;
    long long v71 = *(_OWORD *)(v34 + 24);
    int v72 = v38;
    outlined init with copy of Text.Effect.RenderSegmentation.StaticRuns(v34, (uint64_t)v16);
    char v39 = v16[16];
    int v40 = *((_DWORD *)v16 + 10);
    long long v64 = *(_OWORD *)v16;
    char v65 = v39;
    long long v66 = *(_OWORD *)(v16 + 24);
    int v67 = v40;
    id v41 = (uint64_t *)&v16[*(int *)(v57 + 24)];
    outlined copy of Text.Layout.Line.Line(v35, v36, v37);
    Text.Layout.Line.characterRanges(runIndices:)(v41, (uint64_t)v13);
    outlined destroy of ImageResolutionContext((uint64_t)v16, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
    id v42 = v33;
    specialized TextRenderLayer.draw(line:glyphOrigin:ranges:in:_:)((uint64_t *)&v68, (uint64_t)v13, &v61, v59, (uint64_t)v42);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v60);
    outlined consume of Text.Layout.Line.Line(v68, v69, v70);
  }
  else
  {
    id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
    objc_msgSend(v25, sel_setProfile_, 1);
    objc_msgSend(v25, sel_setDefaultColorSpace_, 1);
    ClipBoundingBodouble x = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v25, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if (a4)
    {
      if (v17)
      {
        swift_retain_n();
        swift_retain_n();
        double v26 = specialized PropertyList.Tracker.value<A>(_:for:)((uint64_t)v18);
        swift_release_n();
      }
      else
      {
        uint64_t v43 = swift_retain_n();
        double v26 = specialized closure #1 in PropertyList.subscript.getter(v43);
      }
      swift_release_n();
    }
    else
    {
      double v26 = *(double *)&a3;
    }
    objc_msgSend(v25, sel_setDeviceScale_, v26);
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 32) = xmmword_24619B520;
    *(void *)(v44 + 48) = 1065353216;
    *(void *)(v44 + 56) = 0x7FF8000000000000;
    int v68 = v18;
    uint64_t v69 = v17;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    id v45 = v25;
    swift_retain();
    *(void *)(v44 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v45, (uint64_t *)&v68);
    *(void *)(v44 + 24) = RBDisplayListGetState();
    *(unsigned char *)(v44 + 64) = 0;
    uint64_t v61 = v44;
    uint64_t v46 = v58;
    uint64_t v47 = (uint64_t)v58 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D413TextRunsLayer_content;
    swift_beginAccess();
    uint64_t v49 = *(void *)(v47 + 8);
    char v50 = *(unsigned char *)(v47 + 16);
    int v51 = *(_DWORD *)(v47 + 40);
    int v68 = *(void **)v47;
    uint64_t v48 = v68;
    uint64_t v69 = v49;
    char v70 = v50;
    long long v71 = *(_OWORD *)(v47 + 24);
    int v72 = v51;
    outlined init with copy of Text.Effect.RenderSegmentation.StaticRuns(v47, (uint64_t)v16);
    char v52 = v16[16];
    int v53 = *((_DWORD *)v16 + 10);
    long long v64 = *(_OWORD *)v16;
    char v65 = v52;
    long long v66 = *(_OWORD *)(v16 + 24);
    int v67 = v53;
    CFDictionaryRef v54 = (uint64_t *)&v16[*(int *)(v57 + 24)];
    outlined copy of Text.Layout.Line.Line(v48, v49, v50);
    Text.Layout.Line.characterRanges(runIndices:)(v54, (uint64_t)v13);
    outlined destroy of ImageResolutionContext((uint64_t)v16, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
    id v55 = v46;
    specialized TextRenderLayer.draw(line:glyphOrigin:ranges:in:_:)((uint64_t *)&v68, (uint64_t)v13, &v61, v59, (uint64_t)v55);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v60);
    outlined consume of Text.Layout.Line.Line(v68, v69, v70);
    objc_msgSend(v45, sel_renderInContext_options_, a1, 0);
  }
  return swift_release();
}

void specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t *a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  int v38 = 0;
  float v39 = 1.0;
  uint64_t v11 = MEMORY[0x24C5269B0](a1, &v39, &v38);
  if (v11)
  {
    uint64_t v12 = v11;
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 32) = xmmword_24619B520;
    *(void *)(v13 + 48) = 1065353216;
    *(void *)(v13 + 56) = 0x7FF8000000000000;
    id v14 = (id)RBDrawingStateGetDisplayList();
    uint64_t v40 = v10;
    uint64_t v41 = v9;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(void *)(v13 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v14, &v40);
    *(void *)(v13 + 24) = v12;
    *(unsigned char *)(v13 + 64) = 0;
    uint64_t v40 = v13;
    float v15 = v39;
    if (v39 == 1.0)
    {
      int v16 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v19 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v20 = swift_retain();
        uint64_t v21 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v20, v19, 1, 0);
        uint64_t v40 = v21;
        swift_release();
        uint64_t v13 = v21;
      }
      *(float *)(v13 + 48) = v15;
      int v16 = *(_DWORD *)(v13 + 52);
    }
    int v22 = v38;
    if (v16 != v38)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v23 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v24 = swift_retain();
        uint64_t v40 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v24, v23, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v40 + 52) = v22;
    }
    id v25 = objc_msgSend(a5, sel_superlayer);
    if (v25)
    {
      double v26 = v25;
      type metadata accessor for TextRenderLayer(0);
      uint64_t v27 = swift_dynamicCastClass();
      if (v27)
      {
        uint64_t v28 = (char *)v27;
        id v29 = a5;
        specialized TextRenderLayer.drawContent(_:)(v28, (uint64_t)v29, &v40);
      }
      else
      {
      }
    }
    swift_release();
  }
  else
  {
    id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
    objc_msgSend(v17, sel_setProfile_, 1);
    objc_msgSend(v17, sel_setDefaultColorSpace_, 1);
    ClipBoundingBodouble x = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v17, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if (a4)
    {
      if (v9)
      {
        swift_retain_n();
        swift_retain_n();
        double v18 = specialized PropertyList.Tracker.value<A>(_:for:)(v10);
        swift_release_n();
      }
      else
      {
        uint64_t v30 = swift_retain_n();
        double v18 = specialized closure #1 in PropertyList.subscript.getter(v30);
      }
      swift_release_n();
    }
    else
    {
      double v18 = *(double *)&a3;
    }
    objc_msgSend(v17, sel_setDeviceScale_, v18);
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 32) = xmmword_24619B520;
    *(void *)(v31 + 48) = 1065353216;
    *(void *)(v31 + 56) = 0x7FF8000000000000;
    uint64_t v40 = v10;
    uint64_t v41 = v9;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    id v32 = v17;
    swift_retain();
    *(void *)(v31 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v32, &v40);
    *(void *)(v31 + 24) = RBDisplayListGetState();
    *(unsigned char *)(v31 + 64) = 0;
    uint64_t v40 = v31;
    id v33 = objc_msgSend(a5, sel_superlayer);
    if (v33)
    {
      uint64_t v34 = v33;
      type metadata accessor for TextRenderLayer(0);
      uint64_t v35 = swift_dynamicCastClass();
      if (v35)
      {
        uint64_t v36 = (char *)v35;
        id v37 = a5;
        specialized TextRenderLayer.drawContent(_:)(v36, (uint64_t)v37, &v40);
      }
      else
      {
      }
    }
    objc_msgSend(v32, sel_renderInContext_options_, a1, 0);
    swift_release();
  }
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  float v15;
  int v16;
  id v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CGRect ClipBoundingBox;

  id v37 = *MEMORY[0x263EF8340];
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  id v33 = 0;
  uint64_t v34 = 1.0;
  uint64_t v11 = MEMORY[0x24C5269B0](a1, &v34, &v33);
  if (v11)
  {
    uint64_t v12 = v11;
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 32) = xmmword_24619B520;
    *(void *)(v13 + 48) = 1065353216;
    *(void *)(v13 + 56) = 0x7FF8000000000000;
    id v14 = (id)RBDrawingStateGetDisplayList();
    uint64_t v35 = v10;
    uint64_t v36 = v9;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(void *)(v13 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v14, &v35);
    *(void *)(v13 + 24) = v12;
    *(unsigned char *)(v13 + 64) = 0;
    float v15 = v34;
    if (v34 == 1.0)
    {
      int v16 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v19 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v20 = swift_retain();
        uint64_t v21 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v20, v19, 1, 0);
        swift_release();
        uint64_t v13 = v21;
      }
      *(float *)(v13 + 48) = v15;
      int v16 = *(_DWORD *)(v13 + 52);
    }
    int v22 = v33;
    if (v16 != v33)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v23 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v24 = swift_retain();
        id v25 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v24, v23, 1, 0);
        swift_release();
        uint64_t v13 = v25;
      }
      *(_DWORD *)(v13 + 52) = v22;
    }
    objc_msgSend(a5, sel_bounds);
    GraphicsContext.renderMissingPlatformView(size:)((CGSize)__PAIR128__(v27, v26));
    swift_release();
  }
  else
  {
    id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
    objc_msgSend(v17, sel_setProfile_, 1);
    objc_msgSend(v17, sel_setDefaultColorSpace_, 1);
    ClipBoundingBodouble x = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v17, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if (a4)
    {
      if (v9)
      {
        swift_retain_n();
        swift_retain_n();
        double v18 = specialized PropertyList.Tracker.value<A>(_:for:)(v10);
        swift_release_n();
      }
      else
      {
        uint64_t v28 = swift_retain_n();
        double v18 = specialized closure #1 in PropertyList.subscript.getter(v28);
      }
      swift_release_n();
    }
    else
    {
      double v18 = *(double *)&a3;
    }
    objc_msgSend(v17, sel_setDeviceScale_, v18);
    type metadata accessor for GraphicsContext.Storage();
    id v29 = swift_allocObject();
    *(_OWORD *)(v29 + 32) = xmmword_24619B520;
    *(void *)(v29 + 48) = 1065353216;
    *(void *)(v29 + 56) = 0x7FF8000000000000;
    uint64_t v35 = v10;
    uint64_t v36 = v9;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    uint64_t v30 = v17;
    swift_retain();
    *(void *)(v29 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v30, &v35);
    *(void *)(v29 + 24) = RBDisplayListGetState();
    *(unsigned char *)(v29 + 64) = 0;
    objc_msgSend(a5, sel_bounds);
    GraphicsContext.renderMissingPlatformView(size:)((CGSize)__PAIR128__(v32, v31));
    objc_msgSend(v30, sel_renderInContext_options_, a1, 0);
    swift_release();
  }
}

uint64_t specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, CGFloat *a2, uint64_t a3, char a4, CGFloat *a5, double a6, double a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  CGFloat v12 = *a5;
  CGFloat v13 = a5[1];
  CGFloat v15 = a5[2];
  CGFloat v14 = a5[3];
  CGFloat v16 = a5[5];
  CGFloat v44 = a5[4];
  CGFloat v18 = *a2;
  CGFloat v17 = a2[1];
  int v46 = 0;
  float v47 = 1.0;
  uint64_t v19 = MEMORY[0x24C5269B0](a1, &v47, &v46);
  if (v19)
  {
    uint64_t v20 = v19;
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 32) = xmmword_24619B520;
    *(void *)(v21 + 48) = 1065353216;
    *(void *)(v21 + 56) = 0x7FF8000000000000;
    id v22 = (id)RBDrawingStateGetDisplayList();
    v48.double a = v18;
    v48.CGFloat b = v17;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(void *)(v21 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v22, (uint64_t *)&v48);
    *(void *)(v21 + 24) = v20;
    *(unsigned char *)(v21 + 64) = 0;
    uint64_t v45 = v21;
    float v23 = v47;
    if (v47 == 1.0)
    {
      int v24 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v27 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v28 = swift_retain();
        uint64_t v45 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v28, v27, 1, 0);
        swift_release();
        uint64_t v21 = v45;
      }
      *(float *)(v21 + 48) = v23;
      int v24 = *(_DWORD *)(v21 + 52);
    }
    int v29 = v46;
    if (v24 != v46)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v30 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v31 = swift_retain();
        uint64_t v45 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v31, v30, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v45 + 52) = v29;
    }
    if (a6 != 0.0 || a7 != 0.0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v32 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v33 = swift_retain();
        uint64_t v45 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v33, v32, 1, 0);
        swift_release();
      }
      RBDrawingStateTranslateCTM();
    }
    v48.double a = v12;
    v48.CGFloat b = v13;
    v48.CGFloat c = v15;
    v48.double d = v14;
    v48.tdouble x = v44;
    v48.tdouble y = v16;
    if (!CGAffineTransformIsIdentity(&v48))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v34 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v35 = swift_retain();
        uint64_t v45 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v35, v34, 1, 0);
        swift_release();
      }
      v48.double a = v12;
      v48.CGFloat b = v13;
      v48.CGFloat c = v15;
      v48.double d = v14;
      v48.tdouble x = v44;
      v48.tdouble y = v16;
      RBDrawingStateConcatCTM();
    }
    TextEffectsRenderer.drawStatic(in:)(&v45);
  }
  else
  {
    id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
    objc_msgSend(v25, sel_setProfile_, 1);
    objc_msgSend(v25, sel_setDefaultColorSpace_, 1);
    ClipBoundingBodouble x = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v25, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if (a4)
    {
      if (v17 == 0.0)
      {
        uint64_t v36 = swift_retain_n();
        double v26 = specialized closure #1 in PropertyList.subscript.getter(v36);
      }
      else
      {
        swift_retain_n();
        swift_retain_n();
        double v26 = specialized PropertyList.Tracker.value<A>(_:for:)(*(uint64_t *)&v18);
        swift_release_n();
      }
      swift_release_n();
    }
    else
    {
      double v26 = *(double *)&a3;
    }
    objc_msgSend(v25, sel_setDeviceScale_, v26);
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 32) = xmmword_24619B520;
    *(void *)(v37 + 48) = 1065353216;
    *(void *)(v37 + 56) = 0x7FF8000000000000;
    v48.double a = v18;
    v48.CGFloat b = v17;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    id v38 = v25;
    swift_retain();
    *(void *)(v37 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v38, (uint64_t *)&v48);
    *(void *)(v37 + 24) = RBDisplayListGetState();
    *(unsigned char *)(v37 + 64) = 0;
    uint64_t v45 = v37;
    if (a6 != 0.0 || a7 != 0.0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v39 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v40 = swift_retain();
        uint64_t v45 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v40, v39, 1, 0);
        swift_release();
      }
      RBDrawingStateTranslateCTM();
    }
    v48.double a = v12;
    v48.CGFloat b = v13;
    v48.CGFloat c = v15;
    v48.double d = v14;
    v48.tdouble x = v44;
    v48.tdouble y = v16;
    if (!CGAffineTransformIsIdentity(&v48))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v41 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v42 = swift_retain();
        uint64_t v45 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v42, v41, 1, 0);
        swift_release();
      }
      v48.double a = v12;
      v48.CGFloat b = v13;
      v48.CGFloat c = v15;
      v48.double d = v14;
      v48.tdouble x = v44;
      v48.tdouble y = v16;
      RBDrawingStateConcatCTM();
    }
    TextEffectsRenderer.drawStatic(in:)(&v45);
    objc_msgSend(v38, sel_renderInContext_options_, a1, 0);
  }
  return swift_release();
}

uint64_t specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  int v29 = 0;
  float v30 = 1.0;
  uint64_t v11 = MEMORY[0x24C5269B0](a1, &v30, &v29);
  if (v11)
  {
    uint64_t v12 = v11;
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 32) = xmmword_24619B520;
    *(void *)(v13 + 48) = 1065353216;
    *(void *)(v13 + 56) = 0x7FF8000000000000;
    id v14 = (id)RBDrawingStateGetDisplayList();
    uint64_t v31 = v10;
    uint64_t v32 = v9;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(void *)(v13 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v14, &v31);
    *(void *)(v13 + 24) = v12;
    *(unsigned char *)(v13 + 64) = 0;
    uint64_t v31 = v13;
    float v15 = v30;
    if (v30 == 1.0)
    {
      int v16 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v19 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v20 = swift_retain();
        uint64_t v21 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v20, v19, 1, 0);
        uint64_t v31 = v21;
        swift_release();
        uint64_t v13 = v21;
      }
      *(float *)(v13 + 48) = v15;
      int v16 = *(_DWORD *)(v13 + 52);
    }
    int v22 = v29;
    if (v16 != v29)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v23 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v24 = swift_retain();
        uint64_t v31 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v24, v23, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v31 + 52) = v22;
    }
    closure #1 in PaintShapeLayer.draw(in:)(&v31, a5);
  }
  else
  {
    id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
    objc_msgSend(v17, sel_setProfile_, 1);
    objc_msgSend(v17, sel_setDefaultColorSpace_, 1);
    ClipBoundingBodouble x = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v17, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if (a4)
    {
      if (v9)
      {
        swift_retain_n();
        swift_retain_n();
        double v18 = specialized PropertyList.Tracker.value<A>(_:for:)(v10);
        swift_release_n();
      }
      else
      {
        uint64_t v25 = swift_retain_n();
        double v18 = specialized closure #1 in PropertyList.subscript.getter(v25);
      }
      swift_release_n();
    }
    else
    {
      double v18 = *(double *)&a3;
    }
    objc_msgSend(v17, sel_setDeviceScale_, v18);
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 32) = xmmword_24619B520;
    *(void *)(v26 + 48) = 1065353216;
    *(void *)(v26 + 56) = 0x7FF8000000000000;
    uint64_t v31 = v10;
    uint64_t v32 = v9;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    id v27 = v17;
    swift_retain();
    *(void *)(v26 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v27, &v31);
    *(void *)(v26 + 24) = RBDisplayListGetState();
    *(unsigned char *)(v26 + 64) = 0;
    uint64_t v31 = v26;
    closure #1 in PaintShapeLayer.draw(in:)(&v31, a5);
    objc_msgSend(v27, sel_renderInContext_options_, a1, 0);
  }
  return swift_release();
}

void specialized GraphicsContext.withPlatformContext(content:)(uint64_t a1, void *a2, double a3, double a4, double a5, double a6)
{
  uint64_t v12 = (CGContext *)(id)RBDrawingStateBeginCGContext();
  uint64_t v13 = v12;
  CGBlendMode v14 = *(_DWORD *)(a1 + 52);
  if (v14) {
    CGContextSetBlendMode(v12, v14);
  }
  uint64_t v15 = *(void *)(a1 + 56);
  BOOL v16 = (v15 & 0xFFFFFFFFFFFFFLL) == 0 || (~v15 & 0x7FF0000000000000) != 0;
  if (v16) {
    _CGContextSetShapeDistance(*(double *)(a1 + 56));
  }
  id v17 = objc_msgSend(objc_allocWithZone((Class)CoreGraphicsContext), sel_initWithCGContext_, v13);
  objc_msgSend(v17, sel_push);
  if (one-time initialization token for _textDrawingContext != -1) {
    swift_once();
  }
  uint64_t v18 = static GraphicsContext.Storage.Shared._textDrawingContext;
  if (a2[27])
  {
    swift_retain();
    BOOL v19 = NSAttributedString.isDynamic.getter();
  }
  else
  {
    swift_retain();
    BOOL v19 = 0;
  }
  (*(void (**)(void, BOOL, uint64_t, void, double, double, double, double, double, double))(*a2 + 288))(0, v19, v18, 0, a3, a4, a5, a6, a5, a6);
  swift_release();
  [v17 pop];

  if (v16) {
    _CGContextSetShapeDistance(NAN);
  }
  RBDrawingStateEndCGContext();
}

unint64_t lazy protocol witness table accessor for type GraphicsContext._ShapeRenderingMode and conformance GraphicsContext._ShapeRenderingMode()
{
  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext._ShapeRenderingMode and conformance GraphicsContext._ShapeRenderingMode;
  if (!lazy protocol witness table cache variable for type GraphicsContext._ShapeRenderingMode and conformance GraphicsContext._ShapeRenderingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext._ShapeRenderingMode and conformance GraphicsContext._ShapeRenderingMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicsContext.LayerOptions and conformance GraphicsContext.LayerOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.LayerOptions and conformance GraphicsContext.LayerOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.LayerOptions and conformance GraphicsContext.LayerOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.LayerOptions and conformance GraphicsContext.LayerOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.LayerOptions and conformance GraphicsContext.LayerOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.LayerOptions and conformance GraphicsContext.LayerOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.LayerOptions and conformance GraphicsContext.LayerOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.LayerOptions and conformance GraphicsContext.LayerOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.LayerOptions and conformance GraphicsContext.LayerOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.LayerOptions and conformance GraphicsContext.LayerOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GraphicsContext.LayerOptions and conformance GraphicsContext.LayerOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.LayerOptions and conformance GraphicsContext.LayerOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.LayerOptions and conformance GraphicsContext.LayerOptions);
  }
  return result;
}

double sub_245D65448@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(float *)(*(void *)a1 + 48);
  *a2 = result;
  return result;
}

uint64_t sub_245D6545C(double *a1)
{
  return GraphicsContext.opacity.setter(*a1);
}

uint64_t sub_245D65484@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(*(void *)result + 52);
  return result;
}

uint64_t sub_245D65494(int *a1)
{
  return GraphicsContext.blendMode.setter(*a1);
}

double sub_245D654BC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  GraphicsContext._shapeRenderingMode.getter(*a1, (uint64_t)&v4);
  double result = v5;
  *(_DWORD *)a2 = v4;
  *(double *)(a2 + 8) = result;
  return result;
}

uint64_t sub_245D65500(int *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  int v3 = *a1;
  uint64_t v4 = v1;
  return GraphicsContext._shapeRenderingMode.setter((uint64_t)&v3);
}

uint64_t sub_245D65540@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = RBDrawingStateGetIdentifier();
  *a1 = result;
  return result;
}

uint64_t sub_245D65570()
{
  return GraphicsContext.identifier.setter();
}

double sub_245D655A0@<D0>(_OWORD *a1@<X8>)
{
  RBDrawingStateGetCTM();
  double result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t sub_245D655E8()
{
  return GraphicsContext.transform.setter();
}

uint64_t outlined copy of PathDrawingStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for PathDrawingStyle(uint64_t a1)
{
  return outlined consume of PathDrawingStyle(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
}

uint64_t outlined consume of PathDrawingStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for PathDrawingStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  outlined copy of PathDrawingStyle(*(void *)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for PathDrawingStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  outlined copy of PathDrawingStyle(*(void *)a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  char v14 = *(unsigned char *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  outlined consume of PathDrawingStyle(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for PathDrawingStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 40);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 40) = v4;
  outlined consume of PathDrawingStyle(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTag for PathDrawingStyle(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t destructiveInjectEnumTag for PathDrawingStyle(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PathDrawingStyle()
{
  return &type metadata for PathDrawingStyle;
}

uint64_t method lookup function for GraphicsContext.Storage(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for GraphicsContext.Storage);
}

ValueMetadata *type metadata accessor for GraphicsContext.BlendMode()
{
  return &type metadata for GraphicsContext.BlendMode;
}

ValueMetadata *type metadata accessor for GraphicsContext._ShapeRenderingMode()
{
  return &type metadata for GraphicsContext._ShapeRenderingMode;
}

ValueMetadata *type metadata accessor for GraphicsContext.ClipOptions()
{
  return &type metadata for GraphicsContext.ClipOptions;
}

ValueMetadata *type metadata accessor for GraphicsContext.ShadowOptions()
{
  return &type metadata for GraphicsContext.ShadowOptions;
}

ValueMetadata *type metadata accessor for GraphicsContext.BlurOptions()
{
  return &type metadata for GraphicsContext.BlurOptions;
}

ValueMetadata *type metadata accessor for GraphicsContext.FilterOptions()
{
  return &type metadata for GraphicsContext.FilterOptions;
}

uint64_t initializeWithCopy for GraphicsContext.Shading(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  outlined copy of GraphicsContext.Shading.Storage(*(void **)a2, v4, v5, v6, v7, v8, v9, v10, v11, *(unsigned char *)(a2 + 72));
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(unsigned char *)(a1 + 72) = v13;
  return a1;
}

uint64_t assignWithCopy for GraphicsContext.Shading(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  outlined copy of GraphicsContext.Shading.Storage(*(void **)a2, v4, v5, v6, v7, v8, v9, v10, v11, *(unsigned char *)(a2 + 72));
  uint64_t v12 = *(void **)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  char v21 = *(unsigned char *)(a1 + 72);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(unsigned char *)(a1 + 72) = v23;
  outlined consume of GraphicsContext.Shading.Storage(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  return a1;
}

uint64_t assignWithTake for GraphicsContext.Shading(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 64);
  char v4 = *(unsigned char *)(a2 + 72);
  uint64_t v5 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  char v14 = *(unsigned char *)(a1 + 72);
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(void *)(a1 + 64) = v3;
  *(unsigned char *)(a1 + 72) = v4;
  outlined consume of GraphicsContext.Shading.Storage(v5, v7, v6, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphicsContext.Shading(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF6 && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 246);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 <= 0xA) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphicsContext.Shading(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)uint64_t result = a2 - 246;
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 72) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for GraphicsContext.Shading.Storage(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 72) <= 9u) {
    return *(unsigned __int8 *)(a1 + 72);
  }
  else {
    return (*(_DWORD *)a1 + 10);
  }
}

uint64_t destructiveInjectEnumTag for GraphicsContext.Shading.Storage(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xA)
  {
    *(void *)uint64_t result = a2 - 10;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    LOBYTE(a2) = 10;
  }
  *(unsigned char *)(result + 72) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GraphicsContext.Shading.Storage()
{
  return &type metadata for GraphicsContext.Shading.Storage;
}

uint64_t getEnumTag for GraphicsContext.GradientGeometry(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t destructiveInjectEnumTag for GraphicsContext.GradientGeometry(uint64_t result, char a2)
{
  *(unsigned char *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GraphicsContext.GradientGeometry()
{
  return &type metadata for GraphicsContext.GradientGeometry;
}

void destroy for GraphicsContext.ResolvedShading(uint64_t a1)
{
}

void *initializeWithCopy for GraphicsContext.ResolvedShading(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  int v4 = *(void **)(a2 + 16);
  uint64_t v5 = *(void **)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  unint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 136);
  uint64_t v22 = *(void *)(a2 + 144);
  uint64_t v23 = *(void *)(a2 + 152);
  uint64_t v10 = *(void *)(a2 + 64);
  id v11 = *(id *)a2;
  outlined copy of GraphicsContext.ResolvedShading(*(id *)a2, v3, v4, v5, v6, v7, v8, v9, v10, v13, v14, v15, v16);
  *a1 = v11;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  return a1;
}

uint64_t assignWithCopy for GraphicsContext.ResolvedShading(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v24 = *(void *)(a2 + 72);
  uint64_t v25 = *(void *)(a2 + 80);
  uint64_t v26 = *(void *)(a2 + 88);
  unint64_t v27 = *(void *)(a2 + 96);
  uint64_t v28 = *(void *)(a2 + 104);
  uint64_t v29 = *(void *)(a2 + 112);
  uint64_t v30 = *(void *)(a2 + 120);
  uint64_t v31 = *(void *)(a2 + 128);
  uint64_t v32 = *(void *)(a2 + 136);
  uint64_t v33 = *(void *)(a2 + 144);
  uint64_t v34 = *(void *)(a2 + 152);
  outlined copy of GraphicsContext.ResolvedShading(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26, v27);
  uint64_t v12 = *(void **)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v24;
  *(void *)(a1 + 80) = v25;
  *(void *)(a1 + 88) = v26;
  *(void *)(a1 + 96) = v27;
  *(void *)(a1 + 104) = v28;
  *(void *)(a1 + 112) = v29;
  *(void *)(a1 + 120) = v30;
  *(void *)(a1 + 128) = v31;
  *(void *)(a1 + 136) = v32;
  *(void *)(a1 + 144) = v33;
  *(void *)(a1 + 152) = v34;
  outlined consume of GraphicsContext.ResolvedShading(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22);
  return a1;
}

uint64_t assignWithTake for GraphicsContext.ResolvedShading(uint64_t a1, _OWORD *a2)
{
  id v3 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 64);
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v13 = *(_OWORD *)(a1 + 96);
  long long v14 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v14;
  long long v15 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v15;
  long long v16 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v16;
  long long v17 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v17;
  long long v18 = a2[9];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_OWORD *)(a1 + 144) = v18;
  outlined consume of GraphicsContext.ResolvedShading(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphicsContext.ResolvedShading(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 160)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(void *)(a1 + 96) >> 11) & 0x1F80 | ((unsigned __int16)*(void *)(a1 + 96) >> 9) | (*(void *)(a1 + 96) >> 19) & 0xFFFFE000;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for GraphicsContext.ResolvedShading(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 152) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 160) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 96) = (-2048 * a2) & 0xFC0000 | ((-a2 & 0x7FLL) << 9) & 0xFFF80000FFFFFFFFLL | ((unint64_t)(-a2 >> 13) << 32);
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(void *)(a1 + 152) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for GraphicsContext.ResolvedShading(uint64_t result, uint64_t a2)
{
  *(void *)(result + 96) = *(void *)(result + 96) & 0xFF0301FFLL | (a2 << 60);
  return result;
}

ValueMetadata *type metadata accessor for GraphicsContext.ResolvedShading()
{
  return &type metadata for GraphicsContext.ResolvedShading;
}

ValueMetadata *type metadata accessor for GraphicsContext.GradientOptions()
{
  return &type metadata for GraphicsContext.GradientOptions;
}

void destroy for GraphicsContext.ResolvedImage(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 != 255) {
    outlined consume of GraphicsImage.Contents(*(void **)a1, v2);
  }
  if (*(unsigned __int8 *)(a1 + 184) != 255) {
    outlined consume of GraphicsContext.Shading.Storage(*(void **)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168), *(void *)(a1 + 176), *(unsigned char *)(a1 + 184));
  }
}

uint64_t initializeWithCopy for GraphicsContext.ResolvedImage(uint64_t a1, uint64_t *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 8);
  if (v4 == 255)
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  }
  else
  {
    uint64_t v5 = *a2;
    outlined copy of GraphicsImage.Contents((id)*a2, *((unsigned char *)a2 + 8));
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 16) = a2[2];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)((char *)a2 + 44);
  *(unsigned char *)(a1 + 60) = *((unsigned char *)a2 + 60);
  long long v6 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 80) = v6;
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(unsigned char *)(a1 + 98) = *((unsigned char *)a2 + 98);
  *(unsigned char *)(a1 + 99) = *((unsigned char *)a2 + 99);
  *(void *)(a1 + 104) = a2[13];
  int v7 = *((unsigned __int8 *)a2 + 184);
  if (v7 == 255)
  {
    long long v17 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 160) = v17;
    *(_OWORD *)(a1 + 169) = *(_OWORD *)((char *)a2 + 169);
    long long v18 = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 128) = v18;
  }
  else
  {
    uint64_t v8 = (void *)a2[14];
    uint64_t v9 = a2[15];
    long long v20 = v8;
    uint64_t v10 = a2[16];
    uint64_t v11 = a2[17];
    uint64_t v12 = a2[18];
    uint64_t v13 = a2[19];
    uint64_t v14 = a2[20];
    uint64_t v15 = a2[21];
    uint64_t v16 = a2[22];
    outlined copy of GraphicsContext.Shading.Storage(v8, v9, v10, v11, v12, v13, v14, v15, v16, v7);
    *(void *)(a1 + 112) = v20;
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    *(void *)(a1 + 136) = v11;
    *(void *)(a1 + 144) = v12;
    *(void *)(a1 + 152) = v13;
    *(void *)(a1 + 160) = v14;
    *(void *)(a1 + 168) = v15;
    *(void *)(a1 + 176) = v16;
    *(unsigned char *)(a1 + 184) = v7;
  }
  return a1;
}

uint64_t assignWithCopy for GraphicsContext.ResolvedImage(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned __int8 *)(a1 + 8) == 255)
  {
    if (v4 == 255)
    {
      id v10 = *(id *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)a1 = v10;
    }
    else
    {
      id v8 = *(id *)a2;
      outlined copy of GraphicsImage.Contents(*(id *)a2, *(unsigned char *)(a2 + 8));
      *(void *)a1 = v8;
      *(unsigned char *)(a1 + 8) = v4;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of GraphicsImage.Contents(a1);
    char v9 = *(unsigned char *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = v9;
  }
  else
  {
    id v5 = *(id *)a2;
    outlined copy of GraphicsImage.Contents(*(id *)a2, *(unsigned char *)(a2 + 8));
    long long v6 = *(void **)a1;
    *(void *)a1 = v5;
    char v7 = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    outlined consume of GraphicsImage.Contents(v6, v7);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  long long v11 = *(_OWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_OWORD *)(a1 + 44) = v11;
  long long v12 = *(_OWORD *)(a2 + 64);
  long long v13 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v13;
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v14 = (_OWORD *)(a1 + 112);
  uint64_t v15 = (_OWORD *)(a2 + 112);
  int v16 = *(unsigned __int8 *)(a2 + 184);
  if (*(unsigned __int8 *)(a1 + 184) == 255)
  {
    if (v16 == 255)
    {
      *uint64_t v14 = *v15;
      long long v48 = *(_OWORD *)(a2 + 128);
      long long v49 = *(_OWORD *)(a2 + 144);
      long long v50 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
      *(_OWORD *)(a1 + 144) = v49;
      *(_OWORD *)(a1 + 160) = v50;
      *(_OWORD *)(a1 + 128) = v48;
    }
    else
    {
      uint64_t v37 = *(void **)(a2 + 112);
      uint64_t v36 = *(void *)(a2 + 120);
      uint64_t v53 = v36;
      uint64_t v38 = *(void *)(a2 + 128);
      uint64_t v39 = *(void *)(a2 + 136);
      uint64_t v40 = *(void *)(a2 + 144);
      uint64_t v41 = *(void *)(a2 + 152);
      uint64_t v42 = *(void *)(a2 + 160);
      uint64_t v43 = *(void *)(a2 + 168);
      uint64_t v44 = *(void *)(a2 + 176);
      outlined copy of GraphicsContext.Shading.Storage(v37, v36, v38, v39, v40, v41, v42, v43, v44, v16);
      *(void *)(a1 + 112) = v37;
      *(void *)(a1 + 120) = v53;
      *(void *)(a1 + 128) = v38;
      *(void *)(a1 + 136) = v39;
      *(void *)(a1 + 144) = v40;
      *(void *)(a1 + 152) = v41;
      *(void *)(a1 + 160) = v42;
      *(void *)(a1 + 168) = v43;
      *(void *)(a1 + 176) = v44;
      *(unsigned char *)(a1 + 184) = v16;
    }
  }
  else if (v16 == 255)
  {
    outlined destroy of GraphicsContext.Shading(a1 + 112);
    *uint64_t v14 = *v15;
    long long v46 = *(_OWORD *)(a2 + 144);
    long long v45 = *(_OWORD *)(a2 + 160);
    long long v47 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
    *(_OWORD *)(a1 + 144) = v46;
    *(_OWORD *)(a1 + 160) = v45;
    *(_OWORD *)(a1 + 128) = v47;
  }
  else
  {
    long long v18 = *(void **)(a2 + 112);
    uint64_t v17 = *(void *)(a2 + 120);
    uint64_t v52 = v17;
    uint64_t v19 = *(void *)(a2 + 128);
    uint64_t v20 = *(void *)(a2 + 136);
    uint64_t v21 = *(void *)(a2 + 144);
    uint64_t v22 = *(void *)(a2 + 152);
    uint64_t v23 = *(void *)(a2 + 160);
    uint64_t v24 = *(void *)(a2 + 168);
    uint64_t v25 = *(void *)(a2 + 176);
    outlined copy of GraphicsContext.Shading.Storage(v18, v17, v19, v20, v21, v22, v23, v24, v25, v16);
    uint64_t v26 = *(void **)(a1 + 112);
    uint64_t v27 = *(void *)(a1 + 120);
    uint64_t v28 = *(void *)(a1 + 128);
    uint64_t v29 = *(void *)(a1 + 136);
    uint64_t v30 = *(void *)(a1 + 144);
    uint64_t v31 = *(void *)(a1 + 152);
    uint64_t v32 = *(void *)(a1 + 160);
    uint64_t v33 = *(void *)(a1 + 168);
    uint64_t v34 = *(void *)(a1 + 176);
    char v35 = *(unsigned char *)(a1 + 184);
    *(void *)(a1 + 112) = v18;
    *(void *)(a1 + 120) = v52;
    *(void *)(a1 + 128) = v19;
    *(void *)(a1 + 136) = v20;
    *(void *)(a1 + 144) = v21;
    *(void *)(a1 + 152) = v22;
    *(void *)(a1 + 160) = v23;
    *(void *)(a1 + 168) = v24;
    *(void *)(a1 + 176) = v25;
    *(unsigned char *)(a1 + 184) = v16;
    outlined consume of GraphicsContext.Shading.Storage(v26, v27, v28, v29, v30, v31, v32, v33, v34, v35);
  }
  return a1;
}

uint64_t outlined destroy of GraphicsContext.Shading(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy185_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(_OWORD *)(a1 + 169) = *(long long *)((char *)a2 + 169);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for GraphicsContext.ResolvedImage(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 != 255)
  {
    int v5 = *(unsigned __int8 *)(a2 + 8);
    if (v5 != 255)
    {
      long long v6 = *(void **)a1;
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = v5;
      outlined consume of GraphicsImage.Contents(v6, v4);
      goto LABEL_6;
    }
    outlined destroy of GraphicsImage.Contents(a1);
  }
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
LABEL_6:
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(_WORD *)(a1 + 98) = *(_WORD *)(a2 + 98);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  int v8 = *(unsigned __int8 *)(a1 + 184);
  if (v8 == 255)
  {
LABEL_10:
    long long v22 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v22;
    *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
    long long v23 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v23;
    return a1;
  }
  int v9 = *(unsigned __int8 *)(a2 + 184);
  if (v9 == 255)
  {
    outlined destroy of GraphicsContext.Shading(a1 + 112);
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(a2 + 176);
  long long v11 = *(void **)(a1 + 112);
  uint64_t v12 = *(void *)(a1 + 120);
  uint64_t v13 = *(void *)(a1 + 128);
  uint64_t v14 = *(void *)(a1 + 136);
  uint64_t v15 = *(void *)(a1 + 144);
  uint64_t v16 = *(void *)(a1 + 152);
  uint64_t v17 = *(void *)(a1 + 160);
  uint64_t v18 = *(void *)(a1 + 168);
  uint64_t v19 = *(void *)(a1 + 176);
  long long v20 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v20;
  long long v21 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v21;
  *(void *)(a1 + 176) = v10;
  *(unsigned char *)(a1 + 184) = v9;
  outlined consume of GraphicsContext.Shading.Storage(v11, v12, v13, v14, v15, v16, v17, v18, v19, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphicsContext.ResolvedImage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 185)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 97);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphicsContext.ResolvedImage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 184) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 185) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 185) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 97) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphicsContext.ResolvedImage()
{
  return &type metadata for GraphicsContext.ResolvedImage;
}

void *destroy for GraphicsContext.ResolvedText(uint64_t a1)
{
  return outlined consume of GraphicsContext.Shading.Storage(*(void **)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
}

uint64_t initializeWithCopy for GraphicsContext.ResolvedText(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  uint64_t v15 = *(void **)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 80);
  char v11 = *(unsigned char *)(a2 + 88);
  swift_retain();
  swift_retain();
  outlined copy of GraphicsContext.Shading.Storage(v15, v4, v5, v6, v7, v8, v9, v14, v10, v11);
  *(void *)(a1 + 16) = v15;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 80) = v10;
  *(unsigned char *)(a1 + 88) = v13;
  return a1;
}

uint64_t assignWithCopy for GraphicsContext.ResolvedText(uint64_t a1, void *a2)
{
  long long v2 = a2;
  *(void *)a1 = *a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = v2[1];
  swift_retain();
  swift_release();
  uint64_t v4 = (void *)v2[2];
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  uint64_t v7 = v2[5];
  uint64_t v8 = v2[6];
  uint64_t v9 = v2[7];
  uint64_t v10 = v2[8];
  uint64_t v11 = v2[9];
  uint64_t v23 = v2[10];
  LOBYTE(v2) = *((unsigned char *)v2 + 88);
  outlined copy of GraphicsContext.Shading.Storage(v4, v5, v6, v7, v8, v9, v10, v11, v23, (char)v2);
  uint64_t v12 = *(void **)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v19 = *(void *)(a1 + 72);
  uint64_t v20 = *(void *)(a1 + 80);
  char v21 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v23;
  *(unsigned char *)(a1 + 88) = (_BYTE)v2;
  outlined consume of GraphicsContext.Shading.Storage(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  return a1;
}

uint64_t assignWithTake for GraphicsContext.ResolvedText(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 80);
  char v5 = *(unsigned char *)(a2 + 88);
  uint64_t v6 = *(void **)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 80);
  char v15 = *(unsigned char *)(a1 + 88);
  long long v16 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v16;
  long long v17 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v17;
  *(void *)(a1 + 80) = v4;
  *(unsigned char *)(a1 + 88) = v5;
  outlined consume of GraphicsContext.Shading.Storage(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphicsContext.ResolvedText(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 89)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphicsContext.ResolvedText(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 89) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for GraphicsContext.ResolvedSymbol(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for GraphicsContext.ResolvedSymbol(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for GraphicsContext.ResolvedSymbol(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for GraphicsContext.LayerOptions()
{
  return &type metadata for GraphicsContext.LayerOptions;
}

uint64_t type metadata accessor for GraphicsContextSymbols()
{
  return self;
}

uint64_t method lookup function for GraphicsContextSymbols(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for GraphicsContextSymbols);
}

uint64_t dispatch thunk of GraphicsContextSymbols.symbol<A>(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

void *destroy for GraphicsContext.Filter(uint64_t a1)
{
  return outlined consume of GraphicsContext.Filter.Storage(*(void **)a1, *(id *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80));
}

void *initializeWithCopy for GraphicsContext.Filter(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  outlined copy of GraphicsContext.Filter.Storage(*(void **)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  return a1;
}

uint64_t assignWithCopy for GraphicsContext.Filter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v23 = *(void *)(a2 + 72);
  uint64_t v24 = *(void *)(a2 + 80);
  outlined copy of GraphicsContext.Filter.Storage(*(void **)a2, v4, v5, v6, v7, v8, v9, v10, v11, v23, v24);
  uint64_t v12 = *(void **)a1;
  uint64_t v13 = *(void **)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 80);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v23;
  *(void *)(a1 + 80) = v24;
  outlined consume of GraphicsContext.Filter.Storage(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21);
  return a1;
}

uint64_t assignWithTake for GraphicsContext.Filter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 80);
  long long v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  long long v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = v3;
  outlined consume of GraphicsContext.Filter.Storage(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphicsContext.Filter(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0xFFFFFE7 && *(unsigned char *)(a1 + 88)) {
    return (*(_DWORD *)a1 + 268435432);
  }
  if ((((*(_DWORD *)(a1 + 80) >> 27) & 0xF000001F | (32 * ((*(_DWORD *)(a1 + 80) >> 4) & 0x7FFFFF))) ^ 0xFFFFFFF) >= 0xFFFFFE7) {
    unsigned int v3 = -1;
  }
  else {
    unsigned int v3 = ((*(_DWORD *)(a1 + 80) >> 27) & 0xF000001F | (32 * ((*(_DWORD *)(a1 + 80) >> 4) & 0x7FFFFF))) ^ 0xFFFFFFF;
  }
  return v3 + 1;
}

uint64_t getEnumTag for GraphicsContext.Filter.Storage(_DWORD *a1)
{
  unsigned int v1 = a1[20];
  if (v1 >> 30 == 3) {
    return (*a1 + 24);
  }
  else {
    return v1 >> 27;
  }
}

uint64_t destructiveProjectEnumData for GraphicsContext.Filter.Storage(uint64_t result)
{
  *(void *)(result + 80) &= 0xFFFFFFFF07FFFFFFLL;
  return result;
}

uint64_t destructiveInjectEnumTag for GraphicsContext.Filter.Storage(uint64_t result, unsigned int a2)
{
  if (a2 < 0x18)
  {
    *(void *)(result + 80) = *(void *)(result + 80) & 0xFFFFFFFF0000000FLL | (a2 << 27);
  }
  else
  {
    *(void *)__n128 result = a2 - 24;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)(result + 72) = 0;
    *(void *)(result + 80) = 3221225472;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphicsContext.Filter.Storage()
{
  return &type metadata for GraphicsContext.Filter.Storage;
}

void type metadata accessor for RangeSet<Text.Layout.CharacterIndex>()
{
  if (!lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>)
  {
    lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
    unint64_t v0 = type metadata accessor for RangeSet();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>);
    }
  }
}

uint64_t outlined init with copy of Text.Effect.RenderSegmentation.StaticRuns(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for NSStringDrawingContext()
{
  unint64_t result = lazy cache variable for type metadata for NSStringDrawingContext;
  if (!lazy cache variable for type metadata for NSStringDrawingContext)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSStringDrawingContext);
  }
  return result;
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi7_(uint64_t result)
{
  *(void *)(result + 96) = *(void *)(result + 96) & 0xFF0301FFLL | 0x8000000000000000;
  return result;
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi5_(uint64_t result)
{
  *(void *)(result + 96) = *(void *)(result + 96) & 0xFF0301FFLL | 0x6000000000000000;
  return result;
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi1_(uint64_t result)
{
  *(void *)(result + 96) = *(void *)(result + 96) & 0xFF0301FFLL | 0x2000000000000000;
  return result;
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi_(uint64_t result)
{
  *(void *)(result + 96) &= 0xFF0301FFuLL;
  return result;
}

id partial apply for closure #2 in RBFill.setRepeatedImage(_:origin:scale:sourceRect:in:)()
{
  return closure #2 in RBFill.setImage(_:destRect:in:)(*(id *)(v0 + 16), *(_DWORD *)(v0 + 24));
}

void **outlined retain of Text.Layout.Run(void **a1)
{
  uint64_t v2 = *a1;
  swift_retain();
  id v3 = v2;
  return a1;
}

id *outlined release of Text.Layout.Run(id *a1)
{
  swift_release();
  return a1;
}

unint64_t partial apply for closure #1 in withGradient(_:in:do:)(unint64_t a1, _DWORD *a2, uint64_t a3)
{
  return closure #1 in withGradient(_:in:do:)(a1, a2, a3, *(void *)(v3 + 16), *(unsigned __int8 *)(v3 + 24), *(_DWORD *)(v3 + 28), *(unsigned char *)(v3 + 32));
}

uint64_t partial apply for closure #2 in withGradient(_:in:do:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(v2 + 24))
  {
    if (*(unsigned char *)(v2 + 24) == 1)
    {
      if (*(unsigned char *)(v2 + 25)) {
        uint64_t v3 = 576;
      }
      else {
        uint64_t v3 = 64;
      }
    }
    else if (*(unsigned char *)(v2 + 25))
    {
      uint64_t v3 = 704;
    }
    else
    {
      uint64_t v3 = 192;
    }
  }
  else if (*(unsigned char *)(v2 + 25))
  {
    uint64_t v3 = 640;
  }
  else
  {
    uint64_t v3 = 128;
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(v2 + 32))(*(void *)(v2 + 48), a1, a2, v3);
}

uint64_t outlined consume of ResolvedMulticolorStyle?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1) {
    return MEMORY[0x270F9A828]();
  }
  return result;
}

id outlined copy of ResolvedMulticolorStyle?(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4 != (void *)1) {
    return a4;
  }
  return result;
}

id partial apply for closure #1 in RBFill.setRepeatedImage(_:origin:scale:sourceRect:in:)(unsigned int a1, uint64_t a2)
{
  return closure #1 in RBFill.setRepeatedImage(_:origin:scale:sourceRect:in:)(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 80), *(_DWORD *)(v2 + 88), *(double *)(v2 + 24), *(double *)(v2 + 32), *(double *)(v2 + 40), *(double *)(v2 + 48), *(double *)(v2 + 56), *(double *)(v2 + 64), *(double *)(v2 + 72));
}

ValueMetadata *type metadata accessor for GraphicsContext.Filter.ResolvedShadow()
{
  return &type metadata for GraphicsContext.Filter.ResolvedShadow;
}

uint64_t initializeWithCopy for GraphicsContext.Filter.Shadow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GraphicsContext.Filter.Shadow(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  return a1;
}

uint64_t assignWithTake for GraphicsContext.Filter.Shadow(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  return a1;
}

ValueMetadata *type metadata accessor for GraphicsContext.Filter.Shadow()
{
  return &type metadata for GraphicsContext.Filter.Shadow;
}

__C::CGRect __swiftcall CGSize.centeredIn(_:)(CGSize a1)
{
  double v3 = (a1.width - v1) * 0.5 + 0.0;
  double v4 = (a1.height - v2) * 0.5 + 0.0;
  result.size.double height = v2;
  result.size.double width = v1;
  result.origin.double y = v4;
  result.origin.double x = v3;
  return result;
}

void ContentMode.hash(into:)(uint64_t a1, char a2)
{
}

void *static ContentMode.allCases.getter()
{
  return &outlined read-only object #0 of static ContentMode.allCases.getter;
}

Swift::Int ContentMode.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContentMode(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ContentMode;
}

uint64_t _AspectRatioLayout.aspectRatio.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*_AspectRatioLayout.aspectRatio.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _AspectRatioLayout.contentMode.getter(uint64_t a1, unsigned int a2)
{
  return (a2 >> 8) & 1;
}

uint64_t _AspectRatioLayout.contentMode.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 9) = result & 1;
  return result;
}

uint64_t (*_AspectRatioLayout.contentMode.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double CGSize.scaledToFill(_:)(uint64_t a1, double result, double a3)
{
  double v3 = *(double *)a1;
  int v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 == 1 && (*(unsigned char *)(a1 + 24) & 1) != 0) {
    return result;
  }
  if ((v4 & 1) != 0 || result == 0.0 && v3 == 0.0)
  {
    double v5 = -INFINITY;
    if (*(unsigned char *)(a1 + 24)) {
      goto LABEL_11;
    }
  }
  else
  {
    double v5 = v3 / result;
    if (*(unsigned char *)(a1 + 24)) {
      goto LABEL_11;
    }
  }
  double v6 = *(double *)(a1 + 16);
  if (a3 != 0.0 || v6 != 0.0)
  {
    double v7 = v6 / a3;
    goto LABEL_13;
  }
LABEL_11:
  double v7 = -INFINITY;
LABEL_13:
  if (v5 <= v7) {
    double v5 = v7;
  }
  if (result == 0.0) {
    return 0.0;
  }
  else {
    return v5 * result;
  }
}

double CGSize.scaleThatFits(_:)(uint64_t a1, double a2, double a3)
{
  if ((*(unsigned char *)(a1 + 8) & 1) != 0 || (double v3 = *(double *)a1, a2 == 0.0) && v3 == 0.0)
  {
    double result = INFINITY;
    if (*(unsigned char *)(a1 + 24)) {
      goto LABEL_9;
    }
  }
  else
  {
    double result = v3 / a2;
    if (*(unsigned char *)(a1 + 24))
    {
LABEL_9:
      double v6 = INFINITY;
      goto LABEL_11;
    }
  }
  double v5 = *(double *)(a1 + 16);
  if (a3 == 0.0 && v5 == 0.0) {
    goto LABEL_9;
  }
  double v6 = v5 / a3;
LABEL_11:
  if (v6 < result) {
    return v6;
  }
  return result;
}

double CGSize.scaleThatFills(_:)(uint64_t a1, double a2, double a3)
{
  if ((*(unsigned char *)(a1 + 8) & 1) != 0 || (double v3 = *(double *)a1, a2 == 0.0) && v3 == 0.0)
  {
    double result = -INFINITY;
    if (*(unsigned char *)(a1 + 24)) {
      goto LABEL_9;
    }
  }
  else
  {
    double result = v3 / a2;
    if (*(unsigned char *)(a1 + 24))
    {
LABEL_9:
      double v6 = -INFINITY;
      goto LABEL_11;
    }
  }
  double v5 = *(double *)(a1 + 16);
  if (a3 == 0.0 && v5 == 0.0) {
    goto LABEL_9;
  }
  double v6 = v5 / a3;
LABEL_11:
  if (result <= v6) {
    return v6;
  }
  return result;
}

__C::CGRect __swiftcall CGSize.centeredIn(_:)(__C::CGRect a1)
{
  double v3 = (a1.size.width - v1) * 0.5 + a1.origin.x;
  double v4 = (a1.size.height - v2) * 0.5 + a1.origin.y;
  double v5 = v1;
  double v6 = v2;
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.double y = v4;
  result.origin.double x = v3;
  return result;
}

uint64_t View.aspectRatio(_:contentMode:)(char a1, uint64_t a2, double a3, double a4)
{
  double v5 = a3 / a4;
  char v6 = 0;
  char v7 = a1 & 1;
  return View.modifier<A>(_:)(&v5, a2, &type metadata for _AspectRatioLayout);
}

uint64_t View.scaledToFit()(uint64_t a1)
{
  uint64_t v2 = 0;
  __int16 v3 = 1;
  return View.modifier<A>(_:)(&v2, a1, &type metadata for _AspectRatioLayout);
}

uint64_t View.scaledToFill()(uint64_t a1)
{
  uint64_t v2 = 0;
  __int16 v3 = 257;
  return View.modifier<A>(_:)(&v2, a1, &type metadata for _AspectRatioLayout);
}

unint64_t lazy protocol witness table accessor for type ContentMode and conformance ContentMode()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentMode and conformance ContentMode;
  if (!lazy protocol witness table cache variable for type ContentMode and conformance ContentMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentMode and conformance ContentMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ContentMode] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ContentMode] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ContentMode] and conformance [A])
  {
    type metadata accessor for [ContentMode]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ContentMode] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [ContentMode]()
{
  if (!lazy cache variable for type metadata for [ContentMode])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [ContentMode]);
    }
  }
}

uint64_t storeEnumTagSinglePayload for _AspectRatioLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 9) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_245D677EC()
{
  return swift_getWitnessTable();
}

id Animation.Function.apply(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  double v4 = v3;
  uint64_t v6 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v8 = v4[2];
  uint64_t v7 = v4[3];
  uint64_t v9 = v4[4];
  switch(*((unsigned char *)v4 + 40))
  {
    case 1:
      double v11 = *(double *)&v6;
      long long v12 = sel_addPreset_duration_;
      a3 = 8;
      goto LABEL_6;
    case 2:
      double v11 = *(double *)&v6;
      long long v12 = sel_addPreset_duration_;
      a3 = 9;
      goto LABEL_6;
    case 3:
      double v11 = *(double *)&v6;
      long long v12 = sel_addPreset_duration_;
      a3 = 10;
      goto LABEL_6;
    case 4:
      double v11 = *(double *)&v6;
      long long v12 = sel_addBezierDuration_controlPoint1_controlPoint2_;
      goto LABEL_11;
    case 5:
      double v11 = *(double *)&v6;
      long long v12 = sel_addSpringDuration_mass_stiffness_damping_initialVelocity_;
LABEL_11:
      return objc_msgSend(a1, v12, a3, v11);
    case 6:
      long long v14 = (void *)MEMORY[0x263F8EE78];
      unint64_t v54 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      uint64_t v55 = 0;
      LOWORD(v56) = 0;
      outlined copy of Animation.Function(v6, v5, v8, v7, v9, 6);
      *(void *)&long long v15 = 0;
      break;
    case 7:
      double v23 = *(double *)(v6 + 16);
      uint64_t v24 = *(void *)(v6 + 24);
      uint64_t v25 = *(void *)(v6 + 32);
      uint64_t v26 = *(void *)(v6 + 40);
      uint64_t v27 = *(void *)(v6 + 48);
      uint64_t v28 = *(void *)(v6 + 56);
      char v29 = *(unsigned char *)(v6 + 64);
      outlined copy of Animation.Function(v24, v25, v26, v27, v28, v29);
      objc_msgSend(a1, sel_addDelay_, v23);
      goto LABEL_26;
    case 8:
      double v30 = *(double *)(v6 + 16);
      uint64_t v24 = *(void *)(v6 + 24);
      uint64_t v25 = *(void *)(v6 + 32);
      uint64_t v26 = *(void *)(v6 + 40);
      uint64_t v27 = *(void *)(v6 + 48);
      uint64_t v28 = *(void *)(v6 + 56);
      char v29 = *(unsigned char *)(v6 + 64);
      outlined copy of Animation.Function(v24, v25, v26, v27, v28, v29);
      objc_msgSend(a1, sel_addSpeed_, v30);
      goto LABEL_26;
    case 9:
      double v31 = *(double *)(v6 + 16);
      uint64_t v32 = *(unsigned __int8 *)(v6 + 24);
      uint64_t v24 = *(void *)(v6 + 32);
      uint64_t v25 = *(void *)(v6 + 40);
      uint64_t v26 = *(void *)(v6 + 48);
      uint64_t v27 = *(void *)(v6 + 56);
      uint64_t v28 = *(void *)(v6 + 64);
      char v29 = *(unsigned char *)(v6 + 72);
      outlined copy of Animation.Function(v24, v25, v26, v27, v28, v29);
      objc_msgSend(a1, sel_addRepeatCount_autoreverses_, v32, v31);
LABEL_26:
      unint64_t v54 = v24;
      uint64_t v55 = v25;
      uint64_t v56 = v26;
      uint64_t v57 = v27;
      uint64_t v58 = v28;
      char v59 = v29;
      Animation.Function.apply(to:)(a1);
      return (id)outlined consume of Animation.Function(v24, v25, v26, v27, v28, v29);
    default:
      double v11 = *(double *)&v6;
      long long v12 = sel_addPreset_duration_;
      a3 = 0;
LABEL_6:
      return objc_msgSend(a1, v12, a3, v11);
  }
  while (1)
  {
    long long v52 = v15;
    uint64_t v16 = ((uint64_t (*)(unint64_t *))v6)(&v54);
    if (v17) {
      break;
    }
    float64_t v18 = *(double *)&v16;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    }
    unint64_t v20 = v14[2];
    unint64_t v19 = v14[3];
    long long v15 = v52;
    if (v20 >= v19 >> 1)
    {
      long long v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v14);
      long long v15 = v52;
      long long v14 = v22;
    }
    *(void *)&v21.f64[0] = v15;
    v21.f64[1] = v18;
    v14[2] = v20 + 1;
    v14[v20 + 4] = vcvt_f32_f64(v21);
    *(double *)&long long v15 = *(double *)&v15 + 0.1;
    if (*(double *)&v15 >= 10.0) {
      goto LABEL_28;
    }
  }
  *(void *)&long long v15 = v52;
LABEL_28:
  double v53 = *(double *)&v15;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
  }
  unint64_t v33 = v14[2];
  unint64_t v34 = v14[3];
  unint64_t v35 = v33 + 1;
  double v36 = v53;
  if (v33 >= v34 >> 1)
  {
    long long v49 = v14;
    unint64_t v50 = v14[2];
    int v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v33 + 1, 1, v49);
    double v36 = v53;
    unint64_t v33 = v50;
    long long v14 = v51;
  }
  float v37 = v36;
  v14[2] = v35;
  uint64_t v38 = (uint64_t)&v14[v33 + 4];
  *(float *)uint64_t v38 = v37;
  *(_DWORD *)(v38 + 4) = 1065353216;
  float v39 = 1.0 / v36;
  if (v33 >= 4)
  {
    uint64_t v41 = (v33 + 1) & 3;
    if (!v41) {
      uint64_t v41 = 4;
    }
    unint64_t v40 = v33 + 1 - v41;
    unint64_t v42 = v40;
    uint64_t v43 = (float *)(v14 + 4);
    uint64_t v44 = (const float *)(v14 + 4);
    do
    {
      unsigned long long v45 = (unsigned __int128)vld2q_f32(v44);
      v44 += 8;
      float32x4_t v46 = vmulq_n_f32((float32x4_t)v45, v39);
      *uint64_t v43 = v46.f32[0];
      v43[2] = v46.f32[1];
      void v43[4] = v46.f32[2];
      v43[6] = v46.f32[3];
      uint64_t v43 = (float *)v44;
      v42 -= 4;
    }
    while (v42);
  }
  else
  {
    unint64_t v40 = 0;
  }
  uint64_t v47 = v33 - v40 + 1;
  uint64_t v48 = 8 * v40 + 32;
  do
  {
    *(float *)((char *)v14 + v48) = *(float *)((char *)v14 + v48) * v39;
    v48 += 8;
    --v47;
  }
  while (v47);
  swift_bridgeObjectRetain();
  objc_msgSend(a1, sel_addSampledFunctionWithDuration_count_values_, v35, v14 + 4, v53);
  outlined consume of Animation.Function(v6, v5, v8, v7, v9, 6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (id)swift_bridgeObjectRelease();
}

uint64_t specialized RBShadowFlags.init(_:)(char a1)
{
  if (a1)
  {
    if ((a1 & 2) != 0)
    {
      uint64_t v1 = 3;
      if ((a1 & 4) == 0) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v1 = 1;
      if ((a1 & 4) == 0) {
        goto LABEL_5;
      }
    }
LABEL_4:
    uint64_t v1 = v1 | 4;
    goto LABEL_5;
  }
  if ((a1 & 2) == 0)
  {
    uint64_t v1 = 0;
    if ((a1 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v1 = 2;
  if ((a1 & 4) != 0) {
    goto LABEL_4;
  }
LABEL_5:
  if ((a1 & 8) != 0) {
    return v1 | 8;
  }
  return v1;
}

unint64_t specialized EffectAnimation.init(from:)@<X0>(void *a1@<X0>, double *a2@<X8>)
{
  unint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  if (v5 >= v6) {
    goto LABEL_67;
  }
  uint64_t v7 = 0;
  int v8 = 1;
  double v9 = 0.0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  double v12 = 0.0;
  uint64_t v13 = 0;
  int v14 = 1;
  uint64_t v15 = 0;
  while (1)
  {
    unint64_t result = a1[3];
    if (result)
    {
      unint64_t v19 = a1[4];
      if (v5 < v19) {
        goto LABEL_11;
      }
      if (v19 < v5) {
        goto LABEL_68;
      }
      a1[3] = 0;
    }
    unint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_release();
    }
    if (result < 8) {
      goto LABEL_68;
    }
LABEL_11:
    unint64_t v20 = result >> 3;
    if (result >> 3 != 1) {
      break;
    }
    if ((result & 7) != 2) {
      goto LABEL_68;
    }
    double v30 = (void *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
    }
    unint64_t v3 = v30[2];
    unint64_t v31 = v30[3];
    if (v3 >= v31 >> 1) {
      double v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v3 + 1, 1, v30);
    }
    v30[2] = v3 + 1;
    v30[v3 + 4] = v6;
    a1[5] = v30;
    uint64_t v32 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_release();
    }
    if (v32 < 0) {
      goto LABEL_81;
    }
    unint64_t v33 = a1[1] + v32;
    if (v6 < v33) {
      goto LABEL_68;
    }
    a1[2] = v33;
    double v34 = specialized _RotationEffect.init(from:)(a1);
    float v37 = (void *)a1[5];
    if (!v37[2]) {
      goto LABEL_84;
    }
    double v12 = v34;
    uint64_t v13 = v35;
    uint64_t v15 = v36;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v38 = v37[2];
      if (!v38) {
        goto LABEL_87;
      }
    }
    else
    {
      unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v37);
      float v37 = (void *)result;
      uint64_t v38 = *(void *)(result + 16);
      if (!v38) {
        goto LABEL_87;
      }
    }
    int v14 = 0;
LABEL_3:
    uint64_t v16 = v38 - 1;
    uint64_t v17 = v37[v16 + 4];
    v37[2] = v16;
    a1[5] = v37;
    a1[2] = v17;
LABEL_4:
    unint64_t v5 = a1[1];
    unint64_t v6 = a1[2];
    if (v5 >= v6)
    {
      a1[3] = 0;
      if (((v14 | v8) & 1) == 0 && v7)
      {
        *a2 = v12;
        *((void *)a2 + 1) = v13;
        *((void *)a2 + 2) = v15;
        a2[3] = v9;
        *((void *)a2 + 4) = v10;
        *((void *)a2 + 5) = v11;
        *((void *)a2 + 6) = v7;
        return result;
      }
      goto LABEL_68;
    }
  }
  if (v20 == 2)
  {
    if ((result & 7) != 2) {
      goto LABEL_68;
    }
    float v39 = (void *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      float v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39[2] + 1, 1, v39);
    }
    unint64_t v3 = v39[2];
    unint64_t v40 = v39[3];
    if (v3 >= v40 >> 1) {
      float v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v3 + 1, 1, v39);
    }
    v39[2] = v3 + 1;
    v39[v3 + 4] = v6;
    a1[5] = v39;
    uint64_t v41 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_release();
    }
    if (v41 < 0) {
      goto LABEL_82;
    }
    unint64_t v42 = a1[1] + v41;
    if (v6 < v42) {
      goto LABEL_68;
    }
    a1[2] = v42;
    double v43 = specialized _RotationEffect.init(from:)(a1);
    float v37 = (void *)a1[5];
    if (!v37[2]) {
      goto LABEL_85;
    }
    double v9 = v43;
    uint64_t v10 = v44;
    uint64_t v11 = v45;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v38 = v37[2];
      if (!v38) {
        goto LABEL_86;
      }
    }
    else
    {
      unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v37);
      float v37 = (void *)result;
      uint64_t v38 = *(void *)(result + 16);
      if (!v38) {
        goto LABEL_86;
      }
    }
    int v8 = 0;
    goto LABEL_3;
  }
  if (v20 != 3)
  {
    switch(result & 7)
    {
      case 0uLL:
        unint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_release();
        }
        goto LABEL_4;
      case 1uLL:
        unint64_t v46 = a1[1] + 8;
        if (v6 < v46) {
          goto LABEL_68;
        }
        goto LABEL_60;
      case 2uLL:
        unint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_release();
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_88;
        }
        unint64_t v46 = a1[1] + result;
        if (v6 < v46) {
          goto LABEL_68;
        }
LABEL_60:
        a1[1] = v46;
        break;
      case 5uLL:
        unint64_t v46 = a1[1] + 4;
        if (v6 >= v46) {
          goto LABEL_60;
        }
        goto LABEL_68;
      default:
        goto LABEL_68;
    }
    goto LABEL_4;
  }
  if ((result & 7) != 2) {
    goto LABEL_68;
  }
  float64x2_t v21 = (void *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    float64x2_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
  }
  unint64_t v3 = v21[2];
  unint64_t v22 = v21[3];
  if (v3 >= v22 >> 1) {
    float64x2_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v3 + 1, 1, v21);
  }
  void v21[2] = v3 + 1;
  v21[v3 + 4] = v6;
  a1[5] = v21;
  uint64_t v23 = ProtobufDecoder.decodeVarint()();
  if (v2) {
    return swift_release();
  }
  if ((v23 & 0x8000000000000000) == 0)
  {
    unint64_t v24 = a1[1] + v23;
    if (v6 < v24) {
      goto LABEL_68;
    }
    a1[2] = v24;
    uint64_t v25 = specialized CodableAnimation.init(from:)(a1);
    uint64_t v26 = (void *)a1[5];
    if (!v26[2]) {
      goto LABEL_83;
    }
    uint64_t v27 = v25;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v28 = v26[2];
      if (!v28) {
        goto LABEL_66;
      }
      goto LABEL_25;
    }
    uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew()(v26);
    uint64_t v28 = v26[2];
    if (v28)
    {
LABEL_25:
      uint64_t v29 = v28 - 1;
      unint64_t v3 = v26[v29 + 4];
      void v26[2] = v29;
      unint64_t result = swift_release();
      a1[5] = v26;
      a1[2] = v3;
      uint64_t v7 = v27;
      goto LABEL_4;
    }
LABEL_66:
    __break(1u);
LABEL_67:
    a1[3] = 0;
LABEL_68:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  __break(1u);
  uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v3);
  uint64_t v48 = v47[2];
  if (v48) {
    goto LABEL_79;
  }
  __break(1u);
  uint64_t v47 = (void *)a1[5];
  if (!v47[2])
  {
    __break(1u);
LABEL_91:
    uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew()(v47);
    uint64_t v48 = v47[2];
    if (v48) {
      goto LABEL_79;
    }
LABEL_76:
    __break(1u);
    uint64_t v47 = (void *)a1[5];
    if (v47[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v48 = v47[2];
        if (v48) {
          goto LABEL_79;
        }
        goto LABEL_95;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew()(v47);
    uint64_t v48 = v47[2];
    if (v48) {
      goto LABEL_79;
    }
LABEL_95:
    __break(1u);
    JUMPOUT(0x245D68498);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_91;
  }
  uint64_t v48 = v47[2];
  if (!v48) {
    goto LABEL_76;
  }
LABEL_79:
  uint64_t v49 = v48 - 1;
  uint64_t v50 = v47[v49 + 4];
  v47[2] = v49;
  unint64_t result = swift_release();
  a1[5] = v47;
  a1[2] = v50;
  return result;
}

{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  unint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  if (v5 >= v6) {
    goto LABEL_67;
  }
  uint64_t v7 = 0;
  int v8 = 0.0;
  double v9 = 0;
  uint64_t v10 = 1;
  uint64_t v11 = 0;
  double v12 = 0;
  uint64_t v13 = 0.0;
  int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 1;
  uint64_t v17 = 0;
  while (1)
  {
    unint64_t result = a1[3];
    if (result)
    {
      float64x2_t v21 = a1[4];
      if (v5 < v21) {
        goto LABEL_11;
      }
      if (v21 < v5) {
        goto LABEL_68;
      }
      a1[3] = 0;
    }
    unint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_release();
    }
    if (result < 8) {
      goto LABEL_68;
    }
LABEL_11:
    unint64_t v22 = result >> 3;
    if (result >> 3 != 1) {
      break;
    }
    if ((result & 7) != 2) {
      goto LABEL_68;
    }
    uint64_t v32 = (void *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
    }
    unint64_t v3 = v32[2];
    unint64_t v33 = v32[3];
    if (v3 >= v33 >> 1) {
      uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v3 + 1, 1, v32);
    }
    v32[2] = v3 + 1;
    v32[v3 + 4] = v6;
    a1[5] = v32;
    double v34 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_release();
    }
    if (v34 < 0) {
      goto LABEL_81;
    }
    uint64_t v35 = a1[1] + v34;
    if (v6 < v35) {
      goto LABEL_68;
    }
    a1[2] = v35;
    uint64_t v36 = specialized _ScaleEffect.init(from:)(a1);
    unint64_t v40 = (void *)a1[5];
    if (!v40[2]) {
      goto LABEL_84;
    }
    uint64_t v13 = v36;
    int v14 = v37;
    uint64_t v15 = v38;
    uint64_t v17 = v39;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v41 = v40[2];
      if (!v41) {
        goto LABEL_87;
      }
    }
    else
    {
      unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v40);
      unint64_t v40 = (void *)result;
      uint64_t v41 = *(void *)(result + 16);
      if (!v41) {
        goto LABEL_87;
      }
    }
    uint64_t v16 = 0;
LABEL_3:
    float64_t v18 = v41 - 1;
    unint64_t v19 = v40[v18 + 4];
    v40[2] = v18;
    a1[5] = v40;
    a1[2] = v19;
LABEL_4:
    unint64_t v5 = a1[1];
    unint64_t v6 = a1[2];
    if (v5 >= v6)
    {
      a1[3] = 0;
      if (((v16 | v10) & 1) == 0 && v7)
      {
        *a2 = v13;
        *((void *)a2 + 1) = v14;
        *((void *)a2 + 2) = v15;
        *((void *)a2 + 3) = v17;
        a2[4] = v8;
        *((void *)a2 + 5) = v9;
        *((void *)a2 + 6) = v11;
        *((void *)a2 + 7) = v12;
        *((void *)a2 + 8) = v7;
        return result;
      }
      goto LABEL_68;
    }
  }
  if (v22 == 2)
  {
    if ((result & 7) != 2) {
      goto LABEL_68;
    }
    unint64_t v42 = (void *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
    }
    unint64_t v3 = v42[2];
    double v43 = v42[3];
    if (v3 >= v43 >> 1) {
      unint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v43 > 1), v3 + 1, 1, v42);
    }
    v42[2] = v3 + 1;
    v42[v3 + 4] = v6;
    a1[5] = v42;
    uint64_t v44 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_release();
    }
    if (v44 < 0) {
      goto LABEL_82;
    }
    uint64_t v45 = a1[1] + v44;
    if (v6 < v45) {
      goto LABEL_68;
    }
    a1[2] = v45;
    unint64_t v46 = specialized _ScaleEffect.init(from:)(a1);
    unint64_t v40 = (void *)a1[5];
    if (!v40[2]) {
      goto LABEL_85;
    }
    int v8 = v46;
    double v9 = v47;
    uint64_t v11 = v48;
    double v12 = v49;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v41 = v40[2];
      if (!v41) {
        goto LABEL_86;
      }
    }
    else
    {
      unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v40);
      unint64_t v40 = (void *)result;
      uint64_t v41 = *(void *)(result + 16);
      if (!v41) {
        goto LABEL_86;
      }
    }
    uint64_t v10 = 0;
    goto LABEL_3;
  }
  if (v22 != 3)
  {
    switch(result & 7)
    {
      case 0uLL:
        unint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_release();
        }
        goto LABEL_4;
      case 1uLL:
        uint64_t v50 = a1[1] + 8;
        if (v6 < v50) {
          goto LABEL_68;
        }
        goto LABEL_60;
      case 2uLL:
        unint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_release();
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_88;
        }
        uint64_t v50 = a1[1] + result;
        if (v6 < v50) {
          goto LABEL_68;
        }
LABEL_60:
        a1[1] = v50;
        break;
      case 5uLL:
        uint64_t v50 = a1[1] + 4;
        if (v6 >= v50) {
          goto LABEL_60;
        }
        goto LABEL_68;
      default:
        goto LABEL_68;
    }
    goto LABEL_4;
  }
  if ((result & 7) != 2) {
    goto LABEL_68;
  }
  uint64_t v23 = (void *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
  }
  unint64_t v3 = v23[2];
  unint64_t v24 = v23[3];
  if (v3 >= v24 >> 1) {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v3 + 1, 1, v23);
  }
  _DWORD v23[2] = v3 + 1;
  v23[v3 + 4] = v6;
  a1[5] = v23;
  uint64_t v25 = ProtobufDecoder.decodeVarint()();
  if (v2) {
    return swift_release();
  }
  if ((v25 & 0x8000000000000000) == 0)
  {
    uint64_t v26 = a1[1] + v25;
    if (v6 < v26) {
      goto LABEL_68;
    }
    a1[2] = v26;
    uint64_t v27 = specialized CodableAnimation.init(from:)(a1);
    uint64_t v28 = (void *)a1[5];
    if (!v28[2]) {
      goto LABEL_83;
    }
    uint64_t v29 = v27;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      double v30 = v28[2];
      if (!v30) {
        goto LABEL_66;
      }
      goto LABEL_25;
    }
    uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew()(v28);
    double v30 = v28[2];
    if (v30)
    {
LABEL_25:
      unint64_t v31 = v30 - 1;
      unint64_t v3 = v28[v31 + 4];
      _OWORD v28[2] = v31;
      unint64_t result = swift_release();
      a1[5] = v28;
      a1[2] = v3;
      uint64_t v7 = v29;
      goto LABEL_4;
    }
LABEL_66:
    __break(1u);
LABEL_67:
    a1[3] = 0;
LABEL_68:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  __break(1u);
  int v51 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v3);
  long long v52 = v51[2];
  if (v52) {
    goto LABEL_79;
  }
  __break(1u);
  int v51 = (void *)a1[5];
  if (!v51[2])
  {
    __break(1u);
LABEL_91:
    int v51 = specialized _ArrayBuffer._consumeAndCreateNew()(v51);
    long long v52 = v51[2];
    if (v52) {
      goto LABEL_79;
    }
LABEL_76:
    __break(1u);
    int v51 = (void *)a1[5];
    if (v51[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        long long v52 = v51[2];
        if (v52) {
          goto LABEL_79;
        }
        goto LABEL_95;
      }
    }
    else
    {
      __break(1u);
    }
    int v51 = specialized _ArrayBuffer._consumeAndCreateNew()(v51);
    long long v52 = v51[2];
    if (v52) {
      goto LABEL_79;
    }
LABEL_95:
    __break(1u);
    JUMPOUT(0x245D68AF8);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_91;
  }
  long long v52 = v51[2];
  if (!v52) {
    goto LABEL_76;
  }
LABEL_79:
  double v53 = v52 - 1;
  unint64_t v54 = v51[v53 + 4];
  v51[2] = v53;
  unint64_t result = swift_release();
  a1[5] = v51;
  a1[2] = v54;
  return result;
}

{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  double v9;
  uint64_t v10;
  double v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  double v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  unint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  if (v5 >= v6) {
    goto LABEL_67;
  }
  uint64_t v7 = 0;
  int v8 = 1;
  double v9 = 0.0;
  uint64_t v10 = 0;
  uint64_t v11 = 0.0;
  double v12 = 1;
  uint64_t v13 = 0;
  while (1)
  {
    unint64_t result = a1[3];
    if (result)
    {
      uint64_t v17 = a1[4];
      if (v5 < v17) {
        goto LABEL_11;
      }
      if (v17 < v5) {
        goto LABEL_68;
      }
      a1[3] = 0;
    }
    unint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_release();
    }
    if (result < 8) {
      goto LABEL_68;
    }
LABEL_11:
    float64_t v18 = result >> 3;
    if (result >> 3 != 1) {
      break;
    }
    if ((result & 7) != 2) {
      goto LABEL_68;
    }
    uint64_t v28 = (void *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    }
    unint64_t v3 = v28[2];
    uint64_t v29 = v28[3];
    if (v3 >= v29 >> 1) {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v3 + 1, 1, v28);
    }
    _OWORD v28[2] = v3 + 1;
    v28[v3 + 4] = v6;
    a1[5] = v28;
    double v30 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_release();
    }
    if (v30 < 0) {
      goto LABEL_81;
    }
    unint64_t v31 = a1[1] + v30;
    if (v6 < v31) {
      goto LABEL_68;
    }
    a1[2] = v31;
    uint64_t v32 = specialized _OffsetEffect.init(from:)(a1);
    double v34 = (void *)a1[5];
    if (!v34[2]) {
      goto LABEL_84;
    }
    uint64_t v11 = v32;
    uint64_t v13 = v33;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v35 = v34[2];
      if (!v35) {
        goto LABEL_87;
      }
    }
    else
    {
      unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v34);
      double v34 = (void *)result;
      uint64_t v35 = *(void *)(result + 16);
      if (!v35) {
        goto LABEL_87;
      }
    }
    double v12 = 0;
LABEL_3:
    int v14 = v35 - 1;
    uint64_t v15 = v34[v14 + 4];
    v34[2] = v14;
    a1[5] = v34;
    a1[2] = v15;
LABEL_4:
    unint64_t v5 = a1[1];
    unint64_t v6 = a1[2];
    if (v5 >= v6)
    {
      a1[3] = 0;
      if (((v12 | v8) & 1) == 0 && v7)
      {
        *a2 = v11;
        *((void *)a2 + 1) = v13;
        a2[2] = v9;
        *((void *)a2 + 3) = v10;
        *((void *)a2 + 4) = v7;
        return result;
      }
      goto LABEL_68;
    }
  }
  if (v18 == 2)
  {
    if ((result & 7) != 2) {
      goto LABEL_68;
    }
    uint64_t v36 = (void *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
    }
    unint64_t v3 = v36[2];
    float v37 = v36[3];
    if (v3 >= v37 >> 1) {
      uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v3 + 1, 1, v36);
    }
    v36[2] = v3 + 1;
    v36[v3 + 4] = v6;
    a1[5] = v36;
    uint64_t v38 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_release();
    }
    if (v38 < 0) {
      goto LABEL_82;
    }
    float v39 = a1[1] + v38;
    if (v6 < v39) {
      goto LABEL_68;
    }
    a1[2] = v39;
    unint64_t v40 = specialized _OffsetEffect.init(from:)(a1);
    double v34 = (void *)a1[5];
    if (!v34[2]) {
      goto LABEL_85;
    }
    double v9 = v40;
    uint64_t v10 = v41;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v35 = v34[2];
      if (!v35) {
        goto LABEL_86;
      }
    }
    else
    {
      unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v34);
      double v34 = (void *)result;
      uint64_t v35 = *(void *)(result + 16);
      if (!v35) {
        goto LABEL_86;
      }
    }
    int v8 = 0;
    goto LABEL_3;
  }
  if (v18 != 3)
  {
    switch(result & 7)
    {
      case 0uLL:
        unint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_release();
        }
        goto LABEL_4;
      case 1uLL:
        unint64_t v42 = a1[1] + 8;
        if (v6 < v42) {
          goto LABEL_68;
        }
        goto LABEL_60;
      case 2uLL:
        unint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_release();
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_88;
        }
        unint64_t v42 = a1[1] + result;
        if (v6 < v42) {
          goto LABEL_68;
        }
LABEL_60:
        a1[1] = v42;
        break;
      case 5uLL:
        unint64_t v42 = a1[1] + 4;
        if (v6 >= v42) {
          goto LABEL_60;
        }
        goto LABEL_68;
      default:
        goto LABEL_68;
    }
    goto LABEL_4;
  }
  if ((result & 7) != 2) {
    goto LABEL_68;
  }
  unint64_t v19 = (void *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
  }
  unint64_t v3 = v19[2];
  unint64_t v20 = v19[3];
  if (v3 >= v20 >> 1) {
    unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v3 + 1, 1, v19);
  }
  void v19[2] = v3 + 1;
  v19[v3 + 4] = v6;
  a1[5] = v19;
  float64x2_t v21 = ProtobufDecoder.decodeVarint()();
  if (v2) {
    return swift_release();
  }
  if ((v21 & 0x8000000000000000) == 0)
  {
    unint64_t v22 = a1[1] + v21;
    if (v6 < v22) {
      goto LABEL_68;
    }
    a1[2] = v22;
    uint64_t v23 = specialized CodableAnimation.init(from:)(a1);
    unint64_t v24 = (void *)a1[5];
    if (!v24[2]) {
      goto LABEL_83;
    }
    uint64_t v25 = v23;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v26 = v24[2];
      if (!v26) {
        goto LABEL_66;
      }
      goto LABEL_25;
    }
    unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew()(v24);
    uint64_t v26 = v24[2];
    if (v26)
    {
LABEL_25:
      uint64_t v27 = v26 - 1;
      unint64_t v3 = v24[v27 + 4];
      uint64_t v24[2] = v27;
      unint64_t result = swift_release();
      a1[5] = v24;
      a1[2] = v3;
      uint64_t v7 = v25;
      goto LABEL_4;
    }
LABEL_66:
    __break(1u);
LABEL_67:
    a1[3] = 0;
LABEL_68:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  __break(1u);
  double v43 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v3);
  uint64_t v44 = v43[2];
  if (v44) {
    goto LABEL_79;
  }
  __break(1u);
  double v43 = (void *)a1[5];
  if (!v43[2])
  {
    __break(1u);
LABEL_91:
    double v43 = specialized _ArrayBuffer._consumeAndCreateNew()(v43);
    uint64_t v44 = v43[2];
    if (v44) {
      goto LABEL_79;
    }
LABEL_76:
    __break(1u);
    double v43 = (void *)a1[5];
    if (v43[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v44 = v43[2];
        if (v44) {
          goto LABEL_79;
        }
        goto LABEL_95;
      }
    }
    else
    {
      __break(1u);
    }
    double v43 = specialized _ArrayBuffer._consumeAndCreateNew()(v43);
    uint64_t v44 = v43[2];
    if (v44) {
      goto LABEL_79;
    }
LABEL_95:
    __break(1u);
    JUMPOUT(0x245D75E28);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_91;
  }
  uint64_t v44 = v43[2];
  if (!v44) {
    goto LABEL_76;
  }
LABEL_79:
  uint64_t v45 = v44 - 1;
  unint64_t v46 = v43[v45 + 4];
  v43[2] = v45;
  unint64_t result = swift_release();
  a1[5] = v43;
  a1[2] = v46;
  return result;
}

uint64_t DisplayList.encode(to:)(void *a1)
{
  uint64_t result = *v1;
  uint64_t v5 = *(void *)(*v1 + 16);
  if (v5)
  {
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v6 = result + 100;
    while (1)
    {
      uint64_t v7 = *(void *)(v6 - 28);
      unint64_t v8 = *(void *)(v6 - 20);
      int64_t v9 = a1[1];
      int64_t v10 = a1[2];
      uint64_t v18 = v7;
      if (v9 >= v10)
      {
        int64_t v15 = v9 + 1;
        if (__OFADD__(v9, 1)) {
          goto LABEL_21;
        }
        if (v10 < v15)
        {
          outlined copy of DisplayList.Item.Value(v18, v8);
          uint64_t v16 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v15);
        }
        else
        {
          a1[1] = v15;
          uint64_t v16 = (unsigned char *)(*a1 + v9);
          outlined copy of DisplayList.Item.Value(v18, v8);
        }
        *uint64_t v16 = 10;
      }
      else
      {
        *(unsigned char *)(*a1 + v9) = 10;
        a1[1] = v9 + 1;
        outlined copy of DisplayList.Item.Value(v7, v8);
      }
      uint64_t v11 = a1[1];
      double v12 = (void *)a1[3];
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v17 = v8;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
        double v12 = (void *)result;
      }
      unint64_t v14 = v12[2];
      unint64_t v13 = v12[3];
      if (v14 >= v13 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
        double v12 = (void *)result;
      }
      v12[2] = v14 + 1;
      v12[v14 + 4] = v11;
      a1[3] = v12;
      if (__OFADD__(v11, 1)) {
        break;
      }
      a1[1] = v11 + 1;
      DisplayList.Item.encode(to:)((uint64_t)a1);
      if (v2)
      {
        swift_bridgeObjectRelease();
        return outlined consume of DisplayList.Item.Value(v18, v17);
      }
      v6 += 72;
      ProtobufEncoder.endLengthDelimited()();
      uint64_t result = outlined consume of DisplayList.Item.Value(v18, v17);
      if (!--v5) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  return result;
}

uint64_t DisplayList.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  uint64_t v6 = (void *)MEMORY[0x263F8EE78];
  if (v4 >= v5)
  {
LABEL_2:
    a1[3] = 0;
    uint64_t result = DisplayList.init(_:)((uint64_t)v6, (uint64_t)&v46);
    __int16 v8 = v47;
    char v9 = BYTE2(v47);
    *(void *)a2 = v46;
    *(_WORD *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 10) = v9;
    return result;
  }
  while (1)
  {
    unint64_t v10 = a1[3];
    if (v10)
    {
      unint64_t v11 = a1[4];
      if (v4 < v11) {
        goto LABEL_11;
      }
      if (v11 < v4) {
        goto LABEL_38;
      }
      a1[3] = 0;
    }
    unint64_t v10 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_bridgeObjectRelease();
    }
    if (v10 < 8)
    {
LABEL_38:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
LABEL_11:
    if ((v10 & 0xFFFFFFFFFFFFFFF8) != 8)
    {
      switch(v10 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (!v2) {
            goto LABEL_4;
          }
          return swift_bridgeObjectRelease();
        case 1uLL:
          unint64_t v38 = a1[1] + 8;
          goto LABEL_34;
        case 2uLL:
          uint64_t v39 = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return swift_bridgeObjectRelease();
          }
          if (v39 < 0) {
            goto LABEL_44;
          }
          unint64_t v38 = a1[1] + v39;
LABEL_34:
          if (v5 < v38) {
            goto LABEL_38;
          }
          a1[1] = v38;
          break;
        case 5uLL:
          unint64_t v38 = a1[1] + 4;
          goto LABEL_34;
        default:
          goto LABEL_38;
      }
      goto LABEL_4;
    }
    if ((v10 & 7) != 2) {
      goto LABEL_38;
    }
    double v12 = (void *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    }
    unint64_t v14 = v12[2];
    unint64_t v13 = v12[3];
    if (v14 >= v13 >> 1) {
      double v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
    }
    v12[2] = v14 + 1;
    v12[v14 + 4] = v5;
    a1[5] = v12;
    uint64_t v15 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_bridgeObjectRelease();
    }
    if (v15 < 0) {
      break;
    }
    unint64_t v16 = a1[1] + v15;
    if (v5 < v16) {
      goto LABEL_38;
    }
    a1[2] = v16;
    DisplayList.Item.init(from:)((unint64_t)a1, (uint64_t)&v46);
    unint64_t v17 = (void *)a1[5];
    if (!v17[2]) {
      goto LABEL_42;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v18 = v17[2];
      if (!v18) {
        goto LABEL_43;
      }
    }
    else
    {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
      uint64_t v18 = v17[2];
      if (!v18) {
        goto LABEL_43;
      }
    }
    uint64_t v19 = v18 - 1;
    uint64_t v20 = v17[v19 + 4];
    v17[2] = v19;
    a1[5] = v17;
    a1[2] = v20;
    uint64_t v21 = v46;
    uint64_t v22 = v47;
    uint64_t v23 = v48;
    uint64_t v24 = v49;
    uint64_t v26 = v50;
    uint64_t v25 = v51;
    uint64_t v28 = v52;
    uint64_t v27 = v53;
    int v45 = v55;
    int v29 = v54;
    int v30 = v56;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v57 = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    }
    uint64_t v32 = v6;
    unint64_t v33 = v6[2];
    double v34 = v32;
    unint64_t v35 = v32[3];
    if (v33 >= v35 >> 1) {
      double v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v33 + 1, 1, v34);
    }
    v34[2] = v33 + 1;
    uint64_t v36 = &v34[9 * v33];
    uint64_t v6 = v34;
    _OWORD v36[4] = v21;
    _OWORD v36[5] = v22;
    v36[6] = v23;
    v36[7] = v24;
    v36[8] = v26;
    v36[9] = v25;
    uint64_t v37 = v57;
    v36[10] = v28;
    v36[11] = v37;
    *((unsigned char *)v36 + 98) = (v29 | (v45 << 16)) >> 16;
    *((_WORD *)v36 + 48) = v29;
    *((_DWORD *)v36 + 25) = v30;
LABEL_4:
    unint64_t v4 = a1[1];
    unint64_t v5 = a1[2];
    if (v4 >= v5) {
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  __break(1u);
  unint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  uint64_t v43 = v42[2];
  if (!v43)
  {
    __break(1u);
    JUMPOUT(0x245D6916CLL);
  }
  uint64_t v40 = v43 - 1;
  uint64_t v41 = v42[v40 + 4];
  v42[2] = v40;
  uint64_t result = swift_bridgeObjectRelease();
  a1[5] = v42;
  a1[2] = v41;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DisplayList(void *a1)
{
  return DisplayList.encode(to:)(a1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance DisplayList@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return DisplayList.init(from:)(a1, a2);
}

void DisplayList.Item.encode(to:)(uint64_t a1)
{
  double v3 = *(double *)v1;
  double v4 = *(double *)(v1 + 8);
  double v5 = *(double *)(v1 + 16);
  double v6 = *(double *)(v1 + 24);
  unint64_t v8 = *(void *)(v1 + 40);
  unint64_t v7 = *(void *)(v1 + 48);
  Swift::UInt v22 = *(unsigned int *)(v1 + 68);
  switch(v7 >> 62)
  {
    case 1uLL:
      unint64_t v21 = HIDWORD(v7);
      outlined copy of DisplayList.Effect(v8, v7, SBYTE4(v7));
      swift_bridgeObjectRetain();
      ProtobufEncoder.encodeVarint(_:)(0x12uLL);
      unint64_t v11 = *(void **)(a1 + 8);
      unint64_t v14 = *(void **)(a1 + 24);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_36;
      }
      goto LABEL_10;
    case 2uLL:
      swift_bridgeObjectRetain();
      ProtobufEncoder.encodeVarint(_:)(0x2AuLL);
      unint64_t v14 = *(void **)(a1 + 8);
      unint64_t v11 = *(void **)(a1 + 24);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_18;
      }
      goto LABEL_38;
    case 3uLL:
      goto LABEL_31;
    default:
      outlined copy of DisplayList.Content.Value(v8);
      ProtobufEncoder.encodeVarint(_:)(0xAuLL);
      uint64_t v10 = *(void *)(a1 + 8);
      unint64_t v11 = *(void **)(a1 + 24);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      }
      unint64_t v13 = v11[2];
      unint64_t v12 = v11[3];
      unint64_t v14 = (void *)(v13 + 1);
      if (v13 >= v12 >> 1) {
        unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v11);
      }
      uint64_t v11[2] = v14;
      v11[v13 + 4] = v10;
      *(void *)(a1 + 24) = v11;
      if (!__OFADD__(v10, 1))
      {
        *(void *)(a1 + 8) = v10 + 1;
        outlined copy of DisplayList.Content.Value(v8);
        specialized ProtobufEncoder.messageField<A>(_:_:)(1, v8);
        outlined consume of DisplayList.Item.Value(v8, v7);
        if (v2)
        {
          uint64_t v15 = v8;
          unint64_t v16 = v7;
LABEL_23:
          outlined consume of DisplayList.Item.Value(v15, v16);
          return;
        }
        if ((_WORD)v7)
        {
          ProtobufEncoder.encodeVarint(_:)(0x10uLL);
          ProtobufEncoder.encodeVarint(_:)((unsigned __int16)v7);
        }
LABEL_29:
        ProtobufEncoder.endLengthDelimited()();
        outlined consume of DisplayList.Item.Value(v8, v7);
        goto LABEL_31;
      }
      __break(1u);
LABEL_36:
      unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
LABEL_10:
      unint64_t v18 = v14[2];
      unint64_t v17 = v14[3];
      if (v18 >= v17 >> 1) {
        unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v14);
      }
      v14[2] = v18 + 1;
      v14[v18 + 4] = v11;
      *(void *)(a1 + 24) = v14;
      if (__OFADD__(v11, 1))
      {
        __break(1u);
LABEL_38:
        unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
LABEL_18:
        unint64_t v20 = v11[2];
        unint64_t v19 = v11[3];
        if (v20 >= v19 >> 1) {
          unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v11);
        }
        uint64_t v11[2] = v20 + 1;
        v11[v20 + 4] = v14;
        *(void *)(a1 + 24) = v11;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
          JUMPOUT(0x245D695D4);
        }
        *(void *)(a1 + 8) = (char *)v14 + 1;
        closure #3 in DisplayList.Item.encode(to:)(a1, v8);
        if (v2)
        {
          uint64_t v15 = v8;
          unint64_t v16 = v7;
          goto LABEL_23;
        }
        goto LABEL_29;
      }
      *(void *)(a1 + 8) = (char *)v11 + 1;
      if ((BYTE4(v7) != 19 || v8 || v7) && (specialized ProtobufEncoder.messageField<A>(_:_:)(1), v2)
        || (specialized ProtobufEncoder.messageField<A>(_:_:)(2), v2))
      {
        outlined consume of DisplayList.Effect(v8, v7, v21);
        swift_bridgeObjectRelease();
        return;
      }
      ProtobufEncoder.endLengthDelimited()();
      outlined consume of DisplayList.Effect(v8, v7, v21);
      swift_bridgeObjectRelease();
LABEL_31:
      ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(v3, v4, v5, v6);
      if (!v2)
      {
        if (v22)
        {
          ProtobufEncoder.encodeVarint(_:)(0x20uLL);
          ProtobufEncoder.encodeVarint(_:)(v22);
        }
      }
      return;
  }
}

uint64_t closure #3 in DisplayList.Item.encode(to:)(uint64_t result, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    unint64_t v7 = (void *)result;
    uint64_t result = swift_bridgeObjectRetain();
    for (uint64_t i = (unsigned __int8 *)(a2 + 66); ; i += 40)
    {
      int64_t v9 = v7[1];
      int64_t v10 = v7[2];
      int v22 = *((unsigned __int16 *)i - 1);
      int v21 = *i;
      if (v9 >= v10)
      {
        int64_t v19 = v9 + 1;
        if (__OFADD__(v9, 1)) {
          goto LABEL_28;
        }
        if (v10 < v19)
        {
          swift_bridgeObjectRetain();
          unint64_t v20 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v19);
        }
        else
        {
          v7[1] = v19;
          unint64_t v20 = (unsigned char *)(*v7 + v9);
          swift_bridgeObjectRetain();
        }
        *unint64_t v20 = 10;
        int64_t v11 = v7[1];
      }
      else
      {
        *(unsigned char *)(*v7 + v9) = 10;
        int64_t v11 = v9 + 1;
        v7[1] = v9 + 1;
        swift_bridgeObjectRetain();
      }
      unint64_t v12 = (void *)v7[3];
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
        unint64_t v12 = (void *)result;
      }
      unint64_t v14 = v12[2];
      unint64_t v13 = v12[3];
      if (v14 >= v13 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
        unint64_t v12 = (void *)result;
      }
      v12[2] = v14 + 1;
      v12[v14 + 4] = v11;
      void v7[3] = v12;
      if (__OFADD__(v11, 1)) {
        break;
      }
      v7[1] = v11 + 1;
      ProtobufEncoder.encodeVarint(_:)(0xAuLL);
      uint64_t v15 = v7[1];
      unint64_t v16 = (void *)v7[3];
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
        unint64_t v16 = (void *)result;
      }
      unint64_t v18 = v16[2];
      unint64_t v17 = v16[3];
      if (v18 >= v17 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v16);
        unint64_t v16 = (void *)result;
      }
      v16[2] = v18 + 1;
      v16[v18 + 4] = v15;
      void v7[3] = v16;
      if (__OFADD__(v15, 1)) {
        goto LABEL_27;
      }
      v7[1] = v15 + 1;
      StrongHash.encode(to:)(v7);
      ProtobufEncoder.endLengthDelimited()();
      unsigned int v3 = v3 & 0xFF000000 | v22 | (v21 << 16);
      specialized ProtobufEncoder.messageField<A>(_:_:)(2);
      if (v4)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      ProtobufEncoder.endLengthDelimited()();
      uint64_t result = swift_bridgeObjectRelease();
      if (!--v5) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  return result;
}

unint64_t DisplayList.Item.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3 = (void *)result;
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v48 = ++static DisplayList.Version.lastValue;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 >= v6)
  {
    int v7 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    int v8 = 0;
    long long v49 = 0u;
    long long v50 = 0u;
    unint64_t v51 = 0xC000000000000000;
LABEL_4:
    v3[3] = 0;
    *(_OWORD *)a2 = v50;
    *(_OWORD *)(a2 + 16) = v49;
    *(void *)(a2 + 32) = v48;
    *(void *)(a2 + 40) = v52;
    *(void *)(a2 + 48) = v51;
    *(void *)(a2 + 56) = v53;
    *(_WORD *)(a2 + 64) = v7;
    *(unsigned char *)(a2 + 66) = BYTE2(v7);
    *(_DWORD *)(a2 + 68) = v8;
    return result;
  }
  int v7 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  int v8 = 0;
  long long v49 = 0u;
  long long v50 = 0u;
  unint64_t v51 = 0xC000000000000000;
  while (2)
  {
    uint64_t result = v3[3];
    if (result)
    {
      unint64_t v16 = v3[4];
      if (v5 < v16) {
        goto LABEL_14;
      }
      if (v16 < v5) {
        goto LABEL_88;
      }
      v3[3] = 0;
    }
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return outlined consume of DisplayList.Item.Value(v52, v51);
    }
    if (result <= 7) {
      goto LABEL_88;
    }
LABEL_14:
    switch(result >> 3)
    {
      case 1uLL:
        if ((result & 7) != 2) {
          goto LABEL_88;
        }
        unint64_t v17 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
        }
        unint64_t v19 = v17[2];
        unint64_t v18 = v17[3];
        if (v19 >= v18 >> 1) {
          unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v17);
        }
        v17[2] = v19 + 1;
        v17[v19 + 4] = v6;
        v3[5] = v17;
        uint64_t v20 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of DisplayList.Item.Value(v52, v51);
        }
        if ((v20 & 0x8000000000000000) == 0)
        {
          unint64_t v21 = v3[1] + v20;
          if (v6 < v21) {
            goto LABEL_88;
          }
          v3[2] = v21;
          closure #1 in DisplayList.Item.init(from:)((uint64_t)v3, (uint64_t)&v55);
          int64_t v9 = (void *)v3[5];
          if (!v9[2]) {
            goto LABEL_104;
          }
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v10 = v9[2];
            if (!v10) {
              goto LABEL_108;
            }
          }
          else
          {
            int64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
            uint64_t v10 = v9[2];
            if (!v10) {
              goto LABEL_108;
            }
          }
LABEL_6:
          uint64_t v11 = v10 - 1;
          uint64_t v12 = v9[v11 + 4];
          uint64_t v9[2] = v11;
          v3[5] = v9;
          v3[2] = v12;
          long long v13 = v55;
          uint64_t v14 = v56;
          int v15 = WORD4(v56) | (BYTE10(v56) << 16);
          uint64_t result = outlined consume of DisplayList.Item.Value(v52, v51);
          int v7 = v15;
          uint64_t v52 = v13;
          uint64_t v53 = v14;
          unint64_t v51 = *((void *)&v13 + 1);
LABEL_7:
          unint64_t v5 = v3[1];
          unint64_t v6 = v3[2];
          if (v5 >= v6) {
            goto LABEL_4;
          }
          continue;
        }
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
        __break(1u);
        uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
        uint64_t v45 = v44[2];
        if (v45) {
          goto LABEL_99;
        }
        __break(1u);
        uint64_t v44 = (void *)v3[5];
        if (!v44[2])
        {
          __break(1u);
LABEL_115:
          uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
          uint64_t v45 = v44[2];
          if (v45) {
            goto LABEL_99;
          }
LABEL_93:
          __break(1u);
          uint64_t v44 = (void *)v3[5];
          if (v44[2])
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v45 = v44[2];
              if (v45) {
                goto LABEL_99;
              }
              goto LABEL_96;
            }
          }
          else
          {
            __break(1u);
          }
          uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
          uint64_t v45 = v44[2];
          if (v45) {
            goto LABEL_99;
          }
LABEL_96:
          __break(1u);
          uint64_t v44 = (void *)v3[5];
          if (v44[2])
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v45 = v44[2];
              if (v45) {
                goto LABEL_99;
              }
              goto LABEL_122;
            }
          }
          else
          {
            __break(1u);
          }
          uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
          uint64_t v45 = v44[2];
          if (v45) {
            goto LABEL_99;
          }
LABEL_122:
          __break(1u);
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_115;
        }
        uint64_t v45 = v44[2];
        if (!v45) {
          goto LABEL_93;
        }
LABEL_99:
        uint64_t v46 = v45 - 1;
        uint64_t v47 = v44[v46 + 4];
        v44[2] = v46;
        v3[5] = v44;
        v3[2] = v47;
        return outlined consume of DisplayList.Item.Value(v52, v51);
      case 2uLL:
        if ((result & 7) != 2) {
          goto LABEL_88;
        }
        int v22 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        }
        unint64_t v24 = v22[2];
        unint64_t v23 = v22[3];
        if (v24 >= v23 >> 1) {
          int v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v22);
        }
        void v22[2] = v24 + 1;
        v22[v24 + 4] = v6;
        v3[5] = v22;
        uint64_t v25 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of DisplayList.Item.Value(v52, v51);
        }
        if (v25 < 0) {
          goto LABEL_101;
        }
        unint64_t v26 = v3[1] + v25;
        if (v6 < v26) {
          goto LABEL_88;
        }
        v3[2] = v26;
        closure #2 in DisplayList.Item.init(from:)((unint64_t)v3, (uint64_t)&v55);
        int64_t v9 = (void *)v3[5];
        if (!v9[2]) {
          goto LABEL_105;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v10 = v9[2];
          if (!v10) {
            goto LABEL_109;
          }
        }
        else
        {
          int64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
          uint64_t v10 = v9[2];
          if (!v10) {
            goto LABEL_109;
          }
        }
        goto LABEL_6;
      case 3uLL:
        if ((result & 7) != 2) {
          goto LABEL_88;
        }
        uint64_t v27 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
        }
        unint64_t v29 = v27[2];
        unint64_t v28 = v27[3];
        if (v29 >= v28 >> 1) {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v27);
        }
        v27[2] = v29 + 1;
        v27[v29 + 4] = v6;
        v3[5] = v27;
        uint64_t v30 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of DisplayList.Item.Value(v52, v51);
        }
        if (v30 < 0) {
          goto LABEL_102;
        }
        unint64_t v31 = v3[1] + v30;
        if (v6 < v31) {
          goto LABEL_88;
        }
        v3[2] = v31;
        long long v55 = 0u;
        long long v56 = 0u;
        closure #1 in CGRect.init(from:)((unint64_t)&v55, v3, &v54);
        uint64_t v32 = (void *)v3[5];
        if (!v32[2]) {
          goto LABEL_106;
        }
        long long v49 = v56;
        long long v50 = v55;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          uint64_t v33 = v32[2];
          if (!v33) {
            goto LABEL_110;
          }
        }
        else
        {
          uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v32);
          uint64_t v32 = (void *)result;
          uint64_t v33 = *(void *)(result + 16);
          if (!v33) {
            goto LABEL_110;
          }
        }
        uint64_t v34 = v33 - 1;
        uint64_t v35 = v32[v34 + 4];
        v32[2] = v34;
        v3[5] = v32;
        v3[2] = v35;
        goto LABEL_7;
      case 4uLL:
        if ((result & 7) == 0) {
          goto LABEL_60;
        }
        if ((result & 7) != 2) {
          goto LABEL_88;
        }
        uint64_t v36 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of DisplayList.Item.Value(v52, v51);
        }
        if (v36 < 0) {
          goto LABEL_111;
        }
        unint64_t v37 = v3[1] + v36;
        if (v6 < v37) {
          goto LABEL_88;
        }
        v3[3] = 32;
        v3[4] = v37;
LABEL_60:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of DisplayList.Item.Value(v52, v51);
        }
        int v8 = result;
        goto LABEL_7;
      case 5uLL:
        if ((result & 7) != 2) {
          goto LABEL_88;
        }
        unint64_t v38 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
        }
        unint64_t v40 = v38[2];
        unint64_t v39 = v38[3];
        if (v40 >= v39 >> 1) {
          unint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v38);
        }
        _OWORD v38[2] = v40 + 1;
        v38[v40 + 4] = v6;
        v3[5] = v38;
        uint64_t v41 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of DisplayList.Item.Value(v52, v51);
        }
        if (v41 < 0) {
          goto LABEL_103;
        }
        unint64_t v42 = v3[1] + v41;
        if (v6 < v42) {
          goto LABEL_88;
        }
        v3[2] = v42;
        closure #3 in DisplayList.Item.init(from:)((unint64_t)v3, &v55);
        int64_t v9 = (void *)v3[5];
        if (!v9[2]) {
          goto LABEL_107;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v10 = v9[2];
          if (!v10) {
            goto LABEL_87;
          }
        }
        else
        {
          int64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
          uint64_t v10 = v9[2];
          if (!v10)
          {
LABEL_87:
            __break(1u);
LABEL_88:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            return outlined consume of DisplayList.Item.Value(v52, v51);
          }
        }
        goto LABEL_6;
      default:
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return outlined consume of DisplayList.Item.Value(v52, v51);
            }
            goto LABEL_7;
          case 1uLL:
            unint64_t v43 = v3[1] + 8;
            if (v6 < v43) {
              goto LABEL_88;
            }
            goto LABEL_81;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return outlined consume of DisplayList.Item.Value(v52, v51);
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_112;
            }
            unint64_t v43 = v3[1] + result;
            if (v6 < v43) {
              goto LABEL_88;
            }
LABEL_81:
            v3[1] = v43;
            break;
          case 5uLL:
            unint64_t v43 = v3[1] + 4;
            if (v6 >= v43) {
              goto LABEL_81;
            }
            goto LABEL_88;
          default:
            goto LABEL_88;
        }
        goto LABEL_7;
    }
  }
}

unint64_t closure #1 in DisplayList.Item.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = swift_allocObject();
  unint64_t v6 = result | 0x1000000000000000;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  unint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if (v7 >= v8)
  {
    unsigned __int16 v9 = 0;
LABEL_4:
    *(void *)(a1 + 24) = 0;
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 26) = 0;
    *(_WORD *)(a2 + 24) = 0;
    return result;
  }
  unsigned __int16 v9 = 0;
  while (1)
  {
    unint64_t result = *(void *)(a1 + 24);
    if (result)
    {
      unint64_t v11 = *(void *)(a1 + 32);
      if (v7 < v11) {
        goto LABEL_14;
      }
      if (v11 < v7) {
        goto LABEL_47;
      }
      *(void *)(a1 + 24) = 0;
    }
    unint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return outlined consume of DisplayList.Content.Value(v6);
    }
    if (result <= 7) {
      goto LABEL_47;
    }
LABEL_14:
    if (result >> 3 == 2)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2) {
          goto LABEL_47;
        }
        uint64_t v22 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of DisplayList.Content.Value(v6);
        }
        if (v22 < 0) {
          goto LABEL_52;
        }
        unint64_t v23 = *(void *)(a1 + 8) + v22;
        if (v8 < v23) {
          goto LABEL_47;
        }
        *(void *)(a1 + 24) = 16;
        *(void *)(a1 + 32) = v23;
      }
      unint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return outlined consume of DisplayList.Content.Value(v6);
      }
      unsigned __int16 v9 = result;
      goto LABEL_7;
    }
    if (result >> 3 != 1)
    {
      switch(result & 7)
      {
        case 0uLL:
          unint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return outlined consume of DisplayList.Content.Value(v6);
          }
          goto LABEL_7;
        case 1uLL:
          unint64_t v10 = *(void *)(a1 + 8) + 8;
          if (v8 < v10) {
            goto LABEL_47;
          }
          goto LABEL_6;
        case 2uLL:
          unint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return outlined consume of DisplayList.Content.Value(v6);
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_53;
          }
          unint64_t v10 = *(void *)(a1 + 8) + result;
          if (v8 < v10) {
            goto LABEL_47;
          }
LABEL_6:
          *(void *)(a1 + 8) = v10;
          break;
        case 5uLL:
          unint64_t v10 = *(void *)(a1 + 8) + 4;
          if (v8 < v10) {
            goto LABEL_47;
          }
          goto LABEL_6;
        default:
          goto LABEL_47;
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2) {
      goto LABEL_47;
    }
    uint64_t v12 = *(void **)(a1 + 40);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    }
    unint64_t v14 = v12[2];
    unint64_t v13 = v12[3];
    if (v14 >= v13 >> 1) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
    }
    v12[2] = v14 + 1;
    v12[v14 + 4] = v8;
    *(void *)(a1 + 40) = v12;
    uint64_t v15 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return outlined consume of DisplayList.Content.Value(v6);
    }
    if (v15 < 0) {
      break;
    }
    unint64_t v16 = *(void *)(a1 + 8) + v15;
    if (v8 < v16) {
      goto LABEL_47;
    }
    *(void *)(a1 + 16) = v16;
    DisplayList.Content.Value.init(from:)((id *)a1, &v28);
    unint64_t v17 = *(void **)(a1 + 40);
    if (!v17[2]) {
      goto LABEL_51;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v18 = v17[2];
      if (!v18) {
        goto LABEL_46;
      }
    }
    else
    {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
      uint64_t v18 = v17[2];
      if (!v18)
      {
LABEL_46:
        __break(1u);
LABEL_47:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return outlined consume of DisplayList.Content.Value(v6);
      }
    }
    uint64_t v19 = v18 - 1;
    uint64_t v20 = v17[v19 + 4];
    v17[2] = v19;
    *(void *)(a1 + 40) = v17;
    *(void *)(a1 + 16) = v20;
    unint64_t v21 = v28;
    unint64_t result = outlined consume of DisplayList.Content.Value(v6);
    unint64_t v6 = v21;
LABEL_7:
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v8 = *(void *)(a1 + 16);
    if (v7 >= v8) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  __break(1u);
  unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
  uint64_t v27 = v26[2];
  if (!v27)
  {
    __break(1u);
    JUMPOUT(0x245D6A498);
  }
  uint64_t v24 = v27 - 1;
  uint64_t v25 = v26[v24 + 4];
  void v26[2] = v24;
  *(void *)(a1 + 40) = v26;
  *(void *)(a1 + 16) = v25;
  return outlined consume of DisplayList.Content.Value(v6);
}

unint64_t closure #2 in DisplayList.Item.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v4 = (void *)result;
  unint64_t v6 = *(void *)(result + 8);
  unint64_t v7 = *(void *)(result + 16);
  if (v6 >= v7)
  {
    uint64_t v8 = 0;
    unsigned int v38 = 0;
    __int16 v9 = 0;
    char v10 = 0;
    unint64_t v11 = (void *)MEMORY[0x263F8EE78];
    int v39 = 19;
LABEL_4:
    v4[3] = 0;
    unint64_t v12 = v38 | ((unint64_t)v39 << 32) | 0x4000000000000000;
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 16) = v11;
    *(unsigned char *)(a2 + 26) = v10;
    *(_WORD *)(a2 + 24) = v9;
    return result;
  }
  uint64_t v8 = 0;
  unsigned int v38 = 0;
  __int16 v9 = 0;
  char v10 = 0;
  unint64_t v11 = (void *)MEMORY[0x263F8EE78];
  int v39 = 19;
  while (1)
  {
    unint64_t v14 = v4[3];
    if (v14)
    {
      unint64_t v15 = v4[4];
      if (v6 < v15) {
        goto LABEL_14;
      }
      if (v15 < v6) {
        goto LABEL_47;
      }
      v4[3] = 0;
    }
    unint64_t result = ProtobufDecoder.decodeVarint()();
    if (v3) {
      goto LABEL_48;
    }
    unint64_t v14 = result;
    if (result < 8) {
      goto LABEL_47;
    }
LABEL_14:
    if (v14 >> 3 == 2) {
      break;
    }
    if (v14 >> 3 == 1)
    {
      if ((v14 & 7) != 2) {
        goto LABEL_47;
      }
      ProtobufDecoder.beginMessage()();
      if (v3) {
        goto LABEL_48;
      }
      DisplayList.Effect.init(from:)(v4, (uint64_t)&v35);
      uint64_t v3 = 0;
      unint64_t v16 = (void *)v4[5];
      if (!v16[2]) {
        goto LABEL_54;
      }
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v17 = v16[2];
        if (!v17) {
          goto LABEL_55;
        }
      }
      else
      {
        unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
        uint64_t v17 = v16[2];
        if (!v17) {
          goto LABEL_55;
        }
      }
      uint64_t v18 = v17 - 1;
      uint64_t v19 = v16[v18 + 4];
      v16[2] = v18;
      unint64_t result = outlined consume of DisplayList.Effect(v8, v38, v39);
      v4[5] = v16;
      _OWORD v4[2] = v19;
      uint64_t v8 = (uint64_t)v35;
      unsigned int v38 = v36;
      int v39 = v37;
    }
    else
    {
      switch(v14 & 7)
      {
        case 0uLL:
          unint64_t result = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_48;
          }
          break;
        case 1uLL:
          unint64_t v13 = v4[1] + 8;
          if (v7 < v13) {
            goto LABEL_47;
          }
          goto LABEL_6;
        case 2uLL:
          unint64_t result = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_48;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_57;
          }
          unint64_t v13 = v4[1] + result;
          if (v7 < v13) {
            goto LABEL_47;
          }
LABEL_6:
          v4[1] = v13;
          break;
        case 5uLL:
          unint64_t v13 = v4[1] + 4;
          if (v7 < v13) {
            goto LABEL_47;
          }
          goto LABEL_6;
        default:
          goto LABEL_47;
      }
    }
LABEL_7:
    unint64_t v6 = v4[1];
    unint64_t v7 = v4[2];
    if (v6 >= v7) {
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRelease();
  if ((v14 & 7) != 2) {
    goto LABEL_50;
  }
  unint64_t v11 = (void *)v4[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
  }
  unint64_t v21 = v11[2];
  unint64_t v20 = v11[3];
  if (v21 >= v20 >> 1) {
    unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v11);
  }
  uint64_t v11[2] = v21 + 1;
  v11[v21 + 4] = v7;
  v4[5] = v11;
  uint64_t v22 = ProtobufDecoder.decodeVarint()();
  if (v3) {
    return outlined consume of DisplayList.Effect(v8, v38, v39);
  }
  if ((v22 & 0x8000000000000000) == 0)
  {
    unint64_t v23 = v4[1] + v22;
    if (v7 < v23)
    {
LABEL_50:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
    }
    else
    {
      _OWORD v4[2] = v23;
      DisplayList.init(from:)(&v35, v4);
      unint64_t v11 = (void *)v4[5];
      if (!v11[2]) {
        goto LABEL_56;
      }
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v24 = v11[2];
        if (!v24) {
          goto LABEL_46;
        }
        goto LABEL_33;
      }
      unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
      unint64_t v11 = (void *)result;
      uint64_t v24 = *(void *)(result + 16);
      if (v24)
      {
LABEL_33:
        uint64_t v25 = v24 - 1;
        uint64_t v26 = v11[v25 + 4];
        uint64_t v11[2] = v25;
        v4[5] = v11;
        _OWORD v4[2] = v26;
        unint64_t v11 = v35;
        __int16 v9 = v36;
        char v10 = BYTE2(v36);
        goto LABEL_7;
      }
LABEL_46:
      __break(1u);
LABEL_47:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
LABEL_48:
      swift_bridgeObjectRelease();
    }
    return outlined consume of DisplayList.Effect(v8, v38, v39);
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  __break(1u);
  unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
  uint64_t v32 = v31[2];
  if (v32)
  {
    uint64_t v27 = v32 - 1;
    uint64_t v28 = v31[v27 + 4];
    v31[2] = v27;
    swift_bridgeObjectRelease();
    unint64_t result = outlined consume of DisplayList.Effect(v8, v38, v39);
    v4[5] = v31;
    _OWORD v4[2] = v28;
  }
  else
  {
    __break(1u);
    __break(1u);
    uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew()(v11);
    uint64_t v34 = v33[2];
    if (!v34)
    {
      __break(1u);
      JUMPOUT(0x245D6A980);
    }
    uint64_t v29 = v34 - 1;
    uint64_t v30 = v33[v29 + 4];
    _OWORD v33[2] = v29;
    unint64_t result = outlined consume of DisplayList.Effect(v8, v38, v39);
    v4[5] = v33;
    _OWORD v4[2] = v30;
  }
  return result;
}

unint64_t closure #3 in DisplayList.Item.init(from:)@<X0>(unint64_t result@<X0>, void *a2@<X8>)
{
  unsigned int v36 = a2;
  uint64_t v4 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  unint64_t v7 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    if (v5 >= v6)
    {
      v4[3] = 0;
      uint64_t v25 = v36;
      *unsigned int v36 = v7;
      *(_OWORD *)(v25 + 1) = xmmword_24619B530;
      *((unsigned char *)v25 + 26) = 0;
      *((_WORD *)v25 + 12) = 0;
      return result;
    }
    unint64_t result = v4[3];
    if (result)
    {
      unint64_t v8 = v4[4];
      if (v5 < v8) {
        goto LABEL_11;
      }
      if (v8 < v5) {
        goto LABEL_39;
      }
      v4[3] = 0;
    }
    unint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_bridgeObjectRelease();
    }
    if (result < 8)
    {
LABEL_39:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
LABEL_11:
    if ((result & 0xFFFFFFFFFFFFFFF8) != 8)
    {
      switch(result & 7)
      {
        case 0uLL:
          unint64_t result = ProtobufDecoder.decodeVarint()();
          if (!v2) {
            goto LABEL_3;
          }
          return swift_bridgeObjectRelease();
        case 1uLL:
          unint64_t v24 = v4[1] + 8;
          goto LABEL_34;
        case 2uLL:
          unint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return swift_bridgeObjectRelease();
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_45;
          }
          unint64_t v24 = v4[1] + result;
LABEL_34:
          if (v6 < v24) {
            goto LABEL_39;
          }
          v4[1] = v24;
          break;
        case 5uLL:
          unint64_t v24 = v4[1] + 4;
          goto LABEL_34;
        default:
          goto LABEL_39;
      }
      goto LABEL_3;
    }
    if ((result & 7) != 2) {
      goto LABEL_39;
    }
    __int16 v9 = (void *)v4[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      __int16 v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    }
    unint64_t v11 = v9[2];
    unint64_t v10 = v9[3];
    if (v11 >= v10 >> 1) {
      __int16 v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v9);
    }
    uint64_t v9[2] = v11 + 1;
    v9[v11 + 4] = v6;
    v4[5] = v9;
    uint64_t v12 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_bridgeObjectRelease();
    }
    if (v12 < 0) {
      break;
    }
    unint64_t v13 = v4[1] + v12;
    if (v6 < v13) {
      goto LABEL_39;
    }
    _OWORD v4[2] = v13;
    closure #1 in closure #3 in DisplayList.Item.init(from:)((unint64_t)v4, &v31);
    unint64_t v14 = (void *)v4[5];
    if (!v14[2]) {
      goto LABEL_43;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v15 = v14[2];
      if (!v15) {
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      uint64_t v15 = v14[2];
      if (!v15) {
        goto LABEL_44;
      }
    }
    uint64_t v16 = v15 - 1;
    uint64_t v17 = v14[v16 + 4];
    v14[2] = v16;
    v4[5] = v14;
    _OWORD v4[2] = v17;
    long long v30 = v31;
    int v18 = v32;
    uint64_t v19 = v33;
    __int16 v20 = v34;
    char v21 = v35;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      unint64_t v7 = (void *)result;
    }
    unint64_t v3 = v7[2];
    unint64_t v22 = v7[3];
    if (v3 >= v22 >> 1)
    {
      unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v3 + 1, 1, v7);
      unint64_t v7 = (void *)result;
    }
    _OWORD v7[2] = v3 + 1;
    unint64_t v23 = &v7[5 * v3];
    *((_OWORD *)v23 + 2) = v30;
    *((_DWORD *)v23 + 12) = v18;
    v23[7] = v19;
    *((_WORD *)v23 + 32) = v20;
    *((unsigned char *)v23 + 66) = v21;
LABEL_3:
    unint64_t v5 = v4[1];
    unint64_t v6 = v4[2];
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  __break(1u);
  uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v3);
  uint64_t v29 = v28[2];
  if (!v29)
  {
    __break(1u);
    JUMPOUT(0x245D6AD34);
  }
  uint64_t v26 = v29 - 1;
  uint64_t v27 = v28[v26 + 4];
  _OWORD v28[2] = v26;
  unint64_t result = swift_bridgeObjectRelease();
  v4[5] = v28;
  _OWORD v4[2] = v27;
  return result;
}

unint64_t closure #1 in closure #3 in DisplayList.Item.init(from:)@<X0>(unint64_t result@<X0>, _OWORD *a2@<X8>)
{
  unsigned __int8 v37 = a2;
  unint64_t v3 = (void *)result;
  unint64_t v4 = *(void *)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  if (v4 >= v5)
  {
    __int16 v6 = 0;
    char v7 = 0;
    int v8 = 0;
    long long v34 = 0u;
    unint64_t v9 = MEMORY[0x263F8EE78];
LABEL_4:
    v3[3] = 0;
    unint64_t v10 = v37;
    *unsigned __int8 v37 = v34;
    *((_DWORD *)v10 + 4) = v8;
    *((void *)v10 + 3) = v9;
    *((_WORD *)v10 + 16) = v6;
    *((unsigned char *)v10 + 34) = v7;
    return result;
  }
  __int16 v6 = 0;
  char v7 = 0;
  int v8 = 0;
  long long v34 = 0u;
  unint64_t v9 = MEMORY[0x263F8EE78];
  while (1)
  {
    unint64_t v12 = v3[3];
    if (v12)
    {
      unint64_t v13 = v3[4];
      if (v4 < v13) {
        goto LABEL_14;
      }
      if (v13 < v4) {
        goto LABEL_53;
      }
      v3[3] = 0;
    }
    unint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_bridgeObjectRelease();
    }
    unint64_t v12 = result;
    if (result < 8) {
      goto LABEL_53;
    }
LABEL_14:
    if (v12 >> 3 != 2) {
      break;
    }
    swift_bridgeObjectRelease();
    if ((v12 & 7) != 2) {
      goto LABEL_56;
    }
    unint64_t v9 = v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (void *)v9);
    }
    unint64_t v22 = *(void *)(v9 + 16);
    unint64_t v21 = *(void *)(v9 + 24);
    unint64_t v12 = v22 + 1;
    if (v22 >= v21 >> 1) {
      unint64_t v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, (void *)v9);
    }
    *(void *)(v9 + 16) = v12;
    *(void *)(v9 + 8 * v22 + 32) = v5;
    v3[5] = v9;
    unint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if ((result & 0x8000000000000000) != 0) {
      goto LABEL_61;
    }
    unint64_t v23 = v3[1] + result;
    if (v5 < v23)
    {
LABEL_56:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
    v3[2] = v23;
    DisplayList.init(from:)(&v35, v3);
    unint64_t v9 = v3[5];
    if (!*(void *)(v9 + 16)) {
      goto LABEL_63;
    }
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v24 = *(void *)(v9 + 16);
      if (!v24) {
        goto LABEL_52;
      }
    }
    else
    {
      unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v9);
      unint64_t v9 = result;
      uint64_t v24 = *(void *)(result + 16);
      if (!v24)
      {
LABEL_52:
        __break(1u);
LABEL_53:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return swift_bridgeObjectRelease();
      }
    }
    uint64_t v25 = v24 - 1;
    uint64_t v26 = *(void *)(v9 + 8 * v25 + 32);
    *(void *)(v9 + 16) = v25;
    v3[5] = v9;
    v3[2] = v26;
    unint64_t v9 = v35;
    __int16 v6 = WORD4(v35);
    char v7 = BYTE10(v35);
LABEL_7:
    unint64_t v4 = v3[1];
    unint64_t v5 = v3[2];
    if (v4 >= v5) {
      goto LABEL_4;
    }
  }
  if (v12 >> 3 != 1)
  {
    switch(v12 & 7)
    {
      case 0uLL:
        unint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_bridgeObjectRelease();
        }
        goto LABEL_7;
      case 1uLL:
        unint64_t v11 = v3[1] + 8;
        if (v5 < v11) {
          goto LABEL_53;
        }
        goto LABEL_6;
      case 2uLL:
        unint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_bridgeObjectRelease();
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_65;
        }
        unint64_t v11 = v3[1] + result;
        if (v5 < v11) {
          goto LABEL_53;
        }
LABEL_6:
        v3[1] = v11;
        break;
      case 5uLL:
        unint64_t v11 = v3[1] + 4;
        if (v5 < v11) {
          goto LABEL_53;
        }
        goto LABEL_6;
      default:
        goto LABEL_53;
    }
    goto LABEL_7;
  }
  if ((v12 & 7) != 2) {
    goto LABEL_53;
  }
  unint64_t v12 = v3[5];
  unint64_t v14 = (void *)v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v12 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1, (void *)v12);
  }
  unint64_t v9 = *(void *)(v12 + 16);
  unint64_t v15 = *(void *)(v12 + 24);
  if (v9 >= v15 >> 1) {
    unint64_t v12 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v9 + 1, 1, (void *)v12);
  }
  *(void *)(v12 + 16) = v9 + 1;
  *(void *)(v12 + 8 * v9 + 32) = v5;
  v3[5] = v12;
  uint64_t v16 = ProtobufDecoder.decodeVarint()();
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  if ((v16 & 0x8000000000000000) == 0)
  {
    unint64_t v9 = (unint64_t)v14;
    unint64_t v17 = v3[1] + v16;
    if (v5 < v17) {
      goto LABEL_53;
    }
    v3[2] = v17;
    StrongHash.init(from:)((unint64_t)v3, &v35);
    unint64_t v12 = v3[5];
    if (!*(void *)(v12 + 16)) {
      goto LABEL_62;
    }
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v18 = *(void *)(v12 + 16);
      if (!v18) {
        goto LABEL_64;
      }
    }
    else
    {
      unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v12);
      unint64_t v12 = result;
      uint64_t v18 = *(void *)(result + 16);
      if (!v18) {
        goto LABEL_64;
      }
    }
    uint64_t v19 = v18 - 1;
    uint64_t v20 = *(void *)(v12 + 8 * v19 + 32);
    *(void *)(v12 + 16) = v19;
    v3[5] = v12;
    v3[2] = v20;
    long long v34 = v35;
    int v8 = v36;
    goto LABEL_7;
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  __break(1u);
  long long v31 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v12);
  uint64_t v32 = v31[2];
  if (v32)
  {
    uint64_t v27 = v32 - 1;
    uint64_t v28 = v31[v27 + 4];
    v31[2] = v27;
    unint64_t result = swift_bridgeObjectRelease();
    v3[5] = v31;
    v3[2] = v28;
  }
  else
  {
    __break(1u);
    __break(1u);
    unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v9);
    uint64_t v33 = *(void *)(result + 16);
    if (!v33)
    {
      __break(1u);
      JUMPOUT(0x245D6B270);
    }
    uint64_t v29 = v33 - 1;
    uint64_t v30 = *(void *)(result + 8 * v29 + 32);
    *(void *)(result + 16) = v29;
    v3[5] = result;
    v3[2] = v30;
  }
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DisplayList.Item(uint64_t a1)
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance DisplayList.Item@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DisplayList.Item.init(from:)(a1, a2);
}

void DisplayList.Content.Value.encode(to:)(long long *a1)
{
  unint64_t v7 = *v1;
  switch(*v1 >> 60)
  {
    case 1uLL:
      float v10 = *(float *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      float v11 = *(float *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x14);
      float v12 = *(float *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      float v13 = *(float *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x1C);
      ProtobufEncoder.encodeVarint(_:)(0xAuLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(v10, v11, v12, v13);
      return;
    case 2uLL:
      float v14 = *(float *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      float v15 = *(float *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x14);
      float v16 = *(float *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      float v17 = *(float *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x1C);
      uint64_t v18 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      ProtobufEncoder.encodeVarint(_:)(0x62uLL);
      uint64_t v19 = *((void *)a1 + 1);
      uint64_t v20 = (void *)*((void *)a1 + 3);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
      }
      unint64_t v22 = v20[2];
      unint64_t v21 = v20[3];
      if (v22 >= v21 >> 1) {
        uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v20);
      }
      void v20[2] = v22 + 1;
      v20[v22 + 4] = v19;
      *((void *)a1 + 3) = v20;
      if (__OFADD__(v19, 1))
      {
        __break(1u);
        goto LABEL_92;
      }
      *((void *)a1 + 1) = v19 + 1;
      closure #1 in DisplayList.Content.Value.encode(to:)(a1, v18, v14, v15, v16, v17);
      if (!v2) {
        goto LABEL_83;
      }
      return;
    case 3uLL:
      long long v23 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
      v92[3] = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
      v92[4] = v23;
      v92[5] = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
      int v93 = *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
      long long v24 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      v92[0] = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      v92[1] = v24;
      v92[2] = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      outlined retain of GraphicsImage((uint64_t)v92);
      specialized ProtobufEncoder.messageField<A>(_:_:)(2);
      outlined release of GraphicsImage((uint64_t)v92);
      return;
    case 4uLL:
      long long v25 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      v94[0] = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      v94[1] = v25;
      char v95 = *(unsigned char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      uint64_t v18 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
      LOWORD(v19) = *(unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
      LODWORD(v22) = *(unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x41);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v94, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      swift_retain();
      ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
      uint64_t v3 = *((void *)a1 + 1);
      uint64_t v20 = (void *)*((void *)a1 + 3);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_92:
      }
        uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
      unint64_t v4 = v20[2];
      unint64_t v26 = v20[3];
      unint64_t v7 = v4 + 1;
      if (v4 >= v26 >> 1) {
        uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v4 + 1, 1, v20);
      }
      void v20[2] = v7;
      v20[v4 + 4] = v3;
      *((void *)a1 + 3) = v20;
      if (__OFADD__(v3, 1))
      {
        __break(1u);
        goto LABEL_94;
      }
      *((void *)a1 + 1) = v3 + 1;
      if (v22) {
        __int16 v27 = 256;
      }
      else {
        __int16 v27 = 0;
      }
      closure #2 in DisplayList.Content.Value.encode(to:)((uint64_t)a1, (uint64_t)v94, v18, v27 | v19);
      if (!v2) {
        ProtobufEncoder.endLengthDelimited()();
      }
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v94, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      goto LABEL_89;
    case 5uLL:
      long long v28 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      v98[0] = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      v98[1] = v28;
      char v99 = *(unsigned char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      long long v29 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x48);
      long long v96 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
      v97[0] = v29;
      *(_OWORD *)((char *)v97 + 13) = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x55);
      outlined init with take of Path.Storage((uint64_t)v98, (uint64_t)v100);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v100, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      ProtobufEncoder.encodeVarint(_:)(0x2AuLL);
      unint64_t v7 = *((void *)a1 + 1);
      uint64_t v20 = (void *)*((void *)a1 + 3);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_94:
      }
        uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
      unint64_t v31 = v20[2];
      unint64_t v30 = v20[3];
      if (v31 >= v30 >> 1) {
        uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v20);
      }
      void v20[2] = v31 + 1;
      v20[v31 + 4] = v7;
      *((void *)a1 + 3) = v20;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
      }
      else
      {
        *((void *)a1 + 1) = v7 + 1;
        ProtobufEncoder.encodeVarint(_:)(0xAuLL);
        unint64_t v7 = *((void *)a1 + 1);
        uint64_t v20 = (void *)*((void *)a1 + 3);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_27;
        }
      }
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
LABEL_27:
      unint64_t v33 = v20[2];
      unint64_t v32 = v20[3];
      if (v33 >= v32 >> 1) {
        uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v20);
      }
      void v20[2] = v33 + 1;
      v20[v33 + 4] = v7;
      *((void *)a1 + 3) = v20;
      if (!__OFADD__(v7, 1))
      {
        *((void *)a1 + 1) = v7 + 1;
        Path.encode(to:)();
        if (!v2)
        {
          ProtobufEncoder.endLengthDelimited()();
          specialized ProtobufEncoder.messageField<A>(_:_:)(2);
          ProtobufEncoder.endLengthDelimited()();
        }
        _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v98, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        return;
      }
      __break(1u);
LABEL_98:
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
LABEL_34:
      unint64_t v39 = v20[2];
      unint64_t v38 = v20[3];
      if (v39 >= v38 >> 1) {
        uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v20);
      }
      void v20[2] = v39 + 1;
      v20[v39 + 4] = v7;
      *((void *)a1 + 3) = v20;
      unint64_t v40 = v7 + 1;
      if (!__OFADD__(v7, 1)) {
        goto LABEL_74;
      }
      __break(1u);
LABEL_39:
      outlined init with copy of AnyTrackedValue((v7 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)v87);
      uint64_t v41 = v88;
      uint64_t v42 = v89;
      unint64_t v43 = __swift_project_boxed_opaque_existential_1(v87, v88);
      uint64_t v85 = v41;
      uint64_t v86 = *(void *)(v42 + 8);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v84);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v41 - 8) + 16))(boxed_opaque_existential_1, v43, v41);
      ProtobufEncoder.encodeVarint(_:)(0x52uLL);
      unint64_t v7 = *((void *)a1 + 1);
      uint64_t v45 = (void *)*((void *)a1 + 3);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45);
      }
      unint64_t v47 = v45[2];
      unint64_t v46 = v45[3];
      if (v47 >= v46 >> 1) {
        uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v46 > 1), v47 + 1, 1, v45);
      }
      _OWORD v45[2] = v47 + 1;
      v45[v47 + 4] = v7;
      *((void *)a1 + 3) = v45;
      unint64_t v40 = v7 + 1;
      if (!__OFADD__(v7, 1)) {
        goto LABEL_74;
      }
      __break(1u);
LABEL_46:
      uint64_t v48 = v7 & 0xFFFFFFFFFFFFFFFLL;
      uint64_t v49 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v7 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      double v5 = *(double *)(v48 + 40);
      double v6 = *(double *)(v48 + 48);
      swift_retain();
      swift_retain();
      ProtobufEncoder.encodeVarint(_:)(0x22uLL);
      uint64_t v50 = *((void *)a1 + 1);
      unint64_t v51 = (void *)*((void *)a1 + 3);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
      }
      unint64_t v53 = v51[2];
      unint64_t v52 = v51[3];
      uint64_t v54 = v53 + 1;
      if (v53 >= v52 >> 1)
      {
        unint64_t v101 = v53 + 1;
        uint64_t v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v52 > 1), v53 + 1, 1, v51);
        uint64_t v54 = v101;
        unint64_t v51 = v76;
      }
      v51[2] = v54;
      v51[v53 + 4] = v50;
      *((void *)a1 + 3) = v51;
      if (__OFADD__(v50, 1))
      {
        __break(1u);
      }
      else
      {
        *((void *)a1 + 1) = v50 + 1;
        swift_retain();
        ProtobufEncoder.encodeVarint(_:)(0xAuLL);
        uint64_t v50 = *((void *)a1 + 1);
        unint64_t v51 = (void *)*((void *)a1 + 3);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_52;
        }
      }
      unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
LABEL_52:
      unint64_t v56 = v51[2];
      unint64_t v55 = v51[3];
      uint64_t v57 = v56 + 1;
      if (v56 >= v55 >> 1)
      {
        unint64_t v101 = v56 + 1;
        double v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v55 > 1), v56 + 1, 1, v51);
        uint64_t v57 = v101;
        unint64_t v51 = v77;
      }
      v51[2] = v57;
      v51[v56 + 4] = v50;
      *((void *)a1 + 3) = v51;
      if (!__OFADD__(v50, 1))
      {
        *((void *)a1 + 1) = v50 + 1;
        CodableResolvedStyledText.encode(to:)(a1, v49);
        if (v2)
        {
          swift_release();
          swift_release_n();
          return;
        }
        ProtobufEncoder.endLengthDelimited()();
        swift_release();
        ProtobufEncoder.encodeVarint(_:)(0x12uLL);
        unint64_t v70 = *((void *)a1 + 1);
        unint64_t v51 = (void *)*((void *)a1 + 3);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_85;
        }
        goto LABEL_110;
      }
      __break(1u);
LABEL_102:
      unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
LABEL_58:
      unint64_t v60 = v51[2];
      unint64_t v59 = v51[3];
      unint64_t v61 = v60 + 1;
      if (v60 >= v59 >> 1)
      {
        uint64_t v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v59 > 1), v60 + 1, 1, v51);
        unint64_t v61 = v60 + 1;
        unint64_t v51 = v78;
      }
      v51[2] = v61;
      v51[v60 + 4] = v50;
      *((void *)a1 + 3) = v51;
      if (!__OFADD__(v50, 1))
      {
        *((void *)a1 + 1) = v50 + 1;
        LOBYTE(v87[0]) = v7;
        closure #5 in DisplayList.Content.Value.encode(to:)((uint64_t)a1, v5, v6, v101, v82 | (v81 << 16), v4, v7 | (unint64_t)(v3 << 32), v83);
        if (v2) {
          return;
        }
        goto LABEL_83;
      }
      __break(1u);
LABEL_104:
      unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
LABEL_64:
      unint64_t v63 = v51[2];
      unint64_t v62 = v51[3];
      unint64_t v64 = v63 + 1;
      if (v63 >= v62 >> 1)
      {
        uint64_t v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v62 > 1), v63 + 1, 1, v51);
        unint64_t v64 = v63 + 1;
        unint64_t v51 = v79;
      }
      v51[2] = v64;
      v51[v63 + 4] = v7;
      *((void *)a1 + 3) = v51;
      if (!__OFADD__(v7, 1))
      {
        *((void *)a1 + 1) = v7 + 1;
        LOBYTE(v87[0]) = v4;
        closure #6 in DisplayList.Content.Value.encode(to:)((uint64_t)a1, v5, v6, v49, v60, v4 | (unint64_t)(v83 << 32), v101);
        if (!v2) {
          ProtobufEncoder.endLengthDelimited()();
        }
        swift_unknownObjectRelease();
        return;
      }
      __break(1u);
LABEL_106:
      unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
LABEL_71:
      unint64_t v70 = v51[2];
      unint64_t v69 = v51[3];
      if (v70 >= v69 >> 1) {
        unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v69 > 1), v70 + 1, 1, v51);
      }
      v51[2] = v70 + 1;
      v51[v70 + 4] = v7;
      *((void *)a1 + 3) = v51;
      unint64_t v40 = v7 + 1;
      if (!__OFADD__(v7, 1))
      {
LABEL_74:
        *((void *)a1 + 1) = v40;
        CodableViewFactory.encode(to:)(a1);
        if (!v2) {
          ProtobufEncoder.endLengthDelimited()();
        }
        outlined destroy of CodableViewFactory((uint64_t)v84);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
        return;
      }
      __break(1u);
LABEL_108:
      unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
LABEL_78:
      unint64_t v72 = v51[2];
      unint64_t v71 = v51[3];
      if (v72 >= v71 >> 1) {
        unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v71 > 1), v72 + 1, 1, v51);
      }
      v51[2] = v72 + 1;
      v51[v72 + 4] = v70;
      *((void *)a1 + 3) = v51;
      if (!__OFADD__(v70, 1))
      {
        *((void *)a1 + 1) = v70 + 1;
        if (v7)
        {
          ProtobufEncoder.encodeVarint(_:)(8uLL);
          ProtobufEncoder.encodeVarint(_:)(v7);
        }
LABEL_83:
        ProtobufEncoder.endLengthDelimited()();
        return;
      }
      __break(1u);
LABEL_110:
      unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
LABEL_85:
      unint64_t v74 = v51[2];
      unint64_t v73 = v51[3];
      uint64_t v75 = v74 + 1;
      if (v74 >= v73 >> 1)
      {
        unint64_t v101 = v74 + 1;
        uint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v73 > 1), v74 + 1, 1, v51);
        uint64_t v75 = v101;
        unint64_t v51 = v80;
      }
      v51[2] = v75;
      v51[v74 + 4] = v70;
      *((void *)a1 + 3) = v51;
      if (__OFADD__(v70, 1))
      {
        __break(1u);
        JUMPOUT(0x245D6BFF8);
      }
      *((void *)a1 + 1) = v70 + 1;
      CGSize.encode(to:)((double *)a1, v5, v6);
      ProtobufEncoder.endLengthDelimited()();
      ProtobufEncoder.endLengthDelimited()();
      swift_release();
LABEL_89:
      swift_release();
      return;
    case 6uLL:
      outlined init with copy of AnyTrackedValue((v7 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)v87);
      uint64_t v34 = v88;
      uint64_t v35 = v89;
      int v36 = __swift_project_boxed_opaque_existential_1(v87, v88);
      uint64_t v85 = v34;
      uint64_t v86 = *(void *)(v35 + 8);
      unsigned __int8 v37 = __swift_allocate_boxed_opaque_existential_1(v84);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v34 - 8) + 16))(v37, v36, v34);
      ProtobufEncoder.encodeVarint(_:)(0x4AuLL);
      unint64_t v7 = *((void *)a1 + 1);
      uint64_t v20 = (void *)*((void *)a1 + 3);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_34;
      }
      goto LABEL_98;
    case 7uLL:
      goto LABEL_39;
    case 8uLL:
      goto LABEL_46;
    case 9uLL:
      uint64_t v58 = v7 & 0xFFFFFFFFFFFFFFFLL;
      unint64_t v101 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      int v81 = *(unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
      int v82 = *(unsigned __int16 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      double v5 = *(double *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      double v6 = *(double *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
      LOBYTE(v4) = *(unsigned char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      uint64_t v49 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x34);
      unint64_t v7 = *(unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
      uint64_t v3 = *(unsigned int *)(v58 + 60);
      LODWORD(v83) = *(unsigned __int8 *)(v58 + 64);
      ProtobufEncoder.encodeVarint(_:)(0x32uLL);
      uint64_t v50 = *((void *)a1 + 1);
      unint64_t v51 = (void *)*((void *)a1 + 3);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_58;
      }
      goto LABEL_102;
    case 0xAuLL:
      uint64_t v49 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      double v5 = *(double *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      double v6 = *(double *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      LOBYTE(v60) = *(unsigned char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
      LOBYTE(v4) = *(unsigned char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      uint64_t v83 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x34);
      LODWORD(v101) = *(unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
      swift_unknownObjectRetain();
      ProtobufEncoder.encodeVarint(_:)(0x6AuLL);
      unint64_t v7 = *((void *)a1 + 1);
      unint64_t v51 = (void *)*((void *)a1 + 3);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_64;
      }
      goto LABEL_104;
    case 0xBuLL:
      outlined init with copy of AnyTrackedValue((v7 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)v87);
      uint64_t v65 = v88;
      uint64_t v66 = v89;
      int v67 = __swift_project_boxed_opaque_existential_1(v87, v88);
      uint64_t v85 = v65;
      uint64_t v86 = *(void *)(v66 + 8);
      int v68 = __swift_allocate_boxed_opaque_existential_1(v84);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v65 - 8) + 16))(v68, v67, v65);
      ProtobufEncoder.encodeVarint(_:)(0x3AuLL);
      unint64_t v7 = *((void *)a1 + 1);
      unint64_t v51 = (void *)*((void *)a1 + 3);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_71;
      }
      goto LABEL_106;
    case 0xCuLL:
      ProtobufEncoder.encodeVarint(_:)(0x42uLL);
      unint64_t v70 = *((void *)a1 + 1);
      unint64_t v51 = (void *)*((void *)a1 + 3);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_78;
      }
      goto LABEL_108;
    default:
      long long v9 = *(_OWORD *)(v7 + 32);
      long long v90 = *(_OWORD *)(v7 + 16);
      long long v91 = v9;
      specialized ProtobufEncoder.messageField<A>(_:_:)(11);
      return;
  }
}

void closure #1 in DisplayList.Content.Value.encode(to:)(void *a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v7 = v6;
  if (a3 == 0.0 && a4 == 0.0 && (a5 == 0.0 ? (BOOL v14 = a6 == 1.0) : (BOOL v14 = 0), v14)
    || (ProtobufEncoder.encodeVarint(_:)(0xAuLL), specialized ProtobufEncoder.encodeMessage<A>(_:)(a3, a4, a5, a6), !v6))
  {
    uint64_t v15 = *(void *)(a2 + 16);
    if (v15)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = a2 + 80;
      while (1)
      {
        float v17 = *(void **)(v16 - 48);
        uint64_t v18 = *(void *)(v16 - 40);
        uint64_t v19 = *(void **)(v16 - 32);
        uint64_t v20 = *(void *)(v16 - 24);
        uint64_t v21 = *(void *)(v16 - 16);
        uint64_t v22 = *(void *)(v16 - 8);
        uint64_t v24 = *(void *)v16;
        uint64_t v23 = *(void *)(v16 + 8);
        uint64_t v26 = *(void *)(v16 + 16);
        uint64_t v25 = *(void *)(v16 + 24);
        uint64_t v27 = *(void *)(v16 + 32);
        uint64_t v28 = *(void *)(v16 + 40);
        uint64_t v29 = *(void *)(v16 + 48);
        uint64_t v30 = *(void *)(v16 + 56);
        int v31 = *(_DWORD *)(v16 + 64);
        int64_t v32 = a1[1];
        int64_t v33 = a1[2];
        char v55 = v20;
        int v53 = v18;
        id v54 = v19;
        uint64_t v51 = v27;
        unint64_t v52 = v17;
        uint64_t v49 = v29;
        uint64_t v50 = v28;
        uint64_t v48 = v30;
        int v47 = v31;
        uint64_t v45 = v7;
        uint64_t v46 = v21;
        uint64_t v44 = v26;
        if (v32 >= v33)
        {
          int64_t v40 = v32 + 1;
          if (__OFADD__(v32, 1)) {
            goto LABEL_28;
          }
          uint64_t v42 = *(void *)(v16 + 24);
          if (v33 < v40)
          {
            outlined copy of GraphicsFilter(v17, v18, v19, v20, v46, v22, v24, v23, v26, v25, v27, v28, v29, v30, v31, SBYTE2(v31));
            uint64_t v41 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v40);
          }
          else
          {
            a1[1] = v40;
            uint64_t v41 = (unsigned char *)(*a1 + v32);
            outlined copy of GraphicsFilter(v17, v18, v19, v20, v46, v22, v24, v23, v26, v25, v27, v28, v29, v30, v31, SBYTE2(v31));
          }
          *uint64_t v41 = 18;
          uint64_t v34 = v42;
        }
        else
        {
          *(unsigned char *)(*a1 + v32) = 18;
          a1[1] = v32 + 1;
          uint64_t v34 = v25;
          outlined copy of GraphicsFilter(v17, v18, v19, v20, v21, v22, v24, v23, v26, v25, v27, v28, v29, v30, v31, SBYTE2(v31));
        }
        uint64_t v43 = v22;
        uint64_t v35 = a1[1];
        int v36 = (void *)a1[3];
        uint64_t v37 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
        }
        unint64_t v39 = v36[2];
        unint64_t v38 = v36[3];
        if (v39 >= v38 >> 1) {
          int v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v36);
        }
        v36[2] = v39 + 1;
        v36[v39 + 4] = v35;
        a1[3] = v36;
        if (__OFADD__(v35, 1)) {
          break;
        }
        a1[1] = v35 + 1;
        GraphicsFilter.encode(to:)(a1);
        uint64_t v7 = v45;
        if (v45)
        {
          swift_bridgeObjectRelease();
          outlined consume of GraphicsFilter(v52, v53, v54, v55, v46, v43, v24, v23, v44, v37, v51, v50, v49, v48, v47, SBYTE2(v47));
          return;
        }
        v16 += 120;
        ProtobufEncoder.endLengthDelimited()();
        outlined consume of GraphicsFilter(v52, v53, v54, v55, v46, v43, v24, v23, v44, v37, v51, v50, v49, v48, v47, SBYTE2(v47));
        if (!--v15)
        {
          swift_bridgeObjectRelease();
          return;
        }
      }
      __break(1u);
LABEL_28:
      __break(1u);
    }
  }
}

void closure #2 in DisplayList.Content.Value.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  uint64_t v8 = *(void *)(a1 + 8);
  long long v9 = *(void **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  unint64_t v12 = v11 + 1;
  if (v11 >= v10 >> 1) {
    long long v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v9);
  }
  uint64_t v9[2] = v12;
  v9[v11 + 4] = v8;
  *(void *)(a1 + 24) = v9;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
LABEL_17:
    long long v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    goto LABEL_8;
  }
  *(void *)(a1 + 8) = v8 + 1;
  Path.encode(to:)();
  if (v4) {
    return;
  }
  ProtobufEncoder.endLengthDelimited()();
  swift_retain();
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  unint64_t v12 = *(void *)(a1 + 8);
  long long v9 = *(void **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_17;
  }
LABEL_8:
  unint64_t v14 = v9[2];
  unint64_t v13 = v9[3];
  if (v14 >= v13 >> 1) {
    long long v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v9);
  }
  uint64_t v9[2] = v14 + 1;
  v9[v14 + 4] = v12;
  *(void *)(a1 + 24) = v9;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 8) = v12 + 1;
    (*(void (**)(uint64_t))(*(void *)a3 + 152))(a1);
    if (v4)
    {
      swift_release();
    }
    else
    {
      ProtobufEncoder.endLengthDelimited()();
      swift_release();
      int v15 = a4 & 0x101;
      if (v15 != 256)
      {
        ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
        specialized ProtobufEncoder.encodeMessage<A>(_:)(v15);
      }
    }
  }
}

uint64_t closure #5 in DisplayList.Content.Value.encode(to:)(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  uint64_t result = specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  if (v8) {
    return result;
  }
  if (a2 == 0.0 && a3 == 0.0)
  {
LABEL_10:
    if (!a6 && (a7 & 1) != 0 && HIDWORD(a7) == 160 && a8 == 3) {
      return result;
    }
    ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
    a7 = *(void *)(a1 + 8);
    float v17 = *(void **)(a1 + 24);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  uint64_t v16 = *(void *)(a1 + 8);
  float v17 = *(void **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
  }
  unint64_t v18 = v17[2];
  unint64_t v19 = v17[3];
  unint64_t v20 = v18 + 1;
  if (v18 >= v19 >> 1)
  {
    unint64_t v26 = v18 + 1;
    uint64_t v23 = v17;
    unint64_t v24 = v17[2];
    uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v18 + 1, 1, v23);
    unint64_t v18 = v24;
    unint64_t v20 = v26;
    float v17 = v25;
  }
  v17[2] = v20;
  v17[v18 + 4] = v16;
  *(void *)(a1 + 24) = v17;
  if (!__OFADD__(v16, 1))
  {
    *(void *)(a1 + 8) = v16 + 1;
    CGPoint.encode(to:)((double *)a1, a2, a3);
    uint64_t result = ProtobufEncoder.endLengthDelimited()();
    goto LABEL_10;
  }
  __break(1u);
LABEL_21:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
  float v17 = (void *)result;
LABEL_15:
  unint64_t v22 = v17[2];
  unint64_t v21 = v17[3];
  if (v22 >= v21 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v17);
    float v17 = (void *)result;
  }
  v17[2] = v22 + 1;
  v17[v22 + 4] = a7;
  *(void *)(a1 + 24) = v17;
  if (__OFADD__(a7, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 8) = a7 + 1;
    RasterizationOptions.encode(to:)();
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

uint64_t closure #6 in DisplayList.Content.Value.encode(to:)(uint64_t a1, double a2, double a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  swift_unknownObjectRetain();
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  uint64_t result = swift_unknownObjectRelease();
  if (v7) {
    return result;
  }
  if (a2 == 0.0 && a3 == 0.0)
  {
LABEL_10:
    if (!a5 && (a6 & 1) != 0 && HIDWORD(a6) == 160 && a7 == 3) {
      return result;
    }
    ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
    a6 = *(void *)(a1 + 8);
    uint64_t v16 = *(void **)(a1 + 24);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v16 = *(void **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
  }
  unint64_t v17 = v16[2];
  unint64_t v18 = v16[3];
  unint64_t v19 = v17 + 1;
  if (v17 >= v18 >> 1)
  {
    unint64_t v25 = v17 + 1;
    unint64_t v22 = v16;
    unint64_t v23 = v16[2];
    unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v17 + 1, 1, v22);
    unint64_t v17 = v23;
    unint64_t v19 = v25;
    uint64_t v16 = v24;
  }
  v16[2] = v19;
  v16[v17 + 4] = v15;
  *(void *)(a1 + 24) = v16;
  if (!__OFADD__(v15, 1))
  {
    *(void *)(a1 + 8) = v15 + 1;
    CGPoint.encode(to:)((double *)a1, a2, a3);
    uint64_t result = ProtobufEncoder.endLengthDelimited()();
    goto LABEL_10;
  }
  __break(1u);
LABEL_21:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
  uint64_t v16 = (void *)result;
LABEL_15:
  unint64_t v21 = v16[2];
  unint64_t v20 = v16[3];
  if (v21 >= v20 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v16);
    uint64_t v16 = (void *)result;
  }
  v16[2] = v21 + 1;
  v16[v21 + 4] = a6;
  *(void *)(a1 + 24) = v16;
  if (__OFADD__(a6, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 8) = a6 + 1;
    RasterizationOptions.encode(to:)();
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

unint64_t DisplayList.Content.Value.init(from:)@<X0>(id *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v126 = a2;
  unint64_t result = swift_allocObject();
  unint64_t v6 = result | 0x1000000000000000;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  id v7 = a1[1];
  unint64_t v8 = (unint64_t)a1[2];
  if ((unint64_t)v7 >= v8)
  {
LABEL_189:
    a1[3] = 0;
    *uint64_t v126 = v6;
    return result;
  }
  long long v9 = a1 + 5;
  while (2)
  {
    unint64_t v14 = (unint64_t)a1[3];
    if (v14)
    {
      id v15 = a1[4];
      if (v7 < v15) {
        goto LABEL_13;
      }
      if (v15 < v7) {
        goto LABEL_190;
      }
      a1[3] = 0;
    }
    unint64_t result = ProtobufDecoder.decodeVarint()();
    if (v3) {
      return outlined consume of DisplayList.Content.Value(v6);
    }
    unint64_t v14 = result;
    if (result < 8)
    {
LABEL_190:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return outlined consume of DisplayList.Content.Value(v6);
    }
LABEL_13:
    switch(v14 >> 3)
    {
      case 1uLL:
        uint64_t v16 = swift_allocObject();
        if ((v14 & 7) != 2) {
          goto LABEL_192;
        }
        unint64_t v17 = (void *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
        }
        unint64_t v19 = v17[2];
        unint64_t v18 = v17[3];
        if (v19 >= v18 >> 1) {
          unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v17);
        }
        v17[2] = v19 + 1;
        v17[v19 + 4] = v8;
        a1[5] = v17;
        uint64_t v20 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_197;
        }
        if (v20 < 0)
        {
          __break(1u);
LABEL_204:
          __break(1u);
LABEL_205:
          __break(1u);
LABEL_206:
          __break(1u);
LABEL_207:
          __break(1u);
LABEL_208:
          __break(1u);
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
LABEL_213:
          __break(1u);
LABEL_214:
          __break(1u);
LABEL_215:
          __break(1u);
LABEL_216:
          __break(1u);
LABEL_217:
          __break(1u);
LABEL_218:
          __break(1u);
LABEL_219:
          __break(1u);
LABEL_220:
          __break(1u);
LABEL_221:
          __break(1u);
LABEL_222:
          __break(1u);
LABEL_223:
          __break(1u);
LABEL_224:
          __break(1u);
LABEL_225:
          __break(1u);
LABEL_226:
          __break(1u);
LABEL_227:
          __break(1u);
LABEL_228:
          __break(1u);
LABEL_229:
          __break(1u);
LABEL_230:
          __break(1u);
LABEL_231:
          __break(1u);
LABEL_232:
          __break(1u);
LABEL_233:
          __break(1u);
LABEL_234:
          __break(1u);
LABEL_235:
          __break(1u);
LABEL_236:
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          JUMPOUT(0x245D6DFE4);
        }
        unint64_t v21 = (unint64_t)a1[1] + v20;
        if (v8 < v21)
        {
LABEL_192:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_197;
        }
        a1[2] = (id)v21;
        float v22 = specialized Color.Resolved.init(from:)(a1);
        unint64_t v26 = (void *)*v9;
        if (!*(void *)(*v9 + 16)) {
          goto LABEL_216;
        }
        float v27 = v22;
        int v28 = v23;
        int v29 = v24;
        int v30 = v25;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v31 = v26[2];
          if (!v31) {
            goto LABEL_227;
          }
        }
        else
        {
          unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew()(v26);
          uint64_t v31 = v26[2];
          if (!v31) {
            goto LABEL_227;
          }
        }
        uint64_t v32 = v31 - 1;
        int64_t v33 = (void *)v26[v32 + 4];
        void v26[2] = v32;
        a1[5] = v26;
        a1[2] = v33;
        *(float *)(v16 + 16) = v27;
        *(_DWORD *)(v16 + 20) = v28;
        *(_DWORD *)(v16 + 24) = v29;
        *(_DWORD *)(v16 + 28) = v30;
        unint64_t result = outlined consume of DisplayList.Content.Value(v6);
        unint64_t v6 = v16 | 0x1000000000000000;
        goto LABEL_6;
      case 2uLL:
        uint64_t v34 = swift_allocObject();
        if ((v14 & 7) != 2) {
          goto LABEL_194;
        }
        uint64_t v35 = (void *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
        }
        unint64_t v37 = v35[2];
        unint64_t v36 = v35[3];
        if (v37 >= v36 >> 1) {
          uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v35);
        }
        v35[2] = v37 + 1;
        v35[v37 + 4] = v8;
        a1[5] = v35;
        uint64_t v38 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_197;
        }
        if (v38 < 0) {
          goto LABEL_204;
        }
        unint64_t v39 = (unint64_t)a1[1] + v38;
        if (v8 < v39)
        {
LABEL_194:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_197:
          outlined consume of DisplayList.Content.Value(v6);
          return swift_deallocUninitializedObject();
        }
        a1[2] = (id)v39;
        GraphicsImage.init(from:)(a1, v34 + 16);
        int64_t v40 = (void *)*v9;
        if (!*(void *)(*v9 + 16)) {
          goto LABEL_217;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v41 = v40[2];
          if (!v41) {
            goto LABEL_228;
          }
        }
        else
        {
          int64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew()(v40);
          uint64_t v41 = v40[2];
          if (!v41) {
            goto LABEL_228;
          }
        }
        uint64_t v42 = v41 - 1;
        uint64_t v43 = (void *)v40[v42 + 4];
        v40[2] = v42;
        unint64_t result = outlined consume of DisplayList.Content.Value(v6);
        a1[5] = v40;
        a1[2] = v43;
        unint64_t v6 = v34 | 0x3000000000000000;
        goto LABEL_6;
      case 3uLL:
        if ((v14 & 7) != 2) {
          goto LABEL_190;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          return outlined consume of DisplayList.Content.Value(v6);
        }
        closure #2 in DisplayList.Content.Value.init(from:)(a1, (uint64_t *)&v124);
        uint64_t v3 = 0;
        if (!*(void *)(*v9 + 16)) {
          goto LABEL_213;
        }
        goto LABEL_158;
      case 4uLL:
        if ((v14 & 7) != 2) {
          goto LABEL_190;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          return outlined consume of DisplayList.Content.Value(v6);
        }
        closure #4 in DisplayList.Content.Value.init(from:)(a1, (double *)&v124);
        uint64_t v3 = 0;
        if (!*(void *)(*v9 + 16)) {
          goto LABEL_214;
        }
        uint64_t v44 = specialized Array._customRemoveLast()();
        if (!v44) {
          uint64_t v44 = specialized Array.remove(at:)(*(void *)(*v9 + 16) - 1);
        }
        a1[2] = (id)v44;
        long long v46 = v124;
        uint64_t v45 = v125;
        int v47 = *(void **)(v124 + 216);
        if (!v47 || (uint64_t)objc_msgSend(*(id *)(v124 + 216), sel_length) <= 0) {
          goto LABEL_170;
        }
        if (one-time initialization token for updateSchedule != -1) {
          swift_once();
        }
        uint64_t v48 = static NSAttributedStringKey.updateSchedule;
        objc_msgSend(v47, sel_length);
        if (objc_msgSend(v47, sel_attribute_atIndex_effectiveRange_, v48, 0, 0))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          _sypSgWOhTm_8((uint64_t)&v124, (uint64_t (*)(void))type metadata accessor for Any?);
          uint64_t v49 = swift_allocObject();
          Swift::UInt32 v50 = ++lastIdentity;
          outlined consume of DisplayList.Content.Value(v6);
          *(void *)(v49 + 40) = &type metadata for DynamicTextViewFactory;
          *(void *)(v49 + 48) = &protocol witness table for DynamicTextViewFactory;
          unint64_t result = swift_allocObject();
          *(void *)(v49 + 16) = result;
          *(_OWORD *)(result + 16) = v46;
          *(void *)(result + 32) = v45;
          unint64_t v6 = v49 | 0xB000000000000000;
          *(_DWORD *)(result + 40) = v50;
        }
        else
        {
          long long v124 = 0u;
          long long v125 = 0u;
          _sypSgWOhTm_8((uint64_t)&v124, (uint64_t (*)(void))type metadata accessor for Any?);
LABEL_170:
          uint64_t v114 = swift_allocObject();
          *(void *)(v114 + 16) = v46;
          *(void *)(v114 + 24) = 0;
          *(unsigned char *)(v114 + 32) = 0;
          unint64_t result = outlined consume of DisplayList.Content.Value(v6);
          *(void *)(v114 + 40) = *((void *)&v46 + 1);
          *(void *)(v114 + 48) = v45;
          unint64_t v6 = v114 | 0x8000000000000000;
        }
        goto LABEL_6;
      case 5uLL:
        if ((v14 & 7) != 2) {
          goto LABEL_190;
        }
        uint64_t v51 = (void *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
        }
        unint64_t v53 = v51[2];
        unint64_t v52 = v51[3];
        if (v53 >= v52 >> 1) {
          uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v52 > 1), v53 + 1, 1, v51);
        }
        v51[2] = v53 + 1;
        v51[v53 + 4] = v8;
        a1[5] = v51;
        uint64_t v54 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          return outlined consume of DisplayList.Content.Value(v6);
        }
        if (v54 < 0) {
          goto LABEL_205;
        }
        unint64_t v55 = (unint64_t)a1[1] + v54;
        if (v8 < v55) {
          goto LABEL_190;
        }
        a1[2] = (id)v55;
        closure #3 in DisplayList.Content.Value.init(from:)(a1, (uint64_t *)&v124);
        unint64_t v10 = (void *)*v9;
        if (!*(void *)(*v9 + 16)) {
          goto LABEL_218;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v11 = v10[2];
          if (!v11) {
            goto LABEL_226;
          }
        }
        else
        {
          unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
          uint64_t v11 = v10[2];
          if (!v11) {
            goto LABEL_226;
          }
        }
        goto LABEL_4;
      case 6uLL:
        if ((v14 & 7) != 2) {
          goto LABEL_190;
        }
        unint64_t v56 = (void *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
        }
        unint64_t v58 = v56[2];
        unint64_t v57 = v56[3];
        if (v58 >= v57 >> 1) {
          unint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v57 > 1), v58 + 1, 1, v56);
        }
        v56[2] = v58 + 1;
        v56[v58 + 4] = v8;
        a1[5] = v56;
        uint64_t v59 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          return outlined consume of DisplayList.Content.Value(v6);
        }
        if (v59 < 0) {
          goto LABEL_206;
        }
        unint64_t v60 = (unint64_t)a1[1] + v59;
        if (v8 < v60) {
          goto LABEL_190;
        }
        a1[2] = (id)v60;
        closure #5 in DisplayList.Content.Value.init(from:)(a1, (unint64_t *)&v124);
        unint64_t v10 = (void *)*v9;
        if (!*(void *)(*v9 + 16)) {
          goto LABEL_219;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v11 = v10[2];
          if (!v11) {
            goto LABEL_229;
          }
        }
        else
        {
          unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
          uint64_t v11 = v10[2];
          if (!v11) {
            goto LABEL_229;
          }
        }
        goto LABEL_4;
      case 7uLL:
        if ((v14 & 7) != 2) {
          goto LABEL_190;
        }
        unint64_t v61 = (void *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61[2] + 1, 1, v61);
        }
        unint64_t v63 = v61[2];
        unint64_t v62 = v61[3];
        if (v63 >= v62 >> 1) {
          unint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v62 > 1), v63 + 1, 1, v61);
        }
        v61[2] = v63 + 1;
        v61[v63 + 4] = v8;
        a1[5] = v61;
        uint64_t v64 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          return outlined consume of DisplayList.Content.Value(v6);
        }
        if (v64 < 0) {
          goto LABEL_207;
        }
        unint64_t v65 = (unint64_t)a1[1] + v64;
        if (v8 < v65) {
          goto LABEL_190;
        }
        a1[2] = (id)v65;
        CodableViewFactory.init(from:)((uint64_t)a1, (uint64_t)&v124);
        uint64_t v66 = (void *)*v9;
        if (!*(void *)(*v9 + 16)) {
          goto LABEL_220;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v67 = v66[2];
          if (!v67) {
            goto LABEL_230;
          }
        }
        else
        {
          uint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew()(v66);
          uint64_t v67 = v66[2];
          if (!v67) {
            goto LABEL_230;
          }
        }
        uint64_t v68 = v67 - 1;
        unint64_t v69 = (void *)v66[v68 + 4];
        v66[2] = v68;
        a1[5] = v66;
        a1[2] = v69;
        uint64_t v70 = swift_allocObject();
        outlined init with copy of AnyTrackedValue((uint64_t)&v124, (uint64_t)v123);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for AnyViewFactory);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for _DisplayList_ViewFactory);
        if ((swift_dynamicCast() & 1) == 0)
        {
          lazy protocol witness table accessor for type CodableViewFactory.Error and conformance CodableViewFactory.Error();
          long long v120 = 0u;
          long long v121 = 0u;
          uint64_t v122 = 0;
          swift_allocError();
          *float v115 = 0;
          v115[1] = 0;
          swift_willThrow();
          float v116 = (unint64_t *)&lazy cache variable for type metadata for _DisplayList_ViewFactory?;
          uint64_t v117 = &lazy cache variable for type metadata for _DisplayList_ViewFactory;
          goto LABEL_201;
        }
        outlined init with take of ScrollStateRequest(&v120, v70 + 16);
        outlined destroy of CodableViewFactory((uint64_t)&v124);
        unint64_t result = outlined consume of DisplayList.Content.Value(v6);
        unint64_t v6 = v70 | 0xB000000000000000;
        goto LABEL_6;
      case 8uLL:
        if ((v14 & 7) != 2) {
          goto LABEL_190;
        }
        unint64_t v71 = (void *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71[2] + 1, 1, v71);
        }
        unint64_t v73 = v71[2];
        unint64_t v72 = v71[3];
        if (v73 >= v72 >> 1) {
          unint64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v72 > 1), v73 + 1, 1, v71);
        }
        v71[2] = v73 + 1;
        v71[v73 + 4] = v8;
        a1[5] = v71;
        uint64_t v74 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          return outlined consume of DisplayList.Content.Value(v6);
        }
        if (v74 < 0) {
          goto LABEL_208;
        }
        unint64_t v75 = (unint64_t)a1[1] + v74;
        if (v8 < v75) {
          goto LABEL_190;
        }
        a1[2] = (id)v75;
        closure #7 in DisplayList.Content.Value.init(from:)((unint64_t)a1, (unint64_t *)&v124);
        unint64_t v10 = (void *)*v9;
        if (!*(void *)(*v9 + 16)) {
          goto LABEL_221;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v11 = v10[2];
          if (!v11) {
            goto LABEL_231;
          }
        }
        else
        {
          unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
          uint64_t v11 = v10[2];
          if (!v11) {
            goto LABEL_231;
          }
        }
        goto LABEL_4;
      case 9uLL:
        if ((v14 & 7) != 2) {
          goto LABEL_190;
        }
        uint64_t v76 = (void *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v76[2] + 1, 1, v76);
        }
        unint64_t v78 = v76[2];
        unint64_t v77 = v76[3];
        if (v78 >= v77 >> 1) {
          uint64_t v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v77 > 1), v78 + 1, 1, v76);
        }
        v76[2] = v78 + 1;
        v76[v78 + 4] = v8;
        a1[5] = v76;
        uint64_t v79 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          return outlined consume of DisplayList.Content.Value(v6);
        }
        if (v79 < 0) {
          goto LABEL_209;
        }
        unint64_t v80 = (unint64_t)a1[1] + v79;
        if (v8 < v80) {
          goto LABEL_190;
        }
        a1[2] = (id)v80;
        CodableViewFactory.init(from:)((uint64_t)a1, (uint64_t)&v124);
        int v81 = (void *)*v9;
        if (!*(void *)(*v9 + 16)) {
          goto LABEL_222;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v82 = v81[2];
          if (!v82) {
            goto LABEL_232;
          }
        }
        else
        {
          int v81 = specialized _ArrayBuffer._consumeAndCreateNew()(v81);
          uint64_t v82 = v81[2];
          if (!v82) {
            goto LABEL_232;
          }
        }
        uint64_t v83 = v82 - 1;
        float v84 = (void *)v81[v83 + 4];
        _OWORD v81[2] = v83;
        a1[5] = v81;
        a1[2] = v84;
        uint64_t v85 = swift_allocObject();
        outlined init with copy of AnyTrackedValue((uint64_t)&v124, (uint64_t)v123);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for AnyViewFactory);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for PlatformViewFactory);
        if ((swift_dynamicCast() & 1) == 0)
        {
          lazy protocol witness table accessor for type CodableViewFactory.Error and conformance CodableViewFactory.Error();
          long long v120 = 0u;
          long long v121 = 0u;
          uint64_t v122 = 0;
          swift_allocError();
          *id v118 = 0;
          v118[1] = 0;
          swift_willThrow();
          float v116 = (unint64_t *)&lazy cache variable for type metadata for PlatformViewFactory?;
          uint64_t v117 = &lazy cache variable for type metadata for PlatformViewFactory;
          goto LABEL_201;
        }
        outlined init with take of ScrollStateRequest(&v120, v85 + 16);
        outlined destroy of CodableViewFactory((uint64_t)&v124);
        unint64_t result = outlined consume of DisplayList.Content.Value(v6);
        unint64_t v6 = v85 | 0x6000000000000000;
        goto LABEL_6;
      case 0xAuLL:
        if ((v14 & 7) != 2) {
          goto LABEL_190;
        }
        uint64_t v86 = (void *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v86[2] + 1, 1, v86);
        }
        unint64_t v88 = v86[2];
        unint64_t v87 = v86[3];
        if (v88 >= v87 >> 1) {
          uint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v87 > 1), v88 + 1, 1, v86);
        }
        v86[2] = v88 + 1;
        v86[v88 + 4] = v8;
        a1[5] = v86;
        uint64_t v89 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          return outlined consume of DisplayList.Content.Value(v6);
        }
        if (v89 < 0) {
          goto LABEL_210;
        }
        unint64_t v90 = (unint64_t)a1[1] + v89;
        if (v8 < v90) {
          goto LABEL_190;
        }
        a1[2] = (id)v90;
        CodableViewFactory.init(from:)((uint64_t)a1, (uint64_t)&v124);
        long long v91 = (void *)*v9;
        if (!*(void *)(*v9 + 16)) {
          goto LABEL_223;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v92 = v91[2];
          if (!v92) {
            goto LABEL_233;
          }
        }
        else
        {
          long long v91 = specialized _ArrayBuffer._consumeAndCreateNew()(v91);
          uint64_t v92 = v91[2];
          if (!v92) {
            goto LABEL_233;
          }
        }
        uint64_t v93 = v92 - 1;
        float v94 = (void *)v91[v93 + 4];
        v91[2] = v93;
        a1[5] = v91;
        a1[2] = v94;
        uint64_t v95 = swift_allocObject();
        outlined init with copy of AnyTrackedValue((uint64_t)&v124, (uint64_t)v123);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for AnyViewFactory);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for PlatformLayerFactory);
        if (swift_dynamicCast())
        {
          outlined init with take of ScrollStateRequest(&v120, v95 + 16);
          outlined destroy of CodableViewFactory((uint64_t)&v124);
          unint64_t result = outlined consume of DisplayList.Content.Value(v6);
          unint64_t v6 = v95 | 0x7000000000000000;
LABEL_6:
          id v7 = a1[1];
          unint64_t v8 = (unint64_t)a1[2];
          if ((unint64_t)v7 >= v8) {
            goto LABEL_189;
          }
          continue;
        }
        lazy protocol witness table accessor for type CodableViewFactory.Error and conformance CodableViewFactory.Error();
        long long v120 = 0u;
        long long v121 = 0u;
        uint64_t v122 = 0;
        swift_allocError();
        *uint64_t v119 = 0;
        v119[1] = 0;
        swift_willThrow();
        float v116 = (unint64_t *)&lazy cache variable for type metadata for PlatformLayerFactory?;
        uint64_t v117 = &lazy cache variable for type metadata for PlatformLayerFactory;
LABEL_201:
        outlined destroy of AnyTrackedValue?((uint64_t)&v120, v116, v117);
        outlined destroy of CodableViewFactory((uint64_t)&v124);
        outlined consume of DisplayList.Content.Value(v6);
        return swift_deallocUninitializedObject();
      case 0xBuLL:
        uint64_t v96 = swift_allocObject();
        if ((v14 & 7) != 2) {
          goto LABEL_196;
        }
        uint64_t v97 = (void *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v97[2] + 1, 1, v97);
        }
        unint64_t v99 = v97[2];
        unint64_t v98 = v97[3];
        if (v99 >= v98 >> 1) {
          uint64_t v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v98 > 1), v99 + 1, 1, v97);
        }
        _OWORD v97[2] = v99 + 1;
        v97[v99 + 4] = v8;
        a1[5] = v97;
        uint64_t v100 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_197;
        }
        if (v100 < 0) {
          goto LABEL_211;
        }
        unint64_t v101 = (unint64_t)a1[1] + v100;
        if (v8 < v101)
        {
LABEL_196:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_197;
        }
        a1[2] = (id)v101;
        BackdropEffect.init(from:)((unint64_t)a1, v96 + 16);
        int v102 = (void *)*v9;
        if (!*(void *)(*v9 + 16)) {
          goto LABEL_224;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v103 = v102[2];
          if (!v103) {
            goto LABEL_234;
          }
        }
        else
        {
          int v102 = specialized _ArrayBuffer._consumeAndCreateNew()(v102);
          uint64_t v103 = v102[2];
          if (!v103) {
            goto LABEL_234;
          }
        }
        uint64_t v104 = v103 - 1;
        uint64_t v105 = (void *)v102[v104 + 4];
        v102[2] = v104;
        unint64_t result = outlined consume of DisplayList.Content.Value(v6);
        a1[5] = v102;
        a1[2] = v105;
        unint64_t v6 = v96;
        goto LABEL_6;
      case 0xCuLL:
        if ((v14 & 7) != 2) {
          goto LABEL_190;
        }
        uint64_t v106 = (void *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v106[2] + 1, 1, v106);
        }
        unint64_t v108 = v106[2];
        unint64_t v107 = v106[3];
        if (v108 >= v107 >> 1) {
          uint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v107 > 1), v108 + 1, 1, v106);
        }
        _OWORD v106[2] = v108 + 1;
        v106[v108 + 4] = v8;
        a1[5] = v106;
        uint64_t v109 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          return outlined consume of DisplayList.Content.Value(v6);
        }
        if (v109 < 0) {
          goto LABEL_212;
        }
        unint64_t v110 = (unint64_t)a1[1] + v109;
        if (v8 < v110) {
          goto LABEL_190;
        }
        a1[2] = (id)v110;
        closure #1 in DisplayList.Content.Value.init(from:)(a1, (uint64_t *)&v124);
        unint64_t v10 = (void *)*v9;
        if (!*(void *)(*v9 + 16)) {
          goto LABEL_225;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v11 = v10[2];
          if (!v11) {
            goto LABEL_235;
          }
        }
        else
        {
          unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
          uint64_t v11 = v10[2];
          if (!v11) {
            goto LABEL_235;
          }
        }
LABEL_4:
        uint64_t v12 = v11 - 1;
        unint64_t v13 = (void *)v10[v12 + 4];
        id v10[2] = v12;
        unint64_t result = outlined consume of DisplayList.Content.Value(v6);
        a1[5] = v10;
        a1[2] = v13;
LABEL_5:
        unint64_t v6 = v124;
        goto LABEL_6;
      case 0xDuLL:
        if ((v14 & 7) != 2) {
          goto LABEL_190;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          return outlined consume of DisplayList.Content.Value(v6);
        }
        closure #6 in DisplayList.Content.Value.init(from:)(a1, (unint64_t *)&v124);
        uint64_t v3 = 0;
        if (!*(void *)(*v9 + 16)) {
          goto LABEL_215;
        }
LABEL_158:
        uint64_t v111 = specialized Array._customRemoveLast()();
        if (!v111) {
          uint64_t v111 = specialized Array.remove(at:)(*(void *)(*v9 + 16) - 1);
        }
        uint64_t v112 = v111;
        unint64_t result = outlined consume of DisplayList.Content.Value(v6);
        a1[2] = (id)v112;
        goto LABEL_5;
      default:
        switch(v14 & 7)
        {
          case 0uLL:
            unint64_t result = ProtobufDecoder.decodeVarint()();
            if (v3) {
              return outlined consume of DisplayList.Content.Value(v6);
            }
            goto LABEL_6;
          case 1uLL:
            unint64_t v113 = (unint64_t)a1[1] + 8;
            if (v8 < v113) {
              goto LABEL_190;
            }
            goto LABEL_168;
          case 2uLL:
            unint64_t result = ProtobufDecoder.decodeVarint()();
            if (v3) {
              return outlined consume of DisplayList.Content.Value(v6);
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_236;
            }
            unint64_t v113 = (unint64_t)a1[1] + result;
            if (v8 < v113) {
              goto LABEL_190;
            }
LABEL_168:
            a1[1] = (id)v113;
            break;
          case 5uLL:
            unint64_t v113 = (unint64_t)a1[1] + 4;
            if (v8 >= v113) {
              goto LABEL_168;
            }
            goto LABEL_190;
          default:
            goto LABEL_190;
        }
        goto LABEL_6;
    }
  }
}

uint64_t closure #1 in DisplayList.Content.Value.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = v2;
  unint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  if (v6 >= v7)
  {
    unint64_t v61 = (void *)MEMORY[0x263F8EE78];
    float v8 = 1.0;
    float v9 = 0.0;
    int v10 = 0;
    int v11 = 0;
LABEL_4:
    a1[3] = 0;
    uint64_t result = swift_allocObject();
    *(float *)(result + 16) = v9;
    *(_DWORD *)(result + 20) = v10;
    *(_DWORD *)(result + 24) = v11;
    *(float *)(result + 28) = v8;
    *(void *)(result + 32) = v61;
    *a2 = result | 0x2000000000000000;
    return result;
  }
  unint64_t v61 = (void *)MEMORY[0x263F8EE78];
  float v8 = 1.0;
  float v9 = 0.0;
  int v10 = 0;
  int v11 = 0;
  while (1)
  {
    unint64_t v14 = a1[3];
    if (v14)
    {
      unint64_t v15 = a1[4];
      if (v6 < v15) {
        goto LABEL_14;
      }
      if (v15 < v6) {
        goto LABEL_51;
      }
      a1[3] = 0;
    }
    unint64_t v14 = ProtobufDecoder.decodeVarint()();
    if (v4) {
      return swift_bridgeObjectRelease();
    }
    if (v14 < 8) {
      goto LABEL_51;
    }
LABEL_14:
    if (v14 >> 3 == 2)
    {
      if ((v14 & 7) != 2) {
        goto LABEL_51;
      }
      ProtobufDecoder.beginMessage()();
      if (v4) {
        return swift_bridgeObjectRelease();
      }
      GraphicsFilter.init(from:)(a1, (uint64_t)v58);
      uint64_t v4 = 0;
      int v29 = (void *)a1[5];
      if (!v29[2]) {
        goto LABEL_58;
      }
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v30 = v29[2];
        if (!v30) {
          goto LABEL_59;
        }
      }
      else
      {
        int v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
        uint64_t v30 = v29[2];
        if (!v30) {
          goto LABEL_59;
        }
      }
      uint64_t v31 = v30 - 1;
      uint64_t v32 = v29[v31 + 4];
      long long v29[2] = v31;
      a1[5] = v29;
      a1[2] = v32;
      uint64_t v33 = v58[0];
      uint64_t v34 = v58[1];
      uint64_t v36 = v58[2];
      uint64_t v35 = v58[3];
      uint64_t v3 = (void *)v58[4];
      uint64_t v56 = v58[6];
      uint64_t v57 = v58[5];
      uint64_t v54 = v58[8];
      uint64_t v55 = v58[7];
      uint64_t v52 = v58[10];
      uint64_t v53 = v58[9];
      uint64_t v50 = v58[12];
      uint64_t v51 = v58[11];
      uint64_t v49 = v58[13];
      char v47 = v60;
      int v48 = v59;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61[2] + 1, 1, v61);
      }
      unint64_t v38 = v61[2];
      unint64_t v37 = v61[3];
      if (v38 >= v37 >> 1) {
        unint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v61);
      }
      unint64_t v39 = v61;
      v61[2] = v38 + 1;
      int64_t v40 = &v39[15 * v38];
      v40[4] = v33;
      uint64_t v40[5] = v34;
      v40[6] = v36;
      v40[7] = v35;
      v40[8] = v3;
      v40[9] = v57;
      v40[10] = v56;
      v40[11] = v55;
      v40[12] = v54;
      v40[13] = v53;
      v40[14] = v52;
      v40[15] = v51;
      v40[16] = v50;
      v40[17] = v49;
      *((_DWORD *)v40 + 36) = v48;
      *((unsigned char *)v40 + 148) = v47;
      goto LABEL_7;
    }
    if (v14 >> 3 != 1)
    {
      switch(v14 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v4) {
            return swift_bridgeObjectRelease();
          }
          goto LABEL_7;
        case 1uLL:
          unint64_t v13 = a1[1] + 8;
          if (v7 >= v13) {
            goto LABEL_6;
          }
          goto LABEL_51;
        case 2uLL:
          uint64_t v41 = ProtobufDecoder.decodeVarint()();
          if (v4) {
            return swift_bridgeObjectRelease();
          }
          if (v41 < 0) {
            goto LABEL_61;
          }
          unint64_t v13 = a1[1] + v41;
          if (v7 < v13) {
            goto LABEL_51;
          }
LABEL_6:
          a1[1] = v13;
          break;
        case 5uLL:
          unint64_t v13 = a1[1] + 4;
          if (v7 < v13) {
            goto LABEL_51;
          }
          goto LABEL_6;
        default:
          goto LABEL_51;
      }
      goto LABEL_7;
    }
    if ((v14 & 7) != 2) {
      goto LABEL_51;
    }
    uint64_t v16 = (void *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
    unint64_t v18 = v16[2];
    unint64_t v17 = v16[3];
    if (v18 >= v17 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v16);
    }
    v16[2] = v18 + 1;
    v16[v18 + 4] = v7;
    a1[5] = v16;
    uint64_t v19 = ProtobufDecoder.decodeVarint()();
    if (v4) {
      return swift_bridgeObjectRelease();
    }
    if (v19 < 0) {
      break;
    }
    unint64_t v20 = a1[1] + v19;
    if (v7 < v20) {
      goto LABEL_51;
    }
    a1[2] = v20;
    float v21 = specialized Color.Resolved.init(from:)(a1);
    int v25 = (void *)a1[5];
    if (!v25[2]) {
      goto LABEL_60;
    }
    float v9 = v21;
    int v10 = v22;
    int v11 = v23;
    float v8 = v24;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v26 = v25[2];
      if (!v26) {
        goto LABEL_50;
      }
    }
    else
    {
      int v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v25);
      uint64_t v26 = v25[2];
      if (!v26)
      {
LABEL_50:
        __break(1u);
LABEL_51:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return swift_bridgeObjectRelease();
      }
    }
    uint64_t v27 = v26 - 1;
    uint64_t v28 = v25[v27 + 4];
    unint64_t v25[2] = v27;
    a1[5] = v25;
    a1[2] = v28;
LABEL_7:
    unint64_t v6 = a1[1];
    unint64_t v7 = a1[2];
    if (v6 >= v7) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
  __break(1u);
  uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  uint64_t v43 = v42[2];
  if (!v43)
  {
    __break(1u);
    uint64_t v42 = (void *)a1[5];
    if (v42[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v43 = v42[2];
        if (v43) {
          goto LABEL_56;
        }
LABEL_65:
        __break(1u);
        JUMPOUT(0x245D6E590);
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v42);
    uint64_t v43 = v42[2];
    if (!v43) {
      goto LABEL_65;
    }
  }
LABEL_56:
  uint64_t v44 = v43 - 1;
  uint64_t v45 = v42[v44 + 4];
  v42[2] = v44;
  uint64_t result = swift_bridgeObjectRelease();
  a1[5] = v42;
  a1[2] = v45;
  return result;
}

uint64_t closure #2 in DisplayList.Content.Value.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  if (v5 >= v6)
  {
    uint64_t v11 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    a1[3] = 0;
    uint64_t v12 = 0;
    unsigned __int8 v10 = 6;
LABEL_4:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    uint64_t v13 = v12;
    uint64_t v14 = v11;
    return outlined consume of Path.Storage(v13, v14, v8, v9, v10);
  }
  uint64_t v7 = v2;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v53 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unsigned __int8 v10 = 6;
  LOBYTE(v49) = 1;
  char v50 = 0;
  while (1)
  {
    unint64_t v16 = a1[3];
    if (v16)
    {
      unint64_t v17 = a1[4];
      if (v5 < v17) {
        goto LABEL_14;
      }
      if (v17 < v5) {
        goto LABEL_62;
      }
      a1[3] = 0;
    }
    unint64_t v16 = ProtobufDecoder.decodeVarint()();
    if (v7) {
      goto LABEL_63;
    }
    if (v16 < 8) {
      goto LABEL_62;
    }
LABEL_14:
    unint64_t v18 = v16 >> 3;
    if (v16 >> 3 == 3)
    {
      if ((v16 & 7) != 2) {
        goto LABEL_62;
      }
      uint64_t v3 = (void *)a1[5];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      }
      unint64_t v31 = v3[2];
      unint64_t v30 = v3[3];
      if (v31 >= v30 >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v3);
      }
      v3[2] = v31 + 1;
      v3[v31 + 4] = v6;
      a1[5] = v3;
      uint64_t v32 = ProtobufDecoder.decodeVarint()();
      if (v7) {
        goto LABEL_63;
      }
      if (v32 < 0) {
        goto LABEL_76;
      }
      unint64_t v33 = a1[1] + v32;
      if (v6 < v33) {
        goto LABEL_62;
      }
      a1[2] = v33;
      unint64_t v34 = specialized FillStyle.init(from:)(a1);
      uint64_t v35 = (void *)a1[5];
      if (!v35[2]) {
        goto LABEL_80;
      }
      uint64_t v3 = (void *)v34;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v36 = v35[2];
        if (!v36) {
          goto LABEL_61;
        }
      }
      else
      {
        uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
        uint64_t v36 = v35[2];
        if (!v36)
        {
LABEL_61:
          __break(1u);
LABEL_62:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_63:
          swift_release();
          uint64_t v13 = v53;
          uint64_t v14 = v54;
          return outlined consume of Path.Storage(v13, v14, v8, v9, v10);
        }
      }
      uint64_t v37 = v36 - 1;
      uint64_t v38 = v35[v37 + 4];
      v35[2] = v37;
      unsigned int v49 = (v3 >> 8) & 1;
      char v50 = v3 & 1;
      a1[5] = v35;
      a1[2] = v38;
      goto LABEL_7;
    }
    if (v18 == 2)
    {
      if ((v16 & 7) != 2) {
        goto LABEL_62;
      }
      ProtobufDecoder.beginMessage()();
      if (v7) {
        goto LABEL_63;
      }
      CodableResolvedPaint.init(from:)(a1, &v58);
      uint64_t v7 = 0;
      uint64_t v3 = (void *)a1[5];
      if (!v3[2]) {
        goto LABEL_77;
      }
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v39 = v3[2];
        if (!v39) {
          goto LABEL_78;
        }
      }
      else
      {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
        uint64_t v39 = v3[2];
        if (!v39) {
          goto LABEL_78;
        }
      }
      uint64_t v40 = v39 - 1;
      uint64_t v41 = v3[v40 + 4];
      v3[2] = v40;
      swift_release();
      a1[5] = v3;
      a1[2] = v41;
      uint64_t v55 = v58;
      goto LABEL_7;
    }
    if (v18 == 1) {
      break;
    }
    switch(v16 & 7)
    {
      case 0uLL:
        ProtobufDecoder.decodeVarint()();
        if (v7) {
          goto LABEL_63;
        }
        break;
      case 1uLL:
        unint64_t v15 = a1[1] + 8;
        if (v6 >= v15) {
          goto LABEL_6;
        }
        goto LABEL_62;
      case 2uLL:
        uint64_t v42 = ProtobufDecoder.decodeVarint()();
        if (v7) {
          goto LABEL_63;
        }
        if (v42 < 0) {
          goto LABEL_82;
        }
        unint64_t v15 = a1[1] + v42;
        if (v6 < v15) {
          goto LABEL_62;
        }
LABEL_6:
        a1[1] = v15;
        break;
      case 5uLL:
        unint64_t v15 = a1[1] + 4;
        if (v6 < v15) {
          goto LABEL_62;
        }
        goto LABEL_6;
      default:
        goto LABEL_62;
    }
LABEL_7:
    unint64_t v5 = a1[1];
    unint64_t v6 = a1[2];
    if (v5 >= v6)
    {
      a1[3] = 0;
      if (v55)
      {
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = v53;
        *(void *)(result + 24) = v54;
        *(void *)(result + 32) = v8;
        *(void *)(result + 40) = v9;
        *(unsigned char *)(result + 48) = v10;
        *(void *)(result + 56) = v55;
        *(unsigned char *)(result + 64) = v50 & 1;
        *(unsigned char *)(result + 65) = v49 & 1;
        *a2 = result | 0x4000000000000000;
        return result;
      }
      uint64_t v12 = v53;
      uint64_t v11 = v54;
      goto LABEL_4;
    }
  }
  if ((v16 & 7) != 2) {
    goto LABEL_62;
  }
  uint64_t v3 = (void *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v20 = v3[2];
  unint64_t v19 = v3[3];
  if (v20 >= v19 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v3);
  }
  v3[2] = v20 + 1;
  v3[v20 + 4] = v6;
  a1[5] = v3;
  uint64_t v21 = ProtobufDecoder.decodeVarint()();
  if (v7) {
    goto LABEL_63;
  }
  if ((v21 & 0x8000000000000000) == 0)
  {
    unint64_t v22 = a1[1] + v21;
    if (v6 < v22) {
      goto LABEL_62;
    }
    a1[2] = v22;
    specialized Path.init(from:)((unint64_t)a1, (uint64_t)v56);
    uint64_t v3 = (void *)a1[5];
    if (!v3[2]) {
      goto LABEL_79;
    }
    uint64_t v23 = v56[0];
    uint64_t v24 = v56[1];
    uint64_t v25 = v56[3];
    uint64_t v52 = v56[2];
    unsigned __int8 v51 = v57;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v26 = v3[2];
      if (!v26) {
        goto LABEL_81;
      }
    }
    else
    {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      uint64_t v26 = v3[2];
      if (!v26) {
        goto LABEL_81;
      }
    }
    uint64_t v27 = v26 - 1;
    unsigned __int8 v28 = v10;
    uint64_t v29 = v3[v27 + 4];
    v3[2] = v27;
    outlined consume of Path.Storage(v53, v54, v8, v9, v28);
    uint64_t v53 = v23;
    uint64_t v54 = v24;
    a1[5] = v3;
    a1[2] = v29;
    uint64_t v8 = v52;
    uint64_t v9 = v25;
    unsigned __int8 v10 = v51;
    goto LABEL_7;
  }
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
  __break(1u);
  uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  uint64_t v45 = v44[2];
  if (v45) {
    goto LABEL_74;
  }
  __break(1u);
  uint64_t v44 = (void *)a1[5];
  if (!v44[2])
  {
    __break(1u);
LABEL_85:
    uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
    uint64_t v45 = v44[2];
    if (v45) {
      goto LABEL_74;
    }
LABEL_71:
    __break(1u);
    uint64_t v44 = (void *)a1[5];
    if (v44[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v45 = v44[2];
        if (v45) {
          goto LABEL_74;
        }
        goto LABEL_89;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
    uint64_t v45 = v44[2];
    if (v45) {
      goto LABEL_74;
    }
LABEL_89:
    __break(1u);
    JUMPOUT(0x245D6EC24);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_85;
  }
  uint64_t v45 = v44[2];
  if (!v45) {
    goto LABEL_71;
  }
LABEL_74:
  uint64_t v46 = v45 - 1;
  uint64_t v47 = v44[v46 + 4];
  v44[2] = v46;
  swift_release();
  uint64_t result = outlined consume of Path.Storage(v53, v54, v8, v9, v10);
  a1[5] = v44;
  a1[2] = v47;
  return result;
}

uint64_t closure #3 in DisplayList.Content.Value.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (v4 >= v5)
  {
    uint64_t v60 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    LOBYTE(v9) = 0;
    long long v59 = xmmword_2461C6A90;
    float v10 = 0.5;
    uint64_t v11 = 0;
    LOBYTE(v12) = 6;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
LABEL_4:
    a1[3] = 0;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v60;
    *(void *)(result + 24) = v6;
    *(void *)(result + 32) = v7;
    *(void *)(result + 40) = v8;
    *(unsigned char *)(result + 48) = v12;
    *(_OWORD *)(result + 56) = v59;
    *(void *)(result + 72) = v11;
    *(void *)(result + 80) = v13;
    *(void *)(result + 88) = v14;
    *(float *)(result + 96) = v10;
    *(unsigned char *)(result + 100) = v9;
    *a2 = result | 0x5000000000000000;
    return result;
  }
  uint64_t v60 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  long long v59 = xmmword_2461C6A90;
  float v10 = 0.5;
  uint64_t v11 = 0;
  uint64_t v12 = 6;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  while (1)
  {
    unint64_t v17 = a1[3];
    if (v17)
    {
      unint64_t v18 = a1[4];
      if (v4 < v18) {
        goto LABEL_14;
      }
      if (v18 < v4) {
        goto LABEL_52;
      }
      a1[3] = 0;
    }
    unint64_t v17 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_53;
    }
    if (v17 < 8)
    {
LABEL_52:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
LABEL_53:
      uint64_t v40 = v60;
      uint64_t v41 = v6;
      uint64_t v42 = v7;
      goto LABEL_54;
    }
LABEL_14:
    if (v17 >> 3 != 2) {
      break;
    }
    if ((v17 & 7) != 2) {
      goto LABEL_52;
    }
    uint64_t v69 = v7;
    uint64_t v7 = v8;
    uint64_t v8 = v12;
    unint64_t v31 = (void *)a1[5];
    uint64_t v12 = v6;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
    }
    unint64_t v6 = v31[2];
    unint64_t v32 = v31[3];
    unint64_t v9 = v6 + 1;
    if (v6 >= v32 >> 1) {
      unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v6 + 1, 1, v31);
    }
    v31[2] = v9;
    v31[v6 + 4] = v5;
    a1[5] = v31;
    uint64_t v33 = ProtobufDecoder.decodeVarint()();
    if (v2)
    {
      uint64_t v40 = v60;
      uint64_t v41 = v12;
      goto LABEL_59;
    }
    if (v33 < 0) {
      goto LABEL_64;
    }
    unint64_t v6 = v12;
    unint64_t v34 = a1[1] + v33;
    if (v5 < v34)
    {
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      uint64_t v40 = v60;
      uint64_t v41 = v12;
LABEL_59:
      uint64_t v42 = v69;
      uint64_t v43 = v7;
      unsigned __int8 v44 = v8;
      return outlined consume of Path.Storage(v40, v41, v42, v43, v44);
    }
    a1[2] = v34;
    ResolvedShadowStyle.init(from:)((unint64_t)a1, (unint64_t)&v61);
    uint64_t v12 = v8;
    uint64_t v35 = (void *)a1[5];
    if (!v35[2]) {
      goto LABEL_66;
    }
    uint64_t v8 = v7;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
    }
    uint64_t v7 = v69;
    uint64_t v36 = v35[2];
    if (!v36) {
      goto LABEL_67;
    }
    uint64_t v37 = v36 - 1;
    uint64_t v38 = v35[v37 + 4];
    v35[2] = v37;
    a1[5] = v35;
    a1[2] = v38;
    long long v59 = v61;
    uint64_t v11 = v62;
    uint64_t v13 = v63;
    uint64_t v14 = v64;
    float v10 = v65;
    unint64_t v9 = v66;
LABEL_7:
    unint64_t v4 = a1[1];
    unint64_t v5 = a1[2];
    if (v4 >= v5) {
      goto LABEL_4;
    }
  }
  if (v17 >> 3 != 1)
  {
    switch(v17 & 7)
    {
      case 0uLL:
        ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_53;
        }
        goto LABEL_7;
      case 1uLL:
        unint64_t v16 = a1[1] + 8;
        if (v5 < v16) {
          goto LABEL_52;
        }
        goto LABEL_6;
      case 2uLL:
        uint64_t v39 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_53;
        }
        if (v39 < 0) {
          goto LABEL_69;
        }
        unint64_t v16 = a1[1] + v39;
        if (v5 < v16) {
          goto LABEL_52;
        }
LABEL_6:
        a1[1] = v16;
        break;
      case 5uLL:
        unint64_t v16 = a1[1] + 4;
        if (v5 < v16) {
          goto LABEL_52;
        }
        goto LABEL_6;
      default:
        goto LABEL_52;
    }
    goto LABEL_7;
  }
  if ((v17 & 7) != 2) {
    goto LABEL_52;
  }
  unint64_t v19 = (void *)a1[5];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v69 = v7;
  unsigned int v58 = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
  }
  unint64_t v22 = v19[2];
  unint64_t v21 = v19[3];
  unint64_t v9 = v22 + 1;
  if (v22 >= v21 >> 1) {
    unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v19);
  }
  void v19[2] = v9;
  v19[v22 + 4] = v5;
  a1[5] = v19;
  uint64_t v23 = ProtobufDecoder.decodeVarint()();
  if (v2)
  {
    uint64_t v40 = v60;
    uint64_t v41 = v6;
    uint64_t v42 = v69;
LABEL_54:
    uint64_t v43 = v8;
    unsigned __int8 v44 = v12;
    return outlined consume of Path.Storage(v40, v41, v42, v43, v44);
  }
  uint64_t v7 = v69;
  if ((v23 & 0x8000000000000000) == 0)
  {
    unint64_t v24 = a1[1] + v23;
    if (v5 < v24) {
      goto LABEL_52;
    }
    a1[2] = v24;
    specialized Path.init(from:)((unint64_t)a1, (uint64_t)v67);
    uint64_t v25 = (void *)a1[5];
    if (!v25[2]) {
      goto LABEL_65;
    }
    uint64_t v26 = v67[0];
    unint64_t v9 = v67[1];
    uint64_t v7 = v67[2];
    uint64_t v57 = v67[3];
    unsigned int v56 = v68;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v27 = v25[2];
      if (!v27) {
        goto LABEL_68;
      }
    }
    else
    {
      uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v25);
      uint64_t v27 = v25[2];
      if (!v27) {
        goto LABEL_68;
      }
    }
    uint64_t v28 = v27 - 1;
    uint64_t v29 = v6;
    uint64_t v30 = v25[v28 + 4];
    unint64_t v25[2] = v28;
    outlined consume of Path.Storage(v60, v29, v69, v8, v12);
    uint64_t v60 = v26;
    a1[5] = v25;
    a1[2] = v30;
    unint64_t v6 = v9;
    uint64_t v8 = v57;
    uint64_t v12 = v56;
    unint64_t v9 = v58;
    goto LABEL_7;
  }
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
  __break(1u);
  uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v9);
  uint64_t v53 = v52[2];
  if (v53)
  {
    uint64_t v45 = v6;
    uint64_t v46 = v53 - 1;
    uint64_t v47 = v52[v46 + 4];
    v52[2] = v46;
    uint64_t v48 = v60;
    uint64_t v49 = v7;
    uint64_t v50 = v8;
  }
  else
  {
    __break(1u);
    __break(1u);
    uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew()(v52);
    uint64_t v54 = v52[2];
    if (!v54)
    {
      __break(1u);
      JUMPOUT(0x245D6F274);
    }
    uint64_t v45 = v6;
    uint64_t v51 = v54 - 1;
    uint64_t v47 = v52[v51 + 4];
    v52[2] = v51;
    uint64_t v48 = v60;
    uint64_t v49 = v69;
    uint64_t v50 = v7;
  }
  uint64_t result = outlined consume of Path.Storage(v48, v45, v49, v50, v12);
  a1[5] = v52;
  a1[2] = v47;
  return result;
}

unint64_t closure #4 in DisplayList.Content.Value.init(from:)@<X0>(void *a1@<X0>, double *a2@<X8>)
{
  unint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  if (v5 < v6)
  {
    unint64_t v7 = 0;
    double v8 = 0.0;
    uint64_t v9 = 0;
    while (1)
    {
      unint64_t result = a1[3];
      if (!result) {
        goto LABEL_12;
      }
      unint64_t v12 = a1[4];
      if (v5 >= v12) {
        break;
      }
LABEL_14:
      if (result >> 3 == 2)
      {
        if ((result & 7) != 2) {
          goto LABEL_53;
        }
        unint64_t v24 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
        }
        unint64_t v26 = v24[2];
        unint64_t v25 = v24[3];
        if (v26 >= v25 >> 1) {
          unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v24);
        }
        uint64_t v24[2] = v26 + 1;
        v24[v26 + 4] = v6;
        a1[5] = v24;
        uint64_t v27 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_release();
        }
        if (v27 < 0) {
          goto LABEL_62;
        }
        unint64_t v28 = a1[1] + v27;
        if (v6 < v28) {
          goto LABEL_53;
        }
        a1[2] = v28;
        double v29 = specialized CGPoint.init(from:)(a1);
        unint64_t v31 = (void *)a1[5];
        if (!v31[2]) {
          goto LABEL_64;
        }
        double v8 = v29;
        uint64_t v9 = v30;
        unint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          uint64_t v32 = v31[2];
          if (!v32) {
            goto LABEL_52;
          }
        }
        else
        {
          unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v31);
          unint64_t v31 = (void *)result;
          uint64_t v32 = *(void *)(result + 16);
          if (!v32)
          {
LABEL_52:
            __break(1u);
LABEL_53:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            return swift_release();
          }
        }
        uint64_t v33 = v32 - 1;
        uint64_t v34 = v31[v33 + 4];
        v31[2] = v33;
        a1[5] = v31;
        a1[2] = v34;
      }
      else if (result >> 3 == 1)
      {
        if ((result & 7) != 2) {
          goto LABEL_53;
        }
        uint64_t v13 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
        }
        unint64_t v15 = v13[2];
        unint64_t v14 = v13[3];
        if (v15 >= v14 >> 1) {
          uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v13);
        }
        _OWORD v13[2] = v15 + 1;
        v13[v15 + 4] = v6;
        a1[5] = v13;
        uint64_t v16 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_release();
        }
        if (v16 < 0)
        {
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
          __break(1u);
          uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
          uint64_t v36 = v35[2];
          if (!v36)
          {
            __break(1u);
            uint64_t v35 = (void *)a1[5];
            if (v35[2])
            {
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v36 = v35[2];
                if (v36) {
                  goto LABEL_60;
                }
LABEL_70:
                __break(1u);
                JUMPOUT(0x245D6F738);
              }
            }
            else
            {
              __break(1u);
            }
            uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
            uint64_t v36 = v35[2];
            if (!v36) {
              goto LABEL_70;
            }
          }
LABEL_60:
          uint64_t v37 = v36 - 1;
          uint64_t v38 = v35[v37 + 4];
          v35[2] = v37;
          unint64_t result = swift_release();
          a1[5] = v35;
          a1[2] = v38;
          return result;
        }
        unint64_t v17 = a1[1] + v16;
        if (v6 < v17) {
          goto LABEL_53;
        }
        a1[2] = v17;
        unint64_t v18 = specialized CodableResolvedStyledText.init(from:)((unint64_t)a1);
        unint64_t v19 = (void *)a1[5];
        if (!v19[2]) {
          goto LABEL_63;
        }
        unint64_t v20 = v18;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v21 = v19[2];
          if (!v21) {
            goto LABEL_65;
          }
        }
        else
        {
          unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
          uint64_t v21 = v19[2];
          if (!v21) {
            goto LABEL_65;
          }
        }
        uint64_t v22 = v21 - 1;
        uint64_t v23 = v19[v22 + 4];
        void v19[2] = v22;
        unint64_t result = swift_release();
        a1[5] = v19;
        a1[2] = v23;
        unint64_t v7 = v20;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            unint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return swift_release();
            }
            break;
          case 1uLL:
            unint64_t v11 = a1[1] + 8;
            if (v6 >= v11) {
              goto LABEL_6;
            }
            goto LABEL_53;
          case 2uLL:
            unint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return swift_release();
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_66;
            }
            unint64_t v11 = a1[1] + result;
            if (v6 < v11) {
              goto LABEL_53;
            }
LABEL_6:
            a1[1] = v11;
            break;
          case 5uLL:
            unint64_t v11 = a1[1] + 4;
            if (v6 < v11) {
              goto LABEL_53;
            }
            goto LABEL_6;
          default:
            goto LABEL_53;
        }
      }
      unint64_t v5 = a1[1];
      unint64_t v6 = a1[2];
      if (v5 >= v6)
      {
        a1[3] = 0;
        if (!v7) {
          goto LABEL_4;
        }
        *(void *)a2 = v7;
        a2[1] = v8;
        *((void *)a2 + 2) = v9;
        return result;
      }
    }
    if (v12 < v5) {
      goto LABEL_53;
    }
    a1[3] = 0;
LABEL_12:
    unint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_release();
    }
    if (result < 8) {
      goto LABEL_53;
    }
    goto LABEL_14;
  }
  a1[3] = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

uint64_t closure #5 in DisplayList.Content.Value.init(from:)@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = (void *)a1[2];
  if (v4 >= (unint64_t)v5)
  {
    LOBYTE(v6) = 0;
    LODWORD(v7) = 0;
    LOWORD(v8) = 0;
    int v64 = 0;
    unint64_t v9 = MEMORY[0x263F8EE78];
    int v63 = 3;
    double v10 = 0.0;
    uint64_t v11 = 0;
    char v56 = 1;
    int v57 = 160;
LABEL_4:
    a1[3] = 0;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v9;
    *(_WORD *)(result + 24) = v8;
    *(unsigned char *)(result + 26) = v64;
    *(double *)(result + 32) = v10;
    *(void *)(result + 40) = v11;
    *(unsigned char *)(result + 48) = v6;
    *(_DWORD *)(result + 52) = v7;
    *(unsigned char *)(result + 56) = v56 & 1;
    *(_DWORD *)(result + 60) = v57;
    *(unsigned char *)(result + 64) = v63;
    *a2 = result | 0x9000000000000000;
    return result;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = 0;
  int v64 = 0;
  unint64_t v9 = MEMORY[0x263F8EE78];
  int v63 = 3;
  double v10 = 0.0;
  uint64_t v11 = 0;
  char v56 = 1;
  int v57 = 160;
  while (1)
  {
    unint64_t v14 = a1[3];
    if (v14)
    {
      unint64_t v15 = a1[4];
      if (v4 < v15) {
        goto LABEL_14;
      }
      if (v15 < v4) {
        goto LABEL_67;
      }
      a1[3] = 0;
    }
    unint64_t v16 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_bridgeObjectRelease();
    }
    unint64_t v14 = v16;
    if (v16 < 8) {
      goto LABEL_67;
    }
LABEL_14:
    unint64_t v17 = v14 >> 3;
    if (v14 >> 3 == 3)
    {
      if ((v14 & 7) != 2) {
        goto LABEL_67;
      }
      unint64_t v24 = (void *)a1[5];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
      }
      unint64_t v26 = v24[2];
      unint64_t v25 = v24[3];
      if (v26 >= v25 >> 1) {
        unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v24);
      }
      uint64_t v24[2] = v26 + 1;
      v24[v26 + 4] = v5;
      a1[5] = v24;
      uint64_t v27 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return swift_bridgeObjectRelease();
      }
      if (v27 < 0) {
        goto LABEL_78;
      }
      unint64_t v28 = a1[1] + v27;
      if ((unint64_t)v5 < v28) {
        goto LABEL_67;
      }
      a1[2] = v28;
      RasterizationOptions.init(from:)((uint64_t)a1, (uint64_t)&v58);
      double v29 = (void *)a1[5];
      if (!v29[2]) {
        goto LABEL_81;
      }
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v30 = v29[2];
        if (!v30) {
          goto LABEL_84;
        }
      }
      else
      {
        double v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
        uint64_t v30 = v29[2];
        if (!v30) {
          goto LABEL_84;
        }
      }
      uint64_t v31 = v30 - 1;
      uint64_t v32 = v29[v31 + 4];
      long long v29[2] = v31;
      a1[5] = v29;
      a1[2] = v32;
      uint64_t v6 = v58;
      uint64_t v7 = HIDWORD(v58);
      char v56 = v59;
      int v57 = v61;
      int v63 = v62;
      goto LABEL_7;
    }
    if (v17 == 2) {
      break;
    }
    if (v17 != 1)
    {
      switch(v14 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v2) {
            return swift_bridgeObjectRelease();
          }
          goto LABEL_7;
        case 1uLL:
          unint64_t v13 = a1[1] + 8;
          if ((unint64_t)v5 >= v13) {
            goto LABEL_6;
          }
          goto LABEL_67;
        case 2uLL:
          uint64_t v46 = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return swift_bridgeObjectRelease();
          }
          if (v46 < 0) {
            goto LABEL_86;
          }
          unint64_t v13 = a1[1] + v46;
          if ((unint64_t)v5 < v13) {
            goto LABEL_67;
          }
LABEL_6:
          a1[1] = v13;
          break;
        case 5uLL:
          unint64_t v13 = a1[1] + 4;
          if ((unint64_t)v5 < v13) {
            goto LABEL_67;
          }
          goto LABEL_6;
        default:
          goto LABEL_67;
      }
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    if ((v14 & 7) != 2) {
      goto LABEL_70;
    }
    unint64_t v9 = a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (void *)v9);
    }
    unint64_t v19 = *(void *)(v9 + 16);
    unint64_t v18 = *(void *)(v9 + 24);
    if (v19 >= v18 >> 1) {
      unint64_t v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, (void *)v9);
    }
    *(void *)(v9 + 16) = v19 + 1;
    *(void *)(v9 + 8 * v19 + 32) = v5;
    a1[5] = v9;
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if (result < 0)
    {
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      __break(1u);
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v9);
      uint64_t v53 = *(void *)(result + 16);
      if (v53)
      {
        uint64_t v47 = v53 - 1;
        uint64_t v48 = *(void *)(result + 8 * v47 + 32);
        *(void *)(result + 16) = v47;
        a1[5] = result;
        a1[2] = v48;
        return result;
      }
      __break(1u);
      __break(1u);
      uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
      uint64_t v50 = v49[2];
      if (v50) {
        goto LABEL_76;
      }
      __break(1u);
      uint64_t v49 = (void *)a1[5];
      if (v49[2])
      {
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v50 = v49[2];
          if (v50)
          {
LABEL_76:
            uint64_t v51 = v50 - 1;
            uint64_t v52 = v49[v51 + 4];
            _OWORD v49[2] = v51;
            uint64_t result = swift_bridgeObjectRelease();
            a1[5] = v49;
            a1[2] = v52;
            return result;
          }
LABEL_91:
          __break(1u);
          JUMPOUT(0x245D6FE80);
        }
      }
      else
      {
        __break(1u);
      }
      uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew()(v49);
      uint64_t v50 = v49[2];
      if (v50) {
        goto LABEL_76;
      }
      goto LABEL_91;
    }
    unint64_t v20 = a1[1] + result;
    if ((unint64_t)v5 < v20)
    {
LABEL_70:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
    a1[2] = v20;
    DisplayList.init(from:)(&v58, a1);
    unint64_t v9 = a1[5];
    if (!*(void *)(v9 + 16)) {
      goto LABEL_80;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v21 = *(void *)(v9 + 16);
      if (!v21) {
        goto LABEL_85;
      }
    }
    else
    {
      unint64_t v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v9);
      uint64_t v21 = *(void *)(v9 + 16);
      if (!v21) {
        goto LABEL_85;
      }
    }
    uint64_t v22 = v21 - 1;
    uint64_t v23 = *(void *)(v9 + 8 * v22 + 32);
    *(void *)(v9 + 16) = v22;
    a1[5] = v9;
    a1[2] = v23;
    unint64_t v9 = (unint64_t)v58;
    int v8 = v59;
    int v64 = v60;
LABEL_7:
    unint64_t v4 = a1[1];
    unint64_t v5 = (void *)a1[2];
    if (v4 >= (unint64_t)v5) {
      goto LABEL_4;
    }
  }
  if ((v14 & 7) != 2) {
    goto LABEL_67;
  }
  int v54 = v8;
  uint64_t v33 = v7;
  uint64_t v34 = v6;
  uint64_t v35 = (void *)a1[5];
  uint64_t v36 = (void *)v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
  }
  unint64_t v9 = v35[2];
  unint64_t v37 = v35[3];
  if (v9 >= v37 >> 1) {
    uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v9 + 1, 1, v35);
  }
  v35[2] = v9 + 1;
  v35[v9 + 4] = v5;
  a1[5] = v35;
  uint64_t v38 = ProtobufDecoder.decodeVarint()();
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  if (v38 < 0) {
    goto LABEL_79;
  }
  unint64_t v9 = (unint64_t)v36;
  unint64_t v39 = a1[1] + v38;
  if ((unint64_t)v5 >= v39)
  {
    a1[2] = v39;
    double v40 = specialized CGPoint.init(from:)(a1);
    uint64_t v42 = (void *)a1[5];
    if (!v42[2]) {
      goto LABEL_82;
    }
    double v10 = v40;
    uint64_t v11 = v41;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v42);
    }
    uint64_t v6 = v34;
    uint64_t v43 = v42[2];
    if (!v43) {
      goto LABEL_83;
    }
    uint64_t v7 = v33;
    uint64_t v44 = v43 - 1;
    uint64_t v45 = v42[v44 + 4];
    v42[2] = v44;
    a1[5] = v42;
    a1[2] = v45;
    int v8 = v54;
    goto LABEL_7;
  }
LABEL_67:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t closure #6 in DisplayList.Content.Value.init(from:)@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (v4 >= v5)
  {
    a1[3] = 0;
    goto LABEL_4;
  }
  uint64_t v6 = 0;
  int v56 = 0;
  int v55 = 0;
  char v50 = 3;
  double v7 = 0.0;
  unint64_t v8 = 160;
  uint64_t v9 = 0;
  char v10 = 1;
  while (1)
  {
    unint64_t v13 = a1[3];
    if (v13)
    {
      unint64_t v14 = a1[4];
      if (v4 < v14) {
        goto LABEL_14;
      }
      if (v14 < v4) {
        goto LABEL_68;
      }
      a1[3] = 0;
    }
    unint64_t v13 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_unknownObjectRelease();
    }
    if (v13 < 8) {
      goto LABEL_68;
    }
LABEL_14:
    unint64_t v15 = v13 >> 3;
    if (v13 >> 3 == 3)
    {
      if ((v13 & 7) != 2) {
        goto LABEL_68;
      }
      unint64_t v25 = (void *)a1[5];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
      }
      unint64_t v8 = v25[2];
      unint64_t v26 = v25[3];
      if (v8 >= v26 >> 1) {
        unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v8 + 1, 1, v25);
      }
      unint64_t v25[2] = v8 + 1;
      v25[v8 + 4] = v5;
      a1[5] = v25;
      uint64_t v27 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return swift_unknownObjectRelease();
      }
      if (v27 < 0) {
        goto LABEL_80;
      }
      unint64_t v28 = a1[1] + v27;
      if (v5 < v28) {
        goto LABEL_68;
      }
      a1[2] = v28;
      RasterizationOptions.init(from:)((uint64_t)a1, (uint64_t)&v51);
      double v29 = (void *)a1[5];
      if (!v29[2]) {
        goto LABEL_83;
      }
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v30 = v29[2];
        if (!v30) {
          goto LABEL_86;
        }
      }
      else
      {
        double v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
        uint64_t v30 = v29[2];
        if (!v30) {
          goto LABEL_86;
        }
      }
      uint64_t v31 = v30 - 1;
      uint64_t v32 = v29[v31 + 4];
      long long v29[2] = v31;
      a1[5] = v29;
      a1[2] = v32;
      int v56 = v51;
      int v55 = HIDWORD(v51);
      char v10 = v52;
      unint64_t v8 = v53;
      char v50 = v54;
      goto LABEL_7;
    }
    if (v15 == 2)
    {
      if ((v13 & 7) != 2) {
        goto LABEL_68;
      }
      uint64_t v33 = (void *)a1[5];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
      }
      unint64_t v35 = v33[2];
      unint64_t v34 = v33[3];
      if (v35 >= v34 >> 1) {
        uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v33);
      }
      _OWORD v33[2] = v35 + 1;
      v33[v35 + 4] = v5;
      a1[5] = v33;
      uint64_t v36 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return swift_unknownObjectRelease();
      }
      if (v36 < 0) {
        goto LABEL_81;
      }
      unint64_t v37 = a1[1] + v36;
      if (v5 < v37) {
        goto LABEL_68;
      }
      a1[2] = v37;
      double v38 = specialized CGPoint.init(from:)(a1);
      double v40 = (void *)a1[5];
      if (!v40[2]) {
        goto LABEL_84;
      }
      double v7 = v38;
      uint64_t v9 = v39;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v41 = v40[2];
        if (!v41) {
          goto LABEL_85;
        }
      }
      else
      {
        double v40 = specialized _ArrayBuffer._consumeAndCreateNew()(v40);
        uint64_t v41 = v40[2];
        if (!v41) {
          goto LABEL_85;
        }
      }
      uint64_t v42 = v41 - 1;
      uint64_t v43 = v40[v42 + 4];
      v40[2] = v42;
      a1[5] = v40;
      a1[2] = v43;
      goto LABEL_7;
    }
    if (v15 == 1) {
      break;
    }
    switch(v13 & 7)
    {
      case 0uLL:
        ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_unknownObjectRelease();
        }
        break;
      case 1uLL:
        unint64_t v12 = a1[1] + 8;
        if (v5 >= v12) {
          goto LABEL_6;
        }
        goto LABEL_68;
      case 2uLL:
        uint64_t v44 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_unknownObjectRelease();
        }
        if (v44 < 0) {
          goto LABEL_87;
        }
        unint64_t v12 = a1[1] + v44;
        if (v5 < v12) {
          goto LABEL_68;
        }
LABEL_6:
        a1[1] = v12;
        break;
      case 5uLL:
        unint64_t v12 = a1[1] + 4;
        if (v5 < v12) {
          goto LABEL_68;
        }
        goto LABEL_6;
      default:
        goto LABEL_68;
    }
LABEL_7:
    unint64_t v4 = a1[1];
    unint64_t v5 = a1[2];
    if (v4 >= v5)
    {
      a1[3] = 0;
      if (v6)
      {
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = v6;
        *(double *)(result + 24) = v7;
        *(void *)(result + 32) = v9;
        *(unsigned char *)(result + 40) = v56;
        *(_DWORD *)(result + 44) = v55;
        *(unsigned char *)(result + 48) = v10 & 1;
        *(_DWORD *)(result + 52) = v8;
        *(unsigned char *)(result + 56) = v50;
        *a2 = result | 0xA000000000000000;
        return result;
      }
LABEL_4:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
  }
  if ((v13 & 7) != 2) {
    goto LABEL_68;
  }
  unint64_t v16 = (void *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
  }
  unint64_t v18 = v16[2];
  unint64_t v17 = v16[3];
  if (v18 >= v17 >> 1) {
    unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v16);
  }
  v16[2] = v18 + 1;
  v16[v18 + 4] = v5;
  a1[5] = v16;
  uint64_t v19 = ProtobufDecoder.decodeVarint()();
  if (v2) {
    return swift_unknownObjectRelease();
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    unint64_t v20 = a1[1] + v19;
    if (v5 < v20) {
      goto LABEL_68;
    }
    a1[2] = v20;
    CodableRBDisplayListContents.init(from:)((uint64_t)a1, &v51);
    uint64_t v21 = (void *)a1[5];
    if (!v21[2]) {
      goto LABEL_82;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v22 = v21[2];
      if (!v22) {
        goto LABEL_67;
      }
    }
    else
    {
      uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew()(v21);
      uint64_t v22 = v21[2];
      if (!v22)
      {
LABEL_67:
        __break(1u);
LABEL_68:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return swift_unknownObjectRelease();
      }
    }
    uint64_t v23 = v22 - 1;
    uint64_t v24 = v21[v23 + 4];
    void v21[2] = v23;
    swift_unknownObjectRelease();
    a1[5] = v21;
    a1[2] = v24;
    uint64_t v6 = v51;
    goto LABEL_7;
  }
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
  __break(1u);
  uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v8);
  uint64_t v46 = v45[2];
  if (v46) {
    goto LABEL_78;
  }
  __break(1u);
  uint64_t v45 = (void *)a1[5];
  if (!v45[2])
  {
    __break(1u);
LABEL_90:
    uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew()(v45);
    uint64_t v46 = v45[2];
    if (v46) {
      goto LABEL_78;
    }
LABEL_75:
    __break(1u);
    uint64_t v45 = (void *)a1[5];
    if (v45[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v46 = v45[2];
        if (v46) {
          goto LABEL_78;
        }
        goto LABEL_94;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew()(v45);
    uint64_t v46 = v45[2];
    if (v46) {
      goto LABEL_78;
    }
LABEL_94:
    __break(1u);
    JUMPOUT(0x245D70538);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_90;
  }
  uint64_t v46 = v45[2];
  if (!v46) {
    goto LABEL_75;
  }
LABEL_78:
  uint64_t v47 = v46 - 1;
  uint64_t v48 = v45[v47 + 4];
  _OWORD v45[2] = v47;
  uint64_t result = swift_unknownObjectRelease();
  a1[5] = v45;
  a1[2] = v48;
  return result;
}

unint64_t closure #7 in DisplayList.Content.Value.init(from:)@<X0>(unint64_t result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    unsigned int v7 = 0;
    while (1)
    {
      uint64_t result = v3[3];
      if (result)
      {
        unint64_t v9 = v3[4];
        if (v5 < v9) {
          goto LABEL_14;
        }
        if (v9 < v5) {
          goto LABEL_31;
        }
        v3[3] = 0;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7) {
        goto LABEL_31;
      }
LABEL_14:
      if ((result & 0xFFFFFFFFFFFFFFF8) == 8)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_31;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_34:
            __break(1u);
            JUMPOUT(0x245D70714);
          }
          unint64_t v10 = v3[1] + result;
          if (v6 < v10)
          {
LABEL_31:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          v3[3] = 8;
          v3[4] = v10;
        }
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        unsigned int v7 = result;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            break;
          case 1uLL:
            unint64_t v8 = v3[1] + 8;
            if (v6 >= v8) {
              goto LABEL_6;
            }
            goto LABEL_31;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_34;
            }
            unint64_t v8 = v3[1] + result;
            if (v6 < v8) {
              goto LABEL_31;
            }
LABEL_6:
            v3[1] = v8;
            break;
          case 5uLL:
            unint64_t v8 = v3[1] + 4;
            if (v6 < v8) {
              goto LABEL_31;
            }
            goto LABEL_6;
          default:
            goto LABEL_31;
        }
      }
      unint64_t v5 = v3[1];
      unint64_t v6 = v3[2];
      if (v5 >= v6) {
        goto LABEL_4;
      }
    }
  }
  unsigned int v7 = 0;
LABEL_4:
  v3[3] = 0;
  *a2 = v7 | 0xC000000000000000;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DisplayList.Content.Value(long long *a1)
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance DisplayList.Content.Value@<X0>(id *a1@<X0>, unint64_t *a2@<X8>)
{
  return DisplayList.Content.Value.init(from:)(a1, a2);
}

void DisplayList.Effect.encode(to:)(void *a1)
{
  unint64_t v7 = *(void *)v1;
  uint64_t v8 = *(unsigned int *)(v1 + 8);
  switch(*(unsigned char *)(v1 + 12))
  {
    case 1:
      lazy protocol witness table accessor for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError();
      swift_allocError();
      swift_willThrow();
      return;
    case 2:
      Swift::UInt v10 = *(void *)v1;
      Swift::UInt v11 = 80;
      goto LABEL_42;
    case 3:
      outlined init with copy of AnyTrackedValue(v7 + 16, (uint64_t)&v79);
      uint64_t v24 = v81;
      uint64_t v25 = v82;
      unint64_t v26 = __swift_project_boxed_opaque_existential_1(&v79, v81);
      uint64_t v77 = v24;
      uint64_t v78 = *(void *)(v25 + 8);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v76);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v24 - 8) + 16))(boxed_opaque_existential_1, v26, v24);
      ProtobufEncoder.encodeVarint(_:)(0x6AuLL);
      unint64_t v23 = a1[1];
      unint64_t v12 = (void *)a1[3];
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_32;
      }
      goto LABEL_106;
    case 4:
      unint64_t v34 = a1;
      ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
      uint64_t v35 = a1[1];
      int64_t v36 = v35 + 4;
      if (!__OFADD__(v35, 4))
      {
        if (a1[2] < v36)
        {
          *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v36) = v7;
        }
        else
        {
          a1[1] = v36;
          *(_DWORD *)(*a1 + v35) = v7;
        }
        return;
      }
      __break(1u);
LABEL_108:
      unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
LABEL_44:
      unint64_t v39 = v34[2];
      unint64_t v38 = v34[3];
      unint64_t v40 = v39 + 1;
      if (v39 >= v38 >> 1) {
        unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v34);
      }
      v34[2] = v40;
      v34[v39 + 4] = v5;
      a1[3] = v34;
      if (!__OFADD__(v5, 1))
      {
        a1[1] = v5 + 1;
        if (v4) {
          __int16 v41 = 256;
        }
        else {
          __int16 v41 = 0;
        }
        closure #2 in DisplayList.Effect.encode(to:)((uint64_t)a1, (uint64_t)v83, v41 | v3, v7);
        if (!v2) {
          ProtobufEncoder.endLengthDelimited()();
        }
        _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v83, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        return;
      }
      __break(1u);
LABEL_110:
      unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
LABEL_57:
      unint64_t v52 = v34[2];
      unint64_t v51 = v34[3];
      if (v52 >= v51 >> 1) {
        unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v51 > 1), v52 + 1, 1, v34);
      }
      v34[2] = v52 + 1;
      v34[v52 + 4] = v40;
      a1[3] = v34;
      if (!__OFADD__(v40, 1))
      {
        a1[1] = v40 + 1;
        StrongHash.encode(to:)(a1);
LABEL_94:
        ProtobufEncoder.endLengthDelimited()();
        return;
      }
      __break(1u);
LABEL_112:
      unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
LABEL_64:
      unint64_t v59 = v34[2];
      unint64_t v58 = v34[3];
      if (v59 >= v58 >> 1) {
        unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v58 > 1), v59 + 1, 1, v34);
      }
      v34[2] = v59 + 1;
      v34[v59 + 4] = v40;
      a1[3] = v34;
      unint64_t v30 = v40 + 1;
      if (!__OFADD__(v40, 1)) {
        goto LABEL_67;
      }
      __break(1u);
      goto LABEL_114;
    case 5:
      outlined copy of GraphicsBlendMode(*(void *)v1, v8 & 1);
      ProtobufEncoder.encodeVarint(_:)(0x22uLL);
      uint64_t v4 = a1[1];
      unint64_t v12 = (void *)a1[3];
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_20;
      }
      goto LABEL_102;
    case 6:
      long long v37 = *(_OWORD *)(v7 + 32);
      v83[0] = *(_OWORD *)(v7 + 16);
      v83[1] = v37;
      char v84 = *(unsigned char *)(v7 + 48);
      __int16 v3 = *(unsigned __int8 *)(v7 + 49);
      LODWORD(v4) = *(unsigned __int8 *)(v7 + 50);
      LODWORD(v7) = *(_DWORD *)(v7 + 52);
      outlined init with take of Path.Storage((uint64_t)v83, (uint64_t)v92);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v92, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      ProtobufEncoder.encodeVarint(_:)(0x2AuLL);
      uint64_t v5 = a1[1];
      unint64_t v34 = (void *)a1[3];
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_44;
      }
      goto LABEL_108;
    case 7:
      uint64_t v8 = *(void *)(v7 + 16);
      uint64_t v4 = *(unsigned __int16 *)(v7 + 24);
      Swift::UInt v74 = *(unsigned int *)(v7 + 28);
      ProtobufEncoder.encodeVarint(_:)(0x32uLL);
      uint64_t v6 = a1[1];
      unint64_t v12 = (void *)a1[3];
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_13;
      }
      goto LABEL_100;
    case 8:
      uint64_t v42 = *(void *)(v7 + 24);
      uint64_t v43 = *(void *)(v7 + 32);
      uint64_t v44 = *(void *)(v7 + 40);
      uint64_t v46 = *(void *)(v7 + 48);
      uint64_t v45 = *(void *)(v7 + 56);
      uint64_t v47 = *(void *)(v7 + 64);
      uint64_t v48 = *(void *)(v7 + 72);
      uint64_t v49 = *(void *)(v7 + 80);
      switch(*(unsigned char *)(v7 + 88))
      {
        case 1:
          v90[0] = *(void *)(v7 + 16);
          v90[1] = v42;
          v90[2] = v43;
          v90[3] = v44;
          v90[4] = v46;
          v90[5] = v45;
          v90[6] = v47;
          v90[7] = v48;
          v90[8] = v49;
          ProtobufEncoder.encodeVarint(_:)(0x42uLL);
          specialized ProtobufEncoder.encodeMessage<A>(_:)((uint64_t)v90);
          break;
        case 2:
          double v71 = *(double *)(v7 + 16);
          double v72 = *(double *)(v7 + 24);
          double v73 = *(double *)(v7 + 32);
          ProtobufEncoder.encodeVarint(_:)(0xAAuLL);
          specialized ProtobufEncoder.encodeMessage<A>(_:)(v71, v72, v73);
          break;
        case 3:
          v90[9] = *(void *)(v7 + 16);
          v90[10] = v42;
          v90[11] = v43;
          v90[12] = v44;
          v90[13] = v46;
          v90[14] = v45;
          v90[15] = v47;
          v90[16] = v48;
          v90[17] = v49;
          specialized ProtobufEncoder.messageField<A>(_:_:)(22);
          break;
        default:
          *(void *)&long long v85 = *(void *)(v7 + 16);
          *((void *)&v85 + 1) = v42;
          uint64_t v86 = v43;
          uint64_t v87 = v44;
          uint64_t v88 = v46;
          uint64_t v89 = v45;
          ProtobufEncoder.encodeVarint(_:)(0x3AuLL);
          specialized ProtobufEncoder.encodeMessage<A>(_:)(&v85);
          break;
      }
      return;
    case 9:
      outlined init with take of GraphicsFilter(v7 + 16, (uint64_t)v91);
      outlined retain of GraphicsFilter((uint64_t)v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, uint64_t))outlined copy of GraphicsFilter);
      specialized ProtobufEncoder.messageField<A>(_:_:)(9, (uint64_t)v91);
      outlined retain of GraphicsFilter((uint64_t)v91, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, uint64_t))outlined consume of GraphicsFilter);
      return;
    case 0xA:
      outlined init with copy of AnyTrackedValue(v7 + 16, (uint64_t)&v79);
      outlined init with copy of AnyTrackedValue((uint64_t)&v79, (uint64_t)v76);
      ProtobufEncoder.encodeVarint(_:)(0x5AuLL);
      uint64_t v8 = a1[1];
      unint64_t v12 = (void *)a1[3];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      }
      unint64_t v14 = v12[2];
      unint64_t v13 = v12[3];
      if (v14 >= v13 >> 1) {
        unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
      }
      v12[2] = v14 + 1;
      v12[v14 + 4] = v8;
      a1[3] = v12;
      if (!__OFADD__(v8, 1))
      {
        a1[1] = v8 + 1;
        uint64_t v15 = v77;
        uint64_t v16 = v78;
        __swift_project_boxed_opaque_existential_1(v76, v77);
        _DisplayList_AnyEffectAnimation.encodeAnimation(to:)((uint64_t)a1, v15, v16);
        if (!v2) {
          ProtobufEncoder.endLengthDelimited()();
        }
        outlined destroy of CodableEffectAnimation((uint64_t)v76);
        goto LABEL_70;
      }
      __break(1u);
LABEL_100:
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
LABEL_13:
      unint64_t v7 = v12[2];
      unint64_t v17 = v12[3];
      if (v7 >= v17 >> 1) {
        unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v7 + 1, 1, v12);
      }
      v12[2] = v7 + 1;
      v12[v7 + 4] = v6;
      a1[3] = v12;
      if (!__OFADD__(v6, 1))
      {
        a1[1] = v6 + 1;
        specialized ProtobufEncoder.messageField<A>(_:_:)(1);
        if (v2) {
          return;
        }
        if (v74)
        {
          ProtobufEncoder.encodeVarint(_:)(0x10uLL);
          ProtobufEncoder.encodeVarint(_:)(v74);
        }
        goto LABEL_94;
      }
      __break(1u);
LABEL_102:
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
LABEL_20:
      unint64_t v19 = v12[2];
      unint64_t v18 = v12[3];
      unint64_t v20 = v19 + 1;
      if (v19 >= v18 >> 1) {
        unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v12);
      }
      v12[2] = v20;
      v12[v19 + 4] = v4;
      a1[3] = v12;
      if (!__OFADD__(v4, 1))
      {
        a1[1] = v4 + 1;
        if (v8)
        {
          lazy protocol witness table accessor for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError();
          swift_allocError();
          swift_willThrow();
          outlined consume of DisplayList.Effect(v7, v8, 5);
          return;
        }
LABEL_86:
        if ((v7 & 0x80000000) == 0)
        {
          ProtobufEncoder.encodeVarint(_:)(8uLL);
          ProtobufEncoder.encodeVarint(_:)(v7);
          goto LABEL_94;
        }
LABEL_117:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x245D7144CLL);
      }
      __break(1u);
LABEL_104:
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
LABEL_26:
      unint64_t v22 = v12[2];
      unint64_t v21 = v12[3];
      unint64_t v23 = v22 + 1;
      if (v22 >= v21 >> 1) {
        unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v12);
      }
      v12[2] = v23;
      v12[v22 + 4] = v20;
      a1[3] = v12;
      if (!__OFADD__(v20, 1))
      {
        a1[1] = v20 + 1;
        closure #4 in DisplayList.Effect.encode(to:)(a1, v7);
        if (v2) {
          return;
        }
        goto LABEL_94;
      }
      __break(1u);
LABEL_106:
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
LABEL_32:
      unint64_t v29 = v12[2];
      unint64_t v28 = v12[3];
      unint64_t v7 = v29 + 1;
      if (v29 >= v28 >> 1) {
        unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v12);
      }
      v12[2] = v7;
      v12[v29 + 4] = v23;
      a1[3] = v12;
      unint64_t v30 = v23 + 1;
      if (!__OFADD__(v23, 1))
      {
LABEL_67:
        a1[1] = v30;
        CodableViewFactory.encode(to:)((long long *)a1);
        if (!v2) {
          ProtobufEncoder.endLengthDelimited()();
        }
        outlined destroy of CodableViewFactory((uint64_t)v76);
LABEL_70:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
        return;
      }
      __break(1u);
LABEL_37:
      uint64_t v31 = *(void *)(v7 + 16);
      unint64_t v32 = *(unsigned int *)(v7 + 24) | ((unint64_t)*(unsigned __int8 *)(v7 + 28) << 32);
      char v33 = *(unsigned char *)(v7 + 29);
      outlined copy of ContentTransition.Storage(v31, v32, v33);
      swift_retain();
      specialized ProtobufEncoder.messageField<A>(_:_:)(16);
      outlined consume of ContentTransition.Storage(v31, v32, v33);
LABEL_62:
      swift_release();
      return;
    case 0xB:
      goto LABEL_37;
    case 0xC:
      outlined init with copy of AnyTrackedValue(v7 + 16, (uint64_t)&v79);
      uint64_t v54 = v81;
      uint64_t v55 = v82;
      int v56 = __swift_project_boxed_opaque_existential_1(&v79, v81);
      uint64_t v77 = v54;
      uint64_t v78 = *(void *)(v55 + 8);
      int v57 = __swift_allocate_boxed_opaque_existential_1(v76);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v54 - 8) + 16))(v57, v56, v54);
      ProtobufEncoder.encodeVarint(_:)(0x62uLL);
      unint64_t v40 = a1[1];
      unint64_t v34 = (void *)a1[3];
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_64;
      }
      goto LABEL_112;
    case 0xD:
      unint64_t v7 = *(void *)(v7 + 16);
      ProtobufEncoder.encodeVarint(_:)(0x72uLL);
      unint64_t v20 = a1[1];
      unint64_t v12 = (void *)a1[3];
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_26;
      }
      goto LABEL_104;
    case 0xE:
      goto LABEL_80;
    case 0xF:
      int v50 = *(_DWORD *)(v7 + 32);
      long long v75 = *(_OWORD *)(v7 + 16);
      ProtobufEncoder.encodeVarint(_:)(0x9AuLL);
      long long v79 = v75;
      int v80 = v50;
      unint64_t v40 = a1[1];
      unint64_t v34 = (void *)a1[3];
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_57;
      }
      goto LABEL_110;
    case 0x10:
    case 0x11:
      return;
    case 0x12:
      char v53 = *(unsigned char *)(v7 + 36);
      swift_retain();
      LOBYTE(v79) = v53;
      specialized ProtobufEncoder.messageField<A>(_:_:)(20);
      goto LABEL_62;
    case 0x13:
      if (!(v7 | v8)) {
        return;
      }
      if (v7 ^ 1 | *(unsigned int *)(v1 + 8))
      {
        ProtobufEncoder.encodeVarint(_:)(0x12uLL);
        uint64_t v67 = a1[1];
        unsigned __int8 v68 = (void *)a1[3];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unsigned __int8 v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68[2] + 1, 1, v68);
        }
        unint64_t v70 = v68[2];
        unint64_t v69 = v68[3];
        if (v70 >= v69 >> 1) {
          unsigned __int8 v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v69 > 1), v70 + 1, 1, v68);
        }
        _OWORD v68[2] = v70 + 1;
        v68[v70 + 4] = v67;
        a1[3] = v68;
        unint64_t v64 = v67 + 1;
        if (__OFADD__(v67, 1))
        {
          __break(1u);
          goto LABEL_117;
        }
      }
      else
      {
        ProtobufEncoder.encodeVarint(_:)(0xAuLL);
        uint64_t v60 = a1[1];
        int v61 = (void *)a1[3];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61[2] + 1, 1, v61);
        }
        unint64_t v63 = v61[2];
        unint64_t v62 = v61[3];
        if (v63 >= v62 >> 1) {
          int v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v62 > 1), v63 + 1, 1, v61);
        }
        v61[2] = v63 + 1;
        v61[v63 + 4] = v60;
        a1[3] = v61;
        unint64_t v64 = v60 + 1;
        if (__OFADD__(v60, 1))
        {
          __break(1u);
LABEL_80:
          ProtobufEncoder.encodeVarint(_:)(0x8AuLL);
          unint64_t v40 = a1[1];
          unint64_t v34 = (void *)a1[3];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_114:
          }
            unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
          unint64_t v66 = v34[2];
          unint64_t v65 = v34[3];
          unint64_t v7 = v66 + 1;
          if (v66 >= v65 >> 1) {
            unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v65 > 1), v66 + 1, 1, v34);
          }
          v34[2] = v7;
          v34[v66 + 4] = v40;
          a1[3] = v34;
          unint64_t v64 = v40 + 1;
          if (__OFADD__(v40, 1))
          {
            __break(1u);
            goto LABEL_86;
          }
        }
      }
      a1[1] = v64;
      goto LABEL_94;
    default:
      Swift::UInt v10 = *(void *)v1 & 1;
      Swift::UInt v11 = 120;
LABEL_42:
      ProtobufEncoder.encodeVarint(_:)(v11);
      ProtobufEncoder.encodeVarint(_:)(v10);
      return;
  }
}

void closure #2 in DisplayList.Effect.encode(to:)(uint64_t a1, uint64_t a2, __int16 a3, unsigned int a4)
{
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  if (v11 >= v10 >> 1) {
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v9);
  }
  uint64_t v9[2] = v11 + 1;
  v9[v11 + 4] = v8;
  *(void *)(a1 + 24) = v9;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 8) = v8 + 1;
    Path.encode(to:)();
    if (!v4)
    {
      ProtobufEncoder.endLengthDelimited()();
      int v12 = a3 & 0x101;
      if (v12 != 256)
      {
        ProtobufEncoder.encodeVarint(_:)(0x12uLL);
        specialized ProtobufEncoder.encodeMessage<A>(_:)(v12);
      }
      if (a4)
      {
        ProtobufEncoder.encodeVarint(_:)(0x18uLL);
        ProtobufEncoder.encodeVarint(_:)(a4);
      }
    }
  }
}

void closure #4 in DisplayList.Effect.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for AccessibilityNodeAttachment(0) - 8;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a2 + 16);
  if (v9)
  {
    uint64_t v10 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v20 = *(void *)(v6 + 72);
    v19[1] = a2;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AccessibilityNodeAttachment(v10, (uint64_t)v8);
      int64_t v11 = a1[1];
      int64_t v12 = a1[2];
      if (v11 >= v12)
      {
        int64_t v17 = v11 + 1;
        if (__OFADD__(v11, 1)) {
          goto LABEL_22;
        }
        if (v12 < v17)
        {
          unint64_t v18 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v17);
        }
        else
        {
          a1[1] = v17;
          unint64_t v18 = (unsigned char *)(*a1 + v11);
        }
        unsigned char *v18 = 10;
        int64_t v13 = a1[1];
      }
      else
      {
        *(unsigned char *)(*a1 + v11) = 10;
        int64_t v13 = v11 + 1;
        a1[1] = v11 + 1;
      }
      unint64_t v14 = (void *)a1[3];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      }
      unint64_t v16 = v14[2];
      unint64_t v15 = v14[3];
      if (v16 >= v15 >> 1) {
        unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
      }
      v14[2] = v16 + 1;
      v14[v16 + 4] = v13;
      a1[3] = v14;
      if (__OFADD__(v13, 1)) {
        break;
      }
      a1[1] = v13 + 1;
      AccessibilityNodeAttachment.encode(to:)(a1);
      if (v2)
      {
        _sypSgWOhTm_8((uint64_t)v8, type metadata accessor for AccessibilityNodeAttachment);
LABEL_19:
        swift_bridgeObjectRelease();
        return;
      }
      ProtobufEncoder.endLengthDelimited()();
      _sypSgWOhTm_8((uint64_t)v8, type metadata accessor for AccessibilityNodeAttachment);
      v10 += v20;
      if (!--v9) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
}

void DisplayList.Effect.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v178 = *MEMORY[0x263EF8340];
  uint64_t v175 = 0;
  int v176 = 0;
  char v5 = 19;
  char v177 = 19;
  unint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  if (v6 >= v7)
  {
    int v10 = 0;
    uint64_t v11 = 0;
    goto LABEL_4;
  }
  uint64_t v165 = a2;
  uint64_t v8 = a1 + 5;
  uint64_t v9 = &unk_26FA8D488;
  while (2)
  {
    unint64_t v13 = a1[3];
    if (!v13) {
      goto LABEL_13;
    }
    unint64_t v14 = a1[4];
    if (v6 >= v14)
    {
      if (v14 < v6) {
        goto LABEL_236;
      }
      a1[3] = 0;
LABEL_13:
      unint64_t v15 = ProtobufDecoder.decodeVarint()();
      if (v3) {
        goto LABEL_254;
      }
      unint64_t v13 = v15;
      if (v15 <= 7) {
        goto LABEL_236;
      }
    }
    switch(v13 >> 3)
    {
      case 1uLL:
        switch(v13 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_254;
            }
            goto LABEL_214;
          case 1uLL:
            unint64_t v149 = a1[1] + 8;
            goto LABEL_212;
          case 2uLL:
            uint64_t v150 = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_254;
            }
            if (v150 < 0) {
              goto LABEL_295;
            }
            unint64_t v149 = a1[1] + v150;
LABEL_212:
            if (v7 < v149) {
              goto LABEL_236;
            }
            a1[1] = v149;
LABEL_214:
            outlined consume of DisplayList.Effect(v175, v176, v177);
            uint64_t v151 = 1;
            break;
          case 5uLL:
            unint64_t v149 = a1[1] + 4;
            goto LABEL_212;
          default:
            goto LABEL_236;
        }
        goto LABEL_223;
      case 2uLL:
        switch(v13 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_254;
            }
            goto LABEL_222;
          case 1uLL:
            unint64_t v152 = a1[1] + 8;
            goto LABEL_220;
          case 2uLL:
            uint64_t v153 = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_254;
            }
            if (v153 < 0) {
              goto LABEL_296;
            }
            unint64_t v152 = a1[1] + v153;
LABEL_220:
            if (v7 < v152) {
              goto LABEL_236;
            }
            a1[1] = v152;
LABEL_222:
            outlined consume of DisplayList.Effect(v175, v176, v177);
            uint64_t v151 = 2;
            break;
          case 5uLL:
            unint64_t v152 = a1[1] + 4;
            goto LABEL_220;
          default:
            goto LABEL_236;
        }
LABEL_223:
        uint64_t v175 = v151;
        int v176 = 0;
        char v177 = 19;
        goto LABEL_8;
      case 3uLL:
        if ((v13 & 7) == 2)
        {
          uint64_t v147 = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_254;
          }
          if (v147 < 0) {
            goto LABEL_287;
          }
          unint64_t v16 = (unsigned int *)a1[1];
          if (v7 < (unint64_t)v16 + v147) {
            goto LABEL_236;
          }
          a1[3] = 29;
          a1[4] = (char *)v16 + v147;
        }
        else
        {
          if ((v13 & 7) != 5) {
            goto LABEL_236;
          }
          unint64_t v16 = (unsigned int *)a1[1];
        }
        if (v7 < (unint64_t)(v16 + 1)) {
          goto LABEL_236;
        }
        uint64_t v148 = *v16;
        a1[1] = v16 + 1;
        outlined consume of DisplayList.Effect(v175, v176, v177);
        uint64_t v175 = v148;
        int v176 = 0;
        char v12 = 4;
        goto LABEL_7;
      case 4uLL:
        if ((v13 & 7) != 2) {
          goto LABEL_236;
        }
        int64_t v17 = (void *)*v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
        }
        unint64_t v19 = v17[2];
        unint64_t v18 = v17[3];
        if (v19 >= v18 >> 1) {
          int64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v17);
        }
        v17[2] = v19 + 1;
        v17[v19 + 4] = v7;
        a1[5] = v17;
        uint64_t v20 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_254;
        }
        if (v20 < 0)
        {
          __break(1u);
LABEL_256:
          __break(1u);
LABEL_257:
          __break(1u);
LABEL_258:
          __break(1u);
LABEL_259:
          __break(1u);
LABEL_260:
          __break(1u);
LABEL_261:
          __break(1u);
LABEL_262:
          __break(1u);
LABEL_263:
          __break(1u);
LABEL_264:
          __break(1u);
LABEL_265:
          __break(1u);
LABEL_266:
          __break(1u);
LABEL_267:
          __break(1u);
LABEL_268:
          __break(1u);
LABEL_269:
          __break(1u);
LABEL_270:
          __break(1u);
LABEL_271:
          __break(1u);
LABEL_272:
          __break(1u);
LABEL_273:
          __break(1u);
LABEL_274:
          __break(1u);
LABEL_275:
          __break(1u);
LABEL_276:
          __break(1u);
LABEL_277:
          __break(1u);
LABEL_278:
          __break(1u);
LABEL_279:
          __break(1u);
LABEL_280:
          __break(1u);
LABEL_281:
          __break(1u);
LABEL_282:
          __break(1u);
LABEL_283:
          __break(1u);
LABEL_284:
          __break(1u);
LABEL_285:
          __break(1u);
LABEL_286:
          __break(1u);
LABEL_287:
          __break(1u);
LABEL_288:
          __break(1u);
LABEL_289:
          __break(1u);
LABEL_290:
          __break(1u);
LABEL_291:
          __break(1u);
LABEL_292:
          __break(1u);
LABEL_293:
          __break(1u);
LABEL_294:
          __break(1u);
LABEL_295:
          __break(1u);
LABEL_296:
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
        }
        unint64_t v21 = a1[1] + v20;
        if (v7 < v21) {
          goto LABEL_236;
        }
        a1[2] = v21;
        closure #1 in DisplayList.Effect.init(from:)((Swift::UInt)a1, (uint64_t)&v175);
        unint64_t v22 = (void *)*v8;
        if (!*(void *)(*v8 + 16)) {
          goto LABEL_270;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v23 = v22[2];
          if (!v23) {
            goto LABEL_280;
          }
        }
        else
        {
          unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew()(v22);
          uint64_t v23 = v22[2];
          if (!v23) {
            goto LABEL_280;
          }
        }
        uint64_t v24 = v23 - 1;
        uint64_t v25 = v22[v24 + 4];
        void v22[2] = v24;
        a1[5] = v22;
        a1[2] = v25;
        goto LABEL_8;
      case 5uLL:
        if ((v13 & 7) != 2) {
          goto LABEL_236;
        }
        unint64_t v26 = (void *)*v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
        }
        unint64_t v28 = v26[2];
        unint64_t v27 = v26[3];
        if (v28 >= v27 >> 1) {
          unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v26);
        }
        void v26[2] = v28 + 1;
        v26[v28 + 4] = v7;
        a1[5] = v26;
        uint64_t v29 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_254;
        }
        if (v29 < 0) {
          goto LABEL_256;
        }
        unint64_t v30 = a1[1] + v29;
        if (v7 < v30) {
          goto LABEL_236;
        }
        a1[2] = v30;
        closure #2 in DisplayList.Effect.init(from:)(a1, (uint64_t)&v170);
        uint64_t v31 = (void *)*v8;
        if (!*(void *)(*v8 + 16)) {
          goto LABEL_271;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v32 = v31[2];
          if (!v32) {
            goto LABEL_281;
          }
        }
        else
        {
          uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew()(v31);
          uint64_t v32 = v31[2];
          if (!v32) {
            goto LABEL_281;
          }
        }
        goto LABEL_60;
      case 6uLL:
        if ((v13 & 7) != 2) {
          goto LABEL_236;
        }
        char v33 = (void *)*v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
        }
        unint64_t v35 = v33[2];
        unint64_t v34 = v33[3];
        if (v35 >= v34 >> 1) {
          char v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v33);
        }
        _OWORD v33[2] = v35 + 1;
        v33[v35 + 4] = v7;
        a1[5] = v33;
        uint64_t v36 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_254;
        }
        if (v36 < 0) {
          goto LABEL_257;
        }
        unint64_t v37 = a1[1] + v36;
        if (v7 < v37) {
          goto LABEL_236;
        }
        a1[2] = v37;
        closure #3 in DisplayList.Effect.init(from:)(a1, (uint64_t)&v170);
        uint64_t v31 = (void *)*v8;
        if (!*(void *)(*v8 + 16)) {
          goto LABEL_272;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v32 = v31[2];
          if (!v32) {
            goto LABEL_282;
          }
        }
        else
        {
          uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew()(v31);
          uint64_t v32 = v31[2];
          if (!v32) {
            goto LABEL_282;
          }
        }
LABEL_60:
        uint64_t v38 = v32 - 1;
        uint64_t v39 = v31[v38 + 4];
        v31[2] = v38;
        a1[5] = v31;
        a1[2] = v39;
        uint64_t v40 = v170;
        int v41 = DWORD2(v170);
        char v42 = BYTE12(v170);
        outlined consume of DisplayList.Effect(v175, v176, v177);
        uint64_t v175 = v40;
        int v176 = v41;
        char v177 = v42;
        goto LABEL_8;
      case 7uLL:
        uint64_t v43 = swift_allocObject();
        if ((v13 & 7) != 2) {
          goto LABEL_241;
        }
        uint64_t v44 = (void *)*v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1, v44);
        }
        unint64_t v46 = v44[2];
        unint64_t v45 = v44[3];
        if (v46 >= v45 >> 1) {
          uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v45 > 1), v46 + 1, 1, v44);
        }
        v44[2] = v46 + 1;
        v44[v46 + 4] = v7;
        a1[5] = v44;
        uint64_t v47 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_253;
        }
        if (v47 < 0) {
          goto LABEL_258;
        }
        unint64_t v48 = a1[1] + v47;
        if (v7 < v48) {
          goto LABEL_241;
        }
        a1[2] = v48;
        *(void *)&long long v171 = 0;
        long long v170 = 0x3FF0000000000000uLL;
        *((void *)&v171 + 1) = 0x3FF0000000000000;
        long long v172 = 0uLL;
        closure #1 in CGAffineTransform.init(from:)((unint64_t)&v170, a1, v169);
        uint64_t v49 = (void *)*v8;
        if (!*(void *)(*v8 + 16)) {
          goto LABEL_273;
        }
        long long v161 = v171;
        long long v163 = v170;
        long long v159 = v172;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v50 = v49[2];
          if (!v50) {
            goto LABEL_283;
          }
        }
        else
        {
          uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew()(v49);
          uint64_t v50 = v49[2];
          if (!v50) {
            goto LABEL_283;
          }
        }
        uint64_t v51 = v50 - 1;
        uint64_t v52 = v49[v51 + 4];
        _OWORD v49[2] = v51;
        a1[5] = v49;
        a1[2] = v52;
        *(_OWORD *)(v43 + 16) = v163;
        *(_OWORD *)(v43 + 32) = v161;
        *(_OWORD *)(v43 + 48) = v159;
        *(void *)(v43 + 72) = 0;
        *(void *)(v43 + 80) = 0;
        *(void *)(v43 + 64) = 0;
        *(unsigned char *)(v43 + 88) = 0;
        goto LABEL_85;
      case 8uLL:
        uint64_t v43 = swift_allocObject();
        if ((v13 & 7) != 2) {
          goto LABEL_241;
        }
        char v53 = (void *)*v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53[2] + 1, 1, v53);
        }
        unint64_t v55 = v53[2];
        unint64_t v54 = v53[3];
        if (v55 >= v54 >> 1) {
          char v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v54 > 1), v55 + 1, 1, v53);
        }
        v53[2] = v55 + 1;
        v53[v55 + 4] = v7;
        a1[5] = v53;
        uint64_t v56 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_253;
        }
        if (v56 < 0) {
          goto LABEL_259;
        }
        unint64_t v57 = a1[1] + v56;
        if (v7 < v57) {
          goto LABEL_241;
        }
        a1[2] = v57;
        long long v171 = 0uLL;
        long long v170 = 0x3FF0000000000000uLL;
        long long v172 = 0x3FF0000000000000uLL;
        long long v173 = 0uLL;
        uint64_t v174 = 0x3FF0000000000000;
        closure #1 in ProjectionTransform.init(from:)((unint64_t)&v170, a1, v169);
        unint64_t v58 = (void *)*v8;
        if (!*(void *)(*v8 + 16)) {
          goto LABEL_274;
        }
        long long v162 = v171;
        long long v164 = v170;
        long long v158 = v173;
        long long v160 = v172;
        uint64_t v59 = v174;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v60 = v58[2];
          if (!v60) {
            goto LABEL_284;
          }
        }
        else
        {
          unint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew()(v58);
          uint64_t v60 = v58[2];
          if (!v60) {
            goto LABEL_284;
          }
        }
        uint64_t v61 = v60 - 1;
        uint64_t v62 = v58[v61 + 4];
        v58[2] = v61;
        a1[5] = v58;
        a1[2] = v62;
        *(_OWORD *)(v43 + 16) = v164;
        *(_OWORD *)(v43 + 32) = v162;
        *(_OWORD *)(v43 + 48) = v160;
        *(_OWORD *)(v43 + 64) = v158;
        *(void *)(v43 + 80) = v59;
        *(unsigned char *)(v43 + 88) = 1;
LABEL_85:
        outlined consume of DisplayList.Effect(v175, v176, v177);
        uint64_t v175 = v43;
        goto LABEL_6;
      case 9uLL:
        uint64_t v63 = swift_allocObject();
        if ((v13 & 7) != 2) {
          goto LABEL_241;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          goto LABEL_253;
        }
        GraphicsFilter.init(from:)(a1, v63 + 16);
        uint64_t v3 = 0;
        if (!*(void *)(*v8 + 16)) {
          goto LABEL_266;
        }
        uint64_t v64 = specialized Array._customRemoveLast()();
        if (!v64) {
          uint64_t v64 = specialized Array.remove(at:)(*(void *)(*v8 + 16) - 1);
        }
        a1[2] = v64;
        outlined consume of DisplayList.Effect(v175, v176, v177);
        uint64_t v175 = v63;
        int v176 = 0;
        char v12 = 9;
        goto LABEL_7;
      case 0xAuLL:
        if ((v13 & 7) == 0) {
          goto LABEL_98;
        }
        if ((v13 & 7) != 2) {
          goto LABEL_236;
        }
        uint64_t v65 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_254;
        }
        if (v65 < 0) {
          goto LABEL_285;
        }
        unint64_t v66 = a1[1] + v65;
        if (v7 < v66) {
          goto LABEL_236;
        }
        a1[3] = 80;
        a1[4] = v66;
LABEL_98:
        unsigned __int8 v67 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_254;
        }
        uint64_t v68 = v67;
        outlined consume of DisplayList.Effect(v175, v176, v177);
        uint64_t v175 = v68;
        int v176 = 0;
        char v177 = 2;
        goto LABEL_8;
      case 0xBuLL:
        if ((v13 & 7) != 2) {
          goto LABEL_236;
        }
        unint64_t v69 = (void *)*v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69[2] + 1, 1, v69);
        }
        unint64_t v71 = v69[2];
        unint64_t v70 = v69[3];
        if (v71 >= v70 >> 1) {
          unint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v70 > 1), v71 + 1, 1, v69);
        }
        v69[2] = v71 + 1;
        v69[v71 + 4] = v7;
        a1[5] = v69;
        uint64_t v72 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_254;
        }
        if (v72 < 0) {
          goto LABEL_260;
        }
        unint64_t v73 = a1[1] + v72;
        if (v7 < v73) {
          goto LABEL_236;
        }
        a1[2] = v73;
        CodableEffectAnimation.init(from:)(a1, (uint64_t)&v170);
        if (!specialized Array._getCount()(*v8)) {
          goto LABEL_275;
        }
        uint64_t v74 = specialized Array._customRemoveLast()();
        if (v74) {
          goto LABEL_112;
        }
        uint64_t v75 = specialized Array._getCount()(*v8);
        BOOL v76 = __OFSUB__(v75, 1);
        unint64_t v77 = v75 - 1;
        if (v76) {
          goto LABEL_291;
        }
        uint64_t v74 = specialized Array.remove(at:)(v77);
LABEL_112:
        a1[2] = v74;
        uint64_t v78 = swift_allocObject();
        outlined init with take of ScrollStateRequest(&v170, v78 + 16);
        outlined consume of DisplayList.Effect(v175, v176, v177);
        uint64_t v175 = v78;
        int v176 = 0;
        char v12 = 10;
        goto LABEL_7;
      case 0xCuLL:
        if ((v13 & 7) != 2) {
          goto LABEL_236;
        }
        long long v79 = (void *)*v8;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v8 = v79;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          long long v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79[2] + 1, 1, v79);
          *uint64_t v8 = v79;
        }
        unint64_t v82 = v79[2];
        unint64_t v81 = v79[3];
        if (v82 >= v81 >> 1) {
          *uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v81 > 1), v82 + 1, 1, v79);
        }
        uint64_t v83 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v82, v7);
        _ViewInputs.base.modify(v83, v84);
        uint64_t v85 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_254;
        }
        if (v85 < 0) {
          goto LABEL_261;
        }
        unint64_t v86 = a1[1] + v85;
        if (v7 < v86) {
          goto LABEL_236;
        }
        a1[2] = v86;
        CodableViewFactory.init(from:)((uint64_t)a1, (uint64_t)&v170);
        if (!specialized Array._getCount()(*v8)) {
          goto LABEL_276;
        }
        uint64_t v87 = specialized Array._customRemoveLast()();
        if (v87) {
          goto LABEL_125;
        }
        uint64_t v88 = specialized Array._getCount()(*v8);
        BOOL v76 = __OFSUB__(v88, 1);
        unint64_t v89 = v88 - 1;
        if (v76) {
          goto LABEL_292;
        }
        uint64_t v87 = specialized Array.remove(at:)(v89);
LABEL_125:
        a1[2] = v87;
        uint64_t v90 = swift_allocObject();
        outlined init with copy of AnyTrackedValue((uint64_t)&v170, (uint64_t)v169);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for AnyViewFactory);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for _DisplayList_ViewFactory);
        if ((swift_dynamicCast() & 1) == 0)
        {
          lazy protocol witness table accessor for type CodableViewFactory.Error and conformance CodableViewFactory.Error();
          long long v166 = 0u;
          long long v167 = 0u;
          uint64_t v168 = 0;
          swift_allocError();
          *uint64_t v154 = 0;
          v154[1] = 0;
          swift_willThrow();
          id v155 = (unint64_t *)&lazy cache variable for type metadata for _DisplayList_ViewFactory?;
          CGFloat v156 = &lazy cache variable for type metadata for _DisplayList_ViewFactory;
LABEL_252:
          outlined destroy of AnyTrackedValue?((uint64_t)&v166, v155, v156);
          outlined destroy of CodableViewFactory((uint64_t)&v170);
LABEL_253:
          swift_deallocUninitializedObject();
LABEL_254:
          outlined consume of DisplayList.Effect(v175, v176, v177);
          return;
        }
        outlined init with take of ScrollStateRequest(&v166, v90 + 16);
        outlined destroy of CodableViewFactory((uint64_t)&v170);
        outlined consume of DisplayList.Effect(v175, v176, v177);
        uint64_t v175 = v90;
        int v176 = 0;
        char v12 = 12;
LABEL_7:
        char v177 = v12;
LABEL_8:
        unint64_t v6 = a1[1];
        unint64_t v7 = a1[2];
        if (v6 < v7) {
          continue;
        }
        uint64_t v11 = v175;
        int v10 = v176;
        char v5 = v177;
        a2 = v165;
LABEL_4:
        a1[3] = 0;
        *(void *)a2 = v11;
        *(_DWORD *)(a2 + 8) = v10;
        *(unsigned char *)(a2 + 12) = v5;
        return;
      case 0xDuLL:
        if ((v13 & 7) != 2) {
          goto LABEL_236;
        }
        long long v91 = (void *)*v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v91[2] + 1, 1, v91);
        }
        unint64_t v93 = v91[2];
        unint64_t v92 = v91[3];
        if (v93 >= v92 >> 1) {
          long long v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v92 > 1), v93 + 1, 1, v91);
        }
        v91[2] = v93 + 1;
        v91[v93 + 4] = v7;
        a1[5] = v91;
        uint64_t v94 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_254;
        }
        if (v94 < 0) {
          goto LABEL_262;
        }
        unint64_t v95 = a1[1] + v94;
        if (v7 < v95) {
          goto LABEL_236;
        }
        a1[2] = v95;
        CodableViewFactory.init(from:)((uint64_t)a1, (uint64_t)&v170);
        uint64_t v96 = (void *)*v8;
        if (!*(void *)(*v8 + 16)) {
          goto LABEL_277;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v97 = v96[2];
          if (!v97) {
            goto LABEL_235;
          }
        }
        else
        {
          uint64_t v96 = specialized _ArrayBuffer._consumeAndCreateNew()(v96);
          uint64_t v97 = v96[2];
          if (!v97)
          {
LABEL_235:
            __break(1u);
LABEL_236:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            goto LABEL_254;
          }
        }
        uint64_t v98 = v97 - 1;
        uint64_t v99 = v96[v98 + 4];
        v96[2] = v98;
        a1[5] = v96;
        a1[2] = v99;
        uint64_t v100 = swift_allocObject();
        outlined init with copy of AnyTrackedValue((uint64_t)&v170, (uint64_t)v169);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for AnyViewFactory);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for PlatformGroupFactory);
        if (swift_dynamicCast())
        {
          outlined init with take of ScrollStateRequest(&v166, v100 + 16);
          outlined destroy of CodableViewFactory((uint64_t)&v170);
          outlined consume of DisplayList.Effect(v175, v176, v177);
          uint64_t v175 = v100;
          int v176 = 0;
          char v12 = 3;
          goto LABEL_7;
        }
        lazy protocol witness table accessor for type CodableViewFactory.Error and conformance CodableViewFactory.Error();
        long long v166 = 0u;
        long long v167 = 0u;
        uint64_t v168 = 0;
        swift_allocError();
        *uint64_t v157 = 0;
        v157[1] = 0;
        swift_willThrow();
        id v155 = (unint64_t *)&lazy cache variable for type metadata for PlatformGroupFactory?;
        CGFloat v156 = &lazy cache variable for type metadata for PlatformGroupFactory;
        goto LABEL_252;
      case 0xEuLL:
        *(void *)&long long v170 = MEMORY[0x263F8EE78];
        if ((v13 & 7) == 2)
        {
          ProtobufDecoder.beginMessage()();
          if (v3) {
            goto LABEL_244;
          }
          closure #4 in DisplayList.Effect.init(from:)((uint64_t)a1, (unint64_t *)&v170);
          uint64_t v3 = 0;
          if (!specialized Array._getCount()(*v8)) {
            goto LABEL_267;
          }
          uint64_t v101 = specialized Array._customRemoveLast()();
          if (!v101)
          {
            uint64_t v102 = specialized Array._getCount()(*v8);
            BOOL v76 = __OFSUB__(v102, 1);
            unint64_t v103 = v102 - 1;
            if (v76) {
              goto LABEL_288;
            }
            uint64_t v101 = specialized Array.remove(at:)(v103);
          }
          a1[2] = v101;
          uint64_t v104 = swift_allocObject();
          *(void *)(v104 + 16) = v170;
          outlined consume of DisplayList.Effect(v175, v176, v177);
          uint64_t v175 = v104;
          int v176 = 0;
          char v12 = 13;
          goto LABEL_7;
        }
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_244:
        swift_bridgeObjectRelease();
        goto LABEL_254;
      case 0xFuLL:
        if ((v13 & 7) == 0) {
          goto LABEL_153;
        }
        if ((v13 & 7) != 2) {
          goto LABEL_236;
        }
        uint64_t v105 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_254;
        }
        if (v105 < 0) {
          goto LABEL_286;
        }
        unint64_t v106 = a1[1] + v105;
        if (v7 < v106) {
          goto LABEL_236;
        }
        a1[3] = 120;
        a1[4] = v106;
LABEL_153:
        uint64_t v107 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_254;
        }
        BOOL v108 = v107 != 0;
        outlined consume of DisplayList.Effect(v175, v176, v177);
        uint64_t v175 = v108;
        int v176 = 0;
        char v177 = 0;
        goto LABEL_8;
      case 0x10uLL:
        uint64_t v109 = swift_allocObject();
        if ((v13 & 7) != 2) {
          goto LABEL_241;
        }
        unint64_t v110 = (void *)*v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v110[2] + 1, 1, v110);
        }
        unint64_t v112 = v110[2];
        unint64_t v111 = v110[3];
        if (v112 >= v111 >> 1) {
          unint64_t v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v111 > 1), v112 + 1, 1, v110);
        }
        v110[2] = v112 + 1;
        v110[v112 + 4] = v7;
        a1[5] = v110;
        uint64_t v113 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_253;
        }
        if (v113 < 0) {
          goto LABEL_263;
        }
        unint64_t v114 = a1[1] + v113;
        if (v7 < v114) {
          goto LABEL_241;
        }
        a1[2] = v114;
        ContentTransition.State.init(from:)((unint64_t)a1, v109 + 16);
        if (!specialized Array._getCount()(*v8)) {
          goto LABEL_278;
        }
        uint64_t v115 = specialized Array._customRemoveLast()();
        if (v115) {
          goto LABEL_167;
        }
        uint64_t v116 = specialized Array._getCount()(*v8);
        BOOL v76 = __OFSUB__(v116, 1);
        unint64_t v117 = v116 - 1;
        if (v76) {
          goto LABEL_293;
        }
        uint64_t v115 = specialized Array.remove(at:)(v117);
LABEL_167:
        a1[2] = v115;
        outlined consume of DisplayList.Effect(v175, v176, v177);
        uint64_t v175 = v109;
        int v176 = 0;
        char v12 = 11;
        goto LABEL_7;
      case 0x11uLL:
        if ((v13 & 7) != 2) {
          goto LABEL_236;
        }
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v118 = *(void *)(a1[5] + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v118);
        uint64_t v119 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v118, v7);
        _ViewInputs.base.modify(v119, v120);
        uint64_t v121 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_254;
        }
        if (v121 < 0) {
          goto LABEL_264;
        }
        unint64_t v122 = a1[1] + v121;
        if (v7 < v122) {
          goto LABEL_236;
        }
        a1[2] = v122;
        if (!specialized Array._getCount()(a1[5])) {
          goto LABEL_268;
        }
        uint64_t v123 = specialized Array._customRemoveLast()();
        if (v123) {
          goto LABEL_176;
        }
        uint64_t v124 = specialized Array._getCount()(*v8);
        BOOL v76 = __OFSUB__(v124, 1);
        unint64_t v125 = v124 - 1;
        if (v76) {
          goto LABEL_289;
        }
        uint64_t v123 = specialized Array.remove(at:)(v125);
LABEL_176:
        a1[2] = v123;
        uint64_t v126 = swift_allocEmptyBox();
        outlined consume of DisplayList.Effect(v175, v176, v177);
        uint64_t v175 = v126;
        int v176 = 0;
        char v12 = 14;
        goto LABEL_7;
      case 0x13uLL:
        uint64_t v128 = swift_allocObject();
        if ((v13 & 7) != 2) {
          goto LABEL_241;
        }
        uint64_t v129 = v9;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v130 = *(void *)(a1[5] + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v130);
        uint64_t v131 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v130, v7);
        _ViewInputs.base.modify(v131, v132);
        uint64_t v133 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_253;
        }
        if (v133 < 0) {
          goto LABEL_265;
        }
        unint64_t v134 = a1[1] + v133;
        if (v7 >= v134)
        {
          uint64_t v9 = v129;
          a1[2] = v134;
          StrongHash.init(from:)((unint64_t)a1, (_DWORD *)(v128 + 16));
          if (!specialized Array._getCount()(*v8)) {
            goto LABEL_279;
          }
          uint64_t v135 = specialized Array._customRemoveLast()();
          if (!v135)
          {
            uint64_t v136 = specialized Array._getCount()(*v8);
            BOOL v76 = __OFSUB__(v136, 1);
            unint64_t v137 = v136 - 1;
            if (v76) {
              goto LABEL_294;
            }
            uint64_t v135 = specialized Array.remove(at:)(v137);
          }
          a1[2] = v135;
          outlined consume of DisplayList.Effect(v175, v176, v177);
          uint64_t v175 = v128;
          int v176 = 0;
          char v12 = 15;
          goto LABEL_7;
        }
LABEL_241:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        goto LABEL_253;
      case 0x14uLL:
        uint64_t v138 = swift_allocObject();
        if ((v13 & 7) != 2) {
          goto LABEL_241;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          goto LABEL_253;
        }
        DisplayList.InterpolatorAnimation.init(from:)((unint64_t)a1, (_OWORD *)(v138 + 16));
        uint64_t v3 = 0;
        if (!specialized Array._getCount()(*v8)) {
          goto LABEL_269;
        }
        uint64_t v139 = specialized Array._customRemoveLast()();
        if (v139) {
          goto LABEL_194;
        }
        uint64_t v140 = specialized Array._getCount()(*v8);
        BOOL v76 = __OFSUB__(v140, 1);
        unint64_t v141 = v140 - 1;
        if (v76) {
          goto LABEL_290;
        }
        uint64_t v139 = specialized Array.remove(at:)(v141);
LABEL_194:
        a1[2] = v139;
        outlined consume of DisplayList.Effect(v175, v176, v177);
        uint64_t v175 = v138;
        int v176 = 0;
        char v12 = 18;
        goto LABEL_7;
      case 0x15uLL:
        uint64_t v142 = swift_allocObject();
        if ((v13 & 7) != 2) {
          goto LABEL_239;
        }
        specialized ProtobufDecoder.decodeMessage<A>()((double *)&v170);
        if (v3) {
          goto LABEL_253;
        }
        uint64_t v143 = v171;
        *(_OWORD *)(v142 + 16) = v170;
        *(void *)(v142 + 32) = v143;
        *(_OWORD *)(v142 + 40) = 0u;
        *(_OWORD *)(v142 + 56) = 0u;
        *(_OWORD *)(v142 + 72) = 0u;
        *(unsigned char *)(v142 + 88) = 2;
        goto LABEL_5;
      case 0x16uLL:
        uint64_t v142 = swift_allocObject();
        if ((v13 & 7) == 2)
        {
          specialized ProtobufDecoder.decodeMessage<A>()((double *)&v170);
          if (v3) {
            goto LABEL_253;
          }
          uint64_t v144 = v174;
          long long v145 = v171;
          *(_OWORD *)(v142 + 16) = v170;
          *(_OWORD *)(v142 + 32) = v145;
          long long v146 = v173;
          *(_OWORD *)(v142 + 48) = v172;
          *(_OWORD *)(v142 + 64) = v146;
          *(void *)(v142 + 80) = v144;
          *(unsigned char *)(v142 + 88) = 3;
LABEL_5:
          outlined consume of DisplayList.Effect(v175, v176, v177);
          uint64_t v175 = v142;
LABEL_6:
          int v176 = 0;
          char v12 = 8;
          goto LABEL_7;
        }
LABEL_239:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        goto LABEL_253;
      default:
        *(void *)&long long v170 = v13;
        ProtobufDecoder.skipField(_:)((SwiftUI::ProtobufFormat::Field)&v170);
        uint64_t v3 = v127;
        if (v127) {
          goto LABEL_254;
        }
        goto LABEL_8;
    }
  }
}

Swift::UInt closure #1 in DisplayList.Effect.init(from:)(Swift::UInt result, uint64_t a2)
{
  Swift::UInt v3 = result;
  unint64_t v4 = *(void *)(result + 8);
  if (v4 >= *(void *)(result + 16))
  {
    *(void *)(result + 24) = 0;
    return result;
  }
  uint64_t result = *(void *)(result + 24);
  if (result)
  {
    unint64_t v6 = *(void *)(v3 + 32);
    if (v4 < v6) {
      goto LABEL_10;
    }
    if (v6 < v4)
    {
LABEL_8:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
    *(void *)(v3 + 24) = 0;
  }
  uint64_t result = ProtobufDecoder.decodeVarint()();
  if (v2) {
    return result;
  }
  if (result < 8) {
    goto LABEL_8;
  }
LABEL_10:
  if ((result & 0xFFFFFFFFFFFFFFF8) == 8)
  {
    Swift::UInt v12 = result;
    uint64_t result = ProtobufDecoder.uintField(_:)((SwiftUI::ProtobufFormat::Field)&v12);
    if (v7) {
      return result;
    }
    uint64_t v8 = result;
    if (result >> 31) {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void *)a2;
    int v10 = *(_DWORD *)(a2 + 8);
    *(void *)a2 = v8;
  }
  else
  {
    uint64_t v9 = *(void *)a2;
    int v10 = *(_DWORD *)(a2 + 8);
    *(void *)a2 = 0;
  }
  *(_DWORD *)(a2 + 8) = 0;
  char v11 = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a2 + 12) = 5;
  return outlined consume of DisplayList.Effect(v9, v10, v11);
}

uint64_t closure #2 in DisplayList.Effect.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (v4 >= v5)
  {
    int v51 = 0;
    uint64_t v52 = 0;
    LOBYTE(v6) = 0;
    uint64_t v55 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    LOBYTE(v10) = 1;
    unsigned __int8 v9 = 6;
LABEL_4:
    a1[3] = 0;
    uint64_t result = swift_allocObject();
    uint64_t v12 = v55;
    *(void *)(result + 16) = v52;
    *(void *)(result + 24) = v12;
    *(void *)(result + 32) = v7;
    *(void *)(result + 40) = v8;
    *(unsigned char *)(result + 48) = v9;
    *(unsigned char *)(result + 49) = v6 & 1;
    *(unsigned char *)(result + 50) = v10 & 1;
    *(_DWORD *)(result + 52) = v51;
    *(void *)a2 = result;
    *(_DWORD *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 12) = 6;
    return result;
  }
  int v51 = 0;
  uint64_t v52 = 0;
  int v6 = 0;
  uint64_t v55 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unsigned __int8 v9 = 6;
  uint64_t v10 = 1;
  while (1)
  {
    unint64_t v14 = a1[3];
    if (v14)
    {
      unint64_t v15 = a1[4];
      if (v4 < v15) {
        goto LABEL_14;
      }
      if (v15 < v4) {
        goto LABEL_62;
      }
      a1[3] = 0;
    }
    unint64_t v14 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return outlined consume of Path.Storage(v52, v55, v7, v8, v9);
    }
    if (v14 < 8) {
      goto LABEL_62;
    }
LABEL_14:
    unint64_t v16 = v14 >> 3;
    if (v14 >> 3 == 3)
    {
      if ((v14 & 7) != 0)
      {
        if ((v14 & 7) != 2) {
          goto LABEL_62;
        }
        uint64_t v28 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of Path.Storage(v52, v55, v7, v8, v9);
        }
        if (v28 < 0) {
          goto LABEL_73;
        }
        unint64_t v29 = a1[1] + v28;
        if (v5 < v29) {
          goto LABEL_62;
        }
        a1[3] = 24;
        a1[4] = v29;
      }
      int v30 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return outlined consume of Path.Storage(v52, v55, v7, v8, v9);
      }
      int v51 = v30;
      goto LABEL_7;
    }
    if (v16 != 2) {
      break;
    }
    if ((v14 & 7) != 2) {
      goto LABEL_62;
    }
    uint64_t v10 = a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1, (void *)v10);
    }
    unint64_t v32 = *(void *)(v10 + 16);
    unint64_t v31 = *(void *)(v10 + 24);
    if (v32 >= v31 >> 1) {
      uint64_t v10 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, (void *)v10);
    }
    *(void *)(v10 + 16) = v32 + 1;
    *(void *)(v10 + 8 * v32 + 32) = v5;
    a1[5] = v10;
    uint64_t v33 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return outlined consume of Path.Storage(v52, v55, v7, v8, v9);
    }
    if (v33 < 0) {
      goto LABEL_69;
    }
    unint64_t v34 = a1[1] + v33;
    if (v5 < v34) {
      goto LABEL_62;
    }
    a1[2] = v34;
    unsigned int v35 = specialized FillStyle.init(from:)(a1);
    uint64_t v36 = (void *)a1[5];
    if (!v36[2]) {
      goto LABEL_71;
    }
    unsigned int v37 = v35;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v38 = v36[2];
      if (!v38) {
        goto LABEL_61;
      }
    }
    else
    {
      uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew()(v36);
      uint64_t v38 = v36[2];
      if (!v38)
      {
LABEL_61:
        __break(1u);
LABEL_62:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return outlined consume of Path.Storage(v52, v55, v7, v8, v9);
      }
    }
    uint64_t v39 = v38 - 1;
    uint64_t v40 = v36[v39 + 4];
    v36[2] = v39;
    int v6 = v37 & 1;
    uint64_t v10 = (v37 >> 8) & 1;
    a1[5] = v36;
    a1[2] = v40;
LABEL_7:
    unint64_t v4 = a1[1];
    unint64_t v5 = a1[2];
    if (v4 >= v5) {
      goto LABEL_4;
    }
  }
  if (v16 != 1)
  {
    switch(v14 & 7)
    {
      case 0uLL:
        ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of Path.Storage(v52, v55, v7, v8, v9);
        }
        goto LABEL_7;
      case 1uLL:
        unint64_t v13 = a1[1] + 8;
        if (v5 >= v13) {
          goto LABEL_6;
        }
        goto LABEL_62;
      case 2uLL:
        uint64_t v41 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined consume of Path.Storage(v52, v55, v7, v8, v9);
        }
        if (v41 < 0) {
          goto LABEL_74;
        }
        unint64_t v13 = a1[1] + v41;
        if (v5 < v13) {
          goto LABEL_62;
        }
LABEL_6:
        a1[1] = v13;
        break;
      case 5uLL:
        unint64_t v13 = a1[1] + 4;
        if (v5 < v13) {
          goto LABEL_62;
        }
        goto LABEL_6;
      default:
        goto LABEL_62;
    }
    goto LABEL_7;
  }
  if ((v14 & 7) != 2) {
    goto LABEL_62;
  }
  unsigned int v48 = v10;
  uint64_t v10 = a1[5];
  int v49 = v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v10 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1, (void *)v10);
  }
  unint64_t v18 = *(void *)(v10 + 16);
  unint64_t v17 = *(void *)(v10 + 24);
  if (v18 >= v17 >> 1) {
    uint64_t v10 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, (void *)v10);
  }
  *(void *)(v10 + 16) = v18 + 1;
  *(void *)(v10 + 8 * v18 + 32) = v5;
  a1[5] = v10;
  uint64_t v19 = ProtobufDecoder.decodeVarint()();
  if (v2) {
    return outlined consume of Path.Storage(v52, v55, v7, v8, v9);
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    unint64_t v20 = a1[1] + v19;
    if (v5 < v20) {
      goto LABEL_62;
    }
    a1[2] = v20;
    specialized Path.init(from:)((unint64_t)a1, (uint64_t)v53);
    uint64_t v10 = a1[5];
    if (!*(void *)(v10 + 16)) {
      goto LABEL_70;
    }
    uint64_t v21 = v53[0];
    uint64_t v22 = v53[1];
    uint64_t v23 = v53[3];
    uint64_t v47 = v53[2];
    unsigned __int8 v46 = v54;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v24 = *(void *)(v10 + 16);
      if (!v24) {
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v10 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v10);
      uint64_t v24 = *(void *)(v10 + 16);
      if (!v24) {
        goto LABEL_72;
      }
    }
    uint64_t v25 = v24 - 1;
    unsigned __int8 v26 = v9;
    uint64_t v27 = *(void *)(v10 + 8 * v25 + 32);
    *(void *)(v10 + 16) = v25;
    outlined consume of Path.Storage(v52, v55, v7, v8, v26);
    uint64_t v52 = v21;
    a1[5] = v10;
    a1[2] = v27;
    uint64_t v55 = v22;
    uint64_t v7 = v47;
    uint64_t v8 = v23;
    unsigned __int8 v9 = v46;
    uint64_t v10 = v48;
    int v6 = v49;
    goto LABEL_7;
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
  __break(1u);
  char v42 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v10);
  uint64_t v43 = v42[2];
  if (!v43)
  {
    __break(1u);
    char v42 = (void *)a1[5];
    if (v42[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v43 = v42[2];
        if (v43) {
          goto LABEL_67;
        }
LABEL_78:
        __break(1u);
        JUMPOUT(0x245D73A3CLL);
      }
    }
    else
    {
      __break(1u);
    }
    char v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v42);
    uint64_t v43 = v42[2];
    if (!v43) {
      goto LABEL_78;
    }
  }
LABEL_67:
  uint64_t v44 = v43 - 1;
  uint64_t v45 = v42[v44 + 4];
  v42[2] = v44;
  uint64_t result = outlined consume of Path.Storage(v52, v55, v7, v8, v9);
  a1[5] = v42;
  a1[2] = v45;
  return result;
}

uint64_t closure #3 in DisplayList.Effect.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  if (v5 >= v6)
  {
    int v7 = 0;
    __int16 v8 = 0;
    char v9 = 0;
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
LABEL_4:
    a1[3] = 0;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v10;
    *(_WORD *)(result + 24) = v8;
    *(unsigned char *)(result + 26) = v9;
    *(_DWORD *)(result + 28) = v7;
    *(void *)a2 = result;
    *(_DWORD *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 12) = 7;
    return result;
  }
  int v7 = 0;
  __int16 v8 = 0;
  char v9 = 0;
  uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    unint64_t v13 = a1[3];
    if (v13)
    {
      unint64_t v14 = a1[4];
      if (v5 < v14) {
        goto LABEL_14;
      }
      if (v14 < v5) {
        goto LABEL_47;
      }
      a1[3] = 0;
    }
    unint64_t v15 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_bridgeObjectRelease();
    }
    unint64_t v13 = v15;
    if (v15 < 8) {
      goto LABEL_47;
    }
LABEL_14:
    if (v13 >> 3 == 2)
    {
      if ((v13 & 7) != 0)
      {
        if ((v13 & 7) != 2) {
          goto LABEL_47;
        }
        uint64_t v22 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_bridgeObjectRelease();
        }
        if (v22 < 0) {
          goto LABEL_54;
        }
        unint64_t v23 = a1[1] + v22;
        if (v6 < v23) {
          goto LABEL_47;
        }
        a1[3] = 16;
        a1[4] = v23;
      }
      int v24 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return swift_bridgeObjectRelease();
      }
      int v7 = v24;
      goto LABEL_7;
    }
    if (v13 >> 3 != 1)
    {
      switch(v13 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v2) {
            return swift_bridgeObjectRelease();
          }
          goto LABEL_7;
        case 1uLL:
          unint64_t v12 = a1[1] + 8;
          if (v6 < v12) {
            goto LABEL_47;
          }
          goto LABEL_6;
        case 2uLL:
          uint64_t v25 = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return swift_bridgeObjectRelease();
          }
          if (v25 < 0) {
            goto LABEL_55;
          }
          unint64_t v12 = a1[1] + v25;
          if (v6 < v12) {
            goto LABEL_47;
          }
LABEL_6:
          a1[1] = v12;
          break;
        case 5uLL:
          unint64_t v12 = a1[1] + 4;
          if (v6 < v12) {
            goto LABEL_47;
          }
          goto LABEL_6;
        default:
          goto LABEL_47;
      }
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    if ((v13 & 7) != 2) {
      goto LABEL_50;
    }
    uint64_t v10 = (void *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    }
    unint64_t v17 = v10[2];
    unint64_t v16 = v10[3];
    if (v17 >= v16 >> 1) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v10);
    }
    id v10[2] = v17 + 1;
    v10[v17 + 4] = v6;
    a1[5] = v10;
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if (result < 0) {
      break;
    }
    unint64_t v18 = a1[1] + result;
    if (v6 < v18)
    {
LABEL_50:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
    a1[2] = v18;
    DisplayList.init(from:)(&v29, a1);
    uint64_t v10 = (void *)a1[5];
    if (!v10[2]) {
      goto LABEL_53;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v19 = v10[2];
      if (!v19) {
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      uint64_t v19 = v10[2];
      if (!v19)
      {
LABEL_46:
        __break(1u);
LABEL_47:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return swift_bridgeObjectRelease();
      }
    }
    uint64_t v20 = v19 - 1;
    uint64_t v21 = v10[v20 + 4];
    id v10[2] = v20;
    a1[5] = v10;
    a1[2] = v21;
    uint64_t v10 = v29;
    __int16 v8 = v30;
    char v9 = v31;
LABEL_7:
    unint64_t v5 = a1[1];
    unint64_t v6 = a1[2];
    if (v5 >= v6) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  __break(1u);
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
  uint64_t v28 = *(void *)(result + 16);
  if (!v28)
  {
    __break(1u);
    JUMPOUT(0x245D73E44);
  }
  uint64_t v26 = v28 - 1;
  uint64_t v27 = *(void *)(result + 8 * v26 + 32);
  *(void *)(result + 16) = v26;
  a1[5] = result;
  a1[2] = v27;
  return result;
}

void closure #4 in DisplayList.Effect.init(from:)(uint64_t a1, unint64_t *a2)
{
  uint64_t v5 = type metadata accessor for AccessibilityNodeAttachment(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  for (uint64_t i = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
        ;
        outlined init with take of AccessibilityNodeAttachment((uint64_t)i, v22+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v25))
  {
    while (1)
    {
      unint64_t v9 = *(void *)(a1 + 8);
      unint64_t v10 = *(void *)(a1 + 16);
      if (v9 >= v10)
      {
        *(void *)(a1 + 24) = 0;
        return;
      }
      unint64_t v11 = *(void *)(a1 + 24);
      if (v11)
      {
        unint64_t v12 = *(void *)(a1 + 32);
        if (v9 < v12) {
          goto LABEL_9;
        }
        if (v12 < v9) {
          goto LABEL_39;
        }
        *(void *)(a1 + 24) = 0;
      }
      unint64_t v11 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return;
      }
      if (v11 <= 7)
      {
LABEL_39:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return;
      }
LABEL_9:
      if ((v11 & 0xFFFFFFFFFFFFFFF8) == 8) {
        break;
      }
      switch(v11 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (!v2) {
            continue;
          }
          return;
        case 1uLL:
          unint64_t v26 = *(void *)(a1 + 8) + 8;
          goto LABEL_34;
        case 2uLL:
          uint64_t v27 = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return;
          }
          if (v27 < 0) {
            goto LABEL_45;
          }
          unint64_t v26 = *(void *)(a1 + 8) + v27;
LABEL_34:
          if (v10 < v26) {
            goto LABEL_39;
          }
          *(void *)(a1 + 8) = v26;
          break;
        case 5uLL:
          unint64_t v26 = *(void *)(a1 + 8) + 4;
          goto LABEL_34;
        default:
          goto LABEL_39;
      }
    }
    if ((v11 & 7) != 2) {
      goto LABEL_39;
    }
    unint64_t v13 = *(void **)(a1 + 40);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    }
    unint64_t v15 = v13[2];
    unint64_t v14 = v13[3];
    if (v15 >= v14 >> 1) {
      unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v13);
    }
    _OWORD v13[2] = v15 + 1;
    v13[v15 + 4] = v10;
    *(void *)(a1 + 40) = v13;
    uint64_t v16 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return;
    }
    if (v16 < 0) {
      break;
    }
    unint64_t v17 = *(void *)(a1 + 8) + v16;
    if (v10 < v17) {
      goto LABEL_39;
    }
    *(void *)(a1 + 16) = v17;
    AccessibilityNodeAttachment.init(from:)((id *)a1, (uint64_t)i);
    unint64_t v18 = *(void **)(a1 + 40);
    if (!v18[2]) {
      goto LABEL_43;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v19 = v18[2];
      if (!v19) {
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      uint64_t v19 = v18[2];
      if (!v19) {
        goto LABEL_44;
      }
    }
    uint64_t v20 = v19 - 1;
    uint64_t v21 = v18[v20 + 4];
    _DWORD v18[2] = v20;
    *(void *)(a1 + 40) = v18;
    *(void *)(a1 + 16) = v21;
    unint64_t v22 = *a2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1, v22);
      *a2 = v22;
    }
    unint64_t v25 = *(void *)(v22 + 16);
    unint64_t v24 = *(void *)(v22 + 24);
    if (v25 >= v24 >> 1)
    {
      unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v22);
      *a2 = v22;
    }
    *(void *)(v22 + 16) = v25 + 1;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  __break(1u);
  __int16 v30 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
  uint64_t v31 = v30[2];
  if (!v31)
  {
    __break(1u);
    JUMPOUT(0x245D74224);
  }
  uint64_t v28 = v31 - 1;
  uint64_t v29 = v30[v28 + 4];
  v30[2] = v28;
  *(void *)(a1 + 40) = v30;
  *(void *)(a1 + 16) = v29;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DisplayList.Effect(void *a1)
{
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance DisplayList.Effect(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t _DisplayList_AnyEffectAnimation.encodeAnimation(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 24))(&v8, a2, a3);
  if (v9) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 + 16) + 8))(a1, a2);
  }
  else {
    return ProtobufEncoder.messageField<A>(_:_:)(v8, v3, a2, *(void *)(a3 + 16));
  }
}

uint64_t CodableEffectAnimation.Tag.rawValue.getter()
{
  return *(void *)v0;
}

SwiftUI::CodableEffectAnimation::Tag __swiftcall CodableEffectAnimation.Tag.init(rawValue:)(SwiftUI::CodableEffectAnimation::Tag rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

BOOL static CodableEffectAnimation.Tag.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t CodableEffectAnimation.encode(to:)(uint64_t a1)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return _DisplayList_AnyEffectAnimation.encodeAnimation(to:)(a1, v3, v4);
}

uint64_t CodableEffectAnimation.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v59 = 0;
  memset(v58, 0, sizeof(v58));
  unint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  if (v6 >= v7) {
    goto LABEL_66;
  }
  uint64_t v62 = a2;
  while (2)
  {
    unint64_t v8 = a1[3];
    if (v8)
    {
      unint64_t v9 = a1[4];
      if (v6 < v9) {
        goto LABEL_9;
      }
      if (v9 < v6) {
        break;
      }
      a1[3] = 0;
    }
    unint64_t v10 = ProtobufDecoder.decodeVarint()();
    if (v3) {
      return outlined destroy of AnyTrackedValue?((uint64_t)v58, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
    }
    unint64_t v8 = v10;
    if (v10 >= 8)
    {
LABEL_9:
      switch(v8 >> 3)
      {
        case 1uLL:
          uint64_t v56 = &type metadata for DisplayList.OffsetAnimation;
          unint64_t v57 = &protocol witness table for DisplayList.OffsetAnimation;
          uint64_t v11 = swift_allocObject();
          *(void *)&long long v54 = v11;
          if ((v8 & 7) != 2) {
            goto LABEL_71;
          }
          uint64_t v12 = v11;
          unint64_t v13 = (void *)a1[5];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
          }
          unint64_t v15 = v13[2];
          unint64_t v14 = v13[3];
          if (v15 >= v14 >> 1) {
            unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v13);
          }
          _OWORD v13[2] = v15 + 1;
          v13[v15 + 4] = v7;
          a1[5] = v13;
          uint64_t v16 = a1;
          uint64_t v17 = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_82;
          }
          if (v17 < 0)
          {
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
            __break(1u);
            unsigned int v48 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
            uint64_t v49 = v48[2];
            if (v49) {
              goto LABEL_81;
            }
            __break(1u);
            unsigned int v48 = (void *)a1[5];
            if (v48[2])
            {
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v49 = v48[2];
                if (v49) {
                  goto LABEL_81;
                }
LABEL_75:
                __break(1u);
                unsigned int v48 = (void *)a1[5];
                if (v48[2])
                {
                  if (swift_isUniquelyReferenced_nonNull_native())
                  {
                    uint64_t v49 = v48[2];
                    if (!v49) {
                      goto LABEL_78;
                    }
LABEL_81:
                    uint64_t v50 = v49 - 1;
                    uint64_t v51 = v48[v50 + 4];
                    v48[2] = v50;
                    a1[5] = v48;
                    a1[2] = v51;
                    goto LABEL_82;
                  }
                }
                else
                {
                  __break(1u);
                }
                unsigned int v48 = specialized _ArrayBuffer._consumeAndCreateNew()(v48);
                uint64_t v49 = v48[2];
                if (v49) {
                  goto LABEL_81;
                }
LABEL_78:
                __break(1u);
                unsigned int v48 = (void *)a1[5];
                if (v48[2])
                {
                  if (swift_isUniquelyReferenced_nonNull_native())
                  {
                    uint64_t v49 = v48[2];
                    if (v49) {
                      goto LABEL_81;
                    }
LABEL_102:
                    __break(1u);
                    JUMPOUT(0x245D74C0CLL);
                  }
                }
                else
                {
                  __break(1u);
                }
                unsigned int v48 = specialized _ArrayBuffer._consumeAndCreateNew()(v48);
                uint64_t v49 = v48[2];
                if (v49) {
                  goto LABEL_81;
                }
                goto LABEL_102;
              }
            }
            else
            {
              __break(1u);
            }
            unsigned int v48 = specialized _ArrayBuffer._consumeAndCreateNew()(v48);
            uint64_t v49 = v48[2];
            if (v49) {
              goto LABEL_81;
            }
            goto LABEL_75;
          }
          unint64_t v18 = a1[1] + v17;
          if (v7 < v18)
          {
LABEL_71:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_82:
            outlined destroy of AnyTrackedValue?((uint64_t)v58, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
            return __swift_deallocate_boxed_opaque_existential_1((uint64_t)&v54);
          }
          a1[2] = v18;
          specialized EffectAnimation.init(from:)(a1, (double *)v60);
          uint64_t v16 = (void *)a1[5];
          if (!v16[2]) {
            goto LABEL_89;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
          }
          a2 = v62;
          uint64_t v19 = v16[2];
          if (!v19) {
            goto LABEL_91;
          }
          uint64_t v20 = v19 - 1;
          uint64_t v21 = v16[v20 + 4];
          v16[2] = v20;
          a1[5] = v16;
          a1[2] = v21;
          long long v22 = v60[1];
          *(_OWORD *)(v12 + 16) = v60[0];
          *(_OWORD *)(v12 + 32) = v22;
          *(void *)(v12 + 48) = v61;
LABEL_50:
          outlined destroy of AnyTrackedValue?((uint64_t)v58, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
          outlined init with take of _DisplayList_AnyEffectAnimation?((uint64_t)&v54, (uint64_t)v58);
LABEL_51:
          unint64_t v6 = a1[1];
          unint64_t v7 = a1[2];
          if (v6 >= v7) {
            break;
          }
          continue;
        case 2uLL:
          uint64_t v56 = &type metadata for DisplayList.ScaleAnimation;
          unint64_t v57 = &protocol witness table for DisplayList.ScaleAnimation;
          uint64_t v23 = swift_allocObject();
          *(void *)&long long v54 = v23;
          if ((v8 & 7) != 2) {
            goto LABEL_71;
          }
          uint64_t v24 = v23;
          ProtobufDecoder.beginMessage()();
          if (v3) {
            goto LABEL_82;
          }
          specialized EffectAnimation.init(from:)(a1, (double *)(v24 + 16));
          uint64_t v3 = 0;
          uint64_t v16 = (void *)a1[5];
          if (!v16[2]) {
            goto LABEL_85;
          }
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v25 = v16[2];
            if (!v25) {
              goto LABEL_87;
            }
          }
          else
          {
            uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
            uint64_t v25 = v16[2];
            if (!v25) {
              goto LABEL_87;
            }
          }
          goto LABEL_37;
        case 3uLL:
          uint64_t v56 = &type metadata for DisplayList.RotationAnimation;
          unint64_t v57 = &protocol witness table for DisplayList.RotationAnimation;
          uint64_t v26 = swift_allocObject();
          *(void *)&long long v54 = v26;
          if ((v8 & 7) != 2) {
            goto LABEL_71;
          }
          uint64_t v27 = v26;
          ProtobufDecoder.beginMessage()();
          if (v3) {
            goto LABEL_82;
          }
          specialized EffectAnimation.init(from:)(a1, (double *)(v27 + 16));
          uint64_t v3 = 0;
          uint64_t v16 = (void *)a1[5];
          if (!v16[2]) {
            goto LABEL_86;
          }
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v25 = v16[2];
            if (!v25) {
              goto LABEL_88;
            }
          }
          else
          {
            uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
            uint64_t v25 = v16[2];
            if (!v25) {
              goto LABEL_88;
            }
          }
LABEL_37:
          uint64_t v28 = v25 - 1;
          uint64_t v29 = v16[v28 + 4];
          v16[2] = v28;
          a1[5] = v16;
          a1[2] = v29;
          goto LABEL_50;
        case 4uLL:
          uint64_t v56 = &type metadata for DisplayList.OpacityAnimation;
          unint64_t v57 = &protocol witness table for DisplayList.OpacityAnimation;
          if ((v8 & 7) != 2) {
            goto LABEL_71;
          }
          __int16 v30 = (void *)a1[5];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            __int16 v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
          }
          unint64_t v32 = v30[2];
          unint64_t v31 = v30[3];
          if (v32 >= v31 >> 1) {
            __int16 v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v30);
          }
          v30[2] = v32 + 1;
          v30[v32 + 4] = v7;
          a1[5] = v30;
          uint64_t v16 = a1;
          uint64_t v33 = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_82;
          }
          if (v33 < 0) {
            goto LABEL_84;
          }
          unint64_t v34 = a1[1] + v33;
          if (v7 < v34) {
            goto LABEL_71;
          }
          a1[2] = v34;
          unsigned int v35 = specialized EffectAnimation.init(from:)(a1);
          uint64_t v38 = (void *)a1[5];
          if (!v38[2]) {
            goto LABEL_90;
          }
          uint64_t v39 = v36;
          uint64_t v40 = v37;
          uint64_t v41 = v35;
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v42 = v38[2];
            if (!v42) {
              goto LABEL_65;
            }
            goto LABEL_49;
          }
          uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew()(v38);
          uint64_t v42 = v38[2];
          if (v42)
          {
LABEL_49:
            uint64_t v43 = v42 - 1;
            uint64_t v44 = v38[v43 + 4];
            _OWORD v38[2] = v43;
            a1[5] = v38;
            a1[2] = v44;
            *(void *)&long long v54 = v39;
            *((void *)&v54 + 1) = v40;
            uint64_t v55 = v41;
            goto LABEL_50;
          }
LABEL_65:
          __break(1u);
          break;
        default:
          switch(v8 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v3) {
                return outlined destroy of AnyTrackedValue?((uint64_t)v58, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
              }
              goto LABEL_51;
            case 1uLL:
              unint64_t v45 = a1[1] + 8;
              goto LABEL_58;
            case 2uLL:
              uint64_t v16 = a1;
              uint64_t v46 = ProtobufDecoder.decodeVarint()();
              if (v3) {
                return outlined destroy of AnyTrackedValue?((uint64_t)v58, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
              }
              if (v46 < 0) {
                goto LABEL_92;
              }
              unint64_t v45 = a1[1] + v46;
LABEL_58:
              if (v7 < v45) {
                goto LABEL_69;
              }
              a1[1] = v45;
              break;
            case 5uLL:
              unint64_t v45 = a1[1] + 4;
              goto LABEL_58;
            default:
              goto LABEL_69;
          }
          goto LABEL_51;
      }
LABEL_66:
      a1[3] = 0;
      outlined init with copy of _DisplayList_AnyEffectAnimation?((uint64_t)v58, (uint64_t)&v52);
      if (v53)
      {
        outlined destroy of AnyTrackedValue?((uint64_t)v58, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
        outlined init with take of ScrollStateRequest(&v52, (uint64_t)&v54);
        return outlined init with take of ScrollStateRequest(&v54, a2);
      }
      else
      {
        outlined destroy of AnyTrackedValue?((uint64_t)&v52, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return outlined destroy of AnyTrackedValue?((uint64_t)v58, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
      }
    }
    break;
  }
LABEL_69:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  return outlined destroy of AnyTrackedValue?((uint64_t)v58, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableEffectAnimation(uint64_t a1)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return _DisplayList_AnyEffectAnimation.encodeAnimation(to:)(a1, v3, v4);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableEffectAnimation@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CodableEffectAnimation.init(from:)(a1, a2);
}

uint64_t DisplayList.InterpolatorAnimation.encode(to:)(uint64_t result)
{
  uint64_t v3 = (void *)result;
  char v4 = *(unsigned char *)(v1 + 20);
  uint64_t v5 = *(void *)(v1 + 24);
  if (v5)
  {
    swift_retain();
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    uint64_t v6 = v3[1];
    unint64_t v7 = (void *)v3[3];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    }
    unint64_t v9 = v7[2];
    unint64_t v8 = v7[3];
    unint64_t v10 = v9 + 1;
    if (v9 >= v8 >> 1) {
      unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v7);
    }
    _OWORD v7[2] = v10;
    v7[v9 + 4] = v6;
    v3[3] = v7;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_18:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      unint64_t v7 = (void *)result;
      goto LABEL_12;
    }
    v3[1] = v6 + 1;
    CodableAnimation.encode(to:)((uint64_t)v3, v5);
    if (v2) {
      return swift_release();
    }
    ProtobufEncoder.endLengthDelimited()();
    uint64_t result = swift_release();
  }
  if (v4) {
    return result;
  }
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  unint64_t v10 = v3[1];
  unint64_t v7 = (void *)v3[3];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_18;
  }
LABEL_12:
  unint64_t v12 = v7[2];
  unint64_t v11 = v7[3];
  if (v12 >= v11 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v7);
    unint64_t v7 = (void *)result;
  }
  _OWORD v7[2] = v12 + 1;
  v7[v12 + 4] = v10;
  v3[3] = v7;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v10 + 1;
    StrongHash.encode(to:)(v3);
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

unint64_t DisplayList.InterpolatorAnimation.init(from:)@<X0>(unint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v3 = (void *)result;
  unint64_t v4 = *(void *)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  if (v4 >= v5)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    long long v36 = 0u;
    LOBYTE(v8) = 1;
LABEL_4:
    v3[3] = 0;
    unint64_t v9 = v39;
    *uint64_t v39 = v36;
    *((_DWORD *)v9 + 4) = v7;
    *((unsigned char *)v9 + 20) = v8 & 1;
    *((void *)v9 + 3) = v6;
    return result;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  long long v36 = 0u;
  uint64_t v8 = 1;
  while (1)
  {
    uint64_t result = v3[3];
    if (result)
    {
      unint64_t v11 = v3[4];
      if (v4 < v11) {
        goto LABEL_14;
      }
      if (v11 < v4) {
        goto LABEL_53;
      }
      v3[3] = 0;
    }
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_release();
    }
    if (result <= 7) {
      goto LABEL_53;
    }
LABEL_14:
    if (result >> 3 != 2) {
      break;
    }
    if ((result & 7) != 2) {
      goto LABEL_53;
    }
    uint64_t v23 = (void *)v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
    }
    unint64_t v25 = v23[2];
    unint64_t v24 = v23[3];
    if (v25 >= v24 >> 1) {
      uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v23);
    }
    _DWORD v23[2] = v25 + 1;
    v23[v25 + 4] = v5;
    v3[5] = v23;
    uint64_t v26 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_release();
    }
    if (v26 < 0) {
      goto LABEL_61;
    }
    unint64_t v27 = v3[1] + v26;
    if (v5 < v27) {
      goto LABEL_53;
    }
    v3[2] = v27;
    StrongHash.init(from:)((unint64_t)v3, &v37);
    uint64_t v28 = (void *)v3[5];
    if (!v28[2]) {
      goto LABEL_63;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v29 = v28[2];
      if (!v29) {
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v28);
      uint64_t v28 = (void *)result;
      uint64_t v29 = *(void *)(result + 16);
      if (!v29)
      {
LABEL_52:
        __break(1u);
LABEL_53:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return swift_release();
      }
    }
    uint64_t v8 = 0;
    uint64_t v30 = v29 - 1;
    uint64_t v31 = v28[v30 + 4];
    _OWORD v28[2] = v30;
    v3[5] = v28;
    v3[2] = v31;
    long long v36 = v37;
    int v7 = v38;
LABEL_7:
    unint64_t v4 = v3[1];
    unint64_t v5 = v3[2];
    if (v4 >= v5) {
      goto LABEL_4;
    }
  }
  if (result >> 3 != 1)
  {
    switch(result & 7)
    {
      case 0uLL:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_release();
        }
        goto LABEL_7;
      case 1uLL:
        unint64_t v10 = v3[1] + 8;
        if (v5 >= v10) {
          goto LABEL_6;
        }
        goto LABEL_53;
      case 2uLL:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_release();
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_65;
        }
        unint64_t v10 = v3[1] + result;
        if (v5 < v10) {
          goto LABEL_53;
        }
LABEL_6:
        v3[1] = v10;
        break;
      case 5uLL:
        unint64_t v10 = v3[1] + 4;
        if (v5 < v10) {
          goto LABEL_53;
        }
        goto LABEL_6;
      default:
        goto LABEL_53;
    }
    goto LABEL_7;
  }
  if ((result & 7) != 2) {
    goto LABEL_53;
  }
  unint64_t v12 = (void *)v3[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  }
  unint64_t v14 = v12[2];
  unint64_t v13 = v12[3];
  if (v14 >= v13 >> 1) {
    unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
  }
  v12[2] = v14 + 1;
  v12[v14 + 4] = v5;
  v3[5] = v12;
  uint64_t v15 = ProtobufDecoder.decodeVarint()();
  if (v2) {
    return swift_release();
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    unint64_t v16 = v3[1] + v15;
    if (v5 < v16) {
      goto LABEL_53;
    }
    v3[2] = v16;
    uint64_t v17 = specialized CodableAnimation.init(from:)(v3);
    unint64_t v18 = (void *)v3[5];
    if (!v18[2]) {
      goto LABEL_62;
    }
    uint64_t v19 = v17;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v20 = v18[2];
      if (!v20) {
        goto LABEL_64;
      }
    }
    else
    {
      unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      uint64_t v20 = v18[2];
      if (!v20) {
        goto LABEL_64;
      }
    }
    uint64_t v21 = v20 - 1;
    uint64_t v22 = v18[v21 + 4];
    _DWORD v18[2] = v21;
    v3[5] = v18;
    v3[2] = v22;
    uint64_t result = swift_release();
    uint64_t v6 = v19;
    goto LABEL_7;
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  __break(1u);
  unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v8);
  uint64_t v33 = v32[2];
  if (!v33)
  {
    __break(1u);
    unint64_t v32 = (void *)v3[5];
    if (v32[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v33 = v32[2];
        if (v33) {
          goto LABEL_59;
        }
LABEL_69:
        __break(1u);
        JUMPOUT(0x245D75364);
      }
    }
    else
    {
      __break(1u);
    }
    unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew()(v32);
    uint64_t v33 = v32[2];
    if (!v33) {
      goto LABEL_69;
    }
  }
LABEL_59:
  uint64_t v34 = v33 - 1;
  uint64_t v35 = v32[v34 + 4];
  v32[2] = v34;
  v3[5] = v32;
  v3[2] = v35;
  return swift_release();
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DisplayList.InterpolatorAnimation(uint64_t a1)
{
  return DisplayList.InterpolatorAnimation.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance DisplayList.InterpolatorAnimation@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return DisplayList.InterpolatorAnimation.init(from:)(a1, a2);
}

uint64_t outlined destroy of CodableViewFactory(uint64_t a1)
{
  return a1;
}

uint64_t sub_245D75400()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type CodableViewFactory.Error and conformance CodableViewFactory.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableViewFactory.Error and conformance CodableViewFactory.Error;
  if (!lazy protocol witness table cache variable for type CodableViewFactory.Error and conformance CodableViewFactory.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableViewFactory.Error and conformance CodableViewFactory.Error);
  }
  return result;
}

uint64_t sub_245D75464()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245D754A4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245D754DC()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t sub_245D75514()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 != 255) {
    outlined consume of GraphicsImage.Contents(*(void **)(v0 + 16), v1);
  }

  return swift_deallocObject();
}

uint64_t sub_245D75558()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t outlined retain of GraphicsFilter(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, uint64_t))
{
  BYTE4(v4) = *(unsigned char *)(a1 + 116);
  LODWORD(v4) = *(_DWORD *)(a1 + 112);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), v4);
  return a1;
}

uint64_t sub_245D755FC()
{
  return swift_deallocObject();
}

uint64_t sub_245D7560C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245D75644()
{
  return swift_deallocObject();
}

uint64_t sub_245D75654()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245D7568C()
{
  outlined consume of ContentTransition.Storage(*(void *)(v0 + 16), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32), *(unsigned char *)(v0 + 29));
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245D756DC()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

uint64_t outlined init with copy of _DisplayList_AnyEffectAnimation?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyTrackedValue?(0, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x24C527CC0);
  }
  return result;
}

void *specialized EffectAnimation.init(from:)(void *a1)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (v4 >= v5) {
    goto LABEL_67;
  }
  uint64_t v6 = 0;
  int v7 = 1;
  int v8 = 1;
  while (1)
  {
    unint64_t v11 = a1[3];
    if (v11)
    {
      unint64_t v12 = a1[4];
      if (v4 < v12) {
        goto LABEL_11;
      }
      if (v12 < v4) {
        goto LABEL_68;
      }
      a1[3] = 0;
    }
    unint64_t v11 = ProtobufDecoder.decodeVarint()();
    if (v1) {
      goto LABEL_69;
    }
    if (v11 < 8) {
      goto LABEL_68;
    }
LABEL_11:
    unint64_t v13 = v11 >> 3;
    if (v11 >> 3 != 1) {
      break;
    }
    if ((v11 & 7) != 2) {
      goto LABEL_68;
    }
    uint64_t v2 = (void *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
    }
    unint64_t v24 = v2[2];
    unint64_t v23 = v2[3];
    if (v24 >= v23 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v2);
    }
    v2[2] = v24 + 1;
    v2[v24 + 4] = v5;
    a1[5] = v2;
    uint64_t v25 = ProtobufDecoder.decodeVarint()();
    if (v1) {
      goto LABEL_69;
    }
    if (v25 < 0) {
      goto LABEL_82;
    }
    unint64_t v26 = a1[1] + v25;
    if (v5 < v26) {
      goto LABEL_68;
    }
    a1[2] = v26;
    specialized _OpacityEffect.init(from:)(a1);
    uint64_t v2 = (void *)a1[5];
    if (!v2[2]) {
      goto LABEL_85;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v27 = v2[2];
      if (!v27) {
        goto LABEL_88;
      }
    }
    else
    {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      uint64_t v27 = v2[2];
      if (!v27) {
        goto LABEL_88;
      }
    }
    int v8 = 0;
LABEL_3:
    uint64_t v9 = v27 - 1;
    uint64_t v10 = v2[v9 + 4];
    v2[2] = v9;
    a1[5] = v2;
    a1[2] = v10;
LABEL_4:
    unint64_t v4 = a1[1];
    unint64_t v5 = a1[2];
    if (v4 >= v5)
    {
      a1[3] = 0;
      if (((v8 | v7) & 1) == 0 && v6) {
        return v6;
      }
      goto LABEL_68;
    }
  }
  if (v13 == 2)
  {
    if ((v11 & 7) != 2) {
      goto LABEL_68;
    }
    uint64_t v2 = (void *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
    }
    unint64_t v29 = v2[2];
    unint64_t v28 = v2[3];
    if (v29 >= v28 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v2);
    }
    v2[2] = v29 + 1;
    v2[v29 + 4] = v5;
    a1[5] = v2;
    uint64_t v30 = ProtobufDecoder.decodeVarint()();
    if (v1) {
      goto LABEL_69;
    }
    if (v30 < 0) {
      goto LABEL_83;
    }
    unint64_t v31 = a1[1] + v30;
    if (v5 < v31) {
      goto LABEL_68;
    }
    a1[2] = v31;
    specialized _OpacityEffect.init(from:)(a1);
    uint64_t v2 = (void *)a1[5];
    if (!v2[2]) {
      goto LABEL_86;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v27 = v2[2];
      if (!v27) {
        goto LABEL_87;
      }
    }
    else
    {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      uint64_t v27 = v2[2];
      if (!v27) {
        goto LABEL_87;
      }
    }
    int v7 = 0;
    goto LABEL_3;
  }
  if (v13 != 3)
  {
    switch(v11 & 7)
    {
      case 0uLL:
        ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_69;
        }
        goto LABEL_4;
      case 1uLL:
        unint64_t v32 = a1[1] + 8;
        if (v5 < v32) {
          goto LABEL_68;
        }
        goto LABEL_60;
      case 2uLL:
        uint64_t v33 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_69;
        }
        if (v33 < 0) {
          goto LABEL_89;
        }
        unint64_t v32 = a1[1] + v33;
        if (v5 < v32) {
          goto LABEL_68;
        }
LABEL_60:
        a1[1] = v32;
        break;
      case 5uLL:
        unint64_t v32 = a1[1] + 4;
        if (v5 >= v32) {
          goto LABEL_60;
        }
        goto LABEL_68;
      default:
        goto LABEL_68;
    }
    goto LABEL_4;
  }
  if ((v11 & 7) != 2) {
    goto LABEL_68;
  }
  uint64_t v2 = (void *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
  }
  unint64_t v15 = v2[2];
  unint64_t v14 = v2[3];
  if (v15 >= v14 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v2);
  }
  v2[2] = v15 + 1;
  v2[v15 + 4] = v5;
  a1[5] = v2;
  uint64_t v16 = ProtobufDecoder.decodeVarint()();
  if (v1) {
    goto LABEL_69;
  }
  if ((v16 & 0x8000000000000000) == 0)
  {
    unint64_t v17 = a1[1] + v16;
    if (v5 < v17) {
      goto LABEL_68;
    }
    a1[2] = v17;
    uint64_t v18 = specialized CodableAnimation.init(from:)(a1);
    uint64_t v19 = (void *)a1[5];
    if (!v19[2]) {
      goto LABEL_84;
    }
    uint64_t v2 = (void *)v18;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v20 = v19[2];
      if (!v20) {
        goto LABEL_66;
      }
      goto LABEL_25;
    }
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
    uint64_t v20 = v19[2];
    if (v20)
    {
LABEL_25:
      uint64_t v21 = v20 - 1;
      uint64_t v22 = v19[v21 + 4];
      void v19[2] = v21;
      swift_release();
      a1[5] = v19;
      a1[2] = v22;
      uint64_t v6 = v2;
      goto LABEL_4;
    }
LABEL_66:
    __break(1u);
LABEL_67:
    uint64_t v6 = 0;
    a1[3] = 0;
LABEL_68:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
LABEL_69:
    swift_release();
    return v6;
  }
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
  __break(1u);
  uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  uint64_t v36 = v35[2];
  if (v36) {
    goto LABEL_80;
  }
  __break(1u);
  uint64_t v35 = (void *)a1[5];
  if (!v35[2])
  {
    __break(1u);
LABEL_92:
    uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
    uint64_t v36 = v35[2];
    if (v36) {
      goto LABEL_80;
    }
LABEL_77:
    __break(1u);
    uint64_t v35 = (void *)a1[5];
    if (v35[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v36 = v35[2];
        if (v36) {
          goto LABEL_80;
        }
        goto LABEL_96;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
    uint64_t v36 = v35[2];
    if (v36) {
      goto LABEL_80;
    }
LABEL_96:
    __break(1u);
    JUMPOUT(0x245D76430);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_92;
  }
  uint64_t v36 = v35[2];
  if (!v36) {
    goto LABEL_77;
  }
LABEL_80:
  uint64_t v37 = v36 - 1;
  uint64_t v38 = v35[v37 + 4];
  v35[2] = v37;
  swift_release();
  a1[5] = v35;
  a1[2] = v38;
  return v6;
}

uint64_t outlined init with take of _DisplayList_AnyEffectAnimation?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyTrackedValue?(0, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_245D764C4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245D764FC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245D76534()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t instantiation function for generic protocol witness table for CodableEffectAnimation.Tag(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CodableEffectAnimation.Tag and conformance CodableEffectAnimation.Tag();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableEffectAnimation.Tag and conformance CodableEffectAnimation.Tag()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableEffectAnimation.Tag and conformance CodableEffectAnimation.Tag;
  if (!lazy protocol witness table cache variable for type CodableEffectAnimation.Tag and conformance CodableEffectAnimation.Tag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableEffectAnimation.Tag and conformance CodableEffectAnimation.Tag);
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableEffectAnimation()
{
  return &type metadata for CodableEffectAnimation;
}

ValueMetadata *type metadata accessor for CodableEffectAnimation.Tag()
{
  return &type metadata for CodableEffectAnimation.Tag;
}

uint64_t sub_245D76608()
{
  return objectdestroy_62Tm();
}

uint64_t sub_245D76610()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t outlined init with take of AccessibilityNodeAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessibilityNodeAttachment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of AccessibilityNodeAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessibilityNodeAttachment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_245D76710()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245D76748()
{
  outlined consume of Path.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245D76790()
{
  return objectdestroy_62Tm();
}

uint64_t objectdestroy_62Tm()
{
  outlined consume of Path.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return swift_deallocObject();
}

uint64_t sub_245D767E4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245D7681C()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

__C::CGRect __swiftcall GraphicsFilter.domainOfDefinition(for:)(__C::CGRect a1)
{
  CGFloat height = a1.size.height;
  CGFloat width = a1.size.width;
  CGFloat y = a1.origin.y;
  CGFloat x = a1.origin.x;
  uint64_t v6 = *(void *)(v1 + 8);
  int v7 = *(unsigned __int8 *)(v1 + 116);
  if (v7 == 15)
  {
    CGRect v20 = CGRectInset((CGRect)a1, COERCE_CGFLOAT(v6 | 0x8000000000000000), COERCE_CGFLOAT(*(void *)(v1 + 16) | 0x8000000000000000));
    goto LABEL_11;
  }
  if (v7 == 2)
  {
    char v8 = *(unsigned char *)(v1 + 44);
    double v9 = 0.0;
    double v10 = 0.0;
    double v11 = 0.0;
    double v12 = 0.0;
    if ((v8 & 1) == 0)
    {
      double v14 = *(double *)(v1 + 24);
      double v13 = *(double *)(v1 + 32);
      double v15 = *(double *)(v1 + 16) * -2.8;
      double v9 = v15 + v13;
      double v10 = v15 + v14;
      double v11 = v15 - v13;
      double v12 = v15 - v14;
    }
    v20.origin.CGFloat x = CGRect.inset(by:)(v9, v10, v11, v12, x, y, width, height);
    if ((v8 & 2) == 0)
    {
      v22.origin.CGFloat x = x;
      v22.origin.CGFloat y = y;
      v22.size.CGFloat width = width;
      v22.size.CGFloat height = height;
      CGRect v20 = CGRectUnion(v20, v22);
    }
    goto LABEL_11;
  }
  if (!*(unsigned char *)(v1 + 116) && (v6 & 1) == 0)
  {
    CGRect v20 = CGRectInset((CGRect)a1, *(double *)v1 * -2.8, *(double *)v1 * -2.8);
LABEL_11:
    CGFloat x = v20.origin.x;
    CGFloat y = v20.origin.y;
    CGFloat width = v20.size.width;
    CGFloat height = v20.size.height;
  }
  double v16 = x;
  double v17 = y;
  double v18 = width;
  double v19 = height;
  result.size.CGFloat height = v19;
  result.size.CGFloat width = v18;
  result.origin.CGFloat y = v17;
  result.origin.CGFloat x = v16;
  return result;
}

void GraphicsFilter.ColorMonochrome.init(color:amount:bias:)(float *a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, float a6@<S4>, float a7@<S5>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = a6;
  a1[5] = a7;
}

void __swiftcall GraphicsFilter.LuminanceCurve.init(curve:amount:)(SwiftUI::GraphicsFilter::LuminanceCurve *__return_ptr retstr, SwiftUI::GraphicsFilter::Curve curve, Swift::Float amount)
{
  retstr->curve = *v3;
  retstr->amount = curve.values._0;
}

void __swiftcall GraphicsFilter.ColorCurves.init(redCurve:greenCurve:blueCurve:opacityCurve:)(SwiftUI::GraphicsFilter::ColorCurves *__return_ptr retstr, SwiftUI::GraphicsFilter::Curve redCurve, SwiftUI::GraphicsFilter::Curve greenCurve, SwiftUI::GraphicsFilter::Curve blueCurve, SwiftUI::GraphicsFilter::Curve opacityCurve)
{
  SwiftUI::GraphicsFilter::Curve v9 = *v6;
  retstr->redCurve = *v5;
  retstr->greenCurve = v9;
  SwiftUI::GraphicsFilter::Curve v10 = *v8;
  retstr->blueCurve = *v7;
  retstr->opacityCurve = v10;
}

SwiftUI::GraphicsFilter::Curve __swiftcall GraphicsFilter.Curve.init(_:)(SwiftUI::GraphicsFilter::Curve result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t GraphicsFilter.ShaderFilter.init(shader:size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  int v4 = *(_DWORD *)(result + 24);
  *(void *)a2 = *(void *)result;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  *(_DWORD *)(a2 + 24) = v4;
  *(double *)(a2 + 32) = a3;
  *(double *)(a2 + 40) = a4;
  return result;
}

float GraphicsFilter.ColorMonochrome.color.getter()
{
  return *(float *)v0;
}

void GraphicsFilter.ColorMonochrome.color.setter(float a1, float a2, float a3, float a4)
{
  *int v4 = a1;
  v4[1] = a2;
  _OWORD v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*GraphicsFilter.ColorMonochrome.color.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float GraphicsFilter.ColorMonochrome.amount.getter()
{
  return *(float *)(v0 + 16);
}

void GraphicsFilter.ColorMonochrome.amount.setter(float a1)
{
  *(float *)(v1 + 16) = a1;
}

uint64_t (*GraphicsFilter.ColorMonochrome.amount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float GraphicsFilter.ColorMonochrome.bias.getter()
{
  return *(float *)(v0 + 20);
}

void GraphicsFilter.ColorMonochrome.bias.setter(float a1)
{
  *(float *)(v1 + 20) = a1;
}

uint64_t (*GraphicsFilter.ColorMonochrome.bias.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float GraphicsFilter.Curve.values.getter()
{
  return *(float *)v0;
}

void GraphicsFilter.Curve.values.setter(float a1, float a2, float a3, float a4)
{
  *int v4 = a1;
  v4[1] = a2;
  _OWORD v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*GraphicsFilter.Curve.values.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void GraphicsFilter.Curve.init(_:)(__n128 *a1@<X8>, __n128 a2@<Q0>)
{
  *a1 = a2;
}

BOOL static GraphicsFilter.Curve.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

__n128 GraphicsFilter.LuminanceCurve.curve.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 GraphicsFilter.LuminanceCurve.curve.setter(__n128 *a1)
{
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  return result;
}

uint64_t (*GraphicsFilter.LuminanceCurve.curve.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float GraphicsFilter.LuminanceCurve.amount.getter()
{
  return *(float *)(v0 + 16);
}

void GraphicsFilter.LuminanceCurve.amount.setter(float a1)
{
  *(float *)(v1 + 16) = a1;
}

uint64_t (*GraphicsFilter.LuminanceCurve.amount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 GraphicsFilter.ColorCurves.redCurve.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 GraphicsFilter.ColorCurves.redCurve.setter(__n128 *a1)
{
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  return result;
}

uint64_t (*GraphicsFilter.ColorCurves.redCurve.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 GraphicsFilter.ColorCurves.greenCurve.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[1];
  *a1 = result;
  return result;
}

__n128 GraphicsFilter.ColorCurves.greenCurve.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*GraphicsFilter.ColorCurves.greenCurve.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 GraphicsFilter.ColorCurves.blueCurve.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[2];
  *a1 = result;
  return result;
}

__n128 GraphicsFilter.ColorCurves.blueCurve.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*GraphicsFilter.ColorCurves.blueCurve.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 GraphicsFilter.ColorCurves.opacityCurve.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[3];
  *a1 = result;
  return result;
}

__n128 GraphicsFilter.ColorCurves.opacityCurve.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[3] = *a1;
  return result;
}

uint64_t (*GraphicsFilter.ColorCurves.opacityCurve.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id GraphicsFilter.ShaderFilter.shader.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)v1;
  int v3 = *(_DWORD *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_DWORD *)(a1 + 24) = v3;
  return v2;
}

__n128 GraphicsFilter.ShaderFilter.shader.setter(uint64_t *a1)
{
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 6);

  *(void *)uint64_t v1 = v3;
  __n128 result = *(__n128 *)(a1 + 1);
  *(__n128 *)(v1 + 8) = result;
  *(_DWORD *)(v1 + 24) = v4;
  return result;
}

uint64_t (*GraphicsFilter.ShaderFilter.shader.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double GraphicsFilter.ShaderFilter.size.getter()
{
  return *(double *)(v0 + 32);
}

void GraphicsFilter.ShaderFilter.size.setter(double a1, double a2)
{
  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*GraphicsFilter.ShaderFilter.size.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static GraphicsBlendMode.normal.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  uint64_t v2 = static GraphicsBlendMode.normal;
  char v3 = byte_26B0EB4A0;
  *(void *)a1 = static GraphicsBlendMode.normal;
  *(unsigned char *)(a1 + 8) = v3;

  return outlined copy of GraphicsBlendMode(v2, v3);
}

uint64_t GraphicsFilter.changesDOD.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 116);
  BOOL v2 = (*(void *)(v0 + 8) & 1) == 0;
  BOOL v3 = v2;
  if (*(unsigned char *)(v0 + 116)) {
    BOOL v3 = 0;
  }
  if (v1 != 1) {
    BOOL v2 = v3;
  }
  return v1 == 2 || v2;
}

void GraphicsFilter.encode(to:)(void *a1)
{
  unint64_t v4 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v6 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v8 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v10 = *(void *)(v1 + 56);
  uint64_t v11 = *(void *)(v1 + 64);
  uint64_t v12 = *(void *)(v1 + 72);
  uint64_t v13 = *(void *)(v1 + 80);
  uint64_t v14 = *(void *)(v1 + 88);
  uint64_t v15 = *(void *)(v1 + 96);
  uint64_t v16 = *(void *)(v1 + 104);
  int v17 = *(_DWORD *)(v1 + 112);
  double v18 = a1;
  switch(*(unsigned char *)(v1 + 116))
  {
    case 1:
      uint64_t v52 = *(void *)(v1 + 40);
      uint64_t v53 = *(void *)(v1 + 32);
      uint64_t v49 = *(void *)(v1 + 64);
      uint64_t v50 = *(void *)(v1 + 48);
      uint64_t v51 = *(void *)(v1 + 56);
      uint64_t v48 = *(void *)(v1 + 72);
      long long v91 = v2;
      uint64_t v47 = v13;
      outlined copy of VariableBlurStyle.Mask((id)v6, v5, v8, v7, v9, v10, v11, v12, v13, v14, v15, v16, v17, BYTE1(v17));
      specialized ProtobufEncoder.messageField<A>(_:_:)(18);
      goto LABEL_40;
    case 2:
      specialized ProtobufEncoder.messageField<A>(_:_:)(2);
      return;
    case 3:
      v54[0] = *(void *)v1;
      v54[1] = v3;
      v54[2] = v6;
      v54[3] = v5;
      v54[4] = v8;
      v54[5] = v7;
      v54[6] = v9;
      v54[7] = v10;
      v54[8] = v11;
      ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)((uint64_t)v54);
      return;
    case 4:
      uint64_t v24 = *(void *)(v1 + 80);
      *(void *)&long long v55 = *(void *)v1;
      *((void *)&v55 + 1) = v3;
      unint64_t v56 = v6;
      uint64_t v57 = v5;
      uint64_t v58 = v8;
      uint64_t v59 = v7;
      uint64_t v60 = v9;
      uint64_t v61 = v10;
      uint64_t v62 = v11;
      uint64_t v63 = v12;
      ProtobufEncoder.encodeVarint(_:)(0x22uLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(&v55);
      if (!v2 && (v24 & 1) != 0)
      {
        ProtobufEncoder.encodeVarint(_:)(0x98uLL);
        ProtobufEncoder.encodeVarint(_:)(1uLL);
      }
      return;
    case 5:
      LODWORD(v25) = *(void *)(v1 + 8);
      LODWORD(v26) = HIDWORD(*(void *)(v1 + 8));
      ProtobufEncoder.encodeVarint(_:)(0x2AuLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(*(float *)&v4, *((float *)&v4 + 1), v25, v26);
      return;
    case 6:
      if ((v4 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
        return;
      }
      double v19 = a1;
      ProtobufEncoder.encodeVarint(_:)(0x31uLL);
      uint64_t v27 = v19[1];
      int64_t v28 = v27 + 8;
      if (!__OFADD__(v27, 8)) {
        goto LABEL_33;
      }
      __break(1u);
LABEL_19:
      if ((v4 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
        return;
      }
      double v19 = v18;
      ProtobufEncoder.encodeVarint(_:)(0x39uLL);
      uint64_t v27 = v19[1];
      int64_t v28 = v27 + 8;
      if (!__OFADD__(v27, 8)) {
        goto LABEL_33;
      }
      __break(1u);
LABEL_23:
      if ((v4 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
        return;
      }
      double v19 = v18;
      ProtobufEncoder.encodeVarint(_:)(0x41uLL);
      uint64_t v27 = v19[1];
      int64_t v28 = v27 + 8;
      if (!__OFADD__(v27, 8)) {
        goto LABEL_33;
      }
      __break(1u);
LABEL_27:
      if ((v4 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
        return;
      }
      double v19 = v18;
      ProtobufEncoder.encodeVarint(_:)(0x49uLL);
      uint64_t v27 = v19[1];
      int64_t v28 = v27 + 8;
      if (!__OFADD__(v27, 8)) {
        goto LABEL_33;
      }
      __break(1u);
LABEL_31:
      if ((v4 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
        return;
      }
      CGRect v20 = v2;
      double v19 = v18;
      ProtobufEncoder.encodeVarint(_:)(0x61uLL);
      uint64_t v27 = v19[1];
      int64_t v28 = v27 + 8;
      if (__OFADD__(v27, 8)) {
        goto LABEL_70;
      }
LABEL_33:
      if (v19[2] < v28)
      {
        *(void *)ProtobufEncoder.growBufferSlow(to:)(v28) = v4;
      }
      else
      {
        v19[1] = v28;
        *(void *)(*v19 + v27) = v4;
      }
      return;
    case 7:
      goto LABEL_19;
    case 8:
      goto LABEL_23;
    case 9:
      goto LABEL_27;
    case 0xA:
      goto LABEL_31;
    case 0xB:
      v64[0] = *(void *)v1;
      v64[1] = v3;
      _OWORD v64[2] = v6;
      specialized ProtobufEncoder.messageField<A>(_:_:)(13, (float *)v64);
      return;
    case 0xC:
      *(void *)&long long v65 = *(void *)v1;
      *((void *)&v65 + 1) = v3;
      unint64_t v66 = v6;
      uint64_t v67 = v5;
      uint64_t v68 = v8;
      uint64_t v69 = v7;
      uint64_t v70 = v9;
      uint64_t v71 = v10;
      uint64_t v72 = v11;
      uint64_t v73 = v12;
      ProtobufEncoder.encodeVarint(_:)(0x72uLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(&v65);
      return;
    case 0xD:
      unint64_t v74 = *(void *)v1;
      uint64_t v75 = v3;
      int v76 = v6;
      specialized ProtobufEncoder.messageField<A>(_:_:)(15);
      return;
    case 0xE:
      unint64_t v77 = *(void *)v1;
      uint64_t v78 = v3;
      unint64_t v79 = v6;
      uint64_t v80 = v5;
      uint64_t v81 = v8;
      uint64_t v82 = v7;
      uint64_t v83 = v9;
      uint64_t v84 = v10;
      specialized ProtobufEncoder.messageField<A>(_:_:)(20);
      return;
    case 0xF:
      unint64_t v85 = *(void *)v1;
      uint64_t v86 = v3;
      unint64_t v87 = v6;
      int v88 = v5;
      uint64_t v89 = v8;
      uint64_t v90 = v7;
      long long v91 = v2;
      uint64_t v51 = v10;
      uint64_t v52 = v7;
      uint64_t v49 = v11;
      uint64_t v50 = v9;
      uint64_t v53 = v8;
      uint64_t v47 = v13;
      uint64_t v48 = v12;
      id v29 = (id)v4;
      specialized ProtobufEncoder.messageField<A>(_:_:)(17);
LABEL_40:
      outlined consume of GraphicsFilter((void *)v4, v3, (id)v6, v5, v53, v52, v50, v51, v49, v48, v47, v14, v15, v16, v17, SBYTE2(v17));
      return;
    case 0x10:
      if (v3 | v4 | v6 | v5 | v8 | v7 | v9 | v10 | v11 | v12 | v13 | v14 | v15 | v16) {
        BOOL v30 = 0;
      }
      else {
        BOOL v30 = v17 == 0;
      }
      if (v30) {
        goto LABEL_54;
      }
      long long v91 = v2;
      if (v17 || v4 != 1 || v6 | v3 | v5 | v8 | v7 | v9 | v10 | v11 | v12 | v13 | v14 | v15 | v16)
      {
        ProtobufEncoder.encodeVarint(_:)(0x5AuLL);
        uint64_t v41 = a1[1];
        uint64_t v42 = a1;
        uint64_t v43 = (void *)a1[3];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
        }
        unint64_t v45 = v43[2];
        unint64_t v44 = v43[3];
        uint64_t v35 = v42;
        if (v45 >= v44 >> 1) {
          uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v44 > 1), v45 + 1, 1, v43);
        }
        v43[2] = v45 + 1;
        v43[v45 + 4] = v41;
        v42[3] = v43;
        uint64_t v36 = (char *)(v41 + 1);
        if (__OFADD__(v41, 1))
        {
          __break(1u);
          JUMPOUT(0x245D7771CLL);
        }
        goto LABEL_65;
      }
      ProtobufEncoder.encodeVarint(_:)(0x52uLL);
      double v19 = (void *)a1[1];
      unint64_t v32 = a1;
      CGRect v20 = (void *)a1[3];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_73;
      }
      goto LABEL_49;
    default:
      uint64_t v14 = (uint64_t)a1;
      ProtobufEncoder.encodeVarint(_:)(0xAuLL);
      double v19 = *(void **)(v14 + 8);
      CGRect v20 = *(void **)(v14 + 24);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        CGRect v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
      }
      unint64_t v22 = v20[2];
      unint64_t v21 = v20[3];
      if (v22 >= v21 >> 1)
      {
        uint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v20);
        unint64_t v23 = (void *)v14;
        CGRect v20 = v46;
      }
      else
      {
        unint64_t v23 = (void *)v14;
      }
      void v20[2] = v22 + 1;
      v20[v22 + 4] = v19;
      v23[3] = v20;
      if (!__OFADD__(v19, 1))
      {
        v23[1] = (char *)v19 + 1;
        BlurStyle.encode(to:)(v23);
LABEL_59:
        ProtobufEncoder.endLengthDelimited()();
        return;
      }
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      CGRect v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
      while (1)
      {
        unint64_t v39 = v20[2];
        unint64_t v38 = v20[3];
        unint64_t v32 = (void *)(v39 + 1);
        if (v39 >= v38 >> 1) {
          CGRect v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v20);
        }
        void v20[2] = v32;
        v20[v39 + 4] = v19;
        *(void *)(v14 + 24) = v20;
        if (!__OFADD__(v19, 1))
        {
          *(void *)(v14 + 8) = (char *)v19 + 1;
          goto LABEL_59;
        }
        __break(1u);
LABEL_73:
        CGRect v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
LABEL_49:
        unint64_t v34 = v20[2];
        unint64_t v33 = v20[3];
        uint64_t v35 = v32;
        if (v34 >= v33 >> 1) {
          CGRect v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v20);
        }
        void v20[2] = v34 + 1;
        v20[v34 + 4] = v19;
        v32[3] = v20;
        uint64_t v36 = (char *)v19 + 1;
        if (!__OFADD__(v19, 1)) {
          break;
        }
        __break(1u);
LABEL_54:
        uint64_t v37 = (uint64_t)v18;
        ProtobufEncoder.encodeVarint(_:)(0x82uLL);
        double v19 = *(void **)(v37 + 8);
        uint64_t v14 = v37;
        CGRect v20 = *(void **)(v37 + 24);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_71;
        }
      }
LABEL_65:
      v35[1] = v36;
      ProtobufEncoder.endLengthDelimited()();
      return;
  }
}

void GraphicsFilter.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v4 = a1;
  uint64_t v213 = *MEMORY[0x263EF8340];
  unint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  if (v5 >= v6)
  {
    id v19 = 0;
    uint64_t v18 = 0;
    uint64_t v17 = 0;
    uint64_t v16 = 0;
    uint64_t v15 = 0;
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    unint64_t v11 = 0;
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    int v7 = 0;
    LOBYTE(v22) = 5;
    unint64_t v23 = 0x3F8000003F800000;
    unint64_t v21 = 0x3F8000003F800000;
LABEL_4:
    v4[3] = 0;
    *(void *)a2 = v23;
    *(void *)(a2 + 8) = v21;
    *(void *)(a2 + 16) = v19;
    *(void *)(a2 + 24) = v18;
    *(void *)(a2 + 32) = v17;
    *(void *)(a2 + 40) = v16;
    *(void *)(a2 + 48) = v15;
    *(void *)(a2 + 56) = v14;
    *(void *)(a2 + 64) = v13;
    *(void *)(a2 + 72) = v12;
    *(void *)(a2 + 80) = v11;
    *(void *)(a2 + 88) = v10;
    *(void *)(a2 + 96) = v9;
    *(void *)(a2 + 104) = v8;
    *(_DWORD *)(a2 + 112) = v7;
    *(unsigned char *)(a2 + 116) = v22;
    return;
  }
  int v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  id v19 = 0;
  LOBYTE(v20) = 0;
  uint64_t v183 = v4 + 5;
  unint64_t v21 = 0x3F8000003F800000;
  int v22 = 5;
  unint64_t v23 = 0x3F8000003F800000;
  char v185 = v4;
  while (2)
  {
    char v186 = v20;
    unint64_t v30 = v4[3];
    *(void *)long long v196 = v21;
    id v197 = v19;
    CGFloat v194 = (void *)v23;
    uint64_t v195 = v8;
    *(_DWORD *)uint64_t v188 = v22;
    int v189 = v7;
    uint64_t v192 = v11;
    uint64_t v193 = v12;
    uint64_t v190 = v10;
    uint64_t v191 = v13;
    uint64_t v187 = v9;
    if (v30)
    {
      unint64_t v31 = v4[4];
      if (v5 < v31) {
        goto LABEL_16;
      }
      if (v31 < v5)
      {
        int v164 = v7;
        uint64_t v165 = v9;
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        int v172 = v164;
        uint64_t v170 = v165;
        uint64_t v171 = v195;
LABEL_250:
        uint64_t v168 = v192;
        uint64_t v169 = v190;
        CGFloat v156 = v194;
        uint64_t v166 = v191;
        uint64_t v167 = v193;
        int v157 = v196[0];
        long long v158 = v197;
        goto LABEL_251;
      }
      v4[3] = 0;
    }
    unint64_t v32 = ProtobufDecoder.decodeVarint()();
    if (v3) {
      goto LABEL_249;
    }
    unint64_t v30 = v32;
    if (v32 < 8)
    {
LABEL_248:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
LABEL_249:
      int v172 = v189;
      uint64_t v170 = v187;
      uint64_t v171 = v195;
      goto LABEL_250;
    }
LABEL_16:
    switch(v30 >> 3)
    {
      case 1uLL:
        if ((v30 & 7) != 2) {
          goto LABEL_248;
        }
        uint64_t v182 = v16;
        uint64_t v33 = v15;
        uint64_t v34 = v14;
        uint64_t v35 = (void *)*v183;
        char v36 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
        }
        unint64_t v38 = v35[2];
        unint64_t v37 = v35[3];
        if (v38 >= v37 >> 1) {
          uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v35);
        }
        v35[2] = v38 + 1;
        v35[v38 + 4] = v6;
        v185[5] = v35;
        uint64_t v39 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_256;
        }
        if (v39 < 0)
        {
          __break(1u);
LABEL_266:
          __break(1u);
LABEL_267:
          __break(1u);
LABEL_268:
          __break(1u);
LABEL_269:
          __break(1u);
LABEL_270:
          __break(1u);
LABEL_271:
          __break(1u);
LABEL_272:
          __break(1u);
LABEL_273:
          __break(1u);
LABEL_274:
          __break(1u);
LABEL_275:
          __break(1u);
LABEL_276:
          __break(1u);
LABEL_277:
          __break(1u);
LABEL_278:
          __break(1u);
LABEL_279:
          __break(1u);
LABEL_280:
          __break(1u);
LABEL_281:
          __break(1u);
LABEL_282:
          __break(1u);
LABEL_283:
          __break(1u);
LABEL_284:
          __break(1u);
LABEL_285:
          __break(1u);
LABEL_286:
          __break(1u);
LABEL_287:
          __break(1u);
LABEL_288:
          __break(1u);
LABEL_289:
          __break(1u);
LABEL_290:
          __break(1u);
LABEL_291:
          __break(1u);
LABEL_292:
          __break(1u);
LABEL_293:
          __break(1u);
LABEL_294:
          __break(1u);
LABEL_295:
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
        }
        unint64_t v40 = v185[1] + v39;
        uint64_t v14 = v34;
        if (v6 < v40) {
          goto LABEL_258;
        }
        v185[2] = v40;
        BlurStyle.init(from:)((unint64_t)v185, (uint64_t)&v199);
        uint64_t v41 = (void *)*v183;
        if (!*(void *)(*v183 + 16)) {
          goto LABEL_274;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew()(v41);
        }
        uint64_t v184 = 0;
        uint64_t v42 = v41[2];
        if (!v42) {
          goto LABEL_282;
        }
        uint64_t v43 = v42 - 1;
        uint64_t v44 = v41[v43 + 4];
        _OWORD v41[2] = v43;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v182, v33, v34, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        int v22 = 0;
        uint64_t v8 = 0;
        v185[5] = v41;
        v185[2] = v44;
        uint64_t v45 = 256;
        if (!BYTE9(v199)) {
          uint64_t v45 = 0;
        }
        unint64_t v28 = v45 | BYTE8(v199);
        int v7 = 0;
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        unint64_t v29 = v199;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v24 = 0;
        unint64_t v25 = 0;
        uint64_t v17 = 0;
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        if (v186) {
          goto LABEL_7;
        }
        LOBYTE(v20) = 0;
        unint64_t v23 = v199;
        unint64_t v21 = v45 | BYTE8(v199);
        id v19 = 0;
        uint64_t v18 = 0;
        uint64_t v17 = 0;
        uint64_t v16 = 0;
        uint64_t v15 = 0;
        uint64_t v14 = 0;
        uint64_t v13 = 0;
        uint64_t v12 = 0;
        unint64_t v11 = 0;
        uint64_t v10 = 0;
        uint64_t v9 = 0;
        int v7 = 0;
        goto LABEL_8;
      case 2uLL:
        if ((v30 & 7) != 2) {
          goto LABEL_248;
        }
        uint64_t v182 = v16;
        uint64_t v33 = v15;
        uint64_t v34 = v14;
        uint64_t v46 = (void *)*v183;
        char v36 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
        }
        unint64_t v48 = v46[2];
        unint64_t v47 = v46[3];
        if (v48 >= v47 >> 1) {
          uint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v47 > 1), v48 + 1, 1, v46);
        }
        v46[2] = v48 + 1;
        v46[v48 + 4] = v6;
        v185[5] = v46;
        uint64_t v49 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_256;
        }
        if (v49 < 0) {
          goto LABEL_266;
        }
        unint64_t v50 = v185[1] + v49;
        uint64_t v14 = v34;
        if (v6 < v50) {
          goto LABEL_258;
        }
        v185[2] = v50;
        ResolvedShadowStyle.init(from:)((unint64_t)v185, (unint64_t)&v199);
        uint64_t v51 = (void *)*v183;
        if (!*(void *)(*v183 + 16)) {
          goto LABEL_275;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew()(v51);
        }
        uint64_t v184 = 0;
        uint64_t v52 = v51[2];
        if (!v52) {
          goto LABEL_283;
        }
        uint64_t v53 = v52 - 1;
        uint64_t v54 = v51[v53 + 4];
        v51[2] = v53;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v182, v33, v34, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        int v7 = 0;
        uint64_t v8 = 0;
        v185[5] = v51;
        v185[2] = v54;
        unint64_t v27 = (unint64_t)v200;
        uint64_t v26 = v201;
        uint64_t v17 = v202;
        unint64_t v25 = v203 | ((unint64_t)BYTE4(v203) << 32);
        int v22 = 2;
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        unint64_t v28 = *((void *)&v199 + 1);
        unint64_t v29 = v199;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v24 = 0;
        if (v186) {
          goto LABEL_7;
        }
LABEL_152:
        LOBYTE(v20) = 0;
        unint64_t v23 = v29;
        unint64_t v21 = v28;
        id v19 = (id)v27;
        uint64_t v18 = v26;
        uint64_t v16 = v25;
        goto LABEL_108;
      case 3uLL:
        if ((v30 & 7) != 2) {
          goto LABEL_248;
        }
        uint64_t v179 = v17;
        uint64_t v182 = v16;
        uint64_t v33 = v15;
        uint64_t v34 = v14;
        long long v55 = (void *)*v183;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55[2] + 1, 1, v55);
        }
        unint64_t v57 = v55[2];
        unint64_t v56 = v55[3];
        if (v57 >= v56 >> 1) {
          long long v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v56 > 1), v57 + 1, 1, v55);
        }
        v55[2] = v57 + 1;
        v55[v57 + 4] = v6;
        v185[5] = v55;
        uint64_t v58 = ProtobufDecoder.decodeVarint()();
        if (!v3)
        {
          if (v58 < 0) {
            goto LABEL_267;
          }
          unint64_t v59 = v185[1] + v58;
          if (v6 < v59)
          {
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v179, v182, v33, v14, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
            return;
          }
          v185[2] = v59;
          long long v200 = 0;
          uint64_t v201 = 0;
          long long v199 = 0x3FF0000000000000uLL;
          uint64_t v202 = 0x3FF0000000000000;
          uint64_t v204 = 0;
          uint64_t v205 = 0;
          unint64_t v203 = 0;
          uint64_t v206 = 0x3FF0000000000000;
          closure #1 in ProjectionTransform.init(from:)((unint64_t)&v199, v185, &v198);
          char v175 = v18;
          uint64_t v176 = v33;
          uint64_t v177 = v14;
          uint64_t v184 = 0;
          uint64_t v60 = (void *)*v183;
          if (!*(void *)(*v183 + 16)) {
            goto LABEL_276;
          }
          unint64_t v28 = *((void *)&v199 + 1);
          unint64_t v29 = v199;
          unint64_t v27 = (unint64_t)v200;
          uint64_t v26 = v201;
          uint64_t v17 = v202;
          unint64_t v25 = v203;
          uint64_t v24 = v204;
          uint64_t v14 = v205;
          uint64_t v174 = v206;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew()(v60);
          }
          uint64_t v61 = v60[2];
          if (!v61) {
            goto LABEL_284;
          }
          uint64_t v62 = v61 - 1;
          uint64_t v173 = v60[v62 + 4];
          _OWORD v60[2] = v62;
          outlined consume of GraphicsFilter(v194, v196[0], v197, v175, v179, v182, v176, v177, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
          int v7 = 0;
          uint64_t v8 = 0;
          v185[5] = v60;
          int v22 = 3;
          uint64_t v13 = v174;
          v185[2] = v173;
          uint64_t v9 = 0;
          uint64_t v10 = 0;
          unint64_t v11 = 0;
          uint64_t v12 = 0;
          if (v186)
          {
LABEL_7:
            LOBYTE(v20) = 1;
            unint64_t v23 = v29;
            unint64_t v21 = v28;
            id v19 = (id)v27;
            uint64_t v18 = v26;
            uint64_t v16 = v25;
            uint64_t v15 = v24;
          }
          else
          {
            LOBYTE(v20) = 0;
            unint64_t v23 = v29;
            unint64_t v21 = v28;
            id v19 = (id)v27;
            uint64_t v18 = v26;
            uint64_t v16 = v25;
            uint64_t v15 = v24;
LABEL_109:
            uint64_t v12 = 0;
            unint64_t v11 = 0;
            uint64_t v10 = 0;
            uint64_t v9 = 0;
          }
LABEL_8:
          uint64_t v3 = v184;
          unint64_t v4 = v185;
LABEL_9:
          unint64_t v5 = v4[1];
          unint64_t v6 = v4[2];
          if (v5 >= v6) {
            goto LABEL_4;
          }
          continue;
        }
        int v172 = v189;
        CGFloat v156 = v194;
        uint64_t v170 = v187;
        uint64_t v171 = v195;
        uint64_t v168 = v192;
        uint64_t v169 = v190;
        uint64_t v166 = v13;
        uint64_t v167 = v193;
        int v157 = v196[0];
        long long v158 = v197;
        char v159 = v18;
        uint64_t v160 = v179;
LABEL_257:
        uint64_t v161 = v182;
        uint64_t v162 = v33;
        uint64_t v163 = v34;
LABEL_253:
        outlined consume of GraphicsFilter(v156, v157, v158, v159, v160, v161, v162, v163, v166, v167, v168, v169, v170, v171, v172, SBYTE2(v172));
        return;
      case 4uLL:
        if ((v30 & 7) != 2) {
          goto LABEL_260;
        }
        specialized ProtobufDecoder.decodeMessage<A>()(&v199);
        if (v3) {
          goto LABEL_261;
        }
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        unint64_t v21 = *((void *)&v199 + 1);
        unint64_t v23 = v199;
        id v19 = v200;
        uint64_t v18 = v201;
        uint64_t v17 = v202;
        uint64_t v16 = v203;
        uint64_t v15 = v204;
        uint64_t v14 = v205;
        unint64_t v11 = v178 & 0xFFFFFFFFFFFFFF00;
        uint64_t v13 = v206;
        uint64_t v12 = v207;
        v178 &= 0xFFFFFFFFFFFFFF00;
        if (v186)
        {
          unint64_t v63 = v180;
LABEL_216:
          unint64_t v11 = v63 & 0xFFFFFFFFFFFFFF00 | 1;
          int v22 = 4;
          LOBYTE(v20) = 1;
          unint64_t v180 = v11;
        }
        else
        {
          LOBYTE(v20) = 0;
          int v22 = 4;
        }
        goto LABEL_9;
      case 5uLL:
        if ((v30 & 7) != 2) {
          goto LABEL_248;
        }
        uint64_t v182 = v16;
        uint64_t v33 = v15;
        uint64_t v34 = v14;
        uint64_t v64 = (void *)*v183;
        char v36 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        }
        unint64_t v66 = v64[2];
        unint64_t v65 = v64[3];
        if (v66 >= v65 >> 1) {
          uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v65 > 1), v66 + 1, 1, v64);
        }
        _OWORD v64[2] = v66 + 1;
        v64[v66 + 4] = v6;
        v185[5] = v64;
        uint64_t v67 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_256;
        }
        if (v67 < 0) {
          goto LABEL_268;
        }
        unint64_t v68 = v185[1] + v67;
        uint64_t v14 = v34;
        if (v6 < v68) {
          goto LABEL_258;
        }
        v185[2] = v68;
        float v69 = specialized Color.Resolved.init(from:)(v185);
        uint64_t v73 = (void *)*v183;
        if (!*(void *)(*v183 + 16)) {
          goto LABEL_277;
        }
        float v74 = v69;
        unsigned int v75 = v70;
        unsigned int v76 = v71;
        unsigned int v77 = v72;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v73 = specialized _ArrayBuffer._consumeAndCreateNew()(v73);
        }
        uint64_t v184 = 0;
        uint64_t v78 = v73[2];
        if (!v78) {
          goto LABEL_285;
        }
        uint64_t v79 = v78 - 1;
        uint64_t v80 = v73[v79 + 4];
        v73[2] = v79;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v182, v33, v34, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        int v7 = 0;
        uint64_t v8 = 0;
        v185[5] = v73;
        v185[2] = v80;
        unint64_t v29 = LODWORD(v74) | ((unint64_t)v75 << 32);
        unint64_t v28 = v76 | ((unint64_t)v77 << 32);
        int v22 = 5;
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v24 = 0;
        unint64_t v25 = 0;
        uint64_t v17 = 0;
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        if (v186) {
          goto LABEL_7;
        }
        LOBYTE(v20) = 0;
        unint64_t v23 = LODWORD(v74) | ((unint64_t)v75 << 32);
        unint64_t v21 = v76 | ((unint64_t)v77 << 32);
        goto LABEL_106;
      case 6uLL:
        unint64_t v81 = v30 & 7;
        if (v81 == 5)
        {
          unint64_t v137 = (float *)v4[1];
          uint64_t v138 = v4;
          uint64_t v139 = v137 + 1;
          if (v6 < (unint64_t)(v137 + 1)) {
            goto LABEL_248;
          }
          uint64_t v184 = v3;
          float v140 = *v137;
          outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
          v138[1] = v139;
          double v141 = v140;
          char v83 = v186;
        }
        else
        {
          if (v81 == 2)
          {
            uint64_t v142 = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_249;
            }
            char v83 = v186;
            if (v142 < 0) {
              goto LABEL_291;
            }
            uint64_t v82 = (double *)v4[1];
            if (v6 < (unint64_t)v82 + v142) {
              goto LABEL_248;
            }
            v4[3] = 49;
            v4[4] = (char *)v82 + v142;
          }
          else
          {
            if (v81 != 1) {
              goto LABEL_248;
            }
            uint64_t v82 = (double *)v4[1];
            char v83 = v186;
          }
          uint64_t v143 = v82 + 1;
          if (v6 < (unint64_t)(v82 + 1))
          {
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            int v172 = v189;
            CGFloat v156 = v194;
            uint64_t v170 = v187;
            uint64_t v171 = v195;
            uint64_t v168 = v192;
            uint64_t v169 = v190;
            uint64_t v166 = v13;
            uint64_t v167 = v193;
            int v157 = v196[0];
            long long v158 = v197;
            goto LABEL_251;
          }
          uint64_t v184 = v3;
          double v141 = *v82;
          outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
          v185[1] = v143;
        }
        int v7 = 0;
        uint64_t v8 = 0;
        unint64_t v29 = *(void *)&v141;
        int v22 = 6;
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v24 = 0;
        unint64_t v25 = 0;
        uint64_t v17 = 0;
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        unint64_t v28 = 0;
        if (v83) {
          goto LABEL_7;
        }
LABEL_104:
        LOBYTE(v20) = 0;
        unint64_t v23 = v29;
        goto LABEL_105;
      case 7uLL:
        *(void *)&long long v199 = v30;
        double v84 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)&v199);
        unint64_t v28 = v85;
        if (v85) {
          goto LABEL_249;
        }
        double v86 = v84;
        uint64_t v184 = 0;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v191, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        int v7 = 0;
        uint64_t v8 = 0;
        unint64_t v29 = *(void *)&v86;
        int v22 = 7;
        goto LABEL_103;
      case 8uLL:
        *(void *)&long long v199 = v30;
        double v87 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)&v199);
        unint64_t v28 = v88;
        if (v88) {
          goto LABEL_249;
        }
        double v89 = v87;
        uint64_t v184 = 0;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v191, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        int v7 = 0;
        uint64_t v8 = 0;
        unint64_t v29 = *(void *)&v89;
        int v22 = 8;
        goto LABEL_103;
      case 9uLL:
        *(void *)&long long v199 = v30;
        double v90 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)&v199);
        unint64_t v28 = v91;
        if (v91) {
          goto LABEL_249;
        }
        double v92 = v90;
        uint64_t v184 = 0;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v191, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        int v7 = 0;
        uint64_t v8 = 0;
        unint64_t v29 = *(void *)&v92;
        int v22 = 9;
        goto LABEL_103;
      case 0xAuLL:
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        switch(v30 & 7)
        {
          case 0uLL:
            uint64_t v13 = v3;
            ProtobufDecoder.decodeVarint()();
            if (v3) {
              return;
            }
            unint64_t v21 = 0;
            id v19 = 0;
            uint64_t v18 = 0;
            uint64_t v17 = 0;
            uint64_t v16 = 0;
            uint64_t v15 = 0;
            uint64_t v14 = 0;
            uint64_t v12 = 0;
            unint64_t v11 = 0;
            uint64_t v10 = 0;
            uint64_t v9 = 0;
            uint64_t v8 = 0;
            int v7 = 0;
            int v22 = 16;
            unint64_t v23 = 1;
            if (v186) {
              goto LABEL_215;
            }
            goto LABEL_192;
          case 1uLL:
            unint64_t v147 = v4[1] + 8;
            goto LABEL_225;
          case 2uLL:
            uint64_t v148 = ProtobufDecoder.decodeVarint()();
            if (v3) {
              return;
            }
            if (v148 < 0) {
              goto LABEL_293;
            }
            unint64_t v149 = v4[1] + v148;
            if (v6 < v149) {
              goto LABEL_259;
            }
            uint64_t v184 = 0;
            int v7 = 0;
            uint64_t v8 = 0;
            v4[1] = v149;
            int v22 = 16;
            uint64_t v9 = 0;
            uint64_t v10 = 0;
            unint64_t v11 = 0;
            uint64_t v12 = 0;
            uint64_t v13 = 0;
            uint64_t v14 = 0;
            uint64_t v24 = 0;
            unint64_t v25 = 0;
            uint64_t v17 = 0;
            uint64_t v26 = 0;
            unint64_t v27 = 0;
            unint64_t v28 = 0;
            unint64_t v29 = 1;
            if (v186) {
              goto LABEL_7;
            }
LABEL_227:
            LOBYTE(v20) = 0;
            unint64_t v23 = 1;
            break;
          case 5uLL:
            unint64_t v147 = v4[1] + 4;
LABEL_225:
            if (v6 < v147) {
              goto LABEL_259;
            }
            uint64_t v184 = v3;
            int v7 = 0;
            uint64_t v8 = 0;
            v4[1] = v147;
            int v22 = 16;
            uint64_t v9 = 0;
            uint64_t v10 = 0;
            unint64_t v11 = 0;
            uint64_t v12 = 0;
            uint64_t v13 = 0;
            uint64_t v14 = 0;
            uint64_t v24 = 0;
            unint64_t v25 = 0;
            uint64_t v17 = 0;
            uint64_t v26 = 0;
            unint64_t v27 = 0;
            unint64_t v28 = 0;
            unint64_t v29 = 1;
            if ((v186 & 1) == 0) {
              goto LABEL_227;
            }
            goto LABEL_7;
          default:
            goto LABEL_259;
        }
        goto LABEL_105;
      case 0xBuLL:
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        switch(v30 & 7)
        {
          case 0uLL:
            uint64_t v13 = v3;
            ProtobufDecoder.decodeVarint()();
            if (v3) {
              return;
            }
            unint64_t v21 = 0;
            id v19 = 0;
            uint64_t v18 = 0;
            uint64_t v17 = 0;
            uint64_t v16 = 0;
            uint64_t v15 = 0;
            uint64_t v14 = 0;
            uint64_t v12 = 0;
            unint64_t v11 = 0;
            uint64_t v10 = 0;
            uint64_t v9 = 0;
            uint64_t v8 = 0;
            int v7 = 0;
            int v22 = 16;
            unint64_t v23 = 2;
            if (v186) {
              goto LABEL_215;
            }
            goto LABEL_192;
          case 1uLL:
            unint64_t v150 = v4[1] + 8;
            goto LABEL_235;
          case 2uLL:
            uint64_t v151 = ProtobufDecoder.decodeVarint()();
            if (v3) {
              return;
            }
            if (v151 < 0) {
              goto LABEL_294;
            }
            unint64_t v152 = v4[1] + v151;
            if (v6 < v152) {
              goto LABEL_259;
            }
            uint64_t v184 = 0;
            int v7 = 0;
            uint64_t v8 = 0;
            v4[1] = v152;
            int v22 = 16;
            uint64_t v9 = 0;
            uint64_t v10 = 0;
            unint64_t v11 = 0;
            uint64_t v12 = 0;
            uint64_t v13 = 0;
            uint64_t v14 = 0;
            uint64_t v24 = 0;
            unint64_t v25 = 0;
            uint64_t v17 = 0;
            uint64_t v26 = 0;
            unint64_t v27 = 0;
            unint64_t v28 = 0;
            unint64_t v29 = 2;
            if (v186) {
              goto LABEL_7;
            }
LABEL_237:
            LOBYTE(v20) = 0;
            unint64_t v23 = 2;
            break;
          case 5uLL:
            unint64_t v150 = v4[1] + 4;
LABEL_235:
            if (v6 < v150) {
              goto LABEL_259;
            }
            uint64_t v184 = v3;
            int v7 = 0;
            uint64_t v8 = 0;
            v4[1] = v150;
            int v22 = 16;
            uint64_t v9 = 0;
            uint64_t v10 = 0;
            unint64_t v11 = 0;
            uint64_t v12 = 0;
            uint64_t v13 = 0;
            uint64_t v14 = 0;
            uint64_t v24 = 0;
            unint64_t v25 = 0;
            uint64_t v17 = 0;
            uint64_t v26 = 0;
            unint64_t v27 = 0;
            unint64_t v28 = 0;
            unint64_t v29 = 2;
            if ((v186 & 1) == 0) {
              goto LABEL_237;
            }
            goto LABEL_7;
          default:
            goto LABEL_259;
        }
        goto LABEL_105;
      case 0xCuLL:
        *(void *)&long long v199 = v30;
        double v93 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)&v199);
        unint64_t v28 = v94;
        if (v94) {
          goto LABEL_249;
        }
        double v95 = v93;
        uint64_t v184 = 0;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v191, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        int v7 = 0;
        uint64_t v8 = 0;
        unint64_t v29 = *(void *)&v95;
        int v22 = 10;
LABEL_103:
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v24 = 0;
        unint64_t v25 = 0;
        uint64_t v17 = 0;
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        if ((v186 & 1) == 0) {
          goto LABEL_104;
        }
        goto LABEL_7;
      case 0xDuLL:
        if ((v30 & 7) != 2) {
          goto LABEL_248;
        }
        uint64_t v182 = v16;
        uint64_t v33 = v15;
        uint64_t v34 = v14;
        uint64_t v96 = (void *)*v183;
        char v36 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v96[2] + 1, 1, v96);
        }
        unint64_t v98 = v96[2];
        unint64_t v97 = v96[3];
        if (v98 >= v97 >> 1) {
          uint64_t v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v97 > 1), v98 + 1, 1, v96);
        }
        v96[2] = v98 + 1;
        v96[v98 + 4] = v6;
        v185[5] = v96;
        uint64_t v99 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_256;
        }
        if (v99 < 0) {
          goto LABEL_269;
        }
        unint64_t v100 = v185[1] + v99;
        uint64_t v14 = v34;
        if (v6 < v100) {
          goto LABEL_258;
        }
        v185[2] = v100;
        GraphicsFilter.ColorMonochrome.init(from:)((unint64_t)v185, (uint64_t)&v199);
        uint64_t v101 = (void *)*v183;
        if (!*(void *)(*v183 + 16)) {
          goto LABEL_278;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v101 = specialized _ArrayBuffer._consumeAndCreateNew()(v101);
        }
        uint64_t v184 = 0;
        uint64_t v102 = v101[2];
        if (!v102) {
          goto LABEL_286;
        }
        uint64_t v103 = v102 - 1;
        uint64_t v104 = v101[v103 + 4];
        v101[2] = v103;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v182, v33, v34, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        int v7 = 0;
        uint64_t v8 = 0;
        v185[5] = v101;
        v185[2] = v104;
        unint64_t v28 = *((void *)&v199 + 1);
        unint64_t v29 = v199;
        int v22 = 11;
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        unint64_t v27 = (unint64_t)v200;
        goto LABEL_140;
      case 0xEuLL:
        if ((v30 & 7) != 2)
        {
LABEL_260:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_261:
          int v157 = v196[0];
          long long v158 = v197;
          int v172 = v189;
          CGFloat v156 = v194;
          uint64_t v170 = v187;
          uint64_t v171 = v195;
          uint64_t v168 = v192;
          uint64_t v169 = v190;
          uint64_t v166 = v13;
          uint64_t v167 = v193;
LABEL_251:
          char v159 = v18;
          uint64_t v160 = v17;
          uint64_t v161 = v16;
          uint64_t v162 = v15;
LABEL_252:
          uint64_t v163 = v14;
          goto LABEL_253;
        }
        specialized ProtobufDecoder.decodeMessage<A>()(&v199);
        if (v3) {
          goto LABEL_261;
        }
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        unint64_t v21 = *((void *)&v199 + 1);
        unint64_t v23 = v199;
        id v19 = v200;
        uint64_t v18 = v201;
        uint64_t v17 = v202;
        uint64_t v16 = v203;
        uint64_t v15 = v204;
        uint64_t v14 = v205;
        int v22 = 12;
        uint64_t v13 = v206;
        uint64_t v12 = v207;
        if ((v186 & 1) == 0)
        {
          LOBYTE(v20) = 0;
          goto LABEL_9;
        }
        uint64_t v184 = 0;
LABEL_6:
        uint64_t v24 = v15;
        unint64_t v25 = v16;
        uint64_t v26 = v18;
        unint64_t v27 = (unint64_t)v19;
        unint64_t v28 = v21;
        unint64_t v29 = v23;
        goto LABEL_7;
      case 0xFuLL:
        if ((v30 & 7) != 2) {
          goto LABEL_248;
        }
        uint64_t v182 = v16;
        uint64_t v33 = v15;
        uint64_t v34 = v14;
        uint64_t v105 = (void *)*v183;
        char v36 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v105[2] + 1, 1, v105);
        }
        unint64_t v107 = v105[2];
        unint64_t v106 = v105[3];
        if (v107 >= v106 >> 1) {
          uint64_t v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v106 > 1), v107 + 1, 1, v105);
        }
        v105[2] = v107 + 1;
        v105[v107 + 4] = v6;
        v185[5] = v105;
        uint64_t v108 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_256;
        }
        if (v108 < 0) {
          goto LABEL_270;
        }
        unint64_t v109 = v185[1] + v108;
        uint64_t v14 = v34;
        if (v6 < v109) {
          goto LABEL_258;
        }
        v185[2] = v109;
        GraphicsFilter.LuminanceCurve.init(from:)((unint64_t)v185, (uint64_t)&v199);
        unint64_t v110 = (void *)*v183;
        if (!*(void *)(*v183 + 16)) {
          goto LABEL_279;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v110 = specialized _ArrayBuffer._consumeAndCreateNew()(v110);
        }
        uint64_t v184 = 0;
        uint64_t v111 = v110[2];
        if (!v111) {
          goto LABEL_287;
        }
        uint64_t v112 = v111 - 1;
        uint64_t v113 = v110[v112 + 4];
        v110[2] = v112;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v182, v33, v34, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        int v7 = 0;
        uint64_t v8 = 0;
        v185[5] = v110;
        v185[2] = v113;
        int v22 = 13;
        unint64_t v27 = v200;
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        unint64_t v28 = *((void *)&v199 + 1);
        unint64_t v29 = v199;
LABEL_140:
        uint64_t v24 = 0;
        unint64_t v25 = 0;
        uint64_t v17 = 0;
        uint64_t v26 = 0;
        if (v186) {
          goto LABEL_7;
        }
        LOBYTE(v20) = 0;
        unint64_t v23 = v29;
        unint64_t v21 = v28;
        id v19 = (id)v27;
        goto LABEL_107;
      case 0x10uLL:
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        switch(v30 & 7)
        {
          case 0uLL:
            uint64_t v13 = v3;
            ProtobufDecoder.decodeVarint()();
            if (v3) {
              return;
            }
            unint64_t v23 = 0;
            unint64_t v21 = 0;
            id v19 = 0;
            uint64_t v18 = 0;
            uint64_t v17 = 0;
            uint64_t v16 = 0;
            uint64_t v15 = 0;
            uint64_t v14 = 0;
            uint64_t v12 = 0;
            unint64_t v11 = 0;
            uint64_t v10 = 0;
            uint64_t v9 = 0;
            uint64_t v8 = 0;
            int v7 = 0;
            int v22 = 16;
            if ((v186 & 1) == 0) {
              goto LABEL_192;
            }
            goto LABEL_215;
          case 1uLL:
            unint64_t v153 = v4[1] + 8;
            goto LABEL_245;
          case 2uLL:
            uint64_t v154 = ProtobufDecoder.decodeVarint()();
            if (v3) {
              return;
            }
            if (v154 < 0) {
              goto LABEL_295;
            }
            unint64_t v155 = v4[1] + v154;
            if (v6 < v155)
            {
LABEL_259:
              lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
              swift_allocError();
              swift_willThrow();
              return;
            }
            uint64_t v184 = 0;
            int v7 = 0;
            uint64_t v8 = 0;
            v4[1] = v155;
            int v22 = 16;
            uint64_t v9 = 0;
            uint64_t v10 = 0;
            unint64_t v11 = 0;
            uint64_t v12 = 0;
            uint64_t v13 = 0;
            uint64_t v14 = 0;
            uint64_t v24 = 0;
            unint64_t v25 = 0;
            uint64_t v17 = 0;
            uint64_t v26 = 0;
            unint64_t v27 = 0;
            unint64_t v28 = 0;
            unint64_t v29 = 0;
            if (v186) {
              goto LABEL_7;
            }
LABEL_247:
            LOBYTE(v20) = 0;
            unint64_t v23 = 0;
LABEL_105:
            unint64_t v21 = 0;
LABEL_106:
            id v19 = 0;
LABEL_107:
            uint64_t v18 = 0;
            uint64_t v17 = 0;
            uint64_t v16 = 0;
LABEL_108:
            uint64_t v15 = 0;
            uint64_t v14 = 0;
            uint64_t v13 = 0;
            break;
          case 5uLL:
            unint64_t v153 = v4[1] + 4;
LABEL_245:
            if (v6 < v153) {
              goto LABEL_259;
            }
            uint64_t v184 = v3;
            int v7 = 0;
            uint64_t v8 = 0;
            v4[1] = v153;
            int v22 = 16;
            uint64_t v9 = 0;
            uint64_t v10 = 0;
            unint64_t v11 = 0;
            uint64_t v12 = 0;
            uint64_t v13 = 0;
            uint64_t v14 = 0;
            uint64_t v24 = 0;
            unint64_t v25 = 0;
            uint64_t v17 = 0;
            uint64_t v26 = 0;
            unint64_t v27 = 0;
            unint64_t v28 = 0;
            unint64_t v29 = 0;
            if ((v186 & 1) == 0) {
              goto LABEL_247;
            }
            goto LABEL_7;
          default:
            goto LABEL_259;
        }
        goto LABEL_109;
      case 0x11uLL:
        if ((v30 & 7) != 2) {
          goto LABEL_248;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          goto LABEL_249;
        }
        GraphicsFilter.ShaderFilter.init(from:)(v4, (uint64_t)&v199);
        if (!*(void *)(*v183 + 16)) {
          goto LABEL_273;
        }
        uint64_t v114 = specialized Array._customRemoveLast()();
        uint64_t v184 = 0;
        if (!v114) {
          uint64_t v114 = specialized Array.remove(at:)(*(void *)(*v183 + 16) - 1);
        }
        uint64_t v115 = v114;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        int v7 = 0;
        uint64_t v8 = 0;
        _OWORD v4[2] = v115;
        unint64_t v28 = *((void *)&v199 + 1);
        unint64_t v29 = v199;
        unint64_t v27 = (unint64_t)v200;
        int v22 = 15;
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v26 = v201;
        unint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v24 = 0;
        uint64_t v17 = v202;
        unint64_t v25 = v203;
        if ((v186 & 1) == 0) {
          goto LABEL_152;
        }
        goto LABEL_7;
      case 0x12uLL:
        if ((v30 & 7) != 2) {
          goto LABEL_248;
        }
        uint64_t v182 = v16;
        uint64_t v33 = v15;
        uint64_t v34 = v14;
        uint64_t v116 = (void *)*v183;
        char v36 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v116[2] + 1, 1, v116);
        }
        unint64_t v118 = v116[2];
        unint64_t v117 = v116[3];
        if (v118 >= v117 >> 1) {
          uint64_t v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v117 > 1), v118 + 1, 1, v116);
        }
        v116[2] = v118 + 1;
        v116[v118 + 4] = v6;
        v185[5] = v116;
        uint64_t v119 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_256;
        }
        if (v119 < 0) {
          goto LABEL_271;
        }
        unint64_t v120 = v185[1] + v119;
        uint64_t v14 = v34;
        if (v6 < v120) {
          goto LABEL_258;
        }
        v185[2] = v120;
        VariableBlurStyle.init(from:)(v185, (uint64_t)&v199);
        uint64_t v121 = (void *)*v183;
        if (!*(void *)(*v183 + 16)) {
          goto LABEL_280;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v121 = specialized _ArrayBuffer._consumeAndCreateNew()(v121);
        }
        uint64_t v122 = v121[2];
        if (!v122) {
          goto LABEL_288;
        }
        uint64_t v123 = v122 - 1;
        uint64_t v124 = v121[v123 + 4];
        v121[2] = v123;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v182, v33, v34, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        v185[5] = v121;
        v185[2] = v124;
        unint64_t v4 = v185;
        unint64_t v23 = v199;
        id v19 = v200;
        uint64_t v18 = v201;
        uint64_t v17 = v202;
        uint64_t v16 = v203;
        uint64_t v15 = v204;
        uint64_t v14 = v205;
        uint64_t v13 = v206;
        uint64_t v12 = v207;
        unint64_t v11 = v208;
        uint64_t v10 = v209;
        uint64_t v9 = v210;
        uint64_t v8 = v211;
        uint64_t v125 = 256;
        if (!BYTE9(v199)) {
          uint64_t v125 = 0;
        }
        unint64_t v21 = v125 | BYTE8(v199);
        int v22 = 1;
        int v7 = v212;
        if (v186)
        {
          uint64_t v184 = 0;
          goto LABEL_6;
        }
LABEL_192:
        LOBYTE(v20) = 0;
        goto LABEL_9;
      case 0x13uLL:
        if ((v30 & 7) == 0) {
          goto LABEL_175;
        }
        if ((v30 & 7) != 2) {
          goto LABEL_248;
        }
        uint64_t v126 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_249;
        }
        if (v126 < 0) {
          goto LABEL_290;
        }
        unint64_t v127 = v4[1] + v126;
        if (v6 < v127) {
          goto LABEL_248;
        }
        v4[3] = 152;
        v4[4] = v127;
LABEL_175:
        uint64_t v20 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_249;
        }
        unint64_t v21 = *(void *)v196;
        id v19 = v197;
        unint64_t v23 = (unint64_t)v194;
        uint64_t v8 = v195;
        int v22 = *(_DWORD *)v188;
        int v7 = v189;
        unint64_t v11 = v192;
        uint64_t v12 = v193;
        uint64_t v10 = v190;
        uint64_t v9 = v187;
        if (!v20) {
          goto LABEL_9;
        }
LABEL_215:
        unint64_t v63 = v180;
        if (v22 == 4) {
          goto LABEL_216;
        }
        LOBYTE(v20) = 1;
        goto LABEL_9;
      case 0x14uLL:
        if ((v30 & 7) != 2) {
          goto LABEL_248;
        }
        uint64_t v182 = v16;
        uint64_t v33 = v15;
        uint64_t v34 = v14;
        uint64_t v128 = (void *)*v183;
        char v36 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v128 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v128[2] + 1, 1, v128);
        }
        unint64_t v130 = v128[2];
        unint64_t v129 = v128[3];
        if (v130 >= v129 >> 1) {
          uint64_t v128 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v129 > 1), v130 + 1, 1, v128);
        }
        v128[2] = v130 + 1;
        v128[v130 + 4] = v6;
        v185[5] = v128;
        uint64_t v13 = v3;
        uint64_t v131 = ProtobufDecoder.decodeVarint()();
        if (v3)
        {
LABEL_256:
          int v172 = v189;
          CGFloat v156 = v194;
          uint64_t v170 = v187;
          uint64_t v171 = v195;
          uint64_t v168 = v192;
          uint64_t v169 = v190;
          uint64_t v166 = v191;
          uint64_t v167 = v193;
          int v157 = v196[0];
          long long v158 = v197;
          char v159 = v36;
          uint64_t v160 = v17;
          goto LABEL_257;
        }
        if (v131 < 0) {
          goto LABEL_272;
        }
        unint64_t v132 = v185[1] + v131;
        uint64_t v14 = v34;
        if (v6 < v132)
        {
LABEL_258:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          int v172 = v189;
          CGFloat v156 = v194;
          uint64_t v170 = v187;
          uint64_t v171 = v195;
          uint64_t v168 = v192;
          uint64_t v169 = v190;
          uint64_t v166 = v191;
          uint64_t v167 = v193;
          int v157 = v196[0];
          long long v158 = v197;
          char v159 = v18;
          uint64_t v160 = v17;
          uint64_t v161 = v182;
          uint64_t v162 = v33;
          goto LABEL_252;
        }
        v185[2] = v132;
        GraphicsFilter.ColorCurves.init(from:)((unint64_t)v185, &v199);
        uint64_t v133 = (void *)*v183;
        if (!*(void *)(*v183 + 16)) {
          goto LABEL_281;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v133 = specialized _ArrayBuffer._consumeAndCreateNew()(v133);
        }
        uint64_t v134 = v133[2];
        if (!v134) {
          goto LABEL_289;
        }
        uint64_t v135 = v134 - 1;
        uint64_t v136 = v133[v135 + 4];
        v133[2] = v135;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v182, v33, v34, v191, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        v185[5] = v133;
        v185[2] = v136;
        unint64_t v4 = v185;
        unint64_t v21 = *((void *)&v199 + 1);
        unint64_t v23 = v199;
        id v19 = v200;
        uint64_t v18 = v201;
        uint64_t v17 = v202;
        uint64_t v16 = v203;
        int v22 = 14;
        uint64_t v15 = v204;
        uint64_t v14 = v205;
        if (v186)
        {
          uint64_t v184 = 0;
          goto LABEL_6;
        }
        LOBYTE(v20) = 0;
        goto LABEL_9;
      default:
        switch(v30 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_249;
            }
            unint64_t v21 = *(void *)v196;
            id v19 = v197;
            unint64_t v23 = (unint64_t)v194;
            uint64_t v8 = v195;
            int v22 = *(_DWORD *)v188;
            int v7 = v189;
            unint64_t v11 = v192;
            uint64_t v12 = v193;
            uint64_t v10 = v190;
            uint64_t v9 = v187;
            if (v186) {
              goto LABEL_215;
            }
            goto LABEL_192;
          case 1uLL:
            unint64_t v144 = v4[1] + 8;
            goto LABEL_212;
          case 2uLL:
            uint64_t v145 = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_249;
            }
            if (v145 < 0) {
              goto LABEL_292;
            }
            unint64_t v146 = v4[1] + v145;
            if (v6 < v146) {
              goto LABEL_248;
            }
            v4[1] = v146;
            if ((v186 & 1) == 0)
            {
LABEL_210:
              LOBYTE(v20) = 0;
              unint64_t v21 = *(void *)v196;
              id v19 = v197;
              unint64_t v23 = (unint64_t)v194;
              uint64_t v8 = v195;
              int v22 = *(_DWORD *)v188;
              int v7 = v189;
              unint64_t v11 = v192;
              uint64_t v12 = v193;
              uint64_t v10 = v190;
              uint64_t v9 = v187;
              goto LABEL_9;
            }
LABEL_214:
            unint64_t v21 = *(void *)v196;
            id v19 = v197;
            unint64_t v23 = (unint64_t)v194;
            uint64_t v8 = v195;
            int v22 = *(_DWORD *)v188;
            int v7 = v189;
            unint64_t v11 = v192;
            uint64_t v12 = v193;
            uint64_t v10 = v190;
            uint64_t v9 = v187;
            break;
          case 5uLL:
            unint64_t v144 = v4[1] + 4;
LABEL_212:
            if (v6 < v144) {
              goto LABEL_248;
            }
            v4[1] = v144;
            if (v186) {
              goto LABEL_214;
            }
            goto LABEL_210;
          default:
            goto LABEL_248;
        }
        goto LABEL_215;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance GraphicsFilter(void *a1)
{
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance GraphicsFilter(void *a1@<X0>, uint64_t a2@<X8>)
{
}

float *GraphicsFilter.ColorMonochrome.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  float v5 = *v3;
  float v6 = v3[1];
  float v7 = v3[2];
  float v8 = v3[3];
  float v10 = v3[4];
  float v9 = v3[5];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  __n128 result = (float *)specialized ProtobufEncoder.encodeMessage<A>(_:)(v5, v6, v7, v8);
  if (!v2)
  {
    if (v10 == 1.0) {
      goto LABEL_6;
    }
    ProtobufEncoder.encodeVarint(_:)(0x15uLL);
    uint64_t v12 = a1[1];
    __n128 result = (float *)(v12 + 4);
    if (__OFADD__(v12, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= (uint64_t)result)
    {
      a1[1] = result;
      *(float *)(*a1 + v12) = v10;
LABEL_6:
      if (v9 == 0.0) {
        return result;
      }
LABEL_7:
      ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
      uint64_t v13 = a1[1];
      __n128 result = (float *)(v13 + 4);
      if (__OFADD__(v13, 4))
      {
        __break(1u);
      }
      else if (a1[2] >= (uint64_t)result)
      {
        a1[1] = result;
        *(float *)(*a1 + v13) = v9;
        return result;
      }
      __n128 result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *__n128 result = v9;
      return result;
    }
    __n128 result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *__n128 result = v10;
    if (v9 != 0.0) {
      goto LABEL_7;
    }
  }
  return result;
}

unint64_t GraphicsFilter.ColorMonochrome.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  float v7 = 1.0;
  int v8 = 0;
  if (v5 >= v6)
  {
LABEL_57:
    int v9 = 0;
    int v10 = 0;
    int v11 = 0;
    float v12 = 0.0;
LABEL_58:
    v3[3] = 0;
    *(float *)a2 = v12;
    *(_DWORD *)(a2 + 4) = v11;
    *(_DWORD *)(a2 + 8) = v10;
    *(_DWORD *)(a2 + 12) = v9;
    *(float *)(a2 + 16) = v7;
    *(_DWORD *)(a2 + 20) = v8;
    return result;
  }
  int v9 = 0;
  int v10 = 0;
  int v11 = 0;
  float v12 = 0.0;
  while (1)
  {
    __n128 result = v3[3];
    if (result)
    {
      unint64_t v13 = v3[4];
      if (v5 < v13) {
        goto LABEL_11;
      }
      if (v13 < v5) {
        goto LABEL_59;
      }
      v3[3] = 0;
    }
    __n128 result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if (result <= 7)
    {
LABEL_59:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
LABEL_11:
    unint64_t v14 = result >> 3;
    if (result >> 3 == 3)
    {
      if ((result & 7) == 2)
      {
        __n128 result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_64;
        }
        unint64_t v27 = (int *)v3[1];
        if (v6 < (unint64_t)v27 + result) {
          goto LABEL_59;
        }
        v3[3] = 29;
        v3[4] = (char *)v27 + result;
      }
      else
      {
        if ((result & 7) != 5) {
          goto LABEL_59;
        }
        unint64_t v27 = (int *)v3[1];
      }
      unint64_t v29 = v27 + 1;
      if (v6 < (unint64_t)(v27 + 1)) {
        goto LABEL_59;
      }
      int v8 = *v27;
      goto LABEL_3;
    }
    if (v14 == 2)
    {
      if ((result & 7) == 2)
      {
        __n128 result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_65;
        }
        unint64_t v28 = (float *)v3[1];
        if (v6 < (unint64_t)v28 + result) {
          goto LABEL_59;
        }
        v3[3] = 21;
        v3[4] = (char *)v28 + result;
      }
      else
      {
        if ((result & 7) != 5) {
          goto LABEL_59;
        }
        unint64_t v28 = (float *)v3[1];
      }
      unint64_t v29 = v28 + 1;
      if (v6 < (unint64_t)(v28 + 1)) {
        goto LABEL_59;
      }
      float v7 = *v28;
LABEL_3:
      v3[1] = v29;
      goto LABEL_4;
    }
    if (v14 != 1)
    {
      switch(result & 7)
      {
        case 0uLL:
          __n128 result = ProtobufDecoder.decodeVarint()();
          if (!v2) {
            goto LABEL_4;
          }
          return result;
        case 1uLL:
          unint64_t v30 = v3[1] + 8;
          if (v6 < v30) {
            goto LABEL_59;
          }
          goto LABEL_54;
        case 2uLL:
          __n128 result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_66;
          }
          unint64_t v30 = v3[1] + result;
          if (v6 < v30) {
            goto LABEL_59;
          }
LABEL_54:
          v3[1] = v30;
          break;
        case 5uLL:
          unint64_t v30 = v3[1] + 4;
          if (v6 < v30) {
            goto LABEL_59;
          }
          goto LABEL_54;
        default:
          goto LABEL_59;
      }
      goto LABEL_4;
    }
    if ((result & 7) != 2) {
      goto LABEL_59;
    }
    uint64_t v15 = (void *)v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    }
    unint64_t v17 = v15[2];
    unint64_t v16 = v15[3];
    if (v17 >= v16 >> 1) {
      uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v15);
    }
    _OWORD v15[2] = v17 + 1;
    v15[v17 + 4] = v6;
    v3[5] = v15;
    __n128 result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if ((result & 0x8000000000000000) != 0) {
      break;
    }
    unint64_t v18 = v3[1] + result;
    if (v6 < v18) {
      goto LABEL_59;
    }
    v3[2] = v18;
    float v19 = specialized Color.Resolved.init(from:)(v3);
    unint64_t v23 = (void *)v3[5];
    if (!v23[2]) {
      goto LABEL_63;
    }
    float v12 = v19;
    int v11 = v20;
    int v10 = v21;
    int v9 = v22;
    __n128 result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v24 = v23[2];
      if (!v24) {
        goto LABEL_56;
      }
    }
    else
    {
      __n128 result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
      unint64_t v23 = (void *)result;
      uint64_t v24 = *(void *)(result + 16);
      if (!v24)
      {
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
    }
    uint64_t v25 = v24 - 1;
    uint64_t v26 = v23[v25 + 4];
    _DWORD v23[2] = v25;
    v3[5] = v23;
    v3[2] = v26;
LABEL_4:
    unint64_t v5 = v3[1];
    unint64_t v6 = v3[2];
    if (v5 >= v6) {
      goto LABEL_58;
    }
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
  __break(1u);
  __n128 result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
  uint64_t v33 = *(void *)(result + 16);
  if (!v33)
  {
    __break(1u);
    JUMPOUT(0x245D7A36CLL);
  }
  uint64_t v31 = v33 - 1;
  uint64_t v32 = *(void *)(result + 8 * v31 + 32);
  *(void *)(result + 16) = v31;
  v3[5] = result;
  v3[2] = v32;
  return result;
}

float *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance GraphicsFilter.ColorMonochrome(void *a1)
{
  uint64_t v3 = v1;
  float v5 = *v3;
  float v6 = v3[1];
  float v7 = v3[2];
  float v8 = v3[3];
  float v10 = v3[4];
  float v9 = v3[5];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  __n128 result = (float *)specialized ProtobufEncoder.encodeMessage<A>(_:)(v5, v6, v7, v8);
  if (!v2)
  {
    if (v10 == 1.0)
    {
      if (v9 == 0.0) {
        return result;
      }
      goto LABEL_9;
    }
    ProtobufEncoder.encodeVarint(_:)(0x15uLL);
    uint64_t v12 = a1[1];
    int64_t v13 = v12 + 4;
    if (__OFADD__(v12, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v13)
    {
      a1[1] = v13;
      __n128 result = (float *)(*a1 + v12);
      goto LABEL_8;
    }
    __n128 result = (float *)ProtobufEncoder.growBufferSlow(to:)(v13);
LABEL_8:
    *__n128 result = v10;
    if (v9 == 0.0) {
      return result;
    }
LABEL_9:
    ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
    uint64_t v14 = a1[1];
    __n128 result = (float *)(v14 + 4);
    if (__OFADD__(v14, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= (uint64_t)result)
    {
      a1[1] = result;
      *(float *)(*a1 + v14) = v9;
      return result;
    }
    __n128 result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *__n128 result = v9;
  }
  return result;
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance GraphicsFilter.ColorMonochrome@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return GraphicsFilter.ColorMonochrome.init(from:)(a1, a2);
}

float *GraphicsFilter.LuminanceCurve.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  float v5 = *v2;
  int v4 = *((_DWORD *)v2 + 1);
  int v7 = *((_DWORD *)v2 + 2);
  int v6 = *((_DWORD *)v2 + 3);
  float v8 = v2[4];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  uint64_t v9 = a1[1];
  float v10 = (void *)a1[3];
  int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    float v10 = (void *)isUniquelyReferenced_nonNull_native;
  }
  unint64_t v13 = v10[2];
  unint64_t v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
    float v10 = (void *)isUniquelyReferenced_nonNull_native;
  }
  id v10[2] = v13 + 1;
  v10[v13 + 4] = v9;
  a1[3] = v10;
  uint64_t v14 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  a1[1] = v14;
  int64_t isUniquelyReferenced_nonNull_native = v9 + 5;
  if (__OFADD__(v14, 4))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (a1[2] >= isUniquelyReferenced_nonNull_native)
  {
    a1[1] = isUniquelyReferenced_nonNull_native;
    uint64_t v15 = (float *)(*a1 + v14);
    goto LABEL_9;
  }
LABEL_25:
  uint64_t v15 = (float *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
LABEL_9:
  *uint64_t v15 = v5;
  uint64_t v16 = a1[1];
  int64_t v17 = v16 + 4;
  if (__OFADD__(v16, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v17)
  {
    a1[1] = v17;
    unint64_t v18 = (_DWORD *)(*a1 + v16);
    goto LABEL_12;
  }
  unint64_t v18 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v17);
LABEL_12:
  _DWORD *v18 = v4;
  uint64_t v19 = a1[1];
  int64_t v20 = v19 + 4;
  if (__OFADD__(v19, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v20)
  {
    a1[1] = v20;
    int v21 = (_DWORD *)(*a1 + v19);
    goto LABEL_15;
  }
  int v21 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v20);
LABEL_15:
  *int v21 = v7;
  uint64_t v22 = a1[1];
  int64_t v23 = v22 + 4;
  if (__OFADD__(v22, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v23)
  {
    a1[1] = v23;
    uint64_t v24 = (_DWORD *)(*a1 + v22);
    goto LABEL_18;
  }
  uint64_t v24 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v23);
LABEL_18:
  *uint64_t v24 = v6;
  __n128 result = (float *)ProtobufEncoder.endLengthDelimited()();
  if (v8 == 0.0) {
    return result;
  }
  ProtobufEncoder.encodeVarint(_:)(0x15uLL);
  uint64_t v26 = a1[1];
  __n128 result = (float *)(v26 + 4);
  if (__OFADD__(v26, 4))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (a1[2] < (uint64_t)result)
  {
LABEL_33:
    __n128 result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *__n128 result = v8;
    return result;
  }
  a1[1] = result;
  *(float *)(*a1 + v26) = v8;
  return result;
}

unint64_t GraphicsFilter.LuminanceCurve.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)result;
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    uint64_t v7 = 0;
    int v8 = 0;
    while (1)
    {
      __n128 result = v3[3];
      if (!result) {
        goto LABEL_12;
      }
      unint64_t v10 = v3[4];
      if (v5 >= v10) {
        break;
      }
LABEL_14:
      if (result >> 3 == 2)
      {
        if ((result & 7) == 2)
        {
          __n128 result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_47;
          }
          unint64_t v12 = (int *)v3[1];
          if (v6 < (unint64_t)v12 + result) {
            goto LABEL_43;
          }
          v3[3] = 21;
          v3[4] = (char *)v12 + result;
        }
        else
        {
          if ((result & 7) != 5) {
            goto LABEL_43;
          }
          unint64_t v12 = (int *)v3[1];
        }
        unint64_t v5 = (unint64_t)(v12 + 1);
        if (v6 < (unint64_t)(v12 + 1)) {
          goto LABEL_43;
        }
        int v8 = *v12;
LABEL_6:
        v3[1] = v5;
      }
      else
      {
        if (result >> 3 != 1)
        {
          switch(result & 7)
          {
            case 0uLL:
              __n128 result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              unint64_t v5 = v3[1];
              goto LABEL_7;
            case 1uLL:
              unint64_t v5 = v3[1] + 8;
              if (v6 < v5) {
                goto LABEL_43;
              }
              goto LABEL_6;
            case 2uLL:
              __n128 result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_48;
              }
              unint64_t v5 = v3[1] + result;
              if (v6 < v5) {
                goto LABEL_43;
              }
              goto LABEL_6;
            case 5uLL:
              unint64_t v5 = v3[1] + 4;
              if (v6 >= v5) {
                goto LABEL_6;
              }
              goto LABEL_43;
            default:
              goto LABEL_43;
          }
        }
        if ((result & 7) == 2)
        {
          __n128 result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
            JUMPOUT(0x245D7A934);
          }
          int v11 = (int *)v3[1];
          if (v6 < (unint64_t)v11 + result) {
            goto LABEL_43;
          }
          v3[3] = 13;
          v3[4] = (char *)v11 + result;
        }
        else
        {
          if ((result & 7) != 5) {
            goto LABEL_43;
          }
          int v11 = (int *)v3[1];
        }
        unint64_t v5 = (unint64_t)(v11 + 1);
        if (v6 < (unint64_t)(v11 + 1)) {
          goto LABEL_43;
        }
        int v13 = *v11;
        v3[1] = v5;
        if (v7 < 4) {
          *((_DWORD *)&v14 + v7++) = v13;
        }
      }
LABEL_7:
      unint64_t v6 = v3[2];
      if (v5 >= v6)
      {
        long long v9 = v14;
        goto LABEL_4;
      }
    }
    if (v10 < v5) {
      goto LABEL_43;
    }
    v3[3] = 0;
LABEL_12:
    __n128 result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if (result <= 7)
    {
LABEL_43:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
    goto LABEL_14;
  }
  long long v9 = 0uLL;
  int v8 = 0;
LABEL_4:
  v3[3] = 0;
  *(_OWORD *)a2 = v9;
  *(_DWORD *)(a2 + 16) = v8;
  return result;
}

float *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance GraphicsFilter.LuminanceCurve(void *a1)
{
  return GraphicsFilter.LuminanceCurve.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance GraphicsFilter.LuminanceCurve@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return GraphicsFilter.LuminanceCurve.init(from:)(a1, a2);
}

uint64_t GraphicsFilter.ColorCurves.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  int v5 = *v2;
  int v4 = v2[1];
  int v7 = v2[2];
  int v6 = v2[3];
  int v9 = v2[4];
  int v8 = v2[5];
  int v11 = v2[6];
  int v10 = v2[7];
  int v83 = v2[9];
  int v84 = v2[8];
  int v81 = v2[11];
  int v82 = v2[10];
  int v79 = v2[13];
  int v80 = v2[12];
  int v77 = v2[15];
  int v78 = v2[14];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  uint64_t v12 = a1[1];
  int v13 = (void *)a1[3];
  int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    int v13 = (void *)isUniquelyReferenced_nonNull_native;
  }
  unint64_t v16 = v13[2];
  unint64_t v15 = v13[3];
  if (v16 >= v15 >> 1)
  {
    int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v13);
    int v13 = (void *)isUniquelyReferenced_nonNull_native;
  }
  _OWORD v13[2] = v16 + 1;
  v13[v16 + 4] = v12;
  a1[3] = v13;
  uint64_t v17 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_71;
  }
  a1[1] = v17;
  int64_t isUniquelyReferenced_nonNull_native = v12 + 5;
  if (__OFADD__(v17, 4))
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (a1[2] >= isUniquelyReferenced_nonNull_native)
  {
    a1[1] = isUniquelyReferenced_nonNull_native;
    unint64_t v18 = (_DWORD *)(*a1 + v17);
    goto LABEL_9;
  }
LABEL_72:
  unint64_t v18 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
LABEL_9:
  _DWORD *v18 = v5;
  uint64_t v19 = a1[1];
  int64_t v20 = v19 + 4;
  if (__OFADD__(v19, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v20)
  {
    a1[1] = v20;
    int v21 = (_DWORD *)(*a1 + v19);
    goto LABEL_12;
  }
  int v21 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v20);
LABEL_12:
  *int v21 = v4;
  uint64_t v22 = a1[1];
  int64_t v23 = v22 + 4;
  if (__OFADD__(v22, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v23)
  {
    a1[1] = v23;
    uint64_t v24 = (_DWORD *)(*a1 + v22);
    goto LABEL_15;
  }
  uint64_t v24 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v23);
LABEL_15:
  *uint64_t v24 = v7;
  uint64_t v25 = a1[1];
  int64_t v26 = v25 + 4;
  if (__OFADD__(v25, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v26)
  {
    a1[1] = v26;
    unint64_t v27 = (_DWORD *)(*a1 + v25);
    goto LABEL_18;
  }
  unint64_t v27 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v26);
LABEL_18:
  _DWORD *v27 = v6;
  ProtobufEncoder.endLengthDelimited()();
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  uint64_t v28 = a1[1];
  unint64_t v29 = (void *)a1[3];
  int64_t v30 = swift_isUniquelyReferenced_nonNull_native();
  if ((v30 & 1) == 0)
  {
    int64_t v30 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
    unint64_t v29 = (void *)v30;
  }
  unint64_t v32 = v29[2];
  unint64_t v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    int64_t v30 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v29);
    unint64_t v29 = (void *)v30;
  }
  long long v29[2] = v32 + 1;
  v29[v32 + 4] = v28;
  a1[3] = v29;
  uint64_t v33 = v28 + 1;
  if (__OFADD__(v28, 1))
  {
    __break(1u);
    goto LABEL_80;
  }
  a1[1] = v33;
  int64_t v30 = v28 + 5;
  if (__OFADD__(v33, 4))
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  if (a1[2] >= v30)
  {
    a1[1] = v30;
    uint64_t v34 = (_DWORD *)(*a1 + v33);
    goto LABEL_26;
  }
LABEL_81:
  uint64_t v34 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v30);
LABEL_26:
  *uint64_t v34 = v9;
  uint64_t v35 = a1[1];
  int64_t v36 = v35 + 4;
  if (__OFADD__(v35, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v36)
  {
    a1[1] = v36;
    unint64_t v37 = (_DWORD *)(*a1 + v35);
    goto LABEL_29;
  }
  unint64_t v37 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v36);
LABEL_29:
  *unint64_t v37 = v8;
  uint64_t v38 = a1[1];
  int64_t v39 = v38 + 4;
  if (__OFADD__(v38, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v39)
  {
    a1[1] = v39;
    unint64_t v40 = (_DWORD *)(*a1 + v38);
    goto LABEL_32;
  }
  unint64_t v40 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v39);
LABEL_32:
  *unint64_t v40 = v11;
  uint64_t v41 = a1[1];
  int64_t v42 = v41 + 4;
  if (__OFADD__(v41, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v42)
  {
    a1[1] = v42;
    uint64_t v43 = (_DWORD *)(*a1 + v41);
    goto LABEL_35;
  }
  uint64_t v43 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v42);
LABEL_35:
  *uint64_t v43 = v10;
  ProtobufEncoder.endLengthDelimited()();
  ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
  uint64_t v44 = a1[1];
  uint64_t v45 = (void *)a1[3];
  int64_t v46 = swift_isUniquelyReferenced_nonNull_native();
  if ((v46 & 1) == 0)
  {
    int64_t v46 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45);
    uint64_t v45 = (void *)v46;
  }
  unint64_t v48 = v45[2];
  unint64_t v47 = v45[3];
  if (v48 >= v47 >> 1)
  {
    int64_t v46 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v47 > 1), v48 + 1, 1, v45);
    uint64_t v45 = (void *)v46;
  }
  _OWORD v45[2] = v48 + 1;
  v45[v48 + 4] = v44;
  a1[3] = v45;
  uint64_t v49 = v44 + 1;
  if (__OFADD__(v44, 1))
  {
    __break(1u);
    goto LABEL_89;
  }
  a1[1] = v49;
  int64_t v46 = v44 + 5;
  if (__OFADD__(v49, 4))
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  if (a1[2] >= v46)
  {
    a1[1] = v46;
    unint64_t v50 = (_DWORD *)(*a1 + v49);
    goto LABEL_43;
  }
LABEL_90:
  unint64_t v50 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v46);
LABEL_43:
  *unint64_t v50 = v84;
  uint64_t v51 = a1[1];
  int64_t v52 = v51 + 4;
  if (__OFADD__(v51, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v52)
  {
    a1[1] = v52;
    uint64_t v53 = (_DWORD *)(*a1 + v51);
    goto LABEL_46;
  }
  uint64_t v53 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v52);
LABEL_46:
  *uint64_t v53 = v83;
  uint64_t v54 = a1[1];
  int64_t v55 = v54 + 4;
  if (__OFADD__(v54, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v55)
  {
    a1[1] = v55;
    unint64_t v56 = (_DWORD *)(*a1 + v54);
    goto LABEL_49;
  }
  unint64_t v56 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v55);
LABEL_49:
  *unint64_t v56 = v82;
  uint64_t v57 = a1[1];
  int64_t v58 = v57 + 4;
  if (__OFADD__(v57, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v58)
  {
    a1[1] = v58;
    unint64_t v59 = (_DWORD *)(*a1 + v57);
    goto LABEL_52;
  }
  unint64_t v59 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v58);
LABEL_52:
  *unint64_t v59 = v81;
  ProtobufEncoder.endLengthDelimited()();
  ProtobufEncoder.encodeVarint(_:)(0x22uLL);
  uint64_t v60 = a1[1];
  uint64_t v61 = (void *)a1[3];
  int64_t v62 = swift_isUniquelyReferenced_nonNull_native();
  if ((v62 & 1) == 0)
  {
    int64_t v62 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61[2] + 1, 1, v61);
    uint64_t v61 = (void *)v62;
  }
  unint64_t v64 = v61[2];
  unint64_t v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    int64_t v62 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v63 > 1), v64 + 1, 1, v61);
    uint64_t v61 = (void *)v62;
  }
  v61[2] = v64 + 1;
  v61[v64 + 4] = v60;
  a1[3] = v61;
  uint64_t v65 = v60 + 1;
  if (__OFADD__(v60, 1))
  {
    __break(1u);
    goto LABEL_98;
  }
  a1[1] = v65;
  int64_t v62 = v60 + 5;
  if (__OFADD__(v65, 4))
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  if (a1[2] >= v62)
  {
    a1[1] = v62;
    unint64_t v66 = (_DWORD *)(*a1 + v65);
    goto LABEL_60;
  }
LABEL_99:
  unint64_t v66 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v62);
LABEL_60:
  *unint64_t v66 = v80;
  uint64_t v67 = a1[1];
  int64_t v68 = v67 + 4;
  if (__OFADD__(v67, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v68)
  {
    a1[1] = v68;
    float v69 = (_DWORD *)(*a1 + v67);
    goto LABEL_63;
  }
  float v69 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v68);
LABEL_63:
  *float v69 = v79;
  uint64_t v70 = a1[1];
  int64_t v71 = v70 + 4;
  if (__OFADD__(v70, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v71)
  {
    a1[1] = v71;
    unsigned int v72 = (_DWORD *)(*a1 + v70);
    goto LABEL_66;
  }
  unsigned int v72 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v71);
LABEL_66:
  *unsigned int v72 = v78;
  uint64_t v73 = a1[1];
  int64_t v74 = v73 + 4;
  if (__OFADD__(v73, 4))
  {
    __break(1u);
    goto LABEL_105;
  }
  if (a1[2] < v74)
  {
LABEL_105:
    unsigned int v75 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v74);
    goto LABEL_69;
  }
  a1[1] = v74;
  unsigned int v75 = (_DWORD *)(*a1 + v73);
LABEL_69:
  *unsigned int v75 = v77;
  return ProtobufEncoder.endLengthDelimited()();
}

unint64_t GraphicsFilter.ColorCurves.init(from:)@<X0>(unint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = (void *)result;
  long long v30 = 0uLL;
  uint64_t v31 = 0;
  long long v28 = 0uLL;
  uint64_t v29 = 0;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  long long v24 = 0uLL;
  uint64_t v25 = 0;
  long long v5 = 0uLL;
  unint64_t v6 = *(void *)(result + 8);
  unint64_t v7 = *(void *)(result + 16);
  if (v6 < v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    while (1)
    {
      __n128 result = v3[3];
      if (!result) {
        goto LABEL_12;
      }
      unint64_t v15 = v3[4];
      if (v6 >= v15) {
        break;
      }
LABEL_14:
      switch(result >> 3)
      {
        case 1uLL:
          if ((result & 7) == 2)
          {
            __n128 result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_67:
              __break(1u);
LABEL_68:
              __break(1u);
LABEL_69:
              __break(1u);
LABEL_70:
              __break(1u);
              JUMPOUT(0x245D7B398);
            }
            unint64_t v16 = (int *)v3[1];
            if (v7 < (unint64_t)v16 + result) {
              goto LABEL_63;
            }
            v3[3] = 13;
            v3[4] = (char *)v16 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_63;
            }
            unint64_t v16 = (int *)v3[1];
          }
          unint64_t v6 = (unint64_t)(v16 + 1);
          if (v7 < (unint64_t)(v16 + 1)) {
            goto LABEL_63;
          }
          int v20 = *v16;
          v3[1] = v6;
          if (v8 < 4)
          {
            *((_DWORD *)&v30 + v8++) = v20;
            uint64_t v31 = v8;
          }
          break;
        case 2uLL:
          if ((result & 7) == 2)
          {
            __n128 result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_67;
            }
            uint64_t v17 = (int *)v3[1];
            if (v7 < (unint64_t)v17 + result) {
              goto LABEL_63;
            }
            v3[3] = 21;
            v3[4] = (char *)v17 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_63;
            }
            uint64_t v17 = (int *)v3[1];
          }
          unint64_t v6 = (unint64_t)(v17 + 1);
          if (v7 < (unint64_t)(v17 + 1)) {
            goto LABEL_63;
          }
          int v21 = *v17;
          v3[1] = v6;
          if (v9 < 4)
          {
            *((_DWORD *)&v28 + v9++) = v21;
            uint64_t v29 = v9;
          }
          break;
        case 3uLL:
          if ((result & 7) == 2)
          {
            __n128 result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_68;
            }
            unint64_t v18 = (int *)v3[1];
            if (v7 < (unint64_t)v18 + result) {
              goto LABEL_63;
            }
            v3[3] = 29;
            v3[4] = (char *)v18 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_63;
            }
            unint64_t v18 = (int *)v3[1];
          }
          unint64_t v6 = (unint64_t)(v18 + 1);
          if (v7 < (unint64_t)(v18 + 1)) {
            goto LABEL_63;
          }
          int v22 = *v18;
          v3[1] = v6;
          if (v10 < 4)
          {
            *((_DWORD *)&v26 + v10++) = v22;
            uint64_t v27 = v10;
          }
          break;
        case 4uLL:
          if ((result & 7) == 2)
          {
            __n128 result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_69;
            }
            uint64_t v19 = (int *)v3[1];
            if (v7 < (unint64_t)v19 + result) {
              goto LABEL_63;
            }
            v3[3] = 37;
            v3[4] = (char *)v19 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_63;
            }
            uint64_t v19 = (int *)v3[1];
          }
          unint64_t v6 = (unint64_t)(v19 + 1);
          if (v7 < (unint64_t)(v19 + 1)) {
            goto LABEL_63;
          }
          int v23 = *v19;
          v3[1] = v6;
          if (v11 < 4)
          {
            *((_DWORD *)&v24 + v11++) = v23;
            uint64_t v25 = v11;
          }
          break;
        default:
          switch(result & 7)
          {
            case 0uLL:
              __n128 result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              unint64_t v6 = v3[1];
              goto LABEL_7;
            case 1uLL:
              unint64_t v6 = v3[1] + 8;
              if (v7 >= v6) {
                goto LABEL_6;
              }
              goto LABEL_63;
            case 2uLL:
              __n128 result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_70;
              }
              unint64_t v6 = v3[1] + result;
              if (v7 < v6) {
                goto LABEL_63;
              }
LABEL_6:
              v3[1] = v6;
              break;
            case 5uLL:
              unint64_t v6 = v3[1] + 4;
              if (v7 < v6) {
                goto LABEL_63;
              }
              goto LABEL_6;
            default:
              goto LABEL_63;
          }
          break;
      }
LABEL_7:
      unint64_t v7 = v3[2];
      if (v6 >= v7)
      {
        long long v5 = v30;
        long long v12 = v28;
        long long v13 = v26;
        long long v14 = v24;
        goto LABEL_4;
      }
    }
    if (v15 < v6) {
      goto LABEL_63;
    }
    v3[3] = 0;
LABEL_12:
    __n128 result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if (result <= 7)
    {
LABEL_63:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
    goto LABEL_14;
  }
  long long v12 = 0uLL;
  long long v13 = 0uLL;
  long long v14 = 0uLL;
LABEL_4:
  v3[3] = 0;
  *a2 = v5;
  a2[1] = v12;
  a2[2] = v13;
  a2[3] = v14;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance GraphicsFilter.ColorCurves(void *a1)
{
  return GraphicsFilter.ColorCurves.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance GraphicsFilter.ColorCurves@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return GraphicsFilter.ColorCurves.init(from:)(a1, a2);
}

void GraphicsFilter.ShaderFilter.encode(to:)(uint64_t a1)
{
  uint64_t v3 = v1;
  double v5 = *(double *)(v3 + 32);
  double v6 = *(double *)(v3 + 40);
  id v7 = *(id *)v3;
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);

  if (!v2 && (v5 != 0.0 || v6 != 0.0))
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = *(void **)(a1 + 24);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_11;
    }
    while (1)
    {
      unint64_t v11 = v9[2];
      unint64_t v10 = v9[3];
      unint64_t v12 = v11 + 1;
      if (v11 >= v10 >> 1)
      {
        long long v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v9);
        unint64_t v12 = v11 + 1;
        uint64_t v9 = v13;
      }
      uint64_t v9[2] = v12;
      v9[v11 + 4] = v8;
      *(void *)(a1 + 24) = v9;
      if (!__OFADD__(v8, 1)) {
        break;
      }
      __break(1u);
LABEL_11:
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    }
    *(void *)(a1 + 8) = v8 + 1;
    CGSize.encode(to:)((double *)a1, v5, v6);
    ProtobufEncoder.endLengthDelimited()();
  }
}

void GraphicsFilter.ShaderFilter.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = a1[1];
  double v5 = (void *)a1[2];
  if (v4 < (unint64_t)v5)
  {
    double v6 = 0.0;
    double v7 = 0.0;
    int v42 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 1;
    double v10 = 0.0;
    while (1)
    {
      unint64_t v12 = a1[3];
      if (!v12) {
        goto LABEL_12;
      }
      unint64_t v13 = a1[4];
      if (v4 >= v13) {
        break;
      }
LABEL_14:
      if (v12 >> 3 == 2)
      {
        if ((v12 & 7) != 2) {
          goto LABEL_53;
        }
        int v23 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
        }
        unint64_t v25 = v23[2];
        unint64_t v24 = v23[3];
        if (v25 >= v24 >> 1) {
          int v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v23);
        }
        _DWORD v23[2] = v25 + 1;
        v23[v25 + 4] = v5;
        a1[5] = v23;
        uint64_t v26 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_54;
        }
        if (v26 < 0) {
          goto LABEL_62;
        }
        unint64_t v27 = a1[1] + v26;
        if ((unint64_t)v5 < v27) {
          goto LABEL_53;
        }
        a1[2] = v27;
        double v28 = specialized CGPoint.init(from:)(a1);
        long long v30 = (void *)a1[5];
        if (!v30[2]) {
          goto LABEL_64;
        }
        double v10 = v28;
        uint64_t v8 = v29;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v31 = v30[2];
          if (!v31) {
            goto LABEL_52;
          }
        }
        else
        {
          long long v30 = specialized _ArrayBuffer._consumeAndCreateNew()(v30);
          uint64_t v31 = v30[2];
          if (!v31)
          {
LABEL_52:
            __break(1u);
LABEL_53:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_54:
            outlined consume of Shader.ResolvedShader?((id)v9);
            return;
          }
        }
        uint64_t v32 = v31 - 1;
        uint64_t v33 = v30[v32 + 4];
        v30[2] = v32;
        a1[5] = v30;
        a1[2] = v33;
      }
      else if (v12 >> 3 == 1)
      {
        if ((v12 & 7) != 2) {
          goto LABEL_53;
        }
        long long v14 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
        }
        unint64_t v16 = v14[2];
        unint64_t v15 = v14[3];
        if (v16 >= v15 >> 1) {
          long long v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
        }
        v14[2] = v16 + 1;
        v14[v16 + 4] = v5;
        a1[5] = v14;
        uint64_t v17 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_54;
        }
        if (v17 < 0)
        {
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
          __break(1u);
          uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
          uint64_t v36 = v35[2];
          if (!v36)
          {
            __break(1u);
            uint64_t v35 = (void *)a1[5];
            if (v35[2])
            {
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v36 = v35[2];
                if (v36) {
                  goto LABEL_60;
                }
LABEL_70:
                __break(1u);
                JUMPOUT(0x245D7BA40);
              }
            }
            else
            {
              __break(1u);
            }
            uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
            uint64_t v36 = v35[2];
            if (!v36) {
              goto LABEL_70;
            }
          }
LABEL_60:
          uint64_t v37 = v36 - 1;
          uint64_t v38 = v35[v37 + 4];
          v35[2] = v37;
          outlined consume of Shader.ResolvedShader?((id)v9);
          a1[5] = v35;
          a1[2] = v38;
          return;
        }
        unint64_t v18 = a1[1] + v17;
        if ((unint64_t)v5 < v18) {
          goto LABEL_53;
        }
        a1[2] = v18;
        Shader.ResolvedShader.init(from:)(a1, v40);
        uint64_t v19 = (void *)a1[5];
        if (!v19[2]) {
          goto LABEL_63;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v20 = v19[2];
          if (!v20) {
            goto LABEL_65;
          }
        }
        else
        {
          uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
          uint64_t v20 = v19[2];
          if (!v20) {
            goto LABEL_65;
          }
        }
        uint64_t v21 = v20 - 1;
        uint64_t v22 = v19[v21 + 4];
        void v19[2] = v21;
        outlined consume of Shader.ResolvedShader?((id)v9);
        a1[5] = v19;
        a1[2] = v22;
        uint64_t v9 = *(void *)&v40[0];
        double v6 = v40[1];
        double v7 = v40[2];
        int v42 = v41;
      }
      else
      {
        switch(v12 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_54;
            }
            break;
          case 1uLL:
            unint64_t v11 = a1[1] + 8;
            if ((unint64_t)v5 >= v11) {
              goto LABEL_6;
            }
            goto LABEL_53;
          case 2uLL:
            uint64_t v34 = ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_54;
            }
            if (v34 < 0) {
              goto LABEL_66;
            }
            unint64_t v11 = a1[1] + v34;
            if ((unint64_t)v5 < v11) {
              goto LABEL_53;
            }
LABEL_6:
            a1[1] = v11;
            break;
          case 5uLL:
            unint64_t v11 = a1[1] + 4;
            if ((unint64_t)v5 < v11) {
              goto LABEL_53;
            }
            goto LABEL_6;
          default:
            goto LABEL_53;
        }
      }
      unint64_t v4 = a1[1];
      double v5 = (void *)a1[2];
      if (v4 >= (unint64_t)v5)
      {
        a1[3] = 0;
        if (v9 == 1) {
          goto LABEL_4;
        }
        *(void *)a2 = v9;
        *(double *)(a2 + 8) = v6;
        *(double *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 24) = v42;
        *(double *)(a2 + 32) = v10;
        *(void *)(a2 + 40) = v8;
        return;
      }
    }
    if (v13 < v4) {
      goto LABEL_53;
    }
    a1[3] = 0;
LABEL_12:
    unint64_t v12 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_54;
    }
    if (v12 < 8) {
      goto LABEL_53;
    }
    goto LABEL_14;
  }
  a1[3] = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance GraphicsFilter.ShaderFilter(uint64_t a1)
{
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance GraphicsFilter.ShaderFilter(void *a1@<X0>, uint64_t a2@<X8>)
{
}

BOOL specialized static GraphicsFilter.ColorMonochrome.== infix(_:_:)(float32x4_t *a1, float32x4_t *a2)
{
  BOOL result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*a1, *a2)), 0xFuLL))) & 1) != 0
    && a1[1].f32[0] == a2[1].f32[0])
  {
    return a1[1].f32[1] == a2[1].f32[1];
  }
  return result;
}

uint64_t specialized static GraphicsFilter.ColorCurves.== infix(_:_:)(float32x4_t *a1, float32x4_t *a2)
{
  char v2 = 0;
  if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_f32(*a1, *a2), (int16x8_t)vceqq_f32(a1[1], a2[1]))), 7uLL))) & 1) != 0&& (~vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vceqq_f32(a1[2], a2[2]), 0x1FuLL)), (int8x16_t)xmmword_2461DDF20)) & 0xF) == 0)
  {
    char v2 = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(a1[3], a2[3])), 0xFuLL)));
  }
  return v2 & 1;
}

uint64_t specialized static GraphicsFilter.== infix(_:_:)(uint64_t a1, int8x16_t *a2)
{
  unint64_t v2 = *(void *)(a1 + 64);
  unint64_t v3 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104);
  int v8 = *(_DWORD *)(a1 + 112);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 116);
  int8x16_t v10 = *(int8x16_t *)(a1 + 32);
  int8x16_t v11 = *(int8x16_t *)(a1 + 48);
  int64x2_t v12 = *(int64x2_t *)a1;
  int8x16_t v13 = *(int8x16_t *)(a1 + 16);
  int8x16_t v14 = a2[2];
  int8x16_t v15 = a2[3];
  int8x16_t v16 = *a2;
  int8x16_t v17 = a2[1];
  unint64_t v18 = a2[4].u64[0];
  uint64_t v19 = a2[4].i64[1];
  uint64_t v20 = a2[5].i64[0];
  uint64_t v21 = a2[5].i64[1];
  uint64_t v22 = a2[6].i64[0];
  uint64_t v23 = a2[6].i64[1];
  __int32 v24 = a2[7].i32[0];
  int v25 = a2[7].u8[4];
  v238[0] = *(_OWORD *)a1;
  v238[1] = v13;
  v238[2] = v10;
  v238[3] = v11;
  unint64_t v239 = v2;
  unint64_t v240 = v3;
  uint64_t v241 = v5;
  uint64_t v242 = v4;
  uint64_t v243 = v7;
  uint64_t v244 = v6;
  int v245 = v8;
  char v246 = v9;
  int8x16_t v247 = v16;
  int8x16_t v248 = v17;
  int8x16_t v249 = v14;
  int8x16_t v250 = v15;
  unint64_t v251 = v18;
  uint64_t v252 = v19;
  uint64_t v253 = v20;
  uint64_t v254 = v21;
  uint64_t v255 = v22;
  uint64_t v256 = v23;
  __int32 v257 = v24;
  char v258 = v25;
  switch(v9)
  {
    case 1:
      if (v25 != 1)
      {
        __int16 v93 = v8;
        uint64_t v92 = v6;
        uint64_t v91 = v4;
        uint64_t v83 = v19;
        unint64_t v84 = v18;
        uint64_t v85 = v20;
        *(int8x16_t *)char v185 = v14;
        *(int8x16_t *)CGFloat v194 = v17;
        *(int8x16_t *)uint64_t v214 = v16;
        *(int8x16_t *)uint64_t v176 = v15;
        outlined copy of VariableBlurStyle.Mask((id)v13.i64[0], v13.i8[8], v10.i64[0], v10.i64[1], v11.i64[0], v11.i64[1], v2, v3, v5, v91, v7, v92, v93, HIBYTE(v93));
        goto LABEL_55;
      }
      double v141 = (void *)v12.i64[0];
      v226.i64[0] = v12.i64[0];
      int v110 = v12.i32[2];
      v226.i16[4] = v12.i16[4] & 0x101;
      uint64_t v165 = (void *)v13.i64[0];
      uint64_t v157 = v10.i64[0];
      char v161 = v13.i8[8];
      int8x16_t v227 = v13;
      int8x16_t v228 = v10;
      uint64_t v153 = v10.i64[1];
      int8x16_t v146 = v11;
      int8x16_t v229 = v11;
      unint64_t v230 = v2;
      unint64_t v231 = v3;
      uint64_t v232 = v5;
      uint64_t v233 = v4;
      uint64_t v234 = v7;
      uint64_t v235 = v6;
      int v236 = v8;
      v215.i64[0] = v16.i64[0];
      v215.i16[4] = v16.i16[4] & 0x101;
      int v126 = v16.i32[2];
      unint64_t v130 = (void *)v16.i64[0];
      char v118 = v17.i8[8];
      uint64_t v122 = (void *)v17.i64[0];
      uint64_t v114 = v14.i64[0];
      int8x16_t v216 = v17;
      int8x16_t v217 = v14;
      int8x16_t v31 = v15;
      uint64_t v137 = v14.i64[1];
      int8x16_t v218 = v15;
      unint64_t v219 = v18;
      unint64_t v220 = v19;
      uint64_t v221 = v20;
      uint64_t v222 = v21;
      uint64_t v223 = v22;
      uint64_t v224 = v23;
      __int32 v225 = v24;
      uint64_t v206 = v2;
      uint64_t v30 = v3;
      uint64_t v196 = v3;
      uint64_t v186 = v18;
      uint64_t v171 = v20;
      outlined copy of GraphicsFilter((id)v16.i64[0], v16.i32[2], (id)v17.i64[0], v17.i8[8], v14.i64[0], v14.i64[1], v15.i64[0], v15.i64[1], v18, v19, v20, v21, v22, v23, v24, SBYTE2(v24));
      outlined copy of GraphicsFilter(v141, v110, v165, v161, v157, v153, v146.i64[0], v146.i64[1], v206, v30, v5, v4, v7, v6, v8, SBYTE2(v8));
      outlined copy of GraphicsFilter(v130, v126, v122, v118, v114, v137, v31.i64[0], v31.i64[1], v186, v19, v171, v21, v22, v23, v24, SBYTE2(v24));
      outlined copy of GraphicsFilter(v141, v110, v165, v161, v157, v153, v146.i64[0], v146.i64[1], v206, v196, v5, v4, v7, v6, v8, SBYTE2(v8));
      LOBYTE(v30) = specialized static VariableBlurStyle.== infix(_:_:)((uint64_t)&v226, (uint64_t)&v215);
      outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v238);
      outlined consume of GraphicsFilter(v130, v126, v122, v118, v114, v137, v31.i64[0], v31.i64[1], v186, v19, v171, v21, v22, v23, v24, SBYTE2(v24));
      outlined consume of GraphicsFilter(v141, v110, v165, v161, v157, v153, v146.i64[0], v146.i64[1], v206, v196, v5, v4, v7, v6, v8, SBYTE2(v8));
      return v30 & 1;
    case 2:
      if (v25 != 2) {
        goto LABEL_56;
      }
      __int32 v32 = v10.i32[2];
      __int32 v33 = v12.i32[2];
      unint64_t v34 = HIDWORD(v10.i64[1]);
      unint64_t v35 = HIDWORD(v12.i64[1]);
      __int32 v36 = v12.i32[0];
      unint64_t v37 = HIDWORD(v12.i64[0]);
      LODWORD(v30) = v16.i32[0];
      unint64_t v38 = HIDWORD(v16.i64[0]);
      __int32 v39 = v16.i32[2];
      unint64_t v197 = HIDWORD(v16.i64[1]);
      __int32 v40 = v14.i32[2];
      unint64_t v207 = HIDWORD(v14.i64[1]);
      uint64_t v182 = v14.i64[0];
      *(int8x16_t *)uint64_t v187 = v17;
      uint64_t v166 = v10.i64[0];
      int8x16_t v177 = v13;
      outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v238);
      v226.i64[0] = __PAIR64__(v37, v36);
      v226.i64[1] = __PAIR64__(v35, v33);
      int8x16_t v227 = v177;
      v228.i64[0] = v166;
      v228.i32[2] = v32;
      v228.i8[12] = v34;
      v215.i64[0] = __PAIR64__(v38, v30);
      v215.i64[1] = __PAIR64__(v197, v39);
      int8x16_t v216 = *(int8x16_t *)v187;
      v217.i64[0] = v182;
      v217.i32[2] = v40;
      v217.i8[12] = v207;
      LOBYTE(v30) = specialized static ResolvedShadowStyle.== infix(_:_:)((uint64_t)&v226, (uint64_t)&v215);
      return v30 & 1;
    case 3:
      if (v25 != 3) {
        goto LABEL_56;
      }
      double v41 = *(double *)&v2;
      double v42 = *(double *)&v18;
      *(int8x16_t *)uint64_t v183 = v14;
      *(int8x16_t *)uint64_t v188 = v17;
      float64x2_t v198 = (float64x2_t)v12;
      *(int8x16_t *)unint64_t v208 = v16;
      float64x2_t v167 = (float64x2_t)v10;
      *(int8x16_t *)int v172 = v15;
      float64x2_t v178 = (float64x2_t)v13;
      *(int8x16_t *)uint64_t v142 = v11;
      outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v238);
      BOOL v43 = v41 == v42;
      unsigned __int8 v44 = vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v198, *(float64x2_t *)v208), (int32x4_t)vceqq_f64(v178, *(float64x2_t *)v188)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v167, *(float64x2_t *)v183), (int32x4_t)vceqq_f64(*(float64x2_t *)v142, *(float64x2_t *)v172)))), 7uLL)));
      goto LABEL_40;
    case 4:
      char v237 = v5 & 1;
      if (v25 != 4) {
        goto LABEL_56;
      }
      char v173 = v20;
      unint64_t v162 = HIDWORD(v3);
      unint64_t v147 = HIDWORD(v2);
      __int32 v105 = v11.i32[2];
      unint64_t v119 = HIDWORD(v11.i64[1]);
      __int32 v45 = v11.i32[0];
      __int32 v46 = v10.i32[2];
      unint64_t v97 = HIDWORD(v10.i64[1]);
      unint64_t v98 = HIDWORD(v11.i64[0]);
      __int32 v47 = v10.i32[0];
      __int32 v48 = v13.i32[2];
      unint64_t v95 = HIDWORD(v13.i64[1]);
      unint64_t v96 = HIDWORD(v10.i64[0]);
      __int32 v49 = v13.i32[0];
      unint64_t v94 = HIDWORD(v13.i64[0]);
      __int32 v50 = v12.i32[2];
      unint64_t v51 = HIDWORD(v12.i64[1]);
      __int32 v52 = v12.i32[0];
      unint64_t v53 = HIDWORD(v12.i64[0]);
      __int32 v99 = v16.i32[0];
      __int32 v100 = v16.i32[2];
      unint64_t v101 = HIDWORD(v16.i64[0]);
      __int32 v103 = v17.i32[0];
      unint64_t v115 = HIDWORD(v17.i64[0]);
      *(void *)unint64_t v107 = HIDWORD(v16.i64[1]);
      __int32 v111 = v17.i32[2];
      __int32 v123 = v14.i32[0];
      unint64_t v127 = HIDWORD(v17.i64[1]);
      __int32 v131 = v14.i32[2];
      unint64_t v134 = HIDWORD(v14.i64[0]);
      __int32 v138 = v15.i32[0];
      unint64_t v143 = HIDWORD(v14.i64[1]);
      __int32 v150 = v15.i32[2];
      unint64_t v154 = HIDWORD(v15.i64[0]);
      unint64_t v158 = HIDWORD(v15.i64[1]);
      unint64_t v168 = HIDWORD(v18);
      unsigned int v189 = v18;
      unsigned int v54 = v2;
      unsigned int v199 = v3;
      outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v238);
      v215.i64[0] = __PAIR64__(v53, v52);
      v215.i64[1] = __PAIR64__(v51, v50);
      v216.i64[0] = __PAIR64__(v94, v49);
      v216.i64[1] = __PAIR64__(v95, v48);
      v217.i64[0] = __PAIR64__(v96, v47);
      v217.i64[1] = __PAIR64__(v97, v46);
      v218.i64[0] = __PAIR64__(v98, v45);
      v218.i64[1] = __PAIR64__(v119, v105);
      unint64_t v219 = __PAIR64__(v147, v54);
      unint64_t v220 = __PAIR64__(v162, v199);
      v226.i64[0] = __PAIR64__(v101, v99);
      v226.i64[1] = __PAIR64__(v107[0], v100);
      v227.i64[0] = __PAIR64__(v115, v103);
      v227.i64[1] = __PAIR64__(v127, v111);
      v228.i64[0] = __PAIR64__(v134, v123);
      v228.i64[1] = __PAIR64__(v143, v131);
      v229.i64[0] = __PAIR64__(v154, v138);
      v229.i64[1] = __PAIR64__(v158, v150);
      unint64_t v230 = __PAIR64__(v168, v189);
      unint64_t v231 = v19;
      if ((specialized static _ColorMatrix.== infix(_:_:)(&v215, &v226) & 1) == 0) {
        goto LABEL_57;
      }
      LOBYTE(v30) = ((v173 & 1) == 0) ^ v237;
      return v30 & 1;
    case 5:
      if (v25 != 5) {
        goto LABEL_56;
      }
      float v55 = *(float *)&v12.i32[3];
      float v56 = *(float *)&v12.i32[2];
      float v57 = *(float *)&v12.i32[1];
      float v58 = *(float *)v12.i32;
      int8x16_t v59 = v16;
      outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v238);
      BOOL v60 = v58 == *(float *)v59.i32;
      if (v57 != *(float *)&v59.i32[1]) {
        BOOL v60 = 0;
      }
      if (v56 != *(float *)&v59.i32[2]) {
        BOOL v60 = 0;
      }
      LOBYTE(v30) = v55 == *(float *)&v59.i32[3] && v60;
      return v30 & 1;
    case 6:
      if (v25 == 6) {
        goto LABEL_30;
      }
      goto LABEL_56;
    case 7:
      if (v25 != 7) {
        goto LABEL_56;
      }
      goto LABEL_30;
    case 8:
      if (v25 != 8) {
        goto LABEL_56;
      }
      goto LABEL_30;
    case 9:
      if (v25 != 9) {
        goto LABEL_56;
      }
      goto LABEL_30;
    case 10:
      if (v25 != 10) {
        goto LABEL_56;
      }
LABEL_30:
      double v200 = *(double *)v12.i64;
      double v209 = *(double *)v16.i64;
      outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v238);
      if (v200 != v209) {
        goto LABEL_57;
      }
      LOBYTE(v30) = 1;
      return v30 & 1;
    case 11:
      if (v25 != 11) {
        goto LABEL_56;
      }
      unint64_t v61 = HIDWORD(v12.i64[1]);
      unint64_t v62 = HIDWORD(v16.i64[1]);
      int32x4_t v201 = (int32x4_t)v12;
      int32x4_t v210 = (int32x4_t)v16;
      uint64_t v190 = v17.i64[0];
      uint64_t v179 = v13.i64[0];
      outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v238);
      LOBYTE(v30) = 0;
      int32x4_t v63 = (int32x4_t)vdupq_lane_s64(v179, 0);
      v63.i64[0] = v61;
      int32x4_t v64 = (int32x4_t)vdupq_lane_s64(v190, 0);
      v64.i64[0] = v62;
      if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32((float32x4_t)vuzp1q_s32(v201, v63), (float32x4_t)vuzp1q_s32(v210, v64))), 0xFuLL))) & 1) != 0&& *(float *)&v201.i32[1] == *(float *)&v210.i32[1])
      {
        LOBYTE(v30) = *((float *)&v179 + 1) == *((float *)&v190 + 1);
      }
      return v30 & 1;
    case 12:
      float32x4_t v215 = (float32x4_t)v12;
      int8x16_t v216 = v13;
      int8x16_t v217 = v10;
      int8x16_t v218 = v11;
      unint64_t v219 = v2;
      unint64_t v220 = v3;
      if (v25 != 12) {
        goto LABEL_56;
      }
      float32x4_t v226 = (float32x4_t)v16;
      int8x16_t v227 = v17;
      int8x16_t v228 = v14;
      int8x16_t v229 = v15;
      unint64_t v230 = v18;
      unint64_t v231 = v19;
      outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v238);
      LOBYTE(v30) = specialized static _ColorMatrix.== infix(_:_:)(&v215, &v226);
      return v30 & 1;
    case 13:
      if (v25 != 13) {
        goto LABEL_56;
      }
      unint64_t v65 = HIDWORD(v12.i64[1]);
      float v66 = *(float *)&v12.i32[1];
      float v67 = *(float *)&v16.i32[1];
      unint64_t v68 = HIDWORD(v16.i64[1]);
      int32x4_t v202 = (int32x4_t)v12;
      int32x4_t v211 = (int32x4_t)v16;
      uint64_t v191 = v17.i64[0];
      uint64_t v180 = v13.i64[0];
      outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v238);
      BOOL v43 = v66 == v67;
      int32x4_t v69 = (int32x4_t)vdupq_lane_s64(v180, 0);
      v69.i64[0] = v65;
      int32x4_t v70 = (int32x4_t)vdupq_lane_s64(v191, 0);
      v70.i64[0] = v68;
      unsigned __int8 v44 = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32((float32x4_t)vuzp1q_s32(v202, v69), (float32x4_t)vuzp1q_s32(v211, v70))), 0xFuLL)));
LABEL_40:
      LOBYTE(v30) = v44 & v43;
      return v30 & 1;
    case 14:
      if (v25 != 14) {
        goto LABEL_56;
      }
      __int32 v174 = v11.i32[2];
      unint64_t v203 = HIDWORD(v11.i64[1]);
      __int32 v144 = v11.i32[0];
      unint64_t v155 = HIDWORD(v11.i64[0]);
      __int32 v71 = v10.i32[2];
      __int32 v72 = v10.i32[0];
      __int32 v73 = v13.i32[2];
      *(void *)uint64_t v116 = HIDWORD(v13.i64[1]);
      unint64_t v120 = HIDWORD(v10.i64[0]);
      __int32 v74 = v13.i32[0];
      __int32 v75 = v12.i32[2];
      *(void *)uint64_t v108 = HIDWORD(v12.i64[1]);
      id v112 = (id)HIDWORD(v13.i64[0]);
      __int32 v76 = v12.i32[0];
      unint64_t v77 = HIDWORD(v12.i64[0]);
      __int32 v78 = v16.i32[0];
      unint64_t v124 = HIDWORD(v16.i64[0]);
      unint64_t v128 = HIDWORD(v10.i64[1]);
      LODWORD(v30) = v16.i32[2];
      __int32 v79 = v17.i32[0];
      __int32 v139 = v17.i32[2];
      *(void *)unint64_t v132 = HIDWORD(v16.i64[1]);
      unint64_t v135 = HIDWORD(v17.i64[0]);
      __int32 v148 = v14.i32[0];
      unint64_t v151 = HIDWORD(v17.i64[1]);
      __int32 v159 = v14.i32[2];
      unint64_t v163 = HIDWORD(v14.i64[0]);
      unint64_t v181 = HIDWORD(v14.i64[1]);
      __int32 v169 = v15.i32[0];
      unint64_t v192 = HIDWORD(v15.i64[0]);
      __int32 v184 = v15.i32[2];
      unint64_t v212 = HIDWORD(v15.i64[1]);
      outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v238);
      v226.i64[0] = __PAIR64__(v77, v76);
      v226.i64[1] = __PAIR64__(v108[0], v75);
      v227.i64[0] = __PAIR64__(v112, v74);
      v227.i64[1] = __PAIR64__(v116[0], v73);
      v228.i64[0] = __PAIR64__(v120, v72);
      v228.i64[1] = __PAIR64__(v128, v71);
      v229.i64[0] = __PAIR64__(v155, v144);
      v229.i64[1] = __PAIR64__(v203, v174);
      v215.i64[0] = __PAIR64__(v124, v78);
      v215.i64[1] = __PAIR64__(v132[0], v30);
      v216.i64[0] = __PAIR64__(v135, v79);
      v216.i64[1] = __PAIR64__(v151, v139);
      v217.i64[0] = __PAIR64__(v163, v148);
      v217.i64[1] = __PAIR64__(v181, v159);
      v218.i64[0] = __PAIR64__(v192, v169);
      v218.i64[1] = __PAIR64__(v212, v184);
      LOBYTE(v30) = specialized static GraphicsFilter.ColorCurves.== infix(_:_:)(&v226, &v215);
      return v30 & 1;
    case 15:
      *(int8x16_t *)char v185 = v14;
      if (v25 == 15)
      {
        uint64_t v109 = v10.i64[1];
        double v106 = *(double *)&v10.i64[1];
        uint64_t v156 = v10.i64[0];
        uint64_t v140 = v14.i64[1];
        double v104 = *(double *)&v14.i64[1];
        char v149 = v13.i8[8];
        unint64_t v152 = (void *)v12.i64[0];
        float32x4_t v226 = (float32x4_t)v12;
        uint64_t v160 = (void *)v13.i64[0];
        int v164 = v12.i32[2];
        v227.i64[0] = v13.i64[0];
        v227.i32[2] = v13.i32[2];
        uint64_t v121 = (void *)v16.i64[0];
        uint64_t v125 = v14.i64[0];
        float32x4_t v215 = (float32x4_t)v16;
        id v113 = (id)v17.i64[0];
        int v117 = v16.i32[2];
        v216.i64[0] = v17.i64[0];
        v216.i32[2] = v17.i32[2];
        uint64_t v136 = v15.i64[0];
        char v129 = v17.i8[8];
        uint64_t v133 = v15.i64[1];
        uint64_t v213 = v2;
        uint64_t v80 = v3;
        uint64_t v204 = v3;
        uint64_t v193 = v18;
        uint64_t v175 = v20;
        double v170 = *(double *)v10.i64;
        *(int8x16_t *)uint64_t v145 = v11;
        outlined copy of GraphicsFilter((id)v16.i64[0], v16.i32[2], (id)v17.i64[0], v17.i8[8], v14.i64[0], v14.i64[1], v15.i64[0], v15.i64[1], v18, v19, v20, v21, v22, v23, v24, SBYTE2(v24));
        outlined copy of GraphicsFilter(v152, v164, v160, v149, v156, v109, *(uint64_t *)v145, *(uint64_t *)&v145[2], v213, v80, v5, v4, v7, v6, v8, SBYTE2(v8));
        outlined copy of GraphicsFilter(v121, v117, v113, v129, v125, v140, v136, v133, v193, v19, v175, v21, v22, v23, v24, SBYTE2(v24));
        outlined copy of GraphicsFilter(v152, v164, v160, v149, v156, v109, *(uint64_t *)v145, *(uint64_t *)&v145[2], v213, v204, v5, v4, v7, v6, v8, SBYTE2(v8));
        BOOL v102 = specialized static Shader.ResolvedShader.== infix(_:_:)((uint64_t)&v226, (uint64_t)&v215);
        outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v238);
        outlined consume of GraphicsFilter(v121, v117, v113, v129, v125, v140, v136, v133, v193, v19, v175, v21, v22, v23, v24, SBYTE2(v24));
        outlined consume of GraphicsFilter(v152, v164, v160, v149, v156, v109, *(uint64_t *)v145, *(uint64_t *)&v145[2], v213, v204, v5, v4, v7, v6, v8, SBYTE2(v8));
        LOBYTE(v30) = v106 == v104 && v102 && v170 == *(double *)v185;
        return v30 & 1;
      }
      uint64_t v83 = v19;
      unint64_t v84 = v18;
      uint64_t v85 = v20;
      *(int8x16_t *)uint64_t v214 = v16;
      *(int8x16_t *)CGFloat v194 = v17;
      *(int8x16_t *)uint64_t v176 = v15;
      id v86 = (id)v12.i64[0];
LABEL_55:
      int8x16_t v15 = *(int8x16_t *)v176;
      int8x16_t v14 = *(int8x16_t *)v185;
      int8x16_t v17 = *(int8x16_t *)v194;
      int8x16_t v16 = *(int8x16_t *)v214;
      uint64_t v20 = v85;
      unint64_t v18 = v84;
      uint64_t v19 = v83;
      goto LABEL_56;
    case 16:
      int8x16_t v81 = vorrq_s8(vorrq_s8((int8x16_t)v12, v10), vorrq_s8(v13, v11));
      if (!(v3 | *(void *)&vorr_s8(*(int8x8_t *)v81.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL)) | v5 | v2 | v4 | v7 | v6)
        && !v8)
      {
        if (v25 != 16) {
          goto LABEL_56;
        }
        int8x16_t v82 = vorrq_s8(vorrq_s8(v16, v14), vorrq_s8(v17, v15));
        if (v19 | *(void *)&vorr_s8(*(int8x8_t *)v82.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)) | v20 | v18 | v21 | v22 | v23
          || v24)
        {
          goto LABEL_56;
        }
LABEL_70:
        outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v238);
        LOBYTE(v30) = 1;
        return v30 & 1;
      }
      if (!v8)
      {
        int8x16_t v88 = vorrq_s8(vextq_s8((int8x16_t)v12, v13, 8uLL), vextq_s8(v13, v10, 8uLL));
        v12.i64[1] = *(void *)&vorr_s8(*(int8x8_t *)v88.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL)) | v10.i64[1] | v11.i64[0] | v11.i64[1] | v7 | v6 | v4 | v5 | v3 | v2;
        int32x2_t v89 = vmovn_s64(vceqq_s64(v12, (int64x2_t)xmmword_24619B520));
        if (v89.i8[0] & 1) != 0 && (v89.i8[4])
        {
          if (v25 != 16 || v24 || v16.i64[0] != 1) {
            goto LABEL_56;
          }
LABEL_69:
          int8x16_t v90 = vorrq_s8(vextq_s8(v16, v17, 8uLL), vextq_s8(v17, v14, 8uLL));
          if (*(void *)&vorr_s8(*(int8x8_t *)v90.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL)) | v14.i64[1] | v15.i64[0] | v15.i64[1] | v22 | v23 | v21 | v20 | v19 | v18) {
            goto LABEL_56;
          }
          goto LABEL_70;
        }
      }
      if (v25 == 16 && !v24 && v16.i64[0] == 2) {
        goto LABEL_69;
      }
LABEL_56:
      outlined copy of GraphicsFilter((id)v16.i64[0], v16.i32[2], (id)v17.i64[0], v17.i8[8], v14.i64[0], v14.i64[1], v15.i64[0], v15.i64[1], v18, v19, v20, v21, v22, v23, v24, SBYTE2(v24));
      outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v238);
LABEL_57:
      LOBYTE(v30) = 0;
      return v30 & 1;
    default:
      if (v25) {
        goto LABEL_56;
      }
      BOOL v26 = (v12.i16[4] & 0x100) == 0;
      BOOL v27 = (v12.i8[8] & 1) == 0;
      __int8 v28 = v16.i8[8];
      uint64_t v29 = ((unint64_t)v16.i64[1] >> 8) & 1;
      double v195 = *(double *)v12.i64;
      double v205 = *(double *)v16.i64;
      outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v238);
      LODWORD(v30) = (v195 == v205) & (v27 ^ v28) & (v26 ^ v29);
      return v30 & 1;
  }
}