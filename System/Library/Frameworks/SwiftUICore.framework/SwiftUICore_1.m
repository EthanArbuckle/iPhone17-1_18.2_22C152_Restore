uint64_t outlined retain of Image.Resolved(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(void *)(a1 + 104);
  v3 = *(void *)(a1 + 112);
  v4 = *(void *)(a1 + 120);
  v5 = *(void **)(a1 + 168);
  outlined copy of GraphicsImage.Contents?(*(id *)a1, *(unsigned char *)(a1 + 8));
  outlined copy of AccessibilityImageLabel?(v2, v3, v4);
  v6 = v5;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

id outlined copy of GraphicsImage.Contents(id result, char a2)
{
  switch(a2)
  {
    case 0:
    case 1:
      result = result;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
      result = (id)swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

id outlined copy of GraphicsImage.Contents?(id result, char a2)
{
  if (a2 != -1) {
    return outlined copy of GraphicsImage.Contents(result, a2);
  }
  return result;
}

uint64_t outlined copy of AccessibilityImageLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0) {
    outlined copy of Text.Storage(a1, a2, a3 & 1);
  }

  return swift_bridgeObjectRetain();
}

uint64_t outlined copy of AccessibilityImageLabel?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a3 >> 1 != 0xFFFFFFFF) {
    return outlined copy of AccessibilityImageLabel(a1, a2, a3);
  }
  return a1;
}

void protocol witness for static AlignmentID._combineExplicit(childValue:_:into:) in conformance VerticalAlignment.FirstTextBaseline(double a1, uint64_t a2, uint64_t a3)
{
  double v3 = *(double *)a3;
  if (*(unsigned char *)(a3 + 8)) {
    double v3 = INFINITY;
  }
  if (v3 <= a1) {
    a1 = v3;
  }
  *(double *)a3 = a1;
  *(unsigned char *)(a3 + 8) = 0;
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance _ZStackLayout(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, uint64_t a10)
{
  return specialized _ZStackLayout.placeSubviews(in:proposal:subviews:cache:)(a9, a1, a2, a3, a4, a10, *v10, v10[1]);
}

void *StackLayout.update(children:majorAxis:minorAxisAlignment:uniformSpacing:)(int *a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  char v10 = a2 & 1;
  int v11 = *a1;
  uint64_t v12 = *((void *)a1 + 1);
  char v13 = *((unsigned char *)a1 + 16);
  char v14 = *((unsigned char *)a1 + 17);
  char v18 = *(unsigned char *)(v6 + 98);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)uint64_t v6 = a3;
  *(void *)(v6 + 8) = a4;
  *(unsigned char *)(v6 + 16) = a5 & 1;
  *(unsigned char *)(v6 + 17) = v10;
  *(void *)(v6 + 24) = 0;
  *(void *)(v6 + 32) = 0xFFF0000000000000;
  *(unsigned char *)(v6 + 40) = 0;
  *(void *)(v6 + 48) = 0xFFF0000000000000;
  *(unsigned char *)(v6 + 56) = 0;
  *(void *)(v6 + 64) = 0;
  *(void *)(v6 + 72) = 0;
  *(_DWORD *)(v6 + 80) = v11;
  *(void *)(v6 + 88) = v12;
  *(unsigned char *)(v6 + 96) = v13;
  *(unsigned char *)(v6 + 97) = v14;
  *(unsigned char *)(v6 + 98) = v18;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *(void *)(v6 + 104);
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v16 + 16));
  }
  else
  {
    *(void *)(v6 + 104) = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v16 + 24) >> 1);
    swift_bridgeObjectRelease();
  }

  return StackLayout.makeChildren()();
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[15 * a2 + 4];
    if (a1 != a2 || &v4[15 * a1 + 4] >= (void *)&v16[120 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[15 * a1 + 4], v16, 120 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnyTrackedValue();
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[5 * a2 + 4];
    if (a1 != a2 || &v4[5 * a1 + 4] >= (void *)&v16[40 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[5 * a1 + 4], v16, 40 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>)();
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[14 * a2 + 4];
    if (a1 != a2 || &v4[14 * a1 + 4] >= (void *)&v16[112 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[14 * a1 + 4], v16, 112 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_21;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_27;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[14 * a2 + 4];
    uint64_t v17 = 112 * v15;
    if (112 * a1 < 112 * a2 || &v4[14 * a1 + 4] >= (void *)&v16[v17] || a1 != a2) {
      uint64_t result = (uint64_t)memmove(&v4[14 * a1 + 4], v16, v17);
    }
    uint64_t v18 = v4[2];
    BOOL v14 = __OFADD__(v18, v8);
    v19 = v18 - v7;
    if (!v14)
    {
      v4[2] = v19;
LABEL_21:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_23;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_29;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[6 * a2 + 4];
    uint64_t v17 = 48 * v15;
    if (48 * a1 < 48 * a2 || (&v4[6 * a1 + 4] < (void *)&v16[v17] ? (uint64_t v18 = a1 == a2) : (uint64_t v18 = 0), !v18)) {
      uint64_t result = (uint64_t)memmove(&v4[6 * a1 + 4], v16, v17);
    }
    v19 = v4[2];
    BOOL v14 = __OFADD__(v19, v8);
    v20 = v19 - v7;
    if (!v14)
    {
      v4[2] = v20;
LABEL_23:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_30;
  }
LABEL_31:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[a2 + 4];
    if (a1 != a2 || &v4[a1 + 4] >= (void *)&v16[8 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[a1 + 4], v16, 8 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>.Fork(0);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[5 * a2 + 4];
    if (a1 != a2 || &v4[5 * a1 + 4] >= (void *)&v16[40 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[5 * a1 + 4], v16, 40 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<Double>.Fork(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<Double>.Fork, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatorState.Fork);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[4 * a2 + 4];
    if (a1 != a2 || &v4[4 * a1 + 4] >= (void *)&v16[32 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[4 * a1 + 4], v16, 32 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<CGFloat>.Fork(0, &lazy cache variable for type metadata for AnimatorState<CGFloat>.Fork, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[4 * a2 + 4];
    if (a1 != a2 || &v4[4 * a1 + 4] >= (void *)&v16[32 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[4 * a1 + 4], v16, 32 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>.Fork(0);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[11 * a2 + 4];
    if (a1 != a2 || &v4[11 * a1 + 4] >= (void *)&v16[88 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[11 * a1 + 4], v16, 88 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>.Fork(0);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[6 * a2 + 4];
    if (a1 != a2 || &v4[6 * a1 + 4] >= (void *)&v16[48 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[6 * a1 + 4], v16, 48 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[7 * a2 + 4];
    if (a1 != a2 || &v4[7 * a1 + 4] >= (void *)&v16[56 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[7 * a1 + 4], v16, 56 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork();
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[7 * a2 + 4];
    if (a1 != a2 || &v4[7 * a1 + 4] >= (void *)&v16[56 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[7 * a1 + 4], v16, 56 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, CGFloat>>.Fork, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[5 * a2 + 4];
    if (a1 != a2 || &v4[5 * a1 + 4] >= (void *)&v16[40 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[5 * a1 + 4], v16, 40 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Fork(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>.Fork, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[6 * a2 + 4];
    if (a1 != a2 || &v4[6 * a1 + 4] >= (void *)&v16[48 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[6 * a1 + 4], v16, 48 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork(0);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[7 * a2 + 4];
    if (a1 != a2 || &v4[7 * a1 + 4] >= (void *)&v16[56 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[7 * a1 + 4], v16, 56 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>.Fork(0);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[8 * a2 + 4];
    if (a1 != a2 || &v4[8 * a1 + 4] >= (void *)&v16[64 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[8 * a1 + 4], v16, v15 << 6);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>.Fork();
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[9 * a2 + 4];
    if (a1 != a2 || &v4[9 * a1 + 4] >= (void *)&v16[72 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[9 * a1 + 4], v16, 72 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>.Fork(0);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[9 * a2 + 4];
    if (a1 != a2 || &v4[9 * a1 + 4] >= (void *)&v16[72 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[9 * a1 + 4], v16, 72 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>.Fork(0);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[9 * a2 + 4];
    if (a1 != a2 || &v4[9 * a1 + 4] >= (void *)&v16[72 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[9 * a1 + 4], v16, 72 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<CGFloat>.Fork(0, &lazy cache variable for type metadata for AnimatorState<ResolvedGradientVector>.Fork, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[5 * a2 + 4];
    if (a1 != a2 || &v4[5 * a1 + 4] >= (void *)&v16[40 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[5 * a1 + 4], v16, 40 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>.Fork();
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[6 * a2 + 4];
    if (a1 != a2 || &v4[6 * a1 + 4] >= (void *)&v16[48 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[6 * a1 + 4], v16, 48 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork(0);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[16 * a2 + 4];
    if (a1 != a2 || &v4[16 * a1 + 4] >= (void *)&v16[128 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[16 * a1 + 4], v16, v15 << 7);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<CGFloat>.Fork(0, &lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.Fill.AnimatableData>.Fork, (void (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[14 * a2 + 4];
    if (a1 != a2 || &v4[14 * a1 + 4] >= (void *)&v16[112 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[14 * a1 + 4], v16, 112 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<CGFloat>.Fork(0, &lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>.Fork, (void (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[9 * a2 + 4];
    if (a1 != a2 || &v4[9 * a1 + 4] >= (void *)&v16[72 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[9 * a1 + 4], v16, 72 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>.Fork(0);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[10 * a2 + 4];
    if (a1 != a2 || &v4[10 * a1 + 4] >= (void *)&v16[80 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[10 * a1 + 4], v16, 80 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>.Fork();
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[8 * a2 + 4];
    if (a1 != a2 || &v4[8 * a1 + 4] >= (void *)&v16[64 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[8 * a1 + 4], v16, v15 << 6);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>.Fork(0);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[6 * a2 + 4];
    if (a1 != a2 || &v4[6 * a1 + 4] >= (void *)&v16[48 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[6 * a1 + 4], v16, 48 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for AnimatorState<CGFloat>.Fork(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_AnyAnimatableData>.Fork, (void (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[8 * a2 + 4];
    if (a1 != a2 || &v4[8 * a1 + 4] >= (void *)&v16[64 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[8 * a1 + 4], v16, v15 << 6);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[9 * a2 + 4];
    if (a1 != a2 || &v4[9 * a1 + 4] >= (void *)&v16[72 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[9 * a1 + 4], v16, 72 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_23;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_29;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[11 * a2 + 4];
    uint64_t v17 = 88 * v15;
    if (88 * a1 < 88 * a2 || (&v4[11 * a1 + 4] < (void *)&v16[v17] ? (uint64_t v18 = a1 == a2) : (uint64_t v18 = 0), !v18)) {
      uint64_t result = (uint64_t)memmove(&v4[11 * a1 + 4], v16, v17);
    }
    v19 = v4[2];
    BOOL v14 = __OFADD__(v19, v8);
    v20 = v19 - v7;
    if (!v14)
    {
      v4[2] = v20;
LABEL_23:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_30;
  }
LABEL_31:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[6 * a2 + 4];
    if (a1 != a2 || &v4[6 * a1 + 4] >= (void *)&v16[48 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[6 * a1 + 4], v16, 48 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t UnaryLayoutEngine.spacing()(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 40);
  double v3 = (uint64_t *)(v1 + *(int *)(a1 + 36));
  int v4 = *((_DWORD *)v3 + 2);
  uint64_t v9 = *v3;
  int v10 = v4;
  int64_t v5 = (uint64_t *)(v1 + v2);
  LODWORD(v2) = *(_DWORD *)(v1 + v2 + 8);
  uint64_t v7 = *v5;
  int v8 = v2;
  return (*(uint64_t (**)(uint64_t *, uint64_t *, void))(*(void *)(a1 + 24) + 40))(&v9, &v7, *(void *)(a1 + 16));
}

void *initializeWithCopy for _AnyAnimatableData(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[4];
  a1[4] = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

SwiftUI::Spacing __swiftcall ViewLayoutEngine.spacing()()
{
  uint64_t v3 = v0;
  int v4 = v1;
  uint64_t v5 = *(int *)(v0 + 64);
  uint64_t v6 = *(void *)(v2 + v5);
  if (!v6)
  {
    uint64_t v7 = (int *)(v2 + *(int *)(v3 + 40));
    int v8 = *v7;
    uint64_t v9 = *((void *)v7 + 1);
    char v10 = *(unsigned char *)(v2 + *(int *)(v3 + 44));
    swift_bridgeObjectRetain();
    int v12 = v8;
    uint64_t v13 = v9;
    char v14 = 0;
    char v15 = v10;
    (*(void (**)(uint64_t *__return_ptr, int *, uint64_t, void))(*(void *)(v3 + 24) + 48))(&v16, &v12, v2 + *(int *)(v3 + 36), *(void *)(v3 + 16));
    swift_bridgeObjectRelease();
    uint64_t v6 = v16;
    *(void *)(v2 + v5) = v16;
  }
  void *v4 = v6;

  return (SwiftUI::Spacing)swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, unint64_t *a3, unint64_t *a4, uint64_t a5, void (*a6)(uint64_t, unsigned char *))
{
  int v8 = v6;
  uint64_t v10 = *v6;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, ScrollStateRequest>(0, a3, a4);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = result;
  if (*(void *)(v10 + 16))
  {
    int64_t v13 = 0;
    v36 = (void *)(v10 + 64);
    uint64_t v14 = 1 << *(unsigned char *)(v10 + 32);
    if (v14 < 64) {
      uint64_t v15 = ~(-1 << v14);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v16 = v15 & *(void *)(v10 + 64);
    v34 = v8;
    int64_t v35 = (unint64_t)(v14 + 63) >> 6;
    uint64_t v17 = result + 64;
    while (1)
    {
      if (v16)
      {
        unint64_t v19 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v20 = v19 | (v13 << 6);
      }
      else
      {
        int64_t v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v10 + 64;
        if (v21 >= v35) {
          goto LABEL_34;
        }
        unint64_t v22 = v36[v21];
        ++v13;
        if (!v22)
        {
          int64_t v13 = v21 + 1;
          if (v21 + 1 >= v35) {
            goto LABEL_34;
          }
          unint64_t v22 = v36[v13];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                int v8 = v34;
                goto LABEL_41;
              }
              uint64_t v33 = 1 << *(unsigned char *)(v10 + 32);
              if (v33 >= 64) {
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v36 = -1 << v33;
              }
              int v8 = v34;
              *(void *)(v10 + 16) = 0;
              break;
            }
            unint64_t v22 = v36[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v13 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v13 >= v35) {
                  goto LABEL_34;
                }
                unint64_t v22 = v36[v13];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v23;
          }
        }
LABEL_21:
        unint64_t v16 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      uint64_t v24 = *(void *)(*(void *)(v10 + 48) + 8 * v20);
      uint64_t v25 = *(void *)(v10 + 56) + 40 * v20;
      if (a2) {
        a6(v25, v37);
      }
      else {
        outlined init with copy of AnyTrackedValue(v25, (uint64_t)v37);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v26 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v17 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v27) & ~*(void *)(v17 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v17 + 8 * v28);
        }
        while (v32 == -1);
        unint64_t v18 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v12 + 48) + 8 * v18) = v24;
      uint64_t result = ((uint64_t (*)(unsigned char *, unint64_t))a6)(v37, *(void *)(v12 + 56) + 40 * v18);
      ++*(void *)(v12 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *int v8 = v12;
  return result;
}

uint64_t SpacerLayoutComputer.Engine.spacing()@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  char v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
  int v6 = *(unsigned __int8 *)(v2 + *(int *)(a1 + 36));
  if (v5)
  {
    if (v6 != 2)
    {
      type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>();
      if (v6)
      {
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_2461C6AA0;
        if (one-time initialization token for textBaseline != -1) {
          swift_once();
        }
        uint64_t v14 = static Spacing.Category.textBaseline;
        *(void *)(inited + 32) = static Spacing.Category.textBaseline;
        *(unsigned char *)(inited + 40) = 0;
        *(_OWORD *)(inited + 48) = 0u;
        *(_OWORD *)(inited + 64) = 0u;
        *(unsigned char *)(inited + 80) = 0;
        *(void *)(inited + 88) = v14;
        *(unsigned char *)(inited + 96) = 2;
        *(void *)(inited + 144) = 0;
        *(unsigned char *)(inited + 152) = 0;
        *(void *)(inited + 200) = 0;
        *(_OWORD *)(inited + 104) = 0u;
        *(_OWORD *)(inited + 120) = 0u;
        *(unsigned char *)(inited + 136) = 0;
        *(_OWORD *)(inited + 160) = 0u;
        *(_OWORD *)(inited + 176) = 0u;
        *(unsigned char *)(inited + 192) = 0;
        *(unsigned char *)(inited + 208) = 2;
        *(unsigned char *)(inited + 248) = 0;
        *(_OWORD *)(inited + 232) = 0u;
        *(_OWORD *)(inited + 216) = 0u;
      }
      else
      {
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_2461C6AA0;
        uint64_t v12 = inited + 48;
        if (one-time initialization token for leftTextBaseline != -1)
        {
          swift_once();
          uint64_t v12 = inited + 48;
        }
        *(void *)(inited + 32) = static Spacing.Category.leftTextBaseline;
        *(unsigned char *)(inited + 40) = 1;
        long long v13 = 0uLL;
        *(_OWORD *)uint64_t v12 = 0u;
        *(_OWORD *)(v12 + 16) = 0u;
        *(unsigned char *)(v12 + 32) = 0;
        if (one-time initialization token for rightTextBaseline != -1)
        {
          swift_once();
          long long v13 = 0uLL;
        }
        *(void *)(inited + 88) = static Spacing.Category.rightTextBaseline;
        *(unsigned char *)(inited + 96) = 3;
        *(void *)(inited + 144) = 0;
        *(_OWORD *)(inited + 104) = v13;
        *(_OWORD *)(inited + 120) = v13;
        *(unsigned char *)(inited + 136) = 0;
        *(unsigned char *)(inited + 152) = 1;
        *(void *)(inited + 200) = 0;
        *(_OWORD *)(inited + 160) = v13;
        *(_OWORD *)(inited + 176) = v13;
        *(unsigned char *)(inited + 192) = 0;
        *(unsigned char *)(inited + 208) = 3;
        *(_OWORD *)(inited + 216) = v13;
        *(_OWORD *)(inited + 232) = v13;
        *(unsigned char *)(inited + 248) = 0;
      }
      uint64_t v7 = inited;
      goto LABEL_24;
    }
  }
  else if (v6 != 2)
  {
    type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>();
    uint64_t v7 = swift_initStackObject();
    *(_OWORD *)(v7 + 16) = xmmword_2461BDD50;
    *(void *)(v7 + 32) = 0;
    if (v6)
    {
      *(unsigned char *)(v7 + 40) = 0;
      *(void *)(v7 + 88) = 0;
      long long v8 = 0uLL;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)(v7 + 64) = 0u;
      *(unsigned char *)(v7 + 80) = 0;
      char v9 = 2;
    }
    else
    {
      *(unsigned char *)(v7 + 40) = 1;
      *(void *)(v7 + 88) = 0;
      long long v8 = 0uLL;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)(v7 + 64) = 0u;
      *(unsigned char *)(v7 + 80) = 0;
      char v9 = 3;
    }
    *(unsigned char *)(v7 + 96) = v9;
    *(_OWORD *)(v7 + 104) = v8;
    *(_OWORD *)(v7 + 120) = v8;
    *(unsigned char *)(v7 + 136) = 0;
LABEL_24:
    unint64_t v15 = specialized Dictionary.init(dictionaryLiteral:)(v7);
    uint64_t result = swift_setDeallocating();
    *a2 = v15;
    return result;
  }
  if (one-time initialization token for zero != -1) {
    swift_once();
  }
  *a2 = static Spacing.zero;

  return swift_bridgeObjectRetain();
}

double protocol witness for LayoutEngine.layoutPriority() in conformance SpacerLayoutComputer<A>.Engine()
{
  return -INFINITY;
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance _VStackLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, uint64_t, void, void, void))
{
  if (*((unsigned char *)a1 + 17)) {
    int v6 = 256;
  }
  else {
    int v6 = 0;
  }
  return a5(*a1, *((void *)a1 + 1), v6 | *((unsigned __int8 *)a1 + 16), a2, *(void *)v5, *(void *)(v5 + 8), *(unsigned __int8 *)(v5 + 16));
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance _VStackLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for Layout.spacing(subviews:cache:) in conformance _VStackLayout(a1, a2, a3, a4, (uint64_t (*)(void, void, void, uint64_t, void, void, void))specialized HVStack.spacing(subviews:cache:));
}

uint64_t protocol witness for LayoutEngine.spacing() in conformance StyledTextLayoutEngine()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216))();
}

double protocol witness for UnaryLayout.layoutPriority(child:) in conformance LayoutPriorityLayout()
{
  return *(double *)v0;
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance AnyLayout()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance _FlexFrameLayout@<X0>(uint64_t a1@<X0>, int *a2@<X1>, void *a3@<X8>)
{
  return _FlexFrameLayout.spacing(in:child:)(a1, a2, a3);
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance _PaddingLayout@<X0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  return _PaddingLayout.spacing(in:child:)(a1, a2, a3);
}

SwiftUI::Spacing ResolvedImageLayoutEngine.spacing()@<X0>(unint64_t *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 96) == 2
    && ((uint64_t v3 = *(double **)(v1 + 144)) != 0 ? (v4 = *(unsigned char *)(v1 + 153) == 3) : (v4 = 0), v4))
  {
    double v6 = v3[2];
    double v7 = v3[7];
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>, (uint64_t (*)(uint64_t))type metadata accessor for (Spacing.Key, Spacing.Value), MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BE290;
    uint64_t v9 = inited + 48;
    if (one-time initialization token for textToText != -1)
    {
      swift_once();
      uint64_t v9 = inited + 48;
    }
    uint64_t v10 = static Spacing.Category.textToText;
    *(void *)(inited + 32) = static Spacing.Category.textToText;
    *(unsigned char *)(inited + 40) = 0;
    *(_OWORD *)uint64_t v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(unsigned char *)(v9 + 32) = 0;
    *(void *)(inited + 88) = v10;
    *(unsigned char *)(inited + 96) = 2;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
    *(unsigned char *)(inited + 136) = 0;
    if (one-time initialization token for edgeAboveText != -1) {
      swift_once();
    }
    *(void *)(inited + 144) = static Spacing.Category.edgeAboveText;
    *(unsigned char *)(inited + 152) = 0;
    uint64_t v11 = *((void *)v3 + 2);
    *(unsigned char *)(inited + 192) = 0;
    *(void *)(inited + 176) = 0;
    *(void *)(inited + 184) = 0;
    *(void *)(inited + 160) = v11;
    *(void *)(inited + 168) = 0;
    if (one-time initialization token for edgeBelowText != -1) {
      swift_once();
    }
    double v12 = v6 + v7;
    *(void *)(inited + 200) = static Spacing.Category.edgeBelowText;
    *(unsigned char *)(inited + 208) = 2;
    *(double *)(inited + 216) = v3[2] + 1.0;
    *(unsigned char *)(inited + 248) = 0;
    *(void *)(inited + 232) = 0;
    *(void *)(inited + 240) = 0;
    *(void *)(inited + 224) = 0;
    if (one-time initialization token for textBaseline != -1) {
      swift_once();
    }
    uint64_t v13 = static Spacing.Category.textBaseline;
    *(void *)(inited + 256) = static Spacing.Category.textBaseline;
    *(unsigned char *)(inited + 264) = 2;
    *(double *)(inited + 272) = -v12;
    *(void *)(inited + 288) = 0;
    *(void *)(inited + 296) = 0;
    *(void *)(inited + 280) = 0;
    *(unsigned char *)(inited + 304) = 0;
    *(void *)(inited + 312) = v13;
    *(unsigned char *)(inited + 320) = 0;
    *(double *)(inited + 328) = -(v3[5] - v12);
    *(unsigned char *)(inited + 360) = 0;
    *(void *)(inited + 344) = 0;
    *(void *)(inited + 352) = 0;
    *(void *)(inited + 336) = 0;
    unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    result.minima._rawValue = (void *)swift_setDeallocating();
    *a1 = v14;
  }
  else
  {
    return Spacing.init()();
  }
  return result;
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance GeometryReaderLayout(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized GeometryReaderLayout.placeSubviews(in:proposal:subviews:cache:)(a9, a1, a2, a3, a4);
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance LayoutPriorityLayout(uint64_t a1, uint64_t a2)
{
  return LayoutPriorityLayout.spacing(in:child:)(a1, a2);
}

uint64_t LayoutPriorityLayout.spacing(in:child:)(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4) == *MEMORY[0x263F288F8])
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    InputValue = (uint64_t *)&static LayoutComputer.defaultValue;
  }
  else
  {
    InputValue = (uint64_t *)AGGraphGetInputValue();
  }
  uint64_t v3 = *InputValue;
  uint64_t v4 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_12;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    (*(void (**)(void))(*(void *)v3 + 112))();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance AnyLayout()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance _FrameLayout@<X0>(uint64_t a1@<X0>, int *a2@<X1>, void *a3@<X8>)
{
  return _FrameLayout.spacing(in:child:)(a1, a2, a3);
}

uint64_t _FrameLayout.spacing(in:child:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v28 = *MEMORY[0x263EF8340];
  Swift::UInt32 v6 = *(_DWORD *)(a1 + 8);
  int v7 = *a2;
  uint64_t v18 = *(void *)(a2 + 1);
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v8 = static _SemanticFeature_v3.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_10:
      if (v18 == *MEMORY[0x263F288F8])
      {
        if (one-time initialization token for defaultValue != -1) {
          swift_once();
        }
        InputValue = (uint64_t *)&static LayoutComputer.defaultValue;
      }
      else
      {
        InputValue = (uint64_t *)AGGraphGetInputValue();
      }
      uint64_t v10 = *InputValue;
      uint64_t v11 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v11 != -1) {
        swift_once();
      }
      if (!lockAssertionsAreEnabled) {
        goto LABEL_21;
      }
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (_MovableLockIsOwner(static Update._lock))
      {
LABEL_21:
        (*(void (**)(void))(*(void *)v10 + 112))();
        return swift_release();
      }
      goto LABEL_34;
    }
  }
  else if (static Semantics.forced < v8)
  {
    goto LABEL_10;
  }
  int v19 = v7;
  uint64_t v20 = v18;
  if (LayoutProxy.requiresSpacingProjection.getter()) {
    goto LABEL_10;
  }
  if (v18 == *MEMORY[0x263F288F8])
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v13 = (uint64_t *)&static LayoutComputer.defaultValue;
  }
  else
  {
    uint64_t v13 = (uint64_t *)AGGraphGetInputValue();
  }
  uint64_t v14 = *v13;
  uint64_t v15 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_33;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_33:
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v14 + 112))(&v21);
    swift_release();
    outlined init with take of CGFloat?(v4 + 16, (uint64_t)v25);
    outlined init with take of CGFloat?((uint64_t)v25, (uint64_t)v26);
    outlined init with take of CGFloat?(v4, (uint64_t)v24);
    outlined init with take of CGFloat?((uint64_t)v24, (uint64_t)v27);
    uint64_t KeyPath = swift_getKeyPath();
    Swift::UInt32 v22 = v6;
    uint64_t v23 = KeyPath;
    type metadata accessor for CGFloat?(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(void, uint64_t))type metadata accessor for EnvironmentFetch);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v6);
    type metadata accessor for KeyPath<EnvironmentValues, LayoutDirection>();
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    Hasher._finalize()();
    _s7SwiftUI16EnvironmentFetch33_BA60BF7120E939C5C25B2A488163D4ACLLVyAA15LayoutDirectionOGADyxG14AttributeGraph4RuleAAWlTm_1(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>);
    LOBYTE(v19) = 0;
    _s7SwiftUI16EnvironmentFetch33_BA60BF7120E939C5C25B2A488163D4ACLLVyAA15LayoutDirectionOGADyxG14AttributeGraph4RuleAAWlTm_1(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>);
    char v17 = *(unsigned char *)static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
    swift_release_n();
    LOBYTE(v19) = v17;
    AbsoluteEdge.Set.init(_:layoutDirection:)((unsigned __int8 *)&v19, &v22);
    uint64_t result = (uint64_t)Spacing.reset(_:)(&v22);
    *a3 = v21;
    return result;
  }
LABEL_34:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance AnyLayout(int *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *((void *)a1 + 1);
  char v4 = *((unsigned char *)a1 + 16);
  char v5 = *((unsigned char *)a1 + 17);
  int v7 = *a1;
  uint64_t v8 = v3;
  char v9 = v4;
  char v10 = v5;
  return (*(uint64_t (**)(int *))(*(void *)v2 + 104))(&v7);
}

uint64_t _AnyLayoutBox.spacing(subviews:cache:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = a1;
  uint64_t v22 = a3;
  uint64_t v6 = *(void *)(*(void *)v3 + 184);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  char v9 = &v18[-v8];
  uint64_t v11 = *(void *)(v10 + 192);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = &v18[-v14];
  int v21 = *v5;
  uint64_t v20 = *((void *)v5 + 1);
  int v19 = *((unsigned __int8 *)v5 + 16);
  LOBYTE(v5) = *((unsigned char *)v5 + 17);
  outlined init with copy of Any(a2 + 8, (uint64_t)v27);
  swift_dynamicCast();
  uint64_t v16 = v3 + *(void *)(*(void *)v3 + 200);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, v16, v6);
  int v23 = v21;
  uint64_t v24 = v20;
  char v25 = v19;
  char v26 = (char)v5;
  (*(void (**)(int *, unsigned char *, uint64_t, uint64_t))(v11 + 48))(&v23, v15, v6, v11);
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  $defer #1 <A>() in _AnyLayoutBox.updateCache(_:subviews:)(a2, (uint64_t)v15);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
}

SwiftUI::Spacing protocol witness for UnaryLayout.spacing(in:child:) in conformance _FixedSizeLayout()
{
  return LayoutProxy.spacing()();
}

SwiftUI::Spacing __swiftcall LayoutProxy.spacing()()
{
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x263F288F8])
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    InputValue = (uint64_t *)&static LayoutComputer.defaultValue;
  }
  else
  {
    InputValue = (uint64_t *)AGGraphGetInputValue();
  }
  uint64_t v2 = *InputValue;
  uint64_t v3 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_12;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result.minima._rawValue = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    (*(void (**)(void))(*(void *)v2 + 112))();
    return (SwiftUI::Spacing)swift_release();
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  type metadata accessor for _ContiguousArrayStorage<Int>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<StackLayout.Child>, (uint64_t)&type metadata for StackLayout.Child, MEMORY[0x263F8E0F8]);
  char v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 120);
  return v4;
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<LayoutProxyAttributes>, (uint64_t)&type metadata for LayoutProxyAttributes);
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  type metadata accessor for _ContiguousArrayStorage<Int>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
  char v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  v4[2] = a1;
  v4[3] = (2 * (v6 >> 3)) | 1;
  return v4;
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x263F8D6C8]);
}

{
  uint64_t v2;
  void *v4;
  size_t v5;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  type metadata accessor for _ContiguousArrayStorage<CGPoint>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyTrackedValue>, (void (*)(uint64_t))type metadata accessor for AnyTrackedValue);
  char v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 40);
  return v4;
}

{
  uint64_t v2;
  void *v4;
  size_t v5;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UInt8>, MEMORY[0x263F8E778], MEMORY[0x263F8E0F8]);
  char v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  type metadata accessor for _ContiguousArrayStorage<CGPoint>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, type metadata accessor for CGPoint);
  char v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 4);
  return v4;
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Line>, (uint64_t)&type metadata for Text.Layout.Line);
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<TextRenderLayer.SegmentLayer>, (uint64_t)&type metadata for TextRenderLayer.SegmentLayer);
}

{
  uint64_t v2;
  void *v4;
  size_t v5;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  type metadata accessor for _ContiguousArrayStorage<Int>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
  char v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 72);
  return v4;
}

{
  uint64_t v2;
  void *v4;
  size_t v5;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  type metadata accessor for _ContiguousArrayStorage<Int>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TextSizeCache.Entry>, (uint64_t)&type metadata for TextSizeCache.Entry, MEMORY[0x263F8E0F8]);
  char v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 88);
  return v4;
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, &lazy cache variable for type metadata for _ContiguousArrayStorage<SectionAccumulator.RowIDs.Chunk>, (uint64_t)&type metadata for SectionAccumulator.RowIDs.Chunk);
}

SwiftUI::Spacing __swiftcall LeafLayoutEngine.spacing()()
{
  return (SwiftUI::Spacing)(*(uint64_t (**)(void))(*(void *)(v0 + 24) + 8))(*(void *)(v0 + 16));
}

double static EdgeInsets.zero.getter()
{
  return 0.0;
}

uint64_t _ProposedSize.width.getter()
{
  return *(void *)v0;
}

ValueMetadata *type metadata accessor for _FlexFrameLayout()
{
  return &type metadata for _FlexFrameLayout;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance EverySecondEntries()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

ValueMetadata *type metadata accessor for GeometryProxy()
{
  return &type metadata for GeometryProxy;
}

uint64_t destroy for ProtobufEncoder()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for UniqueID()
{
  return &type metadata for UniqueID;
}

ValueMetadata *type metadata accessor for Image.Scale()
{
  return &type metadata for Image.Scale;
}

uint64_t _ViewInputs.animatedPosition()()
{
  return _ViewInputs.animatedPosition()((uint64_t (*)(uint64_t *))CachedEnvironment.animatedPosition(for:));
}

uint64_t EnvironmentValues.colorScheme.getter()
{
  return EnvironmentValues.colorScheme.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t static EnvironmentFetch.== infix(_:_:)(int a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a1 != a3) {
    return 0;
  }
  type metadata accessor for AnyKeyPath();
  return MEMORY[0x24C523A30](a2, a4) & 1;
}

uint64_t initializeWithCopy for AnimatableFrameAttributeVFD(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 88);
  long long v5 = *(_OWORD *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 88) = v4;
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  swift_retain();
  return a1;
}

double static AccessibilityProperties.VisibilityKey.defaultValue.getter@<D0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static AccessibilityProperties.VisibilityKey.defaultValue;
  *a1 = static AccessibilityProperties.VisibilityKey.defaultValue;
  return result;
}

uint64_t StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  *(double *)a4 = a5;
  *(_DWORD *)(a4 + 8) = result;
  *(_DWORD *)(a4 + 12) = a2;
  *(double *)(a4 + 16) = a6;
  *(void *)(a4 + 24) = a3;
  *(double *)(a4 + 32) = a7;
  return result;
}

uint64_t (*partial apply for closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  long long v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 24) = v3;
  *(void *)(v2 + 40) = v3;
  return partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t associated type witness table accessor for ViewInputFlag.Input.PropertyKey.Value : Equatable in VariantThatFitsFlag()
{
  return MEMORY[0x263F8D510];
}

uint64_t _ViewInputs.animatedSize()()
{
  return _ViewInputs.animatedPosition()(CachedEnvironment.animatedSize(for:));
}

ValueMetadata *type metadata accessor for Material()
{
  return &type metadata for Material;
}

uint64_t storeEnumTagSinglePayload for PathDrawingStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef()
{
  return _CFObject.hashValue.getter();
}

void *assignWithCopy for ViewGeometry(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

uint64_t _ViewInputs.mapEnvironment<A>(_:)(void *a1)
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = _GraphInputs.mapEnvironment<A>(_:)(a1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v2;
}

uint64_t _GraphInputs.mapEnvironment<A>(_:)(void *a1)
{
  swift_beginAccess();
  uint64_t v2 = CachedEnvironment.attribute<A>(keyPath:)(a1);
  swift_endAccess();
  return v2;
}

uint64_t type metadata completion function for Pair()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t initializeWithCopy for DisplayList.Item(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  unint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  char v8 = *(unsigned char *)(a2 + 66);
  __int16 v9 = *(_WORD *)(a2 + 64);
  outlined copy of DisplayList.Item.Value(v5, v6);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 66) = v8;
  *(_WORD *)(a1 + 64) = v9;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  return a1;
}

uint64_t static VerticalAlignment.lastTextBaseline.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for lastTextBaseline, (uint64_t)&static VerticalAlignment.lastTextBaseline);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DynamicContainer.Info(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44);
}

BOOL DisplayList.Item.matchesTopLevelStructure(of:)(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 40);
  unint64_t v2 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(v1 + 40);
  unint64_t v4 = *(void *)(v1 + 48);
  switch(v4 >> 62)
  {
    case 1uLL:
      if (v2 >> 62 != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = *(void *)(v1 + 40);
      outlined copy of DisplayList.Effect(v5, v4, SBYTE4(v4));
      outlined copy of DisplayList.Item.Value(v5, v4);
      outlined copy of DisplayList.Item.Value(v3, v2);
      outlined copy of DisplayList.Effect(v5, v4, SBYTE4(v4));
      outlined copy of DisplayList.Effect(v3, v2, SBYTE4(v2));
      uint64_t EnumTag = AGTypeGetEnumTag();
      outlined consume of DisplayList.Effect(v20, v4, SBYTE4(v4));
      outlined copy of DisplayList.Effect(v3, v2, SBYTE4(v2));
      uint64_t v17 = AGTypeGetEnumTag();
      outlined consume of DisplayList.Effect(v3, v2, SBYTE4(v2));
      outlined consume of DisplayList.Item.Value(v5, v4);
      outlined consume of DisplayList.Item.Value(v3, v2);
      outlined consume of DisplayList.Effect(v3, v2, SBYTE4(v2));
      outlined consume of DisplayList.Effect(v5, v4, SBYTE4(v4));
      return EnumTag == v17;
    case 2uLL:
      if (v2 >> 62 != 2) {
        goto LABEL_27;
      }
      uint64_t v9 = *(void *)(v5 + 16);
      if (v9 != *(void *)(v3 + 16)) {
        goto LABEL_27;
      }
      if (!v9) {
        goto LABEL_11;
      }
      uint64_t v10 = (int32x4_t *)(v3 + 48);
      uint64_t v11 = (int32x4_t *)(v5 + 48);
      while ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v11[-1], v10[-1])), 0xFuLL))) & 1) != 0
           && v11->i32[0] == v10->i32[0])
      {
        uint64_t v10 = (int32x4_t *)((char *)v10 + 40);
        uint64_t v11 = (int32x4_t *)((char *)v11 + 40);
        if (!--v9)
        {
LABEL_11:
          outlined copy of DisplayList.Item.Value(*(void *)(v1 + 40), *(void *)(v1 + 48));
          outlined copy of DisplayList.Item.Value(v3, v2);
          outlined consume of DisplayList.Item.Value(v5, v4);
          uint64_t v12 = v3;
          unint64_t v13 = v2;
          goto LABEL_24;
        }
      }
LABEL_27:
      outlined copy of DisplayList.Item.Value(*(void *)(v1 + 40), *(void *)(v1 + 48));
      outlined copy of DisplayList.Item.Value(v3, v2);
      outlined consume of DisplayList.Item.Value(v5, v4);
      outlined consume of DisplayList.Item.Value(v3, v2);
      BOOL result = 0;
      break;
    case 3uLL:
      if (v2 >> 62 != 3
        || ((*(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16)) & 0xFFFFFF) != 0
        || v2 != 0xC000000000000000
        || (*(void *)(a1 + 56) | v3) != 0)
      {
        goto LABEL_27;
      }
      outlined consume of DisplayList.Item.Value(*(void *)(v1 + 40), *(void *)(v1 + 48));
      uint64_t v12 = 0;
      unint64_t v13 = 0xC000000000000000;
LABEL_24:
      outlined consume of DisplayList.Item.Value(v12, v13);
      BOOL result = 1;
      break;
    default:
      if (v2 >> 62) {
        goto LABEL_27;
      }
      unint64_t v19 = *(void *)(v1 + 40);
      outlined copy of DisplayList.Item.Value(v5, v4);
      outlined copy of DisplayList.Item.Value(v5, v4);
      outlined copy of DisplayList.Item.Value(v3, v2);
      outlined copy of DisplayList.Item.Value(v5, v4);
      outlined copy of DisplayList.Item.Value(v3, v2);
      outlined copy of DisplayList.Item.Value(v5, v4);
      outlined copy of DisplayList.Item.Value(v3, v2);
      uint64_t v6 = AGTypeGetEnumTag();
      outlined consume of DisplayList.Content.Value(v19);
      outlined copy of DisplayList.Content.Value(v3);
      uint64_t v7 = AGTypeGetEnumTag();
      outlined consume of DisplayList.Content.Value(v3);
      outlined consume of DisplayList.Item.Value(v5, v4);
      outlined consume of DisplayList.Item.Value(v3, v2);
      outlined consume of DisplayList.Item.Value(v3, v2);
      outlined consume of DisplayList.Item.Value(v5, v4);
      outlined consume of DisplayList.Item.Value(v3, v2);
      outlined consume of DisplayList.Item.Value(v5, v4);
      BOOL result = v6 == v7;
      break;
  }
  return result;
}

uint64_t DisplayList.ViewUpdater.update(container:from:parentState:)(unint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t result = *a2;
  uint64_t v5 = *(void *)(*a2 + 16);
  if (v5)
  {
    uint64_t v6 = v3;
    uint64_t v7 = (_DWORD *)(swift_bridgeObjectRetain() + 100);
    do
    {
      uint64_t v8 = *(void *)(v7 - 9);
      uint64_t v9 = *(void *)(v7 - 7);
      unint64_t v10 = *(void *)(v7 - 5);
      uint64_t v11 = *(void *)(v7 - 3);
      char v12 = *((unsigned char *)v7 - 2);
      __int16 v13 = *((_WORD *)v7 - 2);
      int v14 = *v7;
      long long v15 = *(_OWORD *)(v7 - 13);
      long long v38 = *(_OWORD *)(v7 - 17);
      long long v39 = v15;
      uint64_t v40 = v8;
      uint64_t v41 = v9;
      unint64_t v42 = v10;
      uint64_t v43 = v11;
      char v45 = v12;
      __int16 v44 = v13;
      int v46 = v14;
      swift_beginAccess();
      uint64_t v28 = v5;
      if (v14)
      {
        int v25 = *(_DWORD *)(v6 + 108);
        int v26 = *(_DWORD *)(v6 + 104);
        uint64_t v16 = *(void *)(v6 + 112);
        char v27 = *(unsigned char *)(v6 + 120);
        char v17 = 1;
        *(_DWORD *)(v6 + 104) = v14;
        *(_DWORD *)(v6 + 108) = 0;
      }
      else
      {
        char v17 = 0;
        int v25 = *(_DWORD *)(v6 + 108) + 1;
        int v26 = *(_DWORD *)(v6 + 104);
        *(_DWORD *)(v6 + 108) = v25;
        uint64_t v16 = *(void *)(v6 + 112);
        char v27 = *(unsigned char *)(v6 + 120);
      }
      *(unsigned char *)(v6 + 120) = v17;
      outlined copy of DisplayList.Item.Value(v9, v10);
      outlined copy of DisplayList.Item.Value(v9, v10);
      DisplayList.ViewUpdater.ViewCache.prepare(item:parentState:)((uint64_t)&v38, (uint64_t)a3, (uint64_t *)&v37);
      swift_endAccess();
      double v18 = v37;
      if (v37 >= *(double *)(a1 + 24)) {
        double v18 = *(double *)(a1 + 24);
      }
      *(double *)(a1 + 24) = v18;
      uint64_t v19 = v41;
      unint64_t v20 = v42;
      v29[0] = v38;
      v29[1] = v39;
      uint64_t v30 = v40;
      uint64_t v31 = v41;
      unint64_t v32 = v42;
      uint64_t v33 = v43;
      char v35 = v45;
      __int16 v34 = v44;
      int v36 = v46;
      outlined copy of DisplayList.Item.Value(v41, v42);
      DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(a1, (uint64_t)v29, a3);
      outlined consume of DisplayList.Item.Value(v9, v10);
      outlined consume of DisplayList.Item.Value(v19, v20);
      outlined consume of DisplayList.Item.Value(v19, v20);
      char v21 = *(unsigned char *)(v6 + 120);
      if ((v21 & 0xC) != 0)
      {
        uint64_t v22 = *(void *)(v6 + 104);
        if ((*(unsigned char *)(v6 + 120) & 4) != 0) {
          *(void *)(v6 + 104) = *(void *)(v6 + 112);
        }
        if ((v21 & 8) != 0) {
          *(void *)(v6 + 112) = v22;
        }
      }
      if (v21)
      {
        *(_DWORD *)(v6 + 104) = v26;
        *(_DWORD *)(v6 + 108) = v25;
      }
      if ((v21 & 2) != 0) {
        *(void *)(v6 + 112) = v16;
      }
      v7 += 18;
      *(unsigned char *)(v6 + 120) = v27;
      --v5;
    }
    while (v28 != 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of DisplayList.Item.Value(uint64_t result, unint64_t a2)
{
  unint64_t v3 = a2 >> 62;
  if (a2 >> 62 != 2)
  {
    if (v3 != 1)
    {
      if (!v3)
      {
        return outlined copy of DisplayList.Content.Value(result);
      }
      return result;
    }
    outlined copy of DisplayList.Effect(result, a2, SBYTE4(a2));
  }
  return swift_bridgeObjectRetain();
}

uint64_t outlined copy of DisplayList.Effect(uint64_t result, char a2, char a3)
{
  switch(a3)
  {
    case 1:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      uint64_t result = swift_retain();
      break;
    case 5:
      uint64_t result = outlined copy of GraphicsBlendMode(result, a2 & 1);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined consume of DisplayList.Item.Value(uint64_t result, unint64_t a2)
{
  unint64_t v3 = a2 >> 62;
  if (a2 >> 62 != 2)
  {
    if (v3 != 1)
    {
      if (!v3)
      {
        return outlined consume of DisplayList.Content.Value(result);
      }
      return result;
    }
    outlined consume of DisplayList.Effect(result, a2, SBYTE4(a2));
  }
  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of DisplayList.Effect(uint64_t result, char a2, char a3)
{
  switch(a3)
  {
    case 1:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      uint64_t result = swift_release();
      break;
    case 5:
      uint64_t result = outlined consume of GraphicsBlendMode(result, a2 & 1);
      break;
    default:
      return result;
  }
  return result;
}

unint64_t outlined consume of DisplayList.Content.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t outlined copy of DisplayList.Content.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
      uint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(unint64_t a1, uint64_t a2, long long *a3)
{
  unint64_t v99 = a1;
  uint64_t v152 = *MEMORY[0x263EF8340];
  _s7SwiftUI11DisplayListV10ArchiveIDsVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (void (*)(uint64_t))type metadata accessor for DisplayList.ArchiveIDs);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v97 = (uint64_t)v92 - v7;
  long long v8 = *(_OWORD *)a2;
  long long v136 = *(_OWORD *)(a2 + 16);
  long long v9 = a3[1];
  v142[0] = *a3;
  v142[1] = v9;
  long long v10 = a3[3];
  long long v11 = a3[5];
  long long v145 = a3[4];
  long long v146 = v11;
  long long v12 = a3[3];
  long long v13 = *a3;
  long long v14 = a3[1];
  long long v143 = a3[2];
  long long v144 = v12;
  long long v15 = a3[9];
  long long v151 = a3[10];
  long long v16 = a3[7];
  long long v17 = a3[9];
  long long v149 = a3[8];
  long long v150 = v17;
  long long v18 = a3[5];
  long long v19 = a3[7];
  long long v147 = a3[6];
  long long v148 = v19;
  long long v132 = v149;
  long long v133 = v15;
  long long v134 = a3[10];
  long long v135 = v8;
  long long v128 = v145;
  long long v129 = v18;
  long long v130 = v147;
  long long v131 = v16;
  uint64_t v20 = *(void *)(a2 + 40);
  unint64_t v21 = *(void *)(a2 + 48);
  uint64_t v22 = *(void *)(a2 + 56);
  unsigned __int8 v23 = *(unsigned char *)(a2 + 66);
  unsigned __int16 v24 = *(_WORD *)(a2 + 64);
  int v25 = *(_DWORD *)(a2 + 68);
  *(void *)&long long v137 = *(void *)(a2 + 32);
  *((void *)&v137 + 1) = v20;
  *(void *)&long long v138 = v21;
  *((void *)&v138 + 1) = v22;
  unsigned __int8 v140 = v23;
  unsigned __int16 v139 = v24;
  int v141 = v25;
  long long v124 = v13;
  long long v125 = v14;
  long long v126 = v143;
  long long v127 = v10;
  v98 = (uint64_t *)(v3 + 32);
  swift_beginAccess();
  char v26 = *(unsigned char *)(v3 + 120);
  uint64_t v100 = v3;
  long long v27 = *(_OWORD *)(v3 + 104);
  v93 = (uint64_t *)(v3 + 104);
  v114[0] = v27;
  LOBYTE(v114[1]) = v26;
  outlined copy of DisplayList.Item.Value(v20, v21);
  outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v142);
  char v28 = specialized static DisplayList.ViewUpdater.Model.merge(item:index:into:)((uint64_t)&v135, (uint64_t)v114, (uint64_t)&v124);
  if ((v28 & 4) == 0)
  {
    uint64_t v29 = *((void *)&v137 + 1);
    uint64_t v31 = *((void *)&v138 + 1);
    unint64_t v30 = v138;
    int v32 = v140;
    int v33 = v139;
    v114[0] = v135;
    v114[1] = v136;
    long long v115 = v137;
    long long v116 = v138;
    BYTE2(v117) = v140;
    LOWORD(v117) = v139;
    DWORD1(v117) = v141;
    DisplayList.Item.features.getter((__int16 *)v110);
    if ((v110[0] & 1) == 0)
    {
      int v34 = v33 | (v32 << 16);
      if (v30 >> 62 == 1)
      {
        outlined copy of DisplayList.Item.Value(v29, v30);
        outlined consume of DisplayList.Effect(v29, v30, SBYTE4(v30));
        *(void *)&v110[0] = v31;
        WORD4(v110[0]) = v34;
        BYTE10(v110[0]) = BYTE2(v34);
        DisplayList.Index.skip(list:)((uint64_t *)v110);
        long long v121 = v132;
        long long v122 = v133;
        long long v123 = v134;
        long long v117 = v128;
        long long v118 = v129;
        long long v119 = v130;
        long long v120 = v131;
        v114[0] = v124;
        v114[1] = v125;
        long long v115 = v126;
        long long v116 = v127;
        outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v114);
        swift_bridgeObjectRelease();
      }
      else
      {
        long long v121 = v132;
        long long v122 = v133;
        long long v123 = v134;
        long long v117 = v128;
        long long v118 = v129;
        long long v119 = v130;
        long long v120 = v131;
        v114[0] = v124;
        v114[1] = v125;
        long long v115 = v126;
        long long v116 = v127;
        outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v114);
      }
      uint64_t v82 = v29;
      unint64_t v83 = v30;
      return outlined consume of DisplayList.Item.Value(v82, v83);
    }
  }
  if ((v28 & 2) != 0)
  {
    uint64_t v39 = *((void *)&v137 + 1);
    unint64_t v40 = v138;
    int v95 = v139 | (v140 << 16);
    v114[0] = v135;
    v114[1] = v136;
    long long v115 = v137;
    long long v116 = v138;
    BYTE2(v117) = v140;
    LOWORD(v117) = v139;
    DWORD1(v117) = v141;
    unint64_t v41 = v99;
    uint64_t v96 = *(void *)(v99 + 16);
    uint64_t v42 = *(void *)(v100 + 32);
    *(void *)(swift_allocObject() + 16) = v42;
    *(void *)(swift_allocObject() + 16) = v42;
    uint64_t v43 = v98;
    swift_beginAccess();
    outlined copy of DisplayList.Item.Value(v39, v40);
    DisplayList.ViewUpdater.ViewCache.update(item:state:tag:in:makeView:updateView:)((uint64_t *)v114, (uint64_t)a3, 1, v96, (void (*)(long long *__return_ptr, id *, long long *, uint64_t))partial apply for implicit closure #3 in implicit closure #2 in DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:), (void (*)(id *, long long *, long long *, uint64_t))partial apply for implicit closure #5 in implicit closure #4 in DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:), (uint64_t)v106);
    swift_endAccess();
    outlined consume of DisplayList.Item.Value(*((uint64_t *)&v115 + 1), v116);
    uint64_t v44 = v100;
    swift_release();
    swift_release();
    *(unsigned char *)(v44 + 184) &= v108 & 1;
    double v45 = v109;
    uint64_t v46 = *(void *)(v41 + 32);
    CoreViewAddSubview(*(_DWORD *)(v41 + 8) & 3, *(void **)v41, v106[0], v46);
    *(void *)(v41 + 32) = v46 + 1;
    double v47 = *(double *)(v41 + 24);
    if (v45 < v47) {
      double v47 = v45;
    }
    *(double *)(v41 + 24) = v47;
    if ((v107 & 1) != 0 || (*(unsigned char *)(v44 + 185) & 1) == 0)
    {
      uint64_t v52 = *v43;
      v53 = v106[1];
      v54 = v106[2];
      uint64_t v55 = one-time initialization token for infinity;
      swift_unknownObjectRetain();
      if (v55 != -1) {
        swift_once();
      }
      v102 = v53;
      *(void *)&long long v103 = v52;
      *((void *)&v103 + 1) = v54;
      double v104 = *(double *)&static Time.infinity;
      uint64_t v105 = 0;
      if (v28)
      {
        swift_beginAccess();
        uint64_t v84 = *((void *)&v137 + 1);
        unint64_t v85 = v138;
        v114[0] = v135;
        v114[1] = v136;
        long long v115 = v137;
        long long v116 = v138;
        BYTE2(v117) = v140;
        LOWORD(v117) = v139;
        DWORD1(v117) = v141;
        outlined copy of DisplayList.Item.Value(*((uint64_t *)&v137 + 1), v138);
        DisplayList.ViewUpdater.updateItemView(container:from:localState:)((uint64_t)&v102, v114, (uint64_t)&v124);
        uint64_t v43 = v98;
        outlined consume of DisplayList.Item.Value(v84, v85);
      }
      else
      {
        swift_beginAccess();
        uint64_t v56 = v138;
        if ((unint64_t)v138 >> 62 == 1)
        {
          uint64_t v57 = *((void *)&v138 + 1);
          uint64_t v58 = *((void *)&v137 + 1);
          outlined copy of DisplayList.Effect(*((uint64_t *)&v137 + 1), v138, SBYTE4(v138));
          swift_bridgeObjectRetain();
          outlined consume of DisplayList.Effect(v58, v56, SBYTE4(v56));
          uint64_t v59 = *(void *)(v57 + 16);
          if (v59)
          {
            swift_bridgeObjectRetain();
            v92[1] = v57;
            v60 = (_DWORD *)(v57 + 100);
            do
            {
              uint64_t v61 = *(void *)(v60 - 9);
              uint64_t v62 = *(void *)(v60 - 7);
              unint64_t v63 = *(void *)(v60 - 5);
              uint64_t v64 = *(void *)(v60 - 3);
              char v65 = *((unsigned char *)v60 - 2);
              __int16 v66 = *((_WORD *)v60 - 2);
              int v67 = *v60;
              v114[0] = *(_OWORD *)(v60 - 17);
              v114[1] = *(_OWORD *)(v60 - 13);
              *(void *)&long long v115 = v61;
              *((void *)&v115 + 1) = v62;
              unint64_t v99 = v63;
              *(void *)&long long v116 = v63;
              *((void *)&v116 + 1) = v64;
              BYTE2(v117) = v65;
              LOWORD(v117) = v66;
              DWORD1(v117) = v67;
              swift_beginAccess();
              if (v67)
              {
                int v68 = 0;
                uint64_t v69 = v100;
                int v70 = *(_DWORD *)(v100 + 104);
                int v94 = *(_DWORD *)(v100 + 108);
                int v95 = v70;
                uint64_t v71 = *(void *)(v100 + 112);
                LODWORD(v96) = *(unsigned __int8 *)(v100 + 120);
                char v72 = 1;
                *(_DWORD *)(v100 + 104) = v67;
              }
              else
              {
                char v72 = 0;
                uint64_t v69 = v100;
                int v73 = *(_DWORD *)(v100 + 108);
                int v95 = *(_DWORD *)(v100 + 104);
                int v68 = v73 + 1;
                uint64_t v71 = *(void *)(v100 + 112);
                LODWORD(v96) = *(unsigned __int8 *)(v100 + 120);
                int v94 = v68;
              }
              *(_DWORD *)(v69 + 108) = v68;
              *(unsigned char *)(v69 + 120) = v72;
              unint64_t v74 = v99;
              outlined copy of DisplayList.Item.Value(v62, v99);
              uint64_t v97 = v62;
              outlined copy of DisplayList.Item.Value(v62, v74);
              DisplayList.ViewUpdater.ViewCache.prepare(item:parentState:)((uint64_t)v114, (uint64_t)&v124, (uint64_t *)&v101);
              swift_endAccess();
              double v75 = v101;
              if (v101 >= v104) {
                double v75 = v104;
              }
              double v104 = v75;
              uint64_t v76 = *((void *)&v115 + 1);
              unint64_t v77 = v116;
              v110[0] = v114[0];
              v110[1] = v114[1];
              v110[2] = v115;
              v110[3] = v116;
              char v112 = BYTE2(v117);
              __int16 v111 = v117;
              int v113 = DWORD1(v117);
              outlined copy of DisplayList.Item.Value(*((uint64_t *)&v115 + 1), v116);
              DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(&v102, v110, &v124);
              outlined consume of DisplayList.Item.Value(v76, v77);
              uint64_t v78 = v100;
              char v79 = *(unsigned char *)(v100 + 120);
              if ((v79 & 0xC) != 0)
              {
                uint64_t v80 = *v93;
                if ((*(unsigned char *)(v100 + 120) & 4) != 0) {
                  *(void *)(v100 + 104) = *(void *)(v100 + 112);
                }
                if ((v79 & 8) != 0) {
                  *(void *)(v78 + 112) = v80;
                }
              }
              if (v79)
              {
                int v81 = v94;
                *(_DWORD *)(v78 + 104) = v95;
                *(_DWORD *)(v78 + 108) = v81;
              }
              if ((v79 & 2) != 0) {
                *(void *)(v78 + 112) = v71;
              }
              v60 += 18;
              *(unsigned char *)(v78 + 120) = v96;
              outlined consume of DisplayList.Item.Value(v97, v99);
              outlined consume of DisplayList.Item.Value(v76, v77);
              --v59;
              uint64_t v43 = v98;
            }
            while (v59);
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
        }
      }
      double v86 = v104;
      *(void *)&v114[0] = v102;
      *(long long *)((char *)v114 + 8) = v103;
      *((double *)&v114[1] + 1) = v104;
      *(void *)&long long v115 = v105;
      swift_beginAccess();
      swift_unknownObjectRetain();
      DisplayList.ViewUpdater.Container.removeRemaining(viewCache:)((uint64_t)v43);
      swift_endAccess();
      swift_unknownObjectRelease();
      *(double *)v110 = v86;
      swift_beginAccess();
      DisplayList.ViewUpdater.ViewCache.setNextUpdate(_:in:)((unint64_t)v110, (uint64_t)v106);
      swift_endAccess();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      long long v121 = v132;
      long long v122 = v133;
      long long v123 = v134;
      long long v117 = v128;
      long long v118 = v129;
      long long v119 = v130;
      long long v120 = v131;
      v114[0] = v124;
      v114[1] = v125;
      long long v115 = v126;
      long long v116 = v127;
    }
    else
    {
      uint64_t v48 = v138;
      if ((unint64_t)v138 >> 62 == 1)
      {
        uint64_t v49 = *((void *)&v137 + 1);
        *(void *)&v114[0] = *((void *)&v138 + 1);
        WORD4(v114[0]) = v139;
        BYTE10(v114[0]) = v140;
        outlined copy of DisplayList.Effect(*((uint64_t *)&v137 + 1), v138, SBYTE4(v138));
        swift_bridgeObjectRetain();
        DisplayList.Index.skip(list:)((uint64_t *)v114);
        swift_bridgeObjectRelease();
        swift_beginAccess();
        if (BYTE4(v48) == 1)
        {
          uint64_t v88 = swift_projectBox();
          uint64_t v89 = v97;
          outlined init with copy of DisplayList.ArchiveIDs?(v88, v97);
          uint64_t v90 = type metadata accessor for DisplayList.ArchiveIDs();
          Swift::Bool v91 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 48))(v89, 1, v90) != 1;
          DisplayList.Index.updateArchive(entering:)(v91);
          _s7SwiftUI11DisplayListV10ArchiveIDsVSgWOhTm_1(v89, (unint64_t *)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (void (*)(uint64_t))type metadata accessor for DisplayList.ArchiveIDs);
        }
        else if (BYTE4(v48) == 7)
        {
          __int16 v50 = *(_WORD *)(v49 + 24);
          char v51 = *(unsigned char *)(v49 + 26);
          *(void *)&v110[0] = *(void *)(v49 + 16);
          WORD4(v110[0]) = v50;
          BYTE10(v110[0]) = v51;
          DisplayList.Index.skip(list:)((uint64_t *)v110);
        }
        swift_endAccess();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        long long v121 = v132;
        long long v122 = v133;
        long long v123 = v134;
        long long v117 = v128;
        long long v118 = v129;
        long long v119 = v130;
        long long v120 = v131;
        v114[0] = v124;
        v114[1] = v125;
        long long v115 = v126;
        long long v116 = v127;
        outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v114);
        outlined consume of DisplayList.Effect(v49, v48, SBYTE4(v48));
        goto LABEL_48;
      }
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      long long v121 = v132;
      long long v122 = v133;
      long long v123 = v134;
      long long v117 = v128;
      long long v118 = v129;
      long long v119 = v130;
      long long v120 = v131;
      v114[0] = v124;
      v114[1] = v125;
      long long v115 = v126;
      long long v116 = v127;
    }
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v114);
LABEL_48:
    uint64_t v82 = *((void *)&v137 + 1);
    unint64_t v83 = v138;
    return outlined consume of DisplayList.Item.Value(v82, v83);
  }
  if (v28)
  {
    swift_beginAccess();
    uint64_t v35 = *((void *)&v137 + 1);
    unint64_t v36 = v138;
    v114[0] = v135;
    v114[1] = v136;
    long long v115 = v137;
    long long v116 = v138;
    BYTE2(v117) = v140;
    LOWORD(v117) = v139;
    DWORD1(v117) = v141;
    outlined copy of DisplayList.Item.Value(*((uint64_t *)&v137 + 1), v138);
    DisplayList.ViewUpdater.updateItemView(container:from:localState:)(v99, v114, (uint64_t)&v124);
    outlined consume of DisplayList.Item.Value(v35, v36);
  }
  else
  {
    swift_beginAccess();
    uint64_t v35 = *((void *)&v137 + 1);
    uint64_t v37 = *((void *)&v138 + 1);
    unint64_t v36 = v138;
    int v38 = v139 | (v140 << 16);
    if ((unint64_t)v138 >> 62 == 1)
    {
      outlined copy of DisplayList.Effect(*((uint64_t *)&v137 + 1), v138, SBYTE4(v138));
      swift_bridgeObjectRetain();
      outlined consume of DisplayList.Effect(v35, v36, SBYTE4(v36));
      *(void *)&v114[0] = v37;
      WORD4(v114[0]) = v38;
      BYTE10(v114[0]) = BYTE2(v38);
      DisplayList.ViewUpdater.update(container:from:parentState:)(v99, v114, &v124);
      swift_bridgeObjectRelease();
    }
  }
  long long v121 = v132;
  long long v122 = v133;
  long long v123 = v134;
  long long v117 = v128;
  long long v118 = v129;
  long long v119 = v130;
  long long v120 = v131;
  v114[0] = v124;
  v114[1] = v125;
  long long v115 = v126;
  long long v116 = v127;
  outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v114);
  uint64_t v82 = v35;
  unint64_t v83 = v36;
  return outlined consume of DisplayList.Item.Value(v82, v83);
}

uint64_t outlined release of DisplayList.ViewUpdater.Model.State(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of GraphicsBlendMode(uint64_t a1, char a2)
{
  if (a2) {
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t outlined retain of DisplayList.ViewUpdater.Model.State(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of GraphicsBlendMode(uint64_t a1, char a2)
{
  if (a2) {
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t specialized static DisplayList.ViewUpdater.Model.merge(item:index:into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t v6 = *(void *)(a1 + 48);
  CGFloat v7 = *(double *)(a1 + 56);
  int v8 = *(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16);
  int v150 = *(_DWORD *)(a2 + 8);
  if (v6 >> 62 == 2)
  {
    uint64_t v9 = a3 + 112;
    if (*(void *)(*(void *)(a3 + 112) + 16))
    {
      specialized Array._customRemoveLast()((uint64_t)&v161);
      if (BYTE4(v161.c))
      {
        specialized Array.remove(at:)(*(void *)(*(void *)v9 + 16) - 1, (uint64_t)&v179);
        int32x4_t v10 = v179;
        int c_low = v180;
        uint64_t v12 = *(void *)(v5 + 16);
        if (v12) {
          goto LABEL_5;
        }
      }
      else
      {
        int c_low = LODWORD(v161.c);
        int32x4_t v10 = *(int32x4_t *)&v161.a;
        v179.i32[0] = LODWORD(v161.a);
        uint64_t v12 = *(void *)(v5 + 16);
        if (v12)
        {
LABEL_5:
          long long v13 = (unsigned __int8 *)(v5 + 66);
          double v14 = MEMORY[0x263F8EE78];
          do
          {
            if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*(int32x4_t *)(v13 - 34), v10)), 0xFuLL))) & 1) != 0
              && *(_DWORD *)(v13 - 18) == c_low)
            {
              double v14 = *(double *)(v13 - 10);
              int v15 = *((unsigned __int16 *)v13 - 1);
              int v16 = *v13;
              swift_bridgeObjectRetain();
              goto LABEL_13;
            }
            v13 += 40;
            --v12;
          }
          while (v12);
          int v15 = 0;
          int v16 = 0;
          goto LABEL_13;
        }
      }
    }
    int v15 = 0;
    int v16 = 0;
    double v14 = MEMORY[0x263F8EE78];
LABEL_13:
    outlined consume of DisplayList.Item.Value(v5, v6);
    uint64_t v5 = 0;
    *(_OWORD *)(a1 + 40) = xmmword_2461B9DD0;
    int v8 = v15 | (v16 << 16);
    *(double *)(a1 + 56) = v14;
    *(unsigned char *)(a1 + 66) = v16;
    *(_WORD *)(a1 + 64) = v15;
    unint64_t v6 = 0x4000001300000000;
    CGFloat v7 = v14;
    uint64_t v3 = a3;
  }
  float v17 = *(float *)(v3 + 8);
  if (v17 != 1.0)
  {
    uint64_t v22 = *(void *)(v3 + 16);
    char v23 = *(unsigned char *)(v3 + 24);
    outlined copy of GraphicsBlendMode(v22, v23);
    if (one-time initialization token for normal != -1) {
      swift_once();
    }
    uint64_t v24 = static GraphicsBlendMode.normal;
    char v25 = byte_26B0EB4A0;
    if (v23)
    {
      if (byte_26B0EB4A0)
      {
        swift_unknownObjectRetain();
        outlined consume of GraphicsBlendMode(v22, 1);
        outlined consume of GraphicsBlendMode(v24, 1);
        uint64_t v3 = a3;
        if (v22 != v24) {
          goto LABEL_32;
        }
        goto LABEL_15;
      }
      swift_unknownObjectRetain();
    }
    else if ((byte_26B0EB4A0 & 1) == 0)
    {
      outlined consume of GraphicsBlendMode(v22, 0);
      outlined consume of GraphicsBlendMode(v24, 0);
      uint64_t v3 = a3;
      if (v22 != v24) {
        goto LABEL_32;
      }
      goto LABEL_15;
    }
    outlined copy of GraphicsBlendMode(v24, v25);
    outlined consume of GraphicsBlendMode(v22, v23);
    outlined consume of GraphicsBlendMode(v24, v25);
    outlined consume of GraphicsBlendMode(v22, v23);
    uint64_t v3 = a3;
    goto LABEL_32;
  }
LABEL_15:
  if ((*(unsigned char *)(v3 + 105) & 1) == 0)
  {
    uint64_t v18 = *(void *)(v3 + 88);
    uint64_t v19 = *(void *)(v18 + 16);
    if (!v19) {
      goto LABEL_40;
    }
    uint64_t v20 = (unsigned __int8 *)(v18 + 148);
    while (1)
    {
      int v21 = *v20;
      v20 += 120;
      if (v21 != 5) {
        break;
      }
      if (!--v19) {
        goto LABEL_40;
      }
    }
  }
LABEL_32:
  if (v6 >> 62 != 1) {
    goto LABEL_40;
  }
  if (BYTE4(v6) != 9)
  {
    outlined copy of DisplayList.Effect(v5, v6, SBYTE4(v6));
    swift_bridgeObjectRetain();
    uint64_t v35 = v5;
    char v36 = v6;
    unint64_t v37 = HIDWORD(v6);
LABEL_38:
    outlined consume of DisplayList.Effect(v35, v36, v37);
    goto LABEL_39;
  }
  if (*(unsigned char *)(v5 + 132) != 12)
  {
    outlined copy of DisplayList.Item.Value(v5, v6);
    uint64_t v35 = v5;
    char v36 = v6;
    LOBYTE(v37) = 9;
    goto LABEL_38;
  }
  uint64_t v27 = *(void *)(v5 + 80);
  uint64_t v26 = *(void *)(v5 + 88);
  uint64_t v29 = *(void *)(v5 + 64);
  uint64_t v28 = *(void *)(v5 + 72);
  uint64_t v31 = *(void *)(v5 + 48);
  uint64_t v30 = *(void *)(v5 + 56);
  uint64_t v33 = *(void *)(v5 + 32);
  uint64_t v32 = *(void *)(v5 + 40);
  uint64_t v34 = *(void *)(v5 + 24);
  v179.i64[0] = *(void *)(v5 + 16);
  v179.i64[1] = v34;
  uint64_t v180 = v33;
  uint64_t v181 = v32;
  uint64_t v182 = v31;
  uint64_t v183 = v30;
  uint64_t v184 = v29;
  uint64_t v185 = v28;
  uint64_t v186 = v27;
  uint64_t v3 = a3;
  uint64_t v187 = v26;
  outlined copy of DisplayList.Item.Value(v5, v6);
  outlined consume of DisplayList.Effect(v5, v6, 9);
  v161.a = v7;
  LOWORD(v161.b) = v8;
  BYTE2(v161.b) = BYTE2(v8);
  DisplayList.Item.rewriteVibrancyFilterAsBackdrop(matrix:list:)((long long *)v179.i8, (uint64_t *)&v161);
LABEL_39:
  swift_bridgeObjectRelease();
LABEL_40:
  CGFloat v38 = *(double *)a1;
  CGFloat v39 = *(double *)(a1 + 8);
  CGFloat v40 = *(double *)(a1 + 16);
  CGFloat v41 = *(double *)(a1 + 24);
  CGFloat v42 = *(double *)(a1 + 32);
  CGFloat v43 = *(double *)(a1 + 40);
  unint64_t v45 = *(void *)(a1 + 48);
  uint64_t v44 = *(void *)(a1 + 56);
  int v46 = *(unsigned __int8 *)(a1 + 66);
  int v47 = *(unsigned __int16 *)(a1 + 64);
  int v48 = v47 | (v46 << 16);
  int v49 = *(_DWORD *)(a1 + 68);
  v161.a = *(CGFloat *)a1;
  v161.b = v39;
  v161.c = v40;
  v161.d = v41;
  v161.tx = v42;
  v161.ty = v43;
  *(void *)&long long v162 = v45;
  *((void *)&v162 + 1) = v44;
  BYTE2(v163) = v46;
  LOWORD(v163) = v47;
  DWORD1(v163) = v49;
  if (DisplayList.Item.discardContainingClips(state:)(v3)) {
    uint64_t v50 = 4;
  }
  else {
    uint64_t v50 = 0;
  }
  uint64_t v51 = *(void *)(v3 + 80);
  unint64_t v160 = v45;
  if (*(void *)(v51 + 16))
  {
    v161.a = v38;
    v161.b = v39;
    v161.c = v40;
    v161.d = v41;
    v161.tx = v42;
    v161.ty = v43;
    *(void *)&long long v162 = v45;
    *((void *)&v162 + 1) = v44;
    LOWORD(v163) = v48;
    BYTE2(v163) = BYTE2(v48);
    DWORD1(v163) = v49;
    if (specialized DisplayList.Item.canMergeWithClipMask(state:)())
    {
      CGFloat v52 = *(double *)a3;
      CGFloat v53 = *(double *)(a3 + 16);
      uint64_t v54 = *(void *)(a3 + 88);
      uint64_t v55 = *(void *)(a3 + 96);
      char v56 = *(unsigned char *)(a3 + 104);
      char v57 = *(unsigned char *)(a3 + 105);
      char v58 = *(unsigned char *)(a3 + 106);
      int v59 = *(_DWORD *)(a3 + 108);
      uint64_t v60 = *(void *)(a3 + 112);
      uint64_t v61 = *(void *)(a3 + 168);
      LOBYTE(t2.a) = *(unsigned char *)(a3 + 24);
      v161.a = v52;
      *(float *)&v161.b = v17;
      v161.c = v53;
      LOBYTE(v161.d) = LOBYTE(t2.a);
      long long v62 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)&v161.tx = *(_OWORD *)(a3 + 32);
      long long v162 = v62;
      long long v163 = *(_OWORD *)(a3 + 64);
      uint64_t v164 = v51;
      uint64_t v165 = v54;
      uint64_t v166 = v55;
      LOBYTE(v167) = v56;
      BYTE1(v167) = v57;
      BYTE2(v167) = v58;
      HIDWORD(v167) = v59;
      uint64_t v168 = v60;
      long long v169 = *(_OWORD *)(a3 + 120);
      long long v170 = *(_OWORD *)(a3 + 136);
      long long v171 = *(_OWORD *)(a3 + 152);
      uint64_t v172 = v61;
      DisplayList.ViewUpdater.Model.State.clipRect()((SwiftUI::FixedRoundedRect_optional *)v177);
      if (v177[48] != 2)
      {
        v161.a = v38;
        v161.b = v39;
        v161.c = v40;
        v161.d = v41;
        v161.tx = v42;
        v161.ty = v43;
        CGFloat v63 = v43;
        *(void *)&long long v162 = v45;
        *((void *)&v162 + 1) = v44;
        BYTE2(v163) = BYTE2(v48);
        LOWORD(v163) = v48;
        DWORD1(v163) = v49;
        v177[48] &= 1u;
        if ((DisplayList.Item.canMergeWithClipRect(_:state:)((CGRect *)v177) & 1) == 0) {
          uint64_t v50 = v50 | 2;
        }
LABEL_52:
        uint64_t v64 = a3;
        if ((v50 & 2) != 0) {
          goto LABEL_57;
        }
        goto LABEL_53;
      }
    }
    else
    {
      uint64_t v50 = v50 | 2;
    }
    CGFloat v63 = v43;
    goto LABEL_52;
  }
  CGFloat v63 = v43;
  uint64_t v64 = a3;
LABEL_53:
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(v64 + 32), (float64x2_t)xmmword_2461BCA80), (int32x4_t)vceqq_f64(*(float64x2_t *)(v64 + 48), (float64x2_t)xmmword_2461C55F0))))))
  {
    v161.a = v38;
    v161.b = v39;
    v161.c = v40;
    v161.d = v41;
    v161.tx = v42;
    v161.ty = v63;
    *(void *)&long long v162 = v45;
    *((void *)&v162 + 1) = v44;
    LOWORD(v163) = v48;
    BYTE2(v163) = BYTE2(v48);
    DWORD1(v163) = v49;
    if (DisplayList.Item.canMergeWithTransform()()) {
      uint64_t v50 = v50;
    }
    else {
      uint64_t v50 = v50 | 2;
    }
  }
LABEL_57:
  if ((v50 & 2) == 0 && (*(void *)(v64 + 96) || *(void *)(*(void *)(v64 + 88) + 16)))
  {
    v161.a = v38;
    v161.b = v39;
    v161.c = v40;
    v161.d = v41;
    v161.tx = v42;
    v161.ty = v63;
    *(void *)&long long v162 = v45;
    *((void *)&v162 + 1) = v44;
    LOWORD(v163) = v48;
    BYTE2(v163) = BYTE2(v48);
    DWORD1(v163) = v49;
    if (DisplayList.Item.canInheritShadowOrFilters.getter()) {
      uint64_t v50 = v50;
    }
    else {
      uint64_t v50 = v50 | 2;
    }
  }
  unint64_t v65 = v45 >> 62;
  if ((v50 & 2) != 0) {
    goto LABEL_71;
  }
  if ((*(unsigned char *)(v64 + 104) & 2) != 0)
  {
    switch(v65)
    {
      case 1uLL:
        outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v45, SBYTE4(v45));
        swift_bridgeObjectRetain();
        outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v45, SBYTE4(v45));
        if (BYTE4(v45) != 3)
        {
          outlined consume of DisplayList.Effect(*(uint64_t *)&v63, v45, SBYTE4(v45));
          outlined consume of DisplayList.Item.Value(*(uint64_t *)&v63, v45);
          uint64_t v64 = a3;
          goto LABEL_72;
        }
        outlined consume of DisplayList.Effect(*(uint64_t *)&v63, v45, 3);
        outlined consume of DisplayList.Item.Value(*(uint64_t *)&v63, v45);
        uint64_t v64 = a3;
LABEL_70:
        uint64_t v50 = v50 | 2;
        break;
      case 2uLL:
LABEL_147:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      case 3uLL:
        outlined consume of DisplayList.Item.Value(*(uint64_t *)&v63, v45);
        goto LABEL_72;
      default:
        if (*(void *)&v63 >> 60 != 6) {
          goto LABEL_72;
        }
        goto LABEL_70;
    }
LABEL_71:
    DisplayList.ViewUpdater.Model.State.reset()();
  }
LABEL_72:
  long long v66 = *(_OWORD *)(v64 + 48);
  *(_OWORD *)&v161.a = *(_OWORD *)(v64 + 32);
  *(_OWORD *)&v161.c = v66;
  *(_OWORD *)&v161.tx = *(_OWORD *)(v64 + 64);
  CGAffineTransformTranslate((CGAffineTransform *)v177, &v161, v38, v39);
  CGFloat v67 = *(double *)v177;
  CGFloat v68 = *(double *)&v177[8];
  CGFloat v69 = *(double *)&v177[16];
  CGFloat v70 = *(double *)&v177[24];
  CGFloat v71 = *(double *)&v177[32];
  CGFloat v72 = *(double *)&v177[40];
  *(void *)(v64 + 32) = *(void *)v177;
  *(CGFloat *)(v64 + 40) = v68;
  *(CGFloat *)(v64 + 48) = v69;
  *(CGFloat *)(v64 + 56) = v70;
  *(CGFloat *)(v64 + 64) = v71;
  *(CGFloat *)(v64 + 72) = v72;
  if (*(uint64_t *)&v42 <= *(void *)(v64 + 136)) {
    CGFloat v73 = *(double *)(v64 + 136);
  }
  else {
    CGFloat v73 = v42;
  }
  *(CGFloat *)(v64 + 136) = v73;
  CGFloat v74 = v42;
  switch(v65)
  {
    case 1uLL:
      switch(BYTE4(v160))
      {
        case 1:
          outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, 1);
          outlined consume of DisplayList.Effect(*(uint64_t *)&v63, v160, 1);
          goto LABEL_87;
        case 2:
          outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, 2);
          *(unsigned char *)(v64 + 104) |= LOBYTE(v63);
          CGFloat v95 = *(double *)(v64 + 168);
          if (*(uint64_t *)&v42 > *(uint64_t *)&v95) {
            CGFloat v95 = v42;
          }
          *(CGFloat *)(v64 + 168) = v95;
          goto LABEL_87;
        case 3:
          goto LABEL_118;
        case 4:
          outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, 4);
          *(float *)(v64 + 8) = *(float *)(v64 + 8) * *(float *)&v63;
          CGFloat v78 = *(double *)(v64 + 120);
          if (*(uint64_t *)&v42 > *(uint64_t *)&v78) {
            CGFloat v78 = v42;
          }
          *(CGFloat *)(v64 + 120) = v78;
          goto LABEL_87;
        case 5:
          outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, 5);
          outlined consume of GraphicsBlendMode(*(void *)(v64 + 16), *(unsigned char *)(v64 + 24));
          *(CGFloat *)(v64 + 16) = v63;
          *(unsigned char *)(v64 + 24) = v160 & 1;
          CGFloat v102 = *(double *)(v64 + 128);
          if (*(uint64_t *)&v42 > *(uint64_t *)&v102) {
            CGFloat v102 = v42;
          }
          *(CGFloat *)(v64 + 128) = v102;
          goto LABEL_87;
        case 6:
          outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, 6);
          long long v103 = *(_OWORD *)(*(void *)&v63 + 32);
          *(_OWORD *)v177 = *(_OWORD *)(*(void *)&v63 + 16);
          *(_OWORD *)&v177[16] = v103;
          v177[32] = *(unsigned char *)(*(void *)&v63 + 48);
          __int16 v104 = *(unsigned __int8 *)(*(void *)&v63 + 49);
          uint64_t v105 = *(void *)&v63;
          int v106 = *(unsigned __int8 *)(*(void *)&v63 + 50);
          outlined init with take of Path.Storage((uint64_t)v177, (uint64_t)&v161);
          outlined retain of Path.Storage((uint64_t)&v161, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
          if (v106) {
            __int16 v107 = 256;
          }
          else {
            __int16 v107 = 0;
          }
          DisplayList.ViewUpdater.Model.State.addClip(_:style:)((uint64_t)v177, v107 | v104);
          outlined retain of Path.Storage((uint64_t)v177, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          outlined consume of DisplayList.Effect(v105, v160, 6);
          CGFloat v108 = *(double *)(v64 + 144);
          if (*(uint64_t *)&v42 > *(uint64_t *)&v108) {
            CGFloat v108 = v42;
          }
          *(CGFloat *)(v64 + 144) = v108;
          goto LABEL_87;
        case 7:
          outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, 7);
          outlined consume of DisplayList.Effect(*(uint64_t *)&v63, v160, 7);
          uint64_t v50 = v50 | 1;
          *(unsigned char *)(v64 + 105) = 1;
          goto LABEL_87;
        case 8:
          outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, 8);
          long long v110 = *(_OWORD *)(*(void *)&v63 + 16);
          long long v109 = *(_OWORD *)(*(void *)&v63 + 32);
          long long v111 = *(_OWORD *)(*(void *)&v63 + 48);
          long long v112 = *(_OWORD *)(*(void *)&v63 + 64);
          uint64_t v113 = *(void *)(*(void *)&v63 + 80);
          switch(*(unsigned char *)(*(void *)&v63 + 88))
          {
            case 1:
              uint64_t v123 = *(void *)(*(void *)&v63 + 80);
              goto LABEL_139;
            case 2:
              double v124 = *(double *)(*(void *)&v63 + 24);
              CGFloat anglec = *(double *)(*(void *)&v63 + 16);
              double v159 = *(double *)(*(void *)&v63 + 32);
              CGAffineTransformMakeTranslation(&v161, *((CGFloat *)&v110 + 1), *(CGFloat *)&v109);
              CGAffineTransformRotate((CGAffineTransform *)v177, &v161, anglec);
              CGAffineTransform v161 = *(CGAffineTransform *)v177;
              CGAffineTransformTranslate((CGAffineTransform *)v177, &v161, -v124, -v159);
              *(void *)&long long v110 = *(void *)v177;
              CGFloat v114 = *(double *)&v177[8];
              *(void *)&long long v109 = *(void *)&v177[16];
              CGFloat v115 = *(double *)&v177[24];
              *(void *)&long long v111 = *(void *)&v177[32];
              CGFloat v116 = *(double *)&v177[40];
              goto LABEL_137;
            case 3:
              *(_OWORD *)&v161.a = *(_OWORD *)(*(void *)&v63 + 16);
              *(_OWORD *)&v161.c = v109;
              *(_OWORD *)&v161.tx = v111;
              long long v162 = v112;
              *(void *)&long long v163 = v113;
              _Rotation3DEffect.Data.transform.getter(&t2.a);
              long long v110 = *(_OWORD *)&t2.a;
              long long v109 = *(_OWORD *)&t2.c;
              long long v111 = *(_OWORD *)&t2.tx;
              long long v112 = v175;
              uint64_t v123 = v176;
LABEL_139:
              *(_OWORD *)v177 = v110;
              *(_OWORD *)&v177[16] = v109;
              *(_OWORD *)&v177[32] = v111;
              *(_OWORD *)&v177[48] = v112;
              uint64_t v178 = v123;
              v161.a = 1.0;
              memset(&v161.b, 0, 24);
              v161.tx = 1.0;
              v161.ty = 0.0;
              long long v162 = 0uLL;
              *(void *)&long long v163 = 0x3FF0000000000000;
              BOOL v127 = !specialized static ProjectionTransform.== infix(_:_:)((double *)v177, &v161.a);
              outlined consume of DisplayList.Effect(*(uint64_t *)&v63, v160, 8);
              uint64_t v50 = v50 | ((v50 & 1) == 0 && v127);
              goto LABEL_87;
            default:
              CGFloat v114 = *(double *)(*(void *)&v63 + 24);
              CGFloat v115 = *(double *)(*(void *)&v63 + 40);
              CGFloat v116 = *(double *)(*(void *)&v63 + 56);
LABEL_137:
              *(void *)&v161.a = v110;
              v161.b = v114;
              *(void *)&v161.c = v109;
              v161.d = v115;
              *(void *)&v161.tx = v111;
              v161.ty = v116;
              *(void *)v177 = v110;
              *(CGFloat *)&v177[8] = v114;
              *(void *)&v177[16] = v109;
              *(CGFloat *)&v177[24] = v115;
              *(void *)&v177[32] = v111;
              *(CGFloat *)&v177[40] = v116;
              t2.a = v67;
              t2.b = v68;
              t2.c = v69;
              t2.d = v70;
              t2.tx = v71;
              t2.ty = v72;
              CGAffineTransformConcat(&v173, (CGAffineTransform *)v177, &t2);
              long long v125 = *(_OWORD *)&v173.c;
              long long v126 = *(_OWORD *)&v173.tx;
              *(_OWORD *)(v64 + 32) = *(_OWORD *)&v173.a;
              *(_OWORD *)(v64 + 48) = v125;
              *(_OWORD *)(v64 + 64) = v126;
              *(CGFloat *)(v64 + 136) = v73;
              DisplayList.ViewUpdater.Model.State.adjust(for:)(&v161);
              outlined consume of DisplayList.Effect(*(uint64_t *)&v63, v160, 8);
              break;
          }
          goto LABEL_87;
        case 9:
          outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, 9);
          unint64_t v79 = *(void *)(*(void *)&v63 + 16);
          CGFloat v80 = *(double *)(*(void *)&v63 + 24);
          uint64_t v82 = *(void **)(*(void *)&v63 + 32);
          CGFloat v81 = *(double *)(*(void *)&v63 + 40);
          CGFloat v83 = *(double *)(*(void *)&v63 + 48);
          CGFloat v84 = *(double *)(*(void *)&v63 + 56);
          int v85 = *(unsigned __int8 *)(*(void *)&v63 + 132);
          if (v85 == 2)
          {
            uint64_t v148 = *(void *)&v63;
            unint64_t v117 = HIDWORD(v79);
            uint64_t angleb = HIDWORD(*(void *)&v80);
            int v118 = v79;
            type metadata accessor for MutableBox<ResolvedShadowStyle>(0, &lazy cache variable for type metadata for MutableBox<ResolvedShadowStyle>, (uint64_t)&type metadata for ResolvedShadowStyle, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
            uint64_t v119 = swift_allocObject();
            int v120 = LODWORD(v80);
            uint64_t v121 = v119;
            *(_DWORD *)(v119 + 16) = v118;
            *(_DWORD *)(v119 + 20) = v117;
            *(_DWORD *)(v119 + 24) = v120;
            *(_DWORD *)(v119 + 28) = angleb;
            *(void *)(v119 + 32) = v82;
            *(CGFloat *)(v119 + 40) = v81;
            *(CGFloat *)(v119 + 48) = v83;
            *(_DWORD *)(v119 + 56) = LODWORD(v84);
            *(unsigned char *)(v119 + 60) = BYTE4(v84);
            swift_release();
            outlined consume of DisplayList.Effect(v148, v160, 9);
            *(void *)(a3 + 96) = v121;
            CGFloat v122 = *(double *)(a3 + 160);
            if (*(uint64_t *)&v42 > *(uint64_t *)&v122) {
              CGFloat v122 = v42;
            }
            *(CGFloat *)(a3 + 160) = v122;
          }
          else
          {
            if (v85 == 15) {
              goto LABEL_100;
            }
            uint64_t v86 = *(void *)(*(void *)&v63 + 64);
            uint64_t v87 = *(void *)(*(void *)&v63 + 72);
            uint64_t v88 = *(void *)(*(void *)&v63 + 80);
            uint64_t v89 = *(void *)(*(void *)&v63 + 88);
            uint64_t v90 = *(void *)(*(void *)&v63 + 96);
            uint64_t v91 = *(void *)(*(void *)&v63 + 104);
            uint64_t v92 = *(void *)(*(void *)&v63 + 112);
            uint64_t v93 = *(void *)(*(void *)&v63 + 120);
            int v94 = *(_DWORD *)(*(void *)&v63 + 128);
            v161.a = *(CGFloat *)(*(void *)&v63 + 16);
            v161.b = v80;
            *(void *)&v161.c = v82;
            v161.d = v81;
            v161.tx = v83;
            v161.ty = v84;
            uint64_t v142 = v87;
            uint64_t v143 = v86;
            *(void *)&long long v162 = v86;
            *((void *)&v162 + 1) = v87;
            uint64_t v144 = v88;
            uint64_t v145 = v92;
            *(void *)&long long v163 = v88;
            *((void *)&v163 + 1) = v89;
            uint64_t v151 = v89;
            uint64_t v152 = (void *)v79;
            uint64_t v146 = v91;
            uint64_t v147 = v90;
            uint64_t v164 = v90;
            uint64_t v165 = v91;
            uint64_t v166 = v92;
            uint64_t v167 = v93;
            CGFloat v153 = v80;
            uint64_t angle = v93;
            LODWORD(v168) = v94;
            BYTE4(v168) = v85;
            if (GraphicsFilter.isIdentity.getter())
            {
LABEL_100:
              outlined consume of DisplayList.Effect(*(uint64_t *)&v63, v160, 9);
            }
            else
            {
              int v141 = *(void **)(a3 + 88);
              outlined copy of GraphicsFilter(v152, SLODWORD(v80), v82, SLOBYTE(v81), *(uint64_t *)&v83, *(uint64_t *)&v84, v143, v142, v144, v151, v147, v146, v145, angle, v94, SBYTE2(v94));
              outlined copy of GraphicsFilter(v152, SLODWORD(v80), v82, SLOBYTE(v81), *(uint64_t *)&v83, *(uint64_t *)&v84, v143, v142, v144, v151, v147, v146, v145, angle, v94, SBYTE2(v94));
              long long v128 = v141;
              uint64_t v149 = *(void *)&v63;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                long long v128 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v141[2] + 1, 1, v141);
              }
              unint64_t v130 = v128[2];
              unint64_t v129 = v128[3];
              unint64_t v131 = v130 + 1;
              uint64_t v132 = v145;
              uint64_t v133 = v151;
              uint64_t v135 = v146;
              uint64_t v134 = v147;
              uint64_t v136 = angle;
              int v137 = v94;
              if (v130 >= v129 >> 1)
              {
                unsigned __int8 v140 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v129 > 1), v130 + 1, 1, v128);
                unint64_t v131 = v130 + 1;
                int v137 = v94;
                uint64_t v136 = angle;
                uint64_t v132 = v145;
                uint64_t v135 = v146;
                uint64_t v134 = v147;
                uint64_t v133 = v151;
                long long v128 = v140;
              }
              v128[2] = v131;
              long long v138 = (CGFloat *)&v128[15 * v130];
              *((void *)v138 + 4) = v152;
              v138[5] = v153;
              *((void *)v138 + 6) = v82;
              v138[7] = v81;
              v138[8] = v83;
              v138[9] = v84;
              *((void *)v138 + 10) = v143;
              *((void *)v138 + 11) = v142;
              *((void *)v138 + 12) = v144;
              *((void *)v138 + 13) = v133;
              *((void *)v138 + 14) = v134;
              *((void *)v138 + 15) = v135;
              *((void *)v138 + 16) = v132;
              *((void *)v138 + 17) = v136;
              *((_DWORD *)v138 + 36) = v137;
              *((unsigned char *)v138 + 148) = v85;
              outlined consume of GraphicsFilter(v152, SLODWORD(v153), v82, SLOBYTE(v81), *(uint64_t *)&v83, *(uint64_t *)&v84, v143, v142, v144, v133, v134, v135, v132, v136, v137, SBYTE2(v137));
              outlined consume of DisplayList.Effect(v149, v160, 9);
              *(void *)(a3 + 88) = v128;
              CGFloat v139 = *(double *)(a3 + 152);
              if (*(uint64_t *)&v74 > *(uint64_t *)&v139) {
                CGFloat v139 = v74;
              }
              *(CGFloat *)(a3 + 152) = v139;
            }
          }
          goto LABEL_87;
        case 0xA:
        case 0xC:
          goto LABEL_147;
        case 0xB:
          outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, 11);
          outlined consume of DisplayList.Effect(*(uint64_t *)&v63, v160, 11);
          goto LABEL_87;
        case 0xD:
          outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, 13);
          outlined consume of DisplayList.Effect(*(uint64_t *)&v63, v160, 13);
          goto LABEL_87;
        case 0xE:
          outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, 14);
          outlined consume of DisplayList.Effect(*(uint64_t *)&v63, v160, 14);
          goto LABEL_87;
        case 0xF:
          outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, 15);
          *(_OWORD *)anglea = *(_OWORD *)(*(void *)&v63 + 16);
          int v96 = *(_DWORD *)(*(void *)&v63 + 32);
          uint64_t v97 = *(char **)(v64 + 112);
          uint64_t v98 = *(void *)&v63;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v97 + 2) + 1, 1, v97);
          }
          unint64_t v100 = *((void *)v97 + 2);
          unint64_t v99 = *((void *)v97 + 3);
          if (v100 >= v99 >> 1) {
            uint64_t v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v99 > 1), v100 + 1, 1, v97);
          }
          *((void *)v97 + 2) = v100 + 1;
          double v101 = &v97[20 * v100];
          *((_OWORD *)v101 + 2) = *(_OWORD *)anglea;
          *((_DWORD *)v101 + 12) = v96;
          outlined consume of DisplayList.Effect(v98, v160, 15);
          *(void *)(a3 + 112) = v97;
          goto LABEL_87;
        case 0x10:
          outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, 16);
          outlined consume of DisplayList.Effect(*(uint64_t *)&v63, v160, 16);
          goto LABEL_87;
        case 0x11:
          outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, 17);
          outlined consume of DisplayList.Effect(*(uint64_t *)&v63, v160, 17);
          goto LABEL_87;
        case 0x12:
          outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, 18);
          outlined consume of DisplayList.Effect(*(uint64_t *)&v63, v160, 18);
          goto LABEL_87;
        case 0x13:
          if (*(void *)&v63 | v160)
          {
            if (*(void *)&v63 ^ 1 | v160)
            {
              outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, 19);
              uint64_t v50 = v50 | 1;
              *(unsigned char *)(v64 + 106) = 1;
            }
            else
            {
LABEL_118:
              outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, SBYTE4(v160));
              outlined consume of DisplayList.Effect(*(uint64_t *)&v63, v160, SBYTE4(v160));
              uint64_t v50 = v50 | 1;
            }
          }
          else
          {
            outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, 19);
          }
          break;
        default:
          outlined copy of DisplayList.Effect(*(uint64_t *)&v63, v160, 0);
          if (LOBYTE(v63)) {
            *(_DWORD *)(v64 + 108) = v49 ^ (33 * v150);
          }
          else {
            *(_DWORD *)(v64 + 108) = 0;
          }
          goto LABEL_87;
      }
      goto LABEL_87;
    case 2uLL:
      goto LABEL_147;
    case 3uLL:
      uint64_t v50 = v50 & 0xFFFFFFFD;
      goto LABEL_87;
    default:
      if (*(void *)&v63 >> 60)
      {
        if (*(void *)&v63 >> 60 != 2
          || !*(void *)(*(void *)((*(void *)&v63 & 0xFFFFFFFFFFFFFFFLL) + 0x20) + 16))
        {
          goto LABEL_82;
        }
      }
      else if (!*(void *)(*(void *)(*(void *)&v63 + 40) + 16))
      {
        goto LABEL_82;
      }
      uint64_t v75 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v75);
      CGFloat v76 = *(double *)(v64 + 152);
      if (*(uint64_t *)&v42 > *(uint64_t *)&v76) {
        CGFloat v76 = v42;
      }
      *(CGFloat *)(v64 + 152) = v76;
LABEL_82:
      uint64_t v50 = v50 | 1;
LABEL_87:
      uint64_t result = v50;
      break;
  }
  return result;
}

uint64_t DisplayList.Item.discardContainingClips(state:)(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  unint64_t v3 = v2[2];
  if (!v3) {
    return 1;
  }
  CGFloat v4 = *(double *)(v1 + 16);
  double v180 = *(double *)(v1 + 8);
  double v181 = *(double *)v1;
  long long v5 = *((_OWORD *)v2 + 5);
  v191[2] = *((_OWORD *)v2 + 4);
  v191[3] = v5;
  v192[0] = *((_OWORD *)v2 + 6);
  *(_OWORD *)((char *)v192 + 11) = *(_OWORD *)((char *)v2 + 107);
  long long v6 = *((_OWORD *)v2 + 3);
  v191[0] = *((_OWORD *)v2 + 2);
  CGFloat v7 = *(double *)(v1 + 24);
  unint64_t v9 = *(void *)(v1 + 40);
  unint64_t v8 = *(void *)(v1 + 48);
  v191[1] = v6;
  outlined retain of Path.Storage((uint64_t)v191, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  char v10 = DisplayList.ViewUpdater.Model.Clip.isEmpty.getter();
  outlined retain of Path.Storage((uint64_t)v191, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  if (v10) {
    return 0;
  }
  if (v8 >> 62) {
    return 1;
  }
  double v12 = *(double *)(a1 + 40);
  double v13 = *(double *)(a1 + 48);
  double v14 = *(double *)(a1 + 56);
  if (v12 != 0.0 || v13 != 0.0)
  {
    uint64_t v11 = 1;
    if (*(double *)(a1 + 32) != 0.0 || v14 != 0.0) {
      return v11;
    }
  }
  unint64_t v173 = v8;
  v190.CGFloat a = *(CGFloat *)(a1 + 32);
  v190.CGFloat b = v12;
  v190.CGFloat c = v13;
  v190.CGFloat d = v14;
  *(_OWORD *)&v190.tCGFloat x = *(_OWORD *)(a1 + 64);
  CGAffineTransformInvert(&v189, &v190);
  CGFloat a = v189.a;
  CGFloat c = v189.c;
  CGFloat b = v189.b;
  uint64_t v16 = v9 >> 60;
  tCGFloat x = v189.tx;
  CGFloat d = v189.d;
  tCGFloat y = v189.ty;
  outlined copy of DisplayList.Content.Value(v9);
  unint64_t v18 = v9;
  int64_t v19 = 0;
  uint64_t v172 = v18;
  uint64_t v138 = v18 & 0xFFFFFFFFFFFFFFFLL;
  double v136 = *(double *)(MEMORY[0x263F001A0] + 8);
  double v137 = *MEMORY[0x263F001A0];
  double v134 = *(double *)(MEMORY[0x263F001A0] + 24);
  double v135 = *(double *)(MEMORY[0x263F001A0] + 16);
  v20.f64[0] = NAN;
  v20.f64[1] = NAN;
  int8x16_t v158 = (int8x16_t)vnegq_f64(v20);
  double v21 = 0.0;
  LOBYTE(v22) = 1;
  int v171 = v16;
  double v164 = a;
  while ((v19 & 0x8000000000000000) == 0)
  {
    if ((unint64_t)v19 >= v2[2]) {
      goto LABEL_148;
    }
    char v23 = (unsigned __int8 *)&v2[12 * v19 + 4];
    if (v23[88] != 1) {
      goto LABEL_73;
    }
    int8x16_t v24 = *(int8x16_t *)v23;
    int v25 = v23[32];
    if (v25 == 2)
    {
      uint64_t v27 = *(void *)(v24.i64[0] + 32);
      double v28 = *(double *)(v24.i64[0] + 40);
      v24.i64[0] = *(void *)(v24.i64[0] + 48);
      CGSize size = (CGSize)v24;
      v24.i64[0] = *(void *)(*(void *)v23 + 56);
      int8x16_t v182 = v24;
      int8x16_t v24 = *(int8x16_t *)(*(void *)v23 + 16);
    }
    else
    {
      double v26 = *((double *)v23 + 2);
      if (v25 == 1)
      {
        uint64_t v27 = *((void *)v23 + 2);
        double v28 = *((double *)v23 + 3);
        if (v26 != v28) {
          goto LABEL_73;
        }
        *(double *)v17.i64 = v26 * 0.5;
        CGSize size = (CGSize)v17;
      }
      else
      {
        if (v23[32]) {
          goto LABEL_73;
        }
        uint64_t v27 = *((void *)v23 + 2);
        double v28 = *((double *)v23 + 3);
        v17.i64[0] = 0;
        CGSize size = (CGSize)v17;
        v17.i64[0] = 0;
      }
      int8x16_t v182 = v17;
    }
    uint64_t v29 = v24.i64[1];
    v190.CGFloat a = a;
    v190.CGFloat b = b;
    v190.CGFloat c = c;
    v190.CGFloat d = d;
    v190.tCGFloat x = tx;
    v190.tCGFloat y = ty;
    CGRect v193 = CGRectApplyAffineTransform(*(CGRect *)v24.i8, &v190);
    CGFloat x = v193.origin.x;
    CGFloat y = v193.origin.y;
    CGFloat width = v193.size.width;
    CGFloat height = v193.size.height;
    unint64_t v35 = v182.u64[0];
    unint64_t v34 = *(unint64_t *)&size.width;
    if ((~*(void *)&size.width & 0x7FF0000000000000) != 0 && (~v182.i64[0] & 0x7FF0000000000000) != 0)
    {
      v190.CGFloat a = a;
      v190.CGFloat b = b;
      v190.CGFloat c = c;
      v190.CGFloat d = d;
      v190.tCGFloat x = tx;
      v190.tCGFloat y = ty;
      CGFloat v37 = size.width;
      CGSize v40 = CGSizeApplyAffineTransform(*(CGSize *)(&v35 - 1), &v190);
      *(CGFloat *)v39.i64 = v40.height;
      *(CGFloat *)v38.i64 = v40.width;
      unint64_t v34 = vbslq_s8(v158, v38, (int8x16_t)size).u64[0];
      unint64_t v35 = vbslq_s8(v158, v39, v182).u64[0];
    }
    uint64_t v11 = 1;
    if (v16 > 0xA) {
      goto LABEL_146;
    }
    double v183 = *(double *)&v35;
    sizeCGFloat a = *(double *)&v34;
    if (((1 << v16) & 0x70F) != 0)
    {
      v194.origin.CGFloat x = x;
      v194.origin.CGFloat y = y;
      v194.size.CGFloat width = width;
      v194.size.CGFloat height = height;
      v216.origin.CGFloat y = v180;
      v216.origin.CGFloat x = v181;
      v216.size.CGFloat width = v4;
      v216.size.CGFloat height = v7;
      CGRect v195 = CGRectIntersection(v194, v216);
      if (CGRectIsEmpty(v195)) {
        goto LABEL_145;
      }
      if (v22)
      {
        uint64_t v41 = *(void *)(a1 + 88);
        CGFloat v42 = *(double **)(a1 + 96);
        if (!v42)
        {
          double v21 = 0.0;
          uint64_t v45 = *(void *)(v41 + 16);
          if (!v45) {
            goto LABEL_41;
          }
LABEL_36:
          int v46 = (unsigned char *)(v41 + 148);
          do
          {
            if (!*v46 && (*(v46 - 108) & 1) == 0) {
              double v21 = v21 + *(double *)(v46 - 116) * 2.8;
            }
            v46 += 120;
            --v45;
          }
          while (v45);
          goto LABEL_41;
        }
        swift_beginAccess();
        double v43 = fabs(v42[5]);
        double v44 = fabs(v42[6]);
        if (v43 <= v44) {
          double v43 = v44;
        }
        double v21 = v42[4] * 2.8 + 0.0 + v43;
        uint64_t v45 = *(void *)(v41 + 16);
        if (v45) {
          goto LABEL_36;
        }
      }
LABEL_41:
      if (v21 != 0.0)
      {
        v196.origin.CGFloat x = x;
        v196.origin.CGFloat y = y;
        v196.size.CGFloat width = width;
        v196.size.CGFloat height = height;
        CGRect v197 = CGRectInset(v196, v21, v21);
        CGFloat x = v197.origin.x;
        CGFloat y = v197.origin.y;
        CGFloat width = v197.size.width;
        CGFloat height = v197.size.height;
        if (CGRectIsEmpty(v197)) {
          goto LABEL_72;
        }
        double v47 = sizea - v21;
        if (sizea - v21 < 0.0) {
          double v47 = 0.0;
        }
        sizeCGFloat a = v47;
        double v48 = v183 - v21;
        if (v183 - v21 < 0.0) {
          double v48 = 0.0;
        }
        double v183 = v48;
      }
      v198.origin.CGFloat x = x;
      v198.origin.CGFloat y = y;
      v198.size.CGFloat width = width;
      v198.size.CGFloat height = height;
      CGRect v199 = CGRectInset(v198, -0.001, -0.001);
      v217.origin.CGFloat y = v180;
      v217.origin.CGFloat x = v181;
      v217.size.CGFloat width = v4;
      v217.size.CGFloat height = v7;
      if (!CGRectContainsRect(v199, v217))
      {
LABEL_72:
        LOBYTE(v22) = 0;
        goto LABEL_73;
      }
      if (sizea <= 0.0 && v183 <= 0.0) {
        goto LABEL_59;
      }
      double v159 = v21;
      v200.origin.CGFloat x = x;
      v200.origin.CGFloat y = y;
      v200.size.CGFloat width = width;
      v200.size.CGFloat height = height;
      CGFloat v49 = v7;
      double v50 = v4;
      double v51 = fabs(CGRectGetWidth(v200)) * 0.5;
      v201.origin.CGFloat x = x;
      v201.origin.CGFloat y = y;
      v201.size.CGFloat width = width;
      v201.size.CGFloat height = height;
      double v52 = fabs(CGRectGetHeight(v201)) * 0.5;
      if (v52 >= v51) {
        double v52 = v51;
      }
      CGFloat v4 = v50;
      CGFloat v7 = v49;
      double v53 = sizea;
      if (v52 < sizea) {
        double v53 = v52;
      }
      if (v52 >= v183) {
        double v52 = v183;
      }
      CGFloat v54 = v53 * 0.292893219;
      CGFloat v55 = v52 * 0.292893219;
      v202.origin.CGFloat x = x;
      v202.origin.CGFloat y = y;
      v202.size.CGFloat width = width;
      v202.size.CGFloat height = height;
      CGRect v203 = CGRectInset(v202, v54, v55);
      v218.origin.CGFloat y = v180;
      v218.origin.CGFloat x = v181;
      v218.size.CGFloat width = v4;
      v218.size.CGFloat height = v49;
      if (!CGRectContainsRect(v203, v218))
      {
        LOBYTE(v22) = 0;
        CGFloat a = v164;
        goto LABEL_73;
      }
LABEL_58:
      double v21 = v159;
      CGFloat a = v164;
LABEL_59:
      if (v19 != --v3)
      {
        unint64_t v56 = v2[2];
        if (v19 >= (uint64_t)v56) {
          goto LABEL_150;
        }
        if (v3 >= v56) {
          goto LABEL_151;
        }
        uint64_t v57 = *(void *)v23;
        uint64_t v58 = *((void *)v23 + 1);
        uint64_t v59 = *((void *)v23 + 2);
        uint64_t v60 = *((void *)v23 + 3);
        unsigned __int8 v61 = v23[32];
        long long v149 = *(_OWORD *)(v23 + 56);
        recCGAffineTransform t2 = *(_OWORD *)(v23 + 40);
        long long v148 = *(_OWORD *)(v23 + 72);
        unsigned __int8 v145 = v23[89];
        unsigned __int8 v146 = v23[88];
        unsigned __int8 v144 = v23[90];
        uint64_t v139 = 12 * v3;
        uint64_t v62 = (uint64_t)&v2[12 * v3 + 4];
        uint64_t v63 = *(void *)v62;
        uint64_t v64 = *(void *)(v62 + 8);
        uint64_t v66 = *(void *)(v62 + 16);
        uint64_t v65 = *(void *)(v62 + 24);
        unsigned __int8 v67 = *(unsigned char *)(v62 + 32);
        sizeCGFloat b = *(void *)(v62 + 40);
        uint64_t v184 = *(void *)(v62 + 48);
        uint64_t v167 = *(void *)(v62 + 64);
        uint64_t v169 = *(void *)(v62 + 56);
        uint64_t v165 = *(void *)(v62 + 72);
        uint64_t v160 = *(void *)(v62 + 80);
        char rect = *(unsigned char *)(v62 + 88);
        char rect2_24 = *(unsigned char *)(v62 + 89);
        char rect2_16 = *(unsigned char *)(v62 + 90);
        uint64_t v142 = v58;
        uint64_t v143 = v57;
        uint64_t v140 = v60;
        uint64_t v141 = v59;
        outlined copy of Path.Storage(v57, v58, v59, v60, v61);
        outlined copy of Path.Storage(v63, v64, v66, v65, v67);
        unsigned __int8 v147 = v61;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
        }
        CGFloat v68 = v2 + 4;
        uint64_t v69 = (uint64_t)&v2[12 * v19 + 4];
        uint64_t v70 = *(void *)v69;
        uint64_t v71 = *(void *)(v69 + 8);
        uint64_t v72 = *(void *)(v69 + 16);
        uint64_t v73 = *(void *)(v69 + 24);
        *(void *)uint64_t v69 = v63;
        *(void *)(v69 + 8) = v64;
        *(void *)(v69 + 16) = v66;
        *(void *)(v69 + 24) = v65;
        unsigned __int8 v74 = *(unsigned char *)(v69 + 32);
        *(unsigned char *)(v69 + 32) = v67;
        *(void *)(v69 + 40) = sizeb;
        *(void *)(v69 + 48) = v184;
        *(void *)(v69 + 56) = v169;
        *(void *)(v69 + 64) = v167;
        *(void *)(v69 + 72) = v165;
        *(void *)(v69 + 80) = v160;
        *(unsigned char *)(v69 + 88) = rect;
        *(unsigned char *)(v69 + 89) = rect2_24;
        *(unsigned char *)(v69 + 90) = rect2_16;
        outlined consume of Path.Storage(v70, v71, v72, v73, v74);
        if (v3 >= v2[2]) {
          goto LABEL_152;
        }
        uint64_t v75 = &v68[v139];
        uint64_t v76 = v68[12 * v3];
        uint64_t v77 = v68[v139 + 1];
        uint64_t v78 = v68[v139 + 2];
        uint64_t v79 = v68[v139 + 3];
        *uint64_t v75 = v143;
        v75[1] = v142;
        v75[2] = v141;
        v75[3] = v140;
        unsigned __int8 v80 = v68[v139 + 4];
        *((unsigned char *)v75 + 32) = v147;
        *(_OWORD *)(v75 + 5) = rect2;
        *(_OWORD *)(v75 + 7) = v149;
        *(_OWORD *)(v75 + 9) = v148;
        *((unsigned char *)v75 + 88) = v146;
        *((unsigned char *)v75 + 89) = v145;
        *((unsigned char *)v75 + 90) = v144;
        outlined consume of Path.Storage(v76, v77, v78, v79, v80);
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      }
      unint64_t v81 = v2[2];
      if (v3 >= v81) {
        goto LABEL_149;
      }
      unint64_t v82 = v81 - 1;
      uint64_t v83 = v81 - 1 - v3;
      if (v83 < 0) {
        goto LABEL_155;
      }
      CGFloat v84 = &v2[12 * v3];
      uint64_t v85 = v84[4];
      v84 += 4;
      uint64_t v87 = v84[2];
      uint64_t v86 = v84[3];
      uint64_t v16 = v84[1];
      unsigned __int8 v88 = *((unsigned char *)v84 + 32);
      memmove(v84, v84 + 12, 96 * v83);
      v2[2] = v82;
      outlined consume of Path.Storage(v85, v16, v87, v86, v88);
      LOBYTE(v22) = 0;
      *(void *)(a1 + 80) = v2;
      LODWORD(v16) = v171;
      if (v19 >= (uint64_t)v3)
      {
LABEL_143:
        uint64_t v11 = 1;
        goto LABEL_146;
      }
    }
    else
    {
      if (v16 != 4) {
        goto LABEL_146;
      }
      uint64_t v89 = *(uint64_t *)(v138 + 16);
      uint64_t v166 = *(uint64_t *)(v138 + 24);
      uint64_t v168 = *(uint64_t *)(v138 + 32);
      uint64_t v170 = *(uint64_t *)(v138 + 40);
      int v90 = *(unsigned __int8 *)(v138 + 48);
      double v132 = v7;
      double v133 = v4;
      switch(*(unsigned char *)(v138 + 48))
      {
        case 2:
          double v92 = *(double *)(v89 + 24);
          double v161 = *(double *)(v89 + 16);
          CGFloat v91 = *(double *)(v89 + 32);
          CGFloat v93 = *(double *)(v89 + 40);
          outlined copy of DisplayList.Item.Value(v172, v173);
          outlined copy of Path.Storage(v89, v166, v168, v170, 2u);
          goto LABEL_88;
        case 3:
        case 4:
          goto LABEL_156;
        case 5:
          if (*(unsigned char *)(v89 + 16))
          {
            if (*(unsigned char *)(v89 + 16) == 1)
            {
              outlined copy of Path.Storage(v89, v166, v168, v170, 5u);
              outlined copy of DisplayList.Item.Value(v172, v173);
              outlined copy of Path.Storage(v89, v166, v168, v170, 5u);
              RBPathGetBoundingRect();
            }
            else
            {
              outlined copy of Path.Storage(v89, v166, v168, v170, 5u);
              outlined copy of DisplayList.Item.Value(v172, v173);
              outlined copy of Path.Storage(v89, v166, v168, v170, 5u);
              double v94 = MEMORY[0x24C526C90](v89 + 24);
            }
            double v161 = v94;
            double v92 = v95;
            CGFloat v91 = v96;
            CGFloat v93 = v97;
            outlined consume of Path.Storage(v89, v166, v168, v170, 5u);
LABEL_88:
            double v98 = v161;
          }
          else
          {
            rectCGFloat a = *(unsigned __int8 *)(v138 + 48);
            unint64_t v99 = *(void **)(v89 + 24);
            if (!v99) {
              goto LABEL_153;
            }
            unint64_t v100 = v99;
            outlined copy of Path.Storage(v89, v166, v168, v170, 5u);
            outlined copy of DisplayList.Item.Value(v172, v173);
            outlined copy of Path.Storage(v89, v166, v168, v170, 5u);
            PathBoundingBoCGFloat x = CGPathGetPathBoundingBox(v100);
            CGFloat v162 = PathBoundingBox.origin.x;
            double v92 = PathBoundingBox.origin.y;
            CGFloat v91 = PathBoundingBox.size.width;
            CGFloat v93 = PathBoundingBox.size.height;

            outlined consume of Path.Storage(v89, v166, v168, v170, 5u);
            double v98 = v162;
            int v90 = recta;
          }
LABEL_89:
          v219.origin.CGFloat x = v181 + v98;
          v219.origin.CGFloat y = v180 + v92;
          v205.origin.CGFloat x = x;
          v205.origin.CGFloat y = y;
          v205.size.CGFloat width = width;
          v205.size.CGFloat height = height;
          v219.size.CGFloat width = v91;
          v219.size.CGFloat height = v93;
          CGRect v206 = CGRectIntersection(v205, v219);
          if (CGRectIsEmpty(v206))
          {
            outlined consume of DisplayList.Item.Value(v172, v173);
            outlined consume of Path.Storage(v89, v166, v168, v170, v90);
LABEL_145:
            uint64_t v11 = 0;
LABEL_146:
            outlined consume of DisplayList.Item.Value(v172, v173);
            return v11;
          }
          double v101 = v183;
          if (v22)
          {
            uint64_t v102 = *(void *)(a1 + 88);
            long long v103 = *(double **)(a1 + 96);
            if (v103)
            {
              swift_beginAccess();
              double v104 = fabs(v103[5]);
              double v105 = fabs(v103[6]);
              if (v104 <= v105) {
                double v104 = v105;
              }
              double v101 = v183;
              double v21 = v103[4] * 2.8 + 0.0 + v104;
            }
            else
            {
              double v21 = 0.0;
            }
            uint64_t v106 = *(void *)(v102 + 16);
            if (v106)
            {
              __int16 v107 = (unsigned char *)(v102 + 148);
              do
              {
                if (!*v107 && (*(v107 - 108) & 1) == 0) {
                  double v21 = v21 + *(double *)(v107 - 116) * 2.8;
                }
                v107 += 120;
                --v106;
              }
              while (v106);
            }
          }
          if (v21 == 0.0) {
            goto LABEL_109;
          }
          v207.origin.CGFloat x = x;
          v207.origin.CGFloat y = y;
          v207.size.CGFloat width = width;
          v207.size.CGFloat height = height;
          CGRect v208 = CGRectInset(v207, v21, v21);
          CGFloat x = v208.origin.x;
          CGFloat y = v208.origin.y;
          CGFloat width = v208.size.width;
          CGFloat height = v208.size.height;
          if (CGRectIsEmpty(v208))
          {
LABEL_130:
            outlined consume of Path.Storage(v89, v166, v168, v170, v90);
            outlined consume of DisplayList.Item.Value(v172, v173);
            LOBYTE(v22) = 0;
            CGFloat v7 = v132;
            CGFloat v4 = v133;
            CGFloat a = v164;
          }
          else
          {
            double v108 = sizea - v21;
            if (sizea - v21 < 0.0) {
              double v108 = 0.0;
            }
            sizeCGFloat a = v108;
            if (v183 - v21 < 0.0) {
              double v101 = 0.0;
            }
            else {
              double v101 = v183 - v21;
            }
LABEL_109:
            double v109 = 0.0;
            CGFloat rectb = height;
            double v185 = v101;
            double v110 = 0.0;
            CGFloat v112 = v134;
            double v111 = v135;
            double v113 = v136;
            double v114 = v137;
            switch(v90)
            {
              case 1:
                double v114 = *(double *)&v89;
                double v113 = *(double *)&v166;
                double v111 = *(double *)&v168;
                CGFloat v112 = *(double *)&v170;
                double v110 = *(double *)&v168 * 0.5;
                if (*(double *)&v168 == *(double *)&v170) {
                  double v109 = *(double *)&v168 * 0.5;
                }
                else {
                  double v109 = 0.0;
                }
                if (*(double *)&v168 != *(double *)&v170) {
                  double v110 = 0.0;
                }
                goto LABEL_126;
              case 2:
                double v114 = *(double *)(v89 + 16);
                double v113 = *(double *)(v89 + 24);
                double v111 = *(double *)(v89 + 32);
                CGFloat v112 = *(double *)(v89 + 40);
                double v109 = *(double *)(v89 + 48);
                double v110 = *(double *)(v89 + 56);
                goto LABEL_126;
              case 3:
              case 4:
                goto LABEL_156;
              case 5:
                if (*(unsigned char *)(v89 + 16))
                {
                  if (*(unsigned char *)(v89 + 16) == 1)
                  {
                    swift_retain();
                    RBPathGetBoundingRect();
                  }
                  else
                  {
                    swift_retain();
                    double v115 = MEMORY[0x24C526C90](v89 + 24);
                  }
                  double v114 = v115;
                  double v113 = v116;
                  CGFloat v121 = v117;
                  CGFloat v112 = v118;
                }
                else
                {
                  uint64_t v119 = *(void **)(v89 + 24);
                  if (!v119) {
                    goto LABEL_154;
                  }
                  int v120 = v119;
                  swift_retain();
                  CGRect v209 = CGPathGetPathBoundingBox(v120);
                  double v114 = v209.origin.x;
                  double v113 = v209.origin.y;
                  CGFloat v121 = v209.size.width;
                  CGFloat v112 = v209.size.height;
                }
                outlined consume of Path.Storage(v89, v166, v168, v170, 5u);
                double v111 = v121;
                double v110 = 0.0;
                double v109 = 0.0;
LABEL_126:
                rect2_24CGFloat a = v110;
                double v163 = v109;
                CGFloat v122 = v181 + v114;
                CGFloat v123 = v112;
                double v124 = v180 + v113;
                v210.origin.CGFloat x = x;
                v210.origin.CGFloat y = y;
                v210.size.CGFloat width = width;
                v210.size.CGFloat height = rectb;
                CGFloat v125 = v111;
                CGRect v211 = CGRectInset(v210, -0.001, -0.001);
                rect2CGFloat a = v122;
                v220.origin.CGFloat x = v122;
                v220.origin.CGFloat y = v124;
                v220.size.CGFloat width = v125;
                v220.size.CGFloat height = v123;
                if (!CGRectContainsRect(v211, v220)) {
                  goto LABEL_130;
                }
                if (sizea <= v163 && v185 <= rect2_24a)
                {
                  outlined consume of Path.Storage(v89, v166, v168, v170, v90);
                  outlined consume of DisplayList.Item.Value(v172, v173);
                  CGFloat v7 = v132;
                  CGFloat v4 = v133;
                  CGFloat a = v164;
                  goto LABEL_59;
                }
                double v159 = v21;
                v212.origin.CGFloat x = x;
                v212.origin.CGFloat y = y;
                v212.size.CGFloat width = width;
                v212.size.CGFloat height = rectb;
                double v126 = fabs(CGRectGetWidth(v212)) * 0.5;
                v213.origin.CGFloat x = x;
                v213.origin.CGFloat y = y;
                v213.size.CGFloat width = width;
                v213.size.CGFloat height = rectb;
                double v127 = fabs(CGRectGetHeight(v213)) * 0.5;
                if (v127 >= v126) {
                  double v127 = v126;
                }
                double v128 = sizea;
                if (v127 < sizea) {
                  double v128 = v127;
                }
                if (v127 >= v185) {
                  double v127 = v185;
                }
                CGFloat v129 = v128 * 0.292893219;
                CGFloat v130 = v127 * 0.292893219;
                v214.origin.CGFloat x = x;
                v214.origin.CGFloat y = y;
                v214.size.CGFloat width = width;
                v214.size.CGFloat height = rectb;
                CGRect v215 = CGRectInset(v214, v129, v130);
                v221.origin.CGFloat x = rect2a;
                v221.origin.CGFloat y = v124;
                v221.size.CGFloat width = v125;
                v221.size.CGFloat height = v123;
                BOOL v22 = CGRectContainsRect(v215, v221);
                outlined consume of Path.Storage(v89, v166, v168, v170, v90);
                outlined consume of DisplayList.Item.Value(v172, v173);
                if (v22)
                {
                  CGFloat v7 = v132;
                  CGFloat v4 = v133;
                  goto LABEL_58;
                }
                CGFloat v7 = v132;
                CGFloat v4 = v133;
                CGFloat a = v164;
                break;
              case 6:
                goto LABEL_126;
              default:
                double v114 = *(double *)&v89;
                double v113 = *(double *)&v166;
                double v111 = *(double *)&v168;
                CGFloat v112 = *(double *)&v170;
                goto LABEL_126;
            }
          }
          LODWORD(v16) = v171;
          break;
        case 6:
          outlined copy of DisplayList.Item.Value(v172, v173);
          double v92 = v136;
          double v98 = v137;
          CGFloat v93 = v134;
          CGFloat v91 = v135;
          goto LABEL_89;
        default:
          double v161 = *(double *)(v138 + 16);
          double v92 = *(double *)(v138 + 24);
          CGFloat v91 = *(double *)(v138 + 32);
          CGFloat v93 = *(double *)(v138 + 40);
          outlined copy of DisplayList.Item.Value(v172, v173);
          goto LABEL_88;
      }
LABEL_73:
      if (++v19 >= (uint64_t)v3) {
        goto LABEL_143;
      }
    }
  }
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_156:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined retain of Path.Storage(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t _s7SwiftUI4PathV7StorageOWOrTm_0(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t outlined retain of Path(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t outlined consume of Path.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3) {
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of Path.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3) {
    return swift_retain();
  }
  return result;
}

double DisplayList.ViewUpdater.ViewCache.prepare(item:parentState:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _s7SwiftUI11DisplayListV10ArchiveIDsVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))type metadata accessor for DisplayList.ArchiveIDs, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (char *)&v22 - v7;
  unint64_t v9 = *(void *)(a1 + 40);
  unint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  int v12 = *(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16);
  if (v10 >> 62 == 1)
  {
    switch(BYTE4(v10))
    {
      case 1u:
        uint64_t v18 = swift_projectBox();
        outlined init with copy of DisplayList.ArchiveIDs?(v18, (uint64_t)v8);
        uint64_t v19 = type metadata accessor for DisplayList.ArchiveIDs();
        Swift::Bool v20 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v8, 1, v19) != 1;
        DisplayList.Index.updateArchive(entering:)(v20);
        outlined destroy of DisplayList.ArchiveIDs?((uint64_t)v8);
        break;
      case 9u:
        if (*(unsigned char *)(v9 + 132) == 15)
        {
          unint64_t v21 = *(void *)(a1 + 32);
          if (v21) {
            LODWORD(v21) = (2 * ((33 * (v21 >> 16)) ^ v21)) | 1;
          }
          LOWORD(v26[0]) = v21;
          DisplayList.Item.addDrawingGroup(contentSeed:)((unsigned __int16 *)v26);
        }
        break;
      case 0xAu:
        outlined init with copy of AnyTrackedValue(v9 + 16, (uint64_t)v26);
        uint64_t v23 = v11;
        __int16 v24 = v12;
        char v25 = BYTE2(v12);
        outlined copy of DisplayList.Effect(v9, v10, 10);
        swift_bridgeObjectRetain();
        DisplayList.ViewUpdater.ViewCache.prepareAnimation(_:displayList:item:parentState:)(v26, &v23, a1, a2, a3);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
        swift_bridgeObjectRelease();
        outlined consume of DisplayList.Effect(v9, v10, 10);
        return result;
    }
  }
  else if (!(v10 >> 62) && v9 >> 60 == 4)
  {
    double v13 = *(uint64_t (**)(uint64_t))(**(void **)((v9 & 0xFFFFFFFFFFFFFFFLL) + 0x38) + 120);
    outlined copy of DisplayList.Item.Value(*(void *)(a1 + 40), *(void *)(a1 + 48));
    uint64_t v14 = swift_retain();
    if ((v13(v14) & 1) == 0)
    {
      uint64_t v15 = *(void *)(a1 + 32);
      if (v15) {
        __int16 v16 = (2 * ((33 * WORD1(v15)) ^ v15)) | 1;
      }
      else {
        __int16 v16 = 0;
      }
      LOWORD(v26[0]) = v16;
      DisplayList.Item.addDrawingGroup(contentSeed:)((unsigned __int16 *)v26);
    }
    swift_release();
    outlined consume of DisplayList.Item.Value(v9, v10);
  }
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double result = *(double *)&static Time.infinity;
  *a3 = static Time.infinity;
  return result;
}

void type metadata accessor for DisplayList.ArchiveIDs?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI11DisplayListV10ArchiveIDsVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI11DisplayListV10ArchiveIDsVSgMaTm_1(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s7SwiftUI11DisplayListV10ArchiveIDsVSgMaTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t DisplayList.ViewUpdater.Model.Clip.isEmpty.getter()
{
  uint64_t v1 = *(void **)v0;
  IsEmptCGFloat y = 1;
  switch(*(unsigned char *)(v0 + 32))
  {
    case 2:
      unint64_t v3 = (void *)v1[2];
      uint64_t v4 = v1[3];
      uint64_t v5 = v1[4];
      uint64_t v6 = v1[5];
      return CGRectIsNull(*(CGRect *)&v3);
    case 3:
    case 4:
      goto LABEL_15;
    case 5:
      if (*((unsigned char *)v1 + 16))
      {
        if (*((unsigned char *)v1 + 16) != 1)
        {
          uint64_t v7 = one-time initialization token for bufferCallbacks;
          swift_retain();
          if (v7 != -1) {
            swift_once();
          }
LABEL_12:
          IsEmptCGFloat y = RBPathIsEmpty();
          outlined retain of Path.Storage(v0, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          return IsEmpty;
        }
LABEL_7:
        swift_retain();
        goto LABEL_12;
      }
      if (v1[3]) {
        goto LABEL_7;
      }
      __break(1u);
LABEL_15:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    case 6:
      return IsEmpty;
    default:
      unint64_t v3 = *(void **)v0;
      uint64_t v4 = *(void *)(v0 + 8);
      uint64_t v5 = *(void *)(v0 + 16);
      uint64_t v6 = *(void *)(v0 + 24);
      return CGRectIsNull(*(CGRect *)&v3);
  }
}

uint64_t specialized DisplayList.Item.canMergeWithClipMask(state:)()
{
  unint64_t v2 = *(void *)(v0 + 40);
  unint64_t v1 = *(void *)(v0 + 48);
  IsIdentitCGFloat y = 1;
  switch(v1 >> 62)
  {
    case 1uLL:
      outlined copy of DisplayList.Effect(*(void *)(v0 + 40), *(void *)(v0 + 48), SBYTE4(v1));
      switch(BYTE4(v1))
      {
        case 1:
          uint64_t v4 = v2;
          char v5 = v1;
          char v6 = 1;
          goto LABEL_27;
        case 3:
          uint64_t v9 = v2;
          char v10 = v1;
          char v11 = 3;
          goto LABEL_18;
        case 5:
          uint64_t v4 = v2;
          char v5 = v1;
          char v6 = 5;
          goto LABEL_27;
        case 6:
          uint64_t v4 = v2;
          char v5 = v1;
          char v6 = 6;
          goto LABEL_27;
        case 7:
          uint64_t v9 = v2;
          char v10 = v1;
          char v11 = 7;
LABEL_18:
          outlined consume of DisplayList.Effect(v9, v10, v11);
          return 0;
        case 8:
          long long v8 = *(_OWORD *)(v2 + 16);
          switch(*(unsigned char *)(v2 + 88))
          {
            case 1:
            case 3:
              uint64_t v9 = v2;
              char v10 = v1;
              char v11 = 8;
              goto LABEL_18;
            case 2:
              double v15 = *(double *)(v2 + 24);
              double v16 = *(double *)(v2 + 32);
              CGFloat angle = *(double *)(v2 + 16);
              CGAffineTransformMakeTranslation(&v20, *((CGFloat *)&v8 + 1), v16);
              CGAffineTransformRotate(&v19, &v20, angle);
              CGAffineTransform v20 = v19;
              CGAffineTransformTranslate(&v19, &v20, -v15, -v16);
              long long v8 = *(_OWORD *)&v19.a;
              CGFloat c = v19.c;
              long long v13 = *(_OWORD *)&v19.d;
              tCGFloat y = v19.ty;
              break;
            default:
              tCGFloat y = *(double *)(v2 + 56);
              long long v13 = *(_OWORD *)(v2 + 40);
              CGFloat c = *(double *)(v2 + 32);
              break;
          }
          *(_OWORD *)&v20.CGFloat a = v8;
          v20.CGFloat c = c;
          *(_OWORD *)&v20.CGFloat d = v13;
          v20.tCGFloat y = ty;
          IsIdentitCGFloat y = CGAffineTransformIsIdentity(&v20);
          uint64_t v4 = v2;
          char v5 = v1;
          char v6 = 8;
          goto LABEL_27;
        case 9:
          uint64_t v4 = v2;
          char v5 = v1;
          char v6 = 9;
          goto LABEL_27;
        case 0xA:
        case 0xC:
          goto LABEL_29;
        case 0xB:
          uint64_t v4 = v2;
          char v5 = v1;
          char v6 = 11;
          goto LABEL_27;
        case 0xD:
          uint64_t v4 = v2;
          char v5 = v1;
          char v6 = 13;
          goto LABEL_27;
        case 0xE:
          uint64_t v4 = v2;
          char v5 = v1;
          char v6 = 14;
          goto LABEL_27;
        case 0xF:
          uint64_t v4 = v2;
          char v5 = v1;
          char v6 = 15;
          goto LABEL_27;
        case 0x10:
          uint64_t v4 = v2;
          char v5 = v1;
          char v6 = 16;
          goto LABEL_27;
        case 0x11:
          uint64_t v4 = v2;
          char v5 = v1;
          char v6 = 17;
          goto LABEL_27;
        case 0x12:
          uint64_t v4 = v2;
          char v5 = v1;
          char v6 = 18;
LABEL_27:
          outlined consume of DisplayList.Effect(v4, v5, v6);
          break;
        default:
          return IsIdentity;
      }
      return IsIdentity;
    case 2uLL:
LABEL_29:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    case 3uLL:
      return IsIdentity;
    default:
      switch(v2 >> 60)
      {
        case 6uLL:
        case 7uLL:
        case 8uLL:
          IsIdentitCGFloat y = 0;
          break;
        case 9uLL:
          uint64_t v7 = (unsigned char *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 60);
          goto LABEL_8;
        case 0xAuLL:
          uint64_t v7 = (unsigned char *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 52);
LABEL_8:
          IsIdentitCGFloat y = *v7 & 1;
          break;
        default:
          return IsIdentity;
      }
      return IsIdentity;
  }
}

uint64_t DisplayList.Item.canMergeWithClipRect(_:state:)(CGRect *a1)
{
  double x = a1->origin.x;
  double y = a1->origin.y;
  double width = a1->size.width;
  double height = a1->size.height;
  double v7 = *(double *)v1;
  double v6 = *(double *)(v1 + 8);
  double v9 = *(double *)(v1 + 16);
  double v8 = *(double *)(v1 + 24);
  unint64_t v10 = *(void *)(v1 + 40);
  unint64_t v11 = *(void *)(v1 + 48);
  BOOL v12 = 1;
  switch(v11 >> 62)
  {
    case 1uLL:
      outlined copy of DisplayList.Effect(*(void *)(v1 + 40), *(void *)(v1 + 48), SBYTE4(v11));
      if (BYTE4(v11) == 9)
      {
        BOOL v12 = *(unsigned __int8 *)(v10 + 132) != 2;
        outlined consume of DisplayList.Effect(v10, v11, 9);
      }
      else
      {
        if (BYTE4(v11) == 14)
        {
          uint64_t v13 = v10;
          char v14 = v11;
          LOBYTE(v15) = 14;
        }
        else
        {
          if (BYTE4(v11) == 10)
          {
            while (1)
            {
LABEL_20:
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
            }
          }
          uint64_t v13 = v10;
          char v14 = v11;
          unint64_t v15 = HIDWORD(v11);
        }
        outlined consume of DisplayList.Effect(v13, v14, v15);
        return 1;
      }
      return v12;
    case 2uLL:
      goto LABEL_20;
    case 3uLL:
      return v12;
    default:
      BOOL v12 = 0;
      switch(v10 >> 60)
      {
        case 3uLL:
          if (vabdd_f64(v7, x) >= 0.001 || vabdd_f64(v6, y) >= 0.001 || vabdd_f64(v9, width) >= 0.001) {
            return 0;
          }
          return vabdd_f64(v8, height) < 0.001;
        case 4uLL:
          if (*(unsigned char *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 0x30)) {
            return 0;
          }
          v19.size.double width = *(CGFloat *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          v19.size.double height = *(CGFloat *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
          v19.origin.double x = *(CGFloat *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          v19.origin.double y = *(CGFloat *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          return CGRectContainsRect(v19, *a1);
        case 6uLL:
        case 7uLL:
          return v12;
        case 0xBuLL:
          swift_retain();
          goto LABEL_20;
        case 0xCuLL:
          goto LABEL_20;
        default:
          outlined copy of DisplayList.Content.Value(*(void *)(v1 + 40));
          v17.origin.double x = v7;
          v17.origin.double y = v6;
          v17.size.double width = v9;
          v17.size.double height = v8;
          CGRect v18 = CGRectInset(v17, -0.001, -0.001);
          v20.origin.double x = x;
          v20.origin.double y = y;
          v20.size.double width = width;
          v20.size.double height = height;
          BOOL v12 = CGRectContainsRect(v18, v20);
          outlined consume of DisplayList.Item.Value(v10, v11);
          return v12;
      }
  }
}

uint64_t _AnyResolvedPaint.isCALayerCompatible.getter()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 176) + 64))(*(void *)(*(void *)v0 + 168)) & 1;
}

uint64_t type metadata accessor for AnyLocationBase()
{
  return self;
}

uint64_t DisplayList.Item.canInheritShadowOrFilters.getter()
{
  unint64_t v2 = *(void *)(v0 + 40);
  unint64_t v1 = *(void *)(v0 + 48);
  BOOL v3 = 1;
  switch(v1 >> 62)
  {
    case 1uLL:
      outlined copy of DisplayList.Effect(*(void *)(v0 + 40), *(void *)(v0 + 48), SBYTE4(v1));
      switch(BYTE4(v1))
      {
        case 1:
          outlined consume of DisplayList.Effect(v2, v1, 1);
          return v3;
        case 3:
          uint64_t v5 = v2;
          char v6 = v1;
          char v7 = 3;
          goto LABEL_15;
        case 5:
          outlined consume of DisplayList.Effect(v2, v1, 5);
          return (v1 & 1 | v2) == 0;
        case 6:
          uint64_t v5 = v2;
          char v6 = v1;
          char v7 = 6;
          goto LABEL_15;
        case 7:
          uint64_t v5 = v2;
          char v6 = v1;
          char v7 = 7;
LABEL_15:
          outlined consume of DisplayList.Effect(v5, v6, v7);
          return 0;
        case 8:
          switch(*(unsigned char *)(v2 + 88))
          {
            case 1:
            case 3:
              uint64_t v5 = v2;
              char v6 = v1;
              char v7 = 8;
              goto LABEL_15;
            case 2:
              CGFloat v12 = *(double *)(v2 + 16);
              double v13 = *(double *)(v2 + 24);
              double v14 = *(double *)(v2 + 32);
              CGAffineTransformMakeTranslation(&v16, v13, v14);
              CGAffineTransformRotate(&v15, &v16, v12);
              CGAffineTransform v16 = v15;
              CGAffineTransformTranslate(&v15, &v16, -v13, -v14);
              double a = v15.a;
              double b = v15.b;
              double c = v15.c;
              double d = v15.d;
              break;
            default:
              double d = *(double *)(v2 + 40);
              double a = *(double *)(v2 + 16);
              double b = *(double *)(v2 + 24);
              double c = *(double *)(v2 + 32);
              break;
          }
          outlined consume of DisplayList.Effect(v2, v1, 8);
          if (b == 0.0 && c == 0.0)
          {
            if (a != d) {
              return 0;
            }
            return b == c;
          }
          BOOL v3 = 0;
          if (a == 0.0 && d == 0.0 && a == d) {
            return b == c;
          }
          return v3;
        case 9:
          BOOL v3 = *(unsigned __int8 *)(v2 + 132) != 2;
          outlined consume of DisplayList.Effect(v2, v1, 9);
          return v3;
        case 0xA:
        case 0xC:
          goto LABEL_31;
        case 0xB:
          outlined consume of DisplayList.Effect(v2, v1, 11);
          return v3;
        case 0xD:
          outlined consume of DisplayList.Effect(v2, v1, 13);
          return v3;
        case 0xE:
          outlined consume of DisplayList.Effect(v2, v1, 14);
          return v3;
        case 0xF:
          outlined consume of DisplayList.Effect(v2, v1, 15);
          return v3;
        case 0x10:
          outlined consume of DisplayList.Effect(v2, v1, 16);
          return v3;
        case 0x11:
          outlined consume of DisplayList.Effect(v2, v1, 17);
          return v3;
        case 0x12:
          outlined consume of DisplayList.Effect(v2, v1, 18);
          return v3;
        default:
          return v3;
      }
    case 2uLL:
LABEL_31:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    case 3uLL:
      return v3;
    default:
      return (v2 >> 60) - 8 < 0xFFFFFFFD;
  }
}

uint64_t type metadata accessor for WeakBox()
{
  return __swift_instantiateGenericMetadata();
}

Swift::Bool __swiftcall DisplayList.Item.canMergeWithTransform()()
{
  unint64_t v1 = *(void *)(v0 + 48);
  if (v1 >> 62 != 1) {
    return 1;
  }
  uint64_t v2 = *(void *)(v0 + 40);
  outlined copy of DisplayList.Effect(v2, v1, SBYTE4(v1));
  if (BYTE4(v1) == 14)
  {
    uint64_t v5 = v2;
    char v6 = v1;
    LOBYTE(v7) = 14;
LABEL_10:
    outlined consume of DisplayList.Effect(v5, v6, v7);
    return 1;
  }
  if (BYTE4(v1) != 6)
  {
    uint64_t v5 = v2;
    char v6 = v1;
    unint64_t v7 = HIDWORD(v1);
    goto LABEL_10;
  }
  int v3 = *(unsigned __int8 *)(v2 + 48);
  if (!*(unsigned char *)(v2 + 48))
  {
LABEL_7:
    outlined consume of DisplayList.Effect(v2, v1, 6);
    return 0;
  }
  if (v3 != 1)
  {
    if (v3 == 2) {
      goto LABEL_7;
    }
    uint64_t v5 = v2;
    char v6 = v1;
    LOBYTE(v7) = 6;
    goto LABEL_10;
  }
  double v9 = *(double *)(v2 + 32);
  double v8 = *(double *)(v2 + 40);
  outlined consume of DisplayList.Effect(v2, v1, 6);
  return v9 != v8;
}

void DisplayList.ViewUpdater.Model.State.adjust(for:)(_OWORD *a1)
{
  long long v2 = a1[1];
  long long v3 = a1[2];
  uint64_t v4 = *(void *)(v1 + 96);
  if (v4 || *(void *)(*(void *)(v1 + 88) + 16))
  {
    *(_OWORD *)&v25.double a = *a1;
    *(_OWORD *)&v25.double c = v2;
    *(_OWORD *)&v25.tdouble x = v3;
    v26.double width = 1.0;
    v26.double height = 1.0;
    double width = CGSizeApplyAffineTransform(v26, &v25).width;
    if (fabs(width + -1.0) > 0.001)
    {
      double v24 = 1.0 / width;
      if (v4)
      {
        swift_beginAccess();
        double v6 = *(double *)(v4 + 32);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          swift_beginAccess();
          long long v22 = *(_OWORD *)(v4 + 32);
          uint64_t v7 = *(void *)(v4 + 48);
          int v8 = *(_DWORD *)(v4 + 56);
          char v9 = *(unsigned char *)(v4 + 60);
          type metadata accessor for MutableBox<ResolvedShadowStyle>(0, &lazy cache variable for type metadata for MutableBox<ResolvedShadowStyle>, (uint64_t)&type metadata for ResolvedShadowStyle, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
          uint64_t v10 = swift_allocObject();
          *(_OWORD *)(v10 + 16) = *(_OWORD *)(v4 + 16);
          *(_OWORD *)(v10 + 32) = v22;
          *(void *)(v10 + 48) = v7;
          *(_DWORD *)(v10 + 56) = v8;
          *(unsigned char *)(v10 + 60) = v9;
          swift_release();
          uint64_t v4 = v10;
        }
        swift_beginAccess();
        *(double *)(v4 + 32) = v24 * v6;
        swift_beginAccess();
        int8x16_t v23 = vbicq_s8((int8x16_t)vmulq_n_f64(*(float64x2_t *)(v4 + 40), v24), (int8x16_t)vceqzq_f64(*(float64x2_t *)(v4 + 40)));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          swift_beginAccess();
          long long v21 = *(_OWORD *)(v4 + 32);
          uint64_t v11 = *(void *)(v4 + 48);
          int v12 = *(_DWORD *)(v4 + 56);
          char v13 = *(unsigned char *)(v4 + 60);
          type metadata accessor for MutableBox<ResolvedShadowStyle>(0, &lazy cache variable for type metadata for MutableBox<ResolvedShadowStyle>, (uint64_t)&type metadata for ResolvedShadowStyle, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
          uint64_t v14 = swift_allocObject();
          *(_OWORD *)(v14 + 16) = *(_OWORD *)(v4 + 16);
          *(_OWORD *)(v14 + 32) = v21;
          *(void *)(v14 + 48) = v11;
          *(_DWORD *)(v14 + 56) = v12;
          *(unsigned char *)(v14 + 60) = v13;
          swift_release();
          uint64_t v4 = v14;
        }
        swift_beginAccess();
        *(int8x16_t *)(v4 + 40) = v23;
        swift_retain();
        swift_release();
        *(void *)(v1 + 96) = v4;
        swift_release();
      }
      CGAffineTransform v15 = *(void **)(v1 + 88);
      uint64_t v16 = v15[2];
      if (v16)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_20:
        }
          CGAffineTransform v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
        unint64_t v17 = 0;
        CGRect v18 = v15 + 10;
        do
        {
          if (v17 >= v15[2])
          {
            __break(1u);
            goto LABEL_20;
          }
          if (!*((unsigned char *)v18 + 68))
          {
            uint64_t v19 = *(v18 - 5);
            double v20 = *((double *)v18 - 6);
            outlined consume of GraphicsFilter(*(void **)&v20, v19, (id)*(v18 - 4), *(v18 - 3), *(v18 - 2), *(v18 - 1), *v18, v18[1], v18[2], v18[3], v18[4], v18[5], v18[6], v18[7], *((_DWORD *)v18 + 16), BYTE2(*((_DWORD *)v18 + 16)));
            *((double *)v18 - 6) = v24 * v20;
            *(v18 - 5) = v19 & 0x101;
            *((_OWORD *)v18 - 2) = 0u;
            *((_OWORD *)v18 - 1) = 0u;
            *(_OWORD *)CGRect v18 = 0u;
            *((_OWORD *)v18 + 1) = 0u;
            *((_OWORD *)v18 + 2) = 0u;
            *((_OWORD *)v18 + 3) = 0u;
            *(void *)((char *)v18 + 61) = 0;
          }
          ++v17;
          v18 += 15;
        }
        while (v16 != v17);
        *(void *)(v1 + 88) = v15;
      }
    }
  }
}

void type metadata accessor for Unmanaged<ViewGraph>(uint64_t a1)
{
}

void type metadata accessor for (PreferenceKey.Type, AGAttribute)()
{
  if (!lazy cache variable for type metadata for (PreferenceKey.Type, AGAttribute))
  {
    type metadata accessor for PreferenceKey.Type(255, (unint64_t *)&lazy cache variable for type metadata for PreferenceKey.Type, &lazy cache variable for type metadata for PreferenceKey);
    type metadata accessor for AGAttribute(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (PreferenceKey.Type, AGAttribute));
    }
  }
}

uint64_t _ViewList_ID.elementID(at:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    int v3 = *(_DWORD *)(v2 + 4);
    uint64_t v4 = *(void *)(v2 + 8);
    *(_DWORD *)a2 = result;
    *(_DWORD *)(a2 + 4) = v3;
    *(void *)(a2 + 8) = v4;
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t destructiveInjectEnumTag for BodyInputElement(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

uint64_t getEnumTag for BodyInputElement(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

double static Font.Weight.regular.getter()
{
  return 0.0;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(long long *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for OpacityRendererEffect, (void (*)(uint64_t *__return_ptr, uint64_t))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for _OpacityEffect, (void (*)(uint64_t *__return_ptr, uint64_t))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for _ColorMatrixEffect, 0);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for _PremultipliedColorMatrixEffect, 1);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, 1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for _HueRotationEffect, 6);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, 2, (void (*)(uint64_t *__return_ptr, uint64_t))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for _SaturationEffect, 7);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for _BrightnessEffect, 8);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for _GrayscaleEffect, 10);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for _ContrastEffect, 9);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

uint64_t destroy for BodyInputElement()
{
  return outlined consume of BodyInputElement();
}

BOOL static UnitPoint.== infix(_:_:)(double a1, double a2, double a3, double a4)
{
  return a2 == a4 && a1 == a3;
}

SwiftUI::LocalizedStringKey __swiftcall LocalizedStringKey.init(stringLiteral:)(SwiftUI::LocalizedStringKey stringLiteral)
{
  uint64_t v1 = (void *)MEMORY[0x263F8EE78];
  Swift::Bool v2 = 0;
  stringLiteral.arguments._rawValue = v1;
  stringLiteral.hasFormatting = v2;
  return stringLiteral;
}

uint64_t _ViewInputs.containerPosition.getter()
{
  return *(unsigned int *)(v0 + 68);
}

ValueMetadata *type metadata accessor for PinnedScrollableViews()
{
  return &type metadata for PinnedScrollableViews;
}

double distance(_:_:)(double a1, double a2, double a3, double a4)
{
  return sqrt((a3 - a1) * (a3 - a1) + (a4 - a2) * (a4 - a2));
}

uint64_t type metadata accessor for BoxVTableBase()
{
  return self;
}

uint64_t _ViewInputs.safeAreaInsets.getter()
{
  return *(unsigned int *)(v0 + 76);
}

ValueMetadata *type metadata accessor for EmptyModifier()
{
  return &type metadata for EmptyModifier;
}

ValueMetadata *type metadata accessor for HierarchicalShapeStyle()
{
  return &type metadata for HierarchicalShapeStyle;
}

ValueMetadata *type metadata accessor for Alignment()
{
  return &type metadata for Alignment;
}

uint64_t SizeAndSpacingContext.context.getter()
{
  return *v0;
}

ValueMetadata *type metadata accessor for ContentShapeKinds()
{
  return &type metadata for ContentShapeKinds;
}

ValueMetadata *type metadata accessor for NamedCoordinateSpace()
{
  return &type metadata for NamedCoordinateSpace;
}

uint64_t getEnumTagSinglePayload for _ViewList_View(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

double ScrollableCollectionSubview.frame.getter()
{
  return *(double *)(v0 + 16);
}

ValueMetadata *type metadata accessor for LayoutSubview()
{
  return &type metadata for LayoutSubview;
}

uint64_t View.onChange<A>(of:initial:_:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v36 = a9;
  uint64_t v37 = a3;
  int v35 = a2;
  uint64_t v14 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for _ValueActionModifier2();
  uint64_t v31 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v31 - v18;
  uint64_t v33 = type metadata accessor for ModifiedContent();
  uint64_t v34 = *(void *)(v33 - 8);
  double v20 = MEMORY[0x270FA5388](v33);
  long long v22 = (char *)&v31 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v16, a1, a6, v20);
  int8x16_t v23 = (uint64_t (*)())swift_allocObject();
  *((void *)v23 + 2) = a5;
  *((void *)v23 + 3) = a6;
  *((void *)v23 + 4) = a7;
  *((void *)v23 + 5) = a8;
  uint64_t v24 = v32;
  *((void *)v23 + 6) = v37;
  *((void *)v23 + 7) = v24;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v19, v16, a6);
  CGAffineTransform v25 = (uint64_t (**)())&v19[*(int *)(v17 + 36)];
  *CGAffineTransform v25 = partial apply for closure #1 in View.onChange<A>(of:initial:_:);
  v25[1] = v23;
  View.modifier<A>(_:)(v19, a5, v17);
  CGSize v26 = *(void (**)(char *, uint64_t))(v31 + 8);
  swift_retain();
  v26(v19, v17);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  if (v35)
  {
    swift_retain();
    uint64_t v27 = v37;
    uint64_t v28 = v24;
  }
  v40[0] = v27;
  v40[1] = v28;
  v40[2] = 0;
  v40[3] = 0;
  uint64_t v38 = a7;
  int8x16_t v39 = &protocol witness table for _ValueActionModifier2<A>;
  uint64_t v29 = v33;
  swift_getWitnessTable();
  View.modifier<A>(_:)(v40, v29, &type metadata for _AppearanceActionModifier);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v27);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v22, v29);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Color@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<BackdropView>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<Color>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<Color>, (uint64_t)&type metadata for Color, (uint64_t)&protocol witness table for Color);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(void *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(void *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(void *)(v14 + 64) = v9;
  uint64_t v22 = v2;
  int v23 = v3;
  uint64_t v24 = v4;
  int v25 = v5;
  int v26 = v6;
  int v27 = v7;
  int v28 = v8;
  uint64_t v29 = v9;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  int v32 = v18;
  uint64_t v33 = v17;
  char v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Image@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<BackdropView>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<Image>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<Image>, (uint64_t)&type metadata for Image, (uint64_t)&protocol witness table for Image);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(void *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(void *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(void *)(v14 + 64) = v9;
  uint64_t v22 = v2;
  int v23 = v3;
  uint64_t v24 = v4;
  int v25 = v5;
  int v26 = v6;
  int v27 = v7;
  int v28 = v8;
  uint64_t v29 = v9;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  int v32 = v18;
  uint64_t v33 = v17;
  char v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Spacer@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<BackdropView>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<Spacer>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<Spacer>, (uint64_t)&type metadata for Spacer, (uint64_t)&protocol witness table for Spacer);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(void *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(void *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(void *)(v14 + 64) = v9;
  uint64_t v22 = v2;
  int v23 = v3;
  uint64_t v24 = v4;
  int v25 = v5;
  int v26 = v6;
  int v27 = v7;
  int v28 = v8;
  uint64_t v29 = v9;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  int v32 = v18;
  uint64_t v33 = v17;
  char v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Text@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<BackdropView>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<Text>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<Text>, (uint64_t)&type metadata for Text, (uint64_t)&protocol witness table for Text);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(void *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(void *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(void *)(v14 + 64) = v9;
  uint64_t v22 = v2;
  int v23 = v3;
  uint64_t v24 = v4;
  int v25 = v5;
  int v26 = v6;
  int v27 = v7;
  int v28 = v8;
  uint64_t v29 = v9;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  int v32 = v18;
  uint64_t v33 = v17;
  char v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

void type metadata accessor for UnaryElements<TypedUnaryViewGenerator<BackdropView>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for TypedUnaryViewGenerator<BackdropView>(255, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
    unint64_t v6 = type metadata accessor for UnaryElements();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t View.transition(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  return View._trait<A>(_:_:)((uint64_t)&type metadata for TransitionTraitKey, (uint64_t)&v3, a2);
}

uint64_t _TraitWritingModifier.AddTrait.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = type metadata accessor for _TraitWritingModifier();
  MEMORY[0x270FA5388](v10 - 8);
  unint64_t v12 = (char *)&v16 - v11;
  _TraitWritingModifier.AddTrait.traits.getter(a1, &v16);
  uint64_t v13 = v16;
  if (!v16) {
    uint64_t v13 = MEMORY[0x263F8EE78];
  }
  uint64_t v17 = v13;
  _TraitWritingModifier.AddTrait.modifier.getter((uint64_t (*)(void))type metadata accessor for _TraitWritingModifier, (uint64_t)v12);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, AssociatedTypeWitness);
  uint64_t result = ViewTraitCollection.subscript.setter((uint64_t)v9, v14, a2);
  *a3 = v17;
  return result;
}

uint64_t View._trait<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = type metadata accessor for _TraitWritingModifier();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a2, AssociatedTypeWitness, v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v13, v8, AssociatedTypeWitness);
  View.modifier<A>(_:)(v13, a3, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t type metadata accessor for _TraitWritingModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _TraitWritingModifier.AddTrait.modifier.getter@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t Value = AGGraphGetValue();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v5(a2, Value, v3);
}

uint64_t _TraitWritingModifier.AddTrait.traits.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*MEMORY[0x263F288F8] == HIDWORD(a1))
  {
    uint64_t result = 0;
  }
  else
  {
    AGGraphGetValue();
    uint64_t result = swift_bridgeObjectRetain();
  }
  *a2 = result;
  return result;
}

uint64_t View.onChange<A>(of:initial:_:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v41 = a7;
  uint64_t v48 = a1;
  uint64_t v49 = a3;
  int v43 = a2;
  uint64_t v47 = a8;
  uint64_t v11 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v38 = v12;
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = v14;
  uint64_t v15 = type metadata accessor for _ValueActionModifier2();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  int v18 = (char *)&v35 - v17;
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v45 = *(void *)(v19 - 8);
  uint64_t v46 = v19;
  double v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v35 - v21;
  int v35 = *(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16);
  v35(v13, v48, a6, v20);
  uint64_t v37 = v11;
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v36(v18, v13, a6);
  int v23 = &v18[*(int *)(v15 + 36)];
  *(void *)int v23 = v49;
  *((void *)v23 + 1) = a4;
  double v44 = v22;
  uint64_t v39 = a5;
  uint64_t v24 = v41;
  View.modifier<A>(_:)(v18, a5, v15);
  int v25 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v42 = a4;
  swift_retain();
  v25(v18, v15);
  int v26 = 0;
  int v27 = 0;
  if (v43)
  {
    ((void (*)(char *, uint64_t, uint64_t))v35)(v13, v48, a6);
    unint64_t v28 = (*(unsigned __int8 *)(v37 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    int v27 = (void *)swift_allocObject();
    v27[2] = v39;
    v27[3] = a6;
    uint64_t v29 = v40;
    v27[4] = v24;
    v27[5] = v29;
    uint64_t v30 = (char *)v27 + v28;
    uint64_t v31 = v42;
    v27[6] = v49;
    v27[7] = v31;
    v36(v30, v13, a6);
    swift_retain();
    int v26 = partial apply for closure #1 in View.onChange<A>(of:initial:_:);
  }
  v52[0] = v26;
  v52[1] = v27;
  v52[2] = 0;
  v52[3] = 0;
  uint64_t v50 = v24;
  double v51 = &protocol witness table for _ValueActionModifier2<A>;
  uint64_t v32 = v46;
  swift_getWitnessTable();
  uint64_t v33 = v44;
  View.modifier<A>(_:)(v52, v32, &type metadata for _AppearanceActionModifier);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v26);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v33, v32);
}

uint64_t View.environment<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v7 = *(void *)(*MEMORY[0x263F8DE50] + *a1 + 8);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = type metadata accessor for _EnvironmentKeyWritingModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (uint64_t **)((char *)&v18 - v14);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a2, v7, v13);
  _EnvironmentKeyWritingModifier.init(keyPath:value:)(a1, (uint64_t)v10, v15);
  View.modifier<A>(_:)(v15, a3, v11);
  uint64_t v16 = *(uint64_t (**)(uint64_t **, uint64_t))(v12 + 8);
  swift_retain();
  return v16(v15, v11);
}

uint64_t _EnvironmentKeyWritingModifier.init(keyPath:value:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v4 = *a1;
  *a3 = a1;
  uint64_t v5 = *(void *)(*MEMORY[0x263F8DE50] + v4 + 8);
  uint64_t v6 = (char *)a3 + *(int *)(type metadata accessor for _EnvironmentKeyWritingModifier() + 28);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);

  return v7(v6, a2, v5);
}

uint64_t initializeBufferWithCopyOfBuffer for Text.Sizing(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t ViewTraitCollection.tag<A>(for:)@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for TagValueTraitKey.Value();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v20 - v7;
  uint64_t v9 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v2;
  v20[1] = *v2;
  uint64_t v14 = type metadata accessor for TagValueTraitKey();
  uint64_t WitnessTable = swift_getWitnessTable();
  ViewTraitCollection.subscript.getter(v14, WitnessTable, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v16(v12, v8, a1);
    swift_bridgeObjectRetain();
    char v17 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v13);
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      v16(a2, v12, a1);
      uint64_t v18 = 0;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, v18, 1, a1);
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a1);
  }
  uint64_t v18 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, v18, 1, a1);
}

uint64_t ViewTraitCollection.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return ViewTraitCollection.value<A>(for:)(a1, a2, a3);
}

uint64_t ViewTraitCollection.value<A>(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  double v9 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)v13 - v10;
  v13[1] = *v3;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 16))(a1, a2, v9);
  ViewTraitCollection.value<A>(for:defaultValue:)((uint64_t)v11, a1, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
}

uint64_t ViewTraitCollection.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  uint64_t v41 = a1;
  uint64_t v8 = type metadata accessor for ViewTraitCollection.AnyTrait();
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v36 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v37 = (char *)&v34 - v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v13 = (uint64_t *)((char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15.n128_f64[0] = MEMORY[0x270FA5388](v14);
  int v35 = (char *)&v34 - v16;
  uint64_t v17 = *(void *)(*v3 + 16);
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    while (1)
    {
      if ((unint64_t)v19 >= *(void *)(*v6 + 16))
      {
        __break(1u);
        goto LABEL_16;
      }
      outlined init with copy of AnyTrackedValue(*v6 + v18 * 8 + 32, (uint64_t)v43);
      uint64_t v5 = v44;
      uint64_t v4 = v45;
      __swift_project_boxed_opaque_existential_1(v43, v44);
      uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v5, v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
      if (v20 == a3) {
        break;
      }
      ++v19;
      v18 += 5;
      if ((char *)v17 == v19) {
        goto LABEL_6;
      }
    }
    uint64_t v5 = v41;
    unint64_t v28 = v35;
    uint64_t v17 = AssociatedTypeWitness;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v35, v41, AssociatedTypeWitness);
    uint64_t v29 = (void *)*v6;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v6 = (uint64_t)v29;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v29);
      uint64_t v29 = (void *)result;
      *uint64_t v6 = result;
    }
    if ((unint64_t)v19 < v29[2])
    {
      uint64_t v31 = (uint64_t)&v29[v18 + 4];
      uint64_t v32 = v29[v18 + 7];
      uint64_t v33 = v29[v18 + 8];
      __swift_mutable_project_boxed_opaque_existential_1(v31, v32);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 24))(v28, v17, v32, v33);
      *uint64_t v6 = (uint64_t)v29;
      uint64_t v4 = v42;
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v5, v17);
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    uint64_t v5 = v41;
    uint64_t v4 = v42;
    uint64_t v17 = AssociatedTypeWitness;
    (*(void (**)(void *, uint64_t, uint64_t, __n128))(v42 + 16))(v13, v41, AssociatedTypeWitness, v15);
    uint64_t v21 = swift_getAssociatedTypeWitness();
    uint64_t v19 = v37;
    (*(void (**)(char *, void *, uint64_t))(*(void *)(v21 - 8) + 32))(v37, v13, v21);
    uint64_t v13 = (void *)*v6;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v6 = (uint64_t)v13;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
LABEL_16:
      uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
      *uint64_t v6 = (uint64_t)v13;
    }
    unint64_t v24 = v13[2];
    unint64_t v23 = v13[3];
    if (v24 >= v23 >> 1) {
      *uint64_t v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v13);
    }
    uint64_t v26 = v38;
    uint64_t v25 = v39;
    uint64_t v27 = (uint64_t)v36;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v36, v19, v39);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v27, v6, v25, (uint64_t)&protocol witness table for ViewTraitCollection.AnyTrait<A>);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v25);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v5, v17);
  }
  return result;
}

uint64_t mergeStatic #1 (from:to:) in static _ViewListOutputs.concat(_:inputs:)@<X0>(unint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  unint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v7 != 1)
  {
    if (!v7)
    {
      uint64_t v12 = 0;
      char v13 = 0;
      uint64_t v32 = &type metadata for EmptyViewListElements;
      uint64_t v33 = &protocol witness table for EmptyViewListElements;
LABEL_15:
      outlined init with copy of AnyTrackedValue((uint64_t)&v31, (uint64_t)v37);
      swift_beginAccess();
      uint64_t v20 = *(void *)(a4 + 16);
      char v21 = (*(void *)(a5 + 56) & 3) == 1;
      long long v22 = *(_OWORD *)(a5 + 16);
      long long v38 = *(_OWORD *)a5;
      long long v39 = v22;
      long long v40 = *(_OWORD *)(a5 + 32);
      unint64_t v23 = _GraphInputs.stableIDScope.getter();
      char v25 = v24 & 1;
      uint64_t v35 = MEMORY[0x263F8EE88];
      char v36 = 0;
      uint64_t v30 = (void *)MEMORY[0x263F8EE78];
      *((void *)&v39 + 1) = &type metadata for BaseViewList;
      *(void *)&long long v40 = &protocol witness table for BaseViewList;
      *(void *)&long long v38 = swift_allocObject();
      BaseViewList.init(elements:implicitID:canTransition:stableIDScope:traitKeys:traits:)((uint64_t)v37, v20, v21, v23, v25, &v35, &v30, v38 + 16);
      type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
      type metadata accessor for External<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for External<ViewList>, MEMORY[0x263F288C8]);
      lazy protocol witness table accessor for type External<ViewList> and conformance External<A>();
      LODWORD(v23) = Attribute.init<A>(body:value:flags:update:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
      uint64_t result = swift_beginAccess();
      uint64_t v27 = *(void *)(a4 + 16) + 1;
      *(void *)(a4 + 16) = v27;
      *(_DWORD *)a6 = v23;
      *(void *)(a6 + 8) = 0;
      *(unsigned char *)(a6 + 40) = 1;
      *(void *)(a6 + 48) = v27;
      *(void *)(a6 + 56) = v12;
      *(unsigned char *)(a6 + 64) = v13;
      return result;
    }
    if (a2 >= (uint64_t)a1)
    {
      if ((a1 & 0x8000000000000000) == 0)
      {
        unint64_t v16 = *(void *)(a3 + 16);
        if (v16 >= a1 && (uint64_t)v16 >= a2)
        {
          uint64_t v32 = (ValueMetadata *)&unk_26FA4D168;
          uint64_t v33 = &protocol witness table for MergedElements;
          uint64_t v17 = (void *)swift_allocObject();
          *(void *)&long long v31 = v17;
          v17[2] = a3;
          v17[3] = a3 + 32;
          v17[4] = a1;
          v17[5] = (2 * a2) | 1;
          BOOL v18 = a2 >= a1;
          unint64_t v19 = a2 - a1;
          if (!v19)
          {
            swift_bridgeObjectRetain();
            uint64_t v12 = 0;
            char v13 = 0;
            goto LABEL_15;
          }
          if (v19 != 0 && v18)
          {
            swift_bridgeObjectRetain();
            uint64_t v12 = 0;
            char v13 = 0;
            uint64_t v28 = a3 + 72 * a1 + 32;
            while (1)
            {
              outlined init with copy of _ViewListOutputs(v28, (uint64_t)&v38);
              if (v13 & 1) != 0 || (v42)
              {
                uint64_t v12 = 0;
                char v13 = 1;
              }
              else
              {
                BOOL v29 = __OFADD__(v12, v41);
                v12 += v41;
                if (v29)
                {
                  __break(1u);
                  goto LABEL_26;
                }
                char v13 = 0;
              }
              outlined destroy of _ViewListOutputs((uint64_t)&v38);
              v28 += 72;
              if (!--v19) {
                goto LABEL_15;
              }
            }
          }
LABEL_32:
          __break(1u);
        }
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (*(void *)(a3 + 16) <= a1)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v14 = a3 + 72 * a1 + 32;
  outlined init with copy of _ViewListOutputs(v14, (uint64_t)&v38);
  outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(&v38, &v31);
  if ((v34 & 1) == 0)
  {
    outlined init with take of ScrollStateRequest(&v31, (uint64_t)v37);
    outlined init with take of ScrollStateRequest(v37, (uint64_t)&v31);
    uint64_t v12 = *(void *)(v14 + 56);
    char v13 = *(unsigned char *)(v14 + 64);
    goto LABEL_15;
  }
  outlined destroy of _ViewListOutputs.Views((uint64_t)&v31);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static UnaryView._makeViewList(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a2;
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[5];
  int v7 = *((_DWORD *)a2 + 16);
  uint64_t v8 = a2[9];
  char v9 = *((unsigned char *)a2 + 80);
  int v20 = *a1;
  uint64_t v11 = v3;
  int v12 = v4;
  uint64_t v13 = v5;
  long long v14 = *(_OWORD *)(a2 + 3);
  uint64_t v15 = v6;
  long long v16 = *((_OWORD *)a2 + 3);
  int v17 = v7;
  uint64_t v18 = v8;
  char v19 = v9;
  return static _ViewListOutputs.unaryViewList<A>(view:inputs:)((uint64_t)&v11, a3);
}

uint64_t static _ViewListOutputs.unaryViewList<A>(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unsigned int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = *(_DWORD *)(a1 + 28);
  unsigned int v22 = v5;
  int v23 = v3;
  unsigned int v8 = *(_DWORD *)(a1 + 32);
  unsigned int v7 = *(_DWORD *)(a1 + 36);
  unsigned int v20 = v7;
  unsigned int v21 = v6;
  uint64_t v27 = *(void *)(a1 + 56);
  uint64_t v28 = *(void *)(a1 + 48);
  int v26 = *(_DWORD *)(a1 + 64);
  uint64_t v25 = *(void *)(a1 + 72);
  char v24 = *(unsigned char *)(a1 + 80);
  uint64_t v45 = *(void *)(a1 + 40);
  uint64_t v9 = v45;
  uint64_t v46 = AGCreateWeakAttribute();
  uint64_t v40 = v2;
  int v41 = v3;
  uint64_t v42 = v4;
  unint64_t v43 = __PAIR64__(v6, v5);
  uint64_t v44 = (_UNKNOWN **)__PAIR64__(v7, v8);
  uint64_t v10 = type metadata accessor for TypedUnaryViewGenerator();
  UnaryElements.init(body:baseInputs:)((uint64_t)&v46, &v40, v10, (uint64_t)&v30);
  uint64_t v11 = v31;
  int v12 = v32;
  unint64_t v13 = v33;
  uint64_t v14 = v35;
  uint64_t v15 = type metadata accessor for UnaryElements();
  uint64_t v16 = v30;
  long long v19 = v34;
  unint64_t v43 = v15;
  uint64_t v44 = &protocol witness table for UnaryElements<A>;
  uint64_t v17 = swift_allocObject();
  uint64_t v40 = v17;
  *(void *)(v17 + 16) = v16;
  *(void *)(v17 + 24) = v11;
  *(_DWORD *)(v17 + 32) = v12;
  *(void *)(v17 + 40) = v13;
  *(_OWORD *)(v17 + 48) = v19;
  *(void *)(v17 + 64) = v14;
  uint64_t v30 = v2;
  LODWORD(v31) = v23;
  uint64_t v32 = v4;
  unint64_t v33 = __PAIR64__(v21, v22);
  *(void *)&long long v34 = __PAIR64__(v20, v8);
  *((void *)&v34 + 1) = v9;
  uint64_t v35 = v28;
  uint64_t v36 = v27;
  int v37 = v26;
  uint64_t v38 = v25;
  char v39 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)&v40, &v30, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
}

uint64_t static _ViewListOutputs.staticList(_:inputs:staticCount:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  int v12 = *((_DWORD *)a2 + 16);
  uint64_t v25 = a2[9];
  char v24 = *((unsigned char *)a2 + 80);
  uint64_t v27 = *a2;
  int v28 = v7;
  uint64_t v29 = v8;
  long long v30 = *(_OWORD *)(a2 + 3);
  uint64_t v31 = v9;
  uint64_t v13 = _GraphInputs.stableIDScope.getter();
  int v15 = *MEMORY[0x263F288F8];
  BOOL v17 = v12 != *MEMORY[0x263F288F8] || (v11 & 3) == 1;
  int v18 = (v14 & 1) == 0 || v17;
  if (v18 == 1)
  {
    uint64_t v19 = v13;
    char v20 = v14;
    outlined init with copy of AnyTrackedValue(a1, (uint64_t)v26);
    if (v11)
    {
      BOOL v21 = (v11 & 2) == 0;
      if (v12 != v15)
      {
LABEL_17:
        outlined init with take of ScrollStateRequest(v26, (uint64_t)&v27);
        uint64_t v31 = v10;
        BOOL v32 = v21;
        uint64_t v33 = v19;
        char v34 = v20 & 1;
        uint64_t v35 = v25;
        char v36 = v24;
        int v37 = v12;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
        lazy protocol witness table accessor for type BaseViewList.Init and conformance BaseViewList.Init();
        swift_bridgeObjectRetain();
        int v23 = Attribute.init<A>(body:value:flags:update:)();
        uint64_t result = outlined destroy of BaseViewList.Init((uint64_t)&v27);
        *(_DWORD *)a4 = v23;
        *(void *)(a4 + 8) = 0;
        goto LABEL_18;
      }
    }
    else
    {
      BOOL v21 = 0;
      if (v12 != v15) {
        goto LABEL_17;
      }
    }
    int v12 = v15;
    goto LABEL_17;
  }
  uint64_t result = outlined init with copy of AnyTrackedValue(a1, a4);
LABEL_18:
  *(unsigned char *)(a4 + 40) = v18;
  *(void *)(a4 + 48) = v10 + a3;
  *(void *)(a4 + 56) = a3;
  *(unsigned char *)(a4 + 64) = 0;
  return result;
}

uint64_t _GraphInputs.stableIDScope.getter()
{
  if ((*(unsigned char *)(v0 + 37) & 1) == 0) {
    return 0;
  }
  uint64_t v2 = *(void *)v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v3 = specialized find<A>(_:key:)(v2);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 72);
    unsigned int v5 = (unsigned int *)(v3 + 76);
  }
  else
  {
    uint64_t v4 = &static _DisplayList_StableIdentityScope.defaultValue;
    unsigned int v5 = (unsigned int *)&static _DisplayList_StableIdentityScope.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1)
    {
      swift_once();
      unsigned int v5 = (unsigned int *)&static _DisplayList_StableIdentityScope.defaultValue + 1;
    }
  }
  uint64_t v6 = *(unsigned int *)v4;
  uint64_t v7 = *v5;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x263F288F8]) {
    return 0;
  }
  else {
    return v6 | (v7 << 32);
  }
}

uint64_t outlined destroy of BaseViewList.Init(uint64_t a1)
{
  return a1;
}

uint64_t destroy for BaseViewList.Init(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of BaseViewList.Init(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for BaseViewList.Init(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 52) = *(void *)(a2 + 52);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t BaseViewList.Init.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  outlined init with copy of AnyTrackedValue(v1, (uint64_t)v16);
  uint64_t v4 = *(void *)(v1 + 40);
  char v5 = *(unsigned char *)(v1 + 48);
  unint64_t v6 = *(void *)(v2 + 52);
  char v7 = *(unsigned char *)(v2 + 60);
  char v8 = *(unsigned char *)(v2 + 72);
  uint64_t v14 = *(void *)(v2 + 64);
  char v15 = v8;
  if (*(_DWORD *)(v2 + 76) == *MEMORY[0x263F288F8])
  {
    uint64_t v9 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    AGGraphGetValue();
    uint64_t v9 = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v13 = v9;
  a1[3] = (uint64_t)&type metadata for BaseViewList;
  a1[4] = (uint64_t)&protocol witness table for BaseViewList;
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = v10 + 16;
  *a1 = v10;
  swift_bridgeObjectRetain();
  return BaseViewList.init(elements:implicitID:canTransition:stableIDScope:traitKeys:traits:)((uint64_t)v16, v4, v5, v6, v7, &v14, &v13, v11);
}

uint64_t BaseViewList.init(elements:implicitID:canTransition:stableIDScope:traitKeys:traits:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t *a6@<X5>, void **a7@<X6>, uint64_t a8@<X8>)
{
  LOBYTE(v8) = a5;
  uint64_t v12 = a1;
  uint64_t v14 = *a6;
  char v15 = *((unsigned char *)a6 + 8);
  uint64_t v16 = *a7;
  outlined init with copy of AnyTrackedValue(a1, a8);
  *(void *)(a8 + 40) = a2;
  *(void *)(a8 + 48) = v14;
  *(unsigned char *)(a8 + 56) = v15;
  *(void *)(a8 + 64) = v16;
  if ((a3 & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v17 = v16[2];
  if (!v17)
  {
LABEL_8:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_35;
    }
    while (1)
    {
      unint64_t v24 = v16[2];
      unint64_t v23 = v16[3];
      if (v24 >= v23 >> 1) {
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v16);
      }
      _sSnySiGMaTm_1(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<CanTransitionTraitKey>, (uint64_t)&type metadata for CanTransitionTraitKey, (uint64_t)&protocol witness table for CanTransitionTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
      uint64_t v44 = (void *)v25;
      uint64_t v45 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
      LOBYTE(v43) = 1;
      v16[2] = v24 + 1;
      outlined init with take of ScrollStateRequest(&v43, (uint64_t)&v16[5 * v24 + 4]);
      *(void *)(a8 + 64) = v16;
LABEL_12:
      if (v8) {
        return __swift_destroy_boxed_opaque_existential_1(v12);
      }
LABEL_13:
      char v8 = (_UNKNOWN **)HIDWORD(a4);
      uint64_t v26 = v16[2];
      if (!v26)
      {
LABEL_19:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
        }
        unint64_t v31 = v16[2];
        unint64_t v30 = v16[3];
        if (v31 >= v30 >> 1) {
          uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v16);
        }
        _sSnySiGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<_DisplayList_StableIdentityScope>, (uint64_t)&type metadata for _DisplayList_StableIdentityScope, (uint64_t)&protocol witness table for _DisplayList_StableIdentityScope, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
        uint64_t v44 = (void *)v32;
        uint64_t v45 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
        *(void *)&long long v43 = __PAIR64__(v8, a4);
        v16[2] = v31 + 1;
        outlined init with take of ScrollStateRequest(&v43, (uint64_t)&v16[5 * v31 + 4]);
        *(void *)(a8 + 64) = v16;
        return __swift_destroy_boxed_opaque_existential_1(v12);
      }
      uint64_t v42 = v12;
      uint64_t v12 = HIDWORD(a4);
      unsigned int v27 = a4;
      uint64_t v18 = 0;
      a4 = 0;
      while (1)
      {
        uint64_t v28 = *(void *)(a8 + 64);
        if (a4 >= *(void *)(v28 + 16)) {
          break;
        }
        outlined init with copy of AnyTrackedValue(v28 + v18 * 8 + 32, (uint64_t)&v43);
        uint64_t v16 = v44;
        char v8 = v45;
        __swift_project_boxed_opaque_existential_1(&v43, (uint64_t)v44);
        uint64_t v29 = (ValueMetadata *)((uint64_t (*)(void *, _UNKNOWN **))v8[1])(v16, v8);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
        if (v29 == &type metadata for _DisplayList_StableIdentityScope)
        {
          *(void *)&long long v43 = __PAIR64__(v12, v27);
          uint64_t v19 = *(ValueMetadata **)(a8 + 64);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(a8 + 64) = v19;
          if ((result & 1) == 0) {
            goto LABEL_37;
          }
          goto LABEL_30;
        }
        ++a4;
        v18 += 5;
        if (v26 == a4)
        {
          uint64_t v16 = *(void **)(a8 + 64);
          LODWORD(a4) = v27;
          LODWORD(v8) = v12;
          uint64_t v12 = v42;
          goto LABEL_19;
        }
      }
LABEL_34:
      __break(1u);
LABEL_35:
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
  }
  uint64_t v42 = a4;
  uint64_t v18 = 0;
  a4 = 0;
  uint64_t v19 = &type metadata for CanTransitionTraitKey;
  while (1)
  {
    uint64_t v20 = *(void *)(a8 + 64);
    if (a4 >= *(void *)(v20 + 16))
    {
      __break(1u);
      goto LABEL_34;
    }
    outlined init with copy of AnyTrackedValue(v20 + v18 * 8 + 32, (uint64_t)&v43);
    uint64_t v16 = v44;
    BOOL v21 = v45;
    __swift_project_boxed_opaque_existential_1(&v43, (uint64_t)v44);
    unsigned int v22 = (ValueMetadata *)((uint64_t (*)(void *, _UNKNOWN **))v21[1])(v16, v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
    if (v22 == &type metadata for CanTransitionTraitKey) {
      break;
    }
    ++a4;
    v18 += 5;
    if (v17 == a4)
    {
      uint64_t v16 = *(void **)(a8 + 64);
      a4 = v42;
      goto LABEL_8;
    }
  }
  LOBYTE(v43) = 1;
  uint64_t v16 = *(void **)(a8 + 64);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a8 + 64) = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
    *(void *)(a8 + 64) = v16;
  }
  if (a4 < v16[2])
  {
    uint64_t v34 = (uint64_t)&v16[v18 + 4];
    uint64_t v35 = v16[v18 + 7];
    uint64_t v36 = v16[v18 + 8];
    __swift_mutable_project_boxed_opaque_existential_1(v34, v35);
    (*(void (**)(long long *, void, uint64_t, uint64_t))(v36 + 24))(&v43, MEMORY[0x263F8D4F8], v35, v36);
    *(void *)(a8 + 64) = v16;
    a4 = v42;
    if ((v8 & 1) == 0) {
      goto LABEL_13;
    }
    return __swift_destroy_boxed_opaque_existential_1(v12);
  }
  __break(1u);
LABEL_37:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v19);
  uint64_t v19 = (ValueMetadata *)result;
  *(void *)(a8 + 64) = result;
LABEL_30:
  uint64_t v12 = v42;
  if (a4 < v19[1].Kind)
  {
    uint64_t v38 = *(uint64_t *)((char *)&v19[3].Description + v18 * 8);
    uint64_t v39 = *(uint64_t *)((char *)&v19[4].Kind + v18 * 8);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v19[2] + v18 * 8, v38);
    uint64_t v40 = *(void (**)(long long *, uint64_t, uint64_t, uint64_t))(v39 + 24);
    _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_4(0, &lazy cache variable for type metadata for WeakAttribute<_DisplayList_StableIdentityScope>, (uint64_t)&type metadata for _DisplayList_StableIdentityScope, MEMORY[0x263F28890]);
    v40(&v43, v41, v38, v39);
    *(void *)(a8 + 64) = v19;
    return __swift_destroy_boxed_opaque_existential_1(v12);
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type BaseViewList.Init and conformance BaseViewList.Init()
{
  unint64_t result = lazy protocol witness table cache variable for type BaseViewList.Init and conformance BaseViewList.Init;
  if (!lazy protocol witness table cache variable for type BaseViewList.Init and conformance BaseViewList.Init)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BaseViewList.Init and conformance BaseViewList.Init);
  }
  return result;
}

__n128 UnaryElements.init(body:baseInputs:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[5];
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v10 = a4 + *(int *)(type metadata accessor for UnaryElements() + 36);
  *(void *)uint64_t v10 = v6;
  *(_DWORD *)(v10 + 8) = v7;
  *(void *)(v10 + 16) = v8;
  __n128 result = *(__n128 *)(a2 + 3);
  *(__n128 *)(v10 + 24) = result;
  *(void *)(v10 + 40) = v9;
  return result;
}

uint64_t type metadata accessor for TypedUnaryViewGenerator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized ViewTraitCollection.value<A>(for:defaultValue:)(char a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      uint64_t v5 = v11;
      uint64_t v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for IsAuxiliaryContentTraitKey) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return a1 & 1;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t *__return_ptr, void, uint64_t, uint64_t))(v8 + 16))(&v13, MEMORY[0x263F8D4F8], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    a1 = v13;
  }
  return a1 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      uint64_t v5 = v11;
      uint64_t v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for CanTransitionTraitKey) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return a1 & 1;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t *__return_ptr, void, uint64_t, uint64_t))(v8 + 16))(&v13, MEMORY[0x263F8D4F8], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    a1 = v13;
  }
  return a1 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      uint64_t v5 = v11;
      uint64_t v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for IsSectionFooterTraitKey) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return a1 & 1;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t *__return_ptr, void, uint64_t, uint64_t))(v8 + 16))(&v13, MEMORY[0x263F8D4F8], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    a1 = v13;
  }
  return a1 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      uint64_t v5 = v11;
      uint64_t v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for IsEmptyViewTraitKey) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return a1 & 1;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t *__return_ptr, void, uint64_t, uint64_t))(v8 + 16))(&v13, MEMORY[0x263F8D4F8], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    a1 = v13;
  }
  return a1 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      uint64_t v5 = v11;
      uint64_t v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for IsSectionHeaderTraitKey) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return a1 & 1;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t *__return_ptr, void, uint64_t, uint64_t))(v8 + 16))(&v13, MEMORY[0x263F8D4F8], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    a1 = v13;
  }
  return a1 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      uint64_t v5 = v11;
      uint64_t v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for IsSectionedTraitKey) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return a1 & 1;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t *__return_ptr, void, uint64_t, uint64_t))(v8 + 16))(&v13, MEMORY[0x263F8D4F8], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    a1 = v13;
  }
  return a1 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      uint64_t v5 = v11;
      uint64_t v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for IsLeafTraitKey) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return a1 & 1;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t *__return_ptr, void, uint64_t, uint64_t))(v8 + 16))(&v13, MEMORY[0x263F8D4F8], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    a1 = v13;
  }
  return a1 & 1;
}

uint64_t ForEachState.Item.applyTraits(to:)()
{
  uint64_t v1 = *v0;
  specialized ViewTraitCollection.setValueIfUnset<A>(_:for:)(*(uint64_t *)((char *)v0 + *(void *)(*v0 + 208)), 0);
  uint64_t v2 = *(void *)(*v0 + 200);
  specialized ViewTraitCollection.setValueIfUnset<A>(_:for:)(*(uint64_t *)((char *)v0 + v2), 0);
  if (*((unsigned char *)v0 + *(void *)(*v0 + 224)) == 1) {
    return specialized ViewTraitCollection.setValueIfUnset<A>(_:for:)(*(uint64_t *)((char *)v0 + v2), 0);
  }
  else {
    return ViewTraitCollection.setTagIfUnset<A>(for:value:)(*(void *)(v1 + 120), (uint64_t)v0 + *(void *)(*v0 + 160), *(void *)(v1 + 120));
  }
}

uint64_t specialized ViewTraitCollection.setValueIfUnset<A>(_:for:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Kindouble d = v6[1].Kind;
  if (Kind)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 32;
    while (v8 < (*v3)[1].Kind)
    {
      outlined init with copy of AnyTrackedValue((uint64_t)*v3 + v9, (uint64_t)&v16);
      uint64_t v10 = v17;
      uint64_t v11 = v18;
      __swift_project_boxed_opaque_existential_1(&v16, v17);
      uint64_t v6 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v11[1])(v10, v11);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
      if (v6 == &type metadata for DynamicViewContentIDTraitKey) {
        return result;
      }
      ++v8;
      v9 += 40;
      if (Kind == v8)
      {
        uint64_t v6 = *v3;
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
LABEL_7:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_13:
  }
    uint64_t v6 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[1].Kind + 1, 1, v6);
  unint64_t v14 = v6[1].Kind;
  unint64_t Description = (unint64_t)v6[1].Description;
  if (v14 >= Description >> 1) {
    uint64_t v6 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(Description > 1), v14 + 1, 1, v6);
  }
  _sSnySiGMaTm_5(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<DynamicViewContentIDTraitKey>, (uint64_t)&type metadata for DynamicViewContentIDTraitKey, (uint64_t)&protocol witness table for DynamicViewContentIDTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
  uint64_t v17 = v15;
  uint64_t v18 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
  *(void *)&long long v16 = a1;
  BYTE8(v16) = a2 & 1;
  v6[1].Kindouble d = v14 + 1;
  uint64_t result = outlined init with take of ScrollStateRequest(&v16, (uint64_t)&v6[2] + 40 * v14);
  *uint64_t v3 = v6;
  return result;
}

{
  ValueMetadata **v2;
  ValueMetadata **v3;
  ValueMetadata *v6;
  uint64_t Kind;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t result;
  unint64_t Description;
  unint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  _UNKNOWN **v18;

  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Kindouble d = v6[1].Kind;
  if (Kind)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 32;
    while (v8 < (*v3)[1].Kind)
    {
      outlined init with copy of AnyTrackedValue((uint64_t)*v3 + v9, (uint64_t)&v16);
      uint64_t v10 = v17;
      uint64_t v11 = v18;
      __swift_project_boxed_opaque_existential_1(&v16, v17);
      uint64_t v6 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v11[1])(v10, v11);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
      if (v6 == &type metadata for DynamicViewContentOffsetTraitKey) {
        return result;
      }
      ++v8;
      v9 += 40;
      if (Kind == v8)
      {
        uint64_t v6 = *v3;
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
LABEL_7:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_13:
  }
    uint64_t v6 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[1].Kind + 1, 1, v6);
  unint64_t v14 = v6[1].Kind;
  unint64_t Description = (unint64_t)v6[1].Description;
  if (v14 >= Description >> 1) {
    uint64_t v6 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(Description > 1), v14 + 1, 1, v6);
  }
  _sSnySiGMaTm_5(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<DynamicViewContentOffsetTraitKey>, (uint64_t)&type metadata for DynamicViewContentOffsetTraitKey, (uint64_t)&protocol witness table for DynamicViewContentOffsetTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
  uint64_t v17 = v15;
  uint64_t v18 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
  *(void *)&long long v16 = a1;
  BYTE8(v16) = a2 & 1;
  v6[1].Kindouble d = v14 + 1;
  uint64_t result = outlined init with take of ScrollStateRequest(&v16, (uint64_t)&v6[2] + 40 * v14);
  *uint64_t v3 = v6;
  return result;
}

{
  void **v2;
  void **v3;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  long long v18;
  uint64_t v19;
  _UNKNOWN **v20;

  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = v6[2];
  if (v7)
  {
    _sSnySiGMaTm_5(0, &lazy cache variable for type metadata for TagValueTraitKey<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6D8], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TagValueTraitKey);
    uint64_t v9 = v8;
    uint64_t v10 = 0;
    uint64_t v11 = 4;
    while (v10 < (*v3)[2])
    {
      outlined init with copy of AnyTrackedValue((uint64_t)&(*v3)[v11], (uint64_t)&v18);
      uint64_t v12 = v19;
      uint64_t v13 = v20;
      __swift_project_boxed_opaque_existential_1(&v18, v19);
      uint64_t v6 = (void *)((uint64_t (*)(uint64_t, _UNKNOWN **))v13[1])(v12, v13);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
      if (v6 == v9) {
        return result;
      }
      ++v10;
      v11 += 5;
      if (v7 == v10)
      {
        uint64_t v6 = *v3;
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
LABEL_7:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_13:
  }
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  long long v16 = v6[2];
  uint64_t v15 = v6[3];
  if (v16 >= v15 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v6);
  }
  type metadata accessor for ViewTraitCollection.AnyTrait<TagValueTraitKey<Int>>();
  uint64_t v19 = v17;
  uint64_t v20 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
  *(void *)&uint64_t v18 = a1;
  BYTE8(v18) = a2 & 1;
  v6[2] = v16 + 1;
  uint64_t result = outlined init with take of ScrollStateRequest(&v18, (uint64_t)&v6[5 * v16 + 4]);
  *uint64_t v3 = v6;
  return result;
}

void type metadata accessor for Range<Int>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _sSnySiGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _sSnySiGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _sSnySiGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _sSnySiGMaTm_3(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _sSnySiGMaTm_4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _sSnySiGMaTm_5(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t ViewTraitCollection.setValueIfUnset<A>(_:for:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v32 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v31 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v27 - v8;
  uint64_t v10 = type metadata accessor for ViewTraitCollection.AnyTrait();
  uint64_t v28 = *(void *)(v10 - 8);
  uint64_t v29 = v10;
  MEMORY[0x270FA5388](v10);
  unsigned int v27 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13.n128_f64[0] = MEMORY[0x270FA5388](v12);
  uint64_t v33 = (char *)&v27 - v14;
  uint64_t v15 = *(void *)(*v3 + 16);
  if (v15)
  {
    unint64_t v16 = 0;
    uint64_t v17 = 32;
    while (v16 < *(void *)(*v5 + 16))
    {
      outlined init with copy of AnyTrackedValue(*v5 + v17, (uint64_t)v34);
      uint64_t v18 = v35;
      uint64_t v4 = v36;
      __swift_project_boxed_opaque_existential_1(v34, v35);
      uint64_t v3 = (uint64_t *)(*((uint64_t (**)(uint64_t, char *))v4 + 1))(v18, v4);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
      if (v3 == a3) {
        return result;
      }
      ++v16;
      v17 += 40;
      if (v15 == v16) {
        goto LABEL_6;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_6:
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v30 + 16))(v9, v32, v31, v13);
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v4 = v33;
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v33, v9, v20);
  uint64_t v3 = (uint64_t *)*v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v5 = (uint64_t)v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_12:
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    *uint64_t v5 = (uint64_t)v3;
  }
  uint64_t v23 = v28;
  uint64_t v22 = v29;
  uint64_t v24 = (uint64_t)v27;
  unint64_t v26 = v3[2];
  unint64_t v25 = v3[3];
  if (v26 >= v25 >> 1) {
    *uint64_t v5 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v3);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 16))(v24, v4, v22);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v24, v5, v22, (uint64_t)&protocol witness table for ViewTraitCollection.AnyTrait<A>);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v4, v22);
}

uint64_t ViewTraitCollection.value<A>(for:defaultValue:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(*(void *)v3 + 16);
  if (v7)
  {
    uint64_t v8 = *(void *)v3 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v8, (uint64_t)v17);
      uint64_t v9 = v18;
      uint64_t v10 = v19;
      __swift_project_boxed_opaque_existential_1(v17, v18);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10) == a2) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      v8 += 40;
      if (!--v7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = v18;
    uint64_t v14 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v15(AssociatedTypeWitness, v13, v14);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
LABEL_6:
    uint64_t v11 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(a3, a1, v11);
  }
}

uint64_t protocol witness for AnyViewTrait.id.getter in conformance ViewTraitCollection.AnyTrait<A>(uint64_t a1)
{
  return _ViewInputs.base.modify(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t destroy for _TraitWritingModifier(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t destroy for CodableOptional(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

uint64_t protocol witness for AnyViewTrait.subscript.getter in conformance ViewTraitCollection.AnyTrait<A>()
{
  return ViewTraitCollection.AnyTrait.subscript.getter();
}

uint64_t ViewTraitCollection.AnyTrait.subscript.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v2 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)&v6 - v3, v0, AssociatedTypeWitness, v2);
  return swift_dynamicCast();
}

uint64_t type metadata accessor for ViewTraitCollection.AnyTrait()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ViewTraitCollection.setTagIfUnset<A>(for:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TagValueTraitKey.Value();
  uint64_t v6 = *(void *)(v5 - 8);
  v7.n128_f64[0] = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v13 - v8;
  uint64_t v10 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))((char *)&v13 - v8, a2, a3, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v9, 0, 1, a3);
  uint64_t v11 = (uint64_t *)type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  ViewTraitCollection.setValueIfUnset<A>(_:for:)((uint64_t)v9, (uint64_t)v11, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t type metadata accessor for TagValueTraitKey.Value()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TagValueTraitKey()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for External<ViewList>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type External<ViewList> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<ViewList> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<ViewList> and conformance External<A>)
  {
    type metadata accessor for External<ViewList>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<ViewList> and conformance External<A>);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Text.Effect.StopCollector(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance TagValueTraitKey<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static TagValueTraitKey.defaultValue.getter(*(void *)(a1 + 16), a2);
}

uint64_t static TagValueTraitKey.defaultValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t destroy for OpenURLAction(uint64_t a1)
{
  return outlined consume of OpenURLAction.Handler(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t storeEnumTagSinglePayload for Text.Effect.StopCollector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

__n128 __swift_memcpy34_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t protocol witness for AnyViewTrait.subscript.setter in conformance ViewTraitCollection.AnyTrait<A>()
{
  return ViewTraitCollection.AnyTrait.subscript.setter();
}

uint64_t ViewTraitCollection.AnyTrait.subscript.setter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v4 = (char *)&v6 - v3;
  swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 40))(v0, v4, AssociatedTypeWitness);
}

void type metadata accessor for TypedUnaryViewGenerator<BackdropView>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance _LayoutTrait<A>(uint64_t a1)
{
  return static _LayoutTrait.defaultValue.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t static _LayoutTrait.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance ContainerValueViewTraitKey<A>(uint64_t a1)
{
  return static ContainerValueViewTraitKey.defaultValue.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t static ContainerValueViewTraitKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void type metadata accessor for External<ViewList>()
{
  if (!lazy cache variable for type metadata for External<ViewList>)
  {
    type metadata accessor for ViewList();
    unint64_t v0 = type metadata accessor for External();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<ViewList>);
    }
  }
}

void type metadata accessor for ViewTraitCollection.AnyTrait<TagValueTraitKey<Int>>()
{
  if (!lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<TagValueTraitKey<Int>>)
  {
    _sSnySiGMaTm_5(255, &lazy cache variable for type metadata for TagValueTraitKey<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6D8], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TagValueTraitKey);
    lazy protocol witness table accessor for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>();
    unint64_t v0 = type metadata accessor for ViewTraitCollection.AnyTrait();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<TagValueTraitKey<Int>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>;
  if (!lazy protocol witness table cache variable for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>)
  {
    _sSnySiGMaTm_5(255, &lazy cache variable for type metadata for TagValueTraitKey<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6D8], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TagValueTraitKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for Capsule()
{
  return &type metadata for Capsule;
}

ValueMetadata *type metadata accessor for ViewDescriptor()
{
  return &type metadata for ViewDescriptor;
}

double EnvironmentValues.displayScale.getter()
{
  return EnvironmentValues.defaultBaselineOffset.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t partial apply for closure #2 in installObservationSlow<A>(accessList:attribute:)(uint64_t a1)
{
  return closure #2 in installObservationSlow<A>(accessList:attribute:)(a1, *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), v1 + 48, *(void *)(v1 + 16));
}

uint64_t _ViewList_ID.canonicalID.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  int v4 = v1[1];
  uint64_t v5 = *((void *)v1 + 1);
  if (*(void *)(v5 + 16))
  {
    int v6 = *(unsigned __int8 *)(v5 + 52);
    uint64_t result = swift_retain();
    if (v6) {
      int v4 = -1;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)a1 = v3;
  *(_DWORD *)(a1 + 4) = v4;
  *(void *)(a1 + 8) = result;
  return result;
}

CGPoint __swiftcall UnitPoint.in(_:)(__C::CGRect a1)
{
  double v3 = a1.size.width * v1 + a1.origin.x;
  double v4 = a1.size.height * v2 + a1.origin.y;
  result.double y = v4;
  result.double x = v3;
  return result;
}

uint64_t partial apply for implicit closure #1 in static GestureViewModifier.makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static GestureViewModifier.makeView(modifier:inputs:body:)(*(_DWORD *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t EnvironmentValues._colorSchemeContrast.getter()
{
  return EnvironmentValues.colorScheme.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.appearsActive.getter()
{
  return EnvironmentValues.appearsActive.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.displayGamut.getter()
{
  return EnvironmentValues.defaultRenderingMode.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SectionConfiguration.ID()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DefaultAnimation()
{
  return Hasher._finalize()();
}

ValueMetadata *type metadata accessor for LayoutSubviews()
{
  return &type metadata for LayoutSubviews;
}

SwiftUI::UniqueID __swiftcall UniqueID.init()()
{
  double v1 = v0;
  result.value = AGMakeUniqueID();
  v1->value = result.value;
  return result;
}

ValueMetadata *type metadata accessor for TextAlignment()
{
  return &type metadata for TextAlignment;
}

uint64_t partial apply for closure #1 in AGSubgraphRef.willInvalidate(isInserted:)(uint64_t a1)
{
  return closure #1 in AGSubgraphRef.willInvalidate(isInserted:)(a1, *(unsigned char *)(v1 + 16));
}

uint64_t static Axis.Set.horizontal.getter()
{
  return 1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BackgroundModifier<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static _BackgroundModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t _ProposedSize.init(width:height:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = result;
  *(unsigned char *)(a5 + 8) = a2 & 1;
  *(void *)(a5 + 16) = a3;
  *(unsigned char *)(a5 + 24) = a4 & 1;
  return result;
}

uint64_t SecondaryLookupTrackedValue.unwrap<A>()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  double v9 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v13 - v10;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v13 - v10, v3, AssociatedTypeWitness, v9);
  if (v8 == *(void *)(*(void *)(a1 - 8) + 64))
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v11, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *initializeWithCopy for TypesettingConfiguration(char *a1, char *a2, uint64_t a3)
{
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v6))
  {
    uint64_t v9 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
    a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  }
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  return a1;
}

uint64_t destroy for TypesettingConfiguration(uint64_t a1)
{
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 2, v2);
  if (!result)
  {
    uint64_t v4 = type metadata accessor for Locale.Language();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(a1, v4);
  }
  return result;
}

void type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)()
{
  if (!lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags))
  {
    type metadata accessor for Locale.Language();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags));
    }
  }
}

uint64_t ResolvedTextFilter.updateValue()()
{
  uint64_t v1 = v0;
  v97[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v86 = *(void *)(v2 - 8);
  uint64_t v87 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v85 = (char *)v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  MEMORY[0x270FA5388](Update);
  int v90 = (void *)((char *)v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v6);
  CGFloat v84 = (void *)((char *)v75 - v7);
  uint64_t Value = AGGraphGetValue();
  char v10 = v9;
  uint64_t v11 = *(void *)Value;
  uint64_t v12 = *(void **)(Value + 8);
  uint64_t v13 = *(unsigned __int8 *)(Value + 16);
  uint64_t v14 = *(void **)(Value + 24);
  uint64_t v15 = (uint64_t *)AGGraphGetValue();
  uint64_t v17 = v16;
  uint64_t v19 = *v15;
  uint64_t v18 = v15[1];
  uint64_t v89 = type metadata accessor for ResolvedStyledText();
  Outputuint64_t Value = AGGraphGetOutputValue();
  CGFloat v91 = v14;
  uint64_t v92 = v11;
  uint64_t v93 = v13;
  double v94 = v12;
  uint64_t v95 = v1;
  if (!OutputValue)
  {
    outlined copy of Text.Storage(v11, (uint64_t)v12, v13);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v40 = v19;
    goto LABEL_31;
  }
  uint64_t v88 = v19;
  uint64_t v21 = type metadata accessor for ResolvedTextFilter(0);
  uint64_t v22 = v21;
  uint64_t v23 = (void *)(v1 + *(int *)(v21 + 24));
  if ((v10 & 1) == 0)
  {
    uint64_t v83 = (void *)(v1 + *(int *)(v21 + 24));
    swift_retain();
    swift_retain();
    outlined copy of Text.Storage(v11, (uint64_t)v12, v13);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    goto LABEL_4;
  }
  uint64_t v79 = v17;
  if (!v23[9])
  {
    outlined copy of Text.Storage(v11, (uint64_t)v12, v13);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v40 = v88;
    swift_retain();
    goto LABEL_31;
  }
  uint64_t v81 = v23[9];
  uint64_t v41 = (void *)v23[6];
  uint64_t v42 = v23[7];
  uint64_t v80 = v23[8];
  uint64_t v82 = v42;
  if (v80)
  {
    if ((v13 & 1) == 0)
    {
      swift_retain();
      uint64_t v54 = v88;
      swift_retain();
      outlined copy of Text.Storage(v11, (uint64_t)v12, 0);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      outlined copy of Text?((uint64_t)v41, v42, v80, v81);
      char v51 = 1;
      goto LABEL_23;
    }
    uint64_t v83 = v23;
    uint64_t v77 = Update;
    uint64_t v43 = (uint64_t)v12;
    uint64_t v44 = (uint64_t (**)(uint64_t))(*v41 + 96);
    uint64_t v76 = *v44;
    v75[1] = v44;
    outlined copy of Text.Storage(v11, (uint64_t)v12, 1);
    swift_retain();
    swift_retain();
    uint64_t v45 = v42;
    uint64_t v46 = v42;
    char v47 = v80;
    uint64_t v17 = v81;
    outlined copy of Text?((uint64_t)v41, v46, v80, v81);
    outlined copy of Text.Storage(v11, v43, 1);
    uint64_t v48 = (uint64_t)v91;
    swift_bridgeObjectRetain();
    uint64_t v49 = v48;
    swift_retain();
    uint64_t v78 = v18;
    swift_retain();
    outlined copy of Text?((uint64_t)v41, v45, v47, v17);
    outlined copy of Text.Storage((uint64_t)v41, v45, 1);
    char v50 = v76(v11);
    outlined consume of Text.Storage((uint64_t)v41, v45, 1);
    if ((v50 & 1) == 0) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v13)
    {
      swift_retain();
      uint64_t v54 = v88;
      swift_retain();
      outlined copy of Text.Storage(v11, (uint64_t)v12, 1);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      outlined copy of Text?((uint64_t)v41, v42, v80, v81);
      char v51 = 0;
      goto LABEL_23;
    }
    uint64_t v83 = v23;
    uint64_t v78 = v18;
    uint64_t v77 = Update;
    if (v41 == (void *)v11 && (void *)v42 == v12) {
      LODWORD(v76) = 1;
    }
    else {
      LODWORD(v76) = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    uint64_t v56 = (uint64_t)v94;
    outlined copy of Text.Storage(v11, (uint64_t)v94, 0);
    swift_retain();
    swift_retain();
    uint64_t v57 = v82;
    char v47 = v80;
    uint64_t v17 = v81;
    outlined copy of Text?((uint64_t)v41, v82, v80, v81);
    outlined copy of Text.Storage(v11, v56, 0);
    uint64_t v49 = (uint64_t)v91;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    outlined copy of Text?((uint64_t)v41, v57, v47, v17);
    if ((v76 & 1) == 0)
    {
LABEL_14:
      char v51 = v47 & 1;
      uint64_t v52 = v93;
      uint64_t v53 = (uint64_t)v94;
      outlined consume of Text.Storage(v11, (uint64_t)v94, v93);
      outlined consume of Text?((uint64_t)v41, v82, v47, v17);
      uint64_t v18 = v78;
      uint64_t v14 = (void *)v49;
      uint64_t v13 = v52;
      uint64_t v12 = (void *)v53;
      uint64_t v54 = v88;
LABEL_23:
      outlined consume of Text.Storage((uint64_t)v41, v82, v51);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v40 = v54;
      goto LABEL_31;
    }
  }
  LODWORD(v81) = specialized static Array<A>.== infix(_:_:)(v17, v49);
  uint64_t v58 = v93;
  outlined consume of Text.Storage(v11, (uint64_t)v94, v93);
  uint64_t v59 = v82;
  outlined consume of Text?((uint64_t)v41, v82, v47, v17);
  outlined consume of Text.Storage((uint64_t)v41, v59, v47 & 1);
  swift_bridgeObjectRelease();
  uint64_t v18 = v78;
  uint64_t v14 = (void *)v49;
  uint64_t v13 = v58;
  uint64_t v12 = v94;
  LOBYTE(v17) = v79;
  if ((v81 & 1) == 0)
  {
LABEL_30:
    uint64_t v40 = v88;
    swift_release();
    swift_release();
    goto LABEL_31;
  }
LABEL_4:
  if (v17)
  {
    uint64_t v24 = swift_retain();
    char v25 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v24);
    swift_release();
    if (v25) {
      goto LABEL_30;
    }
  }
  unint64_t v26 = v14;
  uint64_t v27 = v18;
  uint64_t v28 = type metadata accessor for ResolvedTextHelper(0);
  uint64_t v29 = v84;
  uint64_t v30 = (void *)((char *)v83 + *(int *)(v28 + 56));
  _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1((uint64_t)v30, (uint64_t)v84, type metadata accessor for ResolvedTextHelper.NextUpdate);
  EnumCaseMultiPayloadouble d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      swift_release();
LABEL_33:
      swift_release();
      goto LABEL_34;
    }
    _s10Foundation4DateVSgWOhTm_0((uint64_t)v30, type metadata accessor for ResolvedTextHelper.NextUpdate);
    double v32 = *(double *)v29;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    uint64_t v34 = (char *)v29 + *(int *)(v33 + 48);
    char v35 = *((unsigned char *)v29 + *(int *)(v33 + 64));
    uint64_t v37 = (uint64_t)v85;
    uint64_t v36 = v86;
    uint64_t v38 = v87;
    (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v85, v34, v87);
    double v96 = v32;
    ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)(&v96, v37, v35, (double *)v97);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
    double v39 = *(double *)v97;
    *uint64_t v30 = v97[0];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    double v39 = *(double *)v29;
  }
  double v55 = *(double *)AGGraphGetValue();
  uint64_t v40 = v88;
  swift_release();
  uint64_t v18 = v27;
  swift_release();
  uint64_t v14 = v26;
  uint64_t v13 = v93;
  uint64_t v12 = v94;
  uint64_t v11 = v92;
  if (v55 < v39)
  {
LABEL_34:
    type metadata accessor for ResolvedTextFilter(0);
    uint64_t v62 = v95 + *(int *)(v22 + 24);
    uint64_t v63 = (void *)(v62 + *(int *)(type metadata accessor for ResolvedTextHelper(0) + 56));
    uint64_t v64 = v90;
    _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1((uint64_t)v63, (uint64_t)v90, type metadata accessor for ResolvedTextHelper.NextUpdate);
    int v65 = swift_getEnumCaseMultiPayload();
    if (v65)
    {
      if (v65 != 1)
      {
LABEL_42:
        swift_release();
        swift_release();
        outlined consume of Text.Storage(v92, (uint64_t)v94, v93);
        return swift_bridgeObjectRelease();
      }
      _s10Foundation4DateVSgWOhTm_0((uint64_t)v63, type metadata accessor for ResolvedTextHelper.NextUpdate);
      double v66 = *(double *)v64;
      type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
      char v68 = *((unsigned char *)v64 + *(int *)(v67 + 64));
      uint64_t v69 = (uint64_t)v85;
      uint64_t v70 = v86;
      uint64_t v71 = v87;
      (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v85, (char *)v64 + *(int *)(v67 + 48), v87);
      double v96 = v66;
      ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)(&v96, v69, v68, (double *)v97);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
      double v72 = *(double *)v97;
      *uint64_t v63 = v97[0];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      double v72 = *(double *)v64;
    }
    if (*(double *)AGGraphGetValue() < v72)
    {
      uint64_t v73 = specialized static ViewGraph.current.getter();
      swift_beginAccess();
      double v74 = *(double *)(v73 + 376);
      if (v72 < v74) {
        double v74 = v72;
      }
      *(double *)(v73 + 376) = v74;
      swift_release();
    }
    goto LABEL_42;
  }
LABEL_31:
  v97[0] = v40;
  v97[1] = v18;
  uint64_t v22 = type metadata accessor for ResolvedTextFilter(0);
  outlined copy of Text.Storage(v11, (uint64_t)v12, v13);
  swift_bridgeObjectRetain();
  uint64_t v60 = ResolvedTextHelper.resolve(_:with:sizeFitting:)(v11, v12, v13, v14, v97, 0);
  outlined consume of Text.Storage(v11, (uint64_t)v12, v13);
  uint64_t result = swift_bridgeObjectRelease();
  if (v60)
  {
    v97[0] = (uint64_t)v60;
    AGGraphSetOutputValue();
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of ResolvableStringResolutionContext(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for Text.Style(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for Text.Style);
}

uint64_t type metadata accessor for ResolvedTextHelper.NextUpdate(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedTextHelper.NextUpdate);
}

uint64_t type metadata accessor for ResolvedTextHelper(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedTextHelper);
}

uint64_t type metadata accessor for ResolvedTextFilter(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedTextFilter);
}

uint64_t type metadata accessor for ResolvedStyledText()
{
  return self;
}

uint64_t PropertyList.Tracker.hasDifferentUsedValues(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v5 = *(void *)(v3 + 24);
  uint64_t v4 = *(void *)(v3 + 32);
  uint64_t v6 = *(void *)(v3 + 40);
  uint64_t v7 = *(void *)(v3 + 48);
  int v8 = *(unsigned __int8 *)(v3 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  if (v8 == 1) {
    goto LABEL_16;
  }
  if (!a1)
  {
    if (!v5) {
      goto LABEL_13;
    }
LABEL_6:
    if (compare(_:against:)(v4, a1) & 1) != 0 && (compare(_:against:)(v6, a1))
    {
      uint64_t v9 = *(void *)(v7 + 16);
      if (!v9) {
        goto LABEL_13;
      }
      uint64_t v10 = v7 + 32;
      swift_bridgeObjectRetain();
      while (1)
      {
        outlined init with copy of AnyTrackedValue(v10, (uint64_t)v14);
        uint64_t v11 = v15;
        uint64_t v12 = v16;
        __swift_project_boxed_opaque_existential_1(v14, v15);
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a1, v11, v12) & 1) == 0) {
          break;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
        v10 += 40;
        if (!--v9)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return 0;
        }
      }
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
  if (*(void *)(a1 + 64) != v5) {
    goto LABEL_6;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

void *initializeWithCopy for ResolvedTextHelper.NextUpdate(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    uint64_t v7 = v6;
    uint64_t v8 = *(int *)(v6 + 48);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    *((unsigned char *)a1 + *(int *)(v7 + 64)) = *((unsigned char *)a2 + *(int *)(v7 + 64));
    *(void *)((char *)a1 + *(int *)(v7 + 80)) = *(void *)((char *)a2 + *(int *)(v7 + 80));
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t initializeWithCopy for Text.Style(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  if (*(void *)a2 >= 2uLL) {
    uint64_t v6 = swift_retain();
  }
  uint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = *(void *)(a2 + 16);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  outlined copy of Text.Style.TextStyleColor(v8);
  uint64_t v9 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v10 = (void *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 16) = v8;
  swift_retain();
  if ((unint64_t)(v11 - 1) >= 2)
  {
    *(void *)(a1 + 80) = *v10;
    *(void *)(a1 + 88) = v11;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v10;
  }
  uint64_t v12 = (void *)(a2 + 96);
  uint64_t v13 = *(void *)(a2 + 104);
  if ((unint64_t)(v13 - 1) >= 2)
  {
    *(void *)(a1 + 96) = *v12;
    *(void *)(a1 + 104) = v13;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v12;
  }
  uint64_t v14 = (_OWORD *)(a1 + 112);
  uint64_t v15 = (_OWORD *)(a2 + 112);
  uint64_t v16 = *(void *)(a2 + 176);
  if (v16 == 1)
  {
    long long v17 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v17;
    *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
    long long v18 = *(_OWORD *)(a2 + 128);
    *uint64_t v14 = *v15;
    *(_OWORD *)(a1 + 128) = v18;
    long long v19 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v19;
  }
  else
  {
    *(void *)uint64_t v14 = *(void *)v15;
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    uint64_t v20 = *(void *)(a2 + 184);
    *(void *)(a1 + 176) = v16;
    *(void *)(a1 + 184) = v20;
    *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    swift_retain();
  }
  uint64_t v21 = *(void *)(a2 + 248);
  if (v21 == 1)
  {
    long long v22 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v22;
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
  }
  else
  {
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = v21;
    swift_bridgeObjectRetain();
  }
  uint64_t v23 = *(void *)(a2 + 288);
  if (v23 == 1)
  {
    long long v24 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v24;
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
  }
  else
  {
    *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
    *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
    if (v23)
    {
      uint64_t v25 = *(void *)(a2 + 264);
      uint64_t v26 = *(void *)(a2 + 272);
      char v27 = *(unsigned char *)(a2 + 280);
      outlined copy of Text.Storage(v25, v26, v27);
      *(void *)(a1 + 264) = v25;
      *(void *)(a1 + 272) = v26;
      *(unsigned char *)(a1 + 280) = v27;
      *(void *)(a1 + 288) = v23;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v28 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v28;
    }
  }
  uint64_t v30 = *(void **)(a2 + 296);
  uint64_t v29 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = v30;
  *(void *)(a1 + 304) = v29;
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(_WORD *)(a1 + 320) = *(_WORD *)(a2 + 320);
  uint64_t v31 = a3[21];
  __dst = (char *)(a1 + v31);
  uint64_t v53 = a3;
  double v32 = (char *)(a2 + v31);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t v34 = v33;
  uint64_t v35 = *(void *)(v33 - 8);
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
  id v37 = v30;
  swift_retain();
  swift_retain();
  if (v36(v32, 2, v34))
  {
    uint64_t v38 = type metadata accessor for TypesettingLanguage.Storage(0);
    double v39 = __dst;
    memcpy(__dst, v32, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    uint64_t v40 = type metadata accessor for Locale.Language();
    double v39 = __dst;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(__dst, v32, v40);
    __dst[*(int *)(v34 + 48)] = v32[*(int *)(v34 + 48)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 2, v34);
  }
  uint64_t v41 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  uint64_t v42 = &v39[v41];
  uint64_t v43 = &v32[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  v42[8] = v43[8];
  uint64_t v44 = v53[23];
  *(void *)(a1 + v53[22]) = *(void *)(a2 + v53[22]);
  uint64_t v45 = (void *)(a1 + v44);
  uint64_t v46 = (const void *)(a2 + v44);
  uint64_t v47 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v48 + 48);
  swift_bridgeObjectRetain();
  if (v49(v46, 1, v47))
  {
    _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
    memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v48 + 16))(v45, v46, v47);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  *(void *)(a1 + v53[24]) = *(void *)(a2 + v53[24]);
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t outlined copy of Text.Style.TextStyleColor(unint64_t result)
{
  if ((result >> 62) <= 1) {
    return swift_retain();
  }
  return result;
}

void type metadata accessor for AttributedString.AdaptiveImageGlyph?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation16AttributedStringV8CoreTextE18AdaptiveImageGlyphVSgMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t static TypesettingLanguage.automatic.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for TypesettingLanguage(0);
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  return outlined init with copy of TypesettingLanguage.Storage(v6, a3, type metadata accessor for TypesettingLanguage);
}

uint64_t TypesettingConfiguration.init(language:languageAwareLineHeightRatio:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  char v6 = *((unsigned char *)a2 + 8);
  if (one-time initialization token for automatic != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for TypesettingLanguage(0);
  uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static TypesettingLanguage.automatic);
  _s7SwiftUI24TypesettingConfigurationVWOcTm_0(v8, a3, type metadata accessor for TypesettingLanguage);
  uint64_t v9 = a3 + *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t result = outlined assign with take of TypesettingLanguage(a1, a3);
  *(void *)uint64_t v9 = v5;
  *(unsigned char *)(v9 + 8) = v6;
  return result;
}

uint64_t type metadata accessor for TypesettingConfiguration()
{
  uint64_t result = type metadata singleton initialization cache for TypesettingConfiguration;
  if (!type metadata singleton initialization cache for TypesettingConfiguration) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t outlined init with copy of TypesettingConfiguration(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI24TypesettingConfigurationVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of TypesettingLanguage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TypesettingLanguage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unsigned char *assignWithTake for TypesettingLanguage(unsigned char *a1, unsigned char *a2)
{
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2, v4);
  int v9 = v7(a2, 2, v5);
  if (!v8)
  {
    if (!v9)
    {
      uint64_t v13 = type metadata accessor for Locale.Language();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 40))(a1, a2, v13);
      a1[*(int *)(v5 + 48)] = a2[*(int *)(v5 + 48)];
      return a1;
    }
    outlined destroy of (Locale.Language, TypesettingLanguage.Flags)((uint64_t)a1, (uint64_t)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648], (uint64_t)&type metadata for TypesettingLanguage.Flags, (uint64_t (*)(void))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    uint64_t v11 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    return a1;
  }
  uint64_t v10 = type metadata accessor for Locale.Language();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
  a1[*(int *)(v5 + 48)] = a2[*(int *)(v5 + 48)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  return a1;
}

BOOL specialized static TypesettingLanguage.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Locale.Language();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TypesettingLanguage.Storage(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (TypesettingLanguage.Storage, TypesettingLanguage.Storage)();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v13[*(int *)(v14 + 56)];
  outlined init with copy of TypesettingLanguage.Storage(a1, (uint64_t)v13, type metadata accessor for TypesettingLanguage.Storage);
  outlined init with copy of TypesettingLanguage.Storage(a2, v15, type metadata accessor for TypesettingLanguage.Storage);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v17 = v16;
  long long v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  int v19 = v18(v13, 2, v16);
  if (v19)
  {
    if (v19 == 1)
    {
      int v20 = v18((char *)v15, 2, v17);
      uint64_t v21 = type metadata accessor for TypesettingLanguage.Storage;
      if (v20 == 1) {
        goto LABEL_8;
      }
    }
    else
    {
      int v24 = v18((char *)v15, 2, v17);
      uint64_t v21 = type metadata accessor for TypesettingLanguage.Storage;
      if (v24 == 2)
      {
LABEL_8:
        BOOL v25 = 1;
        goto LABEL_10;
      }
    }
LABEL_9:
    BOOL v25 = 0;
    uint64_t v21 = (uint64_t (*)(void))type metadata accessor for (TypesettingLanguage.Storage, TypesettingLanguage.Storage);
    goto LABEL_10;
  }
  uint64_t v33 = v5;
  outlined init with copy of TypesettingLanguage.Storage((uint64_t)v13, (uint64_t)v10, type metadata accessor for TypesettingLanguage.Storage);
  uint64_t v22 = *(int *)(v17 + 48);
  int v23 = v10[v22];
  if (v18((char *)v15, 2, v17))
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v4);
    goto LABEL_9;
  }
  int v27 = v23;
  int v28 = *(unsigned __int8 *)(v15 + v22);
  uint64_t v29 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v7, v15, v4);
  char v30 = static Locale.Language.== infix(_:_:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v29 + 8);
  v31(v10, v4);
  if (v30)
  {
    BOOL v25 = v27 == v28;
    v31(v7, v4);
  }
  else
  {
    v31(v7, v4);
    BOOL v25 = 0;
  }
  uint64_t v21 = type metadata accessor for TypesettingLanguage.Storage;
LABEL_10:
  outlined destroy of TypesettingLanguage.Storage((uint64_t)v13, v21);
  return v25;
}

uint64_t outlined init with copy of TypesettingLanguage.Storage(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void *initializeWithCopy for TypesettingLanguage.Storage(void *a1, const void *a2, uint64_t a3)
{
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for Locale.Language();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    *((unsigned char *)a1 + *(int *)(v7 + 48)) = *((unsigned char *)a2 + *(int *)(v7 + 48));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  }
  return a1;
}

uint64_t findValueWithSecondaryLookup<A>(_:secondaryLookupHandler:filter:secondaryFilter:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v57 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v58 = AssociatedTypeWitness;
  uint64_t v55 = swift_getAssociatedTypeWitness();
  char v51 = *(void (***)(uint64_t, uint64_t))(v55 - 8);
  MEMORY[0x270FA5388](v55);
  uint64_t v54 = (uint64_t)&v47 - v14;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v56 = v15;
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v59 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v59);
  MEMORY[0x270FA5388](v17);
  int v19 = (char *)&v47 - v18;
  uint64_t v60 = v16;
  uint64_t v20 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v21);
  v27.n128_f64[0] = MEMORY[0x270FA5388](v22);
  if (!a1)
  {
    uint64_t v40 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v20 + 56))(a7, v40, 1, v60, v27);
  }
  uint64_t v47 = v26;
  uint64_t v48 = (char *)&v47 - v24;
  uint64_t v49 = v20;
  uint64_t v50 = (char *)a7;
  uint64_t v28 = *a3;
  uint64_t v29 = *a4;
  char v30 = (unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  uint64_t v31 = (void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v52 = a6 + 40;
  uint64_t v53 = v25;
  ++v51;
  while (1)
  {
    while (1)
    {
      uint64_t v32 = a1[7];
      uint64_t v33 = v28 & ~v32;
      uint64_t v34 = v32 & v29;
      if (!v33 || v34 == v29) {
        break;
      }
      a1 = (void *)a1[5];
      if (!a1) {
        goto LABEL_17;
      }
    }
    uint64_t v36 = a1[3];
    if (v36)
    {
      uint64_t v61 = v29;
      uint64_t v62 = v28;
      findValueWithSecondaryLookup<A>(_:secondaryLookupHandler:filter:secondaryFilter:)(v36, v57, &v62, &v61, a5, a6, v27);
      if ((*v30)(v19, 1, v60) != 1)
      {
        uint64_t v41 = v48;
        uint64_t v20 = v49;
        uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
        uint64_t v43 = v48;
        uint64_t v44 = v19;
        goto LABEL_23;
      }
      (*v31)(v19, v59);
    }
    uint64_t v37 = a1[2];
    if (v37 == swift_checkMetadataState())
    {
      a7 = (uint64_t)v50;
      closure #2 in closure #1 in PropertyList.subscript.getter((uint64_t)a1, (uint64_t)v50);
      uint64_t v40 = 0;
      goto LABEL_20;
    }
    if (v37 == swift_checkMetadataState()) {
      break;
    }
LABEL_16:
    a1 = (void *)a1[4];
    if (!a1)
    {
LABEL_17:
      uint64_t v40 = 1;
      a7 = (uint64_t)v50;
LABEL_20:
      uint64_t v20 = v49;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v20 + 56))(a7, v40, 1, v60, v27);
    }
  }
  uint64_t v38 = v54;
  closure #2 in closure #1 in PropertyList.subscript.getter((uint64_t)a1, v54);
  double v39 = v53;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 40))(v38, a5, a6);
  (*v51)(v38, v55);
  if ((*v30)(v39, 1, v60) == 1)
  {
    (*v31)(v39, v59);
    goto LABEL_16;
  }
  uint64_t v20 = v49;
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
  uint64_t v41 = v47;
  uint64_t v43 = v47;
  uint64_t v44 = v39;
LABEL_23:
  uint64_t v45 = v60;
  v42(v43, v44, v60);
  a7 = (uint64_t)v50;
  v42(v50, v41, v45);
  uint64_t v40 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v20 + 56))(a7, v40, 1, v60, v27);
}

uint64_t type metadata accessor for TimerTimelineSchedule(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for TypesettingLanguage(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for TypesettingLanguage);
}

void *initializeWithCopy for TypesettingLanguage(void *a1, const void *a2)
{
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v4))
  {
    uint64_t v7 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for Locale.Language();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    *((unsigned char *)a1 + *(int *)(v5 + 48)) = *((unsigned char *)a2 + *(int *)(v5 + 48));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

uint64_t type metadata accessor for TypesettingLanguage.Storage(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for TypesettingLanguage.Storage);
}

void type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for TypesettingConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245DF6440);
}

uint64_t getEnumTagSinglePayload for TypesettingLanguage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245DE5B2C);
}

uint64_t getEnumTagSinglePayload for TypesettingLanguage.Storage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245DE62E4);
}

uint64_t storeEnumTagSinglePayload for TypesettingConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245DF64AC);
}

uint64_t type metadata accessor for _ValueActionModifier2()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for (TypesettingLanguage.Storage, TypesettingLanguage.Storage)()
{
  if (!lazy cache variable for type metadata for (TypesettingLanguage.Storage, TypesettingLanguage.Storage))
  {
    type metadata accessor for TypesettingLanguage.Storage(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (TypesettingLanguage.Storage, TypesettingLanguage.Storage));
    }
  }
}

uint64_t EnvironmentValues.accessibilityEnabled.setter(uint64_t a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v7 = *v3;
  swift_retain_n();
  a2(v3, a1, &v10);
  swift_release();
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v7, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.symbolFont : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t (*a3)(uint64_t, uint64_t *)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v7 = a2(v5);
    swift_release_n();
  }
  else
  {
    uint64_t v9 = swift_retain_n();
    uint64_t v7 = a3(v9, &v11);
  }
  uint64_t result = swift_release_n();
  *a4 = v7;
  return result;
}

uint64_t initializeWithCopy for ResolvedTextHelper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 14) = *(_DWORD *)(a2 + 14);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 72);
  swift_retain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 48);
    uint64_t v8 = *(void *)(a2 + 56);
    char v9 = *(unsigned char *)(a2 + 64);
    outlined copy of Text.Storage(v7, v8, v9);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v8;
    *(unsigned char *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v10;
  }
  uint64_t v11 = *(int *)(a3 + 56);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v12 = *v13;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    uint64_t v16 = v15;
    uint64_t v17 = *(int *)(v15 + 48);
    uint64_t v18 = (char *)v12 + v17;
    int v19 = (char *)v13 + v17;
    uint64_t v20 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    *((unsigned char *)v12 + *(int *)(v16 + 64)) = *((unsigned char *)v13 + *(int *)(v16 + 64));
    *(void *)((char *)v12 + *(int *)(v16 + 80)) = *(void *)((char *)v13 + *(int *)(v16 + 80));
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v12, v13, *(void *)(*(void *)(Update - 8) + 64));
  }
  *(void *)(a1 + *(int *)(a3 + 60)) = *(void *)(a2 + *(int *)(a3 + 60));
  return a1;
}

uint64_t specialized EnvironmentValues.subscript.getter()
{
  uint64_t result = EnvironmentValues.subscript.getter();
  if (!result)
  {
    _StringGuts.grow(_:)(118);
    v1._object = (void *)0x800000024621C260;
    v1._countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v1);
    v2._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = 0xD000000000000029;
    v3._object = (void *)0x800000024621C280;
    String.append(_:)(v3);
    v4._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 0xD00000000000002CLL;
    v5._object = (void *)0x800000024621C2B0;
    String.append(_:)(v5);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  return EnvironmentValues.subscript.getter();
}

uint64_t EnvironmentValues.subscript.getter()
{
  uint64_t v0 = type metadata accessor for EnvironmentObjectKey();
  uint64_t WitnessTable = swift_getWitnessTable();
  EnvironmentValues.subscript.getter(v0, v0, WitnessTable);
  return v3;
}

{
  return specialized EnvironmentValues.subscript.getter();
}

{
  return specialized EnvironmentValues.subscript.getter();
}

{
  return EnvironmentValues.subscript.getter();
}

{
  return EnvironmentValues.subscript.getter();
}

uint64_t type metadata accessor for EnvironmentObjectKey()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t key path getter for EnvironmentValues.colorScheme : EnvironmentValues@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t)@<X3>, void (*a3)(uint64_t *__return_ptr, uint64_t, unsigned char *)@<X4>, unsigned char *a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    a2(&v11, v5);
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    a3(&v11, v8, v10);
  }
  uint64_t result = swift_release_n();
  *a4 = v11;
  return result;
}

void outlined consume of GraphicsContext.ResolvedShading(void *a1, char a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, unint64_t a13)
{
  switch(a13 >> 60)
  {
    case 3uLL:

      return;
    case 4uLL:
      outlined consume of _ShapeStyle_Pack.Fill((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      outlined consume of GraphicsBlendMode?(a12, a13);
      goto LABEL_7;
    case 5uLL:
    case 8uLL:
      goto LABEL_7;
    case 6uLL:
      swift_bridgeObjectRelease();
LABEL_7:
      swift_bridgeObjectRelease();
      break;
    case 7uLL:
      outlined consume of GraphicsImage.Contents?(a1, a2);
      break;
    default:
      return;
  }
}

uint64_t EnvironmentValues.colorScheme.setter(unsigned __int8 *a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = *v3;
  swift_retain_n();
  a2(v3, v6, &v10);
  swift_release();
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v7, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void *initializeWithCopy for ResolvedTextFilter(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *(_DWORD *)uint64_t v5 = *(_DWORD *)((char *)a2 + v4);
  *(void *)(v5 + 4) = *(void *)((char *)a2 + v4 + 4);
  *((_WORD *)v5 + 6) = *(_WORD *)((char *)a2 + v4 + 12);
  *(_DWORD *)(v5 + 14) = *(_DWORD *)((char *)a2 + v4 + 14);
  v5[18] = *((unsigned char *)a2 + v4 + 18);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)((char *)a2 + v4 + 24);
  *((void *)v5 + 5) = *(void *)((char *)a2 + v4 + 40);
  uint64_t v7 = *(void *)((char *)a2 + v4 + 72);
  swift_retain();
  if (v7)
  {
    uint64_t v8 = *((void *)v6 + 6);
    uint64_t v9 = *((void *)v6 + 7);
    char v10 = v6[64];
    outlined copy of Text.Storage(v8, v9, v10);
    *((void *)v5 + 6) = v8;
    *((void *)v5 + 7) = v9;
    v5[64] = v10;
    *((void *)v5 + 9) = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *((_OWORD *)v6 + 4);
    *((_OWORD *)v5 + 3) = *((_OWORD *)v6 + 3);
    *((_OWORD *)v5 + 4) = v11;
  }
  uint64_t v12 = type metadata accessor for ResolvedTextHelper(0);
  uint64_t v13 = *(int *)(v12 + 56);
  uint64_t v14 = &v5[v13];
  uint64_t v15 = &v6[v13];
  uint64_t Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(void *)uint64_t v14 = *(void *)v15;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    uint64_t v18 = v17;
    uint64_t v19 = *(int *)(v17 + 48);
    uint64_t v20 = &v14[v19];
    uint64_t v21 = &v15[v19];
    uint64_t v22 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    v14[*(int *)(v18 + 64)] = v15[*(int *)(v18 + 64)];
    *(void *)&v14[*(int *)(v18 + 80)] = *(void *)&v15[*(int *)(v18 + 80)];
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v14, v15, *(void *)(*(void *)(Update - 8) + 64));
  }
  *(void *)&v5[*(int *)(v12 + 60)] = *(void *)&v6[*(int *)(v12 + 60)];
  return a1;
}

uint64_t type metadata accessor for AnchorGeometryTransformModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t EnvironmentValues.imageScale.setter(unsigned __int8 *a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = *v3;
  uint64_t v7 = *a1;
  swift_retain_n();
  a2(v3, v7, &v10);
  swift_release();
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v6, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.defaultKerning : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double (*a2)(uint64_t)@<X3>, double (*a3)(uint64_t, uint64_t *)@<X4>, double *a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v7 = a2(v5);
    swift_release_n();
  }
  else
  {
    uint64_t v9 = swift_retain_n();
    double v7 = a3(v9, &v11);
  }
  uint64_t result = swift_release_n();
  *a4 = v7;
  return result;
}

uint64_t EnvironmentValues.horizontalSizeClass.setter(unsigned __int8 *a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = *v3;
  uint64_t v7 = *a1;
  swift_retain_n();
  a2(v3, v7, &v10);
  swift_release();
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v6, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.lineLimit.setter(uint64_t a1, char a2, void (*a3)(uint64_t *, uint64_t, uint64_t, uint64_t *), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = a2 & 1;
  uint64_t v9 = *v4;
  swift_retain_n();
  a3(v4, a1, v8, &v12);
  swift_release();
  if (v4[1])
  {
    uint64_t v10 = *v4;
    swift_retain();
    swift_retain();
    a4(v9, v10);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t result = specialized find<A>(_:key:)(*a1);
  if (!result) {
    goto LABEL_8;
  }
  char v7 = *(unsigned char *)(result + 80);
  if (a3)
  {
    if (*(unsigned char *)(result + 80)) {
      return result;
    }
LABEL_8:
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>>();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 72) = a2;
    *(unsigned char *)(v9 + 80) = a3 & 1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LineLimitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    Swift::Int v11 = v10;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v11, 0, v8);
    return swift_release();
  }
  if (*(void *)(result + 72) != a2) {
    char v7 = 1;
  }
  if (v7) {
    goto LABEL_8;
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v6 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayCornerRadiusKey>, (uint64_t)&type metadata for DisplayCornerRadiusKey, (uint64_t)&protocol witness table for DisplayCornerRadiusKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  uint64_t result = specialized find1<A>(_:key:filter:)(v6, v13);
  if (!result) {
    goto LABEL_8;
  }
  Swift::Int v10 = *(unsigned char *)(result + 80);
  if (a3)
  {
    if (*(unsigned char *)(result + 80)) {
      return result;
    }
LABEL_8:
    Swift::Int v11 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DisplayCornerRadiusKey>>();
    uint64_t v12 = swift_allocObject();
    *(double *)(v12 + 72) = *(double *)&a2;
    *(unsigned char *)(v12 + 80) = a3 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v11);
    return swift_release();
  }
  if (*(double *)(result + 72) != *(double *)&a2) {
    Swift::Int v10 = 1;
  }
  if (v10) {
    goto LABEL_8;
  }
  return result;
}

{
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int v11;

  uint64_t result = specialized find<A>(_:key:)(*a1);
  if (!result) {
    goto LABEL_8;
  }
  char v7 = *(unsigned char *)(result + 80);
  if (a3)
  {
    if (*(unsigned char *)(result + 80)) {
      return result;
    }
LABEL_8:
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>>();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 72) = a2;
    *(unsigned char *)(v9 + 80) = a3 & 1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LowerLineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LowerLineLimitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    Swift::Int v11 = v10;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v11, 0, v8);
    return swift_release();
  }
  if (*(void *)(result + 72) != a2) {
    char v7 = 1;
  }
  if (v7) {
    goto LABEL_8;
  }
  return result;
}

{
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int v11;

  uint64_t result = specialized find<A>(_:key:)(*a1);
  if (!result) {
    goto LABEL_8;
  }
  char v7 = *(unsigned char *)(result + 80);
  if (a3)
  {
    if (*(unsigned char *)(result + 80)) {
      return result;
    }
LABEL_8:
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<AnimationFrameIntervalKey>>();
    uint64_t v9 = swift_allocObject();
    *(double *)(v9 + 72) = *(double *)&a2;
    *(unsigned char *)(v9 + 80) = a3 & 1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationFrameIntervalKey>, (uint64_t)&type metadata for AnimationFrameIntervalKey, (uint64_t)&protocol witness table for AnimationFrameIntervalKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    Swift::Int v11 = v10;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v11, 0, v8);
    return swift_release();
  }
  if (*(double *)(result + 72) != *(double *)&a2) {
    char v7 = 1;
  }
  if (v7) {
    goto LABEL_8;
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v6 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  uint64_t result = specialized find1<A>(_:key:filter:)(v6, v13);
  if (!result) {
    goto LABEL_8;
  }
  Swift::Int v10 = *(unsigned char *)(result + 80);
  if (a3)
  {
    if (*(unsigned char *)(result + 80)) {
      return result;
    }
LABEL_8:
    Swift::Int v11 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>>();
    uint64_t v12 = swift_allocObject();
    *(double *)(v12 + 72) = *(double *)&a2;
    *(unsigned char *)(v12 + 80) = a3 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v11);
    return swift_release();
  }
  if (*(double *)(result + 72) != *(double *)&a2) {
    Swift::Int v10 = 1;
  }
  if (v10) {
    goto LABEL_8;
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v6 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>, (uint64_t)&type metadata for SymbolBackgroundCornerRadiusKey, (uint64_t)&protocol witness table for SymbolBackgroundCornerRadiusKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  uint64_t result = specialized find1<A>(_:key:filter:)(v6, v13);
  if (!result) {
    goto LABEL_8;
  }
  Swift::Int v10 = *(unsigned char *)(result + 80);
  if (a3)
  {
    if (*(unsigned char *)(result + 80)) {
      return result;
    }
LABEL_8:
    Swift::Int v11 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>>();
    uint64_t v12 = swift_allocObject();
    *(double *)(v12 + 72) = *(double *)&a2;
    *(unsigned char *)(v12 + 80) = a3 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v11);
    return swift_release();
  }
  if (*(double *)(result + 72) != *(double *)&a2) {
    Swift::Int v10 = 1;
  }
  if (v10) {
    goto LABEL_8;
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v6 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPixelLengthKey>, (uint64_t)&type metadata for DefaultPixelLengthKey, (uint64_t)&protocol witness table for DefaultPixelLengthKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  uint64_t result = specialized find1<A>(_:key:filter:)(v6, v13);
  if (!result) {
    goto LABEL_8;
  }
  Swift::Int v10 = *(unsigned char *)(result + 80);
  if (a3)
  {
    if (*(unsigned char *)(result + 80)) {
      return result;
    }
LABEL_8:
    Swift::Int v11 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultPixelLengthKey>>();
    uint64_t v12 = swift_allocObject();
    *(double *)(v12 + 72) = *(double *)&a2;
    *(unsigned char *)(v12 + 80) = a3 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v11);
    return swift_release();
  }
  if (*(double *)(result + 72) != *(double *)&a2) {
    Swift::Int v10 = 1;
  }
  if (v10) {
    goto LABEL_8;
  }
  return result;
}

{
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v6 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DividerThicknessKey>, (uint64_t)&type metadata for DividerThicknessKey, (uint64_t)&protocol witness table for DividerThicknessKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  uint64_t result = specialized find1<A>(_:key:filter:)(v6, v13);
  if (!result) {
    goto LABEL_8;
  }
  Swift::Int v10 = *(unsigned char *)(result + 80);
  if (a3)
  {
    if (*(unsigned char *)(result + 80)) {
      return result;
    }
LABEL_8:
    Swift::Int v11 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DividerThicknessKey>>();
    uint64_t v12 = swift_allocObject();
    *(double *)(v12 + 72) = *(double *)&a2;
    *(unsigned char *)(v12 + 80) = a3 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v11);
    return swift_release();
  }
  if (*(double *)(result + 72) != *(double *)&a2) {
    Swift::Int v10 = 1;
  }
  if (v10) {
    goto LABEL_8;
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LineLimitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.LineLimitKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>>);
    }
  }
}

uint64_t EnvironmentValues.lineLimit.setter(uint64_t a1, char a2)
{
  return EnvironmentValues.lineLimit.setter(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.multilineTextAlignment.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    unsigned int v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
  }
  else
  {
    uint64_t v3 = swift_retain_n();
    unsigned int v2 = specialized closure #1 in PropertyList.subscript.getter(v3);
  }
  swift_release_n();
  if (v2 == 3) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t EnvironmentValues.multilineTextAlignment.setter(unsigned __int8 a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, unsigned __int8 a2)
{
  int v3 = a2;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextAlignmentKey>, (uint64_t)&type metadata for TextAlignmentKey, (uint64_t)&protocol witness table for TextAlignmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result) {
    goto LABEL_9;
  }
  int v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 3)
  {
    if (v8 == 3) {
      return result;
    }
LABEL_9:
    uint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TextAlignmentKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 3 || v8 != v3) {
    goto LABEL_9;
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned __int8 *)(result + 72) != a2)
  {
    int v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DynamicTypeSizeKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  int v3 = a2;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result) {
    goto LABEL_9;
  }
  int v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2) {
      return result;
    }
LABEL_9:
    uint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 2 || ((v8 ^ v3) & 1) != 0) {
    goto LABEL_9;
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  int v3 = a2;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result) {
    goto LABEL_9;
  }
  int v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2) {
      return result;
    }
LABEL_9:
    uint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 2 || ((v8 ^ v3) & 1) != 0) {
    goto LABEL_9;
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  int v3 = a2;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result) {
    goto LABEL_9;
  }
  int v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2) {
      return result;
    }
LABEL_9:
    uint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<LegibilityWeightKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 2 || ((v8 ^ v3) & 1) != 0) {
    goto LABEL_9;
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned __int8 *)(result + 72) != a2)
  {
    int v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ImageScaleKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  int v3 = a2;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TintAdjustmentModeKey>, (uint64_t)&type metadata for TintAdjustmentModeKey, (uint64_t)&protocol witness table for TintAdjustmentModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result) {
    goto LABEL_9;
  }
  int v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2) {
      return result;
    }
LABEL_9:
    uint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TintAdjustmentModeKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 2 || ((v8 ^ v3) & 1) != 0) {
    goto LABEL_9;
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  int v3 = a2;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>, (uint64_t)&type metadata for ControlSizeKey, (uint64_t)&protocol witness table for ControlSizeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result) {
    goto LABEL_9;
  }
  int v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 5)
  {
    if (v8 == 5) {
      return result;
    }
LABEL_9:
    uint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ControlSizeKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 5 || v8 != v3) {
    goto LABEL_9;
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned __int8 *)(result + 72) != a2)
  {
    int v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  int v3 = a2;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>, (uint64_t)&type metadata for TextCaseKey, (uint64_t)&protocol witness table for TextCaseKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result) {
    goto LABEL_9;
  }
  int v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2) {
      return result;
    }
LABEL_9:
    uint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TextCaseKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 2 || ((v8 ^ v3) & 1) != 0) {
    goto LABEL_9;
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned __int8 *)(result + 72) != a2)
  {
    int v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  int v3 = a2;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>, (uint64_t)&type metadata for ExplicitPreferredColorSchemeKey, (uint64_t)&protocol witness table for ExplicitPreferredColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result) {
    goto LABEL_9;
  }
  int v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2) {
      return result;
    }
LABEL_9:
    uint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 2 || ((v8 ^ v3) & 1) != 0) {
    goto LABEL_9;
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  int v3 = a2;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>, (uint64_t)&type metadata for TruncationModeKey, (uint64_t)&protocol witness table for TruncationModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result) {
    goto LABEL_9;
  }
  int v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 3)
  {
    if (v8 == 3) {
      return result;
    }
LABEL_9:
    uint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TruncationModeKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 3 || v8 != v3) {
    goto LABEL_9;
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaterialActiveAppearance.Key>, (uint64_t)&type metadata for MaterialActiveAppearance.Key, (uint64_t)&protocol witness table for MaterialActiveAppearance.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned __int8 *)(result + 72) != a2)
  {
    int v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<MaterialActiveAppearance.Key>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;

  int v3 = a2;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v10);
  if (!result) {
    goto LABEL_7;
  }
  int v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2) {
      return result;
    }
LABEL_7:
    uint64_t v9 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v9);
    return swift_release();
  }
  if (v8 == 2 || ((((v8 & 1) == 0) ^ v3) & 1) == 0) {
    goto LABEL_7;
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;

  int v3 = a2;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v10);
  if (!result) {
    goto LABEL_7;
  }
  int v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2) {
      return result;
    }
LABEL_7:
    uint64_t v9 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v9);
    return swift_release();
  }
  if (v8 == 2 || ((((v8 & 1) == 0) ^ v3) & 1) == 0) {
    goto LABEL_7;
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  int v3 = a2;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result) {
    goto LABEL_9;
  }
  int v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 3)
  {
    if (v8 == 3) {
      return result;
    }
LABEL_9:
    uint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 3 || v8 != v3) {
    goto LABEL_9;
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  int v3 = a2;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>, (uint64_t)&type metadata for ContainerBackgroundKind.Key, (uint64_t)&protocol witness table for ContainerBackgroundKind.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result) {
    goto LABEL_13;
  }
  int v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 6)
  {
    if (v8 == 6) {
      return result;
    }
LABEL_13:
    uint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ContainerBackgroundKind.Key>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 6) {
    goto LABEL_13;
  }
  if (v3 == 5)
  {
    if (v8 != 5) {
      goto LABEL_13;
    }
  }
  else if (v8 == 5 || v8 != v3)
  {
    goto LABEL_13;
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  int v3 = a2;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTextFieldTruncationMode>, (uint64_t)&type metadata for DefaultTextFieldTruncationMode, (uint64_t)&protocol witness table for DefaultTextFieldTruncationMode, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result) {
    goto LABEL_9;
  }
  int v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 3)
  {
    if (v8 == 3) {
      return result;
    }
LABEL_9:
    uint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultTextFieldTruncationMode>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 3 || v8 != v3) {
    goto LABEL_9;
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;

  int v3 = a2;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextScaleKey>, (uint64_t)&type metadata for TextScaleKey, (uint64_t)&protocol witness table for TextScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v10);
  if (!result) {
    goto LABEL_7;
  }
  int v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2) {
      return result;
    }
LABEL_7:
    uint64_t v9 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TextScaleKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v9);
    return swift_release();
  }
  if (v8 == 2 || ((((v8 & 1) == 0) ^ v3) & 1) == 0) {
    goto LABEL_7;
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned __int8 *)(result + 72) != a2)
  {
    int v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  int v3 = a2;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result) {
    goto LABEL_9;
  }
  int v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 3)
  {
    if (v8 == 3) {
      return result;
    }
LABEL_9:
    uint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 3 || v8 != v3) {
    goto LABEL_9;
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v10;
  uint64_t v11;

  int v3 = a2;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result) {
    goto LABEL_9;
  }
  int v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 3)
  {
    if (v8 == 3) {
      return result;
    }
LABEL_9:
    uint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 3 || v8 != v3) {
    goto LABEL_9;
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;

  int v3 = a2;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsVibrantBlendingKey>, (uint64_t)&type metadata for AllowsVibrantBlendingKey, (uint64_t)&protocol witness table for AllowsVibrantBlendingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v10);
  if (!result) {
    goto LABEL_7;
  }
  int v8 = *(unsigned __int8 *)(result + 72);
  if (v3 == 2)
  {
    if (v8 == 2) {
      return result;
    }
LABEL_7:
    uint64_t v9 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AllowsVibrantBlendingKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v9);
    return swift_release();
  }
  if (v8 == 2 || ((((v8 & 1) == 0) ^ v3) & 1) == 0) {
    goto LABEL_7;
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TextAlignmentKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextAlignmentKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextAlignmentKey>, (uint64_t)&type metadata for TextAlignmentKey, (uint64_t)&protocol witness table for TextAlignmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextAlignmentKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextAlignmentKey>>);
    }
  }
}

uint64_t EnvironmentValues.dynamicTypeSize.setter(unsigned __int8 *a1)
{
  uint64_t v2 = *v1;
  unsigned __int8 v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.defaultForegroundColor : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  swift_retain();
  uint64_t v7 = swift_retain();
  uint64_t v8 = a2(v7);
  if (v8)
  {
    uint64_t v9 = specialized ShapeStyle.fallbackColor(in:level:)(v5, v6, 0, v8);
    swift_release();
    swift_release();
    uint64_t result = swift_release();
  }
  else
  {
    swift_release();
    uint64_t result = swift_release();
    uint64_t v9 = 0;
  }
  *a3 = v9;
  return result;
}

uint64_t EnvironmentValues.colorScheme.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.colorScheme.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.imageScale.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.imageScale.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.horizontalSizeClass.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.horizontalSizeClass.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t key path getter for EnvironmentValues.lineSpacing : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double (*a2)(uint64_t)@<X3>, double (*a3)(uint64_t, uint64_t *)@<X5>, double *a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v7 = a2(v5);
    swift_release_n();
  }
  else
  {
    uint64_t v9 = swift_retain_n();
    double v7 = a3(v9, &v11);
  }
  uint64_t result = swift_release_n();
  *a4 = v7;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>, (uint64_t)&type metadata for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t)&protocol witness table for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  unsigned __int8 v3 = a2 & 1;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(unsigned char *)(result + 72))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DisplayGamutKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t result;
  uint64_t v5;
  Swift::Int v6;
  Swift::Int v7;

  unsigned __int8 v3 = a2 & 1;
  uint64_t result = specialized find<A>(_:key:)(*a1);
  if (!result || (v3 == 0) == *(unsigned char *)(result + 72))
  {
    Swift::Int v5 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<LayoutDirectionKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    double v7 = v6;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v7, 0, v5);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  unsigned __int8 v3 = a2 & 1;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(unsigned char *)(result + 72))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ColorSchemeKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  unsigned __int8 v3 = a2 & 1;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(unsigned char *)(result + 72))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ColorSchemeContrastKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsTighteningKey>, (uint64_t)&type metadata for AllowsTighteningKey, (uint64_t)&protocol witness table for AllowsTighteningKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AllowsTighteningKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = *a1;
  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for ViewListShouldParentToPlaceholderSubgraph);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v7);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    Swift::Int v6 = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<ViewListShouldParentToPlaceholderSubgraph>, (uint64_t)&type metadata for ViewListShouldParentToPlaceholderSubgraph, (uint64_t)&protocol witness table for ViewListShouldParentToPlaceholderSubgraph, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ViewListShouldParentToPlaceholderSubgraph, 0, v6);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityButtonShapesKey>, (uint64_t)&type metadata for AccessibilityButtonShapesKey, (uint64_t)&protocol witness table for AccessibilityButtonShapesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityButtonShapesKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>, (uint64_t)&type metadata for AccessibilityDifferentiateWithoutColorKey, (uint64_t)&protocol witness table for AccessibilityDifferentiateWithoutColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>, (uint64_t)&type metadata for AccessibilityReduceTransparencyKey, (uint64_t)&protocol witness table for AccessibilityReduceTransparencyKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceMotionKey>, (uint64_t)&type metadata for AccessibilityReduceMotionKey, (uint64_t)&protocol witness table for AccessibilityReduceMotionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityReduceMotionKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityInvertColorsKey>, (uint64_t)&type metadata for AccessibilityInvertColorsKey, (uint64_t)&protocol witness table for AccessibilityInvertColorsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityInvertColorsKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>, (uint64_t)&type metadata for AccessibilityDimFlashingLightsKey, (uint64_t)&protocol witness table for AccessibilityDimFlashingLightsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>, (uint64_t)&type metadata for AccessibilityPlayAnimatedImagesKey, (uint64_t)&protocol witness table for AccessibilityPlayAnimatedImagesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityOnOffLabelsKey>, (uint64_t)&type metadata for AccessibilityOnOffLabelsKey, (uint64_t)&protocol witness table for AccessibilityOnOffLabelsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityOnOffLabelsKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnabledKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedLuminanceKey>, (uint64_t)&type metadata for ReducedLuminanceKey, (uint64_t)&protocol witness table for ReducedLuminanceKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ReducedLuminanceKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  unsigned __int8 v3 = a2 & 1;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorSchemeKey>, (uint64_t)&type metadata for SystemColorSchemeKey, (uint64_t)&protocol witness table for SystemColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(unsigned char *)(result + 72))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<SystemColorSchemeKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  unsigned __int8 v3 = a2 & 1;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>, (uint64_t)&type metadata for BackgroundProminence.Key, (uint64_t)&protocol witness table for BackgroundProminence.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(unsigned char *)(result + 72))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundProminence.Key>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesAnimationsKey>, (uint64_t)&type metadata for DisablesAnimationsKey, (uint64_t)&protocol witness table for DisablesAnimationsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<DisablesAnimationsKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<FromScrollViewKey>, (uint64_t)&type metadata for FromScrollViewKey, (uint64_t)&protocol witness table for FromScrollViewKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<FromScrollViewKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HasSystemOpenURLActionKey>, (uint64_t)&type metadata for HasSystemOpenURLActionKey, (uint64_t)&protocol witness table for HasSystemOpenURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<HasSystemOpenURLActionKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  unsigned __int8 v3 = a2 & 1;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ParagraphTypesettingKey>, (uint64_t)&type metadata for ParagraphTypesettingKey, (uint64_t)&protocol witness table for ParagraphTypesettingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(unsigned char *)(result + 72))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ParagraphTypesettingKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = *a1;
  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for _GraphInputs.RemovePreferenceInput);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v7);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    Swift::Int v6 = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.RemovePreferenceInput>, (uint64_t)&type metadata for _GraphInputs.RemovePreferenceInput, (uint64_t)&protocol witness table for _GraphInputs.RemovePreferenceInput, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.RemovePreferenceInput, 0, v6);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>, (uint64_t)&type metadata for Transaction.DisabledPageScrollAnimationKey, (uint64_t)&protocol witness table for Transaction.DisabledPageScrollAnimationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>, (uint64_t)&type metadata for SymbolRenderingModeKey, (uint64_t)&protocol witness table for SymbolRenderingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  if (!specialized find1<A>(_:key:filter:)(v4, v9)
    || (type metadata accessor for [LayoutDirection](0, (unint64_t *)&lazy cache variable for type metadata for SymbolRenderingMode?, (uint64_t)&type metadata for SymbolRenderingMode, MEMORY[0x263F8D8F0]), uint64_t result = AGCompareValues(), !result))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolRenderingModeKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  unsigned __int8 v3 = a2 & 1;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(unsigned char *)(result + 72))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<WritingModeKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey>, (uint64_t)&type metadata for Transaction.IsScrollStateValueUpdateKey, (uint64_t)&protocol witness table for Transaction.IsScrollStateValueUpdateKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.IsScrollStateValueUpdateKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility>, (uint64_t)&type metadata for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t)&protocol witness table for Transaction.ScrollToRequiresCompleteVisibility, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.ScrollToRequiresCompleteVisibility>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>, (uint64_t)&type metadata for SystemAccentValueKey, (uint64_t)&protocol witness table for SystemAccentValueKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v10);
  if (!result) {
    goto LABEL_7;
  }
  uint64_t v8 = *(char *)(result + 72);
  if (a2 == 10)
  {
    if (v8 == 10) {
      return result;
    }
LABEL_7:
    uint64_t v9 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<SystemAccentValueKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v9);
    return swift_release();
  }
  if (v8 == 10 || qword_2461B9C78[a2] != qword_2461B9C78[v8]) {
    goto LABEL_7;
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SensitiveContentKey>, (uint64_t)&type metadata for SensitiveContentKey, (uint64_t)&protocol witness table for SensitiveContentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<SensitiveContentKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<TracksVelocityKey>, (uint64_t)&type metadata for TracksVelocityKey, (uint64_t)&protocol witness table for TracksVelocityKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<TracksVelocityKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationDisabledKey>, (uint64_t)&type metadata for HyphenationDisabledKey, (uint64_t)&protocol witness table for HyphenationDisabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<HyphenationDisabledKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UnredactSymbolImage>, (uint64_t)&type metadata for UnredactSymbolImage, (uint64_t)&protocol witness table for UnredactSymbolImage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<UnredactSymbolImage>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<ContinuousKey>, (uint64_t)&type metadata for ContinuousKey, (uint64_t)&protocol witness table for ContinuousKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<ContinuousKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AvoidsOrphansKey>, (uint64_t)&type metadata for AvoidsOrphansKey, (uint64_t)&protocol witness table for AvoidsOrphansKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AvoidsOrphansKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey>, (uint64_t)&type metadata for Transaction.ScrollPreservesVelocityKey, (uint64_t)&protocol witness table for Transaction.ScrollPreservesVelocityKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.ScrollPreservesVelocityKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollContentAdjustmentBehaviorKey>, (uint64_t)&type metadata for Transaction.ScrollContentAdjustmentBehaviorKey, (uint64_t)&protocol witness table for Transaction.ScrollContentAdjustmentBehaviorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  if (!specialized find1<A>(_:key:filter:)(v4, v9) || (uint64_t result = AGCompareValues(), !result))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.ScrollContentAdjustmentBehaviorKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  unsigned __int8 v3 = a2 & 1;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(unsigned char *)(result + 72))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundContextKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AppearsActiveKey>, (uint64_t)&type metadata for AppearsActiveKey, (uint64_t)&protocol witness table for AppearsActiveKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AppearsActiveKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsFocused, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsMain, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsActive, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsActive, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsFocused, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsMain, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  uint64_t v5;
  Swift::Int v6;
  Swift::Int v7;

  uint64_t result = specialized find<A>(_:key:)(*a1);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    Swift::Int v5 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<DisablesContentTransitionsKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesContentTransitionsKey>, (uint64_t)&type metadata for DisablesContentTransitionsKey, (uint64_t)&protocol witness table for DisablesContentTransitionsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    double v7 = v6;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v7, 0, v5);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>, (uint64_t)&type metadata for EnvironmentValues.DisableLinkColorKey, (uint64_t)&protocol witness table for EnvironmentValues.DisableLinkColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  unsigned __int8 v3 = a2 & 1;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderProminenceKey>, (uint64_t)&type metadata for HeaderProminenceKey, (uint64_t)&protocol witness table for HeaderProminenceKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(unsigned char *)(result + 72))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<HeaderProminenceKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>, (uint64_t)&type metadata for SymbolsGrowToFitBackgroundKey, (uint64_t)&protocol witness table for SymbolsGrowToFitBackgroundKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsVisionEnabledKey>, (uint64_t)&type metadata for IsVisionEnabledKey, (uint64_t)&protocol witness table for IsVisionEnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<IsVisionEnabledKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InTouchBarKey>, (uint64_t)&type metadata for InTouchBarKey, (uint64_t)&protocol witness table for InTouchBarKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<InTouchBarKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  unsigned __int8 v3 = a2 & 1;
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || (v3 == 0) == *(unsigned char *)(result + 72))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultRenderingModeKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = v3;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityEnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>>();
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.explicitTruncationMode : EnvironmentValues@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t)@<X3>, void (*a3)(uint64_t *__return_ptr, uint64_t, unsigned char *)@<X4>, unsigned char *a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    a2(&v11, v5);
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    a3(&v11, v8, v10);
  }
  uint64_t result = swift_release_n();
  *a4 = v11;
  return result;
}

uint64_t EnvironmentValues.minimumScaleFactor.setter(double a1)
{
  if (a1 <= 1.0 && a1 > 0.0) {
    double v3 = a1;
  }
  else {
    double v3 = 1.0;
  }
  uint64_t v4 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    uint64_t v5 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1)
{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues.subscript.setter(a1);
}

{
  uint64_t v1;
  uint64_t WitnessTable;
  uint64_t v4;

  uint64_t v4 = a1;
  uint64_t v1 = type metadata accessor for EnvironmentObjectKey();
  uint64_t WitnessTable = swift_getWitnessTable();
  return specialized EnvironmentValues.subscript.setter(&v4, v1, v1, WitnessTable);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if (!v1[1])
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)&v11);
    double v7 = v9;
    swift_release_n();
    if (v5) {
      goto LABEL_3;
    }
LABEL_5:
    specialized EnvironmentValues._set<A>(_:for:)(a1);
    return _s7SwiftUI24TypesettingConfigurationVWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
  }
  swift_retain_n();
  swift_retain_n();
  uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
  double v7 = v6;
  swift_release_n();
  swift_release_n();
  if (!v5) {
    goto LABEL_5;
  }
LABEL_3:
  (*(void (**)(ValueMetadata *, uint64_t *, uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v7 + 16))(&type metadata for TypesettingConfigurationKey, v2, a1, &type metadata for TypesettingConfigurationKey, &protocol witness table for TypesettingConfigurationKey, v5, v7);
  return _s7SwiftUI24TypesettingConfigurationVWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
}

{
  return specialized EnvironmentValues.subscript.setter(a1);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  double v3 = *v1;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DynamicTypeSizeKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DynamicTypeSizeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DynamicTypeSizeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DynamicTypeSizeKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>, (uint64_t)&type metadata for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t)&protocol witness table for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<LegibilityWeightKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LegibilityWeightKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<LegibilityWeightKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LegibilityWeightKey>>);
    }
  }
}

uint64_t specialized EnvironmentValues._set<A>(_:for:)(uint64_t a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v7 = *v3;
  swift_retain_n();
  swift_bridgeObjectRetain();
  a2(v3, a1, &v10);
  swift_bridgeObjectRelease();
  swift_release();
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v7, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized EnvironmentValues._set<A>(_:for:)(uint64_t a1)
{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned char v5[40];
  uint64_t v6;

  Swift::Int v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = *v1;
  outlined init with copy of SystemFormatStyle.DateReference(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for AccessibilityTextAttributeResolver?);
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, (uint64_t)v5);
  swift_release();
  outlined destroy of ClosedRange<Date>?((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for AccessibilityTextAttributeResolver?);
  if (v1[1])
  {
    double v3 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v3);
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned char v5[8];
  uint64_t v6;

  Swift::Int v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = *v1;
  outlined init with copy of EnvironmentValues.PreferenceBridgeKey.Value(a1, (uint64_t)v5);
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, (uint64_t)v5);
  swift_release();
  outlined destroy of EnvironmentValues.PreferenceBridgeKey.Value((uint64_t)v5);
  if (v1[1])
  {
    double v3 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v3);
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, MEMORY[0x263F079C8], (void (*)(uint64_t *, unsigned char *, unsigned char *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, MEMORY[0x263F07920], (void (*)(uint64_t *, unsigned char *, unsigned char *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, MEMORY[0x263F07690], (void (*)(uint64_t *, unsigned char *, unsigned char *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, (void (*)(uint64_t *, unsigned char *, unsigned char *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, (void (*)(uint64_t *, unsigned char *, unsigned char *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void v9[4];

  v9[3] = *MEMORY[0x263EF8340];
  double v3 = type metadata accessor for EnvironmentValues.CapitalizationContext();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v6 = *v1;
  outlined init with copy of SystemFormatStyle.DateReference(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, (uint64_t)v5);
  swift_release();
  outlined destroy of ClosedRange<Date>?((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
  if (v1[1])
  {
    uint64_t v7 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned char v9[16];

  double v3 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Swift::Int v6 = *v1;
  outlined init with copy of SystemFormatStyle.DateReference(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, (uint64_t)v5);
  swift_release();
  outlined destroy of ClosedRange<Date>?((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
  if (v1[1])
  {
    uint64_t v7 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned char v5[40];
  uint64_t v6;

  Swift::Int v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = *v1;
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v5);
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, (uint64_t)v5);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  if (v1[1])
  {
    double v3 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v3);
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.lineSpacing.setter(void (*a1)(uint64_t *, uint64_t *, double), void (*a2)(uint64_t, uint64_t), double a3)
{
  uint64_t v7 = *v3;
  swift_retain_n();
  a1(v3, &v10, a3);
  swift_release();
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a2(v7, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.accessibilityEnabled : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t (*a3)(uint64_t, uint64_t *)@<X4>, unsigned char *a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v7 = a2(v5);
    swift_release_n();
  }
  else
  {
    uint64_t v9 = swift_retain_n();
    char v7 = a3(v9, &v11);
  }
  uint64_t result = swift_release_n();
  *a4 = v7 & 1;
  return result;
}

void type metadata accessor for AddGestureModifier<_EndedGesture<TapGesture>>()
{
  if (!lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<TapGesture>>)
  {
    type metadata accessor for SingleTapGesture<TappableEvent>(255, (unint64_t *)&lazy cache variable for type metadata for _EndedGesture<TapGesture>, (uint64_t)&type metadata for TapGesture, (uint64_t)&protocol witness table for TapGesture, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _EndedGesture);
    lazy protocol witness table accessor for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>();
    unint64_t v0 = type metadata accessor for AddGestureModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<TapGesture>>);
    }
  }
}

uint64_t EnvironmentValues.textCase.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.explicitTruncationMode.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.explicitTruncationMode.setter(unsigned __int8 *a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = *v3;
  uint64_t v7 = *a1;
  swift_retain_n();
  a2(v3, v7, &v10);
  swift_release();
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v6, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

double key path getter for EnvironmentValues.underlineStyle : EnvironmentValues@<D0>(uint64_t *a1@<X0>, void (*a2)(long long *__return_ptr, uint64_t)@<X3>, void (*a3)(long long *__return_ptr, uint64_t, uint64_t *)@<X4>, _OWORD *a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    a2(&v11, v5);
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    a3(&v11, v8, &v10);
  }
  swift_release_n();
  double result = *(double *)&v11;
  *a4 = v11;
  return result;
}

uint64_t EnvironmentValues.hyphenationFactor.setter(double a1)
{
  return EnvironmentValues.lineSpacing.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

uint64_t EnvironmentValues.hyphenationDisabled.setter(uint64_t a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v7 = *v3;
  swift_retain_n();
  a2(v3, a1, &v10);
  swift_release();
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v7, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.hyphenationDisabled : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t (*a3)(uint64_t, uint64_t *)@<X5>, unsigned char *a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v7 = a2(v5);
    swift_release_n();
  }
  else
  {
    uint64_t v9 = swift_retain_n();
    char v7 = a3(v9, &v11);
  }
  uint64_t result = swift_release_n();
  *a4 = v7 & 1;
  return result;
}

uint64_t EnvironmentValues.allowsTightening.setter(uint64_t a1)
{
  return EnvironmentValues.hyphenationDisabled.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.truncationMode.setter(unsigned __int8 *a1)
{
  uint64_t v2 = *v1;
  unsigned __int8 v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.paragraphTypesetting.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for [DynamicTypeSize](uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for DynamicTypeSize);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t EnvironmentValues.controlSize.setter(unsigned __int8 *a1)
{
  uint64_t v2 = *v1;
  unsigned __int8 v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.tint : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)&v7);
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(uint64_t a1, uint64_t a2)
{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>, (uint64_t)&type metadata for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t)&protocol witness table for AccessibilityPrefersCrossFadeTransitionsKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>, (uint64_t)&type metadata for AccessibilityPlayAnimatedImagesKey, (uint64_t)&protocol witness table for AccessibilityPlayAnimatedImagesKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>, (uint64_t)&type metadata for AccessibilityDimFlashingLightsKey, (uint64_t)&protocol witness table for AccessibilityDimFlashingLightsKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityOnOffLabelsKey>, (uint64_t)&type metadata for AccessibilityOnOffLabelsKey, (uint64_t)&protocol witness table for AccessibilityOnOffLabelsKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>, (uint64_t)&type metadata for EnvironmentValues.StringResolutionDate, (uint64_t)&protocol witness table for EnvironmentValues.StringResolutionDate);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>, (uint64_t)&type metadata for AccessibilityDifferentiateWithoutColorKey, (uint64_t)&protocol witness table for AccessibilityDifferentiateWithoutColorKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>, (uint64_t)&type metadata for AccessibilityReduceTransparencyKey, (uint64_t)&protocol witness table for AccessibilityReduceTransparencyKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceMotionKey>, (uint64_t)&type metadata for AccessibilityReduceMotionKey, (uint64_t)&protocol witness table for AccessibilityReduceMotionKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityInvertColorsKey>, (uint64_t)&type metadata for AccessibilityInvertColorsKey, (uint64_t)&protocol witness table for AccessibilityInvertColorsKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityButtonShapesKey>, (uint64_t)&type metadata for AccessibilityButtonShapesKey, (uint64_t)&protocol witness table for AccessibilityButtonShapesKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayCornerRadiusKey>, (uint64_t)&type metadata for DisplayCornerRadiusKey, (uint64_t)&protocol witness table for DisplayCornerRadiusKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedLuminanceKey>, (uint64_t)&type metadata for ReducedLuminanceKey, (uint64_t)&protocol witness table for ReducedLuminanceKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontKey>, (uint64_t)&type metadata for FontKey, (uint64_t)&protocol witness table for FontKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayScaleKey>, (uint64_t)&type metadata for DisplayScaleKey, (uint64_t)&protocol witness table for DisplayScaleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.Key>, (uint64_t)&type metadata for EnvironmentValues.Key, (uint64_t)&protocol witness table for EnvironmentValues.Key);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LowerLineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LowerLineLimitKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LineLimitKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<ForegroundStyleKey>, (uint64_t)&type metadata for ForegroundStyleKey, (uint64_t)&protocol witness table for ForegroundStyleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerShapeKey>, (uint64_t)&type metadata for ContainerShapeKey, (uint64_t)&protocol witness table for ContainerShapeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundMaterialKey>, (uint64_t)&type metadata for BackgroundMaterialKey, (uint64_t)&protocol witness table for BackgroundMaterialKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSuffixKey>, (uint64_t)&type metadata for TextSuffixKey, (uint64_t)&protocol witness table for TextSuffixKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultForegroundStyleKey>, (uint64_t)&type metadata for DefaultForegroundStyleKey, (uint64_t)&protocol witness table for DefaultForegroundStyleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvableStringReferenceDateKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaterialActiveAppearance.Key>, (uint64_t)&type metadata for MaterialActiveAppearance.Key, (uint64_t)&protocol witness table for MaterialActiveAppearance.Key);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<LayoutDirectionKey>, (uint64_t)&type metadata for LayoutDirectionKey, (uint64_t)&protocol witness table for LayoutDirectionKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.NearestScrollableAxesEnvironmentKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.AllScrollableAxesEnvironmentKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<LocaleKey>, (uint64_t)&type metadata for LocaleKey, (uint64_t)&protocol witness table for LocaleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<CalendarKey>, (uint64_t)&type metadata for CalendarKey, (uint64_t)&protocol witness table for CalendarKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TimeZoneKey>, (uint64_t)&type metadata for TimeZoneKey, (uint64_t)&protocol witness table for TimeZoneKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPaddingKey>, (uint64_t)&type metadata for DefaultPaddingKey, (uint64_t)&protocol witness table for DefaultPaddingKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityTextAttributeResolverKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TintKey>, (uint64_t)&type metadata for TintKey, (uint64_t)&protocol witness table for TintKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>, (uint64_t)&type metadata for HoverEffectContextKey, (uint64_t)&protocol witness table for HoverEffectContextKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccentColorKey>, (uint64_t)&type metadata for AccentColorKey, (uint64_t)&protocol witness table for AccentColorKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultAccentColorProviderKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>, (uint64_t)&type metadata for SystemAccentValueKey, (uint64_t)&protocol witness table for SystemAccentValueKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>, (uint64_t)&type metadata for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.SystemAccentValueProviderKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>, (uint64_t)&type metadata for RedactionReasonsKey, (uint64_t)&protocol witness table for RedactionReasonsKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<SensitiveContentKey>, (uint64_t)&type metadata for SensitiveContentKey, (uint64_t)&protocol witness table for SensitiveContentKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.CoreUINamedColorProviderKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<HasSystemOpenURLActionKey>, (uint64_t)&type metadata for HasSystemOpenURLActionKey, (uint64_t)&protocol witness table for HasSystemOpenURLActionKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenURLActionKey>, (uint64_t)&type metadata for OpenURLActionKey, (uint64_t)&protocol witness table for OpenURLActionKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenSensitiveURLActionKey>, (uint64_t)&type metadata for OpenSensitiveURLActionKey, (uint64_t)&protocol witness table for OpenSensitiveURLActionKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>, (uint64_t)&type metadata for EnvironmentValues.ContentShapesKey, (uint64_t)&protocol witness table for EnvironmentValues.ContentShapesKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>, (uint64_t)&type metadata for ContainerBackgroundKind.Key, (uint64_t)&protocol witness table for ContainerBackgroundKind.Key);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>, (uint64_t)&type metadata for EnvironmentValues.SymbolEffectsKey, (uint64_t)&protocol witness table for EnvironmentValues.SymbolEffectsKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_textShape>, (uint64_t)&type metadata for EnvironmentValues.__Key_textShape, (uint64_t)&protocol witness table for EnvironmentValues.__Key_textShape);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContentTransition.State>, (uint64_t)&type metadata for ContentTransition.State, (uint64_t)&protocol witness table for ContentTransition.State);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>, (uint64_t)&type metadata for TruncationModeKey, (uint64_t)&protocol witness table for TruncationModeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextAlignmentKey>, (uint64_t)&type metadata for TextAlignmentKey, (uint64_t)&protocol witness table for TextAlignmentKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumScaleFactorKey>, (uint64_t)&type metadata for MinimumScaleFactorKey, (uint64_t)&protocol witness table for MinimumScaleFactorKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineSpacingKey>, (uint64_t)&type metadata for LineSpacingKey, (uint64_t)&protocol witness table for LineSpacingKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineHeightMultipleKey>, (uint64_t)&type metadata for LineHeightMultipleKey, (uint64_t)&protocol witness table for LineHeightMultipleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaximumLineHeightKey>, (uint64_t)&type metadata for MaximumLineHeightKey, (uint64_t)&protocol witness table for MaximumLineHeightKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumLineHeightKey>, (uint64_t)&type metadata for MinimumLineHeightKey, (uint64_t)&protocol witness table for MinimumLineHeightKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationFactorKey>, (uint64_t)&type metadata for HyphenationFactorKey, (uint64_t)&protocol witness table for HyphenationFactorKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationDisabledKey>, (uint64_t)&type metadata for HyphenationDisabledKey, (uint64_t)&protocol witness table for HyphenationDisabledKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSizingKey>, (uint64_t)&type metadata for TextSizingKey, (uint64_t)&protocol witness table for TextSizingKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnderlineStyleKey>, (uint64_t)&type metadata for UnderlineStyleKey, (uint64_t)&protocol witness table for UnderlineStyleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<StrikethroughStyleKey>, (uint64_t)&type metadata for StrikethroughStyleKey, (uint64_t)&protocol witness table for StrikethroughStyleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UnredactSymbolImage>, (uint64_t)&type metadata for UnredactSymbolImage, (uint64_t)&protocol witness table for UnredactSymbolImage);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>, (uint64_t)&type metadata for ControlSizeKey, (uint64_t)&protocol witness table for ControlSizeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>, (uint64_t)&type metadata for SymbolRenderingModeKey, (uint64_t)&protocol witness table for SymbolRenderingModeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorDefinitionKey>, (uint64_t)&type metadata for SystemColorDefinitionKey, (uint64_t)&protocol witness table for SystemColorDefinitionKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultSeparatorShapeStyleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTextFieldTruncationMode>, (uint64_t)&type metadata for DefaultTextFieldTruncationMode, (uint64_t)&protocol witness table for DefaultTextFieldTruncationMode);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsTighteningKey>, (uint64_t)&type metadata for AllowsTighteningKey, (uint64_t)&protocol witness table for AllowsTighteningKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AvoidsOrphansKey>, (uint64_t)&type metadata for AvoidsOrphansKey, (uint64_t)&protocol witness table for AvoidsOrphansKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<BodyHeadOutdentKey>, (uint64_t)&type metadata for BodyHeadOutdentKey, (uint64_t)&protocol witness table for BodyHeadOutdentKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>, (uint64_t)&type metadata for TextCaseKey, (uint64_t)&protocol witness table for TextCaseKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TypesettingConfigurationKey>, (uint64_t)&type metadata for TypesettingConfigurationKey, (uint64_t)&protocol witness table for TypesettingConfigurationKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>, (uint64_t)&type metadata for BackgroundProminence.Key, (uint64_t)&protocol witness table for BackgroundProminence.Key);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundStyleKey>, (uint64_t)&type metadata for BackgroundStyleKey, (uint64_t)&protocol witness table for BackgroundStyleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>, (uint64_t)&type metadata for EnvironmentValues.ScrollAnchorsKey, (uint64_t)&protocol witness table for EnvironmentValues.ScrollAnchorsKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AppearsActiveKey>, (uint64_t)&type metadata for AppearsActiveKey, (uint64_t)&protocol witness table for AppearsActiveKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsFocused);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsMain);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsActive, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsActive);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsFocused);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsMain);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontModifiersKey>, (uint64_t)&type metadata for FontModifiersKey, (uint64_t)&protocol witness table for FontModifiersKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>, (uint64_t)&type metadata for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.BridgedEnvironmentResolverKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextScaleKey>, (uint64_t)&type metadata for TextScaleKey, (uint64_t)&protocol witness table for TextScaleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>, (uint64_t)&type metadata for EnvironmentValues.DisableLinkColorKey, (uint64_t)&protocol witness table for EnvironmentValues.DisableLinkColorKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvedTextProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvedTextProviderKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<ParagraphTypesettingKey>, (uint64_t)&type metadata for ParagraphTypesettingKey, (uint64_t)&protocol witness table for ParagraphTypesettingKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderProminenceKey>, (uint64_t)&type metadata for HeaderProminenceKey, (uint64_t)&protocol witness table for HeaderProminenceKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.AllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowedDynamicRangeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MaxAllowedDynamicRangeKey>, (uint64_t)&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, (uint64_t)&protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>, (uint64_t)&type metadata for SymbolBackgroundCornerRadiusKey, (uint64_t)&protocol witness table for SymbolBackgroundCornerRadiusKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>, (uint64_t)&type metadata for SymbolsGrowToFitBackgroundKey, (uint64_t)&protocol witness table for SymbolsGrowToFitBackgroundKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAsssetIdiomKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetSubtypeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetMatchTypesKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsVisionEnabledKey>, (uint64_t)&type metadata for IsVisionEnabledKey, (uint64_t)&protocol witness table for IsVisionEnabledKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolFontKey>, (uint64_t)&type metadata for SymbolFontKey, (uint64_t)&protocol witness table for SymbolFontKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultFontKey>, (uint64_t)&type metadata for DefaultFontKey, (uint64_t)&protocol witness table for DefaultFontKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultSymbolFontKey>, (uint64_t)&type metadata for DefaultSymbolFontKey, (uint64_t)&protocol witness table for DefaultSymbolFontKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultKerningKey>, (uint64_t)&type metadata for DefaultKerningKey, (uint64_t)&protocol witness table for DefaultKerningKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTrackingKey>, (uint64_t)&type metadata for DefaultTrackingKey, (uint64_t)&protocol witness table for DefaultTrackingKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultBaselineOffsetKey>, (uint64_t)&type metadata for DefaultBaselineOffsetKey, (uint64_t)&protocol witness table for DefaultBaselineOffsetKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<FallbackFontProviderKey>, (uint64_t)&type metadata for FallbackFontProviderKey, (uint64_t)&protocol witness table for FallbackFontProviderKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<InTouchBarKey>, (uint64_t)&type metadata for InTouchBarKey, (uint64_t)&protocol witness table for InTouchBarKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPixelLengthKey>, (uint64_t)&type metadata for DefaultPixelLengthKey, (uint64_t)&protocol witness table for DefaultPixelLengthKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DividerThicknessKey>, (uint64_t)&type metadata for DividerThicknessKey, (uint64_t)&protocol witness table for DividerThicknessKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsVibrantBlendingKey>, (uint64_t)&type metadata for AllowsVibrantBlendingKey, (uint64_t)&protocol witness table for AllowsVibrantBlendingKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontDefinitionKey>, (uint64_t)&type metadata for FontDefinitionKey, (uint64_t)&protocol witness table for FontDefinitionKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<VibrantColorStyleKey>, (uint64_t)&type metadata for VibrantColorStyleKey, (uint64_t)&protocol witness table for VibrantColorStyleKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityEnabledKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>, (uint64_t)&type metadata for ExplicitPreferredColorSchemeKey, (uint64_t)&protocol witness table for ExplicitPreferredColorSchemeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorSchemeKey>, (uint64_t)&type metadata for SystemColorSchemeKey, (uint64_t)&protocol witness table for SystemColorSchemeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TintAdjustmentModeKey>, (uint64_t)&type metadata for TintAdjustmentModeKey, (uint64_t)&protocol witness table for TintAdjustmentModeKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlacementTintKey>, (uint64_t)&type metadata for PlacementTintKey, (uint64_t)&protocol witness table for PlacementTintKey);
}

{
  return specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>, (uint64_t)&type metadata for EnvironmentValues.PreferenceBridgeKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferenceBridgeKey);
}

uint64_t EnvironmentValues.contentTransitionAddsDrawingGroup.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  if (v4)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v20);
    swift_release_n();
    swift_release_n();
    int v5 = v27;
    uint64_t v6 = v20;
    unint64_t v7 = v21 | ((unint64_t)v22 << 32);
    uint64_t v8 = v23;
    int v9 = v24;
    uint64_t v10 = v25;
    uint64_t v11 = v26;
  }
  else
  {
    uint64_t v12 = swift_retain_n();
    uint64_t v13 = specialized find<A>(_:key:)(v12);
    if (v13)
    {
      uint64_t v6 = *(void *)(v13 + 72);
      unint64_t v7 = *(unsigned int *)(v13 + 80) | ((unint64_t)*(unsigned __int8 *)(v13 + 84) << 32);
      uint64_t v8 = *(unsigned __int8 *)(v13 + 85);
      int v9 = *(unsigned __int8 *)(v13 + 86);
      uint64_t v10 = *(unsigned __int8 *)(v13 + 87);
      uint64_t v11 = *(void *)(v13 + 88);
      int v5 = *(_DWORD *)(v13 + 96);
      outlined copy of ContentTransition.Storage(v6, v7, v8);
      swift_retain();
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      int v5 = 0;
      unint64_t v7 = 0x302000000;
      uint64_t v6 = 0x8000000000;
    }
    swift_release_n();
  }
  unsigned int v14 = v5 & 0xFFFFFFFE | a1 & 1;
  swift_retain_n();
  outlined copy of ContentTransition.Storage(v6, v7, v8);
  uint64_t v15 = 0x1000000000000;
  if (!v9) {
    uint64_t v15 = 0;
  }
  unint64_t v16 = v7 & 0xFFFFFFFFFFLL | (v8 << 40) | v15 | (v10 << 56);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v6, v16, v11, v14);
  swift_release();
  outlined consume of ContentTransition.Storage(v6, v7, v8);
  swift_release();
  if (v4)
  {
    uint64_t v17 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v17);
    swift_release();
    swift_release();
  }
  swift_release();
  outlined consume of ContentTransition.Storage(v6, v7, v8);
  return swift_release();
}

uint64_t EnvironmentValues.contentTransitionAddsDrawingGroup.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, (uint64_t)&v9);
    swift_release_n();
    swift_release_n();
    uint64_t v2 = v9;
    unint64_t v3 = v10 | ((unint64_t)v11 << 32);
    char v4 = v12;
    LOBYTE(v5) = v13;
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    uint64_t v7 = specialized find<A>(_:key:)(v6);
    if (v7)
    {
      uint64_t v2 = *(void *)(v7 + 72);
      unint64_t v3 = *(unsigned int *)(v7 + 80) | ((unint64_t)*(unsigned __int8 *)(v7 + 84) << 32);
      char v4 = *(unsigned char *)(v7 + 85);
      int v5 = *(_DWORD *)(v7 + 96);
      outlined copy of ContentTransition.Storage(v2, v3, v4);
      swift_retain();
    }
    else
    {
      char v4 = 0;
      LOBYTE(v5) = 0;
      unint64_t v3 = 0x302000000;
      uint64_t v2 = 0x8000000000;
    }
    swift_release_n();
  }
  outlined consume of ContentTransition.Storage(v2, v3, v4);
  swift_release();
  return v5 & 1;
}

uint64_t key path getter for EnvironmentValues.accentColor : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)&v7);
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

void type metadata accessor for _EnvironmentKeyTransformModifier<SymbolVariants>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>, (uint64_t)&type metadata for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t)&protocol witness table for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues._accessibilityShowButtonShapes.setter(uint64_t a1)
{
  return EnvironmentValues.accessibilityEnabled.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.symbolRenderingMode.setter(char *a1)
{
  uint64_t v2 = *v1;
  char v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.LineLimitKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.LineLimitKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.LineLimitKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LineLimitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.LineLimitKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextAlignmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextAlignmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextAlignmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextAlignmentKey>, (uint64_t)&type metadata for TextAlignmentKey, (uint64_t)&protocol witness table for TextAlignmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextAlignmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues.textJustification.setter(__int16 *a1)
{
  uint64_t v2 = *v1;
  __int16 v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.writingMode.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for _EnvironmentKeyTransformModifier<ParagraphTypesetting>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ParagraphTypesetting>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ParagraphTypesetting>);
    }
  }
}

uint64_t key path getter for EnvironmentValues.placementTint : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
    swift_bridgeObjectRetain();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TextJustification.Full(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

double EdgeInsets.adding(_:)(double a1, double a2, double a3, double a4, double a5)
{
  return a1 + a5;
}

uint64_t getEnumTagSinglePayload for EnvironmentObject(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

void _ViewList_SublistTransform.init()(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _PaddingLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t ProposedViewSize.subscript.getter(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    return a4;
  }
  else {
    return a2;
  }
}

uint64_t type metadata completion function for TypedElement()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LinearGradient()
{
  return &type metadata for LinearGradient;
}

uint64_t State.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + *(int *)(type metadata accessor for State() + 28)) = 0;
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v6(a3, a1, a2);
}

uint64_t destroy for DisplayList.InterpolatorAnimation()
{
  return swift_release();
}

double Path.init()@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 6;
  return result;
}

double static UnitPoint.center.getter()
{
  return 0.5;
}

uint64_t static HorizontalAlignment.center.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for center, (uint64_t)&static HorizontalAlignment.center);
}

uint64_t initializeWithCopy for UnwrapConditional(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v4);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

CGSize __swiftcall _ProposedSize.fixingUnspecifiedDimensions(at:)(CGSize at)
{
  if (!*(unsigned char *)(v1 + 8)) {
    at.double width = *(CGFloat *)v1;
  }
  if (!*(unsigned char *)(v1 + 24)) {
    at.double height = *(CGFloat *)(v1 + 16);
  }
  return at;
}

double partial apply for closure #1 in renderOnMainThread #1 <A>() in ViewRendererHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)@<D0>(double *a1@<X8>)
{
  return closure #1 in renderOnMainThread #1 <A>() in ViewRendererHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)(*(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned __int16 *)(v1 + 40) | (*(unsigned __int8 *)(v1 + 42) << 16), *(void *)(v1 + 64), *(void *)(v1 + 72), *(uint64_t **)(v1 + 80), a1, *(double *)(v1 + 48), *(double *)(v1 + 56));
}

uint64_t base witness table accessor for _AttributeBody in DynamicViewList<A>()
{
  return swift_getWitnessTable();
}

double UnitPoint.subscript.getter(char a1, double a2, double a3)
{
  if (a1) {
    return a3;
  }
  return result;
}

uint64_t static TupleView._makeViewList(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  int v45 = *a1;
  uint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  unsigned int v7 = *(_DWORD *)(a2 + 32);
  unint64_t v49 = *(void *)(a2 + 24);
  unsigned int v48 = *(_DWORD *)(a2 + 36);
  unint64_t v8 = *(void *)(a2 + 48);
  unint64_t v43 = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 56);
  int v10 = *(_DWORD *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  char v12 = *(unsigned char *)(a2 + 80);
  specialized static TupleDescriptor.tupleDescription(_:)(a3, &v64);
  unint64_t v13 = v8;
  uint64_t v14 = v64;
  BOOL v15 = (v9 & 0x200) != 0;
  LODWORD(v64) = v45;
  uint64_t v65 = v4;
  unint64_t v16 = v43;
  int v41 = v5;
  int v66 = v5;
  unint64_t v17 = v6;
  unint64_t v67 = v6;
  unint64_t v68 = v49;
  unsigned int v69 = v7;
  unsigned int v70 = v48;
  unint64_t v18 = v9;
  unint64_t v71 = v43;
  unint64_t v72 = v8;
  unint64_t v73 = v9;
  int v19 = v10;
  int v74 = v10;
  uint64_t v75 = v11;
  char v20 = v12;
  char v76 = v12;
  long long v77 = 0uLL;
  BOOL v78 = v15;
  uint64_t v79 = MEMORY[0x263F8EE78];
  if ((v18 & 0x200) != 0)
  {
    v18 &= ~0x200uLL;
    unint64_t v73 = v18;
  }
  uint64_t v21 = v14;
  uint64_t v22 = *(void *)(v14 + 16);
  if (v22)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unsigned __int8 v23 = (_OWORD *)(v21 + 40);
    do
    {
      uint64_t v24 = *((void *)v23 - 1);
      long long v25 = *v23;
      unsigned __int8 v23 = (_OWORD *)((char *)v23 + 24);
      *(void *)&long long v77 = v24;
      *((void *)&v77 + 1) = AGTupleElementOffset();
      long long v50 = v25;
      uint64_t List = type metadata accessor for TupleView.MakeList();
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)&v64, List, (uint64_t)&protocol witness table for TupleView<A>.MakeList);
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease();
    uint64_t v27 = v79;
    uint64_t v28 = v65;
    int v29 = v66;
    unint64_t v30 = v67;
    unint64_t v49 = v68;
    unsigned int v31 = v69;
    unsigned int v48 = v70;
    unint64_t v16 = v71;
    unint64_t v32 = v72;
    unint64_t v33 = v73;
    int v34 = v74;
    uint64_t v11 = v75;
    char v35 = v76;
  }
  else
  {
    unint64_t v36 = v13;
    unint64_t v33 = v18;
    swift_bridgeObjectRetain();
    unint64_t v30 = v17;
    uint64_t v28 = swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v32 = v36;
    uint64_t v27 = MEMORY[0x263F8EE78];
    int v29 = v41;
    unsigned int v31 = v7;
    int v34 = v19;
    char v35 = v20;
  }
  unint64_t v40 = v32;
  unint64_t v42 = v33;
  int v44 = v34;
  char v46 = v35;
  *(void *)&long long v50 = v28;
  DWORD2(v50) = v29;
  unint64_t v51 = v30;
  unint64_t v52 = v49;
  unint64_t v53 = __PAIR64__(v48, v31);
  unint64_t v54 = v16;
  unint64_t v55 = v32;
  unint64_t v56 = v33;
  LODWORD(v57) = v34;
  uint64_t v58 = v11;
  LOBYTE(v59) = v35;
  unsigned int v37 = v31;
  int v38 = v29;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.concat(_:inputs:)(v27, &v50, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  LODWORD(v50) = v64;
  *((void *)&v50 + 1) = v28;
  LODWORD(v51) = v38;
  unint64_t v52 = v30;
  unint64_t v53 = v49;
  unint64_t v54 = __PAIR64__(v48, v37);
  unint64_t v55 = v16;
  unint64_t v56 = v40;
  unint64_t v57 = v42;
  LODWORD(v58) = v44;
  uint64_t v59 = v11;
  char v60 = v46;
  long long v61 = v77;
  BOOL v62 = v78;
  uint64_t v63 = v27;
  return outlined release of TupleView<A>.MakeList((uint64_t)&v50);
}

uint64_t TypeConformance<>.visitType<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, void, uint64_t))(a3 + 8))(*v3, *v3, v3[1], a2);
}

{
  void *v3;

  return (*(uint64_t (**)(void, void, void, uint64_t))(a3 + 8))(*v3, *v3, v3[1], a2);
}

uint64_t protocol witness for ViewTypeVisitor.visit<A>(type:) in conformance TupleView<A>.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleView.MakeList.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t type metadata accessor for TupleView.MakeList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TupleView.MakeList.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = *(void *)(v4 + 8);
  int v9 = *(_DWORD *)(v4 + 16);
  uint64_t v10 = *(void *)(v4 + 24);
  uint64_t v11 = *(void *)(v4 + 48);
  int v12 = *(_DWORD *)(v5 + 72);
  uint64_t v13 = *(void *)(v5 + 80);
  char v14 = *(unsigned char *)(v5 + 88);
  uint64_t v47 = v8;
  int v48 = v9;
  long long v50 = *(_OWORD *)(v5 + 32);
  uint64_t v49 = v10;
  uint64_t v51 = v11;
  long long v52 = *(_OWORD *)(v5 + 56);
  int v53 = v12;
  uint64_t v54 = v13;
  char v55 = v14;
  if ((WORD6(v50) & 0x100) != 0)
  {
    int v34 = *(void **)(v5 + 96);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized _GraphInputs.pushScope<A>(id:)(v34);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  if (*(unsigned char *)(v5 + 112) == 1)
  {
    _GraphValue.init(_:)(OffsetAttribute2, &v45);
    *(void *)&long long v38 = v47;
    DWORD2(v38) = v48;
    *(void *)double v39 = v49;
    *(_OWORD *)&v39[8] = v50;
    *(void *)&v39[24] = v51;
    long long v40 = v52;
    int v41 = v53;
    uint64_t v42 = v54;
    char v43 = v55;
    static _ViewListOutputs.unaryViewList<A>(view:inputs:)((uint64_t)&v38, (uint64_t)v46);
  }
  else
  {
    uint64_t v37 = a4;
    _GraphValue.init(_:)(OffsetAttribute2, &v45);
    uint64_t v16 = v45;
    uint64_t v17 = v47;
    int v36 = v48;
    uint64_t v18 = v49;
    long long v19 = v50;
    uint64_t v20 = v51;
    long long v21 = v52;
    int v35 = v53;
    uint64_t v22 = v54;
    char v23 = v55;
    int ShouldRecordTree = AGSubgraphShouldRecordTree();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (ShouldRecordTree) {
      AGSubgraphBeginTreeElement();
    }
    int v44 = v16;
    *(void *)&long long v38 = v17;
    DWORD2(v38) = v36;
    *(void *)double v39 = v18;
    *(_OWORD *)&v39[8] = v19;
    *(void *)&v39[24] = v20;
    long long v40 = v21;
    int v41 = v35;
    uint64_t v42 = v22;
    char v43 = v23;
    (*(void (**)(void *__return_ptr, int *, long long *, uint64_t, uint64_t))(v37 + 32))(v46, &v44, &v38, a3, v37);
    $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v16, a3, v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  outlined init with copy of _ViewListOutputs((uint64_t)v46, (uint64_t)&v38);
  long long v25 = *(void **)(v5 + 120);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
  }
  unint64_t v27 = v25[2];
  unint64_t v26 = v25[3];
  if (v27 >= v26 >> 1) {
    long long v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v25);
  }
  v25[2] = v27 + 1;
  uint64_t v28 = &v25[9 * v27];
  *((_OWORD *)v28 + 2) = v38;
  long long v29 = *(_OWORD *)v39;
  long long v30 = *(_OWORD *)&v39[16];
  long long v31 = v40;
  *((unsigned char *)v28 + 96) = v41;
  *((_OWORD *)v28 + 4) = v30;
  *((_OWORD *)v28 + 5) = v31;
  *((_OWORD *)v28 + 3) = v29;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)(v5 + 120) = v25;
  uint64_t v32 = v46[6];
  uint64_t result = outlined destroy of _ViewListOutputs((uint64_t)v46);
  *(void *)(v5 + 56) = v32;
  return result;
}

uint64_t protocol witness for ViewTypeVisitor.visit<A>(type:) in conformance ConditionalMetadata<A><>.MakeList<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ConditionalMetadata<>.MakeList.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t ConditionalMetadata<>.MakeList.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v35 = a4;
  v49[9] = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = &v32[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = *(void **)(v4 + 32);
  if (*(unsigned char *)(v4 + 85)) {
    uint64_t v8 = specialized _GraphInputs.pushScope<A>(id:)(v11);
  }
  unint64_t v12 = *(void *)v4;
  LODWORD(v39) = *(_DWORD *)(v5 + 24);
  unint64_t v40 = v12;
  long long v36 = *(_OWORD *)(v5 + 8);
  long long v41 = v36;
  uint64_t v42 = v11;
  MEMORY[0x270FA5388](v8);
  *(void *)&v32[-32] = a3;
  v49[0] = &type metadata for ViewDescriptor;
  v49[1] = v13;
  v49[2] = a3;
  v49[3] = &protocol witness table for ViewDescriptor;
  uint64_t v14 = type metadata accessor for UnwrapConditional();
  *(void *)&v32[-24] = v14;
  *(void *)&v32[-16] = swift_getWitnessTable();
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v12);
  uint64_t v15 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v39, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v32[-48], v14, MEMORY[0x263F8E628], v15, MEMORY[0x263F8E658], v16);
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v40);
  uint64_t v17 = *(void *)(v5 + 40);
  if (!v17) {
    __break(1u);
  }
  uint64_t v18 = LODWORD(v49[0]);
  uint64_t v19 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v10, v17, a3);
  MEMORY[0x270FA5388](v19);
  *(void *)&v32[-16] = a3;
  *(_DWORD *)&v32[-8] = v18;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v10, (uint64_t)partial apply for closure #1 in Attribute.setValue(_:), (uint64_t)&v32[-32], a3, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v20);
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v10, a3);
  _GraphValue.init(_:)(v18, v38);
  uint64_t v21 = v38[0];
  uint64_t v22 = *(void *)(v5 + 48);
  LODWORD(v36) = *(_DWORD *)(v5 + 56);
  uint64_t v23 = *(void *)(v5 + 64);
  uint64_t v24 = *(void *)(v5 + 72);
  long long v25 = *(void **)(v5 + 80);
  uint64_t v26 = *(void *)(v5 + 88);
  uint64_t v34 = *(void *)(v5 + 96);
  uint64_t v27 = *(void *)(v5 + 104);
  int v33 = *(_DWORD *)(v5 + 112);
  uint64_t v28 = *(void *)(v5 + 120);
  char v29 = *(unsigned char *)(v5 + 128);
  LODWORD(v18) = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v18) {
    AGSubgraphBeginTreeElement();
  }
  int v37 = v21;
  uint64_t v39 = v22;
  LODWORD(v40) = v36;
  *(void *)&long long v41 = v23;
  *((void *)&v41 + 1) = v24;
  uint64_t v42 = v25;
  uint64_t v43 = v26;
  uint64_t v44 = v34;
  uint64_t v45 = v27;
  int v46 = v33;
  uint64_t v47 = v28;
  char v48 = v29;
  uint64_t v30 = v35;
  (*(void (**)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(v35 + 32))(v49, &v37, &v39, a3, v35);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v21, a3, v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return outlined assign with take of _ViewListOutputs?((uint64_t)v49, v5 + 136);
}

uint64_t outlined assign with take of _ViewListOutputs?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Any?(0, &lazy cache variable for type metadata for _ViewListOutputs?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t static _ConditionalContent<>._makeViewList(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X8>)
{
  int v4 = *a1;
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  long long v16 = *(_OWORD *)(a2 + 5);
  uint64_t v8 = a2[7];
  int v9 = *((_DWORD *)a2 + 16);
  uint64_t v15 = a2[9];
  char v14 = *((unsigned char *)a2 + 80);
  uint64_t v10 = type metadata accessor for _ConditionalContent();
  static _ConditionalContent.makeConditionalMetadata<A>(_:)((uint64_t)&type metadata for ViewDescriptor, (uint64_t)&protocol witness table for ViewDescriptor, &v31);
  unint64_t v11 = v31;
  unint64_t v28 = v31;
  long long v29 = v32;
  uint64_t v30 = v33;
  int v27 = v4;
  int v19 = v6;
  uint64_t v20 = v7;
  long long v21 = *(_OWORD *)(a2 + 3);
  long long v22 = v16;
  uint64_t v23 = v8;
  int v24 = v9;
  uint64_t v25 = v15;
  char v26 = v14;
  uint64_t v18 = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  static DynamicView.makeDynamicViewList(metadata:view:inputs:)((uint64_t)&v28, &v27, (uint64_t)&v18, v10, WitnessTable, a3);
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v11);
  return swift_bridgeObjectRelease();
}

uint64_t static DynamicView.makeDynamicViewList(metadata:view:inputs:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _DWORD *a6@<X8>)
{
  uint64_t v34 = a1;
  long long v38 = a6;
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v35 = a5;
  uint64_t v36 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  long long v29 = (char *)&v27 - v9;
  uint64_t v33 = type metadata accessor for DynamicViewList();
  uint64_t v37 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v31 = (uint64_t)&v27 - v10;
  int v30 = *a2;
  uint64_t v11 = *(void *)a3;
  int v12 = *(_DWORD *)(a3 + 8);
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(a3 + 40);
  uint64_t v15 = *(void *)(a3 + 48);
  uint64_t v16 = *(void *)(a3 + 56);
  int v17 = *(_DWORD *)(a3 + 64);
  uint64_t v18 = *(void *)(a3 + 72);
  int v28 = *(unsigned __int8 *)(a3 + 80);
  int v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  long long v27 = *(_OWORD *)(a3 + 24);
  uint64_t v20 = (uint64_t)v29;
  v19(v29, v34, AssociatedTypeWitness);
  uint64_t v42 = v11;
  int v43 = v12;
  uint64_t v44 = v13;
  long long v45 = v27;
  uint64_t v46 = v14;
  uint64_t v47 = v15;
  uint64_t v48 = v16;
  int v49 = v17;
  uint64_t v50 = v18;
  char v51 = v28;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v21 = v31;
  DynamicViewList.init(metadata:view:inputs:lastItem:)(v20, v30, &v42, 0, v31);
  uint64_t v22 = v33;
  uint64_t v40 = v33;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<ViewList>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v21, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v39, v22, MEMORY[0x263F8E628], v23, MEMORY[0x263F8E658], v24);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v21, v22);
  char v26 = v38;
  *long long v38 = v42;
  *((void *)v26 + 1) = 0;
  *((unsigned char *)v26 + 40) = 1;
  *((void *)v26 + 6) = v15;
  *((void *)v26 + 7) = 0;
  *((unsigned char *)v26 + 64) = 1;
  return result;
}

void type metadata accessor for Attribute<ViewList>()
{
  if (!lazy cache variable for type metadata for Attribute<ViewList>)
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewList>);
    }
  }
}

uint64_t DynamicViewList.init(metadata:view:inputs:lastItem:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a3;
  int v10 = *((_DWORD *)a3 + 2);
  uint64_t v11 = a3[2];
  long long v24 = *(_OWORD *)(a3 + 5);
  uint64_t v12 = a3[7];
  int v23 = *((_DWORD *)a3 + 16);
  uint64_t v22 = a3[9];
  char v21 = *((unsigned char *)a3 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = a3[3];
  uint64_t v15 = a3[4];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a5, a1, AssociatedTypeWitness);
  uint64_t v16 = (int *)type metadata accessor for DynamicViewList();
  *(_DWORD *)(a5 + v16[9]) = a2;
  uint64_t v17 = a5 + v16[10];
  *(void *)uint64_t v17 = v9;
  *(_DWORD *)(v17 + 8) = v10;
  *(void *)(v17 + 16) = v11;
  *(void *)(v17 + 24) = v14;
  *(void *)(v17 + 32) = v15;
  *(_OWORD *)(v17 + 40) = v24;
  *(void *)(v17 + 56) = v12;
  *(_DWORD *)(v17 + 64) = v23;
  *(void *)(v17 + 72) = v22;
  *(unsigned char *)(v17 + 80) = v21;
  id v18 = (id)AGSubgraphGetCurrent();
  if (v18)
  {
    *(void *)(a5 + v16[11]) = v18;
    uint64_t v19 = v16[12];
    type metadata accessor for DynamicViewList.Item();
    type metadata accessor for Unmanaged();
    type metadata accessor for Array();
    type metadata accessor for MutableBox();
    uint64_t v26 = Array.init()();
    uint64_t result = MutableBox.__allocating_init(_:)(&v26);
    *(void *)(a5 + v19) = result;
    *(void *)(a5 + v16[13]) = a4;
  }
  else
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for MutableBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t MutableBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 80) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 88), a1);
  return v2;
}

uint64_t ConditionalMetadata<>.makeViewList<A>(ptr:view:inputs:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v73[9] = *MEMORY[0x263EF8340];
  uint64_t v7 = *a3;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v9 = a3[2];
  unsigned int v11 = *((_DWORD *)a3 + 6);
  unsigned int v10 = *((_DWORD *)a3 + 7);
  unsigned int v13 = *((_DWORD *)a3 + 8);
  unsigned int v12 = *((_DWORD *)a3 + 9);
  uint64_t v15 = a3[5];
  uint64_t v14 = a3[6];
  uint64_t v16 = a3[7];
  int v17 = *((_DWORD *)a3 + 16);
  uint64_t v18 = a3[9];
  char v19 = *((unsigned char *)a3 + 80);
  unint64_t v20 = *(void *)v5;
  long long v39 = 0u;
  long long v40 = 0u;
  unint64_t v41 = 0;
  uint64_t v42 = 255;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  LOBYTE(v45) = 0;
  unint64_t v55 = v20;
  long long v56 = *(_OWORD *)(v5 + 8);
  int v57 = a2;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = v7;
  int v27 = v8;
  unint64_t v28 = __PAIR64__(v10, v11);
  int v61 = v8;
  uint64_t v62 = v9;
  unsigned int v63 = v11;
  unint64_t v29 = __PAIR64__(v12, v13);
  unsigned int v64 = v10;
  unsigned int v65 = v13;
  unsigned int v66 = v12;
  uint64_t v67 = v15;
  uint64_t v68 = v14;
  uint64_t v30 = v14;
  uint64_t v31 = v16;
  uint64_t v69 = v16;
  int v32 = v17;
  char v33 = v19;
  int v70 = v17;
  uint64_t v71 = v18;
  char v72 = v19;
  outlined init with take of _ViewListOutputs?((uint64_t)&v39, (uint64_t)v73);
  unint64_t v22 = v55;
  uint64_t v21 = v56;
  uint64_t v37 = a4;
  long long v38 = &v55;
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v20);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v22);
  specialized ConditionalTypeDescriptor.project(at:baseIndex:_:)(a1, 0, partial apply for closure #1 in ConditionalMetadata<>.makeViewList<A>(ptr:view:inputs:), (uint64_t)v36, v22, v21);
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v22);
  outlined init with copy of _ViewListOutputs?((uint64_t)v73, (uint64_t)v51);
  if (BYTE8(v52) == 0xFF)
  {
    if ((v31 & 0x10) != 0)
    {
      *(void *)&long long v39 = v7;
      DWORD2(v39) = v27;
      *(void *)&long long v40 = v9;
      *((void *)&v40 + 1) = v28;
      unint64_t v41 = v29;
      uint64_t v42 = v15;
      uint64_t v43 = v30;
      uint64_t v44 = v31;
      int v45 = v32;
      uint64_t v46 = v18;
      char v47 = v33;
      static _ViewListOutputs.nonEmptyParentViewList(inputs:)((uint64_t)&v39, a5);
    }
    else
    {
      int v49 = &type metadata for EmptyViewListElements;
      uint64_t v50 = &protocol witness table for EmptyViewListElements;
      *(void *)&long long v39 = v7;
      DWORD2(v39) = v27;
      *(void *)&long long v40 = v9;
      *((void *)&v40 + 1) = v28;
      unint64_t v41 = v29;
      uint64_t v42 = v15;
      uint64_t v43 = v30;
      uint64_t v44 = v31;
      int v45 = v32;
      uint64_t v46 = v18;
      char v47 = v33;
      static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v48, (uint64_t *)&v39, 0, a5);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
    }
    outlined destroy of _ViewListOutputs?((uint64_t)v51);
  }
  else
  {
    long long v23 = v53;
    *(_OWORD *)(a5 + 32) = v52;
    *(_OWORD *)(a5 + 48) = v23;
    *(unsigned char *)(a5 + 64) = v54;
    long long v24 = v51[1];
    *(_OWORD *)a5 = v51[0];
    *(_OWORD *)(a5 + 16) = v24;
  }
  uint64_t List = type metadata accessor for ConditionalMetadata<>.MakeList();
  return (*(uint64_t (**)(unint64_t *, uint64_t))(*(void *)(List - 8) + 8))(&v55, List);
}

uint64_t type metadata accessor for ConditionalMetadata<>.MakeList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in DynamicViewList.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v47 = a1;
  int v57 = a4;
  uint64_t v58 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  long long v53 = (char *)&v43 - v6;
  uint64_t v59 = a2;
  uint64_t v56 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v7);
  long long v52 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DynamicViewList();
  uint64_t v49 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v48 = (char *)&v43 - v10;
  uint64_t v12 = v4 + *(int *)(v11 + 40);
  uint64_t v45 = *(void *)v12;
  int v61 = *(_DWORD *)(v12 + 8);
  uint64_t v13 = *(void *)(v12 + 16);
  int v65 = *(_DWORD *)(v12 + 24);
  int v64 = *(_DWORD *)(v12 + 28);
  int v63 = *(_DWORD *)(v12 + 32);
  int v62 = *(_DWORD *)(v12 + 36);
  uint64_t v60 = *(void *)(v12 + 40);
  uint64_t v46 = *(void *)(v12 + 56);
  int v51 = *(_DWORD *)(v12 + 64);
  uint64_t v66 = *(void *)(v12 + 72);
  int v50 = *(unsigned __int8 *)(v12 + 80);
  swift_beginAccess();
  LODWORD(v4) = *(_DWORD *)(v13 + 16);
  uint64_t v14 = *(void *)(v13 + 24);
  long long v44 = *(_OWORD *)(v13 + 32);
  long long v43 = *(_OWORD *)(v13 + 48);
  uint64_t v15 = *(void *)(v13 + 64);
  uint64_t v16 = *(void *)(v13 + 72);
  char v17 = *(unsigned char *)(v13 + 80);
  char v18 = *(unsigned char *)(v13 + 81);
  uint64_t v19 = *(void *)(v13 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = v4;
  *(void *)(v20 + 24) = v14;
  long long v21 = v43;
  *(_OWORD *)(v20 + 32) = v44;
  *(_OWORD *)(v20 + 48) = v21;
  *(void *)(v20 + 64) = v15;
  *(void *)(v20 + 72) = v16;
  *(unsigned char *)(v20 + 80) = v17;
  *(unsigned char *)(v20 + 81) = v18;
  *(void *)(v20 + 88) = v19;
  unint64_t v22 = *(unsigned int (**)(void))(v58 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = v45;
  swift_retain();
  uint64_t v24 = v46 | v22() & ((v46 & 1) == 0);
  uint64_t v46 = v24;
  uint64_t v25 = v49;
  uint64_t v26 = v48;
  uint64_t v27 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v48, v47, v9);
  uint64_t v28 = *(void *)(v9 + 16);
  uint64_t Value = AGGraphGetValue();
  uint64_t v30 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v52, Value, v28);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v9);
  uint64_t v31 = v54;
  int v32 = v53;
  uint64_t v33 = v27;
  uint64_t v34 = v27;
  uint64_t v35 = AssociatedTypeWitness;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v53, v33, AssociatedTypeWitness);
  uint64_t v36 = *(unsigned int *)(v34 + *(int *)(v9 + 36));
  uint64_t v37 = v23;
  uint64_t v67 = v23;
  int v68 = v61;
  uint64_t v69 = v20;
  int v70 = v65;
  int v71 = v64;
  int v72 = v63;
  int v73 = v62;
  uint64_t v74 = v60;
  uint64_t v75 = 0;
  uint64_t v76 = v24;
  int v38 = v51;
  int v77 = v51;
  uint64_t v78 = v66;
  LOBYTE(v24) = v50;
  char v79 = v50;
  uint64_t v39 = v59;
  (*(void (**)(void *__return_ptr, char *, uint64_t, uint64_t *, uint64_t))(v58 + 72))(v80, v32, v36, &v67, v59);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v35);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v30, v39);
  uint64_t v67 = v37;
  int v68 = v61;
  uint64_t v69 = v20;
  int v70 = v65;
  int v71 = v64;
  int v72 = v63;
  int v73 = v62;
  uint64_t v74 = v60;
  uint64_t v75 = 0;
  uint64_t v76 = v46;
  int v77 = v38;
  uint64_t v78 = v66;
  char v79 = v24;
  LODWORD(v32) = _ViewListOutputs.makeAttribute(inputs:)(&v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  long long v40 = v57;
  *int v57 = v32;
  uint64_t v41 = v80[7];
  LOBYTE(v32) = v81;
  uint64_t result = outlined destroy of _ViewListOutputs((uint64_t)v80);
  *((unsigned char *)v40 + 4) = (v41 == 1) & ~(_BYTE)v32;
  return result;
}

uint64_t type metadata accessor for DynamicViewList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for DynamicViewList(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v3)(a1, AssociatedTypeWitness);
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 3) & 0xFFFFFFFFFFFFFFFCLL;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  return swift_release();
}

uint64_t destroy for ConditionalMetadata(unint64_t *a1)
{
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(*a1);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DynamicViewList(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 3;
  unint64_t v7 = v6 + a1;
  uint64_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  v7 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v7 = *v8;
  unint64_t v9 = (v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v9 + 28) = *(_DWORD *)(v10 + 28);
  *(_DWORD *)(v9 + 32) = *(_DWORD *)(v10 + 32);
  *(_DWORD *)(v9 + 36) = *(_DWORD *)(v10 + 36);
  *(void *)(v9 + 40) = *(void *)(v10 + 40);
  *(void *)(v9 + 48) = *(void *)(v10 + 48);
  *(void *)(v9 + 56) = *(void *)(v10 + 56);
  *(_DWORD *)(v9 + 64) = *(_DWORD *)(v10 + 64);
  *(void *)(v9 + 72) = *(void *)(v10 + 72);
  *(unsigned char *)(v9 + 80) = *(unsigned char *)(v10 + 80);
  uint64_t v11 = (void *)((v7 + 99) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void **)(((unint64_t)v8 + 99) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = *v12;
  *uint64_t v11 = *v12;
  uint64_t v14 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v16 = v13;
  swift_retain();
  swift_retain();
  return a1;
}

unint64_t *initializeWithCopy for ConditionalMetadata(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*a2);
  *a1 = v4;
  a1[1] = v5;
  unint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t ConditionalMetadata.childInfo<A>(ptr:emptyType:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = *(void *)v5;
  uint64_t v10 = *(void *)(v5 + 24);
  unint64_t v16 = 0;
  unint64_t v17 = 0;
  long long v15 = *(_OWORD *)(v5 + 8);
  uint64_t v11 = *(void *)(a4 + 24);
  void v13[2] = *(void *)(a4 + 16);
  v13[3] = a5;
  v13[4] = v11;
  v13[5] = &v17;
  v13[6] = &v16;
  unint64_t v14 = v9;
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v9);
  type metadata accessor for ConditionalTypeDescriptor();
  ConditionalTypeDescriptor.project(at:baseIndex:_:)(a2, 0, (uint64_t (*)(uint64_t, unint64_t *, uint64_t))partial apply for closure #1 in ConditionalMetadata.childInfo<A>(ptr:emptyType:), (uint64_t)v13);
  unint64_t result = outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v14);
  if ((v17 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v17 >= *(void *)(v10 + 16))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (v16) {
    unint64_t result = v16;
  }
  else {
    unint64_t result = a3;
  }
  *(void *)a1 = *(void *)(v10 + 8 * v17 + 32);
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t specialized ConditionalTypeDescriptor.project(at:baseIndex:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, unint64_t *, uint64_t), uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (!(a5 >> 62))
  {
    unint64_t v26 = a5;
    uint64_t v27 = a6;
    return a3(a2, &v26, a1);
  }
  if (a5 >> 62 != 1)
  {
    unint64_t v14 = *(void *)((a5 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
    uint64_t v15 = *(void *)((a5 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
    uint64_t v25 = *(void *)((a5 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
    unint64_t v17 = *(void *)((a5 & 0x3FFFFFFFFFFFFFFFLL) + 0x30);
    uint64_t v16 = *(void *)((a5 & 0x3FFFFFFFFFFFFFFFLL) + 0x38);
    uint64_t v22 = *(void *)((a5 & 0x3FFFFFFFFFFFFFFFLL) + 0x40);
    outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(a5);
    outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v14);
    unint64_t v23 = v17;
    outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v17);
    uint64_t EnumTag = AGTypeGetEnumTag();
    uint64_t result = AGTypeProjectEnumData();
    if (EnumTag == 1)
    {
      specialized ConditionalTypeDescriptor.project(at:baseIndex:_:)(a1, a2, a3, a4, v14, v15, v25);
      unint64_t v19 = v23;
    }
    else
    {
      if (__OFADD__(a2, v25))
      {
LABEL_18:
        __break(1u);
        return result;
      }
      uint64_t v21 = a4;
      unint64_t v19 = v23;
      specialized ConditionalTypeDescriptor.project(at:baseIndex:_:)(a1, a2 + v25, a3, v21, v23, v16, v22);
    }
    AGTypeInjectEnumTag();
    outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v19);
    outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v14);
    unint64_t v20 = a5;
    goto LABEL_14;
  }
  unint64_t v11 = *(void *)((a5 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
  uint64_t v12 = *(void *)((a5 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  uint64_t v24 = *(void *)((a5 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(a5);
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v11);
  if (AGTypeGetEnumTag() == 1)
  {
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    a3(a2, &v26, 0);
    outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v11);
    return outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(a5);
  }
  uint64_t result = AGTypeProjectEnumData();
  if (__OFADD__(a2, 1))
  {
    __break(1u);
    goto LABEL_18;
  }
  specialized ConditionalTypeDescriptor.project(at:baseIndex:_:)(a1, a2 + 1, a3, a4, v11, v12, v24);
  AGTypeInjectEnumTag();
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v11);
  unint64_t v20 = a5;
LABEL_14:

  return outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v20);
}

uint64_t ConditionalTypeDescriptor.project(at:baseIndex:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, unint64_t *, uint64_t), uint64_t a4)
{
  unint64_t v9 = *v4;
  unint64_t v8 = v4[1];
  unint64_t v10 = *v4 >> 62;
  if (v10)
  {
    if (v10 == 1)
    {
      unint64_t v12 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v13 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
      uint64_t v22 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v9);
      outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v12);
      if (AGTypeGetEnumTag() == 1)
      {
        unint64_t v25 = 0;
        unint64_t v26 = 0;
        a3(a2, &v25, 0);
        outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v12);
        return outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v9);
      }
      AGTypeProjectEnumData();
      closure #1 in ConditionalTypeDescriptor.project(at:baseIndex:_:)(a1, v12, v13, v22, a2, (uint64_t)a3, a4);
      AGTypeInjectEnumTag();
      unint64_t v19 = v12;
    }
    else
    {
      unint64_t v15 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v16 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
      uint64_t v23 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      unint64_t v17 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x30);
      outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v9);
      outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v15);
      outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v17);
      uint64_t v20 = (uint64_t)a3;
      uint64_t EnumTag = AGTypeGetEnumTag();
      AGTypeProjectEnumData();
      closure #2 in ConditionalTypeDescriptor.project(at:baseIndex:_:)(a1, EnumTag, v15, v16, v23, a2, v20, a4);
      AGTypeInjectEnumTag();
      outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v17);
      unint64_t v19 = v15;
    }
    outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v19);
    return outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v9);
  }
  else
  {
    unint64_t v25 = *v4;
    unint64_t v26 = v8;
    return a3(a2, &v25, a1);
  }
}

unint64_t outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(unint64_t result)
{
  if ((result >> 62) - 1 <= 1) {
    return swift_retain();
  }
  return result;
}

unint64_t outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(unint64_t result)
{
  if ((result >> 62) - 1 <= 1) {
    return swift_release();
  }
  return result;
}

void destructiveInjectEnumTag for _ConditionalContent.Storage(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1)
  {
    uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
    if (*(void *)(v6 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
      size_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a2 - 2;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    if (*(void *)(v4 + 64) > v5) {
      unint64_t v5 = *(void *)(v4 + 64);
    }
    a1[v5] = a2;
  }
}

uint64_t closure #2 in ConditionalTypeDescriptor.project(at:baseIndex:_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a6;
  uint64_t v11 = result;
  if (a2 != 1 && (uint64_t v10 = a6 + a5, __OFADD__(a6, a5)))
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = type metadata accessor for ConditionalTypeDescriptor();
    return ConditionalTypeDescriptor.project(at:baseIndex:_:)(v11, v10, a7, a8, v12);
  }
  return result;
}

uint64_t type metadata accessor for ConditionalTypeDescriptor()
{
  return __swift_instantiateGenericMetadata();
}

void storeEnumTagSinglePayload for ModifiedContent(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 >= a2)
  {
    switch(v17)
    {
      case 1:
        a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_41:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v14] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 >= v10)
          {
            uint64_t v24 = *(void (**)(void))(v6 + 56);
            v24();
          }
          else
          {
            unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
            uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
            v23(v22);
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        break;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        break;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        break;
      default:
        return;
    }
  }
}

uint64_t partial apply for closure #1 in ConditionalMetadata.childInfo<A>(ptr:emptyType:)(uint64_t a1, long long *a2, uint64_t a3)
{
  return closure #1 in ConditionalMetadata.childInfo<A>(ptr:emptyType:)(a1, a2, a3, *(void **)(v3 + 40), *(uint64_t **)(v3 + 48));
}

uint64_t closure #1 in ConditionalMetadata.childInfo<A>(ptr:emptyType:)(uint64_t a1, long long *a2, uint64_t a3, void *a4, uint64_t *a5)
{
  long long v6 = *a2;
  *a4 = a1;
  if ((void)v6)
  {
    type metadata accessor for TypeConformance();
    uint64_t result = TypeConformance.type.getter();
  }
  else
  {
    uint64_t result = 0;
  }
  *a5 = result;
  return result;
}

uint64_t type metadata accessor for TypeConformance()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TypeConformance.type.getter()
{
  return *(void *)v0;
}

void storeEnumTagSinglePayload for _ConditionalContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t _ViewListOutputs.makeAttribute(inputs:)(uint64_t *a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v9 = a1[7];
  outlined init with copy of _ViewListOutputs.Views(v1, (uint64_t)v25);
  if (v26)
  {
    uint64_t v10 = LODWORD(v25[0]);
    if (*((void *)&v25[0] + 1))
    {
      LODWORD(v18) = v25[0];
      uint64_t v19 = *((void *)&v25[0] + 1);
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
      lazy protocol witness table accessor for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers();
      swift_retain();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      swift_release_n();
    }
  }
  else
  {
    outlined init with take of ScrollStateRequest(v25, (uint64_t)v24);
    outlined init with copy of AnyTrackedValue((uint64_t)v24, (uint64_t)v17);
    uint64_t v18 = v2;
    LODWORD(v19) = v3;
    uint64_t v20 = v4;
    uint64_t v21 = v5;
    uint64_t v22 = v6;
    uint64_t v23 = v8;
    unint64_t v11 = _GraphInputs.stableIDScope.getter();
    uint64_t v15 = MEMORY[0x263F8EE88];
    char v16 = 0;
    size_t v14 = (void *)MEMORY[0x263F8EE78];
    BaseViewList.init(elements:implicitID:canTransition:stableIDScope:traitKeys:traits:)((uint64_t)v17, v7, (v9 & 3) == 1, v11, v12 & 1, &v15, &v14, (uint64_t)&v18);
    void v17[3] = &type metadata for BaseViewList;
    v17[4] = &protocol witness table for BaseViewList;
    v17[0] = swift_allocObject();
    outlined init with copy of BaseViewList((uint64_t)&v18, v17[0] + 16);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    type metadata accessor for External<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for External<ViewList>, MEMORY[0x263F288C8]);
    lazy protocol witness table accessor for type External<ViewList> and conformance External<A>();
    uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    outlined destroy of BaseViewList((uint64_t)&v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  return v10;
}

void partial apply for closure #1 in closure #1 in UnwrapConditional.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in closure #1 in UnwrapConditional.updateValue()(a1, a2, a3, v3[6], v3[2], v3[3], v3[4], v3[5]);
}

void closure #1 in closure #1 in UnwrapConditional.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v21[5] = *MEMORY[0x263EF8340];
  uint64_t v12 = *(void *)(a7 - 8);
  double v14 = MEMORY[0x270FA5388](a1);
  char v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v17 + 32) == v18)
  {
    if (v13)
    {
      uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v16, v13, a7, v14);
      MEMORY[0x270FA5388](v19);
      v21[1] = a5;
      v21[2] = a6;
      v21[3] = a7;
      v21[4] = a8;
      v21[-2] = type metadata accessor for UnwrapConditional();
      v21[-1] = swift_getWitnessTable();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v21[-4], a7, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v20);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a7);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t type metadata accessor for UnwrapConditional()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for MutableBox<CachedEnvironment>()
{
  if (!lazy cache variable for type metadata for MutableBox<CachedEnvironment>)
  {
    unint64_t v0 = type metadata accessor for MutableBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>);
    }
  }
}

uint64_t destroy for ConditionalMetadata<>.MakeList(uint64_t a1)
{
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(*(void *)a1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v3 = *(unsigned __int8 *)(a1 + 176);
  if (v3 != 255)
  {
    if (v3)
    {
      return swift_release();
    }
    else
    {
      return __swift_destroy_boxed_opaque_existential_1(a1 + 136);
    }
  }
  return result;
}

uint64_t outlined init with copy of _ViewListOutputs?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Any?(0, &lazy cache variable for type metadata for _ViewListOutputs?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for EdgeInsets?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for Any?(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Optional();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void _sypSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sypSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sypSgMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sypSgMaTm_3(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sypSgMaTm_4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for Int?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sypSgMaTm_5(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t partial apply for closure #1 in ConditionalMetadata<>.makeViewList<A>(ptr:view:inputs:)(uint64_t a1, void *a2, uint64_t a3)
{
  return closure #1 in ConditionalMetadata<>.makeViewList<A>(ptr:view:inputs:)(a1, a2, a3, *(void *)(v3 + 24));
}

uint64_t closure #1 in ConditionalMetadata<>.makeViewList<A>(ptr:view:inputs:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  if (*a2) {
    BOOL v4 = a3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    *(void *)(a4 + 32) = result;
    *(void *)(a4 + 40) = a3;
    uint64_t List = type metadata accessor for ConditionalMetadata<>.MakeList();
    return TypeConformance<>.visitType<A>(visitor:)(a4, List, (uint64_t)&protocol witness table for ConditionalMetadata<A><>.MakeList<A1>);
  }
  return result;
}

uint64_t outlined init with take of _ViewListOutputs?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Any?(0, &lazy cache variable for type metadata for _ViewListOutputs?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for DynamicView.makeChildViewList(metadata:view:inputs:) in conformance <> _ConditionalContent<A, B>(long long *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _ConditionalContent<>.makeChildViewList(metadata:view:inputs:)(a1, a2, a3, a4, *(void *)(a5 - 8), *(void *)(a5 - 16), a7, a8);
}

uint64_t _ConditionalContent<>.makeChildViewList(metadata:view:inputs:)(long long *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *((void *)a1 + 2);
  uint64_t v10 = *((void *)a1 + 3);
  long long v11 = *(_OWORD *)(a3 + 48);
  v22[2] = *(_OWORD *)(a3 + 32);
  v22[3] = v11;
  v22[4] = *(_OWORD *)(a3 + 64);
  char v23 = *(unsigned char *)(a3 + 80);
  long long v12 = *(_OWORD *)(a3 + 16);
  v22[0] = *(_OWORD *)a3;
  v22[1] = v12;
  v14[1] = *(_OWORD *)(a4 + 16);
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  long long v17 = *a1;
  uint64_t v18 = v9;
  uint64_t v19 = v10;
  int v20 = a2;
  uint64_t v21 = v22;
  return _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)partial apply for closure #1 in _ConditionalContent<>.makeChildViewList(metadata:view:inputs:), (uint64_t)v14, a4, MEMORY[0x263F8E628], (uint64_t)&type metadata for _ViewListOutputs, MEMORY[0x263F8E658], a8);
}

uint64_t static _ConditionalContent.makeConditionalMetadata<A>(_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for _ConditionalContent();
  static ConditionalTypeDescriptor.descriptor(type:constructor:)(v6, (void (*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in static _ConditionalContent.makeConditionalMetadata<A>(_:), a1, a2, &v8);
  return ConditionalMetadata.init(_:)((uint64_t *)&v8, a3);
}

void *static ConditionalTypeDescriptor.descriptor(type:constructor:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, void *)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 16))(&v14, a1, a3, a4);
  uint64_t v11 = v14;
  if ((~v14 & 0xF000000000000007) != 0)
  {
    uint64_t v12 = v15;
    uint64_t v13 = v16;
  }
  else
  {
    a2(&v14, result);
    uint64_t v11 = v14;
    uint64_t v12 = v15;
    uint64_t v13 = v16;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a4 + 24))(a1, &v14, a3, a4);
  }
  *a5 = v11;
  a5[1] = v12;
  a5[2] = v13;
  return result;
}

uint64_t static ViewDescriptor.fetchConditionalType(key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for conditionalCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static ViewDescriptor.conditionalCache;
  if (*((void *)static ViewDescriptor.conditionalCache + 2)
    && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = v4[7] + 24 * v5;
    unint64_t v8 = *(void *)v7;
    *(void *)a2 = *(void *)v7;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v7 + 8);
    outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v8);
  }
  else
  {
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0xF000000000000007;
  }
  return swift_endAccess();
}

uint64_t ConditionalMetadata.init(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0, MEMORY[0x263F8EE78]);
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = (void *)result;
    if (v5)
    {
      uint64_t v8 = v5;
      do
      {
        uint64_t result = AGMakeUniqueID();
        uint64_t v9 = result;
        unint64_t v11 = v7[2];
        unint64_t v10 = v7[3];
        if (v11 >= v10 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v7);
          uint64_t v7 = (void *)result;
        }
        v7[2] = v11 + 1;
        v7[v11 + 4] = v9;
        --v8;
      }
      while (v8);
    }
    *a2 = v3;
    a2[1] = v4;
    a2[2] = v5;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for static ConditionalProtocolDescriptor.insertConditionalType(key:value:) in conformance ViewDescriptor(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  if (one-time initialization token for conditionalCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v3);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = static ViewDescriptor.conditionalCache;
  static ViewDescriptor.conditionalCache = (_UNKNOWN *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, v4, v5, a1, isUniquelyReferenced_nonNull_native);
  static ViewDescriptor.conditionalCache = v8;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a5 & 1) == 0)
  {
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
    if ((v18 & 1) == (v25 & 1))
    {
      unint64_t v14 = v24;
      int v20 = *v6;
      if (v18) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  int v20 = *v6;
  if (v18)
  {
LABEL_8:
    uint64_t v21 = (unint64_t *)(v20[7] + 24 * v14);
    unint64_t v22 = *v21;
    *uint64_t v21 = a1;
    v21[1] = a2;
    v21[2] = a3;
    return outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v22);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, a3, v20);
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  *(void *)(a6[6] + 8 * result) = a2;
  char v6 = (void *)(a6[7] + 24 * result);
  *char v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  *(void *)(a6[6] + 8 * result) = a2;
  char v6 = a6[7] + 24 * result;
  *(void *)char v6 = a3;
  *(void *)(v6 + 8) = a4;
  *(unsigned char *)(v6 + 16) = a5 & 1;
  *(_DWORD *)(v6 + 20) = HIDWORD(a5);
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

{
  uint64_t v6;
  long long v7;
  void *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a6[(result >> 6) + 8] |= 1 << result;
  char v6 = a6[6] + 40 * result;
  uint64_t v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)char v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v7;
  *(void *)(v6 + 32) = *(void *)(a2 + 32);
  BOOL v8 = (void *)(a6[7] + 24 * result);
  *BOOL v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  uint64_t v9 = a6[2];
  unint64_t v10 = __OFADD__(v9, 1);
  unint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a6[2] = v11;
  }
  return result;
}

uint64_t partial apply for closure #1 in _ConditionalContent<>.makeChildViewList(metadata:view:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = *(void *)(v2 + 72);
  int v7 = *(_DWORD *)(v2 + 80);
  uint64_t v8 = *(void *)(v2 + 88);
  long long v15 = *(_OWORD *)(v2 + 48);
  uint64_t v16 = v5;
  uint64_t v17 = v6;
  long long v9 = *(_OWORD *)(v8 + 48);
  void v13[2] = *(_OWORD *)(v8 + 32);
  v13[3] = v9;
  v13[4] = *(_OWORD *)(v8 + 64);
  char v14 = *(unsigned char *)(v8 + 80);
  long long v10 = *(_OWORD *)(v8 + 16);
  v13[0] = *(_OWORD *)v8;
  v13[1] = v10;
  uint64_t v11 = type metadata accessor for _ConditionalContent();
  return ConditionalMetadata<>.makeViewList<A>(ptr:view:inputs:)(a1, v7, (uint64_t *)v13, v11, a2);
}

unint64_t closure #1 in _ConditionalContent<>.childInfo(metadata:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = (uint64_t)(a2 + 1);
  type metadata accessor for ConditionalMetadata<ViewDescriptor>();
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for _ConditionalContent();
  unint64_t result = ConditionalMetadata.childInfo<A>(ptr:emptyType:)(v4, a1, (unint64_t)&type metadata for EmptyView, v6, v7);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for _ConditionalContent()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for ConditionalMetadata<ViewDescriptor>()
{
  if (!lazy cache variable for type metadata for ConditionalMetadata<ViewDescriptor>)
  {
    unint64_t v0 = type metadata accessor for ConditionalMetadata();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ConditionalMetadata<ViewDescriptor>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers;
  if (!lazy protocol witness table cache variable for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers);
  }
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _ViewModifier_Content<A>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return static _ViewModifier_Content._makeViewList(view:inputs:)(a1, a2);
}

uint64_t ConditionalTypeDescriptor.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v8 = MEMORY[0x24C525770]();
  uint64_t v9 = v8;
  if (one-time initialization token for conditionalTypeDescriptor == -1)
  {
    if (!v8) {
      goto LABEL_8;
    }
  }
  else
  {
    swift_once();
    if (!v9) {
      goto LABEL_8;
    }
  }
  if (v9 == conditionalTypeDescriptor)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    a1 = *(void *)(a1 + 24);
    uint64_t v27 = a2;
    uint64_t v28 = a3;
    uint64_t v29 = a1;
    static ConditionalTypeDescriptor.descriptor(type:constructor:)(a1, (void (*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in static ConditionalTypeDescriptor.descriptor(type:), a2, a3, &v23);
    uint64_t v10 = v23;
    uint64_t v11 = v24;
    uint64_t v12 = v25;
    uint64_t v27 = a2;
    uint64_t v28 = a3;
    uint64_t v29 = v9;
    static ConditionalTypeDescriptor.descriptor(type:constructor:)(v9, (void (*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in static ConditionalTypeDescriptor.descriptor(type:), a2, a3, &v23);
    uint64_t v13 = v23;
    uint64_t v14 = v24;
    a3 = v25;
    a2 = type metadata accessor for _ConditionalContent.Storage();
    swift_beginAccess();
    uint64_t result = swift_beginAccess();
    if (!a2) {
      goto LABEL_19;
    }
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = a2;
    *(void *)(result + 24) = v10;
    *(void *)(result + 32) = v11;
    *(void *)(result + 40) = v12;
    *(void *)(result + 48) = v13;
    *(void *)(result + 56) = v14;
    *(void *)(result + 64) = a3;
    uint64_t v16 = v12 + a3;
    if (!__OFADD__(v12, a3))
    {
      unint64_t v17 = 0;
      unint64_t v18 = result | 0x8000000000000000;
LABEL_17:
      *a4 = v18;
      a4[1] = v17;
      a4[2] = v16;
      return result;
    }
    __break(1u);
    goto LABEL_14;
  }
LABEL_8:
  if (one-time initialization token for optionalTypeDescriptor == -1)
  {
    if (!v9) {
      goto LABEL_15;
    }
    goto LABEL_10;
  }
LABEL_14:
  swift_once();
  if (v9)
  {
LABEL_10:
    if (v9 != optionalTypeDescriptor) {
      goto LABEL_15;
    }
    uint64_t v19 = *(void *)(a1 + 16);
    uint64_t v27 = a2;
    uint64_t v28 = a3;
    uint64_t v29 = v19;
    static ConditionalTypeDescriptor.descriptor(type:constructor:)(v19, (void (*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in static ConditionalTypeDescriptor.descriptor(type:), a2, a3, &v23);
    uint64_t v20 = v23;
    uint64_t v21 = v24;
    uint64_t v22 = v25;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = a1;
    *(void *)(result + 24) = v20;
    *(void *)(result + 32) = v21;
    *(void *)(result + 40) = v22;
    uint64_t v16 = v22 + 1;
    if (!__OFADD__(v22, 1))
    {
      unint64_t v17 = 0;
      unint64_t v18 = result | 0x4000000000000000;
      goto LABEL_17;
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_15:
  uint64_t result = static ProtocolDescriptor.conformance(of:)(a1, a2, *(void *)(a3 + 8), v26);
  unint64_t v18 = v26[0];
  if (v26[0])
  {
    unint64_t v17 = v26[1];
    uint64_t v16 = 1;
    goto LABEL_17;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in static ConditionalTypeDescriptor.descriptor(type:)@<X0>(unint64_t *a1@<X8>)
{
  return ConditionalTypeDescriptor.init(_:)(v1[4], v1[2], v1[3], a1);
}

uint64_t outlined release of TupleView<A>.MakeList(uint64_t a1)
{
  return a1;
}

uint64_t storeEnumTagSinglePayload for ModifiedElements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t closure #1 in ConditionalTypeDescriptor.project(at:baseIndex:_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a5 + 1;
  if (__OFADD__(a5, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = result;
    uint64_t v11 = type metadata accessor for ConditionalTypeDescriptor();
    return ConditionalTypeDescriptor.project(at:baseIndex:_:)(v10, v7, a6, a7, v11);
  }
  return result;
}

uint64_t protocol witness for DynamicView.makeChildViewList(metadata:view:inputs:) in conformance <A> A?(long long *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return Optional<A>.makeChildViewList(metadata:view:inputs:)(a1, a2, a3, a4, *(void *)(a5 - 8), a6, a7, a8);
}

uint64_t Optional<A>.makeChildViewList(metadata:view:inputs:)(long long *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *((void *)a1 + 2);
  uint64_t v10 = *((void *)a1 + 3);
  long long v11 = *(_OWORD *)(a3 + 48);
  void v20[2] = *(_OWORD *)(a3 + 32);
  v20[3] = v11;
  v20[4] = *(_OWORD *)(a3 + 64);
  char v21 = *(unsigned char *)(a3 + 80);
  long long v12 = *(_OWORD *)(a3 + 16);
  v20[0] = *(_OWORD *)a3;
  v20[1] = v12;
  _OWORD v14[2] = *(void *)(a4 + 16);
  void v14[3] = a5;
  long long v15 = *a1;
  uint64_t v16 = v9;
  uint64_t v17 = v10;
  int v18 = a2;
  uint64_t v19 = v20;
  return _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)partial apply for closure #1 in Optional<A>.makeChildViewList(metadata:view:inputs:), (uint64_t)v14, a4, MEMORY[0x263F8E628], (uint64_t)&type metadata for _ViewListOutputs, MEMORY[0x263F8E658], a8);
}

uint64_t type metadata accessor for ConditionalMetadata()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in static _ConditionalContent.makeConditionalMetadata<A>(_:)@<X0>(unint64_t *a1@<X8>)
{
  return closure #1 in static _ConditionalContent.makeConditionalMetadata<A>(_:)(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t partial apply for closure #1 in static Optional.makeConditionalMetadata<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in static Optional.makeConditionalMetadata<A>(_:)(v1[2], v1[3], v1[4], a1);
}

uint64_t closure #1 in static Optional.makeConditionalMetadata<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v10[5] = a2;
  v10[6] = a3;
  v10[7] = a1;
  static ConditionalTypeDescriptor.descriptor(type:constructor:)(a1, (void (*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in static ConditionalTypeDescriptor.descriptor(type:), a2, a3, v10);
  uint64_t v5 = v10[0];
  uint64_t v6 = v10[1];
  uint64_t v7 = v10[2];
  uint64_t v8 = swift_allocObject();
  uint64_t result = type metadata accessor for Optional();
  *(void *)(v8 + 16) = result;
  *(void *)(v8 + 24) = v5;
  *(void *)(v8 + 32) = v6;
  *(void *)(v8 + 40) = v7;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *a4 = v8 | 0x4000000000000000;
    a4[1] = 0;
    a4[2] = v7 + 1;
  }
  return result;
}

uint64_t protocol witness for DynamicView.makeChildViewList(metadata:view:inputs:) in conformance IDView<A, B>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return IDView.makeChildViewList(metadata:view:inputs:)(a1, a2, a3, a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Circle@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

void storeEnumTagSinglePayload for IDView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 >= a2)
  {
    switch(v17)
    {
      case 1:
        a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_41:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v14] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 >= v10)
          {
            uint64_t v24 = *(void (**)(void))(v6 + 56);
            v24();
          }
          else
          {
            unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
            uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
            v23(v22);
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        break;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        break;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        break;
      default:
        return;
    }
  }
}

void protocol witness for ViewTypeVisitor.visit<A>(type:) in conformance TupleView<A>.CountViews(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void TupleView.CountViews.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*((unsigned char *)v4 + 40) & 1) != 0
    || (int v5 = *((_DWORD *)v4 + 4),
        uint64_t v6 = *((void *)v4 + 3),
        uint64_t v7 = *((void *)v4 + 4),
        long long v12 = *v4,
        int v13 = v5,
        uint64_t v14 = v6,
        uint64_t v8 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(a4 + 40))(&v12, a3, a4),
        (v9 & 1) != 0))
  {
    uint64_t v10 = 0;
    char v11 = 1;
    goto LABEL_6;
  }
  uint64_t v10 = v7 + v8;
  if (!__OFADD__(v7, v8))
  {
    char v11 = 0;
LABEL_6:
    *((void *)v4 + 4) = v10;
    *((unsigned char *)v4 + 40) = v11;
    return;
  }
  __break(1u);
}

uint64_t storeEnumTagSinglePayload for _TextBaselineRelativeSpacer(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in StaticBody<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t PreferenceValues.Value.seed.getter@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(v2 + *(int *)(result + 28));
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance LayoutProxyCollection(void *result)
{
  if (*result >= *(void *)(*(void *)(v1 + 8) + 16)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t ScrapeableID.init()@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = AGMakeUniqueID();
  *a1 = result;
  return result;
}

__n128 __swift_memcpy26_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

__n128 ViewGeometry.init(origin:dimensions:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  unint64_t v4 = a1->n128_u64[0];
  uint64_t v5 = a1->n128_i64[1];
  a2->n128_f64[0] = a3;
  a2->n128_f64[1] = a4;
  a2[1].n128_u64[0] = v4;
  a2[1].n128_u64[1] = v5;
  __n128 result = a1[1];
  __n128 v7 = a1[2];
  a2[2] = result;
  a2[3] = v7;
  return result;
}

uint64_t getEnumTagSinglePayload for GraphicsContext.Filter.ResolvedShadow(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 52)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t type metadata completion function for BoxVTable()
{
  return swift_initClassMetadata2();
}

uint64_t outlined destroy of (list: ViewList, attribute: Attribute<ViewList>)(uint64_t a1)
{
  type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static _ViewListOutputs.concat(_:inputs:)@<X0>(uint64_t result@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  v77[1] = *MEMORY[0x263EF8340];
  long long v3 = a2[3];
  long long v71 = a2[2];
  long long v72 = v3;
  long long v73 = a2[4];
  char v74 = *((unsigned char *)a2 + 80);
  long long v4 = a2[1];
  long long v69 = *a2;
  long long v70 = v4;
  int64_t v5 = *(void *)(result + 16);
  if (!v5)
  {
    *(void *)(a3 + 24) = &type metadata for EmptyViewListElements;
    *(void *)(a3 + 32) = &protocol witness table for EmptyViewListElements;
    *(unsigned char *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = v72;
    *(void *)(a3 + 56) = 0;
    *(unsigned char *)(a3 + 64) = 0;
    return result;
  }
  uint64_t v6 = result;
  int64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  int64_t v10 = 0;
  uint64_t v48 = swift_allocObject();
  uint64_t v46 = v72;
  *(void *)(v48 + 16) = v72;
  uint64_t v47 = v6;
  uint64_t v11 = v6 + 32;
  int v50 = (char *)MEMORY[0x263F8EE78];
  int v45 = *MEMORY[0x263F288F8];
  uint64_t v43 = v6 + 32;
  do
  {
    int64_t v12 = v10 + 1;
    outlined init with copy of _ViewListOutputs(v11, (uint64_t)v64);
    char v13 = v68;
    if (v68) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = v8;
    }
    if ((v9 & 1) == 0) {
      uint64_t v8 = v14 + v67;
    }
    outlined init with copy of _ViewListOutputs.Views((uint64_t)v64, (uint64_t)v63);
    if ((v63[40] & 1) == 0)
    {
      outlined destroy of _ViewListOutputs((uint64_t)v64);
      outlined destroy of _ViewListOutputs.Views((uint64_t)v63);
      goto LABEL_4;
    }
    swift_release();
    if (v7 < v10)
    {
      mergeStatic #1 (from:to:) in static _ViewListOutputs.concat(_:inputs:)(v7, v10, v47, v48, (uint64_t)&v69, (uint64_t)&v55);
      int v15 = _ViewListOutputs.makeAttribute(inputs:)((uint64_t *)&v69);
      swift_beginAccess();
      unsigned int v16 = v50;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unsigned int v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v16 + 2) + 1, 1, v16);
      }
      unint64_t v18 = *((void *)v16 + 2);
      unint64_t v17 = *((void *)v16 + 3);
      if (v18 >= v17 >> 1) {
        unsigned int v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, v16);
      }
      *((void *)v16 + 2) = v18 + 1;
      *(_DWORD *)&v16[4 * v18 + 32] = v15;
      int v50 = v16;
      swift_endAccess();
      outlined destroy of _ViewListOutputs((uint64_t)&v55);
    }
    outlined init with copy of _ViewListOutputs.Views((uint64_t)v64, (uint64_t)v61);
    if (v62)
    {
      int v19 = v61[0];
      if (*((void *)&v61[0] + 1))
      {
        LODWORD(v55) = v61[0];
        *((void *)&v55 + 1) = *((void *)&v61[0] + 1);
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
        lazy protocol witness table accessor for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers();
        swift_retain();
        int v19 = Attribute.init<A>(body:value:flags:update:)();
        swift_release_n();
      }
      goto LABEL_33;
    }
    v75[0] = v69;
    v75[1] = v70;
    long long v76 = v71;
    char v20 = BYTE8(v72);
    outlined init with take of ScrollStateRequest(v61, (uint64_t)v54);
    outlined init with copy of AnyTrackedValue((uint64_t)v54, (uint64_t)v53);
    if (v20)
    {
      char v21 = (v20 & 2) == 0;
      if (BYTE5(v76))
      {
LABEL_22:
        uint64_t v22 = *(void *)&v75[0];
        v77[0] = *(void *)&v75[0];
        outlined retain of _GraphInputs((uint64_t)v75);
        outlined retain of ViewTransform((uint64_t)v77);
        uint64_t v23 = specialized find<A>(_:key:)(v22);
        if (v23)
        {
          uint64_t v24 = (uint64_t *)(v23 + 72);
          uint64_t v25 = (unsigned int *)(v23 + 76);
        }
        else
        {
          uint64_t v25 = (unsigned int *)&static _DisplayList_StableIdentityScope.defaultValue + 1;
          if (one-time initialization token for defaultValue != -1) {
            swift_once();
          }
          uint64_t v24 = &static _DisplayList_StableIdentityScope.defaultValue;
        }
        uint64_t v28 = *(unsigned int *)v24;
        uint64_t v29 = *v25;
        outlined release of ViewTransform((uint64_t)v77);
        outlined release of _GraphInputs((uint64_t)v75);
        unint64_t v30 = v28 | (v29 << 32);
        int Attribute = AGWeakAttributeGetAttribute();
        char v27 = Attribute == v45;
        if (Attribute == v45) {
          unint64_t v26 = 0;
        }
        else {
          unint64_t v26 = v30;
        }
        goto LABEL_32;
      }
    }
    else
    {
      char v21 = 0;
      if (BYTE5(v76)) {
        goto LABEL_22;
      }
    }
    unint64_t v26 = 0;
    char v27 = 1;
LABEL_32:
    uint64_t v51 = MEMORY[0x263F8EE88];
    char v52 = 0;
    uint64_t v49 = (void *)MEMORY[0x263F8EE78];
    BaseViewList.init(elements:implicitID:canTransition:stableIDScope:traitKeys:traits:)((uint64_t)v53, v46, v21, v26, v27, &v51, &v49, (uint64_t)&v55);
    v53[3] = &type metadata for BaseViewList;
    v53[4] = &protocol witness table for BaseViewList;
    v53[0] = swift_allocObject();
    outlined init with copy of BaseViewList((uint64_t)&v55, v53[0] + 16);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    type metadata accessor for External<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for External<ViewList>, MEMORY[0x263F288C8]);
    lazy protocol witness table accessor for type External<ViewList> and conformance External<A>();
    int v19 = Attribute.init<A>(body:value:flags:update:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    outlined destroy of BaseViewList((uint64_t)&v55);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
LABEL_33:
    swift_beginAccess();
    int v32 = v50;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v32 + 2) + 1, 1, v32);
    }
    unint64_t v34 = *((void *)v32 + 2);
    unint64_t v33 = *((void *)v32 + 3);
    if (v34 >= v33 >> 1) {
      int v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v32);
    }
    *((void *)v32 + 2) = v34 + 1;
    *(_DWORD *)&v32[4 * v34 + 32] = v19;
    int v50 = v32;
    swift_endAccess();
    outlined destroy of _ViewListOutputs((uint64_t)v64);
    int64_t v7 = v12;
LABEL_4:
    v9 |= v13;
    v11 += 72;
    int64_t v10 = v12;
  }
  while (v5 != v12);
  if (v7 >= v5) {
    goto LABEL_45;
  }
  if (v7)
  {
    mergeStatic #1 (from:to:) in static _ViewListOutputs.concat(_:inputs:)(v7, v5, v47, v48, (uint64_t)&v69, (uint64_t)&v55);
    int v35 = _ViewListOutputs.makeAttribute(inputs:)((uint64_t *)&v69);
    swift_beginAccess();
    uint64_t v36 = v50;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v36 + 2) + 1, 1, v36);
    }
    unint64_t v38 = *((void *)v36 + 2);
    unint64_t v37 = *((void *)v36 + 3);
    if (v38 >= v37 >> 1) {
      uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v38 + 1, 1, v36);
    }
    *((void *)v36 + 2) = v38 + 1;
    *(_DWORD *)&v36[4 * v38 + 32] = v35;
    int v50 = v36;
    swift_endAccess();
    outlined destroy of _ViewListOutputs((uint64_t)&v55);
LABEL_45:
    swift_beginAccess();
    uint64_t v39 = *((void *)v50 + 2);
    if (v39 == 1)
    {
      int v40 = *((_DWORD *)v50 + 8);
    }
    else
    {
      if (!v39)
      {
        if ((BYTE8(v72) & 0x10) != 0)
        {
          long long v57 = v71;
          long long v58 = v72;
          long long v59 = v73;
          char v60 = v74;
          long long v55 = v69;
          long long v56 = v70;
          static _ViewListOutputs.nonEmptyParentViewList(inputs:)((uint64_t)&v55, a3);
        }
        else
        {
          int v65 = &type metadata for EmptyViewListElements;
          uint64_t v66 = &protocol witness table for EmptyViewListElements;
          long long v57 = v71;
          long long v58 = v72;
          long long v59 = v73;
          char v60 = v74;
          long long v55 = v69;
          long long v56 = v70;
          static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v64, (uint64_t *)&v55, 0, a3);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
        }
        goto LABEL_57;
      }
      *(void *)&long long v55 = v50;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
      lazy protocol witness table accessor for type _ViewList_Group.Init and conformance _ViewList_Group.Init();
      swift_bridgeObjectRetain();
      int v40 = Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
    }
    *(_DWORD *)a3 = v40;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 40) = 1;
    swift_beginAccess();
    uint64_t v41 = *(void *)(v48 + 16);
    swift_release();
    __n128 result = swift_bridgeObjectRelease();
    *(void *)(a3 + 48) = v41;
    *(void *)(a3 + 56) = v8;
    *(unsigned char *)(a3 + 64) = v9 & 1;
  }
  else
  {
    if (v5 == 1)
    {
      outlined init with copy of _ViewListOutputs(v43, a3);
    }
    else
    {
      *(void *)(a3 + 24) = &unk_26FA4D168;
      *(void *)(a3 + 32) = &protocol witness table for MergedElements;
      uint64_t v42 = (void *)swift_allocObject();
      *(void *)a3 = v42;
      v42[2] = v47;
      v42[3] = v43;
      v42[4] = 0;
      v42[5] = (2 * v5) | 1;
      *(unsigned char *)(a3 + 40) = 0;
      swift_beginAccess();
      *(void *)(a3 + 48) = *(void *)(v48 + 16);
      *(void *)(a3 + 56) = v8;
      *(unsigned char *)(a3 + 64) = v9 & 1;
      swift_bridgeObjectRetain();
    }
LABEL_57:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined destroy of _ViewListOutputs(uint64_t a1)
{
  return a1;
}

uint64_t destroy for _ViewListOutputs(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    return swift_release();
  }
  else {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
}

uint64_t outlined init with copy of _ViewListOutputs(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for _ViewListOutputs(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 40);
  if (v4)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    swift_retain();
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
  }
  *(unsigned char *)(a1 + 40) = v4;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t _ViewListOutputs.multiModifier<A>(_:inputs:)(int *a1, uint64_t *a2)
{
  uint64_t v24 = v2;
  int v3 = *a1;
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  unsigned int v8 = *((_DWORD *)a2 + 6);
  unsigned int v7 = *((_DWORD *)a2 + 7);
  unsigned int v10 = *((_DWORD *)a2 + 8);
  unsigned int v9 = *((_DWORD *)a2 + 9);
  uint64_t v11 = a2[5];
  outlined init with copy of _ViewListOutputs.Views(v24, (uint64_t)v36);
  if (v37)
  {
    int v23 = v36[0];
    uint64_t v22 = *((void *)&v36[0] + 1);
    type metadata accessor for ModifiedViewList.ListModifier();
    LODWORD(v25) = v3;
    *(void *)&long long v29 = v4;
    DWORD2(v29) = v5;
    *(void *)&long long v30 = v6;
    *((void *)&v30 + 1) = __PAIR64__(v7, v8);
    *(void *)&long long v31 = __PAIR64__(v9, v10);
    *((void *)&v31 + 1) = v11;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v12 = ModifiedViewList.ListModifier.__allocating_init(pred:modifier:inputs:)(v22, (uint64_t)&v25, (uint64_t *)&v29);
    LODWORD(v29) = v23;
    *((void *)&v29 + 1) = v12;
    BYTE8(v31) = 1;
    char v13 = &v29;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v36, (uint64_t)v35);
    outlined init with copy of AnyTrackedValue((uint64_t)v35, (uint64_t)&v25);
    unint64_t v14 = AGCreateWeakAttribute();
    unsigned int v15 = v14;
    unint64_t v16 = HIDWORD(v14);
    outlined init with take of ScrollStateRequest(&v25, (uint64_t)&v29);
    *((void *)&v31 + 1) = __PAIR64__(v16, v15);
    *(void *)&long long v32 = v4;
    DWORD2(v32) = v5;
    *(void *)&long long v33 = v6;
    *((void *)&v33 + 1) = __PAIR64__(v7, v8);
    *(void *)&long long v34 = __PAIR64__(v9, v10);
    *((void *)&v34 + 1) = v11;
    uint64_t v26 = type metadata accessor for ModifiedElements();
    char v27 = &protocol witness table for ModifiedElements<A>;
    unint64_t v17 = (_OWORD *)swift_allocObject();
    *(void *)&long long v25 = v17;
    long long v18 = v32;
    void v17[3] = v31;
    v17[4] = v18;
    long long v19 = v34;
    void v17[5] = v33;
    v17[6] = v19;
    long long v20 = v30;
    v17[1] = v29;
    v17[2] = v20;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    char v28 = 0;
    char v13 = &v25;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v13, v24);
}

uint64_t outlined init with copy of _ViewListOutputs.Views(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for _ViewListOutputs.Views(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    swift_retain();
    char v4 = 1;
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    char v4 = 0;
  }
  *(unsigned char *)(a1 + 40) = v4;
  return a1;
}

uint64_t outlined assign with take of _ViewListOutputs.Views(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t assignWithTake for _ViewListOutputs.Views(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      swift_release();
    }
    else {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      LOBYTE(v5) = 0;
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
    }
    *(unsigned char *)(a1 + 40) = v5;
  }
  return a1;
}

uint64_t type metadata accessor for ModifiedViewList.ListModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ModifiedViewList.ListModifier.__allocating_init(pred:modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized ModifiedViewList.ListModifier.init(pred:modifier:inputs:)(a1, a2, a3, v6);
  swift_release();
  return v7;
}

uint64_t specialized ModifiedViewList.ListModifier.init(pred:modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  int v7 = *((_DWORD *)a3 + 2);
  uint64_t v8 = a3[2];
  uint64_t v9 = a3[5];
  *(void *)(a4 + 16) = a1;
  swift_retain();
  *(void *)(a4 + 24) = AGCreateWeakAttribute();
  *(void *)(a4 + 32) = v6;
  *(_DWORD *)(a4 + 40) = v7;
  *(void *)(a4 + 48) = v8;
  *(_OWORD *)(a4 + 56) = *(_OWORD *)(a3 + 3);
  *(void *)(a4 + 72) = v9;
  return a4;
}

uint64_t outlined destroy of _ViewListOutputs.Views(uint64_t a1)
{
  return a1;
}

uint64_t destroy for _ViewListOutputs.Views(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 == 1) {
    return swift_release();
  }
  else {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
}

uint64_t (*DynamicViewList.WrappedIDs.subscript.read(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  return destroy for HostPreferencesCombiner;
}

uint64_t _ViewList_ID._Views.subscript.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v10 = a1;
  unsigned int v3 = (uint64_t (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
  unsigned int v5 = v4;
  uint64_t v6 = v4[1];
  swift_bridgeObjectRetain();
  uint64_t v7 = *v5;
  uint64_t result = v3(v9, 0);
  *a2 = v7;
  a2[1] = v6;
  return result;
}

void protocol witness for Collection.subscript.read in conformance ArrayWith2Inline<A>(void *a1)
{
  unsigned int v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t destroy for HostPreferencesCombiner()
{
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t *a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  int64_t v2 = *(void *)(*a1 + 16);
  if (v2)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    uint64_t v3 = v13;
    unsigned int v4 = (int *)(v1 + 32);
    do
    {
      int v5 = *v4++;
      uint64_t Value = AGGraphGetValue();
      outlined init with copy of AnyTrackedValue(Value, (uint64_t)&v14);
      *(_DWORD *)&v15[24] = v5;
      unint64_t v8 = *(void *)(v13 + 16);
      unint64_t v7 = *(void *)(v13 + 24);
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      *(void *)(v13 + 16) = v8 + 1;
      uint64_t v9 = (_OWORD *)(v13 + 48 * v8);
      long long v10 = v14;
      long long v11 = *(_OWORD *)v15;
      *(_OWORD *)((char *)v9 + 60) = *(_OWORD *)&v15[12];
      v9[2] = v10;
      v9[3] = v11;
      --v2;
    }
    while (v2);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = MEMORY[0x263F8EE78];
  }
  *(void *)&v15[8] = &type metadata for _ViewList_Group;
  *(void *)&v15[16] = &protocol witness table for _ViewList_Group;
  swift_bridgeObjectRelease();
  *(void *)&long long v14 = v3;
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
}

{
  double v2[5];

  v2[4] = *(double *)MEMORY[0x263EF8340];
  CanvasSymbols.SymbolSize.value.getter(*a1, v2);
  return AGGraphSetOutputValue();
}

{
  specialized PreferenceTransform.value.getter(*a1);
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x263F8D6C8], MEMORY[0x263F8D8F0]);
  return AGGraphSetOutputValue();
}

{
  specialized EventFilterEvents.value.getter(*a1);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  specialized LayoutChildSeed.value.getter(*a1);
  return AGGraphSetOutputValue();
}

{
  specialized PreferenceTransform.value.getter(*a1);
  _s7SwiftUI16TimelineSchedule_pSgMaTm_0(0, &lazy cache variable for type metadata for [ScrollStateRequest], (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, MEMORY[0x263F8D488]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  void v2[8];

  v2[7] = *MEMORY[0x263EF8340];
  specialized SecondaryChild.value.getter(*a1, v2);
  type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>();
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<(key: Spacing.Key, value: Spacing.Value)>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<Transaction.PendingListeners.WeakListener>, type metadata accessor for Transaction.PendingListeners.WeakListener, type metadata accessor for Transaction.PendingListeners.WeakListener);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, LocalizedStringKey.FormatArgument)>, (uint64_t (*)(uint64_t))type metadata accessor for (Int, LocalizedStringKey.FormatArgument), (uint64_t (*)(void))type metadata accessor for (Int, LocalizedStringKey.FormatArgument));
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<LocalizedStringKey.FormatArgument>, type metadata accessor for LocalizedStringKey.FormatArgument, type metadata accessor for LocalizedStringKey.FormatArgument);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<UInt64>, MEMORY[0x263F8E970]);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, MEMORY[0x263F073D0], MEMORY[0x263F073D0]);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<[Path]>, &lazy cache variable for type metadata for [Path], (uint64_t)&type metadata for Path);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.PathInterpolator.Glyph>, (uint64_t)&type metadata for Text.Effect.PathInterpolator.Glyph);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, type metadata accessor for _ContiguousArrayStorage<[CGPoint]>, type metadata accessor for [CGPoint]);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, type metadata accessor for _ContiguousArrayStorage<[Path?]>, (void (*)(void))type metadata accessor for [Path?]);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<[Text.Layout.Cluster]>, &lazy cache variable for type metadata for [Text.Layout.Cluster], (uint64_t)&type metadata for Text.Layout.Cluster);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x263F8D6C8]);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScaleRippleTextEffect.Timing.ClusterTiming>, (uint64_t)&type metadata for ScaleRippleTextEffect.Timing.ClusterTiming);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.SegmentInteraction.Element>, (uint64_t (*)(uint64_t))type metadata accessor for Text.Effect.SegmentInteraction.Element, (uint64_t (*)(void))type metadata accessor for Text.Effect.SegmentInteraction.Element);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Timing.UnitGlyphTiming>, (uint64_t)&type metadata for Text.Effect.Timing.UnitGlyphTiming);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CodableAccessibilityCustomContentList.CodableEntry>, (uint64_t)&type metadata for CodableAccessibilityCustomContentList.CodableEntry);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<CustomRecursiveStringConvertible>, &lazy cache variable for type metadata for CustomRecursiveStringConvertible, (uint64_t)&protocol descriptor for CustomRecursiveStringConvertible);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, type metadata accessor for _ContiguousArrayStorage<[String : [Double]]>, (void (*)(void))type metadata accessor for [String : [Double]]);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<[Path?]>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(list: ViewList, attribute: Attribute<ViewList>)>, (uint64_t (*)(uint64_t))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>), MEMORY[0x263F8E0F8]);
    long long v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    long long v10 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 4;
  uint64_t v13 = a4 + 4;
  size_t v14 = 6 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v10 + 4, a4 + 4, v14 * 8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>)();
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<[Path?]>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), MEMORY[0x263F8E0F8]);
    long long v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    long long v10 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = (unint64_t)(v10 + 4);
  uint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 112 * v8) {
      memmove(v10 + 4, a4 + 4, 112 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 112 * v8 || v12 >= v13 + 112 * v8)
  {
    type metadata accessor for (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>)();
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<[Path?]>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(arg: UInt64, destructor: (())?)?>, (uint64_t (*)(uint64_t))type metadata accessor for (arg: UInt64, destructor: (())?)?, MEMORY[0x263F8E0F8]);
    long long v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    long long v10 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = (unint64_t)(v10 + 4);
  uint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    type metadata accessor for (arg: UInt64, destructor: (())?)?(0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, MEMORY[0x263F073D0], MEMORY[0x263F073D0]);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<[Path?]>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NSAttributedStringKey>, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, MEMORY[0x263F8E0F8]);
    long long v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    void v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    long long v10 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = (unint64_t)(v10 + 4);
  size_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    type metadata accessor for NSAttributedStringKey(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.RenderSegmentation.Segment>, type metadata accessor for Text.Effect.RenderSegmentation.Segment, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(String, String)>();
    long long v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    v10[2] = v8;
    void v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    long long v10 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = (unint64_t)(v10 + 4);
  size_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    type metadata accessor for (Path, FillStyle)(0, (unint64_t *)&lazy cache variable for type metadata for (String, String));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(label: String, value: Double)>();
    long long v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    long long v10 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = (unint64_t)(v10 + 4);
  uint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(0, (unint64_t *)&lazy cache variable for type metadata for (label: String, value: Double));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(name: String, value: String)>();
    long long v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    v10[2] = v8;
    void v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    long long v10 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = (unint64_t)(v10 + 4);
  size_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(0, (unint64_t *)&lazy cache variable for type metadata for (name: String, value: String));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(String, Double)>();
    long long v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    long long v10 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = (unint64_t)(v10 + 4);
  uint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    type metadata accessor for (Path, FillStyle)(0, (unint64_t *)&lazy cache variable for type metadata for (String, Double));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _ViewList_Node.applyNodes(from:style:transform:to:)(uint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t *, unint64_t *, long long *, uint64_t), uint64_t a5)
{
  unint64_t v10 = *a2;
  uint64_t result = outlined init with copy of _ViewList_Node(v5, (uint64_t)&v35);
  switch(v40)
  {
    case 1:
      long long v32 = v38;
      v33[0] = *(_OWORD *)v39;
      *(void *)((char *)v33 + 13) = *(void *)&v39[13];
      long long v29 = v35;
      long long v30 = v36;
      long long v31 = v37;
      uint64_t v18 = *((void *)&v35 + 1);
      if (v10)
      {
        uint64_t v18 = *((void *)&v29 + 1) * (v10 >> 1);
        if ((unsigned __int128)(*((uint64_t *)&v29 + 1) * (__int128)(v10 >> 1)) >> 64 != v18 >> 63)
        {
          __break(1u);
          goto LABEL_15;
        }
      }
      if (*a1 >= v18)
      {
        outlined destroy of _ViewList_Sublist((uint64_t)&v29);
        *a1 -= v18;
        char v17 = 1;
      }
      else
      {
        unint64_t v34 = v10;
        outlined init with copy of _ViewList_Sublist((uint64_t)&v29, (uint64_t)&v24);
        char v28 = 1;
        char v17 = a4(a1, &v34, &v24, a3);
        outlined destroy of _ViewList_Node((uint64_t)&v24);
        outlined destroy of _ViewList_Sublist((uint64_t)&v29);
        *a1 = 0;
      }
      return v17 & 1;
    case 2:
      *(void *)&long long v24 = v35;
      *(void *)&long long v29 = v10;
      char v17 = _ViewList_Group.applyNodes(from:style:transform:to:)((uint64_t)a1, (uint64_t *)&v29, a3, (uint64_t)a4, a5);
      swift_bridgeObjectRelease();
      return v17 & 1;
    case 3:
      uint64_t v19 = *((void *)&v35 + 1);
      if (BYTE8(v36) != 1)
      {
        *(void *)&long long v24 = *((void *)&v35 + 1);
        *(void *)&long long v29 = v10;
        swift_bridgeObjectRetain();
        char v17 = _ViewList_Group.applyNodes(from:style:transform:to:)((uint64_t)a1, (uint64_t *)&v29, a3, (uint64_t)a4, a5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        return v17 & 1;
      }
      if (*(void *)(*((void *)&v35 + 1) + 16))
      {
        outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(*((void *)&v35 + 1) + 32, (uint64_t)&v24);
        outlined init with take of ScrollStateRequest(&v24, (uint64_t)&v29);
        uint64_t v20 = *((void *)&v30 + 1);
        uint64_t v21 = v31;
        __swift_project_boxed_opaque_existential_1(&v29, *((uint64_t *)&v30 + 1));
        unint64_t v34 = v10;
        outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v19 + 32, (uint64_t)&v24);
        uint64_t v22 = v27;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int v23 = *(uint64_t (**)(uint64_t *, unint64_t *, uint64_t, uint64_t, uint64_t (*)(void, void, void, void), uint64_t, uint64_t, uint64_t))(v21 + 48);
        LOBYTE(v24) = 0;
        char v17 = v23(a1, &v34, v22, a3, (uint64_t (*)(void, void, void, void))a4, a5, v20, v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
        return v17 & 1;
      }
LABEL_15:
      __break(1u);
      return result;
    default:
      uint64_t v12 = DWORD2(v37);
      unsigned __int8 v13 = BYTE12(v37);
      outlined init with take of ScrollStateRequest(&v35, (uint64_t)&v24);
      uint64_t v14 = v25;
      uint64_t v15 = v26;
      __swift_project_boxed_opaque_existential_1(&v24, v25);
      *(void *)&long long v29 = v10;
      uint64_t v16 = *(uint64_t (**)(uint64_t *, long long *, unint64_t, uint64_t, uint64_t (*)(void, void, void, void), uint64_t, uint64_t, uint64_t))(v15 + 48);
      LOBYTE(v34) = v13;
      char v17 = v16(a1, &v29, v12 | ((unint64_t)v13 << 32), a3, (uint64_t (*)(void, void, void, void))a4, a5, v14, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
      return v17 & 1;
  }
}

uint64_t _ViewList_SublistTransform.apply(sublist:)(uint64_t result)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v5 = v2 + 40 * v3 - 8;
    while (v3 <= *(void *)(v2 + 16))
    {
      --v3;
      outlined init with copy of AnyTrackedValue(v5, (uint64_t)v8);
      uint64_t v6 = v9;
      uint64_t v7 = v10;
      __swift_project_boxed_opaque_existential_1(v8, v9);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(v4, v6, v7);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
      v5 -= 40;
      if (!v3) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t _ViewList_Node.applySublists(from:style:transform:to:)(uint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(long long *), uint64_t a5)
{
  unint64_t v10 = *a2;
  uint64_t result = outlined init with copy of _ViewList_Node(v5, (uint64_t)&v36);
  switch(v41)
  {
    case 1:
      long long v33 = v38;
      long long v34 = v39;
      *(_OWORD *)long long v35 = *(_OWORD *)v40;
      *(void *)&v35[13] = *(void *)&v40[13];
      long long v31 = v36;
      long long v32 = v37;
      uint64_t v18 = *((void *)&v36 + 1);
      if (v10)
      {
        uint64_t v18 = *((void *)&v36 + 1) * (v10 >> 1);
        if ((unsigned __int128)(*((uint64_t *)&v36 + 1) * (__int128)(v10 >> 1)) >> 64 != v18 >> 63) {
          goto LABEL_18;
        }
      }
      if (*a1 >= v18)
      {
        outlined destroy of _ViewList_Sublist((uint64_t)&v31);
        *a1 -= v18;
        char v17 = 1;
        return v17 & 1;
      }
      else
      {
        uint64_t v19 = *a3;
        uint64_t v20 = *(void *)(v19 + 16);
        if (!v20)
        {
LABEL_11:
          char v17 = a4(&v31);
          outlined destroy of _ViewList_Sublist((uint64_t)&v31);
          *a1 = 0;
          return v17 & 1;
        }
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v21 = v19 + 40 * v20 - 8;
        while (v20 <= *(void *)(v19 + 16))
        {
          --v20;
          outlined init with copy of AnyTrackedValue(v21, (uint64_t)v28);
          uint64_t v22 = v29;
          uint64_t v23 = v30;
          __swift_project_boxed_opaque_existential_1(v28, v29);
          (*(void (**)(long long *, uint64_t, uint64_t))(v23 + 8))(&v31, v22, v23);
          uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
          v21 -= 40;
          if (!v20)
          {
            swift_bridgeObjectRelease();
            goto LABEL_11;
          }
        }
        __break(1u);
LABEL_18:
        __break(1u);
      }
      return result;
    case 2:
      *(void *)&long long v31 = v36;
      v28[0] = v10;
      MEMORY[0x270FA5388](result);
      uint64_t v25 = a4;
      uint64_t v26 = a5;
      char v17 = _ViewList_Group.applyNodes(from:style:transform:to:)((uint64_t)a1, (uint64_t *)v28, (uint64_t)a3, (uint64_t)partial apply for closure #1 in _ViewList_Node.applySublists(from:style:transform:to:), (uint64_t)v24);
      goto LABEL_14;
    case 3:
      LODWORD(v31) = v36;
      *((void *)&v31 + 1) = *((void *)&v36 + 1);
      *(void *)&long long v32 = v37;
      BYTE8(v32) = BYTE8(v37);
      v28[0] = v10;
      MEMORY[0x270FA5388](result);
      uint64_t v25 = a4;
      uint64_t v26 = a5;
      char v17 = _ViewList_Section.applyNodes(from:style:transform:to:)((uint64_t)a1, v28, (uint64_t)a3, (uint64_t)partial apply for closure #2 in _ViewList_Node.applySublists(from:style:transform:to:), (uint64_t)v24);
      swift_bridgeObjectRelease();
LABEL_14:
      swift_bridgeObjectRelease();
      return v17 & 1;
    default:
      unsigned int v27 = a1;
      uint64_t v12 = DWORD2(v38);
      unsigned __int8 v13 = BYTE12(v38);
      outlined init with take of ScrollStateRequest(&v36, (uint64_t)&v31);
      uint64_t v14 = *((void *)&v32 + 1);
      uint64_t v15 = v33;
      __swift_project_boxed_opaque_existential_1(&v31, *((uint64_t *)&v32 + 1));
      unint64_t v43 = v10;
      v28[2] = (unint64_t)a4;
      uint64_t v29 = a5;
      uint64_t v16 = *(uint64_t (**)(uint64_t *, unint64_t *, unint64_t, uint64_t *, uint64_t (*)(), unint64_t *, uint64_t, uint64_t))(v15 + 48);
      unsigned __int8 v42 = v13;
      char v17 = v16(v27, &v43, v12 | ((unint64_t)v13 << 32), a3, partial apply for closure #1 in _ViewList_Node.applySublists(from:style:transform:to:), v28, v14, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
      return v17 & 1;
  }
}

double ModifiedViewList.Transform.apply(sublist:)(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  int v4 = *(_DWORD *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = (uint64_t)(a1 + 4);
  outlined init with copy of AnyTrackedValue((uint64_t)(a1 + 4), (uint64_t)v11);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1(v7);
  a1[7] = type metadata accessor for ModifiedElements();
  a1[8] = &protocol witness table for ModifiedElements<A>;
  uint64_t v8 = swift_allocObject();
  a1[4] = v8;
  outlined init with take of ScrollStateRequest(v11, v8 + 16);
  *(void *)(v8 + 56) = *(void *)v1;
  *(void *)(v8 + 64) = v3;
  *(_DWORD *)(v8 + 72) = v4;
  *(void *)(v8 + 80) = v5;
  double result = *(double *)(v1 + 32);
  uint64_t v10 = *(void *)(v1 + 40);
  *(double *)(v8 + 88) = result;
  *(void *)(v8 + 96) = v10;
  *(void *)(v8 + 104) = v6;
  return result;
}

uint64_t type metadata accessor for ModifiedElements()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with copy of _ViewList_Node(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for _ViewList_Node(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 85);
  if (v4 >= 4) {
    unsigned int v4 = *(_DWORD *)a2 + 4;
  }
  switch(v4)
  {
    case 1u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      long long v8 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 56) = v8;
      uint64_t v9 = v8;
      uint64_t v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
      swift_bridgeObjectRetain();
      v10(a1 + 32, a2 + 32, v9);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
      *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
      char v6 = 1;
      goto LABEL_8;
    case 2u:
      *(void *)a1 = *(void *)a2;
      char v6 = 2;
LABEL_8:
      *(unsigned char *)(a1 + 85) = v6;
      goto LABEL_9;
    case 3u:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = v7;
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(unsigned char *)(a1 + 85) = 3;
      swift_bridgeObjectRetain();
LABEL_9:
      swift_bridgeObjectRetain();
      break;
    default:
      long long v5 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v5;
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
      *(unsigned char *)(a1 + 85) = 0;
      break;
  }
  return a1;
}

uint64_t protocol witness for _ViewList_SublistTransform_Item.apply(sublist:) in conformance DynamicViewList<A>.Transform(uint64_t a1)
{
  return DynamicViewList.Transform.apply(sublist:)(a1, *v1);
}

uint64_t DynamicViewList.Transform.apply(sublist:)(uint64_t a1, uint64_t a2)
{
  DynamicViewList.Item.bindID(_:)();
  a1 += 32;
  char v6 = &type metadata for SubgraphElements;
  uint64_t v7 = &protocol witness table for SubgraphElements;
  *(void *)&long long v5 = swift_allocObject();
  outlined init with copy of AnyTrackedValue(a1, v5 + 16);
  *(void *)(v5 + 56) = a2;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return outlined init with take of ScrollStateRequest(&v5, a1);
}

uint64_t DynamicViewList.Item.bindID(_:)()
{
  int v1 = *(_DWORD *)((char *)v0 + *(void *)(*v0 + 144));
  char v2 = *((unsigned char *)v0 + *(void *)(*v0 + 160));
  uint64_t v3 = (uint64_t)v0 + *(void *)(*v0 + 136);
  uint64_t v4 = v0[4];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return _ViewList_ID.bind<A>(explicitID:owner:isUnary:reuseID:)(v3, v1, v2, v4);
}

uint64_t _ViewList_ID.bind<A>(explicitID:owner:isUnary:reuseID:)(uint64_t a1, int a2, char a3, uint64_t a4)
{
  double v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v11 + 16))(v10, v8);
  AnyHashable2.init<A>(_:)((uint64_t)v10, &v19);
  uint64_t v12 = v19;
  unsigned __int8 v13 = *(void **)(v4 + 8);
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned __int8 v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
  }
  unint64_t v15 = v13[2];
  unint64_t v14 = v13[3];
  if (v15 >= v14 >> 1) {
    unsigned __int8 v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v13);
  }
  void v13[2] = v15 + 1;
  uint64_t v16 = &v13[3 * v15];
  v16[4] = v12;
  v16[5] = a4;
  *((_DWORD *)v16 + 12) = a2;
  *((unsigned char *)v16 + 52) = a3 & 1;
  uint64_t result = swift_release();
  *(void *)(v4 + 8) = v13;
  return result;
}

uint64_t AnyHashable2.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for _AnyHashableBox();
  uint64_t result = GradientBox.__allocating_init(_:)(a1);
  *a2 = result;
  return result;
}

uint64_t GradientBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 128) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 144), a1);
  return v2;
}

uint64_t type metadata accessor for _AnyHashableBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for CachedEnvironment.Item(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t protocol witness for _ViewList_SublistTransform_Item.apply(sublist:) in conformance ForEachState<A, B, C>.Transform(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 9)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  int v3 = v2 | *(unsigned __int8 *)(v1 + 8);
  if (*(unsigned char *)(v1 + 10)) {
    int v4 = 0x10000;
  }
  else {
    int v4 = 0;
  }
  return ForEachState.Transform.apply(sublist:)(a1, *(void **)v1, v3 | v4);
}

uint64_t ForEachState.Transform.apply(sublist:)(uint64_t a1, void *a2, int a3)
{
  ForEachState.Transform.bindID(_:)(a1 + 16, a2, a3 & 0x10101);
  uint64_t v7 = &type metadata for SubgraphElements;
  double v8 = &protocol witness table for SubgraphElements;
  *(void *)&long long v6 = swift_allocObject();
  outlined init with copy of AnyTrackedValue(a1 + 32, v6 + 16);
  *(void *)(v6 + 56) = a2;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  outlined init with take of ScrollStateRequest(&v6, a1 + 32);
  return ForEachState.Item.applyTraits(to:)();
}

uint64_t ForEachState.Transform.bindID(_:)(uint64_t result, void *a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = result;
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      int v6 = *(_DWORD *)(result + 120);
      char v7 = *(unsigned char *)(result + 124);
      uint64_t result = swift_release();
      if ((v7 & 1) == 0)
      {
        int v8 = a3 & 0x100;
        uint64_t v9 = (void *)*a2;
        if ((a3 & 0x10000) != 0)
        {
          uint64_t v10 = *(void *)((char *)a2 + v9[25]);
          uint64_t v11 = *(void *)((char *)a2 + v9[21]);
          type metadata accessor for _AnyHashableBox<Pair<Int, AGAttribute>>();
          uint64_t v12 = swift_allocObject();
          *(void *)(v12 + 16) = v10;
          *(_DWORD *)(v12 + 24) = v6;
          unsigned __int8 v13 = *(void **)(v5 + 8);
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unsigned __int8 v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
          }
          unint64_t v14 = v13[2];
          unint64_t v15 = v13[3];
          unint64_t v16 = v14 + 1;
          if (v14 >= v15 >> 1)
          {
            uint64_t v18 = v13;
            unint64_t v19 = v13[2];
            uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v14 + 1, 1, v18);
            unint64_t v14 = v19;
            unsigned __int8 v13 = v20;
          }
          void v13[2] = v16;
          char v17 = &v13[3 * v14];
          v17[4] = v12;
          void v17[5] = v11;
          *((_DWORD *)v17 + 12) = v6;
          *((unsigned char *)v17 + 52) = BYTE1(v8);
          uint64_t result = swift_release();
          *(void *)(v5 + 8) = v13;
        }
        else
        {
          return _ViewList_ID.bind<A>(explicitID:owner:isUnary:reuseID:)((uint64_t)a2 + v9[20], v6, v8 != 0, *(void *)((char *)a2 + v9[21]));
        }
      }
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in DynamicLayoutViewAdaptor.foreachItem(items:_:)(uint64_t a1)
{
  return closure #1 in DynamicLayoutViewAdaptor.foreachItem(items:_:)(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t closure #1 in DynamicLayoutViewAdaptor.foreachItem(items:_:)(uint64_t a1, void (*a2)(void *))
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 16);
  outlined init with copy of AnyTrackedValue(a1 + 32, (uint64_t)v11);
  uint64_t v6 = *(void *)(a1 + 72);
  int v7 = *(_DWORD *)(a1 + 80);
  char v8 = *(unsigned char *)(a1 + 84);
  v10[0] = v5;
  v10[1] = v4;
  v11[5] = v6;
  int v12 = v7;
  char v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a2(v10);
  outlined destroy of DynamicViewListItem((uint64_t)v10);
  return 1;
}

unint64_t specialized closure #1 in DynamicContainerInfo.updateItems(disableTransitions:)(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unsigned char *a5, uint64_t a6, char a7, unsigned char *a8)
{
  unint64_t v12 = *a2;
  int64_t v13 = *a3;
  if ((uint64_t)*a3 < (uint64_t)*a2) {
    goto LABEL_58;
  }
  unint64_t v14 = a8;
  uint64_t v9 = a5;
  uint64_t v10 = a4;
  char v8 = a2;
  uint64_t v15 = a1;
  if (v12 == v13)
  {
LABEL_3:
    int v16 = *(_DWORD *)(v10 + 192) + 1;
    *(_DWORD *)(v10 + 192) = v16;
    Currentint Attribute = AGGraphGetCurrentAttribute();
    if (CurrentAttribute == *MEMORY[0x263F288F8]) {
      goto LABEL_62;
    }
    specialized DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)((void *)v15, v16, CurrentAttribute, a7 & 1);
    MEMORY[0x24C522D60]();
    if (*(void *)((*(void *)(v10 + 144) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v10 + 144) & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
      goto LABEL_63;
    while (1)
    {
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      unint64_t v18 = *a3;
      if ((uint64_t)*v8 < (uint64_t)*a3)
      {
        specialized MutableCollection.swapAt(_:_:)(*v8, v18);
        unint64_t v18 = *a3;
      }
      *a3 = v18 + 1;
LABEL_8:
      *uint64_t v9 = 1;
LABEL_9:
      uint64_t v19 = swift_bridgeObjectRetain();
      double v11 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(v19, 0.0);
      swift_bridgeObjectRelease();
      *unint64_t v14 = *v14 & 1 | (v11 != 0.0);
      unint64_t v20 = *v8;
      uint64_t v21 = *(void *)(v10 + 144);
      if ((v21 & 0xC000000000000001) != 0) {
        goto LABEL_59;
      }
      if ((v20 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v20 < *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v22 = swift_retain();
        goto LABEL_13;
      }
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
  }
  unint64_t v59 = *a3;
  char v60 = (uint64_t *)(a4 + 144);
  while ((uint64_t)v12 < v13)
  {
    uint64_t v27 = *v60;
    if ((*v60 & 0xC000000000000001) != 0)
    {
      uint64_t v28 = MEMORY[0x24C523D60](v12);
    }
    else
    {
      if ((v12 & 0x8000000000000000) != 0) {
        goto LABEL_56;
      }
      if (v12 >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_57;
      }
      uint64_t v28 = *(void *)(v27 + 8 * v12 + 32);
      swift_retain();
    }
    swift_beginAccess();
    outlined init with copy of DynamicViewListItem(v28 + 88, (uint64_t)v65);
    if (v67)
    {
      if ((*(unsigned char *)(v15 + 68) & 1) == 0) {
        goto LABEL_21;
      }
      uint64_t v52 = v28 + 88;
      outlined init with copy of DynamicViewListItem((uint64_t)v65, (uint64_t)v63);
      outlined init with copy of DynamicViewListItem(v15, (uint64_t)v61);
LABEL_34:
      if (v63[0] == v61[0] && v63[1] == v61[1])
      {
        uint64_t v32 = *(void *)(v64 + 16);
        uint64_t v58 = v62;
        if (v32 == *(void *)(v62 + 16))
        {
          uint64_t v33 = v62;
          if (!v32 || v64 == v62) {
            goto LABEL_50;
          }
          uint64_t v53 = v64;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v34 = v53;
          uint64_t v35 = 0;
          uint64_t v54 = v28;
          while (1)
          {
            uint64_t v37 = *(void *)(v34 + v35 + 32);
            uint64_t v36 = *(void *)(v34 + v35 + 40);
            int v38 = *(_DWORD *)(v34 + v35 + 48);
            int v39 = *(unsigned __int8 *)(v34 + v35 + 52);
            uint64_t v40 = *(void *)(v33 + v35 + 40);
            int v41 = *(_DWORD *)(v33 + v35 + 48);
            int v42 = *(unsigned __int8 *)(v33 + v35 + 52);
            if (v37 != *(void *)(v33 + v35 + 32))
            {
              unint64_t v43 = *(uint64_t (**)(uint64_t))(*(void *)v37 + 104);
              int v56 = *(_DWORD *)(v34 + v35 + 48);
              int v57 = *(unsigned __int8 *)(v34 + v35 + 52);
              uint64_t v55 = *(void *)(v34 + v35 + 40);
              swift_retain();
              uint64_t v44 = swift_retain();
              LOBYTE(v43) = v43(v44);
              swift_release();
              swift_release();
              uint64_t v36 = v55;
              int v38 = v56;
              int v39 = v57;
              uint64_t v34 = v53;
              if ((v43 & 1) == 0) {
                break;
              }
            }
            if (v36 != v40) {
              break;
            }
            uint64_t v28 = v54;
            int64_t v13 = v59;
            if (v38 != v41 || v39 != v42)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v9 = a5;
              char v8 = a2;
              unint64_t v14 = a8;
              uint64_t v10 = a4;
              uint64_t v15 = a1;
              goto LABEL_22;
            }
            v35 += 24;
            --v32;
            uint64_t v33 = v58;
            if (!v32)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v9 = a5;
              char v8 = a2;
              unint64_t v14 = a8;
              uint64_t v10 = a4;
              uint64_t v15 = a1;
LABEL_50:
              outlined destroy of DynamicViewListItem((uint64_t)v61);
              outlined destroy of DynamicViewListItem((uint64_t)v63);
              outlined destroy of DynamicViewListItem((uint64_t)v65);
              if (v12 != *v8)
              {
                specialized MutableCollection.swapAt(_:_:)(*v8, v12);
                *uint64_t v9 = 1;
              }
              swift_beginAccess();
              outlined assign with copy of DynamicViewListItem(v15, v52);
              swift_endAccess();
              swift_beginAccess();
              if (*(unsigned char *)(v28 + 84) == 1)
              {
                swift_release();
                goto LABEL_9;
              }
              specialized DynamicContainerInfo.unremoveItem(at:)(*v8);
              swift_release();
              goto LABEL_8;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v9 = a5;
          char v8 = a2;
          unint64_t v14 = a8;
          uint64_t v10 = a4;
          uint64_t v15 = a1;
          int64_t v13 = v59;
        }
      }
      goto LABEL_22;
    }
    if (*(unsigned char *)(v15 + 68))
    {
LABEL_21:
      outlined init with copy of DynamicViewListItem((uint64_t)v65, (uint64_t)v63);
      outlined init with copy of DynamicViewListItem(v15, (uint64_t)v61);
      goto LABEL_22;
    }
    uint64_t v52 = v28 + 88;
    int v29 = v66;
    int v30 = *(_DWORD *)(v15 + 64);
    outlined init with copy of DynamicViewListItem((uint64_t)v65, (uint64_t)v63);
    outlined init with copy of DynamicViewListItem(v15, (uint64_t)v61);
    BOOL v31 = v29 == v30;
    int64_t v13 = v59;
    if (v31) {
      goto LABEL_34;
    }
LABEL_22:
    ++v12;
    outlined destroy of DynamicViewListItem((uint64_t)v61);
    outlined destroy of DynamicViewListItem((uint64_t)v63);
    outlined destroy of DynamicViewListItem((uint64_t)v65);
    swift_beginAccess();
    swift_release();
    if (v12 == v13) {
      goto LABEL_3;
    }
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  uint64_t v22 = MEMORY[0x24C523D60]();
LABEL_13:
  double v23 = *(double *)(v22 + 64);
  unint64_t result = swift_release();
  if (v11 == v23)
  {
LABEL_19:
    ++*v8;
    return result;
  }
  unint64_t result = *v8;
  uint64_t v25 = *(void *)(v10 + 144);
  if ((v25 & 0xC000000000000001) != 0)
  {
    uint64_t v26 = MEMORY[0x24C523D60](result);
LABEL_18:
    *(double *)(v26 + 64) = v11;
    unint64_t result = swift_release();
    *uint64_t v9 = 1;
    goto LABEL_19;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v26 = swift_retain();
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of DynamicViewListItem(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for DynamicViewListItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = a2 + 16;
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  uint64_t v6 = v5;
  int v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(a1 + 16, v4, v6);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined destroy of DynamicViewListItem(uint64_t a1)
{
  return a1;
}

uint64_t destroy for DynamicViewListItem(uint64_t a1)
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);

  return swift_bridgeObjectRelease();
}

BOOL specialized static _ViewList_ID.Canonical.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v3)
  {
    if (!v4) {
      return 1;
    }
    goto LABEL_14;
  }
  if (!v4)
  {
    swift_retain();
LABEL_14:
    swift_release();
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  long long v5 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 104);
  swift_retain_n();
  uint64_t v6 = swift_retain();
  LOBYTE(v5) = v5(v6);
  swift_release_n();
  swift_release();
  return (v5 & 1) != 0;
}

uint64_t _AnyHashableBox.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    char v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

double specialized ViewTraitCollection.value<A>(for:defaultValue:)(uint64_t a1, double a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      uint64_t v5 = v11;
      uint64_t v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for ZIndexTraitKey) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return a2;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(double *__return_ptr, void, uint64_t, uint64_t))(v8 + 16))(&v13, MEMORY[0x263F8D538], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    return v13;
  }
  return a2;
}

unint64_t partial apply for specialized closure #1 in DynamicContainerInfo.updateItems(disableTransitions:)(uint64_t a1)
{
  return specialized closure #1 in DynamicContainerInfo.updateItems(disableTransitions:)(a1, *(unint64_t **)(v1 + 16), *(unint64_t **)(v1 + 24), *(void *)(v1 + 32), *(unsigned char **)(v1 + 40), *(void *)(v1 + 48), *(unsigned char *)(v1 + 56), *(unsigned char **)(v1 + 64));
}

uint64_t specialized DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(void *a1, int a2, int a3, char a4)
{
  uint64_t v5 = v4;
  char v10 = DynamicViewListItem.needsTransitions.getter();
  char v11 = v10;
  if ((a4 & 1) != 0 || (v10 & 1) == 0)
  {
    char v16 = 1;
LABEL_10:
    id v18 = (id)AGSubgraphGetGraph();
    uint64_t v19 = (void *)AGSubgraphCreate2();

    AGSubgraphAddChild();
    AGGraphClearUpdate();
    id v20 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    uint64_t v21 = specialized closure #3 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(v5, a1, a2, a3, v19, v16, v11 & 1);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    return v21;
  }
  uint64_t v12 = AGCreateWeakAttribute();
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v13 = (id)AGSubgraphGetCurrent();
    if (!v13) {
      goto LABEL_12;
    }
    unint64_t v14 = v13;
    id v15 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v15 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v12;
    GraphHost.continueTransaction(_:)((uint64_t)partial apply for closure #1 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:), v17);
    swift_release();
    swift_release();
    char v16 = 0;
    *(unsigned char *)(v5 + 204) = 1;
    goto LABEL_10;
  }
  __break(1u);
LABEL_12:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t DynamicViewListItem.needsTransitions.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain_n();
  char v2 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v1);
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v3 = one-time initialization token for opacity;
    swift_bridgeObjectRetain();
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v4 = swift_retain();
    uint64_t v5 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(v4, v1);
    swift_bridgeObjectRelease();
    uint64_t v6 = swift_release();
    char v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v6);
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      uint64_t v8 = 1;
      goto LABEL_9;
    }
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = 0;
LABEL_9:
  swift_release();
  return v8;
}

double static Transition.makeView(view:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  void (*v15)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  double result;
  int v17;
  uint64_t AssociatedTypeWitness;
  int v20;
  int v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  long long v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  long long v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  long long v49;
  uint64_t v50;
  uint64_t v51;
  long long v52;
  uint64_t v53;
  int v54;
  uint64_t v55;

  uint64_t v55 = *MEMORY[0x263EF8340];
  id v20 = *a1;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  int v11 = *((_DWORD *)a2 + 20);
  uint64_t v46 = *a2;
  uint64_t v48 = v8;
  uint64_t v49 = *(_OWORD *)(a2 + 3);
  int v50 = v9;
  uint64_t v51 = v10;
  uint64_t v52 = *(_OWORD *)(a2 + 7);
  uint64_t v53 = a2[9];
  uint64_t v47 = v7;
  uint64_t v54 = v11;
  uint64_t v12 = type metadata accessor for PlaceholderContentView();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.pushModifierBody<A>(_:body:)(v12, a3, a4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = DWORD2(v49);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v35 = v46;
  uint64_t v36 = v47;
  uint64_t v37 = v8;
  int v38 = v49;
  int v41 = v9;
  int v42 = v10;
  unint64_t v43 = v52;
  uint64_t v44 = v53;
  int v45 = v54;
  int v39 = 0;
  uint64_t v40 = HIDWORD(v49);
  uint64_t v21 = v20;
  long long v24 = v46;
  uint64_t v25 = v47;
  uint64_t v26 = v8;
  uint64_t v27 = v49;
  uint64_t v28 = 0;
  int v29 = HIDWORD(v49);
  int v30 = v9;
  BOOL v31 = v10;
  uint64_t v32 = v52;
  uint64_t v33 = v53;
  uint64_t v34 = v54;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  id v15 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                         + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(&v22, &v21, &v24, AssociatedTypeWitness, AssociatedConformanceWitness);
  int v39 = v17;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v22, (uint64_t)&v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a5 = v22;
  uint64_t result = v23;
  a5[1] = v23;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PlaceholderContentView<A>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return static PlaceholderContentView._makeView(view:inputs:)(a1, a2);
}

uint64_t static PlaceholderContentView._makeView(view:inputs:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = a1[2];
  int v7 = *((_DWORD *)a1 + 20);
  type metadata accessor for PlaceholderContentView();
  *(void *)&long long v10 = v4;
  DWORD2(v10) = v5;
  uint64_t v11 = v6;
  long long v8 = *(_OWORD *)(a1 + 5);
  long long v12 = *(_OWORD *)(a1 + 3);
  long long v13 = v8;
  long long v14 = *(_OWORD *)(a1 + 7);
  uint64_t v15 = a1[9];
  int v16 = v7;
  return static ViewModifierContentProvider.providerMakeView(view:inputs:)(&v10, a2);
}

BOOL TransitionBox.isIdentity.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return AssociatedTypeWitness == type metadata accessor for PlaceholderContentView();
}

uint64_t type metadata accessor for PlaceholderContentView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _ViewList_Group.applyNodes(from:style:transform:to:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a2;
  unint64_t v9 = *(void *)(*v5 + 16);
  uint64_t v16 = *v5 + 32;
  uint64_t v17 = *v5;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v11 = 0;
  if (v9) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v11 = v9;
  memset(v21, 0, 44);
  while (1)
  {
    outlined init with take of (list: ViewList, attribute: Attribute<ViewList>)?((uint64_t)v21, (uint64_t)&v22, &lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>)?, (void (*)(uint64_t))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>));
    uint64_t v12 = v23;
    if (!v23)
    {
      swift_bridgeObjectRelease();
      return v12 == 0;
    }
    uint64_t v13 = v24;
    outlined init with take of ScrollStateRequest(&v22, (uint64_t)v21);
    uint64_t v14 = *((void *)&v21[1] + 1);
    uint64_t v15 = *(void *)&v21[2];
    __swift_project_boxed_opaque_existential_1(v21, *((uint64_t *)&v21[1] + 1));
    uint64_t v20 = v8;
    if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 48))(a1, &v20, v13, a3, a4, a5, v14, v15) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      return v12 == 0;
    }
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    if (v11 == v9) {
      goto LABEL_2;
    }
LABEL_3:
    if (v11 >= *(void *)(v17 + 16)) {
      break;
    }
    outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v16 + 48 * v11++, (uint64_t)v21);
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>)()
{
  if (!lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>))
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewList>, (unint64_t *)&lazy cache variable for type metadata for ViewList, (uint64_t)&protocol descriptor for ViewList, MEMORY[0x263F28898]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>));
    }
  }
}

uint64_t outlined init with take of (list: ViewList, attribute: Attribute<ViewList>)?(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for (_ViewList_Elements, Int)?(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void type metadata accessor for (_ViewList_Elements, Int)?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined assign with copy of DynamicViewListItem(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t assignWithCopy for DynamicViewListItem(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v4;
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        unint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance ForEachList<A, B, C>(uint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized ForEachList.applyNodes(from:style:list:transform:to:)(a1, a2, a4, a5, a6, *v6) & 1;
}

uint64_t specialized ForEachList.applyNodes(from:style:list:transform:to:)(uint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8 = *a2;
  v7[2] = a6;
  v7[3] = a3;
  v7[4] = a4;
  _OWORD v7[5] = a5;
  return ForEachState.forEachItem(from:style:do:)(a1, &v8, (uint64_t (*)(uint64_t *, void *, uint64_t))partial apply for closure #1 in ForEachState.applyNodes(from:style:list:transform:to:), (uint64_t)v7) & 1;
}

void (*protocol witness for Collection.subscript.read in conformance DynamicViewList<A>.WrappedIDs(void *a1, uint64_t *a2))(void *a1)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  v5[4] = DynamicViewList.WrappedIDs.subscript.read((uint64_t)v5, *a2, *v2);
  return protocol witness for Collection.subscript.read in conformance ArrayWith2Inline<A>;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3, char *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<Attribute<ViewList>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<Attribute<Transaction>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.FlatPath.Element>, (uint64_t)&type metadata for Text.Effect.FlatPath.Element);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<EventSourceType>, (uint64_t)&type metadata for EventSourceType);
}

unint64_t lazy protocol witness table accessor for type _ViewList_Group.Init and conformance _ViewList_Group.Init()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewList_Group.Init and conformance _ViewList_Group.Init;
  if (!lazy protocol witness table cache variable for type _ViewList_Group.Init and conformance _ViewList_Group.Init)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_Group.Init and conformance _ViewList_Group.Init);
  }
  return result;
}

void ArraySlice.subscript.readspecialized (void *a1)
{
  uint64_t v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);

  free(v1);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance _ViewList_ID.ElementCollection(uint64_t (*result)(), uint64_t *a2))()
{
  uint64_t v3 = *a2;
  if (*a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v3 <= 0x7FFFFFFF)
  {
    uint64_t v4 = result;
    int v5 = *(_DWORD *)(v2 + 4);
    uint64_t v6 = *(void *)(v2 + 8);
    *(_DWORD *)uint64_t v4 = v3;
    *((_DWORD *)v4 + 1) = v5;
    *((void *)v4 + 1) = v6;
    swift_bridgeObjectRetain();
    return destroy for HostPreferencesCombiner;
  }
  __break(1u);
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance ForEachState<A, B, C>.ForEachViewIDCollection(double **a1, uint64_t *a2, uint64_t a3))()
{
  uint64_t v6 = (double *)malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = ForEachState.ForEachViewIDCollection.subscript.read(v6, *a2, a3);
  return protocol witness for Collection.subscript.read in conformance UnsafeMutableBufferProjectionPointer<A, B>;
}

uint64_t (*ForEachState.ForEachViewIDCollection.subscript.read(double *a1, uint64_t a2, uint64_t a3))()
{
  return destroy for HostPreferencesCombiner;
}

double ForEachState.ForEachViewIDCollection.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v6 = a1;
  uint64_t v58 = *(void *)(a2 + 24);
  unint64_t v8 = *(void **)(v58 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = *(void *)(v11 + 40);
  uint64_t v12 = *(void *)(*(void *)(v57 + 8) + 8);
  uint64_t v13 = *(void *)(v11 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19.n128_f64[0] = MEMORY[0x270FA5388](v17);
  unint64_t v59 = (char *)&v46 - v20;
  uint64_t v21 = *(void *)(v4 + *(int *)(a2 + 88));
  if (!v21)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v6 == 0x8000000000000000 && v21 == -1) {
    goto LABEL_19;
  }
  uint64_t v22 = v6 / v21 * v21;
  if ((unsigned __int128)(v6 / v21 * (__int128)v21) >> 64 != v22 >> 63) {
    goto LABEL_17;
  }
  if (__OFSUB__(v6, v22))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    goto LABEL_12;
  }
  uint64_t v47 = v10;
  uint64_t v48 = v8;
  int v56 = a3;
  uint64_t v23 = v18;
  uint64_t v24 = v6 / v21;
  (*(void (**)(double *__return_ptr, uint64_t, __n128))(**(void **)v4 + 96))(&v68, v6 % v21, v19);
  uint64_t v25 = v4 + *(int *)(a2 + 68);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v49 = v12;
  uint64_t v26 = v59;
  uint64_t v52 = v24;
  uint64_t v46 = v25;
  uint64_t v27 = v57;
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v54 = v23 + 8;
  uint64_t v55 = AssociatedTypeWitness;
  uint64_t v53 = v28;
  uint64_t v29 = ((uint64_t (*)(char *, uint64_t))v28)(v16, AssociatedTypeWitness);
  uint64_t v51 = &v46;
  uint64_t v65 = *(void *)(v4 + *(int *)(a2 + 76));
  MEMORY[0x270FA5388](v29);
  uint64_t v30 = v58;
  *(&v46 - 8) = v13;
  *(&v46 - 7) = v30;
  uint64_t v31 = *(void *)(a2 + 32);
  *(&v46 - 6) = v31;
  *(&v46 - 5) = v27;
  long long v50 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)&v46 - 2) = v50;
  *(&v46 - 2) = v4;
  *(&v46 - 1) = (uint64_t)v26;
  swift_getAssociatedTypeWitness();
  uint64_t v32 = MEMORY[0x263F8D6C8];
  type metadata accessor for KeyPath();
  type metadata accessor for Optional();
  swift_retain();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ForEachState.ForEachViewIDCollection.subscript.getter, (uint64_t)(&v46 - 10), MEMORY[0x263F8E628], v32, v33, (uint64_t)&v66);
  swift_release();
  if (v67) {
    uint64_t v12 = v31;
  }
  else {
    uint64_t v12 = v66;
  }
  uint64_t v34 = *(void *)(v4 + *(int *)(a2 + 72));
  uint64_t v60 = v13;
  uint64_t v61 = v30;
  uint64_t v62 = v31;
  uint64_t v63 = v27;
  uint64_t v64 = v50;
  uint64_t v35 = type metadata accessor for ForEach.IDGenerator();
  if (v34)
  {
    uint64_t v60 = v34;
    uint64_t v36 = (uint64_t)v47;
    uint64_t v37 = v59;
    ForEach.IDGenerator.makeID(data:index:offset:)(v52, v35, (uint64_t)v47);
    _ViewList_ID.bind<A>(explicitID:owner:isUnary:reuseID:)(v36, *(_DWORD *)(v4 + *(int *)(a2 + 84)), *(unsigned char *)(v4 + *(int *)(a2 + 80)), v12);
    ((void (*)(uint64_t, uint64_t))v48[1])(v36, v30);
    uint64_t v38 = v55;
    int v39 = v37;
    goto LABEL_15;
  }
  LODWORD(a3) = *(_DWORD *)(v4 + *(int *)(a2 + 84));
  LOBYTE(v16) = *(unsigned char *)(v4 + *(int *)(a2 + 80));
  type metadata accessor for _AnyHashableBox<Pair<Int, AGAttribute>>();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v52;
  *(_DWORD *)(v6 + 24) = a3;
  unint64_t v8 = v69;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_20;
  }
LABEL_12:
  uint64_t v38 = v55;
  unint64_t v41 = v8[2];
  unint64_t v40 = v8[3];
  if (v41 >= v40 >> 1) {
    unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v41 + 1, 1, v8);
  }
  v8[2] = v41 + 1;
  int v42 = &v8[3 * v41];
  v42[4] = v6;
  v42[5] = v12;
  *((_DWORD *)v42 + 12) = a3;
  *((unsigned char *)v42 + 52) = (_BYTE)v16;
  swift_release();
  long long v69 = v8;
  int v39 = v59;
LABEL_15:
  v53(v39, v38);
  unint64_t v43 = v69;
  double result = v68;
  int v45 = v56;
  *int v56 = v68;
  *((void *)v45 + 1) = v43;
  return result;
}

BOOL partial apply for closure #1 in closure #1 in _VariadicView_Children.subscript.getter(uint64_t *a1)
{
  return closure #1 in closure #1 in _VariadicView_Children.subscript.getter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t closure #1 in CanvasSymbols.updateValue()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  uint64_t v6 = *(unsigned int *)(a1 + 20);
  uint64_t v8 = *(void *)(a1 + 24);
  if (*(void *)(v8 + 16))
  {
    uint64_t v9 = *(void *)(v8 + 32);
    int v10 = *(unsigned __int8 *)(v8 + 52);
    swift_retain();
    if (v10) {
      uint64_t v6 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v6 = v6;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v11 = *(void *)(a2 + 104);
  if (!*(void *)(v11 + 16))
  {
    unint64_t v12 = v7 | (v6 << 32);
LABEL_16:
    id v36 = (id)AGSubgraphGetGraph();
    uint64_t v37 = (void *)AGSubgraphCreate();

    AGSubgraphAddChild();
    AGGraphClearUpdate();
    id v38 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in closure #1 in CanvasSymbols.updateValue()(a2, (void *)a1, v37, v12, v9, a3);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    swift_release();

    return 1;
  }
  unint64_t v12 = v7 | (v6 << 32);
  swift_retain();
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v9);
  if ((v14 & 1) == 0)
  {
    swift_release();
    goto LABEL_16;
  }
  uint64_t v44 = a3;
  uint64_t v15 = *(void *)(v11 + 56) + 48 * v13;
  uint64_t v16 = *(void **)v15;
  uint64_t v17 = *(void *)(v15 + 8);
  int v18 = *(_DWORD *)(v15 + 16);
  uint64_t v19 = *(void *)(v15 + 32);
  uint64_t v20 = *(void *)(v15 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v43 = v20;
  swift_retain();
  id v21 = v16;
  swift_release();
  int v22 = *(_DWORD *)(a2 + 112);
  if (v18 != v22)
  {
    uint64_t v23 = *(void *)(a1 + 72);
    id v24 = v21;
    swift_retain_n();
    swift_retain_n();
    id v25 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)&long long v46 = v25;
    *((void *)&v46 + 1) = v17;
    LODWORD(v47) = v22;
    *((void *)&v47 + 1) = v23;
    *(void *)&long long v48 = v19;
    *((void *)&v48 + 1) = v43;
    swift_retain();
    id v26 = v25;
    swift_retain();
    swift_bridgeObjectRetain();

    swift_release();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v45 = *(void *)(a2 + 104);
    *(void *)(a2 + 104) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v46, v7 | (v6 << 32), v9, isUniquelyReferenced_nonNull_native);
    *(void *)(a2 + 104) = v45;
    swift_release();
    swift_bridgeObjectRelease();
    id v28 = v26;
    swift_retain();
    swift_bridgeObjectRetain();

    swift_release();
    uint64_t v29 = (void *)*v44;
    char v30 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v44 = (uint64_t)v29;
    if ((v30 & 1) == 0)
    {
      uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
      *uint64_t v44 = (uint64_t)v29;
    }
    unint64_t v32 = v29[2];
    unint64_t v31 = v29[3];
    if (v32 >= v31 >> 1)
    {
      uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v29);
      *uint64_t v44 = (uint64_t)v29;
    }
    _OWORD v29[2] = v32 + 1;
    uint64_t v33 = &v29[6 * v32];
    long long v34 = v46;
    long long v35 = v48;
    v33[3] = v47;
    v33[4] = v35;
    _OWORD v33[2] = v34;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    return 1;
  }
  id v40 = v21;
  swift_retain_n();
  swift_retain_n();
  id v41 = v40;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = _ViewList_ID.Canonical.description.getter();
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in CanvasSymbols.updateValue()(uint64_t a1)
{
  return closure #1 in CanvasSymbols.updateValue()(a1, *(void *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

unint64_t specialized MutableCollection.swapAt(_:_:)(unint64_t a1, unint64_t a2)
{
  return specialized MutableCollection.swapAt(_:_:)(a1, a2, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

unint64_t specialized MutableCollection.swapAt(_:_:)(unint64_t result, unint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (result == a2) {
    return result;
  }
  unint64_t v6 = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0xC000000000000001) == 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      unint64_t v8 = *(void *)(v7 + 8 * result + 32);
      uint64_t result = swift_retain();
      if ((v7 & 0xC000000000000001) == 0) {
        goto LABEL_6;
      }
LABEL_23:
      uint64_t v9 = MEMORY[0x24C523D60](a2, v7);
      uint64_t v7 = *v3;
      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_26;
  }
  uint64_t result = MEMORY[0x24C523D60](result, *v3);
  unint64_t v8 = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0xC000000000000001) != 0) {
    goto LABEL_23;
  }
LABEL_6:
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v9 = *(void *)(v7 + 8 * a2 + 32);
  swift_retain();
LABEL_9:
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v7;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v7 < 0 || (v7 & 0x4000000000000000) != 0)
  {
    uint64_t v7 = a3(v7);
    *uint64_t v3 = v7;
  }
  *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v9;
  swift_release();
  specialized Array._endMutation()();
  unint64_t v11 = *v3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v11;
  if (!result || (v11 & 0x8000000000000000) != 0 || (v11 & 0x4000000000000000) != 0)
  {
    uint64_t result = a3(v11);
    unint64_t v11 = result;
    *uint64_t v3 = result;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_28;
  }
  if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
  {
LABEL_29:
    __break(1u);
    return result;
  }
  *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 8 * a2 + 0x20) = v8;
  swift_release();

  return specialized Array._endMutation()();
}

void type metadata accessor for _AnyHashableBox<Pair<Int, AGAttribute>>()
{
  if (!lazy cache variable for type metadata for _AnyHashableBox<Pair<Int, AGAttribute>>)
  {
    type metadata accessor for Pair<Int, AGAttribute>();
    lazy protocol witness table accessor for type Pair<Int, AGAttribute> and conformance <> Pair<A, B>();
    unint64_t v0 = type metadata accessor for _AnyHashableBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnyHashableBox<Pair<Int, AGAttribute>>);
    }
  }
}

uint64_t partial apply for closure #1 in closure #1 in _ViewList_Backing.visitViews<A>(applying:from:)(uint64_t a1)
{
  return closure #1 in closure #1 in _ViewList_Backing.visitViews<A>(applying:from:)(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t closure #1 in closure #1 in _ViewList_Backing.visitViews<A>(applying:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)result;
  uint64_t v6 = *(void *)(result + 8);
  if (*(void *)result >= v6) {
    return 1;
  }
  uint64_t v7 = a5;
  uint64_t v8 = result;
  uint64_t v19 = *(uint64_t (**)(unsigned char *, void *, uint64_t, uint64_t))(a5 + 8);
  uint64_t v20 = result + 32;
  uint64_t v23 = result;
  while (v5 < v6)
  {
    outlined init with copy of AnyTrackedValue(v20, (uint64_t)v31);
    uint64_t v9 = *(void *)(v8 + 24);
    int v10 = *(void **)(a2 + 40);
    uint64_t v25 = 0;
    id v30 = 0;
    uint64_t v11 = *(void *)(v23 + 16);
    outlined init with copy of AnyTrackedValue((uint64_t)v31, (uint64_t)v24);
    uint64_t v13 = v32;
    uint64_t v12 = v33;
    __swift_project_boxed_opaque_existential_1(v31, v32);
    uint64_t v14 = v7;
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 32);
    swift_bridgeObjectRetain();
    id v16 = v10;
    uint64_t v17 = v15(v13, v12);
    uint64_t v7 = v14;
    uint64_t v25 = v17;
    uint64_t v26 = v11;
    uint64_t v27 = v9;
    uint64_t v28 = v5;
    uint64_t v29 = v6;
    id v30 = v16;
    uint64_t v8 = v23;
    outlined init with copy of _ViewList_View((uint64_t)v24, (uint64_t)v34);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    outlined destroy of _ViewList_View((uint64_t)v24);
    v24[0] = *(void *)(v23 + 72);
    char v18 = v19(v34, v24, a4, v14);
    uint64_t result = outlined destroy of _ViewList_View((uint64_t)v34);
    if ((v18 & 1) == 0) {
      return 0;
    }
    if (v6 == ++v5) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t EnvironmentValues.plist.setter(uint64_t result)
{
  uint64_t v2 = result;
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = *(void *)(v3 + 64);
    if (!result)
    {
      if (!v4) {
        return result;
      }
      goto LABEL_11;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v4 = 0;
  }
  if (v4 != *(void *)(result + 64))
  {
LABEL_11:
    if (v1[1])
    {
      swift_retain();
      PropertyList.Tracker.invalidateAllValues(from:to:)(v3, v2);
      swift_release();
    }
    uint64_t result = swift_release();
    *uint64_t v1 = v2;
    return result;
  }

  return swift_release();
}

uint64_t concatenate<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v16 + 16))(v15, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, a4);
  return ConcatenatedCollection.init(_base1:base2:)((uint64_t)v15, (uint64_t)v11, a3, a4, a5);
}

uint64_t ConcatenatedCollection.init(_base1:base2:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for ConcatenatedCollection();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t type metadata accessor for ConcatenatedCollection()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in SizeAndSpacingContext.update<A>(_:)()
{
  return closure #1 in SizeAndSpacingContext.update<A>(_:)(*(void *)(v0 + 24), *(void (**)(double))(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 16));
}

uint64_t static ProposedViewSize.unspecified.getter()
{
  return 0;
}

uint64_t ViewGraph.$defaultLayoutComputer.getter()
{
  return *(unsigned int *)(v0 + 320);
}

uint64_t specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v54 = *(_OWORD *)(a2 + 16);
  long long v55 = v5;
  long long v53 = *(_OWORD *)a2;
  int v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    unsigned int v7 = a1;
    swift_beginAccess();
    unsigned int v8 = *MEMORY[0x263F288F8];
    *(void *)&long long v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<_PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<_PaddingLayout> and conformance UnaryLayoutComputer<A>();
    unsigned int v9 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v10 = *(void *)a2;
    int v39 = *(_DWORD *)(a2 + 8);
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v12 = *(void *)(a2 + 24);
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v44 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    int v15 = *(_DWORD *)(a2 + 64);
    int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    int v40 = *(_DWORD *)(a2 + 68);
    uint64_t v17 = *(void *)(a2 + 76);
    unsigned int v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      int v37 = *(_DWORD *)(a2 + 36);
      int v36 = *(_DWORD *)(a2 + 32);
      uint64_t v38 = *(void *)(a2 + 40);
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)a2;
      unsigned int v25 = v9;
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((void *)&v48 + 1) = __PAIR64__(v8, v25);
      uint64_t v10 = v24;
      uint64_t v11 = v23;
      uint64_t v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<_PaddingLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      int v15 = Attribute.init<A>(body:value:flags:update:)();
      int v18 = v36 | 0x18;
      int v19 = v37 | 2;
    }
    else
    {
      int v18 = v55;
      outlined retain of _ViewInputs(a2);
      int v19 = v6;
    }
    *(void *)&long long v48 = v10;
    DWORD2(v48) = v39;
    *(void *)&long long v49 = v11;
    *((void *)&v49 + 1) = v12;
    *(void *)&long long v50 = __PAIR64__(v19, v18);
    *((void *)&v50 + 1) = v13;
    *(void *)&long long v51 = v44;
    *((void *)&v51 + 1) = v14;
    *(_DWORD *)uint64_t v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(void *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v28 = swift_release();
    uint64_t v29 = v45;
    int v30 = v46;
    unsigned int v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x270FA5388](v28);
      MEMORY[0x270FA5388](v32);
      uint64_t v33 = AGGraphMutateAttribute();
      MEMORY[0x270FA5388](v33);
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x270FA5388](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    unsigned int v35 = v43;
    if ((v6 & 2) == 0) {
      unsigned int v35 = v31;
    }
    *(void *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 48);
    long long v50 = *(_OWORD *)(a2 + 32);
    long long v51 = v20;
    *(_OWORD *)uint64_t v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    long long v21 = *(_OWORD *)(a2 + 16);
    long long v48 = *(_OWORD *)a2;
    long long v49 = v21;
    return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v48);
  }
  return result;
}

{
  long long v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  long long v20;
  long long v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  unsigned char v52[20];
  long long v53;
  long long v54;
  long long v55;
  uint64_t v56;

  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v54 = *(_OWORD *)(a2 + 16);
  long long v55 = v5;
  long long v53 = *(_OWORD *)a2;
  int v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    unsigned int v7 = a1;
    swift_beginAccess();
    unsigned int v8 = *MEMORY[0x263F288F8];
    *(void *)&long long v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<_FrameLayout> and conformance UnaryLayoutComputer<A>();
    unsigned int v9 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v10 = *(void *)a2;
    int v39 = *(_DWORD *)(a2 + 8);
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v12 = *(void *)(a2 + 24);
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v44 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    int v15 = *(_DWORD *)(a2 + 64);
    int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    int v40 = *(_DWORD *)(a2 + 68);
    uint64_t v17 = *(void *)(a2 + 76);
    unsigned int v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      int v37 = *(_DWORD *)(a2 + 36);
      int v36 = *(_DWORD *)(a2 + 32);
      uint64_t v38 = *(void *)(a2 + 40);
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)a2;
      unsigned int v25 = v9;
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((void *)&v48 + 1) = __PAIR64__(v8, v25);
      uint64_t v10 = v24;
      uint64_t v11 = v23;
      uint64_t v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<_FrameLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      int v15 = Attribute.init<A>(body:value:flags:update:)();
      int v18 = v36 | 0x18;
      int v19 = v37 | 2;
    }
    else
    {
      int v18 = v55;
      outlined retain of _ViewInputs(a2);
      int v19 = v6;
    }
    *(void *)&long long v48 = v10;
    DWORD2(v48) = v39;
    *(void *)&long long v49 = v11;
    *((void *)&v49 + 1) = v12;
    *(void *)&long long v50 = __PAIR64__(v19, v18);
    *((void *)&v50 + 1) = v13;
    *(void *)&long long v51 = v44;
    *((void *)&v51 + 1) = v14;
    *(_DWORD *)uint64_t v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(void *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v28 = swift_release();
    uint64_t v29 = v45;
    int v30 = v46;
    unsigned int v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x270FA5388](v28);
      MEMORY[0x270FA5388](v32);
      uint64_t v33 = AGGraphMutateAttribute();
      MEMORY[0x270FA5388](v33);
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x270FA5388](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    unsigned int v35 = v43;
    if ((v6 & 2) == 0) {
      unsigned int v35 = v31;
    }
    *(void *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 48);
    long long v50 = *(_OWORD *)(a2 + 32);
    long long v51 = v20;
    *(_OWORD *)uint64_t v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    long long v21 = *(_OWORD *)(a2 + 16);
    long long v48 = *(_OWORD *)a2;
    long long v49 = v21;
    return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v48);
  }
  return result;
}

{
  long long v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  long long v20;
  long long v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  unsigned char v52[20];
  long long v53;
  long long v54;
  long long v55;
  uint64_t v56;

  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v54 = *(_OWORD *)(a2 + 16);
  long long v55 = v5;
  long long v53 = *(_OWORD *)a2;
  int v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    unsigned int v7 = a1;
    swift_beginAccess();
    unsigned int v8 = *MEMORY[0x263F288F8];
    *(void *)&long long v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<_FlexFrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<_FlexFrameLayout> and conformance UnaryLayoutComputer<A>();
    unsigned int v9 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v10 = *(void *)a2;
    int v39 = *(_DWORD *)(a2 + 8);
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v12 = *(void *)(a2 + 24);
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v44 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    int v15 = *(_DWORD *)(a2 + 64);
    int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    int v40 = *(_DWORD *)(a2 + 68);
    uint64_t v17 = *(void *)(a2 + 76);
    unsigned int v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      int v37 = *(_DWORD *)(a2 + 36);
      int v36 = *(_DWORD *)(a2 + 32);
      uint64_t v38 = *(void *)(a2 + 40);
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)a2;
      unsigned int v25 = v9;
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((void *)&v48 + 1) = __PAIR64__(v8, v25);
      uint64_t v10 = v24;
      uint64_t v11 = v23;
      uint64_t v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_FlexFrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<_FlexFrameLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      int v15 = Attribute.init<A>(body:value:flags:update:)();
      int v18 = v36 | 0x18;
      int v19 = v37 | 2;
    }
    else
    {
      int v18 = v55;
      outlined retain of _ViewInputs(a2);
      int v19 = v6;
    }
    *(void *)&long long v48 = v10;
    DWORD2(v48) = v39;
    *(void *)&long long v49 = v11;
    *((void *)&v49 + 1) = v12;
    *(void *)&long long v50 = __PAIR64__(v19, v18);
    *((void *)&v50 + 1) = v13;
    *(void *)&long long v51 = v44;
    *((void *)&v51 + 1) = v14;
    *(_DWORD *)uint64_t v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(void *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v28 = swift_release();
    uint64_t v29 = v45;
    int v30 = v46;
    unsigned int v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x270FA5388](v28);
      MEMORY[0x270FA5388](v32);
      uint64_t v33 = AGGraphMutateAttribute();
      MEMORY[0x270FA5388](v33);
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_FlexFrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x270FA5388](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    unsigned int v35 = v43;
    if ((v6 & 2) == 0) {
      unsigned int v35 = v31;
    }
    *(void *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 48);
    long long v50 = *(_OWORD *)(a2 + 32);
    long long v51 = v20;
    *(_OWORD *)uint64_t v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    long long v21 = *(_OWORD *)(a2 + 16);
    long long v48 = *(_OWORD *)a2;
    long long v49 = v21;
    return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v48);
  }
  return result;
}

{
  long long v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  long long v20;
  long long v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  unsigned char v52[20];
  long long v53;
  long long v54;
  long long v55;
  uint64_t v56;

  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v54 = *(_OWORD *)(a2 + 16);
  long long v55 = v5;
  long long v53 = *(_OWORD *)a2;
  int v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    unsigned int v7 = a1;
    swift_beginAccess();
    unsigned int v8 = *MEMORY[0x263F288F8];
    *(void *)&long long v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<_FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<_FixedSizeLayout> and conformance UnaryLayoutComputer<A>();
    unsigned int v9 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v10 = *(void *)a2;
    int v39 = *(_DWORD *)(a2 + 8);
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v12 = *(void *)(a2 + 24);
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v44 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    int v15 = *(_DWORD *)(a2 + 64);
    int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    int v40 = *(_DWORD *)(a2 + 68);
    uint64_t v17 = *(void *)(a2 + 76);
    unsigned int v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      int v37 = *(_DWORD *)(a2 + 36);
      int v36 = *(_DWORD *)(a2 + 32);
      uint64_t v38 = *(void *)(a2 + 40);
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)a2;
      unsigned int v25 = v9;
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((void *)&v48 + 1) = __PAIR64__(v8, v25);
      uint64_t v10 = v24;
      uint64_t v11 = v23;
      uint64_t v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<_FixedSizeLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      int v15 = Attribute.init<A>(body:value:flags:update:)();
      int v18 = v36 | 0x18;
      int v19 = v37 | 2;
    }
    else
    {
      int v18 = v55;
      outlined retain of _ViewInputs(a2);
      int v19 = v6;
    }
    *(void *)&long long v48 = v10;
    DWORD2(v48) = v39;
    *(void *)&long long v49 = v11;
    *((void *)&v49 + 1) = v12;
    *(void *)&long long v50 = __PAIR64__(v19, v18);
    *((void *)&v50 + 1) = v13;
    *(void *)&long long v51 = v44;
    *((void *)&v51 + 1) = v14;
    *(_DWORD *)uint64_t v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(void *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v28 = swift_release();
    uint64_t v29 = v45;
    int v30 = v46;
    unsigned int v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x270FA5388](v28);
      MEMORY[0x270FA5388](v32);
      uint64_t v33 = AGGraphMutateAttribute();
      MEMORY[0x270FA5388](v33);
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x270FA5388](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    unsigned int v35 = v43;
    if ((v6 & 2) == 0) {
      unsigned int v35 = v31;
    }
    *(void *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 48);
    long long v50 = *(_OWORD *)(a2 + 32);
    long long v51 = v20;
    *(_OWORD *)uint64_t v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    long long v21 = *(_OWORD *)(a2 + 16);
    long long v48 = *(_OWORD *)a2;
    long long v49 = v21;
    return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v48);
  }
  return result;
}

{
  long long v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  long long v20;
  long long v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  unsigned char v52[20];
  long long v53;
  long long v54;
  long long v55;
  uint64_t v56;

  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v54 = *(_OWORD *)(a2 + 16);
  long long v55 = v5;
  long long v53 = *(_OWORD *)a2;
  int v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    unsigned int v7 = a1;
    swift_beginAccess();
    unsigned int v8 = *MEMORY[0x263F288F8];
    *(void *)&long long v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<LayoutPriorityLayout> and conformance UnaryLayoutComputer<A>();
    unsigned int v9 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v10 = *(void *)a2;
    int v39 = *(_DWORD *)(a2 + 8);
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v12 = *(void *)(a2 + 24);
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v44 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    int v15 = *(_DWORD *)(a2 + 64);
    int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    int v40 = *(_DWORD *)(a2 + 68);
    uint64_t v17 = *(void *)(a2 + 76);
    unsigned int v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      int v37 = *(_DWORD *)(a2 + 36);
      int v36 = *(_DWORD *)(a2 + 32);
      uint64_t v38 = *(void *)(a2 + 40);
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)a2;
      unsigned int v25 = v9;
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((void *)&v48 + 1) = __PAIR64__(v8, v25);
      uint64_t v10 = v24;
      uint64_t v11 = v23;
      uint64_t v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<LayoutPriorityLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      int v15 = Attribute.init<A>(body:value:flags:update:)();
      int v18 = v36 | 0x18;
      int v19 = v37 | 2;
    }
    else
    {
      int v18 = v55;
      outlined retain of _ViewInputs(a2);
      int v19 = v6;
    }
    *(void *)&long long v48 = v10;
    DWORD2(v48) = v39;
    *(void *)&long long v49 = v11;
    *((void *)&v49 + 1) = v12;
    *(void *)&long long v50 = __PAIR64__(v19, v18);
    *((void *)&v50 + 1) = v13;
    *(void *)&long long v51 = v44;
    *((void *)&v51 + 1) = v14;
    *(_DWORD *)uint64_t v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(void *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v28 = swift_release();
    uint64_t v29 = v45;
    int v30 = v46;
    unsigned int v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x270FA5388](v28);
      MEMORY[0x270FA5388](v32);
      uint64_t v33 = AGGraphMutateAttribute();
      MEMORY[0x270FA5388](v33);
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x270FA5388](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    unsigned int v35 = v43;
    if ((v6 & 2) == 0) {
      unsigned int v35 = v31;
    }
    *(void *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 48);
    long long v50 = *(_OWORD *)(a2 + 32);
    long long v51 = v20;
    *(_OWORD *)uint64_t v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    long long v21 = *(_OWORD *)(a2 + 16);
    long long v48 = *(_OWORD *)a2;
    long long v49 = v21;
    return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v48);
  }
  return result;
}

{
  long long v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  long long v20;
  long long v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  unsigned char v52[20];
  long long v53;
  long long v54;
  long long v55;
  uint64_t v56;

  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v54 = *(_OWORD *)(a2 + 16);
  long long v55 = v5;
  long long v53 = *(_OWORD *)a2;
  int v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    unsigned int v7 = a1;
    swift_beginAccess();
    unsigned int v8 = *MEMORY[0x263F288F8];
    *(void *)&long long v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<LayoutPriorityLayout> and conformance UnaryLayoutComputer<A>();
    unsigned int v9 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v10 = *(void *)a2;
    int v39 = *(_DWORD *)(a2 + 8);
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v12 = *(void *)(a2 + 24);
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v44 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    int v15 = *(_DWORD *)(a2 + 64);
    int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    int v40 = *(_DWORD *)(a2 + 68);
    uint64_t v17 = *(void *)(a2 + 76);
    unsigned int v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      int v37 = *(_DWORD *)(a2 + 36);
      int v36 = *(_DWORD *)(a2 + 32);
      uint64_t v38 = *(void *)(a2 + 40);
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)a2;
      unsigned int v25 = v9;
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((void *)&v48 + 1) = __PAIR64__(v8, v25);
      uint64_t v10 = v24;
      uint64_t v11 = v23;
      uint64_t v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<LayoutPriorityLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      int v15 = Attribute.init<A>(body:value:flags:update:)();
      int v18 = v36 | 0x18;
      int v19 = v37 | 2;
    }
    else
    {
      int v18 = v55;
      outlined retain of _ViewInputs(a2);
      int v19 = v6;
    }
    *(void *)&long long v48 = v10;
    DWORD2(v48) = v39;
    *(void *)&long long v49 = v11;
    *((void *)&v49 + 1) = v12;
    *(void *)&long long v50 = __PAIR64__(v19, v18);
    *((void *)&v50 + 1) = v13;
    *(void *)&long long v51 = v44;
    *((void *)&v51 + 1) = v14;
    *(_DWORD *)uint64_t v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(void *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v28 = swift_release();
    uint64_t v29 = v45;
    int v30 = v46;
    unsigned int v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x270FA5388](v28);
      MEMORY[0x270FA5388](v32);
      uint64_t v33 = AGGraphMutateAttribute();
      MEMORY[0x270FA5388](v33);
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x270FA5388](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    unsigned int v35 = v43;
    if ((v6 & 2) == 0) {
      unsigned int v35 = v31;
    }
    *(void *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 48);
    long long v50 = *(_OWORD *)(a2 + 32);
    long long v51 = v20;
    *(_OWORD *)uint64_t v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    long long v21 = *(_OWORD *)(a2 + 16);
    long long v48 = *(_OWORD *)a2;
    long long v49 = v21;
    return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v48);
  }
  return result;
}

{
  long long v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  long long v20;
  long long v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  unsigned char v52[20];
  long long v53;
  long long v54;
  long long v55;
  uint64_t v56;

  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v54 = *(_OWORD *)(a2 + 16);
  long long v55 = v5;
  long long v53 = *(_OWORD *)a2;
  int v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    unsigned int v7 = a1;
    swift_beginAccess();
    unsigned int v8 = *MEMORY[0x263F288F8];
    *(void *)&long long v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<_AspectRatioLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<_AspectRatioLayout> and conformance UnaryLayoutComputer<A>();
    unsigned int v9 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v10 = *(void *)a2;
    int v39 = *(_DWORD *)(a2 + 8);
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v12 = *(void *)(a2 + 24);
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v44 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    int v15 = *(_DWORD *)(a2 + 64);
    int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    int v40 = *(_DWORD *)(a2 + 68);
    uint64_t v17 = *(void *)(a2 + 76);
    unsigned int v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      int v37 = *(_DWORD *)(a2 + 36);
      int v36 = *(_DWORD *)(a2 + 32);
      uint64_t v38 = *(void *)(a2 + 40);
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)a2;
      unsigned int v25 = v9;
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((void *)&v48 + 1) = __PAIR64__(v8, v25);
      uint64_t v10 = v24;
      uint64_t v11 = v23;
      uint64_t v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_AspectRatioLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<_AspectRatioLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      int v15 = Attribute.init<A>(body:value:flags:update:)();
      int v18 = v36 | 0x18;
      int v19 = v37 | 2;
    }
    else
    {
      int v18 = v55;
      outlined retain of _ViewInputs(a2);
      int v19 = v6;
    }
    *(void *)&long long v48 = v10;
    DWORD2(v48) = v39;
    *(void *)&long long v49 = v11;
    *((void *)&v49 + 1) = v12;
    *(void *)&long long v50 = __PAIR64__(v19, v18);
    *((void *)&v50 + 1) = v13;
    *(void *)&long long v51 = v44;
    *((void *)&v51 + 1) = v14;
    *(_DWORD *)uint64_t v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(void *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v28 = swift_release();
    uint64_t v29 = v45;
    int v30 = v46;
    unsigned int v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x270FA5388](v28);
      MEMORY[0x270FA5388](v32);
      uint64_t v33 = AGGraphMutateAttribute();
      MEMORY[0x270FA5388](v33);
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_AspectRatioLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x270FA5388](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    unsigned int v35 = v43;
    if ((v6 & 2) == 0) {
      unsigned int v35 = v31;
    }
    *(void *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 48);
    long long v50 = *(_OWORD *)(a2 + 32);
    long long v51 = v20;
    *(_OWORD *)uint64_t v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    long long v21 = *(_OWORD *)(a2 + 16);
    long long v48 = *(_OWORD *)a2;
    long long v49 = v21;
    return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v48);
  }
  return result;
}

{
  long long v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  long long v20;
  long long v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  unsigned char v52[20];
  long long v53;
  long long v54;
  long long v55;
  uint64_t v56;

  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v54 = *(_OWORD *)(a2 + 16);
  long long v55 = v5;
  long long v53 = *(_OWORD *)a2;
  int v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    unsigned int v7 = a1;
    swift_beginAccess();
    unsigned int v8 = *MEMORY[0x263F288F8];
    *(void *)&long long v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<SpacingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout, (uint64_t)&type metadata for SpacingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<SpacingLayout> and conformance UnaryLayoutComputer<A>();
    unsigned int v9 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v10 = *(void *)a2;
    int v39 = *(_DWORD *)(a2 + 8);
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v12 = *(void *)(a2 + 24);
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v44 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    int v15 = *(_DWORD *)(a2 + 64);
    int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    int v40 = *(_DWORD *)(a2 + 68);
    uint64_t v17 = *(void *)(a2 + 76);
    unsigned int v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      int v37 = *(_DWORD *)(a2 + 36);
      int v36 = *(_DWORD *)(a2 + 32);
      uint64_t v38 = *(void *)(a2 + 40);
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)a2;
      unsigned int v25 = v9;
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((void *)&v48 + 1) = __PAIR64__(v8, v25);
      uint64_t v10 = v24;
      uint64_t v11 = v23;
      uint64_t v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<SpacingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout, (uint64_t)&type metadata for SpacingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<SpacingLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      int v15 = Attribute.init<A>(body:value:flags:update:)();
      int v18 = v36 | 0x18;
      int v19 = v37 | 2;
    }
    else
    {
      int v18 = v55;
      outlined retain of _ViewInputs(a2);
      int v19 = v6;
    }
    *(void *)&long long v48 = v10;
    DWORD2(v48) = v39;
    *(void *)&long long v49 = v11;
    *((void *)&v49 + 1) = v12;
    *(void *)&long long v50 = __PAIR64__(v19, v18);
    *((void *)&v50 + 1) = v13;
    *(void *)&long long v51 = v44;
    *((void *)&v51 + 1) = v14;
    *(_DWORD *)uint64_t v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(void *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v28 = swift_release();
    uint64_t v29 = v45;
    int v30 = v46;
    unsigned int v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x270FA5388](v28);
      MEMORY[0x270FA5388](v32);
      uint64_t v33 = AGGraphMutateAttribute();
      MEMORY[0x270FA5388](v33);
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<SpacingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout, (uint64_t)&type metadata for SpacingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x270FA5388](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    unsigned int v35 = v43;
    if ((v6 & 2) == 0) {
      unsigned int v35 = v31;
    }
    *(void *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 48);
    long long v50 = *(_OWORD *)(a2 + 32);
    long long v51 = v20;
    *(_OWORD *)uint64_t v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    long long v21 = *(_OWORD *)(a2 + 16);
    long long v48 = *(_OWORD *)a2;
    long long v49 = v21;
    return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v48);
  }
  return result;
}

{
  long long v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  long long v20;
  long long v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  unsigned char v52[20];
  long long v53;
  long long v54;
  long long v55;
  uint64_t v56;

  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v54 = *(_OWORD *)(a2 + 16);
  long long v55 = v5;
  long long v53 = *(_OWORD *)a2;
  int v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    unsigned int v7 = a1;
    swift_beginAccess();
    unsigned int v8 = *MEMORY[0x263F288F8];
    *(void *)&long long v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<IgnoresAutomaticPaddingLayout> and conformance UnaryLayoutComputer<A>();
    unsigned int v9 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v10 = *(void *)a2;
    int v39 = *(_DWORD *)(a2 + 8);
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v12 = *(void *)(a2 + 24);
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v44 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    int v15 = *(_DWORD *)(a2 + 64);
    int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    int v40 = *(_DWORD *)(a2 + 68);
    uint64_t v17 = *(void *)(a2 + 76);
    unsigned int v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      int v37 = *(_DWORD *)(a2 + 36);
      int v36 = *(_DWORD *)(a2 + 32);
      uint64_t v38 = *(void *)(a2 + 40);
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)a2;
      unsigned int v25 = v9;
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((void *)&v48 + 1) = __PAIR64__(v8, v25);
      uint64_t v10 = v24;
      uint64_t v11 = v23;
      uint64_t v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<IgnoresAutomaticPaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<IgnoresAutomaticPaddingLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      int v15 = Attribute.init<A>(body:value:flags:update:)();
      int v18 = v36 | 0x18;
      int v19 = v37 | 2;
    }
    else
    {
      int v18 = v55;
      outlined retain of _ViewInputs(a2);
      int v19 = v6;
    }
    *(void *)&long long v48 = v10;
    DWORD2(v48) = v39;
    *(void *)&long long v49 = v11;
    *((void *)&v49 + 1) = v12;
    *(void *)&long long v50 = __PAIR64__(v19, v18);
    *((void *)&v50 + 1) = v13;
    *(void *)&long long v51 = v44;
    *((void *)&v51 + 1) = v14;
    *(_DWORD *)uint64_t v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(void *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v28 = swift_release();
    uint64_t v29 = v45;
    int v30 = v46;
    unsigned int v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x270FA5388](v28);
      MEMORY[0x270FA5388](v32);
      uint64_t v33 = AGGraphMutateAttribute();
      MEMORY[0x270FA5388](v33);
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<IgnoresAutomaticPaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x270FA5388](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    unsigned int v35 = v43;
    if ((v6 & 2) == 0) {
      unsigned int v35 = v31;
    }
    *(void *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 48);
    long long v50 = *(_OWORD *)(a2 + 32);
    long long v51 = v20;
    *(_OWORD *)uint64_t v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    long long v21 = *(_OWORD *)(a2 + 16);
    long long v48 = *(_OWORD *)a2;
    long long v49 = v21;
    return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v48);
  }
  return result;
}

{
  long long v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  long long v20;
  long long v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  unsigned char v52[20];
  long long v53;
  long long v54;
  long long v55;
  uint64_t v56;

  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v54 = *(_OWORD *)(a2 + 16);
  long long v55 = v5;
  long long v53 = *(_OWORD *)a2;
  int v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    unsigned int v7 = a1;
    swift_beginAccess();
    unsigned int v8 = *MEMORY[0x263F288F8];
    *(void *)&long long v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryLayoutComputer<A>();
    unsigned int v9 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v10 = *(void *)a2;
    int v39 = *(_DWORD *)(a2 + 8);
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v12 = *(void *)(a2 + 24);
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v44 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    int v15 = *(_DWORD *)(a2 + 64);
    int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    int v40 = *(_DWORD *)(a2 + 68);
    uint64_t v17 = *(void *)(a2 + 76);
    unsigned int v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      int v37 = *(_DWORD *)(a2 + 36);
      int v36 = *(_DWORD *)(a2 + 32);
      uint64_t v38 = *(void *)(a2 + 40);
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)a2;
      unsigned int v25 = v9;
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((void *)&v48 + 1) = __PAIR64__(v8, v25);
      uint64_t v10 = v24;
      uint64_t v11 = v23;
      uint64_t v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      int v15 = Attribute.init<A>(body:value:flags:update:)();
      int v18 = v36 | 0x18;
      int v19 = v37 | 2;
    }
    else
    {
      int v18 = v55;
      outlined retain of _ViewInputs(a2);
      int v19 = v6;
    }
    *(void *)&long long v48 = v10;
    DWORD2(v48) = v39;
    *(void *)&long long v49 = v11;
    *((void *)&v49 + 1) = v12;
    *(void *)&long long v50 = __PAIR64__(v19, v18);
    *((void *)&v50 + 1) = v13;
    *(void *)&long long v51 = v44;
    *((void *)&v51 + 1) = v14;
    *(_DWORD *)uint64_t v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(void *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v28 = swift_release();
    uint64_t v29 = v45;
    int v30 = v46;
    unsigned int v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x270FA5388](v28);
      MEMORY[0x270FA5388](v32);
      uint64_t v33 = AGGraphMutateAttribute();
      MEMORY[0x270FA5388](v33);
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x270FA5388](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    unsigned int v35 = v43;
    if ((v6 & 2) == 0) {
      unsigned int v35 = v31;
    }
    *(void *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 48);
    long long v50 = *(_OWORD *)(a2 + 32);
    long long v51 = v20;
    *(_OWORD *)uint64_t v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    long long v21 = *(_OWORD *)(a2 + 16);
    long long v48 = *(_OWORD *)a2;
    long long v49 = v21;
    return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v48);
  }
  return result;
}

{
  long long v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  long long v20;
  long long v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  unsigned char v52[20];
  long long v53;
  long long v54;
  long long v55;
  uint64_t v56;

  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v54 = *(_OWORD *)(a2 + 16);
  long long v55 = v5;
  long long v53 = *(_OWORD *)a2;
  int v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    unsigned int v7 = a1;
    swift_beginAccess();
    unsigned int v8 = *MEMORY[0x263F288F8];
    *(void *)&long long v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<MoveTransition.MoveLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<MoveTransition.MoveLayout> and conformance UnaryLayoutComputer<A>();
    unsigned int v9 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v10 = *(void *)a2;
    int v39 = *(_DWORD *)(a2 + 8);
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v12 = *(void *)(a2 + 24);
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v44 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    int v15 = *(_DWORD *)(a2 + 64);
    int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    int v40 = *(_DWORD *)(a2 + 68);
    uint64_t v17 = *(void *)(a2 + 76);
    unsigned int v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      int v37 = *(_DWORD *)(a2 + 36);
      int v36 = *(_DWORD *)(a2 + 32);
      uint64_t v38 = *(void *)(a2 + 40);
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)a2;
      unsigned int v25 = v9;
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((void *)&v48 + 1) = __PAIR64__(v8, v25);
      uint64_t v10 = v24;
      uint64_t v11 = v23;
      uint64_t v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<MoveTransition.MoveLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<MoveTransition.MoveLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      int v15 = Attribute.init<A>(body:value:flags:update:)();
      int v18 = v36 | 0x18;
      int v19 = v37 | 2;
    }
    else
    {
      int v18 = v55;
      outlined retain of _ViewInputs(a2);
      int v19 = v6;
    }
    *(void *)&long long v48 = v10;
    DWORD2(v48) = v39;
    *(void *)&long long v49 = v11;
    *((void *)&v49 + 1) = v12;
    *(void *)&long long v50 = __PAIR64__(v19, v18);
    *((void *)&v50 + 1) = v13;
    *(void *)&long long v51 = v44;
    *((void *)&v51 + 1) = v14;
    *(_DWORD *)uint64_t v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(void *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v28 = swift_release();
    uint64_t v29 = v45;
    int v30 = v46;
    unsigned int v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x270FA5388](v28);
      MEMORY[0x270FA5388](v32);
      uint64_t v33 = AGGraphMutateAttribute();
      MEMORY[0x270FA5388](v33);
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<MoveTransition.MoveLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x270FA5388](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    unsigned int v35 = v43;
    if ((v6 & 2) == 0) {
      unsigned int v35 = v31;
    }
    *(void *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 48);
    long long v50 = *(_OWORD *)(a2 + 32);
    long long v51 = v20;
    *(_OWORD *)uint64_t v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    long long v21 = *(_OWORD *)(a2 + 16);
    long long v48 = *(_OWORD *)a2;
    long long v49 = v21;
    return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v48);
  }
  return result;
}

{
  long long v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  long long v20;
  long long v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  unsigned char v52[20];
  long long v53;
  long long v54;
  long long v55;
  uint64_t v56;

  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v54 = *(_OWORD *)(a2 + 16);
  long long v55 = v5;
  long long v53 = *(_OWORD *)a2;
  int v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    unsigned int v7 = a1;
    swift_beginAccess();
    unsigned int v8 = *MEMORY[0x263F288F8];
    *(void *)&long long v48 = __PAIR64__(*(_DWORD *)(v54 + 16), v7);
    DWORD2(v48) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<_AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<_AlignmentLayout> and conformance UnaryLayoutComputer<A>();
    unsigned int v9 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v10 = *(void *)a2;
    int v39 = *(_DWORD *)(a2 + 8);
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v12 = *(void *)(a2 + 24);
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v44 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    int v15 = *(_DWORD *)(a2 + 64);
    int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    int v40 = *(_DWORD *)(a2 + 68);
    uint64_t v17 = *(void *)(a2 + 76);
    unsigned int v43 = v9;
    if ((v6 & 0x20) != 0)
    {
      int v37 = *(_DWORD *)(a2 + 36);
      int v36 = *(_DWORD *)(a2 + 32);
      uint64_t v38 = *(void *)(a2 + 40);
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)a2;
      unsigned int v25 = v9;
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      *((void *)&v48 + 1) = __PAIR64__(v8, v25);
      uint64_t v10 = v24;
      uint64_t v11 = v23;
      uint64_t v13 = v38;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<_AlignmentLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v48) = v15;
      DWORD1(v48) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      int v15 = Attribute.init<A>(body:value:flags:update:)();
      int v18 = v36 | 0x18;
      int v19 = v37 | 2;
    }
    else
    {
      int v18 = v55;
      outlined retain of _ViewInputs(a2);
      int v19 = v6;
    }
    *(void *)&long long v48 = v10;
    DWORD2(v48) = v39;
    *(void *)&long long v49 = v11;
    *((void *)&v49 + 1) = v12;
    *(void *)&long long v50 = __PAIR64__(v19, v18);
    *((void *)&v50 + 1) = v13;
    *(void *)&long long v51 = v44;
    *((void *)&v51 + 1) = v14;
    *(_DWORD *)uint64_t v52 = v15;
    *(_DWORD *)&v52[4] = v40;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(void *)&v52[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v27 = swift_bridgeObjectRetain();
    a3(&v45, v27, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v28 = swift_release();
    uint64_t v29 = v45;
    int v30 = v46;
    unsigned int v31 = v47;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x270FA5388](v28);
      MEMORY[0x270FA5388](v32);
      uint64_t v33 = AGGraphMutateAttribute();
      MEMORY[0x270FA5388](v33);
      type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryChildGeometry<_AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x270FA5388](v34);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    unsigned int v35 = v43;
    if ((v6 & 2) == 0) {
      unsigned int v35 = v31;
    }
    *(void *)a4 = v29;
    *(_DWORD *)(a4 + 8) = v30 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v35;
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 48);
    long long v50 = *(_OWORD *)(a2 + 32);
    long long v51 = v20;
    *(_OWORD *)uint64_t v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    long long v21 = *(_OWORD *)(a2 + 16);
    long long v48 = *(_OWORD *)a2;
    long long v49 = v21;
    return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v48);
  }
  return result;
}

void type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t specialized CachedEnvironment.attribute<A>(keyPath:)(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = v3[2];
  if (v4)
  {
    type metadata accessor for AnyKeyPath();
    uint64_t v5 = v3[4];
    uint64_t v6 = *((unsigned int *)v3 + 10);
    swift_retain_n();
    swift_bridgeObjectRetain();
    char v7 = MEMORY[0x24C523A30](v5, a1);
    swift_release();
    if (v7)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_release();
      return v6;
    }
    swift_release();
    if (v4 != 1)
    {
      unsigned int v8 = (unsigned int *)(v3 + 7);
      unint64_t v9 = 1;
      while (v9 < v3[2])
      {
        uint64_t v6 = *v8;
        uint64_t v10 = swift_retain_n();
        char v11 = MEMORY[0x24C523A30](v10, a1);
        swift_release();
        if (v11) {
          goto LABEL_3;
        }
        swift_release();
        ++v9;
        v8 += 4;
        if (v4 == v9) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_19;
    }
LABEL_9:
    swift_bridgeObjectRelease();
  }
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v12)
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for Focus<EnvironmentValues, RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for Focus<EnvironmentValues, LayoutDirection>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t)&type metadata for LayoutDirection, MEMORY[0x263F288B0]);
    lazy protocol witness table accessor for type Focus<EnvironmentValues, RedactionReasons> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<EnvironmentValues, LayoutDirection> and conformance Focus<A, B>, (unint64_t *)&lazy cache variable for type metadata for Focus<EnvironmentValues, LayoutDirection>, (uint64_t)&type metadata for LayoutDirection);
    uint64_t OffsetAttribute2 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  }
  uint64_t v6 = OffsetAttribute2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_19:
  }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  unint64_t v15 = v3[2];
  unint64_t v14 = v3[3];
  if (v15 >= v14 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v3);
  }
  v3[2] = v15 + 1;
  uint64_t v16 = &v3[2 * v15];
  v16[4] = a1;
  *((_DWORD *)v16 + 10) = v6;
  *(void *)(v1 + 8) = v3;
  return v6;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t OffsetAttribute2;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;

  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = v3[2];
  if (v4)
  {
    type metadata accessor for AnyKeyPath();
    uint64_t v5 = v3[4];
    uint64_t v6 = *((unsigned int *)v3 + 10);
    swift_retain_n();
    swift_bridgeObjectRetain();
    char v7 = MEMORY[0x24C523A30](v5, a1);
    swift_release();
    if (v7)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_release();
      return v6;
    }
    swift_release();
    if (v4 != 1)
    {
      unsigned int v8 = (unsigned int *)(v3 + 7);
      unint64_t v9 = 1;
      while (v9 < v3[2])
      {
        uint64_t v6 = *v8;
        uint64_t v10 = swift_retain_n();
        char v11 = MEMORY[0x24C523A30](v10, a1);
        swift_release();
        if (v11) {
          goto LABEL_3;
        }
        swift_release();
        ++v9;
        v8 += 4;
        if (v4 == v9) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_19;
    }
LABEL_9:
    swift_bridgeObjectRelease();
  }
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v12)
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    unint64_t v14 = MEMORY[0x263F8EF38];
    type metadata accessor for Focus<EnvironmentValues, RedactionReasons>(0, &lazy cache variable for type metadata for Focus<EnvironmentValues, CGFloat>, (uint64_t)&type metadata for EnvironmentValues, MEMORY[0x263F8EF38], MEMORY[0x263F288B0]);
    lazy protocol witness table accessor for type Focus<EnvironmentValues, RedactionReasons> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<EnvironmentValues, CGFloat> and conformance Focus<A, B>, &lazy cache variable for type metadata for Focus<EnvironmentValues, CGFloat>, v14);
    uint64_t OffsetAttribute2 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  }
  uint64_t v6 = OffsetAttribute2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_19:
  }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  uint64_t v16 = v3[2];
  unint64_t v15 = v3[3];
  if (v16 >= v15 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v3);
  }
  v3[2] = v16 + 1;
  uint64_t v17 = &v3[2 * v16];
  v17[4] = a1;
  *((_DWORD *)v17 + 10) = v6;
  *(void *)(v1 + 8) = v3;
  return v6;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t OffsetAttribute2;
  unint64_t v14;
  unint64_t v15;
  void *v16;

  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = v3[2];
  if (v4)
  {
    type metadata accessor for AnyKeyPath();
    uint64_t v5 = v3[4];
    uint64_t v6 = *((unsigned int *)v3 + 10);
    swift_retain_n();
    swift_bridgeObjectRetain();
    char v7 = MEMORY[0x24C523A30](v5, a1);
    swift_release();
    if (v7)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_release();
      return v6;
    }
    swift_release();
    if (v4 != 1)
    {
      unsigned int v8 = (unsigned int *)(v3 + 7);
      unint64_t v9 = 1;
      while (v9 < v3[2])
      {
        uint64_t v6 = *v8;
        uint64_t v10 = swift_retain_n();
        char v11 = MEMORY[0x24C523A30](v10, a1);
        swift_release();
        if (v11) {
          goto LABEL_3;
        }
        swift_release();
        ++v9;
        v8 += 4;
        if (v4 == v9) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_19;
    }
LABEL_9:
    swift_bridgeObjectRelease();
  }
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v12)
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnyShapeStyle?(0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, MEMORY[0x263F8D8F0]);
    type metadata accessor for Focus<EnvironmentValues, AnyShapeStyle?>(0, &lazy cache variable for type metadata for Focus<EnvironmentValues, AnyShapeStyle?>, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle);
    lazy protocol witness table accessor for type Focus<EnvironmentValues, Color?> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<EnvironmentValues, AnyShapeStyle?> and conformance Focus<A, B>, &lazy cache variable for type metadata for Focus<EnvironmentValues, AnyShapeStyle?>, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle);
    uint64_t OffsetAttribute2 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  }
  uint64_t v6 = OffsetAttribute2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_19:
  }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  unint64_t v15 = v3[2];
  unint64_t v14 = v3[3];
  if (v15 >= v14 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v3);
  }
  v3[2] = v15 + 1;
  uint64_t v16 = &v3[2 * v15];
  v16[4] = a1;
  *((_DWORD *)v16 + 10) = v6;
  *(void *)(v1 + 8) = v3;
  return v6;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t OffsetAttribute2;
  unint64_t v14;
  unint64_t v15;
  void *v16;

  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = v3[2];
  if (v4)
  {
    type metadata accessor for AnyKeyPath();
    uint64_t v5 = v3[4];
    uint64_t v6 = *((unsigned int *)v3 + 10);
    swift_retain_n();
    swift_bridgeObjectRetain();
    char v7 = MEMORY[0x24C523A30](v5, a1);
    swift_release();
    if (v7)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_release();
      return v6;
    }
    swift_release();
    if (v4 != 1)
    {
      unsigned int v8 = (unsigned int *)(v3 + 7);
      unint64_t v9 = 1;
      while (v9 < v3[2])
      {
        uint64_t v6 = *v8;
        uint64_t v10 = swift_retain_n();
        char v11 = MEMORY[0x24C523A30](v10, a1);
        swift_release();
        if (v11) {
          goto LABEL_3;
        }
        swift_release();
        ++v9;
        v8 += 4;
        if (v4 == v9) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_19;
    }
LABEL_9:
    swift_bridgeObjectRelease();
  }
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v12)
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnyShapeStyle?(0, &lazy cache variable for type metadata for Color?, (uint64_t)&type metadata for Color, MEMORY[0x263F8D8F0]);
    type metadata accessor for Focus<EnvironmentValues, AnyShapeStyle?>(0, &lazy cache variable for type metadata for Focus<EnvironmentValues, Color?>, &lazy cache variable for type metadata for Color?, (uint64_t)&type metadata for Color);
    lazy protocol witness table accessor for type Focus<EnvironmentValues, Color?> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<EnvironmentValues, Color?> and conformance Focus<A, B>, &lazy cache variable for type metadata for Focus<EnvironmentValues, Color?>, &lazy cache variable for type metadata for Color?, (uint64_t)&type metadata for Color);
    uint64_t OffsetAttribute2 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  }
  uint64_t v6 = OffsetAttribute2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_19:
  }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  unint64_t v15 = v3[2];
  unint64_t v14 = v3[3];
  if (v15 >= v14 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v3);
  }
  v3[2] = v15 + 1;
  uint64_t v16 = &v3[2 * v15];
  v16[4] = a1;
  *((_DWORD *)v16 + 10) = v6;
  *(void *)(v1 + 8) = v3;
  return v6;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t OffsetAttribute2;
  unint64_t v14;
  unint64_t v15;
  void *v16;

  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = v3[2];
  if (v4)
  {
    type metadata accessor for AnyKeyPath();
    uint64_t v5 = v3[4];
    uint64_t v6 = *((unsigned int *)v3 + 10);
    swift_retain_n();
    swift_bridgeObjectRetain();
    char v7 = MEMORY[0x24C523A30](v5, a1);
    swift_release();
    if (v7)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_release();
      return v6;
    }
    swift_release();
    if (v4 != 1)
    {
      unsigned int v8 = (unsigned int *)(v3 + 7);
      unint64_t v9 = 1;
      while (v9 < v3[2])
      {
        uint64_t v6 = *v8;
        uint64_t v10 = swift_retain_n();
        char v11 = MEMORY[0x24C523A30](v10, a1);
        swift_release();
        if (v11) {
          goto LABEL_3;
        }
        swift_release();
        ++v9;
        v8 += 4;
        if (v4 == v9) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_19;
    }
LABEL_9:
    swift_bridgeObjectRelease();
  }
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v12)
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for Focus<EnvironmentValues, RedactionReasons>(0, &lazy cache variable for type metadata for Focus<EnvironmentValues, RedactionReasons>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t)&type metadata for RedactionReasons, MEMORY[0x263F288B0]);
    lazy protocol witness table accessor for type Focus<EnvironmentValues, RedactionReasons> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<EnvironmentValues, RedactionReasons> and conformance Focus<A, B>, &lazy cache variable for type metadata for Focus<EnvironmentValues, RedactionReasons>, (uint64_t)&type metadata for RedactionReasons);
    uint64_t OffsetAttribute2 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  }
  uint64_t v6 = OffsetAttribute2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_19:
  }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  unint64_t v15 = v3[2];
  unint64_t v14 = v3[3];
  if (v15 >= v14 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v3);
  }
  v3[2] = v15 + 1;
  uint64_t v16 = &v3[2 * v15];
  v16[4] = a1;
  *((_DWORD *)v16 + 10) = v6;
  *(void *)(v1 + 8) = v3;
  return v6;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t OffsetAttribute2;
  unint64_t v14;
  unint64_t v15;
  void *v16;

  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = v3[2];
  if (v4)
  {
    type metadata accessor for AnyKeyPath();
    uint64_t v5 = v3[4];
    uint64_t v6 = *((unsigned int *)v3 + 10);
    swift_retain_n();
    swift_bridgeObjectRetain();
    char v7 = MEMORY[0x24C523A30](v5, a1);
    swift_release();
    if (v7)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_release();
      return v6;
    }
    swift_release();
    if (v4 != 1)
    {
      unsigned int v8 = (unsigned int *)(v3 + 7);
      unint64_t v9 = 1;
      while (v9 < v3[2])
      {
        uint64_t v6 = *v8;
        uint64_t v10 = swift_retain_n();
        char v11 = MEMORY[0x24C523A30](v10, a1);
        swift_release();
        if (v11) {
          goto LABEL_3;
        }
        swift_release();
        ++v9;
        v8 += 4;
        if (v4 == v9) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_19;
    }
LABEL_9:
    swift_bridgeObjectRelease();
  }
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v12)
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for Focus<EnvironmentValues, RedactionReasons>(0, &lazy cache variable for type metadata for Focus<EnvironmentValues, ContentTransitionEffect>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t)&type metadata for ContentTransitionEffect, MEMORY[0x263F288B0]);
    lazy protocol witness table accessor for type Focus<EnvironmentValues, RedactionReasons> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<EnvironmentValues, ContentTransitionEffect> and conformance Focus<A, B>, &lazy cache variable for type metadata for Focus<EnvironmentValues, ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect);
    uint64_t OffsetAttribute2 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  }
  uint64_t v6 = OffsetAttribute2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_19:
  }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  unint64_t v15 = v3[2];
  unint64_t v14 = v3[3];
  if (v15 >= v14 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v3);
  }
  v3[2] = v15 + 1;
  uint64_t v16 = &v3[2 * v15];
  v16[4] = a1;
  *((_DWORD *)v16 + 10) = v6;
  *(void *)(v1 + 8) = v3;
  return v6;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t OffsetAttribute2;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v15;
  char v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;

  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = v3[2];
  if (v4)
  {
    type metadata accessor for AnyKeyPath();
    uint64_t v5 = v3[4];
    uint64_t v6 = *((unsigned int *)v3 + 10);
    swift_retain_n();
    swift_bridgeObjectRetain();
    char v7 = MEMORY[0x24C523A30](v5, a1);
    swift_release();
    if (v7)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_release();
      return v6;
    }
    swift_release();
    if (v4 != 1)
    {
      if (v3[2] < 2uLL) {
        __break(1u);
      }
      uint64_t v6 = *((unsigned int *)v3 + 14);
      unint64_t v15 = swift_retain_n();
      uint64_t v16 = MEMORY[0x24C523A30](v15, a1);
      swift_release();
      if (v16) {
        goto LABEL_3;
      }
      swift_release();
      if (v4 != 2)
      {
        uint64_t v17 = (unsigned int *)(v3 + 9);
        int v18 = 2;
        while (v18 < v3[2])
        {
          uint64_t v6 = *v17;
          int v19 = swift_retain_n();
          long long v20 = MEMORY[0x24C523A30](v19, a1);
          swift_release();
          if (v20) {
            goto LABEL_3;
          }
          swift_release();
          ++v18;
          v17 += 4;
          if (v4 == v18) {
            goto LABEL_5;
          }
        }
        __break(1u);
        goto LABEL_23;
      }
    }
LABEL_5:
    swift_bridgeObjectRelease();
  }
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v8)
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    uint64_t v10 = MEMORY[0x263F8D4F8];
    type metadata accessor for Focus<EnvironmentValues, RedactionReasons>(0, &lazy cache variable for type metadata for Focus<EnvironmentValues, Bool>, (uint64_t)&type metadata for EnvironmentValues, MEMORY[0x263F8D4F8], MEMORY[0x263F288B0]);
    lazy protocol witness table accessor for type Focus<EnvironmentValues, RedactionReasons> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<EnvironmentValues, Bool> and conformance Focus<A, B>, &lazy cache variable for type metadata for Focus<EnvironmentValues, Bool>, v10);
    uint64_t OffsetAttribute2 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  }
  uint64_t v6 = OffsetAttribute2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_23:
  }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  char v12 = v3[2];
  char v11 = v3[3];
  if (v12 >= v11 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v3);
  }
  v3[2] = v12 + 1;
  uint64_t v13 = &v3[2 * v12];
  v13[4] = a1;
  *((_DWORD *)v13 + 10) = v6;
  *(void *)(v1 + 8) = v3;
  return v6;
}

unint64_t lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutPositionQuery and conformance LayoutPositionQuery;
  if (!lazy protocol witness table cache variable for type LayoutPositionQuery and conformance LayoutPositionQuery)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutPositionQuery and conformance LayoutPositionQuery);
  }
  return result;
}

uint64_t static ViewModifierContentProvider.providerMakeViewList(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *(_DWORD *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  char v8 = *(unsigned char *)(a1 + 80);
  uint64_t v30 = *(void *)a1;
  int v31 = v3;
  long long v33 = *(_OWORD *)(a1 + 24);
  uint64_t v32 = v4;
  uint64_t v34 = v5;
  long long v35 = *(_OWORD *)(a1 + 48);
  int v36 = v6;
  uint64_t v37 = v7;
  char v38 = v8;
  uint64_t v9 = type metadata accessor for BodyInput();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _GraphInputs.popLast<A, B>(_:)(v9, (uint64_t)&protocol witness table for BodyInput<A>, (uint64_t)v28);
  unsigned __int8 v10 = v29;
  if (v29 == 255)
  {
    if ((BYTE8(v35) & 0x10) != 0)
    {
      uint64_t v19 = v30;
      int v20 = v31;
      uint64_t v21 = v32;
      long long v22 = v33;
      uint64_t v23 = v34;
      long long v24 = v35;
      int v25 = v36;
      uint64_t v26 = v37;
      char v27 = v38;
      static _ViewListOutputs.nonEmptyParentViewList(inputs:)((uint64_t)&v19, a2);
    }
    else
    {
      uint64_t v17 = &type metadata for EmptyViewListElements;
      int v18 = &protocol witness table for EmptyViewListElements;
      uint64_t v19 = v30;
      int v20 = v31;
      uint64_t v21 = v32;
      long long v22 = v33;
      uint64_t v23 = v34;
      long long v24 = v35;
      int v25 = v36;
      uint64_t v26 = v37;
      char v27 = v38;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v16, &v19, 0, a2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    char v12 = (void (*)(uint64_t, uint64_t *))v28[0];
    uint64_t v11 = v28[1];
    uint64_t v19 = v30;
    int v20 = v31;
    uint64_t v21 = v32;
    long long v22 = v33;
    uint64_t v23 = v34;
    long long v24 = v35;
    int v25 = v36;
    uint64_t v26 = v37;
    char v27 = v38;
    if (v29)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      uint64_t v15 = swift_bridgeObjectRetain();
      v12(v15, &v19);
      outlined consume of BodyInputElement?((uint64_t)v12, v11, v10);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      return swift_release_n();
    }
    else
    {
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = v11;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      outlined copy of BodyInputElement?((uint64_t)v12, v11, v10);
      static _ViewListOutputs.unaryViewList<A>(viewType:inputs:body:)((uint64_t)&v19, (uint64_t)partial apply for closure #1 in static ViewModifierContentProvider.providerMakeViewList(view:inputs:), v13, a2);
      swift_release();
      outlined consume of BodyInputElement?((uint64_t)v12, v11, v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
}

uint64_t static ViewModifierContentProvider.providerMakeView(view:inputs:)@<X0>(long long *a1@<X1>, uint64_t a2@<X8>)
{
  long long v3 = a1[3];
  long long v4 = a1[1];
  long long v34 = a1[2];
  long long v35 = v3;
  long long v5 = a1[3];
  long long v36 = a1[4];
  long long v6 = a1[1];
  long long v32 = *a1;
  long long v33 = v6;
  long long v28 = v34;
  long long v29 = v5;
  long long v30 = a1[4];
  int v37 = *((_DWORD *)a1 + 20);
  int v31 = *((_DWORD *)a1 + 20);
  long long v26 = v32;
  long long v27 = v4;
  uint64_t v7 = type metadata accessor for BodyInput();
  outlined retain of _ViewInputs((uint64_t)&v32);
  _ViewInputs.popLast<A, B>(_:)(v7, (uint64_t)&protocol witness table for BodyInput<A>, (uint64_t)v24);
  unsigned __int8 v8 = v25;
  if (v25 == 255)
  {
    *(void *)a2 = MEMORY[0x263F8EE78];
    int v13 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v13;
    swift_bridgeObjectRelease();
  }
  else
  {
    unsigned __int8 v10 = (void (*)(uint64_t, uint64_t *))v24[0];
    uint64_t v9 = v24[1];
    if ((v25 & 1) == 0)
    {
      uint64_t v17 = v26;
      int v18 = DWORD2(v26);
      long long v19 = v27;
      long long v20 = v28;
      long long v21 = v29;
      long long v22 = v30;
      int v23 = v31;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v11 = swift_bridgeObjectRetain();
      v10(v11, &v17);
      outlined consume of BodyInputElement?((uint64_t)v10, v9, v8);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      return swift_release_n();
    }
    uint64_t v17 = v26;
    int v18 = DWORD2(v26);
    long long v19 = v27;
    long long v20 = v28;
    long long v21 = v29;
    long long v22 = v30;
    int v23 = v31;
    uint64_t v14 = swift_allocObject();
    long long v15 = v35;
    *(_OWORD *)(v14 + 48) = v34;
    *(_OWORD *)(v14 + 64) = v15;
    *(_OWORD *)(v14 + 80) = v36;
    *(_DWORD *)(v14 + 96) = v37;
    long long v16 = v33;
    *(_OWORD *)(v14 + 16) = v32;
    *(_OWORD *)(v14 + 32) = v16;
    *(void *)(v14 + 104) = v10;
    *(void *)(v14 + 112) = v9;
    outlined retain of _ViewInputs((uint64_t)&v32);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of BodyInputElement?((uint64_t)v10, v9, v8);
    static _ViewOutputs.multiView(inputs:body:)((uint64_t)&v17, (uint64_t)partial apply for closure #1 in static ViewModifierContentProvider.providerMakeView(view:inputs:), v14, a2);
    swift_release();
    outlined consume of BodyInputElement?((uint64_t)v10, v9, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t partial apply for closure #1 in DynamicLayoutViewAdaptor.MakeTransition.visit<A>(_:)(uint64_t a1, uint64_t *a2)
{
  return closure #1 in DynamicLayoutViewAdaptor.MakeTransition.visit<A>(_:)(a1, a2, *(uint64_t (**)(uint64_t *))(v2 + 16));
}

uint64_t closure #1 in DynamicLayoutViewAdaptor.MakeTransition.visit<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *))
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  int v5 = *((_DWORD *)a2 + 20);
  uint64_t v8 = *a2;
  int v9 = v3;
  uint64_t v10 = v4;
  long long v6 = *(_OWORD *)(a2 + 5);
  long long v11 = *(_OWORD *)(a2 + 3);
  long long v12 = v6;
  long long v13 = *(_OWORD *)(a2 + 7);
  uint64_t v14 = a2[9];
  int v15 = v5;
  return a3(&v8);
}

uint64_t type metadata accessor for BodyInput()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:)(a1, (long long *)(v2 + 32), *(void *)(v2 + 80), *(void *)(v2 + 96), *(void *)(v2 + 104), *(void *)(v2 + 24), a2);
}

uint64_t closure #1 in closure #1 in closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:)@<X0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = a1[2];
  uint64_t v12 = a1[5];
  uint64_t v11 = a1[6];
  long long v42 = *(_OWORD *)(a1 + 7);
  long long v44 = *(_OWORD *)(a1 + 3);
  uint64_t v13 = a1[9];
  unsigned int v14 = *((_DWORD *)a1 + 20);
  long long v15 = a2[1];
  long long v87 = *a2;
  v88[0] = v15;
  v88[1] = a2[2];
  if (a3)
  {
    outlined retain of _GraphInputs((uint64_t)a2);
    uint64_t v16 = swift_retain();
    _GraphInputs.makeReusable(indirectMap:)(v16);
    swift_release();
  }
  else
  {
    outlined retain of _GraphInputs((uint64_t)a2);
  }
  uint64_t v78 = v8;
  uint64_t v80 = v10;
  long long v81 = v44;
  uint64_t v82 = v12;
  uint64_t v83 = v11;
  long long v84 = v42;
  uint64_t v85 = v13;
  int v79 = v9;
  unsigned int v86 = v14;
  uint64_t v65 = v87;
  int v66 = DWORD2(v87);
  uint64_t v67 = *(void *)&v88[0];
  long long v68 = *(_OWORD *)((char *)v88 + 8);
  uint64_t v69 = *((void *)&v88[1] + 1);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.merge(_:ignoringPhase:)((uint64_t)&v65, 0);
  uint64_t Attribute = AGWeakAttributeGetAttribute();
  if (Attribute == *MEMORY[0x263F288F8])
  {
    *(void *)a7 = MEMORY[0x263F8EE78];
    *(_DWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 12) = Attribute;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    unsigned int v49 = Attribute;
    if (a3)
    {
      type metadata accessor for Attribute();
      uint64_t v19 = swift_retain();
      Attribute.makeReusable(indirectMap:)(v19);
      swift_release();
      uint64_t Attribute = v49;
    }
    _GraphValue.init(_:)(Attribute, &v48);
    int v45 = v48;
    uint64_t v20 = v78;
    uint64_t v21 = v80;
    unsigned int v36 = v81;
    int v34 = v79;
    int v38 = DWORD2(v81);
    unsigned int v35 = DWORD1(v81);
    uint64_t v22 = v82;
    uint64_t v23 = v83;
    int v32 = DWORD1(v84);
    int v33 = v84;
    int v30 = HIDWORD(v84);
    int v31 = DWORD2(v84);
    unsigned int v28 = HIDWORD(v85);
    int v29 = v85;
    int v26 = HIDWORD(v81);
    unsigned int v27 = v86;
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = a4;
    *(void *)(v24 + 24) = a5;
    uint64_t v43 = v24;
    int ShouldRecordTree = AGSubgraphShouldRecordTree();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (ShouldRecordTree) {
      AGSubgraphBeginTreeElement();
    }
    uint64_t v65 = v20;
    int v66 = v34;
    uint64_t v67 = v21;
    *(void *)&long long v68 = __PAIR64__(v35, v36);
    uint64_t v69 = v22;
    uint64_t v70 = v23;
    HIDWORD(v68) = v26;
    int v71 = v33;
    int v72 = v32;
    int v73 = v31;
    int v74 = v30;
    int v75 = v29;
    unsigned int v76 = v28;
    unsigned int v77 = v27;
    int v47 = v45;
    uint64_t v50 = v20;
    int v51 = v34;
    uint64_t v52 = v21;
    unsigned int v53 = v36;
    unsigned int v54 = v35;
    int v55 = 0;
    int v56 = v26;
    uint64_t v57 = v22;
    uint64_t v58 = v23;
    int v59 = v33;
    int v60 = v32;
    int v61 = v31;
    int v62 = v30;
    int v63 = v29;
    unint64_t v64 = __PAIR64__(v27, v28);
    int v37 = *(void (**)(int *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t))(a6 + 24);
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v37(&v47, &v50, partial apply for closure #1 in DynamicLayoutViewAdaptor.MakeTransition.visit<A>(_:), v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    DWORD2(v68) = v38;
    if (ShouldRecordTree)
    {
      specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a7, (uint64_t)&v65);
      AGSubgraphEndTreeElement();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
}

uint64_t _GraphValue.init(_:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t _GraphInputs.merge(_:ignoringPhase:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(unsigned int *)(a1 + 24);
  uint64_t v7 = *(unsigned int *)(a1 + 28);
  LODWORD(v8) = *(_DWORD *)(a1 + 36);
  int v21 = *(_DWORD *)(a1 + 32);
  PropertyList.merge(_:)(*(void *)a1);
  swift_beginAccess();
  uint64_t v9 = *(unsigned int *)(v5 + 16);
  uint64_t v10 = *(void *)(v2 + 16);
  swift_beginAccess();
  int v11 = *(_DWORD *)(v10 + 16);
  if v9 != v11 && (specialized Set._Variant.insert(_:)(&v22, v9))
  {
    uint64_t v22 = AGCreateWeakAttribute();
    int v23 = v11;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type MergedEnvironment and conformance MergedEnvironment();
    int v12 = Attribute.init<A>(body:value:flags:update:)();
    unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
    char v14 = v8;
    uint64_t v8 = swift_allocObject();
    *(_DWORD *)(v8 + 16) = v12;
    *(void *)(v8 + 24) = MEMORY[0x263F8EE78];
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_WORD *)(v8 + 80) = 256;
    *(void *)(v8 + 88) = v13;
    swift_release();
    *(void *)(v3 + 16) = v8;
    LOBYTE(v8) = v14;
    int v15 = *(_DWORD *)(v3 + 32);
    if ((v15 & 0x20) == 0) {
      *(_DWORD *)(v3 + 32) = v15 | 0x20;
    }
  }
  int v16 = *(_DWORD *)(v3 + 28);
  if v7 != v16 && (specialized Set._Variant.insert(_:)(&v22, v7))
  {
    uint64_t v22 = AGCreateWeakAttribute();
    int v23 = v16;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type MergedTransaction and conformance MergedTransaction();
    *(_DWORD *)(v3 + 28) = Attribute.init<A>(body:value:flags:update:)();
  }
  if ((a2 & 1) == 0)
  {
    int v17 = *(_DWORD *)(v3 + 24);
    if v6 != v17 && (specialized Set._Variant.insert(_:)(&v22, v6))
    {
      uint64_t v22 = AGCreateWeakAttribute();
      int v23 = v17;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type MergedPhase and conformance MergedPhase();
      *(_DWORD *)(v3 + 24) = Attribute.init<A>(body:value:flags:update:)();
      int v18 = *(_DWORD *)(v3 + 32);
      if ((v18 & 0x40) == 0) {
        *(_DWORD *)(v3 + 32) = v18 | 0x40;
      }
    }
  }
  *(_DWORD *)(v3 + 32) |= v21;
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t result = specialized Set.formUnion<A>(_:)(v19);
  *(_DWORD *)(v3 + 36) |= v8 & 1;
  return result;
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    uint64_t result = specialized Set._Variant.insert(_:)(&v13, *(unsigned int *)(*(void *)(v1 + 48) + 4 * v9));
  }
  int64_t v12 = v10 + 4;
  if (v12 < v7)
  {
    unint64_t v11 = *(void *)(v3 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        int64_t v2 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        ++v12;
        if (v11) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v12;
    goto LABEL_22;
  }
LABEL_23:

  return swift_release();
}

{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::UInt64 v13;
  uint64_t vars8;

  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    uint64_t result = specialized Set._Variant.insert(_:)(&v13, *(void *)(*(void *)(v1 + 48) + 8 * v9));
  }
  int64_t v12 = v10 + 4;
  if (v12 < v7)
  {
    unint64_t v11 = *(void *)(v3 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        int64_t v2 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        ++v12;
        if (v11) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v12;
    goto LABEL_22;
  }
LABEL_23:

  return swift_release();
}

{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::UInt v13[2];
  uint64_t vars8;

  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 64;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    uint64_t result = specialized Set._Variant.insert(_:)(v13, *(void *)(*(void *)(v1 + 48) + 16 * v9), *(void *)(*(void *)(v1 + 48) + 16 * v9 + 8));
  }
  int64_t v12 = v10 + 4;
  if (v12 < v7)
  {
    unint64_t v11 = *(void *)(v3 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        int64_t v2 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        ++v12;
        if (v11) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v12;
    goto LABEL_22;
  }
LABEL_23:

  return swift_release();
}

{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::UInt v13[2];
  uint64_t vars8;

  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    uint64_t result = specialized Set._Variant.insert(_:)(v13, *(void *)(*(void *)(v1 + 48) + 16 * v9), *(void *)(*(void *)(v1 + 48) + 16 * v9 + 8));
  }
  int64_t v12 = v10 + 4;
  if (v12 < v7)
  {
    unint64_t v11 = *(void *)(v3 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        int64_t v2 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        ++v12;
        if (v11) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v12;
    goto LABEL_22;
  }
LABEL_23:

  return swift_release();
}

uint64_t specialized Set._Variant.insert(_:)(_DWORD *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = MEMORY[0x24C5248C0](*(void *)(v6 + 40), a2, 4);
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(_DWORD *)(v10 + 4 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(_DWORD *)(v10 + 4 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = MEMORY[0x24C5248C0](*(void *)(v6 + 40), a2, 4);
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(_DWORD *)(v10 + 4 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(_DWORD *)(v10 + 4 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:)(a1, a2, a3, a4, *(uint64_t (**)(uint64_t, uint64_t *, uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>), uint64_t))(v4 + 32), *(void *)(v4 + 40), *(_OWORD **)(v4 + 48), *(void *)(v4 + 56), *(void *)(v4 + 64), *(void *)(v4 + 16), *(void *)(v4 + 24)) & 1;
}

uint64_t closure #1 in closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *, uint64_t (*)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>), uint64_t), uint64_t a6, _OWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v16 = *((_DWORD *)a2 + 2);
  uint64_t v17 = a2[2];
  int v18 = *((_DWORD *)a2 + 20);
  uint64_t v25 = *a2;
  int v26 = v16;
  uint64_t v27 = v17;
  long long v19 = *(_OWORD *)(a2 + 5);
  long long v28 = *(_OWORD *)(a2 + 3);
  long long v29 = v19;
  long long v30 = *(_OWORD *)(a2 + 7);
  uint64_t v31 = a2[9];
  int v32 = v18;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a10;
  *(void *)(v20 + 24) = a11;
  long long v21 = a7[1];
  *(_OWORD *)(v20 + 32) = *a7;
  *(_OWORD *)(v20 + 48) = v21;
  *(_OWORD *)(v20 + 64) = a7[2];
  *(void *)(v20 + 80) = a8;
  *(void *)(v20 + 88) = a9;
  *(void *)(v20 + 96) = a3;
  *(void *)(v20 + 104) = a4;
  outlined retain of _GraphInputs((uint64_t)a7);
  swift_retain();
  swift_retain();
  char v22 = a5(a1, &v25, partial apply for closure #1 in closure #1 in closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:), v20);
  swift_release();
  return v22 & 1;
}

uint64_t outlined retain of _GraphInputs(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewInputs, @guaranteed @escaping @callee_guaranteed (@in_guaranteed _ViewInputs) -> (@out _ViewOutputs)) -> (@out _ViewOutputs?, @unowned Bool)()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  unsigned int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  uint64_t result = MEMORY[0x24C5248C0](*(void *)(*v3 + 40), v5, 4);
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(_DWORD *)(v10 + 4 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for AGAttribute(0);
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(_DWORD *)(v10 + 4 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(void *)(v12 + 48) + 4 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  unsigned int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()(&lazy cache variable for type metadata for _SetStorage<ObjectIdentifier>);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

{
  uint64_t *v3;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  unsigned int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  uint64_t result = MEMORY[0x24C5248C0](*(void *)(*v3 + 40), v5, 4);
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(_DWORD *)(v10 + 4 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(_DWORD *)(v10 + 4 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(void *)(v12 + 48) + 4 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  unsigned int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for AGTypeID(0);
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  unsigned int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()(&lazy cache variable for type metadata for _SetStorage<Int>);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  uint64_t v4 = v3;
  unint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  uint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
LABEL_22:
      uint64_t v25 = *v4;
      *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(void *)(*(void *)(v25 + 48) + 8 * a2) = v6;
      int v26 = *(void *)(v25 + 16);
      uint64_t v27 = __OFADD__(v26, 1);
      long long v28 = v26 + 1;
      if (!v27)
      {
        *(void *)(v25 + 16) = v28;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v9 = *v3;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v10 = Hasher._finalize()();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  BOOL v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  uint64_t v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    int v18 = ~v11;
    do
    {
      a2 = (a2 + 1) & v18;
      if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_22;
      }
      long long v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      long long v21 = v20;
      if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22) {
        goto LABEL_25;
      }
      uint64_t v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    while ((v24 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for NSAttributedStringKey(0);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _GraphInputs.popLast<A, B>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 8);
  PropertyList.subscript.getter(a1, *v3, a1, v6);
  uint64_t v7 = type metadata accessor for Stack();
  Stack.pop()(v7, a3);
  v9[0] = v9[1];
  return PropertyList.subscript.setter((uint64_t)v9, a1, a1, v6);
}

uint64_t outlined consume of BodyInputElement()
{
  return swift_release();
}

uint64_t outlined consume of BodyInputElement?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return outlined consume of BodyInputElement();
  }
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<AGAttribute>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<EventID>(0, &lazy cache variable for type metadata for _SetStorage<Subview.ID>, (void (*)(void))lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    long long v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      long long v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        long long v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 40 * v15;
    uint64_t result = (void *)outlined init with copy of Subview.ID(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    unint64_t v17 = *(void *)(v4 + 48) + v16;
    int64_t v18 = v23[0];
    long long v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)unint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  char v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  long long v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    long long v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<Int>(0, &lazy cache variable for type metadata for _SetStorage<AnyHashable>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    long long v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      long long v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        long long v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 40 * v15;
    uint64_t result = (void *)outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    unint64_t v17 = *(void *)(v4 + 48) + v16;
    int64_t v18 = v23[0];
    long long v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)unint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  char v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  long long v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    long long v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(MEMORY[0x263F07EC8], (void (*)(void, double))type metadata accessor for _SetStorage<Duration.UnitsFormatStyle.Unit>);
}

{
  return specialized _NativeSet.copy()(MEMORY[0x263F073D0], (void (*)(void, double))type metadata accessor for _SetStorage<Date.ComponentsFormatStyle.Field>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<Int>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<UInt32>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<AGTypeID>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()((unint64_t *)&lazy cache variable for type metadata for _SetStorage<Text.Effect.Identifier>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<EventID>(0, &lazy cache variable for type metadata for _SetStorage<Text.Effect.RelativeIdentifierKey>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_OWORD *)(*(void *)(v4 + 48) + 16 * v15) = *(_OWORD *)(*(void *)(v2 + 48) + 16 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<Int>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    long long v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      long long v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        long long v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    int64_t v18 = v17[1];
    long long v19 = (void *)(*(void *)(v4 + 48) + v16);
    *long long v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  char v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  long long v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    long long v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<EventID>(0, &lazy cache variable for type metadata for _SetStorage<EventID>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    long long v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13) {
      goto LABEL_28;
    }
    char v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_28;
      }
      char v22 = *(void *)(v6 + 8 * v9);
      if (!v22)
      {
        int64_t v9 = v21 + 2;
        if (v21 + 2 >= v13) {
          goto LABEL_28;
        }
        char v22 = *(void *)(v6 + 8 * v9);
        if (!v22) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    long long v19 = *v17;
    int64_t v18 = v17[1];
    uint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v20 = v19;
    v20[1] = v18;
  }
  int v23 = v21 + 3;
  if (v23 >= v13) {
    goto LABEL_28;
  }
  char v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    char v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<EventID>(0, &lazy cache variable for type metadata for _SetStorage<DefaultDescriptionAttribute>, (void (*)(void))lazy protocol witness table accessor for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<EventID>(0, &lazy cache variable for type metadata for _SetStorage<DisplayList.ViewUpdater.ViewCache.Key>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    long long v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      long long v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        long long v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 20 * v15;
    unint64_t v17 = *(void *)(v2 + 48) + v16;
    int64_t v18 = *(unsigned char *)(v17 + 16);
    long long v19 = *(void *)(v4 + 48) + v16;
    *(_OWORD *)long long v19 = *(_OWORD *)v17;
    *(unsigned char *)(v19 + 16) = v18;
  }
  char v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  long long v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    long long v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<EventID>(0, &lazy cache variable for type metadata for _SetStorage<CAHostingLayerEvent.MouseButton>, (void (*)(void))lazy protocol witness table accessor for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void type metadata accessor for _SetStorage<AGAttribute>()
{
  if (!lazy cache variable for type metadata for _SetStorage<AGAttribute>)
  {
    type metadata accessor for AGAttribute(255);
    lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit((unint64_t *)&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, type metadata accessor for AGAttribute);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<AGAttribute>);
    }
  }
}

uint64_t closure #1 in UnaryElements.makeElements(from:inputs:indirectMap:body:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a1[2];
  uint64_t v29 = *a1;
  uint64_t v30 = a1[5];
  uint64_t v23 = a1[6];
  long long v27 = *(_OWORD *)(a1 + 7);
  long long v28 = *(_OWORD *)(a1 + 3);
  uint64_t v7 = a1[9];
  int v25 = *((_DWORD *)a1 + 20);
  int v26 = *((_DWORD *)a1 + 2);
  uint64_t v8 = (uint64_t *)(a2 + *(int *)(type metadata accessor for UnaryElements() + 36));
  uint64_t v9 = *v8;
  int v10 = *((_DWORD *)v8 + 2);
  uint64_t v11 = v8[2];
  unsigned int v12 = *((_DWORD *)v8 + 6);
  unsigned int v13 = *((_DWORD *)v8 + 7);
  unsigned int v15 = *((_DWORD *)v8 + 8);
  unsigned int v14 = *((_DWORD *)v8 + 9);
  uint64_t v16 = v8[5];
  uint64_t v52 = *v8;
  int v53 = v10;
  uint64_t v54 = v11;
  unsigned int v55 = v12;
  unsigned int v56 = v13;
  unsigned int v57 = v15;
  unsigned int v58 = v14;
  uint64_t v59 = v16;
  uint64_t v24 = a3;
  if (a3)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    _GraphInputs.makeReusable(indirectMap:)(a3);
    swift_release();
    uint64_t v17 = v52;
    int v18 = v53;
    uint64_t v33 = v54;
    unsigned int v12 = v55;
    unsigned int v13 = v56;
    unsigned int v15 = v57;
    unsigned int v14 = v58;
    uint64_t v19 = v59;
  }
  else
  {
    uint64_t v20 = v9;
    swift_retain();
    uint64_t v33 = v11;
    swift_retain();
    swift_bridgeObjectRetain();
    int v18 = v10;
    uint64_t v17 = v20;
    uint64_t v19 = v16;
  }
  uint64_t v43 = v29;
  int v44 = v26;
  uint64_t v45 = v6;
  long long v46 = v28;
  uint64_t v47 = v30;
  uint64_t v48 = v23;
  long long v49 = v27;
  uint64_t v50 = v7;
  int v51 = v25;
  uint64_t v34 = v17;
  int v35 = v18;
  uint64_t v36 = v33;
  *(void *)&long long v37 = __PAIR64__(v13, v12);
  *((void *)&v37 + 1) = __PAIR64__(v14, v15);
  uint64_t v38 = v19;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.merge(_:ignoringPhase:)((uint64_t)&v34, 0);
  uint64_t v34 = v43;
  int v35 = v44;
  uint64_t v36 = v45;
  long long v37 = v46;
  uint64_t v38 = v47;
  uint64_t v39 = v48;
  long long v40 = v49;
  uint64_t v41 = v50;
  int v42 = v51;
  long long v21 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(a5 + 8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(&v34, v24, a4, a5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t partial apply for closure #1 in UnaryElements.makeElements(from:inputs:indirectMap:body:)(uint64_t *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for UnaryElements() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v1 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in UnaryElements.makeElements(from:inputs:indirectMap:body:)(a1, v1 + v6, v7, v3, v4);
}

uint64_t type metadata accessor for UnaryElements()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for UnaryViewGenerator.makeView(inputs:indirectMap:) in conformance TypedUnaryViewGenerator<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return TypedUnaryViewGenerator.makeView(inputs:indirectMap:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t TypedUnaryViewGenerator.makeView(inputs:indirectMap:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v9 = *a1;
  int v21 = *((_DWORD *)a1 + 2);
  uint64_t v10 = a1[2];
  int v11 = *((_DWORD *)a1 + 6);
  int v12 = *((_DWORD *)a1 + 7);
  int v29 = *((_DWORD *)a1 + 9);
  int v30 = *((_DWORD *)a1 + 8);
  uint64_t v13 = a1[5];
  uint64_t v14 = a1[6];
  int v27 = *((_DWORD *)a1 + 15);
  int v28 = *((_DWORD *)a1 + 14);
  int v25 = *((_DWORD *)a1 + 17);
  int v26 = *((_DWORD *)a1 + 16);
  int v23 = *((_DWORD *)a1 + 19);
  int v24 = *((_DWORD *)a1 + 18);
  int v22 = *((_DWORD *)a1 + 20);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    *(void *)a5 = MEMORY[0x263F8EE78];
    *(_DWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 12) = result;
  }
  else
  {
    uint64_t v20 = a4;
    unsigned int v33 = result;
    if (a2)
    {
      type metadata accessor for Attribute();
      uint64_t v16 = swift_retain();
      Attribute.makeReusable(indirectMap:)(v16);
      swift_release();
      uint64_t result = v33;
    }
    _GraphValue.init(_:)(result, &v32);
    int v17 = v32;
    int ShouldRecordTree = AGSubgraphShouldRecordTree();
    if (ShouldRecordTree) {
      AGSubgraphBeginTreeElement();
    }
    uint64_t v50 = v9;
    int v51 = v21;
    uint64_t v52 = v10;
    int v53 = v11;
    int v54 = v12;
    uint64_t v57 = v13;
    uint64_t v58 = v14;
    int v56 = v29;
    int v59 = v28;
    int v60 = v27;
    int v61 = v26;
    int v62 = v25;
    int v63 = v24;
    int v64 = v23;
    int v65 = v22;
    int v31 = v17;
    uint64_t v34 = v9;
    int v35 = v21;
    uint64_t v36 = v10;
    int v37 = v11;
    int v38 = v12;
    int v39 = 0;
    int v40 = v29;
    uint64_t v41 = v13;
    uint64_t v42 = v14;
    int v43 = v28;
    int v44 = v27;
    int v45 = v26;
    int v46 = v25;
    int v47 = v24;
    int v48 = v23;
    int v49 = v22;
    int v18 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t))(v20 + 24);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18(&v31, &v34, a3, v20);
    int v55 = v30;
    if (ShouldRecordTree)
    {
      specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a5, (uint64_t)&v50);
      AGSubgraphEndTreeElement();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in _ViewList_Elements.makeAllElements(inputs:indirectMap:body:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in closure #1 in _ViewList_Elements.makeAllElements(inputs:indirectMap:body:)(a1, a2, a3, a4, *(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16));
}

uint64_t closure #1 in closure #1 in _ViewList_Elements.makeAllElements(inputs:indirectMap:body:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *, uint64_t, uint64_t))
{
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  int v7 = *((_DWORD *)a2 + 20);
  uint64_t v10 = *a2;
  int v11 = v5;
  uint64_t v12 = v6;
  long long v8 = *(_OWORD *)(a2 + 5);
  long long v13 = *(_OWORD *)(a2 + 3);
  long long v14 = v8;
  long long v15 = *(_OWORD *)(a2 + 7);
  uint64_t v16 = a2[9];
  int v17 = v7;
  a5(&v10, a3, a4);
  return 1;
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewInputs, @guaranteed @escaping @callee_guaranteed (@in_guaranteed _ViewInputs) -> (@out _ViewOutputs)) -> (@out _ViewOutputs?)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t _s7SwiftUI11_ViewInputsVAcA01_C7OutputsVIegnr_AESgIgngr_A2cEIegnr_AFIegngr_TRTA_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return thunk for @callee_guaranteed (@in_guaranteed _ViewInputs, @guaranteed @escaping @callee_guaranteed (@in_guaranteed _ViewInputs) -> (@out _ViewOutputs)) -> (@out _ViewOutputs?)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

unint64_t lazy protocol witness table accessor for type MergedTransaction and conformance MergedTransaction()
{
  unint64_t result = lazy protocol witness table cache variable for type MergedTransaction and conformance MergedTransaction;
  if (!lazy protocol witness table cache variable for type MergedTransaction and conformance MergedTransaction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MergedTransaction and conformance MergedTransaction);
  }
  return result;
}

uint64_t _ViewInputs.popLast<A, B>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return _GraphInputs.popLast<A, B>(_:)(a1, *(void *)(a2 + 8), a3);
}

unint64_t lazy protocol witness table accessor for type MergedPhase and conformance MergedPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type MergedPhase and conformance MergedPhase;
  if (!lazy protocol witness table cache variable for type MergedPhase and conformance MergedPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MergedPhase and conformance MergedPhase);
  }
  return result;
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed _ViewInputs, @guaranteed @escaping @callee_guaranteed (@in_guaranteed _ViewInputs) -> (@out _ViewOutputs)) -> (@out _ViewOutputs?)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t partial apply for closure #2 in DynamicLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, unint64_t *)@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return closure #2 in DynamicLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)(a1, a2, a3, *(void (**)(unint64_t *))(v4 + 16), *(_DWORD *)(v4 + 32), *(void *)(v4 + 40), *(void (**)(uint64_t (*)(), double))(v4 + 48), a4, *(void *)(v4 + 56), *(unsigned int **)(v4 + 64), *(void *)(v4 + 72), *(void *)(v4 + 80), *(unsigned char *)(v4 + 88));
}

uint64_t closure #2 in DynamicLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, unint64_t *)@<X1>, uint64_t a3@<X2>, void (*a4)(unint64_t *)@<X3>, unsigned int a5@<W5>, uint64_t a6@<X6>, void (*a7)(uint64_t (*)(), double)@<X7>, void *a8@<X8>, uint64_t a9, unsigned int *a10, uint64_t a11, uint64_t a12, char a13)
{
  void (*v63)(uint64_t *__return_ptr, unint64_t *);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  long long v71;
  uint64_t v72;
  uint64_t v73;
  long long v74;
  uint64_t v75;
  int v76;
  uint64_t v77;

  unsigned int v32 = HIDWORD(a6);
  unsigned int v77 = *MEMORY[0x263EF8340];
  int v13 = *(_DWORD *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v39 = *(void *)(a1 + 40);
  uint64_t v40 = *(void *)(a1 + 48);
  int v15 = *(_DWORD *)(a1 + 80);
  long long v68 = *(void *)a1;
  uint64_t v69 = v13;
  int v71 = *(_OWORD *)(a1 + 24);
  char v41 = BYTE12(v71);
  int v72 = v39;
  int v73 = v40;
  int v74 = *(_OWORD *)(a1 + 56);
  int v75 = *(void *)(a1 + 72);
  unsigned int v76 = v15;
  swift_beginAccess();
  int v16 = *(_DWORD *)(v14 + 16);
  uint64_t v17 = *(void *)(v14 + 24);
  long long v37 = *(_OWORD *)(v14 + 48);
  long long v38 = *(_OWORD *)(v14 + 32);
  uint64_t v19 = *(void *)(v14 + 64);
  uint64_t v18 = *(void *)(v14 + 72);
  char v20 = *(unsigned char *)(v14 + 80);
  char v21 = *(unsigned char *)(v14 + 81);
  uint64_t v22 = *(void *)(v14 + 88);
  type metadata accessor for [ViewGeometry](0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v23 = swift_allocObject();
  *(_DWORD *)(v23 + 16) = v16;
  *(void *)(v23 + 24) = v17;
  *(_OWORD *)(v23 + 32) = v38;
  *(_OWORD *)(v23 + 48) = v37;
  *(void *)(v23 + 64) = v19;
  *(void *)(v23 + 72) = v18;
  *(unsigned char *)(v23 + 80) = v20;
  *(unsigned char *)(v23 + 81) = v21;
  *(void *)(v23 + 88) = v22;
  swift_retain();
  uint64_t v70 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a4(&v68);
  if ((v41 & 0x20) != 0)
  {
    if (*MEMORY[0x263F288F8] == v32) {
      __break(1u);
    }
    unint64_t v47 = __PAIR64__(v32, a5);
    v48[0] = *(void *)a10;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type DynamicLayoutViewChildGeometry and conformance DynamicLayoutViewChildGeometry();
    Attribute.init<A>(body:value:flags:update:)();
    LODWORD(v75) = AGGraphCreateOffsetAttribute2();
    DWORD2(v74) = AGGraphCreateOffsetAttribute2();
    *((int8x8_t *)&v71 + 1) = vorr_s8(*(int8x8_t *)((char *)&v71 + 8), (int8x8_t)0x200000018);
  }
  if (!a11)
  {
    unint64_t v47 = v68;
    LODWORD(v48[0]) = v69;
    v48[1] = v70;
    long long v49 = v71;
    uint64_t v50 = v72;
    uint64_t v51 = v73;
    long long v52 = v74;
    uint64_t v53 = v75;
    LODWORD(v54) = v76;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(&v44, &v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v30 = swift_release();
    uint64_t v27 = v44;
    unsigned int v28 = v45;
    uint64_t v29 = v46;
    goto LABEL_8;
  }
  unsigned int v24 = *a10;
  outlined init with copy of DynamicViewListItem(a12, (uint64_t)v48);
  unint64_t v47 = __PAIR64__(v24, a5);
  unint64_t v54 = v68;
  int v55 = v69;
  uint64_t v56 = v70;
  long long v57 = v71;
  uint64_t v58 = v72;
  uint64_t v59 = v73;
  long long v60 = v74;
  uint64_t v61 = v75;
  int v62 = v76;
  int v63 = a2;
  int v64 = a3;
  int v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = a13 & 1;
  int v25 = *(uint64_t (**)(unint64_t *, void *, _UNKNOWN **))(*(void *)a11 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t result = v25(&v47, &unk_26FA6ADD8, &protocol witness table for DynamicLayoutViewAdaptor.MakeTransition);
  uint64_t v27 = v65;
  if (v65)
  {
    unsigned int v28 = v66;
    uint64_t v29 = HIDWORD(v66);
    swift_bridgeObjectRetain();
    outlined destroy of DynamicLayoutViewAdaptor.MakeTransition((uint64_t)&v47);
    uint64_t v30 = swift_release();
LABEL_8:
    double v31 = MEMORY[0x270FA5388](v30);
    a7(partial apply for closure #1 in closure #2 in DynamicLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:), v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    ++a10[1];
    *a8 = v27;
    a8[1] = v28 | (unint64_t)(v29 << 32);
    return result;
  }
  __break(1u);
  return result;
}

uint64_t mapMutator #1 <A>(thunk:) in static Layout.makeDynamicView(root:inputs:properties:list:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_beginAccess();
  if ((*(unsigned char *)(a3 + 20) & 1) == 0)
  {
    MEMORY[0x270FA5388](result);
    uint64_t v5 = type metadata accessor for DynamicLayoutComputer();
    MEMORY[0x270FA5388](v5);
    return AGGraphMutateAttribute();
  }
  return result;
}

uint64_t partial apply for mapMutator #1 <A>(thunk:) in static Layout.makeDynamicView(root:inputs:properties:list:)(uint64_t a1, uint64_t a2)
{
  return mapMutator #1 <A>(thunk:) in static Layout.makeDynamicView(root:inputs:properties:list:)(a1, a2, *(void *)(v2 + 32));
}

uint64_t partial apply for closure #1 in closure #3 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(_DWORD *a1)
{
  return closure #1 in closure #3 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(a1);
}

uint64_t closure #1 in closure #3 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(_DWORD *a1)
{
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type DynamicTransaction and conformance DynamicTransaction();
  a1[7] = Attribute.init<A>(body:value:flags:update:)();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type DynamicViewPhase and conformance DynamicViewPhase();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  a1[6] = result;
  int v3 = a1[8];
  if ((v3 & 0x40) == 0) {
    a1[8] = v3 | 0x40;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DynamicTransaction and conformance DynamicTransaction()
{
  unint64_t result = lazy protocol witness table cache variable for type DynamicTransaction and conformance DynamicTransaction;
  if (!lazy protocol witness table cache variable for type DynamicTransaction and conformance DynamicTransaction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicTransaction and conformance DynamicTransaction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DynamicViewPhase and conformance DynamicViewPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type DynamicViewPhase and conformance DynamicViewPhase;
  if (!lazy protocol witness table cache variable for type DynamicViewPhase and conformance DynamicViewPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicViewPhase and conformance DynamicViewPhase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DynamicLayoutViewChildGeometry and conformance DynamicLayoutViewChildGeometry()
{
  unint64_t result = lazy protocol witness table cache variable for type DynamicLayoutViewChildGeometry and conformance DynamicLayoutViewChildGeometry;
  if (!lazy protocol witness table cache variable for type DynamicLayoutViewChildGeometry and conformance DynamicLayoutViewChildGeometry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicLayoutViewChildGeometry and conformance DynamicLayoutViewChildGeometry);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, uint64_t (*a4)(uint64_t, _OWORD *)@<X6>, void *a5@<X8>)
{
  long long v6 = *(_OWORD *)(a2 + 48);
  void v10[2] = *(_OWORD *)(a2 + 32);
  void v10[3] = v6;
  v10[4] = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v7;
  uint64_t v8 = *a1;
  char v11 = *(unsigned char *)(a2 + 80);
  a3(a5);
  return a4(v8, v10);
}

uint64_t static MultiViewModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v3 = *a2;
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[5];
  int v7 = *((_DWORD *)a2 + 16);
  uint64_t v8 = a2[9];
  char v9 = *((unsigned char *)a2 + 80);
  int v20 = *a1;
  uint64_t v11 = v3;
  int v12 = v4;
  uint64_t v13 = v5;
  long long v14 = *(_OWORD *)(a2 + 3);
  uint64_t v15 = v6;
  long long v16 = *((_OWORD *)a2 + 3);
  int v17 = v7;
  uint64_t v18 = v8;
  char v19 = v9;
  return static ViewModifier.makeMultiViewList(modifier:inputs:body:)(&v20, (uint64_t)&v11, a3);
}

uint64_t static ViewModifier.makeMultiViewList(modifier:inputs:body:)(int *a1, uint64_t a2, void (*a3)(void))
{
  int v17 = *a1;
  int v4 = *(_DWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int v6 = *(_DWORD *)(a2 + 24);
  int v7 = *(_DWORD *)(a2 + 28);
  int v8 = *(_DWORD *)(a2 + 32);
  int v9 = *(_DWORD *)(a2 + 36);
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v16 = *(void *)(a2 + 56);
  int v15 = *(_DWORD *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  char v13 = *(unsigned char *)(a2 + 80);
  uint64_t v19 = *(void *)a2;
  uint64_t v3 = v19;
  int v20 = v4;
  uint64_t v21 = v5;
  int v22 = v6;
  int v23 = v7;
  int v24 = v8;
  int v25 = v9;
  uint64_t v26 = v11;
  uint64_t v27 = v10;
  uint64_t v28 = v16;
  int v29 = v15;
  uint64_t v30 = v14;
  char v31 = v13;
  a3();
  int v18 = v17;
  uint64_t v19 = v3;
  int v20 = v4;
  uint64_t v21 = v5;
  int v22 = v6;
  int v23 = v7;
  int v24 = v8;
  int v25 = v9;
  uint64_t v26 = v11;
  uint64_t v27 = v10;
  uint64_t v28 = v16;
  int v29 = v15;
  uint64_t v30 = v14;
  char v31 = v13;
  return _ViewListOutputs.multiModifier<A>(_:inputs:)(&v18, &v19);
}

uint64_t static ViewModifier<>._makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v9 = *a1;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  uint64_t v12 = a2[5];
  int v13 = *((_DWORD *)a2 + 16);
  uint64_t v14 = a2[9];
  char v15 = *((unsigned char *)a2 + 80);
  uint64_t v29 = *a2;
  int v30 = v10;
  uint64_t v31 = v11;
  long long v32 = *(_OWORD *)(a2 + 3);
  uint64_t v33 = v12;
  long long v34 = *((_OWORD *)a2 + 3);
  int v35 = v13;
  uint64_t v36 = v14;
  char v37 = v15;
  LODWORD(v20) = v9;
  uint64_t v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(a7 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v16(&v20, &v29, a5, a7);
  uint64_t v20 = v29;
  int v21 = v30;
  uint64_t v22 = v31;
  long long v23 = v32;
  uint64_t v24 = v33;
  long long v25 = v34;
  int v26 = v35;
  uint64_t v27 = v36;
  char v28 = v37;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v17 = swift_bridgeObjectRetain();
  a3(v17, &v20);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)(uint64_t a1, uint64_t *a2)
{
  return closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)(a1, a2, *(_DWORD *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t static _EnvironmentKeyWritingModifier._makeInputs(modifier:inputs:)(_DWORD *a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  type metadata accessor for _EnvironmentKeyWritingModifier();
  uint64_t v4 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v4 - 8);
  int v6 = (char *)v20 - v5;
  uint64_t v7 = type metadata accessor for ChildEnvironment();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  int v10 = (_DWORD *)((char *)v20 - v9);
  LODWORD(a1) = *a1;
  uint64_t v11 = *(void *)(a2 + 16);
  swift_beginAccess();
  LODWORD(v11) = *(_DWORD *)(v11 + 16);
  uint64_t v12 = type metadata accessor for _EnvironmentKeyWritingModifier();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 1, 1, v12);
  ChildEnvironment.init(modifier:env:oldModifier:)((int)a1, v11, (uint64_t)v6, v10);
  uint64_t v22 = v7;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<HoverEffectContext>(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v10, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v21, v7, MEMORY[0x263F8E628], v13, MEMORY[0x263F8E658], v14);
  (*(void (**)(_DWORD *, uint64_t))(v8 + 8))(v10, v7);
  LODWORD(v6) = v20[3];
  uint64_t v15 = MEMORY[0x263F8EE78];
  unint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for Attribute<HoverEffectContext>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = v6;
  *(void *)(v17 + 24) = v15;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_WORD *)(v17 + 80) = 256;
  *(void *)(v17 + 88) = v16;
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = v17;
  int v19 = *(_DWORD *)(a2 + 32);
  if ((v19 & 0x20) == 0) {
    *(_DWORD *)(a2 + 32) = v19 | 0x20;
  }
  return result;
}

void type metadata accessor for Attribute<HoverEffectContext>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<ResolvedShapeStyles, Attribute<_ShapeStyle_Pack>>();
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    unint64_t v4 = (unint64_t)(v3 + 8);
    unint64_t v5 = (_DWORD *)(a1 + 56);
    while (1)
    {
      uint64_t v23 = v1;
      uint64_t v6 = *(v5 - 6);
      uint64_t v7 = *(v5 - 5);
      uint64_t v8 = *(v5 - 4);
      uint64_t v9 = *(v5 - 3);
      uint64_t v10 = *(v5 - 2);
      uint64_t v11 = *((unsigned __int8 *)v5 - 4);
      char v12 = *((unsigned char *)v5 - 3);
      int v13 = *v5;
      unint64_t v14 = v4 & 0xFFFF000000000000 | v10 | (v11 << 32);
      uint64_t v15 = 0x10000000000;
      if (!v12) {
        uint64_t v15 = 0;
      }
      unint64_t v22 = v15 | v14;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6 | (v7 << 32), v8 | (v9 << 32), v15 | v14);
      if (v17) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v18 = v3[6] + 24 * result;
      *(_DWORD *)uint64_t v18 = v6;
      *(_DWORD *)(v18 + 4) = v7;
      *(_DWORD *)(v18 + 8) = v8;
      *(_DWORD *)(v18 + 12) = v9;
      *(_DWORD *)(v18 + 16) = v10;
      *(unsigned char *)(v18 + 20) = v11;
      *(unsigned char *)(v18 + 21) = v12;
      *(_DWORD *)(v3[7] + 4 * result) = v13;
      uint64_t v19 = v3[2];
      BOOL v20 = __OFADD__(v19, 1);
      uint64_t v21 = v19 + 1;
      if (v20) {
        goto LABEL_12;
      }
      v3[2] = v21;
      v5 += 7;
      unint64_t v4 = v22;
      uint64_t v1 = v23 - 1;
      if (v23 == 1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t i;
  Swift::UInt v5;
  Swift::UInt8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Spacing.Key, Spacing.Value>, (void (*)(void))lazy protocol witness table accessor for type Spacing.Key and conformance Spacing.Key);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 40; ; i += 56)
    {
      unint64_t v5 = *(void *)(i - 8);
      uint64_t v6 = *(unsigned char *)i;
      uint64_t v7 = *(void *)(i + 8);
      uint64_t v8 = *(void *)(i + 16);
      uint64_t v9 = *(void *)(i + 24);
      uint64_t v10 = *(void *)(i + 32);
      uint64_t v11 = *(unsigned char *)(i + 40);
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, *(unsigned char *)i);
      if (v13) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      unint64_t v14 = v3[6] + 16 * result;
      *(void *)unint64_t v14 = v5;
      *(unsigned char *)(v14 + 8) = v6;
      uint64_t v15 = v3[7] + 40 * result;
      *(void *)uint64_t v15 = v7;
      *(void *)(v15 + 8) = v8;
      *(void *)(v15 + 16) = v9;
      *(void *)(v15 + 24) = v10;
      *(unsigned char *)(v15 + 32) = v11;
      unint64_t v16 = v3[2];
      char v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17) {
        goto LABEL_10;
      }
      v3[2] = v18;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(void))type metadata accessor for _DictionaryStorage<RBDisplayListRenderKey, Any>, (unint64_t *)&lazy cache variable for type metadata for (RBDisplayListRenderKey, Any), type metadata accessor for RBDisplayListRenderKey, specialized __RawDictionaryStorage.find<A>(_:));
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<CFStringRef, Any>();
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  unint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  unint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (RBImageRendererProperty, Any)(v6, (uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for (CFStringRef, Any), type metadata accessor for CFStringRef);
    uint64_t v7 = v13;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    uint64_t v11 = __OFADD__(v10, 1);
    char v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, AccessibilityCustomAttributes.Value>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, [String : CGFloat]>, (void (*)(uint64_t))type metadata accessor for [String : CGFloat]);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    unint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    _DWORD *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    char v12 = __OFADD__(v11, 1);
    int v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, CGFloat>();
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    unint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    _DWORD *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    char v12 = __OFADD__(v11, 1);
    int v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  void v26[2];

  type metadata accessor for (String, AccessibilityCustomAttributes.Value)(0);
  uint64_t v3 = v2;
  unint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (void *)((char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, AccessibilityCustomAttributes.Value>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, AccessibilityCustomAttributes.Value>, (void (*)(uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = (uint64_t)v6 + *(int *)(v3 + 48);
  uint64_t v11 = v7 + 64;
  char v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v26[1] = a1;
  int v13 = a1 + v12;
  unint64_t v14 = *(void *)(v4 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of TypesettingLanguage(v13, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for (String, AccessibilityCustomAttributes.Value));
    uint64_t v15 = *v6;
    unint64_t v16 = v6[1];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v6, v16);
    if (v18) {
      break;
    }
    uint64_t v19 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    BOOL v20 = (uint64_t *)(v8[6] + 16 * result);
    *BOOL v20 = v15;
    v20[1] = v16;
    uint64_t v21 = v8[7];
    unint64_t v22 = type metadata accessor for AccessibilityCustomAttributes.Value();
    unint64_t result = outlined init with take of AccessibilityCustomAttributes.Value(v10, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v19, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
    uint64_t v23 = v8[2];
    uint64_t v24 = __OFADD__(v23, 1);
    long long v25 = v23 + 1;
    if (v24) {
      goto LABEL_11;
    }
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  _OWORD *i;
  unsigned __int8 v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  long long v11;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<ScrollAnchorStorage.Role, UnitPoint>, (void (*)(void))lazy protocol witness table accessor for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_OWORD *)(a1 + 40); ; i = (_OWORD *)((char *)i + 24))
    {
      unint64_t v5 = *((unsigned char *)i - 8);
      uint64_t v11 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(unsigned char *)(v3[6] + result) = v5;
      *(_OWORD *)(v3[7] + 16 * result) = v11;
      uint64_t v8 = v3[2];
      uint64_t v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  long long v12;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<ObjectIdentifier, Any>();
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 32; ; i += 40)
    {
      outlined init with copy of (String, Any)(i, (uint64_t)&v11, &lazy cache variable for type metadata for (ObjectIdentifier, Any));
      unint64_t v5 = v11;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      unint64_t result = (unint64_t)outlined init with take of Any(&v12, (_OWORD *)(v3[7] + 32 * result));
      uint64_t v8 = v3[2];
      uint64_t v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t i;
  Swift::UInt v5;
  Swift::UInt v6;
  unint64_t result;
  char v8;
  Swift::UInt *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  Swift::UInt v13;
  Swift::UInt v14;
  long long v15;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for [EventID : EventType](0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, EventType>, MEMORY[0x263F8DFB0]);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 32; ; i += 56)
    {
      outlined init with copy of (EventID, EventType)(i, (uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for (EventID, EventType), (unint64_t *)&lazy cache variable for type metadata for EventType);
      unint64_t v5 = v13;
      uint64_t v6 = v14;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = (Swift::UInt *)(v3[6] + 16 * result);
      *uint64_t v9 = v5;
      v9[1] = v6;
      unint64_t result = outlined init with take of ScrollStateRequest(&v15, v3[7] + 40 * result);
      uint64_t v10 = v3[2];
      uint64_t v11 = __OFADD__(v10, 1);
      char v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  _OWORD *i;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  long long v22;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<_ProposedSize, ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer>();
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_OWORD *)(a1 + 104); ; i = (_OWORD *)((char *)i + 88))
    {
      BOOL v20 = v1;
      unint64_t v5 = *((void *)i - 9);
      uint64_t v6 = *((unsigned char *)i - 64);
      uint64_t v7 = *((void *)i - 7);
      uint64_t v8 = *((unsigned char *)i - 48);
      uint64_t v9 = *((void *)i - 5);
      uint64_t v10 = *((void *)i - 4);
      char v12 = *((void *)i - 3);
      uint64_t v11 = *((void *)i - 2);
      uint64_t v21 = *((unsigned char *)i - 8);
      unint64_t v22 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, v7, v8);
      if (v14) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v15 = v3[6] + 32 * result;
      *(void *)uint64_t v15 = v5;
      *(unsigned char *)(v15 + 8) = v6;
      *(void *)(v15 + 16) = v7;
      *(unsigned char *)(v15 + 24) = v8;
      unint64_t v16 = v3[7] + 56 * result;
      *(void *)unint64_t v16 = v9;
      *(void *)(v16 + 8) = v10;
      *(void *)(v16 + 16) = v12;
      *(void *)(v16 + 24) = v11;
      *(unsigned char *)(v16 + 32) = v21;
      *(_OWORD *)(v16 + 40) = v22;
      char v17 = v3[2];
      uint64_t v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_10;
      }
      v3[2] = v19;
      swift_retain();
      uint64_t v1 = v20 - 1;
      if (v20 == 1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, type metadata accessor for _DictionaryStorage<CFStringRef, [CFStringRef : CGFloat]>);
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<CFStringRef, CGFloat>();
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    unint64_t v5 = *v4;
    uint64_t v6 = (id)*(v4 - 1);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    uint64_t v11 = __OFADD__(v10, 1);
    char v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, type metadata accessor for _DictionaryStorage<CFStringRef, [String : Any]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(void))type metadata accessor for _DictionaryStorage<CFStringRef, [String]>);
}

{
  uint64_t v1;
  void *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  long long v12;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for [ObjectIdentifier : ScrollStateRequest](0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ScrollStateRequest>, MEMORY[0x263F8DFB0]);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 32; ; i += 48)
    {
      outlined init with copy of (EventID, EventType)(i, (uint64_t)&v11, (unint64_t *)&lazy cache variable for type metadata for (ObjectIdentifier, ScrollStateRequest), (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest);
      unint64_t v5 = v11;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      unint64_t result = outlined init with take of ScrollStateRequest(&v12, v3[7] + 40 * result);
      uint64_t v8 = v3[2];
      uint64_t v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, Any>();
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  unint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  unint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v6, (uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    char v12 = v3[2];
    int v13 = __OFADD__(v12, 1);
    unint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t i;
  char v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  type metadata accessor for _DictionaryStorage<ScrollTargetRole.Role, [ScrollableCollection]>();
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unint64_t v4 = *(void *)(a1 + 40);
  if (!v4) {
    return (unint64_t)v3;
  }
  for (i = a1 + 32; ; i += 16)
  {
    uint64_t v6 = *(unsigned char *)i;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned char *)i);
    if (v8) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v6;
    *(void *)(v3[7] + 8 * result) = v4;
    uint64_t v9 = v3[2];
    uint64_t v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_13;
    }
    v3[2] = v11;
    if (!--v1)
    {
      swift_bridgeObjectRetain();
      return (unint64_t)v3;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = *(void *)(i + 24);
    if (!v4) {
      return (unint64_t)v3;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  unsigned char *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Font.RatioKey, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type Font.RatioKey and conformance Font.RatioKey);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unint64_t v4 = (unsigned __int8 *)(a1 + 32);
  swift_retain();
  while (1)
  {
    unint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    uint64_t v7 = *((void *)v4 + 1);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5 | (unsigned __int16)(v6 << 8));
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (unsigned char *)(v2[6] + 2 * result);
    _DWORD *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    char v12 = __OFADD__(v11, 1);
    int v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, SystemColorType>();
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    unint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    _DWORD *v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    char v12 = __OFADD__(v11, 1);
    int v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef, [AGAttribute : WeakBox<AttributeInfoTrace.Scope>]>, (void (*)(uint64_t))type metadata accessor for [AGAttribute : WeakBox<AttributeInfoTrace.Scope>]);
}

{
  void *v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_13;
  }
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, [(_:)]>(0, &lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef, AttributeInfoTrace.Scope>, type metadata accessor for AGSubgraphRef, (void (*)(uint64_t))type metadata accessor for AttributeInfoTrace.Scope, (void (*)(void))lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unint64_t result = swift_retain();
  unint64_t v5 = 0;
  uint64_t v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v7 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    uint64_t v8 = (void *)*(v6 - 1);
    uint64_t v9 = *v6;
    if (!v8)
    {
      swift_retain();
LABEL_12:
      swift_release();
      goto LABEL_13;
    }
    uint64_t v10 = v8;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
    if (v11) {
      goto LABEL_15;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v12 = 8 * result;
    *(void *)(v2[6] + v12) = v10;
    *(void *)(v2[7] + v12) = v9;
    int v13 = v2[2];
    unint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_16;
    }
    v2[2] = v15;
    v6 += 2;
    ++v5;
    if (v7 == v3) {
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef, [AttributeInfoTrace.Scope]>, type metadata accessor for [AttributeInfoTrace.Scope]);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef, [(_:)]>, type metadata accessor for [(_:)]);
}

{
  void *v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_11;
  }
  type metadata accessor for _DictionaryStorage<String, AttributeInfoTrace.History>();
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unint64_t result = swift_retain();
  unint64_t v5 = 0;
  uint64_t v6 = (_DWORD *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    uint64_t v8 = *((void *)v6 - 2);
    if (!v8) {
      goto LABEL_9;
    }
    uint64_t v9 = *((void *)v6 - 3);
    uint64_t v10 = *((void *)v6 - 1);
    uint64_t v11 = *v6;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
    if (v12) {
      goto LABEL_13;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    int v13 = (uint64_t *)(v2[6] + 16 * result);
    *int v13 = v9;
    v13[1] = v8;
    unint64_t v14 = v2[7] + 12 * result;
    *(void *)unint64_t v14 = v10;
    *(_DWORD *)(v14 + 8) = v11;
    uint64_t v15 = v2[2];
    unint64_t v16 = __OFADD__(v15, 1);
    char v17 = v15 + 1;
    if (v16) {
      goto LABEL_14;
    }
    v6 += 8;
    v2[2] = v17;
    ++v5;
    if (v7 == v3)
    {
LABEL_9:
      swift_release();
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  unsigned char *v6;
  uint64_t v7;
  void *v8;
  char v9;
  id v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_11;
  }
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, Bool>();
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unint64_t result = swift_retain();
  unint64_t v5 = 0;
  uint64_t v6 = (unsigned char *)(a1 + 40);
  while (1)
  {
    uint64_t v7 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    uint64_t v8 = (void *)*((void *)v6 - 1);
    if (!v8) {
      goto LABEL_9;
    }
    uint64_t v9 = *v6;
    uint64_t v10 = v8;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
    if (v11) {
      goto LABEL_13;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v10;
    *(unsigned char *)(v2[7] + result) = v9;
    char v12 = v2[2];
    int v13 = __OFADD__(v12, 1);
    unint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_14;
    }
    v2[2] = v14;
    v6 += 16;
    ++v5;
    if (v7 == v3)
    {
LABEL_9:
      swift_release();
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_11;
  }
  type metadata accessor for _DictionaryStorage<String, UInt32>();
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unint64_t result = swift_retain();
  unint64_t v5 = 0;
  uint64_t v6 = (_DWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    uint64_t v8 = *((void *)v6 - 1);
    if (!v8) {
      goto LABEL_9;
    }
    uint64_t v9 = *((void *)v6 - 2);
    uint64_t v10 = *v6;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
    if (v11) {
      goto LABEL_13;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v12 = (uint64_t *)(v2[6] + 16 * result);
    *char v12 = v9;
    v12[1] = v8;
    *(_DWORD *)(v2[7] + 4 * result) = v10;
    int v13 = v2[2];
    unint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_14;
    }
    v6 += 6;
    v2[2] = v15;
    ++v5;
    if (v7 == v3)
    {
LABEL_9:
      swift_release();
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<_ProposedSize, CGSize>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable2, WeakBox<AnyLocationBase>>, type metadata accessor for WeakBox<AnyLocationBase>, (void (*)(void))lazy protocol witness table accessor for type AnyHashable2 and conformance AnyHashable2);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  unint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  unint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of TypesettingLanguage(v6, (uint64_t)&v13, (uint64_t (*)(void))type metadata accessor for (AnyHashable2, WeakBox<AnyLocationBase>));
    uint64_t v7 = v13;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = outlined init with take of AccessibilityCustomAttributes.Value((uint64_t)&v14, v3[7] + 8 * result, (uint64_t (*)(void))type metadata accessor for WeakBox<AnyLocationBase>);
    uint64_t v10 = v3[2];
    uint64_t v11 = __OFADD__(v10, 1);
    char v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 16;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(void))type metadata accessor for _DictionaryStorage<RBImageRendererProperty, Any>, (unint64_t *)&lazy cache variable for type metadata for (RBImageRendererProperty, Any), type metadata accessor for RBImageRendererProperty, specialized __RawDictionaryStorage.find<A>(_:));
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  void *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<CFStringRef, String>();
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    unint64_t v5 = *(v4 - 1);
    uint64_t v6 = *v4;
    uint64_t v7 = (id)*(v4 - 2);
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v7;
    uint64_t v10 = (void *)(v2[7] + 16 * result);
    _DWORD *v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v2[2];
    char v12 = __OFADD__(v11, 1);
    int v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  type metadata accessor for [CFStringRef? : Int](0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CFStringRef?, Int>, MEMORY[0x263F8DFB0]);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    unint64_t v5 = (void *)*(v4 - 1);
    uint64_t v6 = *v4;
    uint64_t v7 = v5;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v5;
    *(void *)(v2[7] + v10) = v6;
    uint64_t v11 = v2[2];
    char v12 = __OFADD__(v11, 1);
    int v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 2;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, type metadata accessor for _DictionaryStorage<CFStringRef, [CFStringRef? : Int]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, type metadata accessor for _DictionaryStorage<CFStringRef, [CFDictionaryRef]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(void))type metadata accessor for _DictionaryStorage<RBSymbolAnimationOptionKey, Any>, &lazy cache variable for type metadata for (RBSymbolAnimationOptionKey, Any), type metadata accessor for RBSymbolAnimationOptionKey, specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(void))type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>, (unint64_t *)&lazy cache variable for type metadata for (NSAttributedStringKey, Any), type metadata accessor for NSAttributedStringKey, specialized __RawDictionaryStorage.find<A>(_:));
}

{
  void *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, [(_:)]>(0, &lazy cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, CGColorRef>, type metadata accessor for NSAttributedStringKey, type metadata accessor for CGColorRef, (void (*)(void))lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    unint64_t v5 = *v4;
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = v5;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    char v12 = __OFADD__(v11, 1);
    int v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(void))type metadata accessor for _DictionaryStorage<AGDescriptionOption, Any>, (unint64_t *)&lazy cache variable for type metadata for (AGDescriptionOption, Any), type metadata accessor for AGDescriptionOption, specialized __RawDictionaryStorage.find<A>(_:));
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, String>();
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    unint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    char v12 = (void *)(v2[7] + 16 * result);
    *char v12 = v8;
    v12[1] = v7;
    int v13 = v2[2];
    unint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<GestureDependency, Int>, (void (*)(void))lazy protocol witness table accessor for type GestureDependency and conformance GestureDependency);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unint64_t v4 = (uint64_t *)(a1 + 40);
  do
  {
    unint64_t v5 = *((unsigned __int8 *)v4 - 8);
    if (v5 == 4) {
      break;
    }
    uint64_t v6 = *v4;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*((unsigned __int8 *)v4 - 8));
    if (v8)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v5;
    *(void *)(v3[7] + 8 * result) = v6;
    uint64_t v9 = v3[2];
    uint64_t v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v4 += 2;
    v3[2] = v11;
    --v1;
  }
  while (v1);
  return (unint64_t)v3;
}

{
  uint64_t v1;
  void *v3;
  _DWORD *i;
  uint64_t v5;
  int v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<ObjectIdentifier, UInt32>();
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_DWORD *)(a1 + 40); ; i += 4)
    {
      unint64_t v5 = *((void *)i - 1);
      uint64_t v6 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      *(_DWORD *)(v3[7] + 4 * result) = v6;
      uint64_t v9 = v3[2];
      uint64_t v10 = __OFADD__(v9, 1);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *i;
  Swift::UInt v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<CAHostingLayerEvent.MouseButton, Int>, (void (*)(void))lazy protocol witness table accessor for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      unint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      uint64_t v11 = __OFADD__(v10, 1);
      char v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Int>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      unint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      uint64_t v11 = __OFADD__(v10, 1);
      char v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, Transaction>, (void (*)(void))lazy protocol witness table accessor for type _ProposedSize and conformance _ProposedSize);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    unint64_t v4 = (void *)(a1 + 64);
    while (1)
    {
      unint64_t v5 = *(v4 - 4);
      uint64_t v7 = *(v4 - 2);
      uint64_t v8 = *((unsigned char *)v4 - 8);
      uint64_t v9 = *v4;
      uint64_t v6 = *((unsigned char *)v4 - 24);
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, v7, v8);
      if (v11) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      char v12 = v3[6] + 32 * result;
      *(void *)char v12 = v5;
      *(unsigned char *)(v12 + 8) = v6;
      *(void *)(v12 + 16) = v7;
      *(unsigned char *)(v12 + 24) = v8;
      *(void *)(v3[7] + 8 * result) = v9;
      int v13 = v3[2];
      unint64_t v14 = __OFADD__(v13, 1);
      uint64_t v15 = v13 + 1;
      if (v14) {
        goto LABEL_10;
      }
      v4 += 5;
      v3[2] = v15;
      swift_retain();
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  _OWORD *i;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  long long v15;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<_ProposedSize, CGSize>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, CGSize>, type metadata accessor for CGSize, (void (*)(void))lazy protocol witness table accessor for type _ProposedSize and conformance _ProposedSize);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_OWORD *)(a1 + 64); ; i += 3)
    {
      unint64_t v5 = *((void *)i - 4);
      uint64_t v6 = *((unsigned char *)i - 24);
      uint64_t v7 = *((void *)i - 2);
      uint64_t v8 = *((unsigned char *)i - 8);
      uint64_t v15 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, v7, v8);
      if (v10) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v11 = v3[6] + 32 * result;
      *(void *)uint64_t v11 = v5;
      *(unsigned char *)(v11 + 8) = v6;
      *(void *)(v11 + 16) = v7;
      *(unsigned char *)(v11 + 24) = v8;
      *(_OWORD *)(v3[7] + 16 * result) = v15;
      char v12 = v3[2];
      int v13 = __OFADD__(v12, 1);
      unint64_t v14 = v12 + 1;
      if (v13) {
        goto LABEL_10;
      }
      v3[2] = v14;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

uint64_t destroy for ChildEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (uint64_t *)((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + (v5 | 7) + 4) & ~(v5 | 7));
  uint64_t v7 = ~v5;
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
  {
    uint64_t v11 = *(void *)(*(void *)(a2 + 16) - 8);
    uint64_t result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)v6 + v5 + 8) & v7);
    uint64_t v4 = v11;
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v8 = *v6;
  if ((unint64_t)*v6 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  uint64_t result = (v8 + 1);
  if (v8 == -1)
  {
LABEL_7:
    uint64_t v12 = v4;
    swift_release();
    uint64_t v10 = *(uint64_t (**)(unint64_t, uint64_t))(v12 + 8);
    return v10(((unint64_t)v6 + v5 + 8) & v7, v2);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t vars8;

  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2)) {
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  }

  return swift_release();
}

uint64_t ChildEnvironment.init(modifier:env:oldModifier:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  uint64_t v5 = (char *)a4 + *(int *)(type metadata accessor for ChildEnvironment() + 32);
  type metadata accessor for _EnvironmentKeyWritingModifier();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);

  return v7(v5, a3, v6);
}

uint64_t type metadata accessor for ChildEnvironment()
{
  return __swift_instantiateGenericMetadata();
}

{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _EnvironmentKeyWritingModifier<A>(_DWORD *a1, uint64_t a2)
{
  return static _EnvironmentKeyWritingModifier._makeInputs(modifier:inputs:)(a1, a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, _OWORD *))
{
  uint64_t v7 = *a1;
  long long v8 = *(_OWORD *)(a2 + 48);
  long long v11[2] = *(_OWORD *)(a2 + 32);
  v11[3] = v8;
  v11[4] = *(_OWORD *)(a2 + 64);
  int v12 = *(_DWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v9;
  return a7(v7, v11);
}

unint64_t lazy protocol witness table accessor for type MergedEnvironment and conformance MergedEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type MergedEnvironment and conformance MergedEnvironment;
  if (!lazy protocol witness table cache variable for type MergedEnvironment and conformance MergedEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MergedEnvironment and conformance MergedEnvironment);
  }
  return result;
}

uint64_t TransitionBox.visitBase<A>(applying:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t))(a3 + 8))(v3 + *(void *)(*(void *)v3 + 136), *(void *)(*(void *)v3 + 120), *(void *)(*(void *)v3 + 128), a2, a3);
}

uint64_t DynamicLayoutViewAdaptor.MakeTransition.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v8 = type metadata accessor for ViewListTransition();
  uint64_t v46 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unsigned int v45 = (char *)&v43 - v9;
  uint64_t v10 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v11);
  int v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = a3;
  uint64_t v14 = type metadata accessor for TransitionHelper();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  char v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20.n128_f64[0] = MEMORY[0x270FA5388](v18);
  unint64_t v22 = (char *)&v43 - v21;
  if (*((unsigned char *)v4 + 76)) {
    int v23 = *MEMORY[0x263F288F8];
  }
  else {
    int v23 = *((_DWORD *)v4 + 18);
  }
  uint64_t v24 = *v4;
  uint64_t v25 = a1;
  uint64_t v26 = v19;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v13, v25, a2, v20);
  *(_DWORD *)unint64_t v22 = v23;
  *(void *)(v22 + 4) = v24;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v22[*(int *)(v26 + 44)], v13, a2);
  v22[*(int *)(v26 + 48)] = 1;
  if (v4[25])
  {
    DynamicLayoutViewAdaptor.MakeTransition.makeArchivedTransition<A>(helper:)((uint64_t)v22, a2, v47);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v22, v26);
  }
  else
  {
    uint64_t v44 = v15;
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v22, v26);
    char v28 = *(uint64_t (**)(char *, char *, uint64_t))(v15 + 32);
    uint64_t v29 = (uint64_t)v45;
    uint64_t v30 = v28(v45, v17, v26);
    MEMORY[0x270FA5388](v30);
    uint64_t v43 = v26;
    *(&v43 - 4) = swift_getAssociatedTypeWitness();
    *(&v43 - 3) = v8;
    *(&v43 - 2) = swift_getWitnessTable();
    uint64_t v31 = type metadata accessor for Attribute();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v29, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)(&v43 - 6), v8, MEMORY[0x263F8E628], v31, MEMORY[0x263F8E658], v32);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v29, v8);
    _GraphValue.init(_:)(v50, &v48);
    int v33 = *((_DWORD *)v4 + 22);
    uint64_t v34 = v4[12];
    uint64_t v35 = v4[15];
    uint64_t v36 = v4[16];
    int v37 = *((_DWORD *)v4 + 40);
    uint64_t v50 = v4[10];
    int v51 = v33;
    uint64_t v52 = v34;
    long long v53 = *(_OWORD *)(v4 + 13);
    uint64_t v54 = v35;
    uint64_t v55 = v36;
    long long v56 = *(_OWORD *)(v4 + 17);
    uint64_t v57 = v4[19];
    int v58 = v37;
    uint64_t v38 = v4[21];
    uint64_t v39 = v4[22];
    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = v38;
    *(void *)(v40 + 24) = v39;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    static Transition.makeView(view:inputs:body:)(&v48, &v50, (uint64_t)partial apply for closure #1 in DynamicLayoutViewAdaptor.MakeTransition.visit<A>(_:), v40, v49);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v22, v43);
    double v41 = v49[0];
    double v42 = v49[1];
    uint64_t result = swift_bridgeObjectRelease();
    *((double *)v4 + 23) = v41;
    *((double *)v4 + 24) = v42;
  }
  return result;
}

uint64_t type metadata accessor for ViewListTransition()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Attribute.makeReusable(indirectMap:)(uint64_t a1)
{
  uint64_t v2 = v1;
  unsigned int v4 = *v1;
  swift_beginAccess();
  uint64_t v5 = *(void *)(a1 + 24);
  if (*(void *)(v5 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v7 & 1) != 0))
  {
    int IndirectAttribute2 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v6);
  }
  else
  {
    swift_endAccess();
    AGGraphClearUpdate();
    id v9 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    int IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(IndirectAttribute2, v4, isUniquelyReferenced_nonNull_native);
    *(void *)(a1 + 24) = v12;
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_endAccess();
  *uint64_t v2 = IndirectAttribute2;
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<AGAttribute>();
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unsigned int v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
    uint64_t result = MEMORY[0x24C5248C0](*(void *)(v4 + 40), v18, 4);
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<Int>(0, &lazy cache variable for type metadata for _SetStorage<ObjectIdentifier>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_33:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_22;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v15 >= v10) {
      goto LABEL_31;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_31;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16) {
        break;
      }
    }
LABEL_21:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_22:
    unsigned int v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_34;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 2;
  if (v17 >= v10)
  {
LABEL_31:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_33;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_31;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_21;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::UInt32 v20;
  Swift::UInt32 v21;
  Swift::UInt32 v22;
  Swift::UInt32 v23;
  Swift::UInt8 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<EventID>(0, &lazy cache variable for type metadata for _SetStorage<DisplayList.ViewUpdater.ViewCache.Key>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v32 = v2 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  int v33 = (unint64_t)(v6 + 63) >> 6;
  unint64_t v9 = result + 56;
  while (1)
  {
    if (v8)
    {
      unint64_t v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      uint64_t v34 = v5;
      unint64_t v13 = v12 | (v5 << 6);
      goto LABEL_24;
    }
    unint64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v33) {
      goto LABEL_33;
    }
    int64_t v15 = *(void *)(v32 + 8 * v14);
    unint64_t v16 = v5 + 1;
    if (!v15)
    {
      unint64_t v16 = v14 + 1;
      if (v14 + 1 >= v33) {
        goto LABEL_33;
      }
      int64_t v15 = *(void *)(v32 + 8 * v16);
      if (!v15)
      {
        unint64_t v16 = v14 + 2;
        if (v14 + 2 >= v33) {
          goto LABEL_33;
        }
        int64_t v15 = *(void *)(v32 + 8 * v16);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v8 = (v15 - 1) & v15;
    uint64_t v34 = v16;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_24:
    unsigned int v18 = v2;
    uint64_t v19 = *(void *)(v2 + 48) + 20 * v13;
    unint64_t v20 = *(_DWORD *)v19;
    unint64_t v21 = *(_DWORD *)(v19 + 4);
    char v22 = *(_DWORD *)(v19 + 8);
    unint64_t v23 = *(_DWORD *)(v19 + 12);
    BOOL v24 = *(unsigned char *)(v19 + 16);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v20);
    Hasher._combine(_:)(v21);
    Hasher._combine(_:)(v22);
    Hasher._combine(_:)(v23);
    Hasher._combine(_:)(v24);
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v26 = result & ~v25;
    uint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6))) != 0)
    {
      int64_t v10 = __clz(__rbit64((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v30 = v27 == v29;
        if (v27 == v29) {
          uint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v9 + 8 * v27);
      }
      while (v31 == -1);
      int64_t v10 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v9 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    uint64_t v11 = *(void *)(v4 + 48) + 20 * v10;
    *(_DWORD *)uint64_t v11 = v20;
    *(_DWORD *)(v11 + 4) = v21;
    *(_DWORD *)(v11 + 8) = v22;
    *(_DWORD *)(v11 + 12) = v23;
    *(unsigned char *)(v11 + 16) = v24;
    ++*(void *)(v4 + 16);
    uint64_t v2 = v18;
    int64_t v5 = v34;
  }
  int64_t v17 = v14 + 3;
  if (v17 >= v33)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v15 = *(void *)(v32 + 8 * v17);
  if (v15)
  {
    unint64_t v16 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v16 >= v33) {
      goto LABEL_33;
    }
    int64_t v15 = *(void *)(v32 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<Int>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<UInt32>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unsigned int v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
    uint64_t result = MEMORY[0x24C5248C0](*(void *)(v4 + 40), v18, 4);
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  long long v15;
  long long v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<EventID>(0, &lazy cache variable for type metadata for _SetStorage<Subview.ID>, (void (*)(void))lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_33:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  unint64_t v9 = (unint64_t)(v5 + 63) >> 6;
  int64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  unint64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      int64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unsigned int v18 = v17 | (v12 << 6);
      goto LABEL_22;
    }
    uint64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v19 >= v9) {
      goto LABEL_31;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      unint64_t v12 = v19 + 1;
      if (v19 + 1 >= v9) {
        goto LABEL_31;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v12);
      if (!v20) {
        break;
      }
    }
LABEL_21:
    uint64_t v8 = (v20 - 1) & v20;
    unsigned int v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_22:
    outlined init with copy of Subview.ID(*(void *)(v2 + 48) + 40 * v18, (uint64_t)v29);
    Hasher.init(_seed:)();
    AnyHashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    char v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    BOOL v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_34;
        }
        uint64_t v27 = v24 == v26;
        if (v24 == v26) {
          BOOL v24 = 0;
        }
        v25 |= v27;
        char v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    unint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
    int64_t v15 = v29[0];
    unint64_t v16 = v29[1];
    *(void *)(v14 + 32) = v30;
    *(_OWORD *)unint64_t v14 = v15;
    *(_OWORD *)(v14 + 16) = v16;
    ++*(void *)(v4 + 16);
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v9)
  {
LABEL_31:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_33;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    unint64_t v12 = v21;
    goto LABEL_21;
  }
  while (1)
  {
    unint64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_31;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_21;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  long long v15;
  long long v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<Int>(0, &lazy cache variable for type metadata for _SetStorage<AnyHashable>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_33:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  unint64_t v9 = (unint64_t)(v5 + 63) >> 6;
  int64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  unint64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      int64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unsigned int v18 = v17 | (v12 << 6);
      goto LABEL_22;
    }
    uint64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v19 >= v9) {
      goto LABEL_31;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      unint64_t v12 = v19 + 1;
      if (v19 + 1 >= v9) {
        goto LABEL_31;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v12);
      if (!v20) {
        break;
      }
    }
LABEL_21:
    uint64_t v8 = (v20 - 1) & v20;
    unsigned int v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_22:
    outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v18, (uint64_t)v29);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
    char v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    BOOL v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_34;
        }
        uint64_t v27 = v24 == v26;
        if (v24 == v26) {
          BOOL v24 = 0;
        }
        v25 |= v27;
        char v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    unint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
    int64_t v15 = v29[0];
    unint64_t v16 = v29[1];
    *(void *)(v14 + 32) = v30;
    *(_OWORD *)unint64_t v14 = v15;
    *(_OWORD *)(v14 + 16) = v16;
    ++*(void *)(v4 + 16);
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v9)
  {
LABEL_31:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_33;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    unint64_t v12 = v21;
    goto LABEL_21;
  }
  while (1)
  {
    unint64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_31;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_21;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  int64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  type metadata accessor for _SetStorage<Duration.UnitsFormatStyle.Unit>();
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  unint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  int v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  unint64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unsigned int v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    unint64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      unint64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        unint64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    unint64_t v23 = v6;
    BOOL v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x263F07EC8]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v27 = result & ~v26;
    char v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          char v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      int64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  char v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    unint64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  int64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  type metadata accessor for _SetStorage<Date.ComponentsFormatStyle.Field>();
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  unint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  int v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  unint64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unsigned int v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    unint64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      unint64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        unint64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    unint64_t v23 = v6;
    BOOL v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v27 = result & ~v26;
    char v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          char v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      int64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  char v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    unint64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<AGTypeID>();
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unsigned int v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::UInt64 *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt64 *v18;
  Swift::UInt64 v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<EventID>(0, &lazy cache variable for type metadata for _SetStorage<Text.Effect.RelativeIdentifierKey>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  char v28 = (unint64_t)(v7 + 63) >> 6;
  int64_t v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v28) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v28) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v28) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unsigned int v18 = (Swift::UInt64 *)(*(void *)(v2 + 48) + 16 * v14);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v19);
    Hasher._combine(_:)(v20);
    uint64_t result = Hasher._finalize()();
    unint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    char v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      uint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    unint64_t v12 = (Swift::UInt64 *)(*(void *)(v4 + 48) + 16 * v11);
    *unint64_t v12 = v19;
    v12[1] = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v28)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v28) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<Int>(0, &lazy cache variable for type metadata for _SetStorage<Int>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unsigned int v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  int64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  type metadata accessor for _SetStorage<UUID>();
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  unint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  int v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  unint64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unsigned int v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    unint64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      unint64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        unint64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    unint64_t v23 = v6;
    BOOL v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v27 = result & ~v26;
    char v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          char v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      int64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  char v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    unint64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<Int>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v29 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    unint64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      uint64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      int64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        uint64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        int64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v8 = (v17 - 1) & v17;
    int64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    char v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    BOOL v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v27 = v24 == v26;
        if (v24 == v26) {
          BOOL v24 = 0;
        }
        v25 |= v27;
        char v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  unsigned int v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    int64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<CTFontRef>();
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v27 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v27) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= v27) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v11);
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= v27) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    unsigned int v18 = *(void **)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    type metadata accessor for CTFontRef(0);
    lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit((unint64_t *)&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, type metadata accessor for CTFontRef);
    uint64_t v19 = v18;
    _CFObject.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    char v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v23 = 0;
      BOOL v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v25 = v22 == v24;
        if (v22 == v24) {
          char v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v9 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v19;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v27)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v27) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::UInt *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt *v18;
  Swift::UInt v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<EventID>(0, &lazy cache variable for type metadata for _SetStorage<EventID>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  char v28 = (unint64_t)(v7 + 63) >> 6;
  int64_t v10 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v28) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v28) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v28) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unsigned int v18 = (Swift::UInt *)(*(void *)(v2 + 48) + 16 * v14);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v19);
    Hasher._combine(_:)(v20);
    uint64_t result = Hasher._finalize()();
    unint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    char v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      uint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    unint64_t v12 = (Swift::UInt *)(*(void *)(v4 + 48) + 16 * v11);
    *unint64_t v12 = v19;
    v12[1] = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v28)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v28) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<EventID>(0, &lazy cache variable for type metadata for _SetStorage<DefaultDescriptionAttribute>, (void (*)(void))lazy protocol witness table accessor for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  unint64_t v9 = (unint64_t)(v5 + 63) >> 6;
  int64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  unint64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    unint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      unint64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      int64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        unint64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        int64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v8 = (v17 - 1) & v17;
    int64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    uint64_t v19 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    Hasher.init(_seed:)();
    DefaultDescriptionAttribute.rawValue.getter();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    unint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    char v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v23 = 0;
      BOOL v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v25 = v22 == v24;
        if (v22 == v24) {
          char v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(unsigned char *)(*(void *)(v4 + 48) + v13) = v19;
    ++*(void *)(v4 + 16);
  }
  unsigned int v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    unint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    int64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  void *v17;
  id v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<NSAttributedStringKey>();
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v27 = v0;
  char v28 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v7 = v6 & *(void *)(v2 + 56);
  uint64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    unint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v29) {
      goto LABEL_33;
    }
    int64_t v15 = *(void *)(v28 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_33;
      }
      int64_t v15 = *(void *)(v28 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_33;
        }
        int64_t v15 = *(void *)(v28 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    int64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v13);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    unsigned int v18 = v17;
    String.hash(into:)();
    uint64_t v19 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = v19 & ~v20;
    char v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6))) != 0)
    {
      uint64_t v11 = __clz(__rbit64((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v23 = 0;
      BOOL v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v25 = v22 == v24;
        if (v22 == v24) {
          char v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v8 + 8 * v22);
      }
      while (v26 == -1);
      uint64_t v11 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v18;
    ++*(void *)(v4 + 16);
  }
  unint64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v27;
    goto LABEL_35;
  }
  int64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v29) {
      goto LABEL_33;
    }
    int64_t v15 = *(void *)(v28 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<EventID>(0, &lazy cache variable for type metadata for _SetStorage<CAHostingLayerEvent.MouseButton>, (void (*)(void))lazy protocol witness table accessor for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    unsigned int v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<_PaddingLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryLayoutComputer<_PaddingLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<_PaddingLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<_PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<_PaddingLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<_PaddingLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryChildGeometry<_PaddingLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<_PaddingLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryChildGeometry<_PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<_PaddingLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<_FrameLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryLayoutComputer<_FrameLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<_FrameLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<_FrameLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<_FrameLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryChildGeometry<_FrameLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<_FrameLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryChildGeometry<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<_FrameLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

uint64_t partial apply for closure #2 in static Layout.makeStaticView(root:inputs:properties:list:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t *)@<X1>, void *a3@<X8>)
{
  return closure #2 in static Layout.makeStaticView(root:inputs:properties:list:)(a1, a2, *(void *)(v3 + 16), *(uint64_t **)(v3 + 24), *(void ***)(v3 + 32), a3);
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<AGAttribute>();
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    uint64_t v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      unsigned int v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
      uint64_t result = MEMORY[0x24C5248C0](*(void *)(v4 + 40), v18, 4);
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<Int>(0, &lazy cache variable for type metadata for _SetStorage<ObjectIdentifier>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    uint64_t v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_31;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_31;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v17 = v15 + 2;
            if (v17 >= v10)
            {
LABEL_31:
              if (v28 >= 64) {
                bzero((void *)(v2 + 56), 8 * v10);
              }
              else {
                *uint64_t v6 = v26;
              }
              uint64_t v1 = v27;
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v16 = v6[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v5 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_37;
                }
                if (v5 >= v10) {
                  goto LABEL_31;
                }
                unint64_t v16 = v6[v5];
                ++v17;
                if (v16) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v5 = v17;
          }
        }
LABEL_21:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      unsigned int v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::UInt32 v20;
  Swift::UInt32 v21;
  Swift::UInt32 v22;
  Swift::UInt32 v23;
  Swift::UInt8 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  int64_t v35;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<EventID>(0, &lazy cache variable for type metadata for _SetStorage<DisplayList.ViewUpdater.ViewCache.Key>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v34 = (void *)(v2 + 56);
    uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    uint64_t v8 = v7 & *(void *)(v2 + 56);
    int v33 = (unint64_t)(v6 + 63) >> 6;
    unint64_t v9 = result + 56;
    while (1)
    {
      if (v8)
      {
        unint64_t v12 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        uint64_t v35 = v5;
        unint64_t v13 = v12 | (v5 << 6);
      }
      else
      {
        unint64_t v14 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v33) {
          goto LABEL_33;
        }
        int64_t v15 = v34[v14];
        unint64_t v16 = v5 + 1;
        if (!v15)
        {
          unint64_t v16 = v14 + 1;
          if (v14 + 1 >= v33) {
            goto LABEL_33;
          }
          int64_t v15 = v34[v16];
          if (!v15)
          {
            unint64_t v16 = v14 + 2;
            if (v14 + 2 >= v33) {
              goto LABEL_33;
            }
            int64_t v15 = v34[v16];
            if (!v15)
            {
              int64_t v17 = v14 + 3;
              if (v17 >= v33)
              {
LABEL_33:
                uint64_t v32 = 1 << *(unsigned char *)(v2 + 32);
                if (v32 > 63) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v34 = -1 << v32;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v15 = v34[v17];
              if (!v15)
              {
                while (1)
                {
                  unint64_t v16 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v16 >= v33) {
                    goto LABEL_33;
                  }
                  int64_t v15 = v34[v16];
                  ++v17;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v16 = v17;
            }
          }
        }
LABEL_23:
        uint64_t v8 = (v15 - 1) & v15;
        uint64_t v35 = v16;
        unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
      }
      unsigned int v18 = v2;
      uint64_t v19 = *(void *)(v2 + 48) + 20 * v13;
      unint64_t v20 = *(_DWORD *)v19;
      unint64_t v21 = *(_DWORD *)(v19 + 4);
      char v22 = *(_DWORD *)(v19 + 8);
      unint64_t v23 = *(_DWORD *)(v19 + 12);
      BOOL v24 = *(unsigned char *)(v19 + 16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      Hasher._combine(_:)(v21);
      Hasher._combine(_:)(v22);
      Hasher._combine(_:)(v23);
      Hasher._combine(_:)(v24);
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v26 = result & ~v25;
      uint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6))) != 0)
      {
        int64_t v10 = __clz(__rbit64((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            uint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v9 + 8 * v27);
        }
        while (v31 == -1);
        int64_t v10 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v9 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      uint64_t v11 = *(void *)(v4 + 48) + 20 * v10;
      *(_DWORD *)uint64_t v11 = v20;
      *(_DWORD *)(v11 + 4) = v21;
      *(_DWORD *)(v11 + 8) = v22;
      *(_DWORD *)(v11 + 12) = v23;
      *(unsigned char *)(v11 + 16) = v24;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v18;
      int64_t v5 = v35;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  long long v30;
  uint64_t v31;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<EventID>(0, &lazy cache variable for type metadata for _SetStorage<Subview.ID>, (void (*)(void))lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    uint64_t v8 = v7 & *(void *)(v2 + 56);
    unint64_t v9 = (unint64_t)(v5 + 63) >> 6;
    int64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        int64_t v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }
      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          return result;
        }
        if (v17 >= v9) {
          goto LABEL_31;
        }
        unsigned int v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          unint64_t v12 = v17 + 1;
          if (v17 + 1 >= v9) {
            goto LABEL_31;
          }
          unsigned int v18 = v6[v12];
          if (!v18)
          {
            uint64_t v19 = v17 + 2;
            if (v19 >= v9)
            {
LABEL_31:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
              if (v28 > 63) {
                bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v6 = -1 << v28;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unsigned int v18 = v6[v19];
            if (!v18)
            {
              while (1)
              {
                unint64_t v12 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_37;
                }
                if (v12 >= v9) {
                  goto LABEL_31;
                }
                unsigned int v18 = v6[v12];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            unint64_t v12 = v19;
          }
        }
LABEL_21:
        uint64_t v8 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      unint64_t v20 = *(void *)(v2 + 48) + 40 * v16;
      uint64_t v29 = *(_OWORD *)v20;
      uint64_t v30 = *(_OWORD *)(v20 + 16);
      uint64_t v31 = *(void *)(v20 + 32);
      Hasher.init(_seed:)();
      AnyHashable.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      char v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        BOOL v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      unint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
      *(_OWORD *)unint64_t v14 = v29;
      *(_OWORD *)(v14 + 16) = v30;
      *(void *)(v14 + 32) = v31;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  long long v30;
  uint64_t v31;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<Int>(0, &lazy cache variable for type metadata for _SetStorage<AnyHashable>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    uint64_t v8 = v7 & *(void *)(v2 + 56);
    unint64_t v9 = (unint64_t)(v5 + 63) >> 6;
    int64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        int64_t v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }
      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          return result;
        }
        if (v17 >= v9) {
          goto LABEL_31;
        }
        unsigned int v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          unint64_t v12 = v17 + 1;
          if (v17 + 1 >= v9) {
            goto LABEL_31;
          }
          unsigned int v18 = v6[v12];
          if (!v18)
          {
            uint64_t v19 = v17 + 2;
            if (v19 >= v9)
            {
LABEL_31:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
              if (v28 > 63) {
                bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v6 = -1 << v28;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unsigned int v18 = v6[v19];
            if (!v18)
            {
              while (1)
              {
                unint64_t v12 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_37;
                }
                if (v12 >= v9) {
                  goto LABEL_31;
                }
                unsigned int v18 = v6[v12];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            unint64_t v12 = v19;
          }
        }
LABEL_21:
        uint64_t v8 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      unint64_t v20 = *(void *)(v2 + 48) + 40 * v16;
      uint64_t v29 = *(_OWORD *)v20;
      uint64_t v30 = *(_OWORD *)(v20 + 16);
      uint64_t v31 = *(void *)(v20 + 32);
      uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
      unint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      char v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        BOOL v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      unint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
      *(_OWORD *)unint64_t v14 = v29;
      *(_OWORD *)(v14 + 16) = v30;
      *(void *)(v14 + 32) = v31;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  double v42 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  double v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  type metadata accessor for _SetStorage<Duration.UnitsFormatStyle.Unit>();
  int64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    int v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      unint64_t v9 = ~(-1 << v7);
    }
    else {
      unint64_t v9 = -1;
    }
    int64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    uint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    unint64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    int64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        int64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v40 = v13;
        unsigned int v18 = v17 | (v13 << 6);
      }
      else
      {
        uint64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        unint64_t v21 = v13 + 1;
        if (!v20)
        {
          unint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            unint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              char v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  unint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        int64_t v10 = (v20 - 1) & v20;
        uint64_t v40 = v21;
        unsigned int v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      unint64_t v23 = v4;
      BOOL v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x263F07EC8]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      uint64_t v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0;
          }
          v30 |= v32;
          int v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      unint64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  double v42 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  double v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  type metadata accessor for _SetStorage<Date.ComponentsFormatStyle.Field>();
  int64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    int v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      unint64_t v9 = ~(-1 << v7);
    }
    else {
      unint64_t v9 = -1;
    }
    int64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    uint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    unint64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    int64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        int64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v40 = v13;
        unsigned int v18 = v17 | (v13 << 6);
      }
      else
      {
        uint64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        unint64_t v21 = v13 + 1;
        if (!v20)
        {
          unint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            unint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              char v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  unint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        int64_t v10 = (v20 - 1) & v20;
        uint64_t v40 = v21;
        unsigned int v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      unint64_t v23 = v4;
      BOOL v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      uint64_t v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0;
          }
          v30 |= v32;
          int v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      unint64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<Int>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<UInt32>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    uint64_t v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      unsigned int v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
      uint64_t result = MEMORY[0x24C5248C0](*(void *)(v4 + 40), v18, 4);
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<AGTypeID>();
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    uint64_t v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      unsigned int v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::UInt64 *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt64 *v18;
  Swift::UInt64 v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<EventID>(0, &lazy cache variable for type metadata for _SetStorage<Text.Effect.RelativeIdentifierKey>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v29 = (void *)(v2 + 56);
    uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    uint64_t v8 = v7 & *(void *)(v2 + 56);
    unint64_t v9 = (unint64_t)(v6 + 63) >> 6;
    int64_t v10 = result + 56;
    while (1)
    {
      if (v8)
      {
        unint64_t v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v9) {
          goto LABEL_33;
        }
        unint64_t v16 = v29[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v16 = v29[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v16 = v29[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v9)
              {
LABEL_33:
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v29 = -1 << v28;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v29[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v29[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        uint64_t v8 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      unsigned int v18 = (Swift::UInt64 *)(*(void *)(v2 + 48) + 16 * v14);
      uint64_t v19 = *v18;
      unint64_t v20 = v18[1];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v19);
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      unint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      char v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        BOOL v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        uint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      unint64_t v12 = (Swift::UInt64 *)(*(void *)(v4 + 48) + 16 * v11);
      *unint64_t v12 = v19;
      v12[1] = v20;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<Int>(0, &lazy cache variable for type metadata for _SetStorage<Int>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    uint64_t v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      unsigned int v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  double v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  double v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  type metadata accessor for _SetStorage<UUID>();
  int64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    int v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      unint64_t v9 = ~(-1 << v7);
    }
    else {
      unint64_t v9 = -1;
    }
    int64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    uint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    unint64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    int64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        int64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v40 = v13;
        unsigned int v18 = v17 | (v13 << 6);
      }
      else
      {
        uint64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        unint64_t v21 = v13 + 1;
        if (!v20)
        {
          unint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            unint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              char v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  unint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        int64_t v10 = (v20 - 1) & v20;
        uint64_t v40 = v21;
        unsigned int v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      unint64_t v23 = v4;
      BOOL v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      uint64_t v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0;
          }
          v30 |= v32;
          int v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      unint64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<Int>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    uint64_t v8 = (unint64_t)(v5 + 63) >> 6;
    unint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    uint64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        int64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        unint64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        int64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          uint64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          int64_t v17 = v30[v11];
          if (!v17)
          {
            uint64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            int64_t v17 = v30[v11];
            if (!v17)
            {
              unsigned int v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  uint64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  int64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v11 = v18;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v17 - 1) & v17;
        int64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      unint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      char v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      BOOL v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            BOOL v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<CTFontRef>();
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    uint64_t v8 = v7 & *(void *)(v2 + 56);
    unint64_t v9 = (unint64_t)(v5 + 63) >> 6;
    int64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        int64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        unint64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        int64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          unint64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          int64_t v17 = v6[v12];
          if (!v17)
          {
            unint64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            int64_t v17 = v6[v12];
            if (!v17)
            {
              unsigned int v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  unint64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  int64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v12 = v18;
            }
          }
        }
LABEL_23:
        uint64_t v8 = (v17 - 1) & v17;
        int64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      Hasher.init(_seed:)();
      type metadata accessor for CTFontRef(0);
      lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit((unint64_t *)&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, type metadata accessor for CTFontRef);
      _CFObject.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      char v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        BOOL v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v25 = v22 == v24;
          if (v22 == v24) {
            char v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::UInt *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt *v18;
  Swift::UInt v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<EventID>(0, &lazy cache variable for type metadata for _SetStorage<EventID>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v29 = (void *)(v2 + 56);
    uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    uint64_t v8 = v7 & *(void *)(v2 + 56);
    unint64_t v9 = (unint64_t)(v6 + 63) >> 6;
    int64_t v10 = result + 56;
    while (1)
    {
      if (v8)
      {
        unint64_t v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v9) {
          goto LABEL_33;
        }
        unint64_t v16 = v29[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v16 = v29[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v16 = v29[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v9)
              {
LABEL_33:
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v29 = -1 << v28;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v29[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v29[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        uint64_t v8 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      unsigned int v18 = (Swift::UInt *)(*(void *)(v2 + 48) + 16 * v14);
      uint64_t v19 = *v18;
      unint64_t v20 = v18[1];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v19);
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      unint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      char v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        BOOL v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        uint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      unint64_t v12 = (Swift::UInt *)(*(void *)(v4 + 48) + 16 * v11);
      *unint64_t v12 = v19;
      v12[1] = v20;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<EventID>(0, &lazy cache variable for type metadata for _SetStorage<DefaultDescriptionAttribute>, (void (*)(void))lazy protocol witness table accessor for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    uint64_t v8 = v7 & *(void *)(v2 + 56);
    unint64_t v9 = (unint64_t)(v5 + 63) >> 6;
    int64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        int64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        unint64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        int64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          unint64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          int64_t v17 = v6[v12];
          if (!v17)
          {
            unint64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            int64_t v17 = v6[v12];
            if (!v17)
            {
              unsigned int v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  unint64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  int64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v12 = v18;
            }
          }
        }
LABEL_23:
        uint64_t v8 = (v17 - 1) & v17;
        int64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
      Hasher.init(_seed:)();
      DefaultDescriptionAttribute.rawValue.getter();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      unint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      char v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        BOOL v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v25 = v22 == v24;
          if (v22 == v24) {
            char v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(unsigned char *)(*(void *)(v4 + 48) + v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int64_t v28;
  void *v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<NSAttributedStringKey>();
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v27 = v0;
    int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v29 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    uint64_t v28 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        unint64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v28) {
          goto LABEL_33;
        }
        int64_t v15 = v29[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v28) {
            goto LABEL_33;
          }
          int64_t v15 = v29[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v28) {
              goto LABEL_33;
            }
            int64_t v15 = v29[v10];
            if (!v15)
            {
              unint64_t v16 = v14 + 3;
              if (v16 >= v28)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v27;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v29, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v29 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v15 = v29[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v28) {
                    goto LABEL_33;
                  }
                  int64_t v15 = v29[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      int64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      unsigned int v18 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = v18 & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6))) != 0)
      {
        uint64_t v11 = __clz(__rbit64((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v8 + 8 * v21);
        }
        while (v25 == -1);
        uint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<EventID>(0, &lazy cache variable for type metadata for _SetStorage<CAHostingLayerEvent.MouseButton>, (void (*)(void))lazy protocol witness table accessor for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      unsigned int v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<_FlexFrameLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryLayoutComputer<_FlexFrameLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<_FlexFrameLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<_FlexFrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<_FlexFrameLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<_FlexFrameLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryChildGeometry<_FlexFrameLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<_FlexFrameLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryChildGeometry<_FlexFrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<_FlexFrameLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance Spacer@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static PrimitiveSpacer._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for UnaryViewGenerator.makeView(inputs:indirectMap:) in conformance BodyUnaryViewGenerator<A>(uint64_t *a1, uint64_t a2)
{
  return BodyUnaryViewGenerator.makeView(inputs:indirectMap:)(a1, a2, *v2);
}

uint64_t BodyUnaryViewGenerator.makeView(inputs:indirectMap:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t *))
{
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  int v5 = *((_DWORD *)a1 + 20);
  uint64_t v8 = *a1;
  int v9 = v3;
  uint64_t v10 = v4;
  long long v6 = *(_OWORD *)(a1 + 5);
  long long v11 = *(_OWORD *)(a1 + 3);
  long long v12 = v6;
  long long v13 = *(_OWORD *)(a1 + 7);
  uint64_t v14 = a1[9];
  int v15 = v5;
  return a3(&v8);
}

uint64_t partial apply for closure #1 in static ViewModifier.makeUnaryViewList(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in static ViewModifier.makeUnaryViewList(modifier:inputs:body:)(a1, *(void *)(v2 + 48), *(void *)(v2 + 56), a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LayoutPriorityLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t outlined copy of BodyInputElement?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return outlined copy of BodyInputElement();
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in PlaceholderInfo.makeItem(placeholder:seed:)@<X0>(uint64_t *a1@<X0>, void (*a2)(void *__return_ptr, uint64_t *)@<X1>, void *a3@<X8>)
{
  return closure #1 in closure #1 in PlaceholderInfo.makeItem(placeholder:seed:)(a1, a2, *(void *)(v3 + 16), a3);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _AnchorTransformModifier<A, B>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static _AnchorTransformModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(ValueMetadata **)(a4 + 24), *(void *)(a4 + 32), a5);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AnchorGeometryTransformModifier<A>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static AnchorGeometryTransformModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(ValueMetadata **)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t partial apply for closure #1 in static ViewModifierContentProvider.providerMakeViewList(view:inputs:)(uint64_t *a1)
{
  return closure #1 in static ViewModifierContentProvider.providerMakeViewList(view:inputs:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t closure #1 in static ViewModifierContentProvider.providerMakeViewList(view:inputs:)(uint64_t *a1, uint64_t (*a2)(void))
{
  int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = a1[2];
  int v4 = *((_DWORD *)a1 + 20);
  uint64_t v7 = *a1;
  int v8 = v2;
  uint64_t v9 = v3;
  long long v5 = *(_OWORD *)(a1 + 5);
  long long v10 = *(_OWORD *)(a1 + 3);
  long long v11 = v5;
  long long v12 = *(_OWORD *)(a1 + 7);
  uint64_t v13 = a1[9];
  int v14 = v4;
  return a2();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _DefaultForegroundStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _DefaultForegroundStyleModifier<A>);
}

uint64_t partial apply for closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(a1, *(void *)(v2 + 40), *(void *)(v2 + 24), a2);
}

uint64_t closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    *(void *)a4 = MEMORY[0x263F8EE78];
    *(_DWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 12) = result;
  }
  else
  {
    int v9 = *((_DWORD *)a1 + 20);
    uint64_t v10 = a1[2];
    int v11 = *((_DWORD *)a1 + 2);
    v16[2] = a2;
    uint64_t v12 = *a1;
    uint64_t v13 = _GraphValue.init(_:)(result, &v25);
    v16[1] = v16;
    uint64_t v17 = v12;
    int v18 = v11;
    uint64_t v19 = v10;
    long long v14 = *(_OWORD *)(a1 + 5);
    long long v20 = *(_OWORD *)(a1 + 3);
    long long v21 = v14;
    long long v22 = *(_OWORD *)(a1 + 7);
    uint64_t v23 = a1[9];
    int v24 = v9;
    double v15 = MEMORY[0x270FA5388](v13);
    return (*(uint64_t (**)(int *, uint64_t *, uint64_t (*)(), double))(*(void *)(a3 + 8) + 32))(&v25, &v17, closure #1 in closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)partial apply, v15);
  }
  return result;
}

uint64_t protocol witness for TransitionVisitor.visit<A>(_:) in conformance AnyTransition.RemovalVisitor<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AnyTransition.RemovalVisitor.visit<A>(_:)(a1, a4, a2, a3);
}

uint64_t destroy for StateContainerPhase(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

_DWORD *initializeWithCopy for TransitionHelper(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  int v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  long long v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v4 = *v5;
  long long v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *long long v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 4) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 4) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  *(unsigned char *)(*(void *)(v9 + 48) + v11) = *(unsigned char *)(*(void *)(v9 + 48) + v12);
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _MatchedGeometryEffect<A>@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return static _MatchedGeometryEffect._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _AnchorWritingModifier<A, B>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  return static _AnchorWritingModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(ValueMetadata **)(a5 + 24), *(void *)(a5 + 32), a6);
}

double static _AnchorWritingModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, ValueMetadata *a6@<X5>, uint64_t a7@<X6>, double *a8@<X8>)
{
  uint64_t v8 = *(void *)a2;
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  int v11 = *(_DWORD *)(a2 + 80);
  int v22 = *a1;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v16 = v10;
  long long v12 = *(_OWORD *)(a2 + 40);
  long long v17 = *(_OWORD *)(a2 + 24);
  long long v18 = v12;
  long long v19 = *(_OWORD *)(a2 + 56);
  uint64_t v20 = *(void *)(a2 + 72);
  int v21 = v11;
  return static _AnchorWritingModifier.makeView(modifier:inputs:animated:body:)(&v22, &v14, 1, a3, a4, a5, a6, a7, a8);
}

uint64_t partial apply for closure #3 in static _PushPopTransactionModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  return closure #3 in static _PushPopTransactionModifier._makeView(modifier:inputs:body:)(a1, a2, *(void (**)(uint64_t, Swift::UInt *))(v2 + 16));
}

uint64_t static Subview._makeView(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 80);
  AGGraphCreateOffsetAttribute2();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v10 = v4;
  int v11 = v5;
  uint64_t v12 = v6;
  long long v8 = *(_OWORD *)(a1 + 40);
  long long v13 = *(_OWORD *)(a1 + 24);
  long long v14 = v8;
  long long v15 = *(_OWORD *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 72);
  int v17 = v7;
  return static _ViewList_View._makeView(view:inputs:)(&OffsetAttribute2, &v10, a2);
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t *a2)
{
  return closure #2 in static ModifiedContent<>._makeViewList(modifier:inputs:body:)(a1, a2, *(_DWORD *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t closure #2 in static ModifiedContent<>._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *a2;
  int v11 = *((_DWORD *)a2 + 2);
  uint64_t v12 = a2[2];
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  uint64_t v15 = a2[5];
  uint64_t v16 = a2[6];
  uint64_t v17 = a2[7];
  int v22 = *((_DWORD *)a2 + 16);
  uint64_t v21 = a2[9];
  char v20 = *((unsigned char *)a2 + 80);
  LODWORD(v25) = a3;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeViewList(modifier:inputs:body:), a6, v37);
  uint64_t v18 = v37[0];
  if (AGSubgraphShouldRecordTree()) {
    AGSubgraphBeginTreeElement();
  }
  int v36 = v18;
  uint64_t v25 = v10;
  int v26 = v11;
  uint64_t v27 = v12;
  uint64_t v28 = v13;
  uint64_t v29 = v14;
  uint64_t v30 = v15;
  uint64_t v31 = v16;
  uint64_t v32 = v17;
  int v33 = v22;
  uint64_t v34 = v21;
  char v35 = v20;
  (*(void (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 32))(&v36, &v25, a4, a5, a6, a8);
  return $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v18, a6, a8);
}

id protocol witness for static View._makeView(view:inputs:) in conformance Canvas<A>@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return static Canvas._makeView(view:inputs:)(a1, a2, *(ValueMetadata **)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t specialized closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:)(void *a1, uint64_t *a2, void (*a3)(void *__return_ptr, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  int v6 = *((_DWORD *)a2 + 20);
  uint64_t v10 = *a2;
  int v11 = v4;
  uint64_t v12 = v5;
  long long v7 = *(_OWORD *)(a2 + 5);
  long long v13 = *(_OWORD *)(a2 + 3);
  long long v14 = v7;
  long long v15 = *(_OWORD *)(a2 + 7);
  uint64_t v16 = a2[9];
  int v17 = v6;
  a3(v18, &v10);
  uint64_t v8 = v18[1];
  *a1 = v18[0];
  a1[1] = v8;
  return 0;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance CustomModifier<A, B>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  return static CustomModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), *(void *)(a5 + 32), *(void *)(a5 + 40), a6);
}

{
  return static CustomModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), *(void *)(a5 + 32), *(void *)(a5 + 40), a6);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ForegroundLayerViewModifier(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance VisualEffectModifier<A>(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static VisualEffectModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24));
}

uint64_t static VisualEffectModifier._makeView(modifier:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  int v9 = *a1;
  uint64_t v10 = *a2;
  int v11 = *((_DWORD *)a2 + 2);
  unint64_t v12 = a2[2];
  int v13 = *((_DWORD *)a2 + 14);
  int v14 = *((_DWORD *)a2 + 15);
  int v15 = *((_DWORD *)a2 + 20);
  swift_beginAccess();
  unsigned int v16 = *(_DWORD *)(v12 + 16);
  unsigned int v17 = *MEMORY[0x263F288F8];
  *(_DWORD *)int v33 = v9;
  int v34 = v14;
  unint64_t v35 = __PAIR64__(v17, v16);
  LODWORD(v36) = 0;
  uint64_t v30 = a5;
  uint64_t v31 = type metadata accessor for VisualEffectModifier.Child();
  int32x2_t v18 = (int32x2_t)a2[8];
  int32x2_t v19 = (int32x2_t)a2[9];
  *(int32x2_t *)&v33[4] = vzip1_s32(v18, v19);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = type metadata accessor for Attribute();
  long long v25 = *(_OWORD *)(a2 + 5);
  uint64_t v21 = a2[3];
  uint64_t v22 = a2[4];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v33, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v29, v31, MEMORY[0x263F8E628], v20, MEMORY[0x263F8E658], v23);
  _GraphValue.init(_:)(v28, &v28);
  *(void *)int v33 = v10;
  *(_DWORD *)&v33[8] = v11;
  unint64_t v35 = v12;
  uint64_t v36 = v21;
  uint64_t v37 = v22;
  long long v38 = v25;
  int v39 = v13;
  int v40 = v14;
  int32x2_t v41 = v18;
  int32x2_t v42 = v19;
  int v43 = v15;
  return (*(uint64_t (**)(unsigned int *, unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 16))(&v28, v33, a3, a4, a5, a6);
}

uint64_t type metadata accessor for VisualEffectModifier.Child()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static VisualEffect._makeVisualEffect(effect:inputs:body:) in conformance CombinedVisualEffect<A, B>(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a5[5]);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _DelayedPreferenceView<A, B>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static _DelayedPreferenceView._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), a4);
}

uint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _OverlayPreferenceModifier<A, B>@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static _OverlayPreferenceModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), *(void *)(a4 + 32), *(void *)(a4 + 40), a5);
}

uint64_t static _OverlayPreferenceModifier._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, unint64_t a7@<X7>, uint64_t a8@<X8>)
{
  unsigned int v8 = *a1;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[2];
  int v11 = *((_DWORD *)a2 + 20);
  int v15 = *((_DWORD *)a2 + 2);
  uint64_t v16 = v10;
  long long v12 = *(_OWORD *)(a2 + 5);
  long long v17 = *(_OWORD *)(a2 + 3);
  long long v18 = v12;
  long long v19 = *(_OWORD *)(a2 + 7);
  uint64_t v20 = a2[9];
  int v21 = v11;
  uint64_t v14 = v9;
  return makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)(v8, (uint64_t)&v14, a3, 0, a4, a5, a6, a8, a7);
}

uint64_t protocol witness for TransitionVisitor.visit<A>(_:) in conformance AnyTransition.SecondVisitor<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AnyTransition.SecondVisitor.visit<A>(_:)(a1, a4, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BlurEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _MaskAlignmentEffect<A>@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a3@<X8>)
{
  return static _MaskAlignmentEffect._makeView(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ScrollClipEffect<A>(uint64_t a1, int32x2_t *a2, void (*a3)(uint64_t, int32x2_t *))
{
  return static _ScrollClipEffect._makeView(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t static _ScrollClipEffect._makeView(modifier:inputs:body:)(uint64_t a1, int32x2_t *a2, void (*a3)(uint64_t, int32x2_t *))
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  int32x2_t v4 = *a2;
  int32x2_t v5 = a2[2];
  __int32 v16 = a2[4].i32[0];
  __int32 v17 = a2[1].i32[0];
  int32x2_t v6 = a2[5];
  int32x2_t v7 = a2[6];
  __int32 v8 = a2[7].i32[1];
  __int32 v18 = a2[7].i32[0];
  __int32 v19 = a2[4].i32[1];
  __int32 v20 = a2[10].i32[0];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  __int32 v24 = v8;
  uint64_t v26 = type metadata accessor for _ScrollClipEffect.ChildTransform();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<ViewTransform>();
  int32x2_t v9 = a2[3];
  int32x2_t v10 = a2[8];
  int32x2_t v11 = a2[9];
  int32x2_t v23 = vzip1_s32(v10, v11);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&OffsetAttribute2, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_3, (uint64_t)v25, v26, MEMORY[0x263F8E628], v12, MEMORY[0x263F8E658], v13);
  int32x2_t v28 = v4;
  __int32 v29 = v17;
  int32x2_t v30 = v5;
  int32x2_t v31 = v9;
  int v32 = v16 | 4;
  __int32 v33 = v19;
  int32x2_t v34 = v6;
  int32x2_t v35 = v7;
  __int32 v36 = v18;
  int32x2_t v37 = v10;
  int32x2_t v38 = v11;
  __int32 v39 = v20;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v14 = swift_bridgeObjectRetain();
  a3(v14, &v28);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t type metadata accessor for _ScrollClipEffect.ChildTransform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ShadowEffect._Resolved(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

void type metadata accessor for Attribute<ViewTransform>()
{
  if (!lazy cache variable for type metadata for Attribute<ViewTransform>)
  {
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTransform>);
    }
  }
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMatrixEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BackdropEffect<A>@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a3@<X8>)
{
  return static _BackdropEffect._makeView(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t static _BackdropEffect._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a3@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 80);
  *(void *)&long long v10 = *(void *)a1;
  DWORD2(v10) = v5;
  uint64_t v11 = v6;
  long long v8 = *(_OWORD *)(a1 + 40);
  long long v12 = *(_OWORD *)(a1 + 24);
  long long v13 = v8;
  long long v14 = *(_OWORD *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 72);
  int v16 = v7;
  swift_retain();
  return specialized static _ViewOutputs.makeMaskView(inputs:contentBody:maskBody:outputsFromMask:mayUseForegroundColor:alignment:)(&v10, (void (*)(uint64_t *__return_ptr, long long *))partial apply for makeBg #1 <A>(inputs:) in static _BackdropEffect._makeView(modifier:inputs:body:), 1, 1, 0x100000000, a2, a3);
}

uint64_t Layout.explicitAlignment(of:in:proposal:subviews:cache:)(uint64_t a1)
{
  return Layout.explicitAlignment(of:in:proposal:subviews:cache:)(a1);
}

{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ZStackLayout(a1);
}

{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ZStackLayout(a1);
}

{
  return Layout.explicitAlignment(of:in:proposal:subviews:cache:)(a1);
}

uint64_t type metadata completion function for AnchorBoxBase()
{
  return swift_initClassMetadata2();
}

double protocol witness for LayoutEngine.lengthThatFits(_:in:) in conformance ResolvedImageLayoutEngine(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  char v5 = *((unsigned char *)a1 + 8);
  uint64_t v6 = a1[2];
  char v7 = *((unsigned char *)a1 + 24);
  long long v8 = v2[9];
  long long v27 = v2[8];
  long long v28 = v8;
  v29[0] = v2[10];
  *(_DWORD *)((char *)v29 + 15) = *(_DWORD *)((char *)v2 + 175);
  long long v9 = v2[5];
  long long v23 = v2[4];
  long long v24 = v9;
  long long v10 = v2[7];
  long long v25 = v2[6];
  long long v26 = v10;
  long long v11 = v2[1];
  long long v19 = *v2;
  long long v20 = v11;
  long long v12 = v2[3];
  long long v21 = v2[2];
  long long v22 = v12;
  uint64_t v15 = v4;
  char v16 = v5;
  uint64_t v17 = v6;
  char v18 = v7;
  Image.Resolved.sizeThatFits(in:)((uint64_t)&v15);
  if (a2) {
    return v14;
  }
  return result;
}

uint64_t protocol witness for LayoutEngine.sizeThatFits(_:) in conformance ResolvedImageLayoutEngine(uint64_t *a1)
{
  char v1 = *((unsigned char *)a1 + 8);
  uint64_t v2 = a1[2];
  char v3 = *((unsigned char *)a1 + 24);
  uint64_t v5 = *a1;
  char v6 = v1;
  uint64_t v7 = v2;
  char v8 = v3;
  return Image.Resolved.sizeThatFits(in:)((uint64_t)&v5);
}

uint64_t Image.Resolved.sizeThatFits(in:)(uint64_t result)
{
  double v2 = *(double *)(v1 + 16);
  if (*(unsigned char *)(v1 + 96) == 2) {
    return result;
  }
  if (*(unsigned char *)(result + 8))
  {
    if (*(unsigned char *)(result + 24)) {
      goto LABEL_4;
    }
  }
  else if (*(unsigned char *)(result + 24))
  {
LABEL_4:
    if ((*(unsigned char *)(result + 8) & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if ((*(unsigned char *)(result + 8) & 1) == 0) {
    goto LABEL_9;
  }
LABEL_8:
  if (v2 != 0.0)
  {
    if ((*(unsigned char *)(result + 24) & 1) == 0) {
      return result;
    }
    goto LABEL_10;
  }
LABEL_9:
  if ((*(unsigned char *)(result + 24) & 1) == 0) {
    return result;
  }
LABEL_10:
  if (v2 != 0.0)
  {
    switch(*(unsigned char *)(v1 + 40))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
        return result;
      default:
        JUMPOUT(0);
    }
  }
  return result;
}

CGPoint __swiftcall UnitPoint.in(_:)(CGSize a1)
{
  double v3 = a1.width * v1;
  double v4 = a1.height * v2;
  result.double y = v4;
  result.double x = v3;
  return result;
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance GestureContainerFeature()
{
  return "gestureContainer";
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance GestureContainerFeature()
{
  return "SwiftUI";
}

uint64_t type metadata accessor for _ViewList_Subgraph()
{
  return self;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance CountingIndexCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance CountingIndexCollection<A>(a1, a2, a3, (void (*)(uint64_t, uint64_t, double))CountingIndexCollection.index(after:));
}

uint64_t base witness table accessor for _AttributeBody in UnwrapConditional<A, B, C>()
{
  return swift_getWitnessTable();
}

void *static Semantics.v6.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v6, &static Semantics.v6, a1);
}

uint64_t initializeWithCopy for DynamicLayoutComputer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t static SemanticFeature.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(char *__return_ptr))(a2 + 16))((char *)&v7 + 1);
  unsigned int v4 = *(_DWORD *)((char *)&v7 + 1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 24))(&v7, a1, a2);
  if (v7)
  {
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F4504) {
      return dyld_program_minos_at_least();
    }
    unsigned int v6 = dword_26B0F4500;
  }
  else
  {
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC) {
      return dyld_program_sdk_at_least();
    }
    unsigned int v6 = static Semantics.forced;
  }
  return v6 >= v4;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey@<X0>(void *a1@<X2>, _DWORD *a2@<X3>, _DWORD *a3@<X8>)
{
  if (*a1 != -1) {
    uint64_t result = swift_once();
  }
  *a3 = *a2;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance _DisplayList_Identity.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v5@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v5.introduced, a1);
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v4@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v4.introduced, a1);
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v6@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v6.introduced, a1);
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v2@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v2.introduced, a1);
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v3@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v3.introduced, a1);
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v2_3@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v2_3.introduced, a1);
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance Semantics.DismissPopsInNavigationSplitViewRoots@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static Semantics.DismissPopsInNavigationSplitViewRoots.introduced, a1);
}

ValueMetadata *type metadata accessor for EdgeInsets()
{
  return &type metadata for EdgeInsets;
}

uint64_t dispatch thunk of AnyLocation.wasRead.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentObjectKey<A>(uint64_t a1, uint64_t a2)
{
  return static EnvironmentKey._valuesEqual(_:_:)(a1, a2) & 1;
}

uint64_t static EnvironmentKey._valuesEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = a2;
  int v9 = 3;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0, (uint64_t)&v6, AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v4);
  return v10;
}

uint64_t (*ViewOrigin.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance CountingIndex<A>()
{
  return MEMORY[0x270F9D4B0]();
}

uint64_t StaticIf<>.init(_:then:else:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return StaticIf<>.init(_:then:else:)(a1, a2, a3, a4);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a2();
  uint64_t v5 = type metadata accessor for StaticIf();
  return a4(v5, v6, v7, v8);
}

{
  return StaticIf<>.init(_:then:else:)(a1, a2, a3, a4);
}

double _LayoutTraits.idealSize.getter()
{
  return *(double *)(v0 + 8);
}

void static ContentShapeKinds.dragPreview.getter(void *a1@<X8>)
{
  *a1 = 2;
}

double EdgeInsets.negatedInsets.getter(double a1)
{
  return -a1;
}

uint64_t static HierarchicalShapeStyle.primary.getter()
{
  return 0;
}

uint64_t Font.leading(_:)(char *a1, uint64_t a2)
{
  return Font.leading(_:)(a1, a2, (void (*)(void))type metadata accessor for FontBox<Font.ModifierProvider<Font.LeadingModifier>>);
}

uint64_t HostPreferencesCombiner.value.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = *(unsigned int *)(v1 + 4);
  uint64_t v4 = *(void *)(v1 + 8);
  if (result != *MEMORY[0x263F288F8])
  {
    uint64_t v5 = *(void *)AGGraphGetValue();
    uint64_t result = swift_bridgeObjectRetain();
    if (*(void *)(v4 + 16)) {
      goto LABEL_3;
    }
LABEL_8:
    *a1 = v5;
    return result;
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (!*(void *)(v4 + 16)) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v10 = v4;
  uint64_t v11 = v5;
  uint64_t Value = AGGraphGetValue();
  uint64_t v7 = *(void *)Value;
  uint64_t v8 = *(void *)(*(void *)Value + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v9 = (uint64_t *)(v7 + 40);
    do
    {
      static PreferenceKey.visitKey<A>(_:)((uint64_t)&v10, *(v9 - 1), (uint64_t)&unk_26FA69808, *v9, (uint64_t)&protocol witness table for HostPreferencesCombiner.CombineValues);
      v9 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    uint64_t v5 = v11;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  *a1 = v5;
  return swift_bridgeObjectRelease();
}

uint64_t MergedElements.makeElements(from:inputs:indirectMap:body:)(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10 = a1;
  uint64_t v11 = a9;
  uint64_t v12 = a3[6];
  int64_t v13 = a10 >> 1;
  uint64_t v14 = MEMORY[0x263F8EE78];
  if (a10 >> 1 == a9)
  {
    uint64_t v15 = 1;
    char v16 = (void *)MEMORY[0x263F8EE78];
LABEL_17:
    int64_t v28 = v16[2];
    if (v28 == 1)
    {
      uint64_t v29 = v16[4];
      uint64_t v30 = v16[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      void *v10 = v29;
      v10[1] = v30;
    }
    else if (v28)
    {
      uint64_t v59 = v12;
      *(void *)&long long v60 = v14;
      uint64_t v47 = v10;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 0);
      uint64_t v31 = v60;
      int v32 = v16 + 5;
      do
      {
        uint64_t v33 = *((void *)v32 - 1);
        int v34 = *v32;
        *(void *)&long long v60 = v31;
        unint64_t v35 = *(void *)(v31 + 16);
        unint64_t v36 = *(void *)(v31 + 24);
        swift_bridgeObjectRetain();
        if (v35 >= v36 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v35 + 1, 1);
          uint64_t v31 = v60;
        }
        *(void *)(v31 + 16) = v35 + 1;
        uint64_t v37 = v31 + 16 * v35;
        *(void *)(v37 + 32) = v33;
        *(_DWORD *)(v37 + 40) = v34;
        v32 += 4;
        --v28;
      }
      while (v28);
      swift_bridgeObjectRelease();
      *(void *)&long long v60 = v31;
      uint64_t v38 = MEMORY[0x263F8EE78];
      *((void *)&v60 + 1) = MEMORY[0x263F8EE78];
      LODWORD(v61) = 0;
      uint64_t v39 = *(void *)(v59 + 16);
      if (v39)
      {
        swift_bridgeObjectRetain();
        uint64_t v40 = (uint64_t *)(v59 + 40);
        int32x2_t v41 = v47;
        do
        {
          static PreferenceKey.visitKey<A>(_:)((uint64_t)&v60, *(v40 - 1), (uint64_t)&type metadata for MultiPreferenceCombinerVisitor, *v40, (uint64_t)&protocol witness table for MultiPreferenceCombinerVisitor);
          v40 += 2;
          --v39;
        }
        while (v39);
        swift_bridgeObjectRelease();
        uint64_t v42 = v61;
        uint64_t v38 = *((void *)&v60 + 1);
      }
      else
      {
        uint64_t v42 = 0;
        int32x2_t v41 = v10;
      }
      int v43 = (unsigned int *)MEMORY[0x263F288F8];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v44 = v42 | ((unint64_t)*v43 << 32);
      *int32x2_t v41 = v38;
      v41[1] = v44;
    }
    else
    {
      swift_bridgeObjectRelease();
      void *v10 = 0;
      v10[1] = 0;
    }
    return v15;
  }
  else
  {
    uint64_t v54 = *a3;
    int v53 = *((_DWORD *)a3 + 2);
    uint64_t v52 = a3[2];
    long long v51 = *(_OWORD *)(a3 + 3);
    uint64_t v50 = a3[5];
    long long v49 = *(_OWORD *)(a3 + 7);
    uint64_t v18 = a3[9];
    int v48 = *((_DWORD *)a3 + 20);
    swift_unknownObjectRetain();
    uint64_t v19 = a8 + 72 * a9;
    char v16 = (void *)MEMORY[0x263F8EE78];
    while (v11 < v13)
    {
      outlined init with copy of _ViewListOutputs(v19, (uint64_t)v72);
      outlined init with copy of _ViewListOutputs.Views((uint64_t)v72, (uint64_t)&v60);
      outlined destroy of _ViewListOutputs((uint64_t)v72);
      if (v63) {
        goto LABEL_33;
      }
      outlined init with take of ScrollStateRequest(&v60, (uint64_t)v69);
      uint64_t v20 = v70;
      uint64_t v21 = v71;
      __swift_project_boxed_opaque_existential_1(v69, v70);
      *(void *)&long long v60 = v54;
      DWORD2(v60) = v53;
      uint64_t v61 = v52;
      long long v62 = v51;
      uint64_t v63 = v50;
      uint64_t v64 = v12;
      long long v65 = v49;
      uint64_t v66 = v18;
      int v67 = v48;
      char v22 = (*(uint64_t (**)(void *, uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 16))(v68, a2, &v60, a4, a5, a6, v20, v21);
      uint64_t v23 = v68[0];
      if (v68[0])
      {
        uint64_t v24 = v68[1];
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
        }
        unint64_t v26 = v16[2];
        unint64_t v25 = v16[3];
        if (v26 >= v25 >> 1) {
          char v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v16);
        }
        v16[2] = v26 + 1;
        long long v27 = &v16[2 * v26];
        v27[4] = v23;
        v27[5] = v24;
        swift_bridgeObjectRelease();
      }
      if ((v22 & 1) == 0)
      {
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
        uint64_t v15 = 0;
        goto LABEL_16;
      }
      ++v11;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
      v19 += 72;
      if (v13 == v11)
      {
        swift_unknownObjectRelease();
        uint64_t v15 = 1;
LABEL_16:
        uint64_t v10 = a1;
        uint64_t v14 = MEMORY[0x263F8EE78];
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_33:
    outlined destroy of _ViewListOutputs.Views((uint64_t)&v60);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t makeSecondaryLayerView<A>(secondaryLayer:alignment:inputs:body:flipOrder:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X3>, char a5@<W5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  unint64_t v9 = *(void *)(a3 + 16);
  unsigned int v10 = *(_DWORD *)(a3 + 24);
  unsigned int v11 = *(_DWORD *)(a3 + 28);
  unsigned int v13 = *(_DWORD *)(a3 + 32);
  unsigned int v12 = *(_DWORD *)(a3 + 36);
  uint64_t v15 = *(void *)(a3 + 40);
  uint64_t v14 = *(void *)(a3 + 48);
  unsigned int v16 = *(_DWORD *)(a3 + 56);
  unsigned int v17 = *(_DWORD *)(a3 + 60);
  unsigned int v19 = *(_DWORD *)(a3 + 64);
  unsigned int v18 = *(_DWORD *)(a3 + 68);
  unsigned int v21 = *(_DWORD *)(a3 + 72);
  unsigned int v20 = *(_DWORD *)(a3 + 76);
  int v22 = *(_DWORD *)(a3 + 80);
  unint64_t v101 = *(void *)a3;
  unint64_t v7 = v101;
  unsigned int v77 = v8;
  unsigned int v102 = v8;
  unint64_t v103 = v9;
  unsigned int v74 = v11;
  unsigned int v75 = v10;
  unsigned int v104 = v10;
  unsigned int v105 = v11;
  unsigned int v106 = v13;
  unsigned int v107 = v12;
  uint64_t v108 = v15;
  uint64_t v109 = v14;
  unsigned int v110 = v16;
  unsigned int v111 = v17;
  unsigned int v68 = v21;
  unsigned int v69 = v19;
  unsigned int v112 = v19;
  unsigned int v113 = v18;
  unsigned int v72 = v20;
  unsigned int v73 = v18;
  unsigned int v114 = v21;
  unsigned int v115 = v20;
  int v71 = v22;
  int v116 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v58 = v13;
  unsigned int v59 = v12;
  unint64_t v57 = __PAIR64__(v17, v16);
  if ((v12 & 0x100) != 0)
  {
    specialized _GraphInputs.pushScope<A>(id:)(0);
    unint64_t v23 = v101;
    unsigned int v38 = v102;
    unint64_t v37 = v103;
    unsigned int v36 = v104;
    unsigned int v29 = v105;
    unsigned int v35 = v106;
    unsigned int v34 = v107;
    uint64_t v33 = v108;
    uint64_t v32 = v109;
    unsigned int v31 = v110;
    unsigned int v30 = v111;
    unsigned int v27 = v112;
    unsigned int v28 = v113;
    unsigned int v26 = v114;
    unsigned int v25 = v115;
    int v24 = v116;
  }
  else
  {
    unint64_t v23 = v101;
    int v24 = v71;
    unsigned int v25 = v72;
    unsigned int v26 = v68;
    unsigned int v27 = v69;
    unsigned int v28 = v73;
    unsigned int v29 = v74;
    unsigned int v30 = v17;
    unsigned int v31 = v16;
    uint64_t v32 = v14;
    uint64_t v33 = v15;
    unsigned int v34 = v12;
    unsigned int v35 = v13;
    unsigned int v36 = v75;
    unint64_t v37 = v9;
    unsigned int v38 = v77;
  }
  unint64_t v91 = v23;
  unsigned int v92 = v38;
  unint64_t v94 = v37;
  *(void *)&long long v95 = __PAIR64__(v29, v36);
  *((void *)&v95 + 1) = __PAIR64__(v34, v35);
  uint64_t v96 = v33;
  uint64_t v97 = v32;
  *(void *)&long long v98 = __PAIR64__(v30, v31);
  *((void *)&v98 + 1) = __PAIR64__(v28, v27);
  unint64_t v99 = __PAIR64__(v25, v26);
  int v100 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v39 = swift_bridgeObjectRetain();
  a4(&v81, v39, &v91);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v67 = v81;
  unsigned int v40 = v83;
  unsigned int v61 = v82;
  uint64_t KeyPath = swift_getKeyPath();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  unsigned int v42 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unsigned int v43 = *MEMORY[0x263F288F8];
  unsigned int v44 = a2;
  if ((a2 & 0x100000000) != 0) {
    unsigned int v44 = *MEMORY[0x263F288F8];
  }
  unint64_t v91 = __PAIR64__(v42, v44);
  unsigned int v92 = v69;
  unsigned int v93 = v68;
  unsigned int v70 = v40;
  unint64_t v94 = __PAIR64__(v43, v40);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery();
  Attribute.init<A>(body:value:flags:update:)();
  unint64_t v91 = v7;
  unsigned int v92 = v77;
  unint64_t v94 = v9;
  *(void *)&long long v95 = __PAIR64__(v74, v75);
  HIDWORD(v95) = v59;
  uint64_t v96 = v15;
  uint64_t v97 = v14;
  *(void *)&long long v98 = v57;
  HIDWORD(v98) = v73;
  HIDWORD(v99) = v72;
  int v100 = v71;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v76 = v14;
  swift_bridgeObjectRetain();
  DWORD2(v98) = AGGraphCreateOffsetAttribute2();
  LODWORD(v99) = AGGraphCreateOffsetAttribute2();
  DWORD2(v95) = v58 | 0x18;
  if ((v59 & 0x100) != 0) {
    specialized _GraphInputs.pushScope<A>(id:)((void *)1);
  }
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v45 = static _SemanticFeature_v3.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v45) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (dyld_program_sdk_at_least())
  {
LABEL_15:
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v91, (uint64_t)&type metadata for _ZStackLayout, (uint64_t)&protocol witness table for _ZStackLayout);
    swift_release();
  }
LABEL_16:
  unint64_t v81 = v91;
  unsigned int v82 = v92;
  unint64_t v84 = v94;
  long long v85 = v95;
  uint64_t v86 = v96;
  uint64_t v87 = v97;
  long long v88 = v98;
  unint64_t v89 = v99;
  int v90 = v100;
  uint64_t v46 = closure #1 in makeSecondaryLayerView<A>(secondaryLayer:alignment:inputs:body:flipOrder:)((uint64_t *)&v81, a1, a6, (uint64_t)&v79);
  unint64_t v47 = v79;
  unsigned int v78 = v80;
  MEMORY[0x270FA5388](v46);
  MEMORY[0x270FA5388](v48);
  AGGraphMutateAttribute();
  unsigned int v49 = v78;
  if (a5)
  {
    unint64_t v50 = v47;
    unsigned int v51 = v78;
    unint64_t v47 = v67;
    unsigned int v49 = v61;
  }
  else
  {
    unint64_t v50 = v67;
    unsigned int v51 = v61;
  }
  *((void *)&v85 + 1) = MEMORY[0x263F8EE78];
  LODWORD(v86) = 0;
  unint64_t v81 = v50;
  unsigned int v82 = v51;
  unint64_t v84 = v47;
  LODWORD(v85) = v49;
  uint64_t v52 = *(void *)(v14 + 16);
  if (v52)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v53 = (uint64_t *)(v76 + 40);
    do
    {
      static PreferenceKey.visitKey<A>(_:)((uint64_t)&v81, *(v53 - 1), (uint64_t)&type metadata for PairwisePreferenceCombinerVisitor, *v53, (uint64_t)&protocol witness table for PairwisePreferenceCombinerVisitor);
      v53 += 2;
      --v52;
    }
    while (v52);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v54 = *((void *)&v85 + 1);
  int v55 = v86;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a7 = v54;
  *(_DWORD *)(a7 + 8) = v55;
  *(_DWORD *)(a7 + 12) = v70;
  return result;
}

uint64_t static PreferenceKey.visitKey<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 8))(v5, a2, a4, a3);
}

uint64_t MultiPreferenceCombinerVisitor.visit<A>(key:)(uint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  void v21[6] = *MEMORY[0x263EF8340];
  v21[0] = *v3;
  _OWORD v21[3] = (uint64_t)a2;
  v21[4] = a3;
  type metadata accessor for [PreferencesOutputs]();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Attribute();
  lazy protocol witness table accessor for type [PreferencesOutputs] and conformance [A]();
  swift_bridgeObjectRetain();
  uint64_t v8 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = MEMORY[0x24C522E60](v8, v7);
  if (v9 == 2)
  {
    Array.subscript.getter();
    Array.subscript.getter();
    uint64_t v11 = swift_bridgeObjectRelease();
    HIDWORD(v21[0]) = v20;
    MEMORY[0x270FA5388](v11);
    uint64_t v17 = AssociatedTypeWitness;
    uint64_t v18 = type metadata accessor for PairPreferenceCombiner();
    uint64_t WitnessTable = swift_getWitnessTable();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v21, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v16, v18, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v12);
LABEL_8:
    uint64_t v13 = v20;
    LOBYTE(v21[0]) = 0;
    return PreferencesOutputs.subscript.setter(v13, a2, (uint64_t)a2, a3);
  }
  if (v9 != 1)
  {
    if (!v9) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v14 = PreferenceCombiner.init(attributes:)(v8, (uint64_t)a2, a3, v21);
    MEMORY[0x270FA5388](v14);
    uint64_t v17 = AssociatedTypeWitness;
    uint64_t v18 = type metadata accessor for PreferenceCombiner();
    uint64_t WitnessTable = swift_getWitnessTable();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v21, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v16, v18, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v15);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  Array.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v13 = LODWORD(v21[0]);
  LOBYTE(v20) = 0;
  return PreferencesOutputs.subscript.setter(v13, a2, (uint64_t)a2, a3);
}

void type metadata accessor for [PreferencesOutputs]()
{
  if (!lazy cache variable for type metadata for [PreferencesOutputs])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [PreferencesOutputs]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [PreferencesOutputs] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [PreferencesOutputs] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PreferencesOutputs] and conformance [A])
  {
    type metadata accessor for [PreferencesOutputs]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PreferencesOutputs] and conformance [A]);
  }
  return result;
}

uint64_t HostPreferencesCombiner.CombineValues.visit<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v63 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for PreferenceValues.Value();
  uint64_t v61 = type metadata accessor for Optional();
  long long v56 = *(void **)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  uint64_t v9 = (char *)v46 - v8;
  uint64_t v62 = v7;
  int v55 = *(uint64_t (***)(char *))(v7 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v46 - v14;
  uint64_t v59 = AssociatedTypeWitness;
  uint64_t v57 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  unsigned int v21 = (char *)v46 - v20;
  long long v60 = (uint64_t *)v3;
  uint64_t v65 = *(void *)(v3 + 8);
  uint64_t result = PreferenceValues.contains<A>(_:)(a1);
  if ((result & 1) == 0)
  {
    unint64_t v50 = v15;
    uint64_t v51 = v3 + 8;
    uint64_t v52 = v18;
    int v53 = v12;
    unint64_t v23 = *(void (**)(uint64_t))(v63 + 16);
    uint64_t v54 = v21;
    v23(a2);
    int v64 = 0;
    uint64_t v24 = v59;
    uint64_t v25 = *v60;
    uint64_t v26 = *(void *)(*v60 + 16);
    if (v26)
    {
      long long v60 = (uint64_t *)a2;
      unsigned int v27 = (unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 6);
      unsigned int v58 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 7);
      unsigned int v28 = (uint64_t (**)(char *, uint64_t))(v56 + 1);
      v46[1] = v63 + 24;
      unint64_t v47 = (uint64_t (**)(char *, char *, uint64_t))(v55 + 4);
      uint64_t v48 = (void (**)(char *, char *, uint64_t))(v57 + 16);
      unsigned int v49 = (void (**)(char *, uint64_t))(v57 + 8);
      ++v55;
      uint64_t result = swift_bridgeObjectRetain();
      unint64_t v29 = 0;
      int v30 = 1;
LABEL_4:
      LODWORD(v56) = v30;
      while (v29 < *(void *)(v25 + 16))
      {
        ++v29;
        uint64_t result = AGGraphGetWeakValue();
        if (result)
        {
          uint64_t v31 = *(void *)(*(void *)result + 16);
          if (v31)
          {
            uint64_t v32 = (void *)(*(void *)result + 32);
            while (*v32 != a1)
            {
              v32 += 2;
              if (!--v31) {
                goto LABEL_14;
              }
            }
          }
          else
          {
LABEL_14:
            Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
            if (WeakValue)
            {
              uint64_t v65 = *WeakValue;
              PreferenceValues.valueIfPresent<A>(for:)(a1, (uint64_t)v60, v63, (uint64_t)v9);
              if ((*v27)(v9, 1, v62) != 1)
              {
                unsigned int v34 = v50;
                uint64_t v35 = (*v47)(v50, v9, v62);
                if (v56)
                {
                  (*v49)(v54, v59);
                  (*v48)(v54, v34, v59);
                  int v64 = *(_DWORD *)&v34[*(int *)(v62 + 28)];
                  unsigned int v36 = v34;
                }
                else
                {
                  long long v56 = v46;
                  double v37 = MEMORY[0x270FA5388](v35);
                  uint64_t v38 = v63;
                  v46[-4] = v60;
                  v46[-3] = v38;
                  v46[-2] = &v64;
                  v46[-1] = v34;
                  (*(void (**)(char *, uint64_t (*)@<X0>(uint64_t@<X8>), double))(v38 + 24))(v54, partial apply for closure #1 in HostPreferencesCombiner.CombineValues.visit<A>(key:), v37);
                  unsigned int v36 = v50;
                }
                uint64_t result = (*v55)(v36);
                int v30 = 0;
                if (v29 == v26)
                {
                  swift_bridgeObjectRelease();
                  uint64_t v24 = v59;
                  uint64_t v39 = (uint64_t)v60;
                  uint64_t v41 = v62;
                  uint64_t v40 = v63;
LABEL_23:
                  uint64_t v44 = (uint64_t)v52;
                  unsigned int v43 = v54;
                  (*v48)(v52, v54, v24);
                  LODWORD(v65) = v64;
                  uint64_t v45 = (uint64_t)v53;
                  PreferenceValues.Value.init(value:seed:)(v44, (int *)&v65, v24, (uint64_t)v53);
                  specialized PreferenceValues.subscript.setter(v45, a1, v39, v40);
                  ((void (*)(uint64_t, uint64_t))*v55)(v45, v41);
                  unsigned int v42 = (uint64_t (**)(char *, uint64_t))v49;
                  return (*v42)(v43, v24);
                }
                goto LABEL_4;
              }
            }
            else
            {
              (*v58)(v9, 1, 1, v62);
            }
            uint64_t result = (*v28)(v9, v61);
          }
        }
        if (v29 == v26)
        {
          swift_bridgeObjectRelease();
          uint64_t v24 = v59;
          uint64_t v39 = (uint64_t)v60;
          uint64_t v41 = v62;
          uint64_t v40 = v63;
          if (v56) {
            goto LABEL_22;
          }
          goto LABEL_23;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_22:
      unsigned int v42 = (uint64_t (**)(char *, uint64_t))(v57 + 8);
      unsigned int v43 = v54;
      return (*v42)(v43, v24);
    }
  }
  return result;
}

uint64_t PreferenceValues.valueIfPresent<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *v4;
  v13[6] = PreferenceValues.index<A>(of:)(a1);
  char v14 = v9 & 1;
  void v13[2] = a2;
  v13[3] = a3;
  v13[4] = v8;
  type metadata accessor for Int?(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x263F8D6C8], MEMORY[0x263F8D8F0]);
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for PreferenceValues.Value();
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PreferenceValues.valueIfPresent<A>(for:), (uint64_t)v13, MEMORY[0x263F8E628], v10, v11, a4);
}

uint64_t PreferenceValues.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = type metadata accessor for PreferenceValues.Value();
  uint64_t v22 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  char v14 = (char *)&v21 - v13;
  unint64_t v29 = *v4;
  unint64_t v15 = v29;
  unint64_t v29 = PreferenceValues.index<A>(of:)(a1);
  char v30 = v16 & 1;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  unint64_t v28 = v15;
  type metadata accessor for Int?(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x263F8D6C8], MEMORY[0x263F8D8F0]);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PreferenceValues.subscript.getter, (uint64_t)v25, MEMORY[0x263F8E628], v11, v17, (uint64_t)v14);
  uint64_t v18 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1, v11) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v24, v14, v11);
  }
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  uint64_t v19 = v24;
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v24, v10, AssociatedTypeWitness);
  *(_DWORD *)(v19 + *(int *)(type metadata accessor for PreferenceValues.Value() + 28)) = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v22);
}

uint64_t type metadata accessor for PreferenceValues.Value()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for PreferenceValues.Value(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 >= a2)
  {
LABEL_22:
    if (v5) {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
    return 0;
  }
  unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  unsigned int v7 = a2 - v5;
  uint64_t v8 = v6 & 0xFFFFFFFC;
  if ((v6 & 0xFFFFFFFC) != 0) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = v7 + 1;
  }
  if (v9 >= 0x10000) {
    unsigned int v10 = 4;
  }
  else {
    unsigned int v10 = 2;
  }
  if (v9 < 0x100) {
    unsigned int v10 = 1;
  }
  if (v9 >= 2) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  switch(v11)
  {
    case 1:
      int v12 = *(unsigned __int8 *)(result + v6);
      if (!v12) {
        goto LABEL_22;
      }
      goto LABEL_18;
    case 2:
      int v12 = *(unsigned __int16 *)(result + v6);
      if (!v12) {
        goto LABEL_22;
      }
      goto LABEL_18;
    case 3:
      __break(1u);
      return result;
    case 4:
      int v12 = *(_DWORD *)(result + v6);
      if (!v12) {
        goto LABEL_22;
      }
LABEL_18:
      int v13 = v12 - 1;
      if (v8)
      {
        int v13 = 0;
        LODWORD(v8) = *(_DWORD *)result;
      }
      uint64_t result = v5 + (v8 | v13) + 1;
      break;
    default:
      goto LABEL_22;
  }
  return result;
}

void _sSiSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sSiSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

BOOL PreferenceValues.contains<A>(_:)(uint64_t a1)
{
  PreferenceValues.index<A>(of:)(a1);
  return (v1 & 1) == 0;
}

Swift::Void __swiftcall PreferenceValues.combine(with:)(SwiftUI::PreferenceValues with)
{
  uint64_t v2 = *(void *)with.entries._rawValue;
  uint64_t v3 = *(void *)(*(void *)with.entries._rawValue + 16);
  if (!v3) {
    return;
  }
  uint64_t v4 = v1;
  uint64_t v36 = *(void *)(*(void *)v1 + 16);
  if (!v36)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v2;
    return;
  }
  uint64_t v5 = 0;
  uint64_t v35 = v2 + 32;
  uint64_t v6 = 4;
  uint64_t v7 = 1;
  uint64_t v29 = MEMORY[0x263F8EE58] + 8;
  uint64_t v30 = v3;
  uint64_t v31 = v2;
  uint64_t v32 = v1;
  do
  {
    unint64_t v8 = v7 - 1;
    if ((unint64_t)(v7 - 1) >= *(void *)(*(void *)v4 + 16))
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    outlined init with copy of PreferenceValues.Entry(*(void *)v4 + v6 * 8, (uint64_t)v39);
    uint64_t v9 = v39[0];
    outlined destroy of PreferenceValues.Entry((uint64_t)v39);
    if ((unint64_t)v5 >= *(void *)(v2 + 16)) {
      goto LABEL_24;
    }
    uint64_t v10 = v35 + 56 * v5;
    outlined init with copy of PreferenceValues.Entry(v10, (uint64_t)v39);
    uint64_t v11 = v39[0];
    outlined destroy of PreferenceValues.Entry((uint64_t)v39);
    if (v9 == v11)
    {
      outlined init with copy of PreferenceValues.Entry(v10, (uint64_t)v39);
      int v12 = *(void **)v4;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v4 = v12;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        int v12 = specialized _ArrayBuffer._consumeAndCreateNew()(v12);
        *(void *)uint64_t v4 = v12;
      }
      if (v8 >= v12[2]) {
        goto LABEL_25;
      }
      char v14 = &v12[v6];
      uint64_t v15 = v12[v6];
      uint64_t v16 = v12[v6 + 1];
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v33 = &v29;
      uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
      MEMORY[0x270FA5388](AssociatedTypeWitness);
      uint64_t v34 = v5;
      uint64_t v20 = (char *)&v29 - v19;
      uint64_t v21 = v14 + 3;
      outlined init with copy of Any((uint64_t)(v14 + 3), (uint64_t)&v37);
      uint64_t v22 = swift_dynamicCast();
      double v23 = MEMORY[0x270FA5388](v22);
      *(&v29 - 4) = v15;
      *(&v29 - 3) = v16;
      *(&v29 - 2) = (uint64_t)v14;
      uint64_t v4 = v32;
      *(&v29 - 1) = (uint64_t)v39;
      (*(void (**)(char *, uint64_t (*)(), double))(v16 + 24))(v20, partial apply for closure #1 in reduce #1 <A>(key:) in PreferenceValues.Entry.reduce(_:), v23);
      uint64_t v2 = v31;
      uint64_t v38 = AssociatedTypeWitness;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v37);
      (*(void (**)(uint64_t *, char *, uint64_t))(v18 + 16))(boxed_opaque_existential_1, v20, AssociatedTypeWitness);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      outlined init with take of Any(&v37, v21);
      uint64_t v25 = v20;
      uint64_t v5 = v34;
      uint64_t v26 = AssociatedTypeWitness;
      uint64_t v3 = v30;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v26);
      outlined destroy of PreferenceValues.Entry((uint64_t)v39);
      goto LABEL_14;
    }
    if (v11 < v9)
    {
      if (*(void *)(*(void *)v4 + 16) < v8) {
        goto LABEL_26;
      }
      outlined init with copy of PreferenceValues.Entry(v10, (uint64_t)v39);
      specialized Array.replaceSubrange<A>(_:with:)(v7 - 1, v7 - 1, (uint64_t)v39);
      ++v36;
LABEL_14:
      ++v5;
    }
    if (v7 >= v36) {
      break;
    }
    v6 += 7;
    ++v7;
  }
  while (v5 < v3);
  if (v5 >= v3) {
    return;
  }
  unint64_t v27 = *(void *)(v2 + 16);
  if (v27 >= v5 && v27 >= v3)
  {
    uint64_t v28 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v28, v35, v5, (2 * v3) | 1);
    return;
  }
LABEL_27:
  __break(1u);
}

unint64_t PreferenceValues.index<A>(of:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  unint64_t result = PreferenceValues._index(of:)(a1);
  unint64_t v5 = *(void *)(v3 + 16);
  if (result == v5) {
    return 0;
  }
  if (result >= v5)
  {
    __break(1u);
    return result;
  }
  if (*(void *)(v3 + 56 * result + 32) != a1) {
    return 0;
  }
  return result;
}

uint64_t PreferenceValues._index(of:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = v6 + (v3 >> 1);
      if (__OFADD__(v6, v3 >> 1)) {
        break;
      }
      if ((v7 & 0x8000000000000000) != 0) {
        goto LABEL_16;
      }
      if (v7 >= *(void *)(v2 + 16)) {
        goto LABEL_17;
      }
      outlined init with copy of PreferenceValues.Entry(v2 + 32 + 56 * v7, (uint64_t)v9);
      uint64_t v8 = v9[0];
      uint64_t result = outlined destroy of PreferenceValues.Entry((uint64_t)v9);
      if (v8 >= a1) {
        v3 >>= 1;
      }
      else {
        v3 += ~(v3 >> 1);
      }
      if (v8 < a1) {
        unint64_t v6 = v7 + 1;
      }
      if ((uint64_t)v3 <= 0)
      {
        swift_bridgeObjectRelease();
        return v6;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t outlined init with copy of PreferenceValues.Entry(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for PreferenceValues.Entry(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 24, a2 + 24);
  return a1;
}

uint64_t outlined destroy of PreferenceValues.Entry(uint64_t a1)
{
  return a1;
}

uint64_t destroy for PreferenceValues.Entry(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 24);
}

uint64_t PreferenceValues.Entry.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(v2 + 24, (uint64_t)v10);
  swift_dynamicCast();
  int v8 = *(_DWORD *)(v2 + 16);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 32))(a2, v7, a1);
  uint64_t result = type metadata accessor for PreferenceValues.Value();
  *(_DWORD *)(a2 + *(int *)(result + 28)) = v8;
  return result;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void specialized PreferenceValues.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4;
  uint64_t v7 = a1;
  uint64_t v8 = *v4;
  unint64_t v9 = *(void *)(*v4 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = 0;
    while (1)
    {
      unint64_t v11 = v10 + (v9 >> 1);
      if (__OFADD__(v10, v9 >> 1)) {
        break;
      }
      if ((v11 & 0x8000000000000000) != 0) {
        goto LABEL_16;
      }
      if (v11 >= *(void *)(v8 + 16)) {
        goto LABEL_17;
      }
      outlined init with copy of PreferenceValues.Entry(v8 + 32 + 56 * v11, (uint64_t)v16);
      uint64_t v12 = v16[0];
      outlined destroy of PreferenceValues.Entry((uint64_t)v16);
      if (v12 >= a2) {
        v9 >>= 1;
      }
      else {
        v9 += ~(v9 >> 1);
      }
      if (v12 < a2) {
        unint64_t v10 = v11 + 1;
      }
      if ((uint64_t)v9 <= 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v7 = a1;
        uint64_t v5 = a4;
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  else
  {
    unint64_t v10 = 0;
LABEL_14:
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    PreferenceValues.setValue<A>(_:of:at:)(v7, a2, v5, v10, AssociatedTypeWitness);
  }
}

unint64_t lazy protocol witness table accessor for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery()
{
  unint64_t result = lazy protocol witness table cache variable for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery;
  if (!lazy protocol witness table cache variable for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery);
  }
  return result;
}

uint64_t static _ViewOutputs.multiView(inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  int v9 = *(_DWORD *)(a1 + 80);
  uint64_t v19 = *(void *)a1;
  int v20 = v5;
  uint64_t v21 = v6;
  long long v22 = *(_OWORD *)(a1 + 24);
  uint64_t v23 = v7;
  uint64_t v24 = v8;
  long long v25 = *(_OWORD *)(a1 + 56);
  uint64_t v26 = *(void *)(a1 + 72);
  int v27 = v9;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  swift_retain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v10 = specialized find<A>(_:key:)(v19);
  if (v10)
  {
    unint64_t v11 = (uint64_t *)(v10 + 72);
    uint64_t v12 = (uint64_t *)(v10 + 80);
  }
  else
  {
    unint64_t v11 = (uint64_t *)&static ImplicitRootType.defaultValue;
    uint64_t v12 = (uint64_t *)&off_26B0F1518;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v13 = *v12;
  uint64_t v14 = *v11;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  uint64_t result = (*(uint64_t (**)(uint64_t *, void *, _UNKNOWN **, uint64_t, uint64_t))(v13 + 8))(&v19, &unk_26FA45D88, &protocol witness table for MakeViewRoot, v14, v13);
  uint64_t v16 = v30;
  if (v30)
  {
    int v17 = v31;
    unint64_t v18 = HIDWORD(v31);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    *(void *)a4 = v16;
    *(_DWORD *)(a4 + 8) = v17;
    *(_DWORD *)(a4 + 12) = v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized find<A>(_:key:)(uint64_t result)
{
  unint64_t v1 = ((unint64_t)&type metadata for ImplicitRootType >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for ImplicitRootType >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for ImplicitRootType >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for ImplicitRootType >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for ImplicitRootType >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for ImplicitRootType >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for ImplicitRootType >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for ImplicitRootType >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for ImplicitRootType >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for ImplicitRootType >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _GraphInputs.HasWidgetMetadataKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.HasWidgetMetadataKey >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.HasWidgetMetadataKey >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _GraphInputs.HasWidgetMetadataKey >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.HasWidgetMetadataKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.HasWidgetMetadataKey >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.HasWidgetMetadataKey >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _GraphInputs.HasWidgetMetadataKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.HasWidgetMetadataKey >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _GraphInputs.HasWidgetMetadataKey >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _GraphInputs.SavedTransactionKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.SavedTransactionKey >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.SavedTransactionKey >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _GraphInputs.SavedTransactionKey >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.SavedTransactionKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.SavedTransactionKey >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.SavedTransactionKey >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _GraphInputs.SavedTransactionKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.SavedTransactionKey >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _GraphInputs.SavedTransactionKey >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _ViewInputs.ScrapeableParentID >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _ViewInputs.ScrapeableParentID >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _ViewInputs.ScrapeableParentID >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _ViewInputs.ScrapeableParentID >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _ViewInputs.ScrapeableParentID >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _ViewInputs.ScrapeableParentID >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _ViewInputs.ScrapeableParentID >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _ViewInputs.ScrapeableParentID >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _ViewInputs.ScrapeableParentID >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _ViewInputs.ScrapeableParentID >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionKey >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionKey >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _GraphInputs.ContentScrollPositionKey >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.ContentScrollPositionKey >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionKey >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.ContentScrollPositionKey >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _GraphInputs.ContentScrollPositionKey >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _GraphInputs.ContentScrollPositionAnchorKey >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _GraphInputs.ScrollPositionKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ScrollPositionKey >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.ScrollPositionKey >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _GraphInputs.ScrollPositionKey >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.ScrollPositionKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.ScrollPositionKey >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ScrollPositionKey >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _GraphInputs.ScrollPositionKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.ScrollPositionKey >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _GraphInputs.ScrollPositionKey >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _GraphInputs.TextAccessibilityProviderKey >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _GraphInputs.TextAlwaysOnProviderKey >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _GraphInputs.GestureAccessibilityProviderKey >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _GraphInputs.SpacerRepresentationKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.SpacerRepresentationKey >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.SpacerRepresentationKey >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _GraphInputs.SpacerRepresentationKey >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.SpacerRepresentationKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.SpacerRepresentationKey >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.SpacerRepresentationKey >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _GraphInputs.SpacerRepresentationKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.SpacerRepresentationKey >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _GraphInputs.SpacerRepresentationKey >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _GraphInputs.TextRepresentationKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.TextRepresentationKey >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.TextRepresentationKey >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _GraphInputs.TextRepresentationKey >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.TextRepresentationKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.TextRepresentationKey >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.TextRepresentationKey >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _GraphInputs.TextRepresentationKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.TextRepresentationKey >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _GraphInputs.TextRepresentationKey >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _GraphInputs.ImageRepresentationKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ImageRepresentationKey >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.ImageRepresentationKey >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _GraphInputs.ImageRepresentationKey >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.ImageRepresentationKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.ImageRepresentationKey >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ImageRepresentationKey >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _GraphInputs.ImageRepresentationKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.ImageRepresentationKey >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _GraphInputs.ImageRepresentationKey >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _GraphInputs.ImageAccessibilityProviderKey >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _GraphInputs.NamedImageRepresentationKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.NamedImageRepresentationKey >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.NamedImageRepresentationKey >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _GraphInputs.NamedImageRepresentationKey >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.NamedImageRepresentationKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.NamedImageRepresentationKey >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.NamedImageRepresentationKey >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _GraphInputs.NamedImageRepresentationKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.NamedImageRepresentationKey >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _GraphInputs.NamedImageRepresentationKey >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _GraphInputs.ScrollPositionAnchorKey >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _GraphInputs.ScrollStateRequestKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ScrollStateRequestKey >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.ScrollStateRequestKey >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _GraphInputs.ScrollStateRequestKey >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.ScrollStateRequestKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.ScrollStateRequestKey >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ScrollStateRequestKey >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _GraphInputs.ScrollStateRequestKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.ScrollStateRequestKey >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _GraphInputs.ScrollStateRequestKey >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _GraphInputs.ScrollPhaseStateKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ScrollPhaseStateKey >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.ScrollPhaseStateKey >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _GraphInputs.ScrollPhaseStateKey >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.ScrollPhaseStateKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.ScrollPhaseStateKey >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.ScrollPhaseStateKey >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _GraphInputs.ScrollPhaseStateKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.ScrollPhaseStateKey >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _GraphInputs.ScrollPhaseStateKey >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = ((unint64_t)&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 4) & 0x3F;
  if (__OFSUB__(v1, 64))
  {
    __break(1u);
    goto LABEL_17;
  }
  BOOL v2 = __OFADD__(v1, 64);
  unint64_t v3 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 4);
  if (!v2) {
    unint64_t v3 = 1 << ((unint64_t)&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 4);
  }
  unint64_t v4 = (unsigned __int16)&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 10;
  if (v4 > 0x40)
  {
    unint64_t v5 = 0;
    goto LABEL_11;
  }
  if (__OFSUB__(v4, 64))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << ((unint64_t)&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 10);
  if ((unsigned __int16)((unsigned __int16)&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 10) >= 0x40uLL) {
    uint64_t v6 = 0;
  }
  BOOL v2 = __OFADD__(v4, 64);
  unint64_t v5 = 1uLL >> -(char)((unint64_t)&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 10);
  if (!v2) {
    unint64_t v5 = v6;
  }
LABEL_11:
  unint64_t v7 = ((unint64_t)&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 16) & 0x3F;
  if (__OFSUB__(v7, 64))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (__OFADD__(v7, 64)) {
    unint64_t v8 = 1uLL >> -(char)(&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 16);
  }
  else {
    unint64_t v8 = 1 << (&type metadata for _GraphInputs.TextSelectionRepresentationKey >> 16);
  }
  return specialized find1<A>(_:key:filter:)(result, v5 | v3 | v8);
}

uint64_t closure #1 in makeSecondaryLayerView<A>(secondaryLayer:alignment:inputs:body:flipOrder:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  uint64_t v23 = a1[2];
  uint64_t v24 = *a1;
  int v5 = *((_DWORD *)a1 + 6);
  int v6 = *((_DWORD *)a1 + 7);
  int v7 = *((_DWORD *)a1 + 9);
  int v19 = *((_DWORD *)a1 + 8);
  uint64_t v8 = a1[6];
  uint64_t v20 = a1[5];
  int v9 = *((_DWORD *)a1 + 14);
  int v10 = *((_DWORD *)a1 + 15);
  int v11 = *((_DWORD *)a1 + 16);
  int v12 = *((_DWORD *)a1 + 17);
  int v13 = *((_DWORD *)a1 + 19);
  int v16 = *((_DWORD *)a1 + 20);
  int v17 = *((_DWORD *)a1 + 18);
  _GraphValue.init(_:)(a2, &v27);
  int v25 = v27;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v44 = v24;
  int v45 = v4;
  uint64_t v46 = v23;
  int v47 = v5;
  int v48 = v6;
  int v50 = v7;
  uint64_t v51 = v20;
  uint64_t v52 = v8;
  int v53 = v9;
  int v54 = v10;
  int v55 = v11;
  int v56 = v12;
  int v57 = v17;
  int v58 = v13;
  int v59 = v16;
  int v26 = v25;
  uint64_t v28 = v24;
  int v29 = v4;
  uint64_t v30 = v23;
  int v31 = v5;
  int v32 = v6;
  int v33 = 0;
  int v34 = v7;
  uint64_t v35 = v20;
  uint64_t v36 = v8;
  int v37 = v9;
  int v38 = v10;
  int v39 = v11;
  int v40 = v12;
  int v41 = v17;
  int v42 = v13;
  int v43 = v16;
  uint64_t v14 = *(void (**)(int *, uint64_t *))(a3 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(&v26, &v28);
  int v49 = v19;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a4, (uint64_t)&v44);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
}

uint64_t type metadata accessor for ImageStyleProtocol.Type(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    type metadata accessor for ScrollStateRequest(255, a3);
    uint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

double static View._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, double *a4@<X8>)
{
  uint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(a2 + 80);
  int v18 = *a1;
  uint64_t v10 = v4;
  int v11 = v5;
  uint64_t v12 = v6;
  long long v8 = *(_OWORD *)(a2 + 40);
  long long v13 = *(_OWORD *)(a2 + 24);
  long long v14 = v8;
  long long v15 = *(_OWORD *)(a2 + 56);
  uint64_t v16 = *(void *)(a2 + 72);
  int v17 = v7;
  return static View.makeView(view:inputs:)(&v18, &v10, a3, a4);
}

double static View.makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, double *a4@<X8>)
{
  void (*v32)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  double result;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v41;
  uint64_t AssociatedTypeWitness;
  int v43;
  uint64_t v44;
  double v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  long long v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  long long v81;
  uint64_t v82;
  uint64_t v83;
  long long v84;
  uint64_t v85;
  int v86;
  uint64_t v87;

  uint64_t v87 = *MEMORY[0x263EF8340];
  int v6 = *a1;
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  int v12 = *((_DWORD *)a2 + 20);
  static DynamicPropertyCache.fields(of:)(a3, (uint64_t)&v78);
  uint64_t v13 = v78;
  uint64_t v14 = v79;
  char v15 = v80;
  int v16 = HIDWORD(v80);
  unsigned int v78 = v7;
  LODWORD(v79) = v8;
  unint64_t v81 = *(_OWORD *)(a2 + 3);
  unsigned int v80 = v9;
  unsigned int v82 = v10;
  unsigned int v83 = v11;
  unint64_t v84 = *(_OWORD *)(a2 + 7);
  uint64_t v17 = a2[9];
  int v18 = v6;
  uint64_t v19 = v14;
  long long v85 = v17;
  uint64_t v86 = v12;
  uint64_t v20 = v13;
  uint64_t v46 = v18;
  *(void *)&uint64_t v63 = v13;
  *((void *)&v63 + 1) = v14;
  LOBYTE(v64) = v15;
  int v41 = v16;
  HIDWORD(v64) = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static View.makeBody(view:inputs:fields:)(&v44, (uint64_t)&v47, &v46, (uint64_t)&v78, &v63);
  int v43 = v44;
  if ((v49 & 1) == 0)
  {
    LODWORD(v44) = v18;
    *(void *)&uint64_t v63 = v20;
    *((void *)&v63 + 1) = v19;
    LOBYTE(v64) = v15;
    HIDWORD(v64) = v41;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v44, (uint64_t *)&v63, a3);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = v78;
  uint64_t v22 = v80;
  int v38 = v81;
  int v39 = v79;
  uint64_t v23 = *((void *)&v81 + 1);
  int v37 = DWORD1(v81);
  uint64_t v24 = v82;
  uint64_t v25 = v83;
  int v27 = v84;
  int v26 = DWORD1(v84);
  int v28 = HIDWORD(v84);
  uint64_t v35 = v85;
  uint64_t v36 = DWORD2(v84);
  int v29 = v86;
  int v34 = HIDWORD(v85);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  *(void *)&uint64_t v63 = v21;
  DWORD2(v63) = v39;
  int v64 = v22;
  uint64_t v65 = v38;
  uint64_t v66 = v37;
  unsigned int v69 = v24;
  unsigned int v70 = v25;
  int v71 = v27;
  unsigned int v72 = v26;
  unsigned int v73 = v36;
  unsigned int v74 = v28;
  unsigned int v75 = v35;
  uint64_t v76 = v34;
  unsigned int v77 = v29;
  unint64_t v67 = 0;
  unsigned int v68 = HIDWORD(v23);
  uint64_t v46 = v43;
  int v47 = v21;
  LODWORD(v48) = v39;
  int v49 = v22;
  int v50 = v38;
  uint64_t v51 = v37;
  uint64_t v52 = 0;
  int v53 = HIDWORD(v23);
  int v54 = v24;
  int v55 = v25;
  int v56 = v27;
  int v57 = v26;
  int v58 = v36;
  int v59 = v28;
  uint64_t v60 = v35;
  uint64_t v61 = v34;
  uint64_t v62 = v29;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  int v32 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                         + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32(&v44, &v46, &v47, AssociatedTypeWitness, AssociatedConformanceWitness);
  unint64_t v67 = v23;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v44, (uint64_t)&v63);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a4 = v44;
  uint64_t result = v45;
  a4[1] = v45;
  return result;
}

uint64_t protocol witness for static _VariadicView_AnyImplicitRoot.visitType<A>(visitor:) in conformance _ZStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _VariadicView_ImplicitRoot.visitType<A>(visitor:)(a1, a4, a2, (uint64_t)&protocol witness table for _ZStackLayout, a3);
}

uint64_t protocol witness for static _VariadicView_AnyImplicitRoot.visitType<A>(visitor:) in conformance _VStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _VariadicView_ImplicitRoot.visitType<A>(visitor:)(a1, a4, a2, (uint64_t)&protocol witness table for _VStackLayout, a3);
}

uint64_t static _VariadicView_ImplicitRoot.visitType<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 8))(a2, a2, a4, a3);
}

uint64_t MakeViewRoot.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v41)(void *__return_ptr, int *, Swift::UInt *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  int v44;
  void v45[2];
  Swift::UInt v46;
  int v47;
  uint64_t v48;
  long long v49;
  uint64_t v50;
  uint64_t v51;
  long long v52;
  uint64_t v53;
  int v54;

  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v10 = *(void *)v3;
  LODWORD(v8) = *(_DWORD *)(v3 + 8);
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = *(void *)(v4 + 40);
  uint64_t v13 = *(void *)(v4 + 48);
  int v14 = *(_DWORD *)(v4 + 80);
  uint64_t v46 = v10;
  int v47 = v8;
  int v48 = v11;
  int v49 = *(_OWORD *)(v4 + 24);
  int v50 = v12;
  uint64_t v51 = v13;
  uint64_t v52 = *(_OWORD *)(v4 + 56);
  int v53 = *(void *)(v4 + 72);
  int v54 = v14;
  int v16 = *(void (**)(uint64_t, uint64_t))(v15 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(a2, a3);
  LOBYTE(v45[0]) = 1;
  LODWORD(v41) = _ViewInputs.intern<A>(_:id:)((uint64_t)v9, (char *)v45, a2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v17 = *(void *)v4;
  int v40 = *(_DWORD *)(v4 + 8);
  uint64_t v18 = *(void *)(v4 + 16);
  uint64_t v19 = *(void *)(v4 + 24);
  uint64_t v20 = *(void *)(v4 + 32);
  uint64_t v21 = *(void *)(v4 + 40);
  uint64_t v22 = *(void *)(v4 + 48);
  uint64_t v23 = *(void *)(v4 + 56);
  uint64_t v24 = *(void *)(v4 + 64);
  uint64_t v25 = *(void *)(v4 + 72);
  int v39 = *(_DWORD *)(v4 + 80);
  int v43 = *(void *)(a3 + 16);
  uint64_t v26 = *(void *)(v43 + 8);
  int v27 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8);
  swift_retain();
  int v42 = v18;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v28 = v27(a2, v26);
  uint64_t v29 = swift_retain();
  uint64_t v30 = specialized find<A>(_:key:)(v29);
  if (!v30 || (Swift::UInt value = v17, v28 != *(void *)(v30 + 72)))
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(0, &lazy cache variable for type metadata for TypedElement<ViewListOptionsInput>, (uint64_t)&type metadata for ViewListOptionsInput, (uint64_t)&protocol witness table for ViewListOptionsInput, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(void *)(swift_allocObject() + 72) = v28;
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ViewListOptionsInput, 0, v17).value;
  }
  swift_release();
  _GraphValue.init(_:)(v41, &v44);
  uint64_t v46 = value;
  int v47 = v40;
  int v48 = v42;
  *(void *)&int v49 = v19;
  *((void *)&v49 + 1) = v20;
  int v50 = v21;
  uint64_t v51 = v22;
  *(void *)&uint64_t v52 = v23;
  *((void *)&v52 + 1) = v24;
  int v53 = v25;
  int v54 = v39;
  uint64_t v32 = *(void *)(v4 + 88);
  uint64_t v33 = *(void *)(v4 + 96);
  uint64_t v34 = v43;
  int v41 = *(void (**)(void *__return_ptr, int *, Swift::UInt *, uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v41(v45, &v44, &v46, v32, v33, a2, v34);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  uint64_t v35 = v45[0];
  uint64_t v36 = v45[1];
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v4 + 104) = v35;
  *(void *)(v4 + 112) = v36;
  return result;
}

uint64_t _ViewInputs.intern<A>(_:id:)(uint64_t a1, char *a2, uint64_t a3)
{
  char v4 = *a2;
  return _GraphInputs.intern<A>(_:id:)(a1, &v4, a3);
}

uint64_t _GraphInputs.intern<A>(_:id:)(uint64_t a1, char *a2, uint64_t a3)
{
  char v5 = *a2;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v6 = (id)AGSubgraphGetCurrent();
    if (!v6) {
      goto LABEL_8;
    }
    uint64_t v7 = v6;
    id v8 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v8 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    char v12 = v5;
    Swift::UInt v9 = default argument 1 of GraphHost.intern<A>(_:for:id:)(a3);
    uint64_t v10 = GraphHost.intern<A>(_:for:id:)(a1, v9, &v12, a3);
    swift_release();
    return v10;
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _ZStackLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = *a1;
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  long long v18 = *(_OWORD *)(a2 + 5);
  long long v19 = *(_OWORD *)(a2 + 3);
  long long v17 = *(_OWORD *)(a2 + 7);
  uint64_t v11 = a2[9];
  int v12 = *((_DWORD *)a2 + 20);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v13 = static CoreGlue.shared;
  int v29 = v7;
  uint64_t v21 = v8;
  int v22 = v9;
  uint64_t v23 = v10;
  long long v24 = v19;
  long long v25 = v18;
  long long v26 = v17;
  uint64_t v27 = v11;
  int v28 = v12;
  int v14 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                                             + 0xB0);
  unint64_t v15 = lazy protocol witness table accessor for type _ZStackLayout and conformance _ZStackLayout();
  id v16 = v13;
  v14(&v29, &v21, a3, a4, a5, v15);
}

unint64_t lazy protocol witness table accessor for type _ZStackLayout and conformance _ZStackLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _ZStackLayout and conformance _ZStackLayout;
  if (!lazy protocol witness table cache variable for type _ZStackLayout and conformance _ZStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ZStackLayout and conformance _ZStackLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ZStackLayout and conformance _ZStackLayout;
  if (!lazy protocol witness table cache variable for type _ZStackLayout and conformance _ZStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ZStackLayout and conformance _ZStackLayout);
  }
  return result;
}

uint64_t protocol witness for static _VariadicView_ImplicitRoot.implicitRoot.getter in conformance _VStackLayout@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for center != -1) {
    uint64_t result = swift_once();
  }
  *(void *)a1 = static HorizontalAlignment.center;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

double protocol witness for static _VariadicView_ImplicitRoot.implicitRoot.getter in conformance _ZStackLayout@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for center != -1) {
    swift_once();
  }
  double result = *(double *)&static Alignment.center;
  *a1 = static Alignment.center;
  return result;
}

double protocol witness for static View._makeView(view:inputs:) in conformance HStack<A>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  return static HStack._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

double static HStack._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  int v6 = *a1;
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  int v10 = *((_DWORD *)a2 + 6);
  int v25 = *((_DWORD *)a2 + 9);
  int v26 = *((_DWORD *)a2 + 8);
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  int v23 = *((_DWORD *)a2 + 15);
  int v24 = *((_DWORD *)a2 + 14);
  int v21 = *((_DWORD *)a2 + 17);
  int v22 = *((_DWORD *)a2 + 16);
  int v19 = *((_DWORD *)a2 + 19);
  int v20 = *((_DWORD *)a2 + 18);
  int v17 = *((_DWORD *)a2 + 7);
  int v18 = *((_DWORD *)a2 + 20);
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  LODWORD(v51) = v6;
  type metadata accessor for HStack();
  type metadata accessor for _GraphValue();
  uint64_t v13 = type metadata accessor for _VariadicView.Tree();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static HStack._makeView(view:inputs:), v13, &v32);
  int v14 = v32;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v51 = v7;
  uint64_t v53 = v9;
  int v52 = v8;
  int v54 = v10;
  int v55 = v17;
  int v57 = v25;
  uint64_t v58 = v11;
  uint64_t v59 = v12;
  int v60 = v24;
  int v61 = v23;
  int v62 = v22;
  int v63 = v21;
  int v64 = v20;
  int v65 = v19;
  int v66 = v18;
  int v29 = v14;
  uint64_t v35 = v7;
  int v36 = v8;
  uint64_t v37 = v9;
  int v38 = v10;
  int v39 = v17;
  int v40 = 0;
  int v41 = v25;
  uint64_t v42 = v11;
  uint64_t v43 = v12;
  int v44 = v24;
  int v45 = v23;
  int v46 = v22;
  int v47 = v21;
  int v48 = v20;
  int v49 = v19;
  int v50 = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _VariadicView.Tree<>._makeView(view:inputs:)(&v29, (uint64_t)&v35, (uint64_t)&type metadata for _HStackLayout, a3, (uint64_t)&protocol witness table for _HStackLayout, a4, (uint64_t)&v30);
  int v56 = v26;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v30, (uint64_t)&v51);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a5 = v30;
  double result = v31;
  a5[1] = v31;
  return result;
}

uint64_t type metadata accessor for HStack()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance <> _ConditionalContent<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static _ConditionalContent<>._makeView(view:inputs:)(a1, a2, a3);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PreferencesOutputs>, (uint64_t)&type metadata for PreferencesOutputs, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  size_t v15 = 16 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(tag: Int, links: _DynamicPropertyBuffer)>();
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    memcpy(v12, v13, 24 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedGradient.Stop>, (uint64_t)&type metadata for ResolvedGradient.Stop, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  int v14 = 48 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Gradient.Stop>, (uint64_t)&type metadata for Gradient.Stop, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyHashable2>, (uint64_t)&type metadata for AnyHashable2, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<[Path?]>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  int v14 = 56 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<LayoutSubviews.Storage.IndexedAttributes>, (uint64_t)&type metadata for LayoutSubviews.Storage.IndexedAttributes, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 12);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[12 * v8]) {
      memmove(v12, v13, 12 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[12 * v8] || v12 >= &v13[12 * v8])
  {
    memcpy(v12, v13, 12 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Spacing.Key>, (uint64_t)&type metadata for Spacing.Key, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  size_t v15 = 16 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Float>, MEMORY[0x263F8D5C8], MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<[Path?]>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvableTextSegmentAttribute.Value.Run>, (uint64_t)&type metadata for ResolvableTextSegmentAttribute.Value.Run, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Timing.Chunk>, (uint64_t)&type metadata for Text.Effect.Timing.Chunk, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.StopMarkerCollector.Segment.Element>, (uint64_t)&type metadata for Text.Effect.StopMarkerCollector.Segment.Element, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Cluster #1 in static Text.Effect.stopMarkers(_:)>, (uint64_t)&type metadata for Cluster #1 in static Text.Effect.stopMarkers(_:), MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  size_t v15 = 32 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<Range<Int>>();
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.RunSlice>, (uint64_t)&type metadata for Text.Layout.RunSlice, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8]) {
      memmove(v13, v14, v8 << 6);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[64 * v8] || v13 >= &v14[64 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.StopIndex>, (uint64_t)&type metadata for Text.Effect.StopIndex, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.FlatPath>, (uint64_t)&type metadata for Text.Effect.FlatPath, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.PathInterpolator.PathGlyph>, (uint64_t)&type metadata for Text.Effect.PathInterpolator.PathGlyph, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8]) {
      memmove(v13, v14, v8 << 6);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[64 * v8] || v13 >= &v14[64 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Path>, (uint64_t)&type metadata for Path, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  int v14 = 40 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<[Path?]>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGFloat>, MEMORY[0x263F8EF38], MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.PathInterpolator.Metrics>, (uint64_t)&type metadata for Text.Effect.PathInterpolator.Metrics, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.BaseFragment>, (uint64_t)&type metadata for Text.Effect.BaseFragment, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Double>, MEMORY[0x263F8D538], MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GraphicsContext.ResolvedShading>, (uint64_t)&type metadata for GraphicsContext.ResolvedShading, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 160);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[160 * v8]) {
      memmove(v12, v13, 160 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[160 * v8] || v12 >= &v13[160 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Line>, (uint64_t)&type metadata for Text.Layout.Line, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  int v14 = 48 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Edge>, (uint64_t)&type metadata for Edge, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.MarkerLayoutInfo.Element>, (uint64_t)&type metadata for Text.Effect.MarkerLayoutInfo.Element, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8]) {
      memmove(v12, v13, 96 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[96 * v8] || v12 >= &v13[96 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x263F8D6C8]);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.StopCollector.Segment.Element>, (uint64_t)&type metadata for Text.Effect.StopCollector.Segment.Element, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8]) {
      memmove(v12, v13, 96 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[96 * v8] || v12 >= &v13[96 * v8])
  {
    memcpy(v12, v13, 96 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CodableAccessibilityDataSeriesConfiguration.ValueDescription>, (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration.ValueDescription, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityDataSeriesConfiguration.ValueDescription>, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration.ValueDescription, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<[Path?]>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGRect>, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<GesturePhase<()>>();
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8]) {
      memmove(v13, v14, 2 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[2 * v8] || v13 >= &v14[2 * v8])
  {
    memcpy(v13, v14, 2 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<LayoutGestureBox.Child>, (uint64_t)&type metadata for LayoutGestureBox.Child, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 208);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  int v14 = 208 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID.Canonical>, (uint64_t)&type metadata for _ViewList_ID.Canonical, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrapeableContent>, (uint64_t)&type metadata for ScrapeableContent, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>, (uint64_t)&type metadata for CAHostingLayerEvent.Resolved, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SectionConfiguration>, (uint64_t)&type metadata for SectionConfiguration, MEMORY[0x263F8E0F8]);
    int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 136);
  }
  else
  {
    int v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[136 * v8]) {
      memmove(v12, v13, 136 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[136 * v8] || v12 >= &v13[136 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

double protocol witness for static View._makeView(view:inputs:) in conformance _ShapeView<A, B>@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static _ShapeView._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(ValueMetadata **)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), a4);
}

void protocol witness for static View._makeView(view:inputs:) in conformance ZStack<A>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
}

double protocol witness for static View._makeView(view:inputs:) in conformance _UnaryViewAdaptor<A>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  return static _UnaryViewAdaptor._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t protocol witness for _VariadicView_ImplicitRootVisitor.visit<A>(type:) in conformance MakeModifiedRoot<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MakeModifiedRoot.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t MakeModifiedRoot.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v38)(void *__return_ptr, int *, Swift::UInt *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  void v61[2];
  Swift::UInt v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  Swift::UInt v77;
  int v78;
  uint64_t v79;
  long long v80;
  uint64_t v81;
  uint64_t v82;
  long long v83;
  unint64_t v84;
  int v85;
  uint64_t v86;

  unint64_t v5 = v4;
  int v56 = a2;
  uint64_t v86 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  int v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v11 = *((void *)v4 + 1);
  LODWORD(v9) = v4[4];
  uint64_t v12 = *((void *)v4 + 3);
  uint64_t v13 = *((void *)v5 + 6);
  uint64_t v14 = *((void *)v5 + 7);
  int v15 = v5[22];
  unsigned int v77 = v11;
  unsigned int v78 = v9;
  unint64_t v79 = v12;
  unsigned int v80 = *((_OWORD *)v5 + 2);
  unint64_t v81 = v13;
  unsigned int v82 = v14;
  unsigned int v83 = *((_OWORD *)v5 + 4);
  unint64_t v84 = *((void *)v5 + 10);
  long long v85 = v15;
  uint64_t v59 = v16;
  int v17 = *(void (**)(uint64_t, uint64_t))(v16 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = a4;
  uint64_t v19 = a3;
  v17(a3, v18);
  LOBYTE(v62) = 1;
  uint64_t v43 = _ViewInputs.intern<A>(_:id:)((uint64_t)v10, (char *)&v62, a3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v20 = *((void *)v5 + 1);
  int v54 = v5[4];
  uint64_t v21 = *((void *)v5 + 3);
  int v52 = v5[8];
  uint64_t v51 = v5[9];
  int v57 = v5[10];
  uint64_t v53 = v5[11];
  uint64_t v22 = *((void *)v5 + 6);
  uint64_t v23 = *((void *)v5 + 7);
  int v50 = v5[16];
  int v49 = v5[17];
  int v48 = v5[18];
  int v47 = v5[19];
  int v46 = v5[20];
  int v45 = v5[21];
  int v44 = v5[22];
  uint64_t v24 = *(void *)(*(void *)(v59 + 16) + 8);
  int v25 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
  swift_retain();
  int v55 = v21;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = v25(a3, v24);
  uint64_t v27 = swift_retain();
  uint64_t v28 = specialized find<A>(_:key:)(v27);
  if (!v28 || (Swift::UInt value = v20, v26 != *(void *)(v28 + 72)))
  {
    type metadata accessor for TypedElement<ViewListOptionsInput>(0, &lazy cache variable for type metadata for TypedElement<ViewListOptionsInput>, (uint64_t)&type metadata for ViewListOptionsInput, (uint64_t)&protocol witness table for ViewListOptionsInput, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(void *)(swift_allocObject() + 72) = v26;
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ViewListOptionsInput, 0, v20).value;
  }
  swift_release();
  uint64_t v30 = v56;
  uint64_t v31 = *(void *)(v56 + 16);
  uint64_t v58 = *v5;
  uint64_t v32 = *((void *)v5 + 12);
  uint64_t v33 = *((void *)v5 + 13);
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = v31;
  *(void *)(v34 + 24) = v19;
  uint64_t v35 = *(void *)(v30 + 24);
  uint64_t v36 = v59;
  *(void *)(v34 + 32) = v35;
  *(void *)(v34 + 40) = v36;
  *(_DWORD *)(v34 + 48) = v43;
  *(void *)(v34 + 56) = v32;
  *(void *)(v34 + 64) = v33;
  LODWORD(v32) = AGSubgraphShouldRecordTree();
  swift_retain();
  uint64_t v37 = v55;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  LODWORD(v59) = v32;
  if (v32) {
    AGSubgraphBeginTreeElement();
  }
  unsigned int v77 = value;
  unsigned int v78 = v54;
  unint64_t v79 = v37;
  *(void *)&unsigned int v80 = __PAIR64__(v51, v52);
  unint64_t v81 = v22;
  unsigned int v82 = v23;
  HIDWORD(v80) = v53;
  *(void *)&unsigned int v83 = __PAIR64__(v49, v50);
  *((void *)&v83 + 1) = __PAIR64__(v47, v48);
  unint64_t v84 = __PAIR64__(v45, v46);
  long long v85 = v44;
  int v60 = v58;
  int v62 = value;
  int v63 = v54;
  int v64 = v37;
  int v65 = v52;
  int v66 = v51;
  uint64_t v67 = v53;
  unsigned int v68 = v22;
  unsigned int v69 = v23;
  unsigned int v70 = v50;
  int v71 = v49;
  unsigned int v72 = v48;
  unsigned int v73 = v47;
  unsigned int v74 = v46;
  unsigned int v75 = v45;
  uint64_t v76 = v44;
  int v38 = *(void (**)(void *__return_ptr, int *, Swift::UInt *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(v35 + 24);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v38(v61, &v60, &v62, partial apply for closure #1 in MakeModifiedRoot.visit<A>(type:), v34, v31, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  DWORD2(v80) = v57;
  if (v59)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v61, (uint64_t)&v77);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  swift_release();
  swift_release();
  int v39 = v61[0];
  int v40 = v61[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *((void *)v5 + 14) = v39;
  *((void *)v5 + 15) = v40;
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v11 = a4 >> 1;
  uint64_t v12 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_28;
  }
  int v10 = *v5;
  uint64_t v9 = (*v5)[2];
  uint64_t v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v6 = a4;
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v4 = a1;
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v5 = v10;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v15 = v10[3] >> 1, v15 < v13))
  {
    if (v9 <= v13) {
      int64_t v16 = v9 + v12;
    }
    else {
      int64_t v16 = v9;
    }
    int v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v16, 1, v10);
    *unint64_t v5 = v10;
    uint64_t v15 = v10[3] >> 1;
  }
  uint64_t v17 = v10[2];
  uint64_t v18 = v15 - v17;
  if (v11 == v7)
  {
    if (v12 <= 0)
    {
      uint64_t v12 = 0;
      uint64_t v9 = v7;
      goto LABEL_23;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v18 < v12)
  {
    __break(1u);
    goto LABEL_51;
  }
  if (v12 < 0
    || ((unint64_t v19 = (unint64_t)&v10[7 * v17 + 4], v20 = v8 + 56 * v7, v20 < v19 + 56 * v12)
      ? (BOOL v21 = v19 >= v20 + 56 * v12)
      : (BOOL v21 = 1),
        !v21))
  {
LABEL_53:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  swift_arrayInitWithCopy();
  if (v12)
  {
    uint64_t v22 = v10[2];
    BOOL v23 = __OFADD__(v22, v12);
    uint64_t v24 = v22 + v12;
    if (!v23)
    {
      void v10[2] = v24;
      goto LABEL_22;
    }
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
LABEL_22:
  uint64_t v9 = v11;
LABEL_23:
  if (v12 != v18)
  {
    return swift_unknownObjectRelease();
  }
LABEL_30:
  int64_t v26 = v10[2];
  uint64_t v48 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v45 = 0u;
  while (1)
  {
    outlined init with copy of PreferenceValues.Entry?((uint64_t)&v45, (uint64_t)&v41);
    if (!(void)v41) {
      break;
    }
    outlined destroy of PreferenceValues.Entry?((uint64_t)&v41);
    uint64_t v28 = *v5;
    unint64_t v29 = (*v5)[3];
    int64_t v30 = v29 >> 1;
    if ((uint64_t)(v29 >> 1) < v26 + 1)
    {
      uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v26 + 1, 1, *v5);
      *unint64_t v5 = v28;
      int64_t v30 = v28[3] >> 1;
    }
    outlined init with copy of PreferenceValues.Entry?((uint64_t)&v45, (uint64_t)v39);
    if (*(void *)&v39[0])
    {
      if (v26 <= v30) {
        int64_t v31 = v30;
      }
      else {
        int64_t v31 = v26;
      }
      uint64_t v32 = &v28[7 * v26];
      int64_t v27 = v31;
      uint64_t v33 = v32 + 4;
      while (1)
      {
        long long v41 = v39[0];
        long long v42 = v39[1];
        long long v43 = v39[2];
        uint64_t v44 = v40;
        if (v27 == v26) {
          break;
        }
        outlined destroy of PreferenceValues.Entry?((uint64_t)&v45);
        long long v35 = v42;
        long long v34 = v43;
        long long v36 = v41;
        v33[6] = v44;
        *((_OWORD *)v33 + 1) = v35;
        *((_OWORD *)v33 + 2) = v34;
        *(_OWORD *)uint64_t v33 = v36;
        if (v9 == v11)
        {
          uint64_t v48 = 0;
          long long v46 = 0u;
          long long v47 = 0u;
          uint64_t v9 = v11;
          long long v45 = 0u;
        }
        else
        {
          int v38 = specialized ArraySlice.subscript.read((void (**)(uint64_t *))v39, v9, v4, v8, v7, v6);
          outlined init with copy of PreferenceValues.Entry(v37, (uint64_t)&v45);
          ((void (*)(_OWORD *, void))v38)(v39, 0);
          BOOL v23 = __OFADD__(v9++, 1);
          if (v23) {
            goto LABEL_52;
          }
        }
        outlined init with copy of PreferenceValues.Entry?((uint64_t)&v45, (uint64_t)v39);
        v33 += 7;
        ++v26;
        if (!*(void *)&v39[0]) {
          goto LABEL_31;
        }
      }
      outlined destroy of PreferenceValues.Entry((uint64_t)&v41);
      int64_t v26 = v27;
    }
    else
    {
LABEL_31:
      outlined destroy of PreferenceValues.Entry?((uint64_t)v39);
      int64_t v27 = v26;
    }
    (*v5)[2] = v27;
  }
  outlined destroy of PreferenceValues.Entry?((uint64_t)&v45);
  swift_unknownObjectRelease();
  return outlined destroy of PreferenceValues.Entry?((uint64_t)&v41);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance TupleView<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static TupleView._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), a4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _OverlayModifier<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static _OverlayModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t storeEnumTagSinglePayload for OpenURLAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 34) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

void static BackgroundProminence.standard.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

ValueMetadata *type metadata accessor for AnyShapeStyle()
{
  return &type metadata for AnyShapeStyle;
}

void EnvironmentValues.init()(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  BOOL v2 = *(void (**)(void *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  uint64_t v3 = static CoreGlue2.shared;
  v2(a1);
}

BOOL static ColorScheme.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t outlined destroy of DynamicLayoutViewAdaptor.MakeTransition(uint64_t a1)
{
  return a1;
}

uint64_t destroy for DynamicLayoutViewAdaptor.MakeTransition(uint64_t a1)
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

double static Font.Weight.medium.getter()
{
  return 0.23;
}

unint64_t destroy for UnwrapConditional(uint64_t a1)
{
  return outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(*(void *)(a1 + 8));
}

SwiftUI::ViewOrigin __swiftcall ViewOrigin.init(_:)(SwiftUI::ViewOrigin result)
{
  *unint64_t v1 = result.value.x;
  v1[1] = result.value.y;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _FlexFrameLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t static MatchedGeometryProperties.frame.getter()
{
  return 3;
}

void *partial apply for specialized closure #1 in Attribute.syncMainIfReferences<A>(do:)()
{
  void *(*v1)(char *__return_ptr, long long *);
  unsigned char *v2;
  void *result;
  char v4;
  long long v5;

  BOOL v2 = (unsigned char *)v0[2];
  unint64_t v1 = (void *(*)(char *__return_ptr, long long *))v0[3];
  unint64_t v5 = *(_OWORD *)v0[5];
  uint64_t result = v1(&v4, &v5);
  *BOOL v2 = 0;
  return result;
}

uint64_t partial apply for closure #2 in ChildValueTransaction.value.getter(uint64_t (**a1)(uint64_t))
{
  return closure #2 in ChildValueTransaction.value.getter(a1, *(void *)(v1 + 16));
}

uint64_t closure #2 in ChildValueTransaction.value.getter(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

uint64_t specialized closure #1 in LayoutComputer.withMutableEngine<A, B>(type:do:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t partial apply for specialized closure #1 in StatefulRule<>.update<A>(modify:create:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void *partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(void *a1)
{
  return memcpy(a1, *(const void **)(v1 + 16), 0x221uLL);
}

{
  uint64_t v1;

  return memcpy(a1, *(const void **)(v1 + 16), 0x261uLL);
}

{
  uint64_t v1;

  return memcpy(a1, *(const void **)(v1 + 16), 0x1F9uLL);
}

{
  uint64_t v1;

  return memcpy(a1, *(const void **)(v1 + 16), 0x201uLL);
}

uint64_t partial apply for closure #2 in makeSecondaryLayerView<A>(secondaryLayer:alignment:inputs:body:flipOrder:)(uint64_t result)
{
  *(_DWORD *)(result + 20) = *(_DWORD *)(v1 + 28);
  return result;
}

uint64_t partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(void *a1)
{
  return specialized closure #1 in StatefulRule<>.update<A>(to:)(a1, *(uint64_t **)(v1 + 16));
}

{
  uint64_t v1;
  unsigned char __dst[512];
  unsigned char v5[520];

  memcpy(__dst, *(const void **)(v1 + 16), 0x1F9uLL);
  memcpy(v5, a1, 0x1F9uLL);
  outlined release of LinearGradient((uint64_t)v5);
  memcpy(a1, __dst, 0x1F9uLL);
  return outlined retain of LinearGradient((uint64_t)__dst);
}

{
  uint64_t v1;
  unsigned char __dst[352];
  unsigned char v5[360];

  memcpy(__dst, *(const void **)(v1 + 16), 0x159uLL);
  memcpy(v5, a1, 0x159uLL);
  outlined release of Image.Resolved((uint64_t)v5);
  memcpy(a1, __dst, 0x159uLL);
  return outlined retain of Image.Resolved((uint64_t)__dst);
}

uint64_t specialized closure #1 in StatefulRule<>.update<A>(to:)(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  swift_release();
  swift_release();
  *a1 = v3;
  a1[1] = v4;
  swift_retain();

  return swift_retain();
}

__n128 partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  long long v3 = *(_OWORD *)(v2 + 16);
  long long v4 = *(_OWORD *)(v2 + 32);
  long long v5 = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  long long v6 = *(_OWORD *)(v2 + 80);
  long long v7 = *(_OWORD *)(v2 + 96);
  long long v8 = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  __n128 result = *(__n128 *)(v2 + 144);
  long long v10 = *(_OWORD *)(v2 + 160);
  long long v11 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(v2 + 185);
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 176) = v11;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  __n128 result;
  long long v10;
  long long v11;

  uint64_t v2 = *(void *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  long long v3 = *(_OWORD *)(v2 + 16);
  long long v4 = *(_OWORD *)(v2 + 32);
  long long v5 = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  long long v6 = *(_OWORD *)(v2 + 80);
  long long v7 = *(_OWORD *)(v2 + 96);
  long long v8 = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  __n128 result = *(__n128 *)(v2 + 144);
  long long v10 = *(_OWORD *)(v2 + 160);
  long long v11 = *(_OWORD *)(v2 + 176);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(v2 + 192);
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 176) = v11;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

{
  uint64_t v1;
  long long *v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  __n128 result;
  long long v10;
  long long v11;

  uint64_t v2 = *(long long **)(v1 + 16);
  long long v3 = *v2;
  long long v4 = v2[1];
  long long v5 = v2[3];
  *(_OWORD *)(a1 + 32) = v2[2];
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  long long v6 = v2[4];
  long long v7 = v2[5];
  long long v8 = v2[7];
  *(_OWORD *)(a1 + 96) = v2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  __n128 result = (__n128)v2[8];
  long long v10 = v2[9];
  long long v11 = v2[10];
  *(unsigned char *)(a1 + 176) = *((unsigned char *)v2 + 176);
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 160) = v11;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

{
  uint64_t v1;
  long long *v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  __n128 result;
  long long v9;
  long long v10;

  uint64_t v2 = *(long long **)(v1 + 16);
  long long v3 = *v2;
  long long v4 = v2[2];
  *(_OWORD *)(a1 + 16) = v2[1];
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)a1 = v3;
  long long v5 = v2[3];
  long long v6 = v2[4];
  long long v7 = v2[6];
  *(_OWORD *)(a1 + 80) = v2[5];
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
  __n128 result = (__n128)v2[7];
  uint64_t v9 = v2[8];
  long long v10 = v2[9];
  *(_OWORD *)(a1 + 153) = *(long long *)((char *)v2 + 153);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 144) = v10;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  __n128 result;
  long long v11;
  long long v12;

  uint64_t v2 = *(void *)(v1 + 16);
  long long v3 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(v2 + 32);
  long long v5 = *(_OWORD *)(v2 + 48);
  long long v6 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  long long v7 = *(_OWORD *)(v2 + 96);
  long long v8 = *(_OWORD *)(v2 + 112);
  uint64_t v9 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 112) = v8;
  __n128 result = *(__n128 *)(v2 + 160);
  long long v11 = *(_OWORD *)(v2 + 176);
  uint64_t v12 = *(_OWORD *)(v2 + 192);
  *(_OWORD *)(a1 + 201) = *(_OWORD *)(v2 + 201);
  *(_OWORD *)(a1 + 176) = v11;
  *(_OWORD *)(a1 + 192) = v12;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

{
  uint64_t v1;
  long long *v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  __n128 result;
  long long v10;
  long long v11;

  uint64_t v2 = *(long long **)(v1 + 16);
  long long v3 = *v2;
  long long v4 = v2[1];
  long long v5 = v2[3];
  *(_OWORD *)(a1 + 32) = v2[2];
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  long long v6 = v2[4];
  long long v7 = v2[5];
  long long v8 = v2[7];
  *(_OWORD *)(a1 + 96) = v2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  __n128 result = (__n128)v2[8];
  long long v10 = v2[9];
  long long v11 = v2[10];
  *(_OWORD *)(a1 + 169) = *(long long *)((char *)v2 + 169);
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 160) = v11;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(uint64_t a1)
{
  long long v3 = *(long long **)(v1 + 16);
  long long v4 = *v3;
  long long v5 = v3[1];
  long long v6 = v3[3];
  long long v27 = v3[2];
  long long v28 = v6;
  long long v25 = v4;
  long long v26 = v5;
  long long v7 = v3[4];
  long long v8 = v3[5];
  long long v9 = v3[7];
  long long v31 = v3[6];
  long long v32 = v9;
  long long v29 = v7;
  long long v30 = v8;
  long long v10 = v3[8];
  long long v11 = v3[9];
  long long v12 = v3[10];
  *(_DWORD *)&v35[15] = *(_DWORD *)((char *)v3 + 175);
  long long v34 = v11;
  *(_OWORD *)long long v35 = v12;
  long long v33 = v10;
  long long v13 = *(_OWORD *)(a1 + 48);
  long long v36[2] = *(_OWORD *)(a1 + 32);
  v36[3] = v13;
  long long v14 = *(_OWORD *)(a1 + 16);
  v36[0] = *(_OWORD *)a1;
  v36[1] = v14;
  long long v15 = *(_OWORD *)(a1 + 112);
  v36[6] = *(_OWORD *)(a1 + 96);
  v36[7] = v15;
  long long v16 = *(_OWORD *)(a1 + 80);
  v36[4] = *(_OWORD *)(a1 + 64);
  v36[5] = v16;
  *(_DWORD *)((char *)v37 + 15) = *(_DWORD *)(a1 + 175);
  long long v17 = *(_OWORD *)(a1 + 160);
  long long v18 = *(_OWORD *)(a1 + 128);
  v36[9] = *(_OWORD *)(a1 + 144);
  v37[0] = v17;
  v36[8] = v18;
  outlined release of Image.Resolved((uint64_t)v36);
  long long v19 = v34;
  *(_OWORD *)(a1 + 128) = v33;
  *(_OWORD *)(a1 + 144) = v19;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)v35;
  *(_DWORD *)(a1 + 175) = *(_DWORD *)&v35[15];
  long long v20 = v30;
  *(_OWORD *)(a1 + 64) = v29;
  *(_OWORD *)(a1 + 80) = v20;
  long long v21 = v32;
  *(_OWORD *)(a1 + 96) = v31;
  *(_OWORD *)(a1 + 112) = v21;
  long long v22 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v22;
  long long v23 = v28;
  *(_OWORD *)(a1 + 32) = v27;
  *(_OWORD *)(a1 + 48) = v23;
  return outlined retain of Image.Resolved((uint64_t)&v25);
}

{
  uint64_t v1;
  long long *v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  char v36;
  _OWORD v37[11];
  char v38;

  long long v3 = *(long long **)(v1 + 16);
  long long v4 = *v3;
  long long v5 = v3[1];
  long long v6 = v3[3];
  long long v27 = v3[2];
  long long v28 = v6;
  long long v25 = v4;
  long long v26 = v5;
  long long v7 = v3[4];
  long long v8 = v3[5];
  long long v9 = v3[7];
  long long v31 = v3[6];
  long long v32 = v9;
  long long v29 = v7;
  long long v30 = v8;
  long long v10 = v3[8];
  long long v11 = v3[9];
  long long v12 = v3[10];
  long long v36 = *((unsigned char *)v3 + 176);
  long long v34 = v11;
  long long v35 = v12;
  long long v33 = v10;
  long long v13 = *(_OWORD *)(a1 + 48);
  _OWORD v37[2] = *(_OWORD *)(a1 + 32);
  _DWORD v37[3] = v13;
  long long v14 = *(_OWORD *)(a1 + 16);
  v37[0] = *(_OWORD *)a1;
  v37[1] = v14;
  long long v15 = *(_OWORD *)(a1 + 112);
  v37[6] = *(_OWORD *)(a1 + 96);
  v37[7] = v15;
  long long v16 = *(_OWORD *)(a1 + 80);
  v37[4] = *(_OWORD *)(a1 + 64);
  v37[5] = v16;
  int v38 = *(unsigned char *)(a1 + 176);
  long long v17 = *(_OWORD *)(a1 + 160);
  long long v18 = *(_OWORD *)(a1 + 128);
  v37[9] = *(_OWORD *)(a1 + 144);
  v37[10] = v17;
  v37[8] = v18;
  outlined release of LinearGradient((uint64_t)v37);
  long long v19 = v34;
  *(_OWORD *)(a1 + 128) = v33;
  *(_OWORD *)(a1 + 144) = v19;
  *(_OWORD *)(a1 + 160) = v35;
  *(unsigned char *)(a1 + 176) = v36;
  long long v20 = v30;
  *(_OWORD *)(a1 + 64) = v29;
  *(_OWORD *)(a1 + 80) = v20;
  long long v21 = v32;
  *(_OWORD *)(a1 + 96) = v31;
  *(_OWORD *)(a1 + 112) = v21;
  long long v22 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v22;
  long long v23 = v28;
  *(_OWORD *)(a1 + 32) = v27;
  *(_OWORD *)(a1 + 48) = v23;
  return outlined retain of LinearGradient((uint64_t)&v25);
}

{
  uint64_t v1;
  long long *v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  char v44;
  _OWORD v45[14];
  char v46;

  long long v3 = *(long long **)(v1 + 16);
  long long v4 = *v3;
  long long v5 = v3[2];
  long long v31 = v3[1];
  long long v32 = v5;
  long long v30 = v4;
  long long v6 = v3[3];
  long long v7 = v3[4];
  long long v8 = v3[6];
  long long v35 = v3[5];
  long long v36 = v8;
  long long v33 = v6;
  long long v34 = v7;
  long long v9 = v3[7];
  long long v10 = v3[8];
  long long v11 = v3[10];
  int v39 = v3[9];
  uint64_t v40 = v11;
  uint64_t v37 = v9;
  int v38 = v10;
  long long v12 = v3[11];
  long long v13 = v3[12];
  long long v14 = v3[13];
  uint64_t v44 = *((unsigned char *)v3 + 224);
  long long v42 = v13;
  long long v43 = v14;
  long long v41 = v12;
  long long v15 = *(_OWORD *)(a1 + 208);
  v45[12] = *(_OWORD *)(a1 + 192);
  v45[13] = v15;
  long long v46 = *(unsigned char *)(a1 + 224);
  long long v16 = *(_OWORD *)(a1 + 144);
  v45[8] = *(_OWORD *)(a1 + 128);
  v45[9] = v16;
  long long v17 = *(_OWORD *)(a1 + 176);
  v45[10] = *(_OWORD *)(a1 + 160);
  v45[11] = v17;
  long long v18 = *(_OWORD *)(a1 + 80);
  v45[4] = *(_OWORD *)(a1 + 64);
  v45[5] = v18;
  long long v19 = *(_OWORD *)(a1 + 112);
  v45[6] = *(_OWORD *)(a1 + 96);
  v45[7] = v19;
  long long v20 = *(_OWORD *)(a1 + 16);
  v45[0] = *(_OWORD *)a1;
  v45[1] = v20;
  long long v21 = *(_OWORD *)(a1 + 48);
  v45[2] = *(_OWORD *)(a1 + 32);
  v45[3] = v21;
  outlined release of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>((uint64_t)v45);
  long long v22 = v43;
  *(_OWORD *)(a1 + 192) = v42;
  *(_OWORD *)(a1 + 208) = v22;
  *(unsigned char *)(a1 + 224) = v44;
  long long v23 = v39;
  *(_OWORD *)(a1 + 128) = v38;
  *(_OWORD *)(a1 + 144) = v23;
  uint64_t v24 = v41;
  *(_OWORD *)(a1 + 160) = v40;
  *(_OWORD *)(a1 + 176) = v24;
  long long v25 = v35;
  *(_OWORD *)(a1 + 64) = v34;
  *(_OWORD *)(a1 + 80) = v25;
  long long v26 = v37;
  *(_OWORD *)(a1 + 96) = v36;
  *(_OWORD *)(a1 + 112) = v26;
  long long v27 = v31;
  *(_OWORD *)a1 = v30;
  *(_OWORD *)(a1 + 16) = v27;
  long long v28 = v33;
  *(_OWORD *)(a1 + 32) = v32;
  *(_OWORD *)(a1 + 48) = v28;
  return outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>((uint64_t)&v30);
}

{
  uint64_t v1;
  long long *v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  char v36;
  _OWORD v37[11];
  char v38;

  long long v3 = *(long long **)(v1 + 16);
  long long v4 = *v3;
  long long v5 = v3[1];
  long long v6 = v3[3];
  long long v27 = v3[2];
  long long v28 = v6;
  long long v25 = v4;
  long long v26 = v5;
  long long v7 = v3[4];
  long long v8 = v3[5];
  long long v9 = v3[7];
  long long v31 = v3[6];
  long long v32 = v9;
  long long v29 = v7;
  long long v30 = v8;
  long long v10 = v3[8];
  long long v11 = v3[9];
  long long v12 = v3[10];
  long long v36 = *((unsigned char *)v3 + 176);
  long long v34 = v11;
  long long v35 = v12;
  long long v33 = v10;
  long long v13 = *(_OWORD *)(a1 + 48);
  _OWORD v37[2] = *(_OWORD *)(a1 + 32);
  _DWORD v37[3] = v13;
  long long v14 = *(_OWORD *)(a1 + 16);
  v37[0] = *(_OWORD *)a1;
  v37[1] = v14;
  long long v15 = *(_OWORD *)(a1 + 112);
  v37[6] = *(_OWORD *)(a1 + 96);
  v37[7] = v15;
  long long v16 = *(_OWORD *)(a1 + 80);
  v37[4] = *(_OWORD *)(a1 + 64);
  v37[5] = v16;
  int v38 = *(unsigned char *)(a1 + 176);
  long long v17 = *(_OWORD *)(a1 + 160);
  long long v18 = *(_OWORD *)(a1 + 128);
  v37[9] = *(_OWORD *)(a1 + 144);
  v37[10] = v17;
  v37[8] = v18;
  outlined release of ViewTransform((uint64_t)v37);
  long long v19 = v34;
  *(_OWORD *)(a1 + 128) = v33;
  *(_OWORD *)(a1 + 144) = v19;
  *(_OWORD *)(a1 + 160) = v35;
  *(unsigned char *)(a1 + 176) = v36;
  long long v20 = v30;
  *(_OWORD *)(a1 + 64) = v29;
  *(_OWORD *)(a1 + 80) = v20;
  long long v21 = v32;
  *(_OWORD *)(a1 + 96) = v31;
  *(_OWORD *)(a1 + 112) = v21;
  long long v22 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v22;
  long long v23 = v28;
  *(_OWORD *)(a1 + 32) = v27;
  *(_OWORD *)(a1 + 48) = v23;
  return outlined retain of ViewTransform((uint64_t)&v25);
}

{
  return partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(a1, (void (*)(_OWORD *))outlined release of RadialGradient, (uint64_t (*)(long long *))outlined retain of RadialGradient);
}

{
  uint64_t v1;
  long long *v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  char v41;
  _OWORD v42[13];
  char v43;

  long long v3 = *(long long **)(v1 + 16);
  long long v4 = v3[1];
  long long v28 = *v3;
  long long v29 = v4;
  long long v5 = v3[2];
  long long v6 = v3[3];
  long long v7 = v3[5];
  long long v32 = v3[4];
  long long v33 = v7;
  long long v30 = v5;
  long long v31 = v6;
  long long v8 = v3[6];
  long long v9 = v3[7];
  long long v10 = v3[9];
  long long v36 = v3[8];
  uint64_t v37 = v10;
  long long v34 = v8;
  long long v35 = v9;
  long long v11 = v3[10];
  long long v12 = v3[11];
  long long v13 = v3[12];
  long long v41 = *((unsigned char *)v3 + 208);
  int v39 = v12;
  uint64_t v40 = v13;
  int v38 = v11;
  long long v14 = *(_OWORD *)(a1 + 16);
  v42[0] = *(_OWORD *)a1;
  v42[1] = v14;
  long long v15 = *(_OWORD *)(a1 + 80);
  v42[4] = *(_OWORD *)(a1 + 64);
  v42[5] = v15;
  long long v16 = *(_OWORD *)(a1 + 48);
  v42[2] = *(_OWORD *)(a1 + 32);
  v42[3] = v16;
  long long v17 = *(_OWORD *)(a1 + 144);
  v42[8] = *(_OWORD *)(a1 + 128);
  v42[9] = v17;
  long long v18 = *(_OWORD *)(a1 + 112);
  v42[6] = *(_OWORD *)(a1 + 96);
  v42[7] = v18;
  long long v43 = *(unsigned char *)(a1 + 208);
  long long v19 = *(_OWORD *)(a1 + 192);
  long long v20 = *(_OWORD *)(a1 + 160);
  v42[11] = *(_OWORD *)(a1 + 176);
  v42[12] = v19;
  v42[10] = v20;
  outlined release of LinearGradient((uint64_t)v42);
  long long v21 = v39;
  *(_OWORD *)(a1 + 160) = v38;
  *(_OWORD *)(a1 + 176) = v21;
  *(_OWORD *)(a1 + 192) = v40;
  *(unsigned char *)(a1 + 208) = v41;
  long long v22 = v35;
  *(_OWORD *)(a1 + 96) = v34;
  *(_OWORD *)(a1 + 112) = v22;
  long long v23 = v37;
  *(_OWORD *)(a1 + 128) = v36;
  *(_OWORD *)(a1 + 144) = v23;
  uint64_t v24 = v31;
  *(_OWORD *)(a1 + 32) = v30;
  *(_OWORD *)(a1 + 48) = v24;
  long long v25 = v33;
  *(_OWORD *)(a1 + 64) = v32;
  *(_OWORD *)(a1 + 80) = v25;
  long long v26 = v29;
  *(_OWORD *)a1 = v28;
  *(_OWORD *)(a1 + 16) = v26;
  return outlined retain of LinearGradient((uint64_t)&v28);
}

{
  uint64_t v1;
  int *v3;
  int v4;
  uint64_t v5;
  uint64_t vars8;

  long long v3 = *(int **)(v1 + 16);
  long long v4 = *v3;
  long long v5 = *((void *)v3 + 1);
  swift_release();
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + 8) = v5;

  return swift_retain();
}

uint64_t static ViewModifier.makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  void (*v31)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  char v45;
  unint64_t v47;
  long long v48;
  char v49;
  uint64_t AssociatedTypeWitness;
  int v53;
  void v54[2];
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  long long v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  long long v90;
  uint64_t v91;
  uint64_t v92;
  long long v93;
  uint64_t v94;
  int v95;
  uint64_t v96;

  uint64_t v96 = *MEMORY[0x263EF8340];
  int v8 = *a1;
  uint64_t v9 = *a2;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  uint64_t v13 = a2[5];
  uint64_t v12 = a2[6];
  int v14 = *((_DWORD *)a2 + 20);
  static DynamicPropertyCache.fields(of:)(a5, (uint64_t)&v87);
  uint64_t v16 = v87;
  uint64_t v15 = v88;
  char v17 = v89;
  int v18 = HIDWORD(v89);
  uint64_t v87 = v9;
  LODWORD(v88) = v10;
  int v90 = *(_OWORD *)(a2 + 3);
  unint64_t v89 = v11;
  unint64_t v91 = v13;
  unsigned int v92 = v12;
  unsigned int v93 = *(_OWORD *)(a2 + 7);
  unint64_t v94 = a2[9];
  long long v95 = v14;
  uint64_t v37 = v18;
  int v38 = v8;
  int v55 = v8;
  *(void *)&uint64_t v48 = v16;
  *((void *)&v48 + 1) = v15;
  *(void *)&unsigned int v72 = v16;
  *((void *)&v72 + 1) = v15;
  int v49 = v17;
  LOBYTE(v73) = v17;
  HIDWORD(v73) = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ViewModifier.makeBody(modifier:inputs:fields:)(v54, (uint64_t)&v56, &v55, (uint64_t)&v87, &v72);
  uint64_t v53 = v54[0];
  long long v35 = v56;
  long long v36 = v57;
  long long v45 = v58;
  type metadata accessor for _ViewModifier_Content();
  *(void *)&unsigned int v72 = a3;
  *((void *)&v72 + 1) = a4;
  LOBYTE(v73) = 0;
  uint64_t v19 = type metadata accessor for BodyInput();
  _ViewInputs.append<A, B>(_:to:)((uint64_t)&v72, v19, v19, (uint64_t)&type metadata for BodyInputElement, (uint64_t)&protocol witness table for BodyInput<A>, (uint64_t)&protocol witness table for BodyInputElement);
  long long v47 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = v87;
  uint64_t v21 = v89;
  long long v43 = v90;
  uint64_t v44 = v88;
  uint64_t v22 = *((void *)&v90 + 1);
  long long v42 = DWORD1(v90);
  uint64_t v23 = v91;
  uint64_t v24 = v92;
  int v25 = DWORD1(v93);
  int v26 = DWORD2(v93);
  int v27 = HIDWORD(v93);
  int v28 = v94;
  uint64_t v40 = HIDWORD(v94);
  long long v41 = v93;
  int v39 = v95;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  *(void *)&unsigned int v72 = v20;
  DWORD2(v72) = v44;
  unsigned int v73 = v21;
  unsigned int v74 = v43;
  unsigned int v75 = v42;
  unsigned int v78 = v23;
  unint64_t v79 = v24;
  unsigned int v80 = v41;
  unint64_t v81 = v25;
  unsigned int v82 = v26;
  unsigned int v83 = v27;
  unint64_t v84 = v28;
  long long v85 = v40;
  uint64_t v86 = v39;
  unsigned int v77 = HIDWORD(v22);
  uint64_t v76 = 0;
  int v55 = v53;
  int v56 = v20;
  LODWORD(v57) = v44;
  uint64_t v58 = v21;
  uint64_t v59 = v43;
  int v60 = v42;
  int v61 = 0;
  int v62 = HIDWORD(v22);
  int v63 = v23;
  int v64 = v24;
  int v65 = v41;
  int v66 = v25;
  uint64_t v67 = v26;
  unsigned int v68 = v27;
  unsigned int v69 = v28;
  unsigned int v70 = v40;
  int v71 = v39;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  long long v31 = *(void (**)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                        + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31(v54, &v55, &v56, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v76 = v22;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v54, (uint64_t)&v72);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  swift_release();
  swift_release();
  long long v32 = v54[0];
  long long v33 = v54[1];
  if ((v45 & 1) == 0)
  {
    int v56 = v35;
    int v57 = v36;
    LODWORD(v54[0]) = v38;
    unsigned int v72 = v48;
    LOBYTE(v73) = v49;
    HIDWORD(v73) = v37;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)v54, (uint64_t *)&v72, v47);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  __n128 result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a6 = v32;
  a6[1] = v33;
  return result;
}

uint64_t static ViewModifier.makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  *(void *)&long long v36 = a3;
  *((void *)&v36 + 1) = a4;
  uint64_t v69 = *MEMORY[0x263EF8340];
  int v6 = *a1;
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  uint64_t v41 = a2[7];
  int v12 = *((_DWORD *)a2 + 16);
  uint64_t v13 = a2[9];
  char v14 = *((unsigned char *)a2 + 80);
  static DynamicPropertyCache.fields(of:)(a5, (uint64_t)&v59);
  uint64_t v16 = v59;
  uint64_t v15 = v60;
  char v17 = v61;
  int v18 = HIDWORD(v61);
  uint64_t v59 = v7;
  LODWORD(v60) = v8;
  uint64_t v61 = v9;
  long long v62 = *(_OWORD *)(a2 + 3);
  uint64_t v63 = v10;
  uint64_t v64 = v11;
  uint64_t v65 = v41;
  int v66 = v12;
  uint64_t v67 = v13;
  char v68 = v14;
  int v34 = v18;
  int v35 = v6;
  int v45 = v6;
  *(void *)&long long v40 = v16;
  *((void *)&v40 + 1) = v15;
  *(void *)&long long v47 = v16;
  *((void *)&v47 + 1) = v15;
  char v42 = v17;
  LOBYTE(v48) = v17;
  HIDWORD(v48) = v18;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static ViewModifier.makeBody(modifier:inputs:fields:)(&v46, (uint64_t)&v56, &v45, (uint64_t)&v59, &v47);
  unsigned int v43 = v46;
  uint64_t v32 = v56;
  uint64_t v33 = v57;
  char v39 = v58;
  type metadata accessor for _ViewModifier_Content();
  long long v47 = v36;
  LOBYTE(v48) = 1;
  uint64_t v19 = type metadata accessor for BodyInput();
  _GraphInputs.append<A, B>(_:to:)((uint64_t)&v47, v19, v19, (uint64_t)&type metadata for BodyInputElement, (uint64_t)&protocol witness table for BodyInput<A>, (uint64_t)&protocol witness table for BodyInputElement);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = v59;
  int v38 = v60;
  uint64_t v22 = v61;
  long long v23 = v62;
  uint64_t v25 = v63;
  uint64_t v24 = v64;
  uint64_t v37 = v65;
  int v26 = v66;
  uint64_t v27 = v67;
  char v28 = v68;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  LODWORD(v56) = v43;
  *(void *)&long long v47 = v21;
  DWORD2(v47) = v38;
  uint64_t v48 = v22;
  long long v49 = v23;
  uint64_t v50 = v25;
  uint64_t v51 = v24;
  uint64_t v52 = v37;
  int v53 = v26;
  uint64_t v54 = v27;
  char v55 = v28;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *, long long *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v56, &v47, AssociatedTypeWitness, AssociatedConformanceWitness);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v43, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v39 & 1) == 0)
  {
    uint64_t v56 = v32;
    uint64_t v57 = v33;
    int v46 = v35;
    long long v47 = v40;
    LOBYTE(v48) = v42;
    HIDWORD(v48) = v34;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v46, (uint64_t *)&v47, a5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t static ViewModifier.makeBody(modifier:inputs:fields:)(_DWORD *a1, uint64_t a2, int *a3, uint64_t a4, long long *a5)
{
  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    int v10 = *((_DWORD *)a5 + 5);
    char v11 = *((unsigned char *)a5 + 16);
    int v19 = *a3;
    long long v16 = *a5;
    char v17 = v11;
    int v18 = v10;
    uint64_t v12 = type metadata accessor for ModifierBodyAccessor();
    uint64_t WitnessTable = swift_getWitnessTable();
    return BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, (uint64_t)&v19, a4, (uint64_t)&v16, v12, WitnessTable);
  }
  return result;
}

uint64_t static View._makeViewList(view:inputs:)(int *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)a2;
  int v4 = *(_DWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 40);
  int v7 = *(_DWORD *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 72);
  char v9 = *(unsigned char *)(a2 + 80);
  int v20 = *a1;
  uint64_t v11 = v3;
  int v12 = v4;
  uint64_t v13 = v5;
  long long v14 = *(_OWORD *)(a2 + 24);
  uint64_t v15 = v6;
  long long v16 = *(_OWORD *)(a2 + 48);
  int v17 = v7;
  uint64_t v18 = v8;
  char v19 = v9;
  return static View.makeViewList(view:inputs:)(&v20, &v11, a3);
}

uint64_t static View.makeViewList(view:inputs:)(int *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  int v5 = *a1;
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[5];
  uint64_t v38 = a2[7];
  uint64_t v39 = a2[6];
  int v10 = *((_DWORD *)a2 + 16);
  uint64_t v11 = a2[9];
  char v12 = *((unsigned char *)a2 + 80);
  static DynamicPropertyCache.fields(of:)(a3, (uint64_t)&v55);
  uint64_t v14 = v55;
  uint64_t v13 = v56;
  char v15 = v57;
  int v16 = HIDWORD(v57);
  uint64_t v55 = v6;
  LODWORD(v56) = v7;
  uint64_t v57 = v8;
  long long v58 = *(_OWORD *)(a2 + 3);
  uint64_t v59 = v9;
  uint64_t v60 = v39;
  uint64_t v61 = v38;
  int v62 = v10;
  uint64_t v63 = v11;
  char v64 = v12;
  int v31 = v16;
  int v32 = v5;
  int v41 = v5;
  *(void *)&long long v37 = v14;
  *((void *)&v37 + 1) = v13;
  *(void *)&long long v43 = v14;
  *((void *)&v43 + 1) = v13;
  char v40 = v15;
  LOBYTE(v44) = v15;
  HIDWORD(v44) = v16;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static View.makeBody(view:inputs:fields:)(&v42, (uint64_t)&v52, &v41, (uint64_t)&v55, &v43);
  uint64_t v17 = v42;
  uint64_t v29 = v52;
  uint64_t v30 = v53;
  char v36 = v54;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v19 = v55;
  int v35 = v56;
  uint64_t v20 = v57;
  long long v21 = v58;
  uint64_t v23 = v59;
  uint64_t v22 = v60;
  uint64_t v34 = v61;
  int v33 = v62;
  uint64_t v24 = v63;
  char v25 = v64;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  LODWORD(v52) = v17;
  *(void *)&long long v43 = v19;
  DWORD2(v43) = v35;
  uint64_t v44 = v20;
  long long v45 = v21;
  uint64_t v46 = v23;
  uint64_t v47 = v22;
  uint64_t v48 = v34;
  int v49 = v33;
  uint64_t v50 = v24;
  char v51 = v25;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *, long long *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v52, &v43, AssociatedTypeWitness, AssociatedConformanceWitness);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v17, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v36 & 1) == 0)
  {
    uint64_t v52 = v29;
    uint64_t v53 = v30;
    unsigned int v42 = v32;
    long long v43 = v37;
    LOBYTE(v44) = v40;
    HIDWORD(v44) = v31;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v42, (uint64_t *)&v43, a3);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(unint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v10 = *(_DWORD *)a1;
  uint64_t v43 = *a2;
  LOBYTE(v11) = *((unsigned char *)a2 + 16);
  uint64_t v12 = *v3;
  LODWORD(a1) = *((_DWORD *)v3 + 3);
  static os_signpost_type_t.event.getter();
  uint64_t result = kdebug_is_enabled();
  if (result)
  {
    if (one-time initialization token for _signpostLog != -1) {
LABEL_24:
    }
      swift_once();
    uint64_t result = OS_os_log.signpostsEnabled.getter();
    if (result)
    {
      unint64_t v45 = a3;
      swift_getMetatypeMetadata();
      uint64_t v40 = String.init<A>(describing:)();
      uint64_t v16 = v15;
      uint64_t v39 = specialized static Tracing.libraryName(defining:)();
      uint64_t v18 = v17;
      id v19 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      if (v11)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      uint64_t v36 = v18;
      uint64_t v37 = v16;
      uint64_t v42 = v12;
      int v34 = v10;
      int v35 = v9;
      char v44 = 0;
      swift_bridgeObjectRetain();
      if (!a1)
      {
LABEL_20:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      a3 = 0;
      int v10 = 0;
      int v32 = (void (**)(unint64_t, uint64_t))(v7 + 8);
      uint64_t v11 = (uint64_t *)(v43 + 48);
      a1 = (a1 - 1);
      long long v30 = xmmword_2461D6DD0;
      uint64_t v33 = v6;
      unint64_t v31 = a1;
      while (v42)
      {
        uint64_t v9 = (char *)(v42 + v10);
        if (a1 == a3) {
          int v10 = 0;
        }
        else {
          v10 += *((_DWORD *)v9 + 2);
        }
        unint64_t v20 = *(void *)(v43 + 16);
        if (a3 == v20) {
          goto LABEL_20;
        }
        if (a3 >= v20)
        {
          __break(1u);
          goto LABEL_24;
        }
        uint64_t v12 = *v11;
        uint64_t v7 = static os_signpost_type_t.event.getter();
        static os_signpost_type_t.event.getter();
        if kdebug_is_enabled() && (OS_os_log.signpostsEnabled.getter())
        {
          int v41 = v7;
          a1 = (unint64_t)v35;
          static OSSignpostID.exclusive.getter();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          uint64_t v21 = swift_allocObject();
          *(_OWORD *)(v21 + 16) = v30;
          uint64_t v22 = _typeName(_:qualified:)();
          uint64_t v6 = v23;
          uint64_t v7 = MEMORY[0x263F8D310];
          *(void *)(v21 + 56) = MEMORY[0x263F8D310];
          unint64_t v24 = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v21 + 32) = v22;
          *(void *)(v21 + 40) = v6;
          uint64_t v25 = MEMORY[0x263F8D9D0];
          *(void *)(v21 + 96) = MEMORY[0x263F8D9D0];
          uint64_t v26 = MEMORY[0x263F8DA20];
          *(void *)(v21 + 64) = v24;
          *(void *)(v21 + 72) = v9;
          *(void *)(v21 + 136) = v7;
          *(void *)(v21 + 144) = v24;
          uint64_t v27 = v40;
          *(void *)(v21 + 104) = v26;
          *(void *)(v21 + 112) = v27;
          uint64_t v28 = v36;
          *(void *)(v21 + 120) = v37;
          *(void *)(v21 + 176) = v7;
          *(void *)(v21 + 184) = v24;
          *(void *)(v21 + 152) = v39;
          *(void *)(v21 + 160) = v28;
          *(void *)(v21 + 216) = MEMORY[0x263F8D6C8];
          *(void *)(v21 + 224) = MEMORY[0x263F8D750];
          *(void *)(v21 + 192) = v12;
          *(void *)(v21 + 256) = MEMORY[0x263F8E8F8];
          *(void *)(v21 + 264) = MEMORY[0x263F8E960];
          *(_DWORD *)(v21 + 232) = v34;
          *(void *)(v21 + 296) = v25;
          *(void *)(v21 + 304) = v26;
          if (Counter < 0) {
            goto LABEL_26;
          }
          *(void *)(v21 + 272) = Counter;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          (*v32)(a1, v33);
          swift_bridgeObjectRelease();
          LODWORD(a1) = v31;
          if (v44) {
            goto LABEL_20;
          }
        }
        int v29 = a3;
        v11 += 4;
        ++a3;
        if (a1 == v29 && !v10) {
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_26:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  return result;
}

uint64_t static View.makeBody(view:inputs:fields:)(_DWORD *a1, uint64_t a2, int *a3, uint64_t a4, long long *a5)
{
  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    int v10 = *((_DWORD *)a5 + 5);
    char v11 = *((unsigned char *)a5 + 16);
    int v21 = *a3;
    long long v18 = *a5;
    char v19 = v11;
    int v20 = v10;
    uint64_t v12 = type metadata accessor for ViewBodyAccessor();
    uint64_t WitnessTable = swift_getWitnessTable();
    return BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, (uint64_t)&v21, a4, (uint64_t)&v18, v12, WitnessTable);
  }
  return result;
}

uint64_t BodyAccessor.makeBody(container:inputs:fields:)(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (AssociatedTypeWitness == MEMORY[0x263F8E628])
  {
    _StringGuts.grow(_:)(29);
    swift_getAssociatedTypeWitness();
    _typeName(_:qualified:)();
    swift_bridgeObjectRelease();
    v22._object = (void *)0x800000024621DDC0;
    v22._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v22);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(double *)&long long v14 = MEMORY[0x270FA5388](AssociatedTypeWitness);
    v23[2] = a6;
    v23[3] = a7;
    long long v24 = v14;
    char v25 = v15;
    int v26 = v16;
    int v27 = v17;
    uint64_t v28 = v7;
    type metadata accessor for _GraphValue();
    type metadata accessor for _DynamicPropertyBuffer?(255, &lazy cache variable for type metadata for _DynamicPropertyBuffer?, (uint64_t)&type metadata for _DynamicPropertyBuffer, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t result = _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a4, (uint64_t)partial apply for closure #1 in BodyAccessor.makeBody(container:inputs:fields:), (uint64_t)v23, (uint64_t)&type metadata for _GraphInputs, MEMORY[0x263F8E628], TupleTypeMetadata2, MEMORY[0x263F8E658], v19);
    char v21 = v31;
    *a1 = v29;
    *(_OWORD *)a2 = v30;
    *(unsigned char *)(a2 + 16) = v21;
  }
  return result;
}

void type metadata accessor for _DynamicPropertyBuffer?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t static DynamicProperty.makeEmbeddedProperties<A>(in:container:fieldOffset:inputs:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v10 = *a2;
  static DynamicPropertyCache.fields(of:)(v6, (uint64_t)&v13);
  int v12 = v10;
  _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)((uint64_t)&v13, &v12, a4, a3, a6);

  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t closure #1 in BodyAccessor.makeBody(container:inputs:fields:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _DWORD *a9@<X8>)
{
  int v12 = (uint64_t *)(a9 + 2);
  unint64_t v13 = a4 & 0xFFFFFFFF00000001;
  if ((a4 & 0x100000000) != 0) {
    return project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(a9, v12, (uint64_t)&type metadata for AsyncThreadFlags, a2, a3, v13, a5, a1, a6, a7, (unint64_t)&type metadata for AsyncThreadFlags, a8, (uint64_t)&protocol witness table for AsyncThreadFlags);
  }
  else {
    return project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(a9, v12, (uint64_t)&type metadata for MainThreadFlags, a2, a3, v13, a5, a1, a6, a7, (unint64_t)&type metadata for MainThreadFlags, a8, (uint64_t)&protocol witness table for MainThreadFlags);
  }
}

uint64_t project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13)
{
  unint64_t v59 = a5;
  uint64_t v63 = a1;
  char v64 = a2;
  uint64_t v57 = a8;
  uint64_t v58 = a9;
  unint64_t v62 = HIDWORD(a6);
  char v15 = a6 & 1;
  uint64_t v69 = a10;
  unint64_t v70 = a11;
  uint64_t v71 = a12;
  uint64_t v72 = a13;
  uint64_t v16 = type metadata accessor for StaticBody();
  uint64_t v54 = *(void *)(v16 - 8);
  uint64_t v55 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v52 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v53 = (char *)&v51 - v19;
  uint64_t v20 = *(void *)(a10 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = a10;
  unint64_t v70 = a11;
  uint64_t v60 = a13;
  unint64_t v61 = a11;
  uint64_t v71 = a12;
  uint64_t v72 = a13;
  uint64_t v24 = type metadata accessor for DynamicBody();
  uint64_t v56 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  int v26 = (char *)&v51 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v51 - v28;
  uint64_t v69 = a4;
  unint64_t v70 = v59;
  LOBYTE(v71) = v15;
  HIDWORD(v71) = v62;
  LODWORD(v62) = a7;
  int v65 = a7;
  outlined copy of DynamicPropertyCache.Fields.Layout();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = v57;
  double v32 = _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(&v69, &v65, v57, AssociatedTypeWitness, (double *)&v66);
  uint64_t v33 = v66;
  uint64_t v34 = v67;
  unint64_t v59 = v68;
  if (v68)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v23, v58, a10, v32);
    int v35 = *(_DWORD *)(v31 + 24);
    uint64_t v69 = v33;
    unint64_t v36 = v59;
    unint64_t v70 = __PAIR64__(v59, v34);
    double v37 = DynamicBody.init(accessor:container:phase:links:resetSeed:)((uint64_t)v23, v62, v35, (double *)&v69, 0, a10, (uint64_t)v29);
    uint64_t v38 = v56;
    (*(void (**)(char *, char *, uint64_t, double))(v56 + 16))(v26, v29, v24, v37);
    uint64_t v39 = swift_getAssociatedTypeWitness();
    uint64_t WitnessTable = swift_getWitnessTable();
    _GraphValue.init<A>(_:)((uint64_t)v26, v39, v24, WitnessTable, v63);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v29, v24);
    uint64_t v42 = v34 | (v36 << 32);
    int v43 = v36;
  }
  else
  {
    uint64_t v69 = v66;
    unint64_t v70 = v67;
    _DynamicPropertyBuffer.destroy()();
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v58, a10);
    char v44 = v53;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v53, v23, a10);
    uint64_t v69 = a10;
    unint64_t v70 = v61;
    uint64_t v71 = a12;
    uint64_t v72 = v60;
    *(_DWORD *)&v44[*(int *)(type metadata accessor for StaticBody() + 52)] = v62;
    uint64_t v46 = v54;
    uint64_t v45 = v55;
    uint64_t v47 = (uint64_t)v52;
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v52, v44, v55);
    uint64_t v48 = swift_getAssociatedTypeWitness();
    uint64_t v49 = swift_getWitnessTable();
    _GraphValue.init<A>(_:)(v47, v48, v45, v49, v63);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v44, v45);
    uint64_t v33 = 0;
    uint64_t v42 = 0;
    int v43 = v59;
  }
  uint64_t v50 = v64;
  *char v64 = v33;
  v50[1] = v42;
  *((unsigned char *)v50 + 16) = v43 == 0;
  return result;
}

uint64_t type metadata accessor for StaticBody()
{
  return swift_getGenericMetadata();
}

uint64_t static DynamicPropertyCache.fields(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  int v4 = static DynamicPropertyCache.cache;
  swift_beginAccess();
  uint64_t v5 = v4[2];
  if (*(void *)(v5 + 16))
  {
    unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v7)
    {
      uint64_t v8 = *(void *)(v5 + 56) + 24 * v6;
      uint64_t v9 = *(void *)v8;
      uint64_t v10 = *(void *)(v8 + 8);
      char v11 = *(unsigned char *)(v8 + 16);
      int v12 = *(_DWORD *)(v8 + 20);
      swift_endAccess();
      *(void *)a2 = v9;
      *(void *)(a2 + 8) = v10;
      *(unsigned char *)(a2 + 16) = v11;
      *(_DWORD *)(a2 + 20) = v12;
      return outlined copy of DynamicPropertyCache.Fields.Layout();
    }
  }
  swift_endAccess();
  Kindouble d = AGTypeGetKind();
  uint64_t v15 = MEMORY[0x263F8EE78];
  if ((Kind - 3) < 2)
  {
    uint64_t v28 = MEMORY[0x263F8EE78];
    MEMORY[0x270FA5388](Kind);
    AGTypeApplyFields2();
    DynamicPropertyCache.Fields.init(_:)(a1, v28, 1, (uint64_t)v30);
    uint64_t v15 = v30[0];
    uint64_t v19 = v30[1];
    unsigned __int8 v20 = v31;
    uint64_t v17 = v32;
    goto LABEL_17;
  }
  if (Kind == 5 || Kind == 2)
  {
    v30[0] = MEMORY[0x263F8EE78];
    MEMORY[0x270FA5388](Kind);
    AGTypeApplyFields2();
    uint64_t v15 = v30[0];
    uint64_t v16 = *(void *)(v30[0] + 16);
    if (v16)
    {
      swift_bridgeObjectRetain();
      LODWORD(v17) = 0;
      uint64_t v18 = v30[0] + 40;
      do
      {
        uint64_t v17 = (*(unsigned int (**)(void))(*(void *)v18 + 16))() | v17;
        v18 += 32;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v19 = 0;
    unsigned __int8 v20 = 0;
LABEL_17:
    if ((~v17 & 3) == 0)
    {
      static os_log_type_t.fault.getter();
      if (one-time initialization token for runtimeIssuesLog != -1) {
        swift_once();
      }
      _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, MEMORY[0x263F8E0F8]);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_2461B9DC0;
      uint64_t v22 = a1;
      uint64_t v23 = _typeName(_:qualified:)();
      uint64_t v25 = v24;
      *(void *)(v21 + 56) = MEMORY[0x263F8D310];
      *(void *)(v21 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v21 + 32) = v23;
      *(void *)(v21 + 40) = v25;
      a1 = v22;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v17 = v17 & 0xFFFFFFFE;
    }
    goto LABEL_21;
  }
  uint64_t v17 = 0;
  uint64_t v19 = 0;
  unsigned __int8 v20 = 0;
LABEL_21:
  int v26 = static DynamicPropertyCache.cache;
  swift_beginAccess();
  swift_retain();
  outlined copy of DynamicPropertyCache.Fields.Layout();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v29 = v26[2];
  void v26[2] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, v19, v20 | (unint64_t)(v17 << 32), a1, isUniquelyReferenced_nonNull_native);
  void v26[2] = v29;
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t result = swift_release();
  *(void *)a2 = v15;
  *(void *)(a2 + 8) = v19;
  *(unsigned char *)(a2 + 16) = v20;
  *(_DWORD *)(a2 + 20) = v17;
  return result;
}

uint64_t outlined copy of DynamicPropertyCache.Fields.Layout()
{
  return swift_bridgeObjectRetain();
}

uint64_t _GraphValue.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _DWORD *a6@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v12 = *(void *)(a3 - 8);
  double v13 = MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v12 + 16))(v15, a1, v13);
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v16 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, a5, (uint64_t)v21, a3, MEMORY[0x263F8E628], v16, MEMORY[0x263F8E658], v17);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v12 + 8);
  v18(v15, a3);
  LODWORD(a4) = v20[3];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v18)(a1, a3);
  *a6 = a4;
  return result;
}

double _DynamicPropertyBuffer.init<A>(fields:container:inputs:)@<D0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  char v8 = *((unsigned char *)a1 + 16);
  int v9 = *((_DWORD *)a1 + 5);
  int v10 = *a2;
  uint64_t v16 = 0;
  double v17 = 0.0;
  v13[0] = v6;
  v13[1] = v7;
  char v14 = v8;
  int v15 = v9;
  int v12 = v10;
  _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)((uint64_t)v13, &v12, a3, 0, a4);
  outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a5 = v16;
  double result = v17;
  a5[1] = v17;
  return result;
}

uint64_t outlined consume of DynamicPropertyCache.Fields.Layout()
{
  return swift_bridgeObjectRelease();
}

uint64_t _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(uint64_t result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v10 = *(void *)result;
  uint64_t v11 = *(void *)(result + 8);
  int v12 = *a2;
  if (*(unsigned char *)(result + 16))
  {
    if (*(void *)(v11 + 16))
    {
      MEMORY[0x270FA5388](result);
      void v18[2] = a5;
      int v19 = v12;
      uint64_t v20 = a3;
      swift_bridgeObjectRetain();
      uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI20DynamicPropertyCacheV12TaggedFieldsVG_Si3tag_AF01_fG6BufferV5linksts5NeverOTg5((void (*)(long long *__return_ptr, void *))partial apply for closure #1 in _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:), (uint64_t)v18, v11);
      outlined consume of DynamicPropertyCache.Fields.Layout();
      project #1 <A><A1>(type:) in _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(v10, v6, v13, a4);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v14 = *(void *)(v10 + 16);
    if (v14)
    {
      swift_bridgeObjectRetain();
      int v15 = (uint64_t *)(v10 + 48);
      do
      {
        uint64_t v16 = *(v15 - 1);
        uint64_t v17 = *v15;
        v15 += 4;
        int v21 = v12;
        (*(void (**)(uint64_t *, int *, uint64_t, uint64_t, uint64_t))(v16 + 8))(v5, &v21, v17 + a4, a3, a5);
        --v14;
      }
      while (v14);
      return outlined consume of DynamicPropertyCache.Fields.Layout();
    }
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.comparisonMode.getter in conformance ResetDeltaModifier.ChildPhase()
{
  return 2;
}

uint64_t _GraphValue.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  return _GraphValue.init<A>(_:)(a1, a2, a3, a4, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), a5);
}

{
  uint64_t vars8;

  return _GraphValue.init<A>(_:)(a1, a2, a3, a4, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), a5);
}

uint64_t specialized static Environment._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, ValueMetadata *a4)
{
  uint64_t v7 = type metadata accessor for EnvironmentBox();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v19[-v9];
  uint64_t v11 = (int *)(*(void *)(a3 + 16) + 16);
  swift_beginAccess();
  if (a4 == &type metadata for EnvironmentValues)
  {
    int v14 = *v11;
    type metadata accessor for PropertyList.Tracker();
    uint64_t v15 = swift_allocObject();
    _s7SwiftUI12AtomicBuffer33_82B2D47816BC992595021D60C278AFF0LLCyAA11TrackerData33_D64CE6C88E7413721C59A34C0C940F2CLLVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
    uint64_t v16 = swift_allocObject();
    *(_DWORD *)(v16 + 16) = 0;
    uint64_t v17 = MEMORY[0x263F8EE80];
    *(void *)(v16 + 24) = 0;
    *(void *)(v16 + 32) = v17;
    uint64_t v18 = MEMORY[0x263F8EE78];
    *(void *)(v16 + 40) = v17;
    *(void *)(v16 + 48) = v18;
    *(unsigned char *)(v16 + 56) = 0;
    *(void *)(v15 + 16) = v16;
    int v20 = v14;
    long long v21 = xmmword_24619B550;
    uint64_t v22 = 0;
    uint64_t v23 = v15;
    specialized _DynamicPropertyBuffer.append<A>(_:fieldOffset:)((uint64_t)&v20, a2);
    outlined consume of EnvironmentValues?(1);
    return swift_release();
  }
  else
  {
    int v12 = *v11;
    *((void *)v10 + 1) = 0;
    (*((void (**)(unsigned char *, uint64_t, uint64_t, ValueMetadata *))a4[-1].Description + 7))(&v10[*(int *)(v7 + 32)], 1, 1, a4);
    v10[*(int *)(v7 + 36)] = 0;
    *(_DWORD *)uint64_t v10 = v12;
    swift_getWitnessTable();
    _DynamicPropertyBuffer.append<A>(_:fieldOffset:)((uint64_t)v10, a2, v7);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

void _DynamicPropertyBuffer.append<A>(_:fieldOffset:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for BoxVTable();
  UnsafeHeterogeneousBuffer.append<A>(_:vtable:)(a1, v7, a3, v10);
  if (!*v3) {
    goto LABEL_8;
  }
  uint64_t v8 = *v3 + v10[1];
  unsigned int v9 = *(_DWORD *)(v8 + 12) & 0x80000000;
  *(_DWORD *)(v8 + 12) = v9;
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((a2 & 0x80000000) == 0)
  {
    *(_DWORD *)(v8 + 12) = v9 | a2;
    return;
  }
LABEL_9:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void UnsafeHeterogeneousBuffer.append<A>(_:vtable:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = __OFADD__(v10, 16);
  uint64_t v13 = v10 + 16;
  if (v12)
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v12 = __OFADD__(v13, 15);
  uint64_t v14 = v13 + 15;
  if (v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  int64_t v15 = v14 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v16 = UnsafeHeterogeneousBuffer.allocate(bytes:)(v14 & 0xFFFFFFFFFFFFFFF0);
  if (v15 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v15 > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v17 = v16;
  *(void *)uint64_t v16 = a2;
  *(_DWORD *)(v16 + 8) = v15;
  *(_DWORD *)(v16 + 12) = 0;
  uint64_t v18 = v16 + 16;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v18, v11, a3);
  if (*(void *)v4)
  {
    uint64_t v19 = v17 - *(void *)v4;
    if (v19 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v19 <= 0x7FFFFFFF)
      {
        int v20 = *(_DWORD *)(v4 + 12);
        *a4 = v20;
        a4[1] = v19;
        if (!__OFADD__(v20, 1))
        {
          *(_DWORD *)(v4 + 12) = v20 + 1;
          return;
        }
        goto LABEL_16;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
LABEL_17:
  __break(1u);
}

uint64_t UnsafeHeterogeneousBuffer.allocate(bytes:)(uint64_t result)
{
  uint64_t v2 = result;
  int v3 = *(_DWORD *)(v1 + 12);
  uint64_t v4 = *(int *)(v1 + 8);
  if (!v3)
  {
    uint64_t v6 = 0;
    if (v4 >= result) {
      goto LABEL_12;
    }
LABEL_10:
    if (__OFADD__(v6, v4))
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    double result = UnsafeHeterogeneousBuffer.growBuffer(by:capacity:)(result, v6 + v4);
LABEL_12:
    if (!*(void *)v1)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    if (v2 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v2 <= 0x7FFFFFFF)
    {
      int v8 = *(_DWORD *)(v1 + 8);
      BOOL v9 = __OFSUB__(v8, v2);
      int v10 = v8 - v2;
      if (!v9)
      {
        double result = *(void *)v1 + v6;
        *(_DWORD *)(v1 + 8) = v10;
        return result;
      }
      goto LABEL_19;
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (*(void *)v1)
  {
    int v5 = 0;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(int *)(*(void *)v1 + 8 + v5);
      v5 += v7;
      if (!--v3) {
        int v5 = 0;
      }
      v6 += v7;
    }
    while (v3);
    if (v4 >= result) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for BoxVTable()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for LayoutDirection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t UnsafeHeterogeneousBuffer.growBuffer(by:capacity:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = a2 + result;
  if (__OFADD__(a2, result))
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v4 = a2;
  if (2 * a2 <= 64) {
    uint64_t v5 = 64;
  }
  else {
    uint64_t v5 = 2 * a2;
  }
  for (; v5 < v3; v5 *= 2)
    ;
  double result = swift_slowAlloc();
  unsigned int v6 = *(void **)v2;
  if (*(void *)v2)
  {
    uint64_t v21 = v2;
    uint64_t v22 = result;
    uint64_t v20 = v4;
    int v7 = *(_DWORD *)(v2 + 12);
    if (v7)
    {
      int v8 = 0;
      int v9 = v7 - 1;
      int v10 = *(void **)v2;
      uint64_t v11 = (void *)result;
      do
      {
        if (v9) {
          v8 += *(_DWORD *)((char *)v6 + v8 + 8);
        }
        else {
          int v8 = 0;
        }
        int v12 = v9 | v8;
        uint64_t v13 = v10[1];
        uint64_t v14 = (int)v13;
        *uint64_t v11 = *v10;
        v11[1] = v13;
        uint64_t v15 = *v10;
        uint64_t v23 = v10;
        uint64_t v24 = v11;
        (*(void (**)(void **, void **))(v15 + 88))(&v24, &v23);
        int v10 = (void *)((char *)v10 + v14);
        uint64_t v11 = (void *)((char *)v11 + v14);
        --v9;
      }
      while (v12);
    }
    MEMORY[0x24C527CC0](v6, -1, -1);
    uint64_t v4 = v20;
    uint64_t v2 = v21;
    double result = v22;
  }
  *(void *)uint64_t v2 = result;
  uint64_t v16 = v5 - v4;
  if (v5 - v4 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_20;
  }
  if (v16 > 0x7FFFFFFF)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int v17 = *(_DWORD *)(v2 + 8);
  BOOL v18 = __OFADD__(v17, v16);
  int v19 = v17 + v16;
  if (!v18)
  {
    *(_DWORD *)(v2 + 8) = v19;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t destroy for EnvironmentBox(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v4 - 8);
  unint64_t v5 = (v3 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v5, 1, v4);
  if (!result)
  {
    int v7 = *(uint64_t (**)(unint64_t, uint64_t))(v8 + 8);
    return v7(v5, v4);
  }
  return result;
}

uint64_t type metadata accessor for EnvironmentBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance Environment<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static Environment._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, *(ValueMetadata **)(a6 + 16));
}

_DWORD *initializeWithCopy for EnvironmentBox(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 11;
  *a1 = v5;
  unsigned int v6 = (void *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  int v10 = (void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  uint64_t v11 = (const void *)((v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9);
  int v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  if (v12(v11, 1, v7))
  {
    int v13 = *(_DWORD *)(v8 + 84);
    size_t v14 = *(void *)(v8 + 64);
    if (v13) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = v14 + 1;
    }
    memcpy(v10, v11, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, v7);
    int v17 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v16 = v8 + 56;
    v17(v10, 0, 1, v7);
    int v13 = *(_DWORD *)(v16 + 28);
    size_t v14 = *(void *)(v16 + 8);
  }
  if (v13) {
    size_t v18 = v14;
  }
  else {
    size_t v18 = v14 + 1;
  }
  *((unsigned char *)v10 + v18) = *((unsigned char *)v11 + v18);
  return a1;
}

uint64_t static BoxVTable.moveInitialize(elt:from:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 136);
  MEMORY[0x270FA5388](a1);
  unint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v5;
  uint64_t v11 = *v7;
  uint64_t v8 = _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  uint64_t v11 = v6;
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  UnsafeMutablePointer.move()();
  return _sSpsRi_zrlE10initialize2toyxn_tF((uint64_t)v4, v8, v2);
}

uint64_t _sSpsRi_zrlE10initialize2toyxn_tF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a2, a1);
}

double DynamicBody.init(accessor:container:phase:links:resetSeed:)@<D0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, double *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  double v12 = *a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7, a1, a6);
  int v13 = (int *)type metadata accessor for DynamicBody();
  *(_DWORD *)(a7 + v13[13]) = a2;
  *(_DWORD *)(a7 + v13[14]) = a3;
  size_t v14 = (double *)(a7 + v13[15]);
  *size_t v14 = v12;
  double result = a4[1];
  v14[1] = result;
  *(_DWORD *)(a7 + v13[16]) = a5;
  return result;
}

Swift::Void __swiftcall _DynamicPropertyBuffer.destroy()()
{
  uint64_t v15 = type metadata accessor for OSSignpostID();
  uint64_t v1 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  int v12 = *((_DWORD *)v0 + 2);
  int v14 = *((_DWORD *)v0 + 3);
  static os_signpost_type_t.event.getter();
  if (!kdebug_is_enabled()) {
    goto LABEL_15;
  }
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0 || !v14) {
    goto LABEL_15;
  }
  if (v4)
  {
    int v5 = 0;
    uint64_t v6 = (void (**)(char *, uint64_t))(v1 + 8);
    int v7 = v14 - 1;
    long long v13 = xmmword_2461B9DC0;
    do
    {
      uint64_t v9 = v4 + v5;
      if (v7) {
        v5 += *(_DWORD *)(v9 + 8);
      }
      else {
        int v5 = 0;
      }
      static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      if (kdebug_is_enabled())
      {
        if (OS_os_log.signpostsEnabled.getter())
        {
          static OSSignpostID.exclusive.getter();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          uint64_t v10 = swift_allocObject();
          *(_OWORD *)(v10 + 16) = v13;
          *(void *)(v10 + 56) = MEMORY[0x263F8D9D0];
          *(void *)(v10 + 64) = MEMORY[0x263F8DA20];
          *(void *)(v10 + 32) = v9;
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          (*v6)(v3, v15);
          swift_bridgeObjectRelease();
        }
      }
    }
    while (v7-- | v5);
LABEL_15:
    uint64_t v16 = v4;
    int v17 = v12;
    int v18 = v14;
    UnsafeHeterogeneousBuffer.destroy()();
    return;
  }
  __break(1u);
}

Swift::Void __swiftcall UnsafeHeterogeneousBuffer.destroy()()
{
  uint64_t v1 = *v0;
  int v2 = *((_DWORD *)v0 + 3);
  if (v2)
  {
    if (!v1)
    {
      __break(1u);
      goto LABEL_14;
    }
    int v3 = 0;
    int v4 = v2 - 1;
    do
    {
      int v7 = (uint64_t *)(v1 + v3);
      if (v4) {
        v3 += *((_DWORD *)v7 + 2);
      }
      else {
        int v3 = 0;
      }
      int v5 = v4 | v3;
      uint64_t v6 = *v7;
      uint64_t v8 = v7;
      (*(void (**)(uint64_t **))(v6 + 96))(&v8);
      --v4;
    }
    while (v5);
  }
  if (v1)
  {
LABEL_14:
    JUMPOUT(0x24C527CC0);
  }
}

_DWORD *initializeWithCopy for AnimatableAttribute(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  int v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 | 7) + 4;
  unint64_t v9 = (unint64_t)v3 + v8;
  uint64_t v10 = (_DWORD *)(((unint64_t)v4 + v8) & ~(v7 | 7));
  uint64_t v11 = (_DWORD *)(v9 & ~(v7 | 7));
  *uint64_t v11 = *v10;
  v11[1] = v10[1];
  int v12 = (_DWORD *)(((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8);
  long long v13 = (_DWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  *int v12 = *v13;
  int v14 = (void *)(((unint64_t)v12 + v7 + 4) & ~v7);
  uint64_t v15 = (const void *)(((unint64_t)v13 + v7 + 4) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v15, 1, AssociatedTypeWitness))
  {
    int v16 = *(_DWORD *)(v6 + 84);
    size_t v17 = *(void *)(v6 + 64);
    if (v16) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v17 + 1;
    }
    memcpy(v14, v15, v18);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v14, v15, AssociatedTypeWitness);
    uint64_t v20 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v19 = v6 + 56;
    v20(v14, 0, 1, AssociatedTypeWitness);
    int v16 = *(_DWORD *)(v19 + 28);
    size_t v17 = *(void *)(v19 + 8);
  }
  if (v16) {
    size_t v21 = v17;
  }
  else {
    size_t v21 = v17 + 1;
  }
  uint64_t v22 = (void *)(((unint64_t)v14 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)(((unint64_t)v15 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v22 = *v23;
  *(_DWORD *)(((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v23 + 11) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t getEnumTagSinglePayload for OpenURLAction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 34)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

unsigned char *storeEnumTagSinglePayload for DynamicTypeSize(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *double result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 11;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ColorScheme(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

void static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9 = *a2;
  static DynamicProperty.makeEmbeddedProperties<A>(in:container:fieldOffset:inputs:)(a1, &v9, a3, a4, a5, a6);
  uint64_t v7 = type metadata accessor for EmbeddedDynamicPropertyBox();
  uint64_t WitnessTable = swift_getWitnessTable();
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)(WitnessTable, a3, v7);
}

uint64_t type metadata accessor for EmbeddedDynamicPropertyBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t storeEnumTagSinglePayload for CGRect(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)double result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int v6 = (void **)v5;
  int v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a5 & 1) == 0)
  {
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      uint64_t v20 = *v6;
      if (v18) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v6;
  if (v18)
  {
LABEL_8:
    uint64_t v21 = v20[7] + 24 * v14;
    *(void *)uint64_t v21 = a1;
    *(void *)(v21 + 8) = a2;
    *(unsigned char *)(v21 + 16) = a3 & 1;
    *(_DWORD *)(v21 + 20) = HIDWORD(a3);
    return outlined consume of DynamicPropertyCache.Fields.Layout();
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, a3 & 0xFFFFFFFF00000001, v20);
}

{
  void *v5;
  void **v6;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t *v21;
  unint64_t result;
  unint64_t v23;
  char v24;
  unsigned char v25[40];

  unsigned int v6 = (void **)v5;
  int v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (uint64_t *)(v20[7] + 24 * v14);
      unint64_t result = swift_unknownObjectRelease();
      *uint64_t v21 = a1;
      v21[1] = a2;
      v21[2] = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with copy of AnyHashable(a4, (uint64_t)v25);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v25, a1, a2, a3, v20);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance <> _ConditionalContent<A, B>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X8>)
{
  return static _ConditionalContent<>._makeViewList(view:inputs:)(a1, a2, a3);
}

uint64_t static _ViewModifier_Content._makeViewList(view:inputs:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = a1[2];
  long long v12 = *(_OWORD *)(a1 + 5);
  uint64_t v7 = a1[7];
  int v8 = *((_DWORD *)a1 + 16);
  uint64_t v9 = a1[9];
  char v10 = *((unsigned char *)a1 + 80);
  type metadata accessor for _ViewModifier_Content();
  uint64_t v13 = v4;
  int v14 = v5;
  uint64_t v15 = v6;
  long long v16 = *(_OWORD *)(a1 + 3);
  long long v17 = v12;
  uint64_t v18 = v7;
  int v19 = v8;
  uint64_t v20 = v9;
  char v21 = v10;
  return static ViewModifierContentProvider.providerMakeViewList(view:inputs:)((uint64_t)&v13, a2);
}

uint64_t type metadata accessor for _ViewModifier_Content()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance State<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static State._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, *(void *)(a6 + 16), a5);
}

uint64_t specialized static State._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v11[2] = *MEMORY[0x263EF8340];
  type metadata accessor for External<()>();
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  uint64_t v8 = Attribute.init<A>(body:value:flags:update:)();
  v11[0] = AGCreateWeakAttribute();
  v11[1] = 0;
  uint64_t v9 = type metadata accessor for StatePropertyBox();
  swift_getWitnessTable();
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)((uint64_t)v11, a2, v9);
  uint64_t result = AGSubgraphShouldRecordTree();
  if (result)
  {
    type metadata accessor for State();
    LODWORD(v11[0]) = 1;
    return static DynamicProperty.addTreeValueSlow<A>(_:as:in:fieldOffset:flags:)(v8, a4, a5, a2);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type External<()> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<()> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<()> and conformance External<A>)
  {
    type metadata accessor for External<()>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<()> and conformance External<A>);
  }
  return result;
}

void type metadata accessor for External<()>()
{
  if (!lazy cache variable for type metadata for External<()>)
  {
    unint64_t v0 = type metadata accessor for External();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<()>);
    }
  }
}

uint64_t type metadata accessor for StatePropertyBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for AnimatablePair(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance LinkDestination(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t static ViewGraphFeatureBuffer._VTable.moveInitialize(elt:from:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 168);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v5;
  uint64_t v11 = *v7;
  uint64_t v8 = _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  uint64_t v11 = v6;
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  UnsafeMutablePointer.move()();
  return _sSpsRi_zrlE10initialize2toyxn_tF((uint64_t)v4, v8, v2);
}

unsigned char *storeEnumTagSinglePayload for RoundedCornerStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t project #1 <A><A1>(type:) in _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for EnumVTable();
  swift_bridgeObjectRetain();
  uint64_t result = UnsafeHeterogeneousBuffer.allocate(bytes:)(48);
  *(void *)uint64_t result = v7;
  *(void *)(result + 8) = 48;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = a3;
  *(unsigned char *)(result + 40) = 1;
  uint64_t v9 = *a2;
  if (!*a2) {
    goto LABEL_14;
  }
  if (result - v9 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (result - v9 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  int v10 = *((_DWORD *)a2 + 3);
  BOOL v11 = __OFADD__(v10, 1);
  int v12 = v10 + 1;
  if (v11)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *((_DWORD *)a2 + 3) = v12;
  unsigned int v13 = *(_DWORD *)(result + 12) & 0x80000000;
  *(_DWORD *)(result + 12) = v13;
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (a4 > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((a4 & 0x80000000) == 0)
  {
    *(_DWORD *)(result + 12) = v13 | a4;
    return result;
  }
LABEL_15:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for EnumVTable()
{
  return __swift_instantiateGenericMetadata();
}

void specialized static Binding._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v3 = type metadata accessor for Binding.Box();
  swift_getWitnessTable();
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)((uint64_t)&v4, a2, v3);
}

void protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance Binding<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t type metadata accessor for Binding.Box()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static ViewTransform.UnsafeBuffer._VTable.deinitialize(elt:)()
{
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();

  return UnsafeMutablePointer.deinitialize(count:)();
}

uint64_t static ViewTransform.UnsafeBuffer._VTable.moveInitialize(elt:from:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 136);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v5;
  uint64_t v11 = *v7;
  uint64_t v8 = _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  uint64_t v11 = v6;
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  UnsafeMutablePointer.move()();
  return _sSpsRi_zrlE10initialize2toyxn_tF((uint64_t)v4, v8, v2);
}

void *initializeWithCopy for ObservedObjectPropertyBox(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  return a1;
}

_DWORD *initializeWithTake for EnvironmentBox(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8);
  void *v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (void *)(((unint64_t)v4 + v8 + 8) & ~v8);
  uint64_t v10 = (const void *)(((unint64_t)v5 + v8 + 8) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
    if (v11) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v12 + 1;
    }
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    int v15 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v14 = v7 + 56;
    v15(v9, 0, 1, v6);
    int v11 = *(_DWORD *)(v14 + 28);
    size_t v12 = *(void *)(v14 + 8);
  }
  if (v11) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v12 + 1;
  }
  *((unsigned char *)v9 + v16) = *((unsigned char *)v10 + v16);
  return a1;
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance Namespace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized _DynamicPropertyBuffer.append<A>(_:fieldOffset:)(0, a3);
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance ObservedObject<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static ObservedObject._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, *(void *)(a6 + 16), a5);
}

uint64_t static ViewGraphFeatureBuffer._VTable.deinitialize(elt:)()
{
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();

  return UnsafeMutablePointer.deinitialize(count:)();
}

void protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance StateObject<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t initializeWithCopy for StateObject.Box(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_unknownObjectRetain();
  return a1;
}

__n128 static EnumVTable.moveInitialize(elt:from:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  char v3 = *(unsigned char *)(*(void *)a2 + 40);
  __n128 result = *(__n128 *)(*(void *)a2 + 24);
  *(void *)(v2 + 16) = *(void *)(*(void *)a2 + 16);
  *(__n128 *)(v2 + 24) = result;
  *(unsigned char *)(v2 + 40) = v3;
  return result;
}

uint64_t initializeWithCopy for StoreBox(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance EnvironmentObject<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static EnvironmentObject._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, *(void *)(a6 + 16), a5);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance EnvironmentReader<A>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static EnvironmentReader._makeViewList(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t storeEnumTagSinglePayload for HoverEffectContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 26) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 27) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 27) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

uint64_t DynamicPropertyCache.Fields.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v4 = a3;
  uint64_t v5 = a2;
  uint64_t v6 = result;
  if (a3)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    if (v8)
    {
      char v18 = a3;
      uint64_t v9 = a2 + 32;
      uint64_t v17 = a2;
      swift_bridgeObjectRetain();
      uint64_t v10 = 0;
      int v11 = 0;
      do
      {
        uint64_t v12 = *(void *)(v9 + 16 * v10 + 8);
        uint64_t v13 = *(void *)(v12 + 16);
        if (v13)
        {
          swift_bridgeObjectRetain();
          uint64_t v14 = v12 + 40;
          do
          {
            v11 |= (*(uint64_t (**)(void))(*(void *)v14 + 16))();
            v14 += 32;
            --v13;
          }
          while (v13);
          swift_bridgeObjectRelease();
        }
        ++v10;
      }
      while (v10 != v8);
      goto LABEL_12;
    }
LABEL_13:
    int v11 = 0;
    goto LABEL_14;
  }
  uint64_t v15 = *(void *)(result + 16);
  if (!v15) {
    goto LABEL_13;
  }
  uint64_t v17 = a2;
  char v18 = a3;
  swift_bridgeObjectRetain();
  int v11 = 0;
  uint64_t v16 = v6 + 40;
  do
  {
    v11 |= (*(uint64_t (**)(void))(*(void *)v16 + 16))();
    v16 += 32;
    --v15;
  }
  while (v15);
LABEL_12:
  char v4 = v18;
  uint64_t v5 = v17;
  __n128 result = outlined consume of DynamicPropertyCache.Fields.Layout();
LABEL_14:
  *(void *)a4 = v6;
  *(void *)(a4 + 8) = v5;
  *(unsigned char *)(a4 + 16) = v4 & 1;
  *(_DWORD *)(a4 + 20) = v11;
  return result;
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance Text.Measurements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized static Text.Measurements._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4);
}

unsigned char *storeEnumTagSinglePayload for ContentMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _DelayedPreferenceView<A, B>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3);
}

uint64_t static EnumVTable.deinitialize(elt:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = v1 + 48;
    do
    {
      v3 += 24;
      _DynamicPropertyBuffer.destroy()();
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }

  return swift_arrayDestroy();
}

double protocol witness for static View._makeView(view:inputs:) in conformance EnvironmentReader<A>@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  return static EnvironmentalView._makeView(view:inputs:)(a1, a2, a3);
}

uint64_t specialized _DynamicPropertyBuffer.append<A>(_:fieldOffset:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for BoxVTable<Text.Measurements.Box>(0, &lazy cache variable for type metadata for BoxVTable<FullEnvironmentBox>);
  uint64_t v6 = v5;
  uint64_t v7 = UnsafeHeterogeneousBuffer.allocate(bytes:)(64);
  *(void *)uint64_t v7 = v6;
  *(void *)(v7 + 8) = 64;
  uint64_t v8 = *(void *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 32) = v9;
  *(void *)(v7 + 48) = v8;
  uint64_t v10 = *v2;
  if (!*v2) {
    goto LABEL_16;
  }
  if (v7 - v10 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v7 - v10 > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  int v11 = *((_DWORD *)v2 + 3);
  BOOL v12 = __OFADD__(v11, 1);
  int v13 = v11 + 1;
  if (v12)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  *((_DWORD *)v2 + 3) = v13;
  unsigned int v14 = *(_DWORD *)(v7 + 12) & 0x80000000;
  *(_DWORD *)(v7 + 12) = v14;
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((a2 & 0x80000000) != 0)
  {
LABEL_17:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  *(_DWORD *)(v7 + 12) = v14 | a2;

  return outlined retain of FullEnvironmentBox(a1);
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  unsigned int v12;

  type metadata accessor for BoxVTable<Text.Measurements.Box>(0, &lazy cache variable for type metadata for BoxVTable<Namespace.Box>);
  uint64_t v6 = v5;
  uint64_t result = UnsafeHeterogeneousBuffer.allocate(bytes:)(32);
  *(void *)uint64_t result = v6;
  *(void *)(result + 8) = 32;
  *(void *)(result + 16) = a1;
  uint64_t v8 = *v2;
  if (!*v2) {
    goto LABEL_14;
  }
  if (result - v8 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (result - v8 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  long long v9 = *((_DWORD *)v2 + 3);
  uint64_t v10 = __OFADD__(v9, 1);
  int v11 = v9 + 1;
  if (v10)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *((_DWORD *)v2 + 3) = v11;
  BOOL v12 = *(_DWORD *)(result + 12) & 0x80000000;
  *(_DWORD *)(result + 12) = v12;
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((a2 & 0x80000000) == 0)
  {
    *(_DWORD *)(result + 12) = v12 | a2;
    return result;
  }
LABEL_15:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined retain of FullEnvironmentBox(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  swift_retain();
  outlined copy of EnvironmentValues?(v2);
  swift_retain();
  return a1;
}

ValueMetadata *type metadata accessor for RoundedRectangle._Inset()
{
  return &type metadata for RoundedRectangle._Inset;
}

uint64_t _Placement.init(proposedSize:anchoring:at:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  char v6 = *(unsigned char *)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  char v8 = *(unsigned char *)(result + 24);
  *(void *)a2 = *(void *)result;
  *(unsigned char *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v7;
  *(unsigned char *)(a2 + 24) = v8;
  *(double *)(a2 + 32) = a3;
  *(double *)(a2 + 40) = a4;
  *(double *)(a2 + 48) = a5;
  *(double *)(a2 + 56) = a6;
  return result;
}

uint64_t type metadata completion function for _OverlayStyleModifier()
{
  return type metadata completion function for _OverlayModifier();
}

uint64_t initializeWithCopy for StackLayout.Child(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v3 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_retain();
  return a1;
}

ValueMetadata *type metadata accessor for TransactionID()
{
  return &type metadata for TransactionID;
}

uint64_t static HierarchicalShapeStyle.secondary.getter()
{
  return 1;
}

uint64_t type metadata accessor for _ViewListOutputs.ListModifier()
{
  return self;
}

double UnitPoint.init(_:in:by:)(char a1, double a2, double a3)
{
  if (a1) {
    return a3;
  }
  return a2;
}

ValueMetadata *type metadata accessor for AccessibilityTraits()
{
  return &type metadata for AccessibilityTraits;
}

Swift::Void __swiftcall ViewTransform.appendPosition(_:)(CGPoint a1)
{
  v2.f64[0] = a1.x;
  v2.f64[1] = a1.y;
  *(float64x2_t *)(v1 + 24) = vsubq_f64(*(float64x2_t *)(v1 + 24), vsubq_f64(v2, *(float64x2_t *)(v1 + 8)));
  *(CGFloat *)(v1 + 8) = a1.x;
  *(CGFloat *)(v1 + 16) = a1.y;
}

uint64_t @objc closure #6 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks(uint64_t a1)
{
  return @objc closure #5 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks(a1, MEMORY[0x263F63960]);
}

uint64_t base witness table accessor for _AttributeBody in ChildEnvironment<A>()
{
  return swift_getWitnessTable();
}

{
  return swift_getWitnessTable();
}

uint64_t destroy for Environment.Content(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 8) {
    unint64_t v2 = 8;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
  else {
    return swift_release();
  }
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:)(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F0F0E8](a1, a2, *(void *)(v2 + 16));
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _ViewInputs.transform.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 60) = result;
  *(_DWORD *)(v1 + 32) |= 4u;
  return result;
}

uint64_t isLinkedOnOrAfter(_:)(unsigned int *a1)
{
  unsigned int v1 = *a1;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    return dyld_program_sdk_at_least();
  }
  else {
    return static Semantics.forced >= v1;
  }
}

double PlatformDrawableContent.init()@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 40) = 5;
  return result;
}

void *assignWithTake for _ForegroundColorModifier(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t storeEnumTagSinglePayload for EnvironmentObject(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)double result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)double result = a2;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for ShapeView.Content : Shape in FillShapeView<A, B, C>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 40);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _PreferenceTransformModifier<A>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static _PreferenceTransformModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(ValueMetadata **)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t AlignmentGuide.fraction.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (*(uint64_t (**)(void))(a2 + 16))();

  return AlignmentKey.fraction.getter(v2);
}

uint64_t protocol witness for ProtobufTag.rawValue.getter in conformance CodableResolvedPaint.Tag()
{
  return *(void *)v0;
}

__n128 ScrollableCollectionSubview.init(id:frame:transform:)@<Q0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v7 = a1[1];
  uint64_t v8 = *a2;
  *(void *)a3 = *a1;
  *(void *)(a3 + 8) = v7;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(double *)(a3 + 40) = a7;
  *(void *)(a3 + 48) = v8;
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(a2 + 1);
  __n128 result = *(__n128 *)(a2 + 3);
  *(__n128 *)(a3 + 72) = result;
  return result;
}

double EdgeInsets.originOffset.getter(double a1, double a2)
{
  return a2;
}

void static ViewSize.fixed(_:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a2;
  a1[3] = a3;
}

void specialized closure #1 in static NSRunLoop.addObserver(_:)()
{
  uint64_t v0 = (void *)MEMORY[0x24C526EA0]();
  unsigned int v1 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    if (one-time initialization token for observerActions != -1) {
      swift_once();
    }
    swift_beginAccess();
    rawuint64_t Value = (char *)observerActions._rawValue;
    uint64_t v3 = *((void *)observerActions._rawValue + 2);
    if (!v3) {
      break;
    }
    observerActions._rawuint64_t Value = v1;
    specialized static Update.begin()();
    long long v4 = rawValue + 40;
    do
    {
      uint64_t v5 = (void (*)(uint64_t))*((void *)v4 - 1);
      uint64_t v6 = swift_retain();
      v5(v6);
      swift_release();
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    static Update.end()();
  }
}

uint64_t destroy for DisplayList.GraphicsRenderer.Cache()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

double static Font.Weight.semibold.getter()
{
  return 0.3;
}

void *partial apply for closure #1 in PreferenceValues.subscript.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in PreferenceValues.valueIfPresent<A>(for:)(a1, a2);
}

void *partial apply for closure #1 in PreferenceValues.valueIfPresent<A>(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in PreferenceValues.subscript.getter(a1, *(void *)(v2 + 32), a2);
}

void *closure #1 in PreferenceValues.subscript.getter@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*result < *(void *)(a2 + 16))
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (void *)PreferenceValues.Entry.subscript.getter(AssociatedTypeWitness, a3);
  }
  __break(1u);
  return result;
}

uint64_t type metadata completion function for WatchColorGradientProvider()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t SizeAndSpacingContext.init(context:owner:environment:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  if ((a2 & 0x100000000) != 0) {
    int v4 = result;
  }
  else {
    int v4 = a2;
  }
  *a4 = result;
  a4[1] = v4;
  a4[2] = a3;
  return result;
}

uint64_t type metadata completion function for _BackgroundStyleModifier.BackgroundInfo.Value()
{
  uint64_t result = type metadata accessor for _AnchoredShapeStyle();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t Layout.spacing(subviews:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 17);
  LODWORD(v106[0]) = *(_DWORD *)a1;
  v106[1] = v2;
  char v107 = v3;
  unsigned __int8 v108 = v4;
  lazy protocol witness table accessor for type LayoutSubviews and conformance LayoutSubviews();
  if (Collection.isEmpty.getter())
  {
    if (one-time initialization token for zero != -1) {
      goto LABEL_127;
    }
    goto LABEL_3;
  }
  unint64_t v89 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  char v105 = v3;
  unsigned __int8 v104 = v4;
  unint64_t v7 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  if (!v7)
  {
    LOBYTE(v91) = 2;
LABEL_118:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v89;
    *(unsigned char *)(a2 + 8) = v91;
    return result;
  }
  unint64_t v8 = 0;
  uint64_t v88 = v2 + 32;
  int v91 = 2;
  int v87 = *MEMORY[0x263F288F8];
  uint64_t v86 = v2;
  while (1)
  {
    int v9 = v104;
    if (v3)
    {
      if (v8 >= v7) {
        goto LABEL_124;
      }
      uint64_t v10 = (_DWORD *)(v88 + 12 * v8);
    }
    else
    {
      if (v8 >= v7) {
        goto LABEL_125;
      }
      uint64_t v10 = (_DWORD *)(v88 + 8 * v8);
    }
    if (v8 >= v7) {
      goto LABEL_123;
    }
    unint64_t v90 = v8;
    if (*v10 == v87)
    {
      Inputuint64_t Value = &static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        Inputuint64_t Value = &static LayoutComputer.defaultValue;
      }
    }
    else
    {
      Inputuint64_t Value = (long long *)AGGraphGetInputValue();
    }
    uint64_t v12 = *(void *)InputValue;
    uint64_t v13 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v13 != -1) {
      swift_once();
    }
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (!_MovableLockIsOwner(static Update._lock))
      {
LABEL_129:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
    }
    (*(void (**)(void *__return_ptr))(*(void *)v12 + 112))(v106);
    swift_release();
    uint64_t v14 = v106[0];
    if (v91 == 2) {
      int v15 = v9;
    }
    else {
      int v15 = v91;
    }
    int v91 = v15;
    LOBYTE(v106[0]) = v15 & 1;
    AbsoluteEdge.Set.init(_:layoutDirection:)((unsigned __int8 *)v106, &v103);
    int v16 = v103;
    if (!v103)
    {
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    uint64_t v17 = v14 + 64;
    uint64_t v18 = 1 << *(unsigned char *)(v14 + 32);
    uint64_t v19 = v18 < 64 ? ~(-1 << v18) : -1;
    unint64_t v20 = v19 & *(void *)(v14 + 64);
    int64_t v21 = (unint64_t)(v18 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    int64_t v22 = 0;
    uint64_t v23 = MEMORY[0x263F8EE78];
    uint64_t v94 = v14;
    while (1)
    {
      if (v20)
      {
        unint64_t v24 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
        unint64_t v25 = v24 | (v22 << 6);
        goto LABEL_52;
      }
      int64_t v26 = v22 + 1;
      if (__OFADD__(v22, 1))
      {
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
        goto LABEL_126;
      }
      if (v26 >= v21) {
        goto LABEL_62;
      }
      unint64_t v27 = *(void *)(v17 + 8 * v26);
      ++v22;
      if (!v27)
      {
        int64_t v22 = v26 + 1;
        if (v26 + 1 >= v21) {
          goto LABEL_62;
        }
        unint64_t v27 = *(void *)(v17 + 8 * v22);
        if (!v27)
        {
          int64_t v22 = v26 + 2;
          if (v26 + 2 >= v21) {
            goto LABEL_62;
          }
          unint64_t v27 = *(void *)(v17 + 8 * v22);
          if (!v27)
          {
            int64_t v22 = v26 + 3;
            if (v26 + 3 >= v21) {
              goto LABEL_62;
            }
            unint64_t v27 = *(void *)(v17 + 8 * v22);
            if (!v27)
            {
              int64_t v22 = v26 + 4;
              if (v26 + 4 >= v21) {
                goto LABEL_62;
              }
              unint64_t v27 = *(void *)(v17 + 8 * v22);
              if (!v27) {
                break;
              }
            }
          }
        }
      }
LABEL_51:
      unint64_t v20 = (v27 - 1) & v27;
      unint64_t v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_52:
      uint64_t v29 = *(void *)(v14 + 48) + 16 * v25;
      unsigned int v30 = *(unsigned __int8 *)(v29 + 8);
      if (v30 - 9 < 0xEF || (v30 & 0x80) != 0 || v30 > 7 || ((1 << v30) & ~v16) == 0)
      {
        uint64_t v31 = *(void *)(v14 + 56) + 40 * v25;
        uint64_t v32 = *(void *)v31;
        uint64_t v99 = *(void *)(v31 + 8);
        uint64_t v101 = *(void *)v29;
        uint64_t v95 = *(void *)(v31 + 24);
        uint64_t v97 = *(void *)(v31 + 16);
        char v92 = *(unsigned char *)(v31 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v106[0] = v23;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v23 + 16) + 1, 1);
          uint64_t v23 = v106[0];
        }
        unint64_t v35 = *(void *)(v23 + 16);
        unint64_t v34 = *(void *)(v23 + 24);
        if (v35 >= v34 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
          uint64_t v23 = v106[0];
        }
        *(void *)(v23 + 16) = v35 + 1;
        uint64_t v36 = v23 + 56 * v35;
        *(void *)(v36 + 32) = v101;
        *(unsigned char *)(v36 + 40) = v30;
        *(void *)(v36 + 48) = v32;
        *(void *)(v36 + 56) = v99;
        uint64_t v14 = v94;
        *(void *)(v36 + 64) = v97;
        *(void *)(v36 + 72) = v95;
        *(unsigned char *)(v36 + 80) = v92;
      }
    }
    int64_t v28 = v26 + 5;
    if (v28 < v21) {
      break;
    }
LABEL_62:
    swift_release();
    uint64_t v37 = specialized _arrayForceCast<A, B>(_:)(v23);
    swift_release();
    uint64_t v38 = (void *)v89;
    char v39 = swift_isUniquelyReferenced_nonNull_native();
    v106[0] = v89;
    uint64_t v40 = *(void *)(v37 + 16);
    swift_bridgeObjectRetain();
    uint64_t v93 = v40;
    if (v40)
    {
      unint64_t v41 = 0;
      uint64_t v42 = (unsigned __int8 *)(v37 + 80);
      while (1)
      {
        if (v41 >= *(void *)(v37 + 16)) {
          goto LABEL_120;
        }
        Swift::UInt v51 = *((void *)v42 - 6);
        if (v51 == 1) {
          goto LABEL_6;
        }
        uint64_t v52 = v37;
        Swift::UInt8 v53 = *(v42 - 40);
        double v49 = *((double *)v42 - 4);
        unint64_t v96 = v41;
        double v98 = *((double *)v42 - 3);
        double v100 = *((double *)v42 - 2);
        double v102 = *((double *)v42 - 1);
        int v54 = *v42;
        unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v53);
        uint64_t v57 = v38[2];
        BOOL v58 = (v55 & 1) == 0;
        uint64_t v59 = v57 + v58;
        if (__OFADD__(v57, v58)) {
          goto LABEL_121;
        }
        char v60 = v55;
        if (v38[3] >= v59)
        {
          if ((v39 & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v59, v39 & 1);
          unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v53);
          if ((v60 & 1) != (v62 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            goto LABEL_129;
          }
          unint64_t v56 = v61;
        }
        uint64_t v38 = (void *)v106[0];
        if (v60) {
          break;
        }
        *(void *)(v106[0] + 8 * (v56 >> 6) + 64) |= 1 << v56;
        uint64_t v77 = v38[6] + 16 * v56;
        *(void *)uint64_t v77 = v51;
        *(unsigned char *)(v77 + 8) = v53;
        uint64_t v78 = v38[7] + 40 * v56;
        *(double *)uint64_t v78 = v49;
        *(double *)(v78 + 8) = v98;
        *(double *)(v78 + 16) = v100;
        *(double *)(v78 + 24) = v102;
        *(unsigned char *)(v78 + 32) = v54;
        uint64_t v79 = v38[2];
        BOOL v80 = __OFADD__(v79, 1);
        uint64_t v81 = v79 + 1;
        if (v80) {
          goto LABEL_122;
        }
        v38[2] = v81;
        uint64_t v37 = v52;
        unint64_t v47 = v96;
LABEL_70:
        unint64_t v41 = v47 + 1;
        v42 += 56;
        char v39 = 1;
        if (v93 == v41) {
          goto LABEL_6;
        }
      }
      uint64_t v63 = *(void *)(v106[0] + 56) + 40 * v56;
      double v64 = *(double *)v63;
      double v65 = *(double *)(v63 + 8);
      double v67 = *(double *)(v63 + 16);
      double v66 = *(double *)(v63 + 24);
      unint64_t v50 = *(unsigned __int8 *)(v63 + 32);
      if (v54)
      {
        if (v54 == 1)
        {
          uint64_t v37 = v52;
          if (v50 == 1)
          {
            double v68 = v49;
            double v46 = v98;
            double v45 = v100;
            double v69 = v98;
            double v70 = v100;
            double v44 = v102;
            double v71 = *(double *)v63;
            double v72 = *(double *)(v63 + 8);
            double v73 = *(double *)(v63 + 16);
            BOOL v76 = v49 == v64 && v98 == v65 && v100 == v67 && v102 == v66;
            unint64_t v47 = v96;
            if (!v76)
            {
LABEL_110:
              BOOL v48 = v68 + v69 + v70 < v71 + v72 + v73;
              goto LABEL_66;
            }
            LOBYTE(v50) = 1;
LABEL_69:
            *(double *)uint64_t v63 = v49;
            *(double *)(v63 + 8) = v46;
            *(double *)(v63 + 16) = v45;
            *(double *)(v63 + 24) = v44;
            *(unsigned char *)(v63 + 32) = v50;
            goto LABEL_70;
          }
          unint64_t v43 = 1;
        }
        else
        {
          uint64_t v37 = v52;
          if (v50 == 2)
          {
            double v68 = v49;
            double v46 = v98;
            double v45 = v100;
            double v69 = v98;
            double v70 = v100;
            double v44 = v102;
            double v71 = *(double *)v63;
            double v72 = *(double *)(v63 + 8);
            double v73 = *(double *)(v63 + 16);
            BOOL v84 = v49 == v64 && v98 == v65 && v100 == v67 && v102 == v66;
            unint64_t v47 = v96;
            if (!v84) {
              goto LABEL_110;
            }
            LOBYTE(v50) = 2;
            goto LABEL_69;
          }
          unint64_t v43 = 2;
        }
      }
      else
      {
        if (!*(unsigned char *)(v63 + 32))
        {
          uint64_t v37 = v52;
          if (v49 != v64)
          {
            BOOL v48 = v49 < v64;
            double v45 = v100;
            double v44 = v102;
            unint64_t v47 = v96;
            double v46 = v98;
LABEL_66:
            if (v48)
            {
              double v49 = *(double *)v63;
              double v46 = *(double *)(v63 + 8);
              double v45 = *(double *)(v63 + 16);
              double v44 = *(double *)(v63 + 24);
            }
            else
            {
              LOBYTE(v50) = v54;
            }
            goto LABEL_69;
          }
          LOBYTE(v50) = 0;
          double v45 = v100;
          double v44 = v102;
          unint64_t v47 = v96;
          double v46 = v98;
          goto LABEL_69;
        }
        unint64_t v43 = 0;
        uint64_t v37 = v52;
      }
      double v45 = v100;
      double v44 = v102;
      unint64_t v47 = v96;
      double v46 = v98;
      BOOL v48 = v43 < v50;
      goto LABEL_66;
    }
LABEL_6:
    unint64_t v89 = (unint64_t)v38;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    char v3 = v105;
    uint64_t v2 = v86;
LABEL_7:
    unint64_t v8 = v90 + 1;
    unint64_t v7 = *(void *)(v2 + 16);
    if (v90 + 1 == v7) {
      goto LABEL_118;
    }
  }
  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27)
  {
    int64_t v22 = v28;
    goto LABEL_51;
  }
  while (1)
  {
    int64_t v22 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v22 >= v21) {
      goto LABEL_62;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v22);
    ++v28;
    if (v27) {
      goto LABEL_51;
    }
  }
LABEL_126:
  __break(1u);
LABEL_127:
  swift_once();
LABEL_3:
  char v5 = byte_268EFC898;
  *(void *)a2 = static ViewSpacing.zero;
  *(unsigned char *)(a2 + 8) = v5;
  return swift_bridgeObjectRetain();
}

{
  return Layout.spacing(subviews:cache:)(a1, a2);
}

unint64_t lazy protocol witness table accessor for type LayoutSubviews and conformance LayoutSubviews()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews;
  if (!lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews;
  if (!lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews;
  if (!lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews;
  if (!lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews);
  }
  return result;
}

BOOL OptionalEdgeInsets.init(_:edges:)@<W0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  Swift::Bool v10 = Edge.Set.contains(_:)(SwiftUI_Edge_top);
  if (v10) {
    double v11 = a2;
  }
  else {
    double v11 = 0.0;
  }
  Swift::Bool v12 = Edge.Set.contains(_:)(SwiftUI_Edge_leading);
  if (v12) {
    double v13 = a3;
  }
  else {
    double v13 = 0.0;
  }
  Swift::Bool v14 = Edge.Set.contains(_:)(SwiftUI_Edge_bottom);
  if (v14) {
    double v15 = a4;
  }
  else {
    double v15 = 0.0;
  }
  BOOL result = Edge.Set.contains(_:)(SwiftUI_Edge_trailing);
  *(double *)a1 = v11;
  double v17 = a5;
  *(unsigned char *)(a1 + 8) = !v10;
  if (!result) {
    double v17 = 0.0;
  }
  *(double *)(a1 + 16) = v13;
  *(unsigned char *)(a1 + 24) = !v12;
  *(double *)(a1 + 32) = v15;
  *(unsigned char *)(a1 + 40) = !v14;
  *(double *)(a1 + 48) = v17;
  *(unsigned char *)(a1 + 56) = !result;
  return result;
}

CGSize __swiftcall LayoutProxy.idealSize()()
{
  int v1 = *((_DWORD *)v0 + 2);
  uint64_t v9 = *v0;
  int v10 = v1;
  uint64_t v5 = 0;
  char v6 = 1;
  uint64_t v7 = 0;
  char v8 = 1;
  LayoutProxy.size(in:)(&v5);
  result.double height = v3;
  result.double width = v2;
  return result;
}

uint64_t View.background<A>(_:ignoresSafeAreaEdges:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a5;
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  double v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for _BackgroundStyleModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x270FA5388](v12);
  int v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, a4, v14);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v16, v11, a4);
  v16[*(int *)(v12 + 36)] = a2;
  View.modifier<A>(_:)(v16, a3, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t closure #3 in static _BackgroundStyleModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _BackgroundStyleModifier.BackgroundInfo.Value();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  v7[2] = v2;
  uint64_t v8 = type metadata accessor for _AnchoredShapeStyle();
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v8, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v9;
}

uint64_t _BackgroundStyleModifier.BackgroundInfo.Value.init(frame:style:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  long long v4 = a1[1];
  *a3 = *a1;
  a3[1] = v4;
  a3[2] = a1[2];
  uint64_t v5 = (char *)a3 + *(int *)(type metadata accessor for _BackgroundStyleModifier.BackgroundInfo.Value() + 36);
  uint64_t v6 = type metadata accessor for _AnchoredShapeStyle();
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);

  return v7(v5, a2, v6);
}

uint64_t _BackgroundStyleModifier.BackgroundInfo.value.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v49 = a6;
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v50 = type metadata accessor for _BackgroundStyleModifier();
  uint64_t v14 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  int v16 = (char *)&v45 - v15;
  uint64_t v48 = type metadata accessor for _AnchoredShapeStyle();
  MEMORY[0x270FA5388](v48);
  uint64_t v18 = (char *)&v45 - v17;
  *(void *)&long long v46 = HIDWORD(a2);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v20 = *Value;
  uint64_t v21 = Value[1];
  int64_t v22 = (long long *)AGGraphGetValue();
  *(void *)&long long v53 = v20;
  *((void *)&v53 + 1) = v21;
  long long v23 = v22[1];
  long long v54 = *v22;
  long long v55 = v23;
  _BackgroundStyleModifier.BackgroundInfo.modifier.getter((uint64_t)v16);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v16, a4);
  uint64_t v24 = v49;
  unint64_t v25 = (double *)AGGraphGetValue();
  _AnchoredShapeStyle.init(style:bounds:)((uint64_t)v13, a4, a5, (uint64_t)v18, 0.0, 0.0, *v25, v25[1]);
  _BackgroundStyleModifier.BackgroundInfo.Value.init(frame:style:)(&v53, (uint64_t)v18, (_OWORD *)v24);
  *(void *)&long long v47 = a1;
  _BackgroundStyleModifier.BackgroundInfo.modifier.getter((uint64_t)v16);
  LODWORD(v13) = v16[*(int *)(v50 + 36)];
  uint64_t result = (*(uint64_t (**)(char *))(v14 + 8))(v16);
  if (v13)
  {
    uint64_t result = AGGraphGetCurrentAttribute();
    if (result == *MEMORY[0x263F288F8])
    {
      __break(1u);
    }
    else
    {
      unint64_t v27 = HIDWORD(a3);
      double v28 = 0.0;
      if (*MEMORY[0x263F288F8] != HIDWORD(a3))
      {
        unsigned int v29 = result;
        unsigned int v30 = a3;
        unint64_t v31 = DWORD1(v47);
        Inputuint64_t Value = AGGraphGetInputValue();
        uint64_t v33 = *(void *)(InputValue + 16);
        long long v51 = *(_OWORD *)InputValue;
        uint64_t v52 = v33;
        LODWORD(v53) = v29;
        *(void *)((char *)&v53 + 4) = __PAIR64__(a2, v29);
        HIDWORD(v53) = v31;
        *(void *)&long long v54 = __PAIR64__(v46, v30);
        DWORD2(v54) = v27;
        double v28 = SafeAreaInsets.resolve(regions:in:)(1, (int *)&v53);
      }
      *(double *)&long long v34 = EdgeInsets.in(_:)(v28);
      long long v45 = v35;
      long long v46 = v34;
      long long v50 = v36;
      long long v47 = v37;
      uint64_t result = type metadata accessor for _BackgroundStyleModifier.BackgroundInfo.Value();
      uint64_t v38 = (double *)(v24 + *(int *)(result + 36) + *(int *)(v48 + 36));
      *(void *)&v40.f64[0] = v45;
      double v39 = *(double *)&v46;
      double v41 = *(double *)&v46 + v38[1];
      *uint64_t v38 = *(double *)&v45 + *v38;
      v38[1] = v41;
      double v42 = *(double *)(v24 + 8) - v39;
      *(double *)uint64_t v24 = *(double *)v24 - v40.f64[0];
      *(double *)(v24 + 8) = v42;
      *(void *)&v43.f64[0] = v47;
      *(void *)&v43.f64[1] = v50;
      v40.f64[1] = v39;
      float64x2_t v44 = vsubq_f64(*(float64x2_t *)(v24 + 16), vsubq_f64(vnegq_f64(v43), v40));
      *(int8x16_t *)(v24 + 16) = vandq_s8((int8x16_t)v44, (int8x16_t)vcgezq_f64(v44));
    }
  }
  return result;
}

uint64_t type metadata accessor for _BackgroundStyleModifier.BackgroundInfo.Value()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _AnchoredShapeStyle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _BackgroundStyleModifier.BackgroundInfo.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _BackgroundStyleModifier();
  uint64_t Value = AGGraphGetValue();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t type metadata accessor for _BackgroundStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AnchoredResolvedPaint.init(_:bounds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void, uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a5, a1, a2);
  uint64_t result = a4(0, a2, a3);
  uint64_t v18 = (double *)(a5 + *(int *)(result + 36));
  *uint64_t v18 = a6;
  v18[1] = a7;
  void v18[2] = a8;
  void v18[3] = a9;
  return result;
}

uint64_t _AnchoredShapeStyle.init(style:bounds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  return AnchoredResolvedPaint.init(_:bounds:)(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _AnchoredShapeStyle, a4, a5, a6, a7, a8);
}

BOOL OptionalEdgeInsets.init(_:edges:)@<W0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v6 = Edge.Set.contains(_:)(SwiftUI_Edge_top);
  if (v6) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = 0;
  }
  char v8 = a2 | ~v6;
  char v9 = Edge.Set.contains(_:)(SwiftUI_Edge_leading);
  if (v9) {
    uint64_t v10 = a1;
  }
  else {
    uint64_t v10 = 0;
  }
  char v11 = a2 | ~v9;
  char v12 = Edge.Set.contains(_:)(SwiftUI_Edge_bottom);
  if (v12) {
    uint64_t v13 = a1;
  }
  else {
    uint64_t v13 = 0;
  }
  char v14 = a2 | ~v12;
  BOOL result = Edge.Set.contains(_:)(SwiftUI_Edge_trailing);
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 8) = v8 & 1;
  if (result) {
    uint64_t v16 = a1;
  }
  else {
    uint64_t v16 = 0;
  }
  *(void *)(a3 + 16) = v10;
  *(unsigned char *)(a3 + 24) = v11 & 1;
  *(void *)(a3 + 32) = v13;
  *(unsigned char *)(a3 + 40) = v14 & 1;
  *(void *)(a3 + 48) = v16;
  *(unsigned char *)(a3 + 56) = a2 & 1 | !result;
  return result;
}

double _AspectRatioLayout.placement(of:in:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  int v8 = *(_DWORD *)(a1 + 8);
  int v9 = *((_DWORD *)a2 + 2);
  double v10 = *((double *)a2 + 2);
  uint64_t v11 = a2[5];
  char v12 = *((unsigned char *)a2 + 48);
  uint64_t v42 = *(void *)a1;
  int v43 = v8;
  uint64_t v32 = *a2;
  int v33 = v9;
  double v34 = v10;
  long long v27 = *(_OWORD *)(a2 + 3);
  long long v35 = v27;
  uint64_t v36 = v11;
  char v37 = v12;
  PlacementContext.proposedSize.getter((uint64_t)&v38);
  uint64_t v28 = v38;
  char v29 = v39;
  uint64_t v30 = v40;
  char v31 = v41;
  _AspectRatioLayout.spaceOffered(to:in:)(&v42, (uint64_t)&v28, a3, a4 & 0x101, (uint64_t)&v32);
  uint64_t v13 = v32;
  char v14 = v33;
  double v15 = v34;
  char v16 = v35;
  if (v12)
  {
    Inputuint64_t Value = (double *)AGGraphGetInputValue();
    double v18 = *InputValue;
    double v19 = InputValue[1];
  }
  else
  {
    double v18 = v10;
    double v19 = *(double *)&v27;
  }
  double result = v18 * 0.5;
  *(void *)a5 = v13;
  double v21 = v19 * 0.5;
  *(unsigned char *)(a5 + 8) = v14;
  *(double *)(a5 + 16) = v15;
  *(unsigned char *)(a5 + 24) = v16;
  __asm { FMOV            V2.2D, #0.5 }
  *(_OWORD *)(a5 + 32) = _Q2;
  *(double *)(a5 + 48) = result;
  *(double *)(a5 + 56) = v21;
  return result;
}

uint64_t _AspectRatioLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, __int16 a5)
{
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 24);
  unsigned int v9 = a3[1];
  unsigned int v10 = a3[2];
  unsigned int v22 = *a3;
  unsigned int v23 = v9;
  unsigned int v24 = v10;
  unint64_t v16 = __PAIR64__(v9, v22);
  unsigned int v17 = v10;
  uint64_t v12 = v5;
  char v13 = v6;
  uint64_t v14 = v7;
  char v15 = v8;
  _AspectRatioLayout.spaceOffered(to:in:)((uint64_t *)&v16, (uint64_t)&v12, a4, a5 & 0x101, (uint64_t)&v18);
  uint64_t v12 = v18;
  char v13 = v19;
  uint64_t v14 = v20;
  char v15 = v21;
  return LayoutProxy.size(in:)(&v12);
}

void _AspectRatioLayout.spaceOffered(to:in:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  double v6 = *(double *)a2;
  int v7 = *(unsigned __int8 *)(a2 + 8);
  double v8 = *(double *)(a2 + 16);
  int v9 = *(unsigned __int8 *)(a2 + 24);
  if ((v7 & v9) != 1)
  {
    if (a4)
    {
      int v13 = *((_DWORD *)a1 + 2);
      uint64_t v23 = *a1;
      int v24 = v13;
      double v19 = *(double *)&a3;
      char v20 = 1;
      double v21 = *(double *)&a3;
      char v22 = 1;
      LayoutProxy.size(in:)((uint64_t *)&v19);
    }
    else
    {
      double v11 = *(double *)&a3;
      double v12 = 1.0;
    }
    if (v11 == v12)
    {
      double v11 = 1.0;
      double v12 = 1.0;
    }
    if ((a4 & 0x100) == 0)
    {
      double v19 = v6;
      char v20 = v7;
      double v21 = v8;
      char v22 = v9;
      double v14 = CGSize.scaledToFit(_:)((uint64_t)&v19, v11, v12);
LABEL_28:
      *(double *)a5 = v14;
      *(unsigned char *)(a5 + 8) = 0;
      *(double *)(a5 + 16) = v15;
      goto LABEL_29;
    }
    if ((v7 & 1) != 0 || v11 == 0.0 && v6 == 0.0)
    {
      double v16 = -INFINITY;
      if (v9) {
        goto LABEL_18;
      }
    }
    else
    {
      double v16 = v6 / v11;
      if (v9) {
        goto LABEL_18;
      }
    }
    if (v12 != 0.0 || v8 != 0.0)
    {
      double v17 = v8 / v12;
      goto LABEL_20;
    }
LABEL_18:
    double v17 = -INFINITY;
LABEL_20:
    if (v16 <= v17) {
      double v16 = v17;
    }
    if (v11 == 0.0) {
      double v14 = 0.0;
    }
    else {
      double v14 = v11 * v16;
    }
    double v18 = v12 * v16;
    if (v12 == 0.0) {
      double v15 = 0.0;
    }
    else {
      double v15 = v18;
    }
    goto LABEL_28;
  }
  *(double *)a5 = v6;
  *(unsigned char *)(a5 + 8) = 1;
  *(double *)(a5 + 16) = v8;
LABEL_29:
  *(unsigned char *)(a5 + 24) = v7 & v9;
}

double CGSize.scaledToFit(_:)(uint64_t a1, double result, double a3)
{
  double v3 = *(double *)(a1 + 16);
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a1 + 24)) {
      return result;
    }
    double v4 = INFINITY;
  }
  else
  {
    BOOL v5 = *(double *)a1 == 0.0 && result == 0.0;
    double v4 = *(double *)a1 / result;
    double v6 = INFINITY;
    if (v5) {
      double v4 = INFINITY;
    }
    if (*(unsigned char *)(a1 + 24)) {
      goto LABEL_14;
    }
  }
  if (a3 == 0.0 && v3 == 0.0) {
    double v6 = INFINITY;
  }
  else {
    double v6 = v3 / a3;
  }
LABEL_14:
  if (v6 >= v4) {
    double v7 = v4;
  }
  else {
    double v7 = v6;
  }
  if (result == 0.0) {
    return 0.0;
  }
  else {
    return v7 * result;
  }
}

double EdgeInsets.init(_:edges:)(double a1)
{
  if (Edge.Set.contains(_:)(SwiftUI_Edge_top)) {
    double v2 = a1;
  }
  else {
    double v2 = 0.0;
  }
  Edge.Set.contains(_:)(SwiftUI_Edge_leading);
  Edge.Set.contains(_:)(SwiftUI_Edge_bottom);
  Edge.Set.contains(_:)(SwiftUI_Edge_trailing);
  return v2;
}

uint64_t LayoutSubview.sizeThatFits(_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  int v5 = *((_DWORD *)v4 + 2);
  uint64_t v11 = *v4;
  int v12 = v5;
  uint64_t v7 = a1;
  char v8 = a2 & 1;
  uint64_t v9 = a3;
  char v10 = a4 & 1;
  return LayoutProxy.size(in:)(&v7);
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance _PaddingLayout@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  return _PaddingLayout.placement(of:in:)(a1, a2);
}

double _PaddingLayout.placement(of:in:)@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  int v4 = a1[1];
  int v5 = a1[2];
  long long v22 = *((_OWORD *)a1 + 1);
  uint64_t v6 = *((void *)a1 + 4);
  uint64_t v7 = *((void *)a1 + 5);
  char v8 = *((unsigned char *)a1 + 48);
  int v23 = *a1;
  int v3 = v23;
  int v24 = v4;
  int v25 = v5;
  _PaddingLayout.effectiveInsets(in:)((uint64_t)&v23);
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;
  double v16 = v15;
  int v23 = v3;
  int v24 = v4;
  int v25 = v5;
  long long v26 = v22;
  uint64_t v27 = v6;
  uint64_t v28 = v7;
  char v29 = v8;
  PlacementContext.proposedSize.getter((uint64_t)&v30);
  double v17 = v30;
  char v18 = v31;
  char v19 = v33;
  if ((v31 & 1) == 0)
  {
    if (v30 - (v12 + v16) < 0.0) {
      double v17 = 0.0;
    }
    else {
      double v17 = v30 - (v12 + v16);
    }
  }
  double v20 = v32;
  if ((v33 & 1) == 0)
  {
    if (v32 - (v10 + v14) < 0.0) {
      double v20 = 0.0;
    }
    else {
      double v20 = v32 - (v10 + v14);
    }
  }
  if (one-time initialization token for topLeading != -1) {
    swift_once();
  }
  *(double *)a2 = v17;
  *(unsigned char *)(a2 + 8) = v18;
  *(double *)(a2 + 16) = v20;
  *(unsigned char *)(a2 + 24) = v19;
  double result = *(double *)&static UnitPoint.topLeading;
  *(_OWORD *)(a2 + 32) = static UnitPoint.topLeading;
  *(double *)(a2 + 48) = v12;
  *(double *)(a2 + 56) = v10;
  return result;
}

double _FlexFrameLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = *(unsigned char *)(a1 + 8);
  char v5 = *(unsigned char *)(a1 + 24);
  uint64_t v6 = *(uint64_t *)v3;
  char v7 = *(unsigned char *)(v3 + 8);
  double v8 = *(double *)(v3 + 32);
  if (v4)
  {
    double v9 = *(double *)(v3 + 16);
    int v10 = *(unsigned __int8 *)(v3 + 24);
  }
  else
  {
    double v9 = 0.0;
    if ((*(unsigned char *)(v3 + 8) & 1) != 0 || (*(unsigned char *)(v3 + 40) & 1) != 0 || (double v11 = *(double *)v3, *(double *)&v6 > v8))
    {
      int v10 = 1;
    }
    else
    {
      int v10 = 0;
      if (*(double *)&v6 <= *(double *)a1) {
        double v11 = *(double *)a1;
      }
      if (v11 <= v8) {
        double v9 = v11;
      }
      else {
        double v9 = *(double *)(v3 + 32);
      }
    }
  }
  uint64_t v12 = *(void *)(a1 + 16);
  double v13 = *(double *)a3;
  int v14 = *(_DWORD *)(a3 + 8);
  if (*(unsigned char *)(a1 + 24))
  {
    int v15 = *(unsigned __int8 *)(v3 + 72);
    goto LABEL_9;
  }
  if ((*(unsigned char *)(v3 + 56) & 1) == 0 && (*(unsigned char *)(v3 + 88) & 1) == 0 && *(double *)(v3 + 48) <= *(double *)(v3 + 80))
  {
    int v15 = 0;
LABEL_9:
    if ((v10 | v15) != 1) {
      return v9;
    }
    goto LABEL_15;
  }
  int v15 = 1;
LABEL_15:
  char v25 = *(unsigned char *)(v3 + 88);
  char v26 = *(unsigned char *)(v3 + 56);
  uint64_t v27 = *(void *)(v3 + 80);
  uint64_t v28 = *(void *)(v3 + 48);
  char v30 = *(unsigned char *)(v3 + 40);
  uint64_t v29 = *(void *)(v3 + 32);
  double v31 = *(double *)a1;
  LOBYTE(v32) = v4;
  uint64_t v33 = v12;
  char v34 = v5;
  int v16 = v10;
  _FlexFrameLayout.childProposal(myProposal:)((uint64_t)&v31, (uint64_t)&v35);
  uint64_t v17 = v35;
  char v18 = v36;
  uint64_t v19 = v37;
  char v20 = v38;
  double v31 = v13;
  int v32 = v14;
  LayoutProxy.size(in:)(&v35);
  double v23 = v22;
  if (v16) {
    double v9 = dimension #1 (min:max:childProposal:childActual:) in _FlexFrameLayout.sizeThatFits(in:context:child:)(v6, v7, v29, v30, v17, v18, v21);
  }
  if (v15) {
    dimension #1 (min:max:childProposal:childActual:) in _FlexFrameLayout.sizeThatFits(in:context:child:)(v28, v26, v27, v25, v19, v20, v23);
  }
  return v9;
}

double dimension #1 (min:max:childProposal:childActual:) in _FlexFrameLayout.sizeThatFits(in:context:child:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, double result)
{
  if (a2)
  {
    if ((a4 & 1) == 0)
    {
      double v8 = *(double *)&a5;
      if (a6) {
        double v8 = -INFINITY;
      }
      if (v8 < result) {
        double v8 = result;
      }
      double result = *(double *)&a3;
      if (v8 < *(double *)&a3) {
        return v8;
      }
    }
  }
  else if ((a4 & 1) != 0 || *(double *)&a1 > *(double *)&a3)
  {
    double v7 = *(double *)&a5;
    if (a6) {
      double v7 = INFINITY;
    }
    if (v7 >= result) {
      double v7 = result;
    }
    double result = *(double *)&a1;
    if (v7 >= *(double *)&a1) {
      return v7;
    }
  }
  else
  {
    if (*(double *)&a1 > result) {
      double result = *(double *)&a1;
    }
    if (result > *(double *)&a3) {
      return *(double *)&a3;
    }
  }
  return result;
}

uint64_t _FlexFrameLayout.childProposal(myProposal:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  double v3 = *(double *)v2;
  double v4 = *(double *)(v2 + 32);
  if (*(unsigned char *)(result + 8))
  {
    double v5 = *(double *)(v2 + 16);
    if (*(unsigned char *)(v2 + 24))
    {
      char v6 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    double v5 = *(double *)result;
  }
  char v6 = 0;
  if (*(unsigned char *)(v2 + 8)) {
    double v3 = -INFINITY;
  }
  if (v3 > v5) {
    double v5 = v3;
  }
  if (*(unsigned char *)(v2 + 40)) {
    double v4 = INFINITY;
  }
  if (v4 < v5) {
    double v5 = v4;
  }
LABEL_13:
  double v7 = *(double *)(v2 + 48);
  double v8 = *(double *)(v2 + 80);
  if (*(unsigned char *)(result + 24))
  {
    double v9 = *(double *)(v2 + 64);
    if (*(unsigned char *)(v2 + 72))
    {
      char v10 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    double v9 = *(double *)(result + 16);
  }
  char v10 = 0;
  if (*(unsigned char *)(v2 + 56)) {
    double v7 = -INFINITY;
  }
  if (v7 > v9) {
    double v9 = v7;
  }
  if (*(unsigned char *)(v2 + 88)) {
    double v8 = INFINITY;
  }
  if (v8 < v9) {
    double v9 = v8;
  }
LABEL_25:
  *(double *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v6;
  *(double *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 24) = v10;
  return result;
}

BOOL AbsoluteEdge.Set.init(_:layoutDirection:)@<W0>(unsigned __int8 *a1@<X1>, unsigned char *a2@<X8>)
{
  int v3 = *a1;
  Swift::Bool v4 = Edge.Set.contains(_:)(SwiftUI_Edge_leading);
  if (v3) {
    int v5 = 8;
  }
  else {
    int v5 = 2;
  }
  if (v4) {
    int v6 = v5;
  }
  else {
    int v6 = 0;
  }
  Swift::Bool v7 = Edge.Set.contains(_:)(SwiftUI_Edge_trailing);
  if (v3) {
    int v8 = 2;
  }
  else {
    int v8 = 8;
  }
  if ((v6 & v8) != 0) {
    int v8 = 0;
  }
  int v9 = v8 | v6;
  if (v7) {
    int v10 = v9;
  }
  else {
    int v10 = v6;
  }
  int v11 = v10 | (Edge.Set.contains(_:)(SwiftUI_Edge_top) && (v10 & 1) == 0);
  BOOL result = Edge.Set.contains(_:)(SwiftUI_Edge_bottom);
  if (result && (v10 & 4) == 0) {
    char v13 = v11 | 4;
  }
  else {
    char v13 = v11;
  }
  *a2 = v13;
  return result;
}

uint64_t _PaddingLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v3 = *(double *)a1;
  char v4 = *(unsigned char *)(a1 + 8);
  double v5 = *(double *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 24);
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *a3;
  int v9 = *((_DWORD *)a3 + 2);
  double v19 = *(double *)a2;
  int v20 = v7;
  _PaddingLayout.effectiveInsets(in:)((uint64_t)&v19);
  double v12 = v11;
  double v15 = v3 - (v13 + v14);
  if (v15 < 0.0) {
    double v15 = 0.0;
  }
  if (v4) {
    double v15 = v3;
  }
  double v16 = v5 - (v12 + v10);
  if (v16 < 0.0) {
    double v16 = 0.0;
  }
  uint64_t v23 = v8;
  int v24 = v9;
  double v19 = v15;
  LOBYTE(v20) = v4;
  if (v6) {
    double v17 = v5;
  }
  else {
    double v17 = v16;
  }
  double v21 = v17;
  char v22 = v6;
  return LayoutProxy.size(in:)((uint64_t *)&v19);
}

uint64_t LayoutProxy.size(in:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  char v5 = *((unsigned char *)a1 + 24);
  if (*(_DWORD *)(v1 + 4) == *MEMORY[0x263F288F8])
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
  }
  else
  {
    Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
  }
  uint64_t v7 = *InputValue;
  uint64_t v8 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_12;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    uint64_t v10 = v2;
    char v11 = v3;
    uint64_t v12 = v4;
    char v13 = v5;
    (*(void (**)(uint64_t *))(*(void *)v7 + 120))(&v10);
    return swift_release();
  }
  return result;
}

void _PaddingLayout.effectiveInsets(in:)(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 40))
  {
    Swift::UInt32 v3 = *(_DWORD *)(a1 + 8);
    swift_getKeyPath();
    _s7SwiftUI10EdgeInsetsVSgMaTm_0(0, &lazy cache variable for type metadata for EnvironmentFetch<EdgeInsets>, (uint64_t)&type metadata for EdgeInsets, (uint64_t (*)(void, uint64_t))type metadata accessor for EnvironmentFetch);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v3);
    type metadata accessor for KeyPath<EnvironmentValues, LayoutDirection>(0, &lazy cache variable for type metadata for KeyPath<EnvironmentValues, EdgeInsets>);
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    Hasher._finalize()();
    lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<EdgeInsets> and conformance EnvironmentFetch<A>, &lazy cache variable for type metadata for EnvironmentFetch<EdgeInsets>, (uint64_t)&type metadata for EdgeInsets);
    lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<EdgeInsets> and conformance EnvironmentFetch<A>, &lazy cache variable for type metadata for EnvironmentFetch<EdgeInsets>, (uint64_t)&type metadata for EdgeInsets);
    double v2 = *(double *)static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
    swift_release_n();
  }
  else
  {
    double v2 = *(double *)(v1 + 8);
  }
  EdgeInsets.in(_:)(v2);
}

double EdgeInsets.in(_:)(double a1)
{
  if (!Edge.Set.contains(_:)(SwiftUI_Edge_top)) {
    a1 = 0.0;
  }
  Edge.Set.contains(_:)(SwiftUI_Edge_leading);
  Edge.Set.contains(_:)(SwiftUI_Edge_bottom);
  Edge.Set.contains(_:)(SwiftUI_Edge_trailing);
  return a1;
}

Swift::Bool __swiftcall Edge.Set.contains(_:)(SwiftUI::Edge a1)
{
  int v2 = 1 << a1;
  if ((a1 & 0xF8) != 0) {
    LOBYTE(v2) = 0;
  }
  if (a1 <= 8u) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  return (v3 & ~v1) == 0;
}

double static UnitPoint.topLeading.getter()
{
  return static UnitPoint.topLeading.getter(&one-time initialization token for topLeading, (uint64_t)&static UnitPoint.topLeading);
}

ValueMetadata *type metadata accessor for Font.Context()
{
  return &type metadata for Font.Context;
}

uint64_t _ViewInputs.containerSize.getter()
{
  return *(unsigned int *)(v0 + 80);
}

uint64_t (*partial apply for closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t a1, uint64_t a2)
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  long long v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 24) = v3;
  *(void *)(v2 + 40) = v3;
  return partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance LayoutSubviews(uint64_t a1, unint64_t *a2))(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return dispatch thunk of StatefulRule.updateValue()();
}

uint64_t DynamicBody.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v50[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  long long v54 = &v50[-v9];
  MEMORY[0x270FA5388](v10);
  char v60 = &v50[-v11];
  type metadata accessor for _ContiguousArrayStorage<(String, AGAttribute)>(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  double v14 = &v50[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v15);
  double v17 = &v50[-v16];
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v55 = *(void *)(a1 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v57 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v58 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v59 = &v50[-v20];
  uint64_t Value = (_DWORD *)AGGraphGetValue();
  uint64_t v22 = *(int *)(a1 + 64);
  if (*(_DWORD *)(v1 + v22) != *Value >> 1)
  {
    uint64_t v23 = (uint64_t *)(v1 + *(int *)(a1 + 60));
    uint64_t v62 = *v23;
    uint64_t v63 = v23[1];
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v1 + v22) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t v24 = v58;
  uint64_t v25 = AGGraphGetValue();
  char v27 = v26;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v57 + 16))(v59, v25, v24);
  char v61 = v27 & 1;
  Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    unsigned int v51 = CurrentAttribute;
    uint64_t v56 = v18;
    uint64_t v52 = v7;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_5;
    }
  }
  swift_once();
LABEL_5:
  swift_beginAccess();
  long long v53 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v29 = (uint64_t)v17;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v17, 1, 1, v4);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v31 = v4;
  uint64_t v32 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v29;
  closure #1 in DynamicBody.updateValue()((uint64_t)v59, v2, &v61, v56, *(void *)(a1 + 24), v55, *(void *)(a1 + 40));
  *(void *)(StatusReg + 848) = v32;
  outlined init with copy of ObservationTracking._AccessList?(v29, (uint64_t)v14);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v31) == 1)
  {
    _sypSgWOhTm_7((uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<(String, AGAttribute)>);
  }
  else
  {
    uint64_t v33 = *(void (**)(char *, unsigned char *, uint64_t))(v5 + 32);
    char v34 = v60;
    v33(v60, v14, v31);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 16))(v54, v34, v31);
    swift_beginAccess();
    uint64_t v35 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v35;
    uint64_t v37 = v33;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v35 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v35 + 2) + 1, 1, (unint64_t)v35);
      static ObservationRegistrar.lastestAccessLists = v35;
    }
    unint64_t v39 = *((void *)v35 + 2);
    unint64_t v38 = *((void *)v35 + 3);
    if (v39 >= v38 >> 1)
    {
      uint64_t v35 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1, (unint64_t)v35);
      static ObservationRegistrar.lastestAccessLists = v35;
    }
    *((void *)v35 + 2) = v39 + 1;
    v37(&v35[((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v39], v54, v31);
    swift_endAccess();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v60, v31);
  }
  _sypSgWOhTm_7(v29, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<(String, AGAttribute)>);
  uint64_t v40 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v40)
  {
    uint64_t v42 = *(unsigned char **)(v5 + 16);
    uint64_t v41 = v5 + 16;
    char v60 = v42;
    int v43 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v41 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 64));
    uint64_t v44 = *(void *)(v41 + 56);
    long long v45 = (void (**)(uint64_t, uint64_t))(v41 - 8);
    long long v54 = static ObservationRegistrar.lastestAccessLists;
    swift_bridgeObjectRetain();
    uint64_t v46 = (uint64_t)v52;
    uint64_t v47 = v51;
    do
    {
      ((void (*)(uint64_t, char *, uint64_t))v60)(v46, v43, v31);
      uint64_t v48 = swift_getAssociatedTypeWitness();
      installObservationSlow<A>(accessList:attribute:)(v46, v47, v48);
      (*v45)(v46, v31);
      v43 += v44;
      --v40;
    }
    while (v40);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v53;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v57 + 8))(v59, v58);
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t outlined destroy of NamedImage.Cache.WeakCatalog?(uint64_t a1, unint64_t *a2)
{
  type metadata accessor for Any?(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _sypSgWOhTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _sypSgWOhTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _sypSgWOhTm_2(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _sypSgWOhTm_3(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  type metadata accessor for _ContiguousArrayStorage<Int>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _sypSgWOhTm_4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _sypSgWOhTm_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _sypSgWOhTm_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _sypSgWOhTm_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _sypSgWOhTm_8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _sypSgWOhTm_9(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _sypSgWOhTm_10(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for AtomicBuffer<NamedImage.Cache.ImageCacheData>(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _sypSgWOhTm_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _sypSgWOhTm_12(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for AnyAccessibilityValue?(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _sypSgWOhTm_13(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _sypSgWOhTm_14(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for [_ViewDebug.Data](0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _sypSgWOhTm_15(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  type metadata accessor for _DynamicPropertyBuffer?(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void type metadata accessor for _ContiguousArrayStorage<(String, AGAttribute)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t closure #1 in DynamicBody.updateValue()(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v27 = a3;
  uint64_t v26 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v14 = (char *)&v25 - v13;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  uint64_t v29 = type metadata accessor for DynamicBody();
  uint64_t v15 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  double v17 = (char *)&v25 - v16;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v35 = a7;
  uint64_t v42 = a2;
  uint64_t v36 = a2;
  uint64_t v18 = v26;
  double v19 = v27;
  uint64_t v37 = v27;
  uint64_t v20 = v28;
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v26, (uint64_t)partial apply for closure #1 in closure #1 in DynamicBody.updateValue(), (uint64_t)v31, AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v21);
  uint64_t v28 = v20;
  if ((*v19 & 1) != 0 || (swift_getAssociatedTypeWitness(), !AGGraphGetOutputValue())) {
    uint64_t v22 = 1;
  }
  else {
    uint64_t v22 = AGGraphCurrentAttributeWasModified();
  }
  *double v19 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v42, v29);
  uint64_t v23 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v14, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(a6 + 24))(v14, v22, a4, a6);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v14, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(a4 - 8) + 8))(v17, a4);
}

uint64_t type metadata accessor for DynamicBody()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for AnyGesture<()>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ViewBodyAccessor<A>(uint64_t a1, char a2, uint64_t a3)
{
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v44 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  long long v45 = (char *)v35 - v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v16 = (char *)v35 - v15;
  if (a2)
  {
    uint64_t v43 = a1;
    int v17 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      (*(void (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
      AGGraphSetUpdate();
      uint64_t v33 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      MEMORY[0x270FA5388](v33);
      v35[-2] = type metadata accessor for ViewBodyAccessor();
      v35[-1] = swift_getWitnessTable();
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #2 in BodyAccessor.setBody(_:), (uint64_t)&v35[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v34);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
      return;
    }
    int v38 = v17;
    uint64_t v39 = v16;
    uint64_t v40 = v14;
    uint64_t v41 = AssociatedTypeWitness;
    static OSSignpostID.exclusive.getter();
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v19 = AGTypeID.description.getter();
    uint64_t v21 = v20;
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v22 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v19;
    uint64_t v23 = (void (**)(char *, uint64_t, uint64_t))(inited + 32);
    *(void *)(inited + 64) = v22;
    *(void *)(inited + 40) = v21;
    uint64_t v42 = a3;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    uint64_t v37 = inited + 72;
    *(void *)(inited + 96) = MEMORY[0x263F8D310];
    *(void *)(inited + 104) = v22;
    *(void *)(inited + 80) = v24;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v25 = v44 + 16;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v10, v45, v8);
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, MEMORY[0x263F8E0F8]);
    uint64_t v26 = swift_initStackObject();
    long long v46 = xmmword_2461BE2B0;
    *(_OWORD *)(v26 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v27 = v26;
      outlined init with copy of AnyTrackedValue(inited + 32, v26 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v35[1] = inited;
        uint64_t v36 = a4;
        uint64_t inited = v38 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(v37, v27 + 72);
        *(_OWORD *)(v27 + 128) = 0u;
        *(void *)(v27 + 144) = 0;
        *(_OWORD *)(v27 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v27, inited, (uint64_t)v10);
        outlined init with copy of CVarArg?(v27 + 112, (uint64_t)v47);
        swift_bridgeObjectRelease();
        if (!v48)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v47);
          swift_bridgeObjectRelease();
          uint64_t v32 = *(void (**)(char *, uint64_t))(v44 + 8);
          v32(v45, v8);
          v32(v10, v8);
          a4 = v36;
          uint64_t AssociatedTypeWitness = v41;
          a3 = v42;
          uint64_t v16 = v39;
          uint64_t v14 = v40;
          goto LABEL_15;
        }
        uint64_t v23 = (void (**)(char *, uint64_t, uint64_t))(v25 + 8);
        outlined destroy of CVarArg?((uint64_t)v47);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          uint64_t v29 = *v23;
          while (1)
          {
            v29(v10, v28, v8);
            uint64_t v30 = swift_initStackObject();
            *(_OWORD *)(v30 + 16) = v46;
            *(_OWORD *)(v30 + 32) = 0u;
            *(_OWORD *)(v30 + 48) = 0u;
            *(_OWORD *)(v30 + 64) = 0u;
            *(_OWORD *)(v30 + 80) = 0u;
            *(_OWORD *)(v30 + 96) = 0u;
            *(_OWORD *)(v30 + 128) = 0u;
            *(void *)(v30 + 144) = 0;
            *(_OWORD *)(v30 + 112) = 0u;
            uint64_t v31 = v30 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v30, inited, (uint64_t)v10);
            outlined init with copy of CVarArg?(v31, (uint64_t)v47);
            swift_bridgeObjectRelease();
            if (!v48) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v47);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

uint64_t $defer #1 <A>() in traceRuleBody<A>(_:body:)()
{
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v31 - v9;
  Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
LABEL_16:
    swift_once();
    goto LABEL_4;
  }
  int v12 = CurrentAttribute;
  int v13 = static os_signpost_type_t.end.getter();
  static os_signpost_type_t.event.getter();
  uint64_t result = kdebug_is_enabled();
  if (!result) {
    return result;
  }
  int v32 = v13;
  static OSSignpostID.exclusive.getter();
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  long long v35 = xmmword_2461BE2B0;
  *(_OWORD *)(inited + 16) = xmmword_2461BE2B0;
  *(_DWORD *)(inited + 32) = v12;
  uint64_t v1 = inited + 32;
  uint64_t v15 = MEMORY[0x263F8E960];
  *(void *)(inited + 56) = MEMORY[0x263F8E8F8];
  *(void *)(inited + 64) = v15;
  uint64_t v16 = MEMORY[0x263F8D750];
  *(void *)(inited + 96) = MEMORY[0x263F8D6C8];
  *(void *)(inited + 104) = v16;
  *(void *)(inited + 72) = 1;
  uint64_t v0 = v10;
  id v17 = (id)AGGraphGetAttributeGraph();
  uint64_t Counter = AGGraphGetCounter();

  *(void *)(inited + 112) = Counter;
  uint64_t v3 = (void (**)(char *, uint64_t, uint64_t))(inited + 112);
  uint64_t v19 = MEMORY[0x263F8DA20];
  *(void *)(inited + 136) = MEMORY[0x263F8D9D0];
  *(void *)(inited + 144) = v19;
  if (one-time initialization token for _signpostLog != -1) {
    goto LABEL_16;
  }
LABEL_4:
  uint64_t v33 = v0;
  uint64_t v34 = v5;
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  uint64_t v20 = v5 + 16;
  v21(v7, v0, v4);
  type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
  uint64_t v22 = swift_initStackObject();
  *(_OWORD *)(v22 + 16) = v35;
  if (!*(void *)(inited + 16))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v23 = v22;
  outlined init with copy of AnyTrackedValue(v1, v22 + 32);
  if (*(void *)(inited + 16) < 2uLL)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of AnyTrackedValue(inited + 72, v23 + 72);
  if (*(void *)(inited + 16) < 3uLL)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    swift_once();
LABEL_9:
    uint64_t v25 = MEMORY[0x263F8E9C8];
    while (1)
    {
      uint64_t v26 = __swift_project_value_buffer(v4, (uint64_t)static OSSignpostID.continuation);
      (*v3)(v7, v26, v4);
      uint64_t v27 = swift_initStackObject();
      *(_OWORD *)(v27 + 16) = v35;
      *(_OWORD *)(v27 + 32) = 0u;
      *(_OWORD *)(v27 + 48) = 0u;
      *(void *)(v27 + 64) = 0;
      *(void *)(v27 + 72) = 0;
      *(_OWORD *)(v27 + 80) = 0u;
      *(_OWORD *)(v27 + 96) = 0u;
      *(_OWORD *)(v27 + 128) = 0u;
      *(void *)(v27 + 144) = 0;
      *(_OWORD *)(v27 + 112) = 0u;
      uint64_t v28 = v27 + 112;
      specialized withKDebugValues(_:_:closure:)(v1, v27, v1, (uint64_t)v7);
      outlined init with copy of CVarArg?(v28, (uint64_t)v36);
      swift_bridgeObjectRelease();
      uint64_t v29 = v37;
      _ss7CVarArg_pSgWOhTm_1((uint64_t)v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
      if (!v29) {
        break;
      }
      if (one-time initialization token for continuation != -1) {
        swift_once();
      }
    }
    goto LABEL_13;
  }
  uint64_t v31 = inited;
  uint64_t v1 = v32 | 0x14110014u;
  outlined init with copy of AnyTrackedValue((uint64_t)v3, v23 + 112);
  specialized withKDebugValues(_:_:closure:)(v1, v23, v1, (uint64_t)v7);
  outlined init with copy of CVarArg?(v23 + 112, (uint64_t)v36);
  swift_bridgeObjectRelease();
  uint64_t v24 = v37;
  _ss7CVarArg_pSgWOhTm_1((uint64_t)v36, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
  if (v24)
  {
    uint64_t v3 = (void (**)(char *, uint64_t, uint64_t))(v20 + 8);
    if (one-time initialization token for continuation == -1) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v34 + 8);
  v30(v33, v4);
  return ((uint64_t (*)(char *, uint64_t))v30)(v7, v4);
}

uint64_t type metadata accessor for ViewBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for URL?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s10Foundation3URLVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ModifierBodyAccessor<A>(uint64_t a1, char a2, uint64_t a3)
{
}

{
  specialized ModifierBodyAccessor.updateBody(of:changed:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

void specialized ModifierBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v44 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  long long v45 = (char *)v35 - v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v16 = (char *)v35 - v15;
  if (a2)
  {
    uint64_t v43 = a1;
    int v17 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      (*(void (**)(void))(a4 + 48))();
      AGGraphSetUpdate();
      uint64_t v33 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      MEMORY[0x270FA5388](v33);
      v35[-2] = type metadata accessor for ModifierBodyAccessor();
      v35[-1] = swift_getWitnessTable();
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #2 in BodyAccessor.setBody(_:), (uint64_t)&v35[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v34);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
      return;
    }
    int v38 = v17;
    uint64_t v39 = v16;
    uint64_t v40 = v14;
    uint64_t v41 = AssociatedTypeWitness;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for BodyInput<_ViewModifier_Content<SafeAreaPaddingModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v19 = AGTypeID.description.getter();
    uint64_t v21 = v20;
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v22 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v19;
    uint64_t v23 = (void (**)(char *, uint64_t, uint64_t))(inited + 32);
    *(void *)(inited + 64) = v22;
    *(void *)(inited + 40) = v21;
    uint64_t v42 = a3;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    uint64_t v37 = inited + 72;
    *(void *)(inited + 96) = MEMORY[0x263F8D310];
    *(void *)(inited + 104) = v22;
    *(void *)(inited + 80) = v24;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v25 = v44 + 16;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v10, v45, v8);
    type metadata accessor for BodyInput<_ViewModifier_Content<SafeAreaPaddingModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, MEMORY[0x263F8E0F8]);
    uint64_t v26 = swift_initStackObject();
    long long v46 = xmmword_2461BE2B0;
    *(_OWORD *)(v26 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v27 = v26;
      outlined init with copy of AnyTrackedValue(inited + 32, v26 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v35[1] = inited;
        uint64_t v36 = a4;
        uint64_t inited = v38 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(v37, v27 + 72);
        *(_OWORD *)(v27 + 128) = 0u;
        *(void *)(v27 + 144) = 0;
        *(_OWORD *)(v27 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v27, inited, (uint64_t)v10);
        outlined init with copy of CVarArg?(v27 + 112, (uint64_t)v47);
        swift_bridgeObjectRelease();
        if (!v48)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v47);
          swift_bridgeObjectRelease();
          int v32 = *(void (**)(char *, uint64_t))(v44 + 8);
          v32(v45, v8);
          v32(v10, v8);
          a4 = v36;
          uint64_t AssociatedTypeWitness = v41;
          uint64_t v16 = v39;
          uint64_t v14 = v40;
          goto LABEL_15;
        }
        uint64_t v23 = (void (**)(char *, uint64_t, uint64_t))(v25 + 8);
        outlined destroy of CVarArg?((uint64_t)v47);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          uint64_t v29 = *v23;
          while (1)
          {
            v29(v10, v28, v8);
            uint64_t v30 = swift_initStackObject();
            *(_OWORD *)(v30 + 16) = v46;
            *(_OWORD *)(v30 + 32) = 0u;
            *(_OWORD *)(v30 + 48) = 0u;
            *(_OWORD *)(v30 + 64) = 0u;
            *(_OWORD *)(v30 + 80) = 0u;
            *(_OWORD *)(v30 + 96) = 0u;
            *(_OWORD *)(v30 + 128) = 0u;
            *(void *)(v30 + 144) = 0;
            *(_OWORD *)(v30 + 112) = 0u;
            uint64_t v31 = v30 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v30, inited, (uint64_t)v10);
            outlined init with copy of CVarArg?(v31, (uint64_t)v47);
            swift_bridgeObjectRelease();
            if (!v48) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v47);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (**v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void v35[2];
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  long long v46;
  unsigned char v47[24];
  uint64_t v48;
  uint64_t v49;

  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v44 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  long long v45 = (char *)v35 - v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v16 = (char *)v35 - v15;
  if (a2)
  {
    uint64_t v43 = a1;
    int v17 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      (*(void (**)(void))(a4 + 24))();
      AGGraphSetUpdate();
      uint64_t v33 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      MEMORY[0x270FA5388](v33);
      v35[-2] = type metadata accessor for ModifierBodyAccessor();
      v35[-1] = swift_getWitnessTable();
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #2 in BodyAccessor.setBody(_:), (uint64_t)&v35[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v34);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
      return;
    }
    int v38 = v17;
    uint64_t v39 = v16;
    uint64_t v40 = v14;
    uint64_t v41 = AssociatedTypeWitness;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v19 = AGTypeID.description.getter();
    uint64_t v21 = v20;
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v22 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v19;
    uint64_t v23 = (void (**)(char *, uint64_t, uint64_t))(inited + 32);
    *(void *)(inited + 64) = v22;
    *(void *)(inited + 40) = v21;
    uint64_t v42 = a3;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    uint64_t v37 = inited + 72;
    *(void *)(inited + 96) = MEMORY[0x263F8D310];
    *(void *)(inited + 104) = v22;
    *(void *)(inited + 80) = v24;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v25 = v44 + 16;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v10, v45, v8);
    type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, MEMORY[0x263F8E0F8]);
    uint64_t v26 = swift_initStackObject();
    long long v46 = xmmword_2461BE2B0;
    *(_OWORD *)(v26 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v27 = v26;
      outlined init with copy of AnyTrackedValue(inited + 32, v26 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v35[1] = inited;
        uint64_t v36 = a4;
        uint64_t inited = v38 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(v37, v27 + 72);
        *(_OWORD *)(v27 + 128) = 0u;
        *(void *)(v27 + 144) = 0;
        *(_OWORD *)(v27 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v27, inited, (uint64_t)v10);
        outlined init with copy of CVarArg?(v27 + 112, (uint64_t)v47);
        swift_bridgeObjectRelease();
        if (!v48)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v47);
          swift_bridgeObjectRelease();
          int v32 = *(void (**)(char *, uint64_t))(v44 + 8);
          v32(v45, v8);
          v32(v10, v8);
          a4 = v36;
          uint64_t AssociatedTypeWitness = v41;
          uint64_t v16 = v39;
          uint64_t v14 = v40;
          goto LABEL_15;
        }
        uint64_t v23 = (void (**)(char *, uint64_t, uint64_t))(v25 + 8);
        outlined destroy of CVarArg?((uint64_t)v47);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          uint64_t v29 = *v23;
          while (1)
          {
            v29(v10, v28, v8);
            uint64_t v30 = swift_initStackObject();
            *(_OWORD *)(v30 + 16) = v46;
            *(_OWORD *)(v30 + 32) = 0u;
            *(_OWORD *)(v30 + 48) = 0u;
            *(_OWORD *)(v30 + 64) = 0u;
            *(_OWORD *)(v30 + 80) = 0u;
            *(_OWORD *)(v30 + 96) = 0u;
            *(_OWORD *)(v30 + 128) = 0u;
            *(void *)(v30 + 144) = 0;
            *(_OWORD *)(v30 + 112) = 0u;
            uint64_t v31 = v30 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v30, inited, (uint64_t)v10);
            outlined init with copy of CVarArg?(v31, (uint64_t)v47);
            swift_bridgeObjectRelease();
            if (!v48) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v47);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

uint64_t type metadata accessor for ModifierBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

{
  return __swift_instantiateGenericMetadata();
}

uint64_t DynamicViewList.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v101 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v91 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v87 = (uint64_t)&v79[-v7];
  uint64_t v8 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = &v79[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v92 = v12;
  uint64_t v95 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v95 - 8);
  MEMORY[0x270FA5388](v95);
  uint64_t v86 = &v79[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v15);
  long long v85 = &v79[-v16];
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = &v79[-v18];
  MEMORY[0x270FA5388](v20);
  unint64_t v22 = &v79[-v21];
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(v11, Value, v5);
  uint64_t v24 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  uint64_t v94 = v4;
  uint64_t v25 = v24(v22, v2, v5, v4);
  uint64_t v26 = v5;
  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v11, v5);
  uint64_t v93 = a1;
  uint64_t v27 = *(int *)(a1 + 52);
  uint64_t v28 = v95;
  uint64_t v29 = v2;
  uint64_t v89 = v27;
  uint64_t v30 = *(void *)(v2 + v27);
  uint64_t v90 = v13;
  uint64_t v88 = v19;
  if (v30)
  {
    uint64_t v31 = v13;
    uint64_t v32 = v91;
    uint64_t v33 = v92;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v91 + 16))(v19, v30 + *(void *)(*(void *)v30 + 136), v92);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v32 + 56))(v19, 0, 1, v33);
    swift_retain();
    uint64_t v84 = v25;
    char v34 = DynamicViewList.Item.matches(type:id:)(v25, (uint64_t)v22);
    uint64_t v35 = v26;
    if (v34)
    {
      swift_beginAccess();
      if (*(_DWORD *)(v30 + 24))
      {
        if (AGSubgraphIsValid())
        {
          swift_release();
          uint64_t v36 = v31;
          goto LABEL_33;
        }
      }
    }
    uint64_t v37 = (_DWORD *)(v30 + 24);
    swift_beginAccess();
    int v38 = *(_DWORD *)(v30 + 24);
    if (v38)
    {
      uint64_t v39 = *(void **)(v30 + 16);
      uint64_t v40 = v29;
      if (AGSubgraphIsValid())
      {
        id v41 = v39;
        AGSubgraphApply();

        AGSubgraphRemoveChild();
        int v38 = *(_DWORD *)(v30 + 24);
      }
      *uint64_t v37 = v38 - 1;
      uint64_t v42 = v87;
      uint64_t v43 = v35;
      if (v38 == 1)
      {
        DynamicViewList.Item.invalidate()();
        IsValidouble d = AGSubgraphIsValid();
        if (IsValid)
        {
          MEMORY[0x270FA5388](IsValid);
          v79[-16] = 0;
          AGSubgraphApply();
          AGSubgraphInvalidate();
        }
      }
    }
    else
    {
      *uint64_t v37 = -1;
      uint64_t v40 = v29;
      uint64_t v42 = v87;
      uint64_t v43 = v26;
    }
    swift_release();
    uint64_t v45 = v89;
    swift_release();
    *(void *)(v40 + v45) = 0;
    uint64_t v25 = v84;
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v91 + 56))(v19, 1, 1, v92);
    uint64_t v40 = v2;
    uint64_t v43 = v26;
    uint64_t v42 = v87;
  }
  uint64_t v87 = *(int *)(v93 + 48);
  uint64_t v46 = *(void *)(v40 + v87);
  swift_beginAccess();
  uint64_t v47 = *(void *)(v46 + 16);
  uint64_t v84 = type metadata accessor for DynamicViewList.Item();
  uint64_t v48 = type metadata accessor for Unmanaged();
  uint64_t v49 = swift_bridgeObjectRetain();
  if (!MEMORY[0x24C522EA0](v49, v48)) {
    goto LABEL_25;
  }
  uint64_t v50 = 4;
  while (1)
  {
    uint64_t v51 = v50 - 4;
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (!IsNativeType) {
      break;
    }
    uint64_t v30 = *(void *)(v47 + 8 * v50);
    BOOL v53 = __OFADD__(v51, 1);
    uint64_t v54 = v50 - 3;
    if (v53) {
      goto LABEL_24;
    }
LABEL_19:
    swift_retain();
    if (DynamicViewList.Item.matches(type:id:)(v25, (uint64_t)v22))
    {
      swift_bridgeObjectRelease();
      swift_beginAccess();
      ++*(_DWORD *)(v30 + 24);
      double v70 = *(void **)(v30 + 16);
      AGSubgraphAddChild();
      id v71 = v70;
      AGSubgraphApply();

      *(void *)(v40 + v89) = v30;
      uint64_t v28 = v95;
      uint64_t v36 = v90;
      goto LABEL_33;
    }
    swift_release();
    ++v50;
    if (v54 == MEMORY[0x24C522EA0](v47, v48)) {
      goto LABEL_25;
    }
  }
  uint64_t v30 = _ArrayBuffer._getElementSlowPath(_:)();
  swift_unknownObjectRelease();
  BOOL v53 = __OFADD__(v51, 1);
  uint64_t v54 = v50 - 3;
  if (!v53) {
    goto LABEL_19;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  swift_bridgeObjectRelease();
  if (AGSubgraphIsValid())
  {
    id v55 = (id)AGSubgraphGetGraph();
    uint64_t v56 = v43;
    uint64_t v57 = (void *)AGSubgraphCreate();

    AGSubgraphAddChild();
    AGGraphClearUpdate();
    id v58 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    uint64_t v93 = v56;
    closure #1 in DynamicViewList.updateValue()(v40, v56, v94, v98);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    int v59 = v98[0];
    int v60 = BYTE4(v98[0]);
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    uint64_t v62 = v95;
    uint64_t v63 = v90;
    if (CurrentAttribute != *MEMORY[0x263F288F8])
    {
      int v80 = CurrentAttribute;
      int v81 = v59;
      int v82 = v60;
      uint64_t v64 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v90 + 16);
      double v65 = v85;
      unsigned int v83 = v22;
      v64(v85, v22, v95);
      uint64_t v66 = v91;
      uint64_t v67 = v92;
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v91 + 48))(v65, 1, v92) == 1)
      {
        (*(void (**)(void))(v94 + 48))();
        (*(void (**)(unsigned char *, uint64_t))(v63 + 8))(v65, v62);
      }
      else
      {
        (*(void (**)(uint64_t, unsigned char *, uint64_t))(v66 + 32))(v42, v65, v67);
      }
      uint64_t v72 = *(void *)(v40 + v87);
      swift_allocObject();
      swift_retain();
      uint64_t v30 = (uint64_t)specialized DynamicViewList.Item.init(type:owner:list:id:isUnary:subgraph:allItems:)(v25, v80, v81, v42, v82, v57, v72);

      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v42, v67);
      uint64_t v73 = v89;
      swift_release();
      *(void *)(v40 + v73) = v30;
      uint64_t v28 = v95;
      uint64_t v36 = v90;
      unint64_t v22 = v83;
LABEL_33:
      DynamicViewList.Item.list.getter((uint64_t)v97);
      uint64_t v74 = (uint64_t)v86;
      unsigned int v75 = v88;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v36 + 16))(v86, v88, v28);
      if (AGGraphGetCurrentAttribute() != *MEMORY[0x263F288F8])
      {
        type metadata accessor for ViewList();
        swift_retain_n();
        TransactionID.init<A>(context:)(&v96);
        uint64_t v99 = (ValueMetadata *)type metadata accessor for DynamicViewList.WrappedList();
        double v100 = &protocol witness table for DynamicViewList<A>.WrappedList;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v98);
        DynamicViewList.WrappedList.init(base:item:lastID:lastTransaction:)(v97, v30, v74, &v96, (uint64_t)boxed_opaque_existential_1);
        AGGraphSetOutputValue();
        swift_release();
        uint64_t v77 = *(void (**)(unsigned char *, uint64_t))(v36 + 8);
        v77(v75, v28);
        v77(v22, v28);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
      }
      __break(1u);
    }
    __break(1u);
  }
  uint64_t v99 = &type metadata for EmptyViewList;
  double v100 = &protocol witness table for EmptyViewList;
  type metadata accessor for ViewList();
  AGGraphSetOutputValue();
  double v68 = *(void (**)(unsigned char *, uint64_t))(v90 + 8);
  uint64_t v69 = v95;
  v68(v88, v95);
  v68(v22, v69);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
}

uint64_t type metadata accessor for DynamicViewList.WrappedList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for DynamicViewList.Item()
{
  return __swift_instantiateGenericMetadata();
}

void TransactionID.init<A>(context:)(uint64_t *a1@<X8>)
{
  id v2 = (id)AGGraphGetAttributeGraph();
  uint64_t Counter = AGGraphGetCounter();

  *a1 = Counter;
}

uint64_t DynamicViewList.Item.list.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ViewList();
  uint64_t Value = AGGraphGetValue();
  return outlined init with copy of AnyTrackedValue(Value, a1);
}

unint64_t type metadata accessor for ViewList()
{
  unint64_t result = lazy cache variable for type metadata for ViewList;
  if (!lazy cache variable for type metadata for ViewList)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  }
  return result;
}

uint64_t DynamicViewList.WrappedList.init(base:item:lastID:lastTransaction:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = *a4;
  outlined init with take of ScrollStateRequest(a1, a5);
  *(void *)(a5 + 40) = a2;
  uint64_t v9 = type metadata accessor for DynamicViewList.WrappedList();
  uint64_t v10 = a5 + *(int *)(v9 + 40);
  swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10, a3, v11);
  *(void *)(a5 + *(int *)(v9 + 44)) = v8;
  return result;
}

uint64_t DynamicLayoutComputer.updateValue()(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v8 = *v1;
  int v9 = v2[8];
  uint64_t Value = AGGraphGetValue();
  uint64_t v20 = v2;
  uint64_t v21 = v5;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  *(void *)&long long v12 = *(void *)(v2 + 1);
  long long v22 = *((_OWORD *)v2 + 1);
  long long v23 = v12;
  uint64_t v19 = v7;
  v11(v7, Value, v4);
  LODWORD(v24) = v8;
  *(void *)((char *)&v24 + 4) = v23;
  long long v25 = v22;
  LODWORD(v26) = v9;
  uint64_t result = DynamicLayoutComputer.containerInfo.getter((uint64_t)v29);
  uint64_t v14 = *(void *)&v29[0];
  if (*(void *)&v29[0])
  {
    long long v24 = v29[0];
    long long v25 = v29[1];
    uint64_t v26 = v30;
    char v27 = v31 & 1;
    int v28 = v32;
    uint64_t v15 = specialized DynamicLayoutMap.attributes(info:)((uint64_t *)&v24);
    swift_bridgeObjectRetain();
    outlined consume of DynamicContainer.Info?(v14);
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v17 = (uint64_t)v19;
    StatefulRule<>.updateLayoutComputer<A>(layout:environment:attributes:)((uint64_t)v19, v23, v15, a1, v4, WitnessTable, *(void *)(a1 + 24));
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v17, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t StatefulRule<>.updateLayoutComputer<A>(layout:environment:attributes:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    v17[0] = result;
    v17[1] = result;
    v17[2] = a2;
    int v15 = result;
    uint64_t v16 = a3;
    return Layout.updateLayoutComputer<A>(rule:layoutContext:children:)(v7, v17, &v15, a5, a4, a7, a6);
  }
  return result;
}

uint64_t Layout.updateLayoutComputer<A>(rule:layoutContext:children:)(uint64_t a1, int *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v9 = *a2;
  int v10 = a2[1];
  int v11 = a2[2];
  int v12 = *a3;
  uint64_t v13 = *((void *)a3 + 1);
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  int v27 = v9;
  int v28 = v10;
  int v29 = v11;
  int v30 = v12;
  uint64_t v31 = v13;
  v16[2] = a4;
  void v16[3] = a5;
  v16[4] = a6;
  v16[5] = a7;
  int v17 = v9;
  int v18 = v10;
  int v19 = v11;
  int v20 = v12;
  uint64_t v21 = v13;
  uint64_t v14 = type metadata accessor for ViewLayoutEngine();
  return StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for closure #1 in Layout.updateLayoutComputer<A>(rule:layoutContext:children:), (uint64_t)v22, (void (*)(void))partial apply for closure #2 in Layout.updateLayoutComputer<A>(rule:layoutContext:children:), (uint64_t)v16, a5, v14, a7, (uint64_t)&protocol witness table for ViewLayoutEngine<A>);
}

uint64_t StatefulRule<>.update<A>(modify:create:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Outputuint64_t Value = AGGraphGetOutputValue();
  if (OutputValue)
  {
    uint64_t v19 = *(void *)(OutputValue + 8);
    uint64_t v23 = *(uint64_t **)OutputValue;
    int v18 = v23;
    uint64_t v24 = v19;
    MEMORY[0x270FA5388](OutputValue);
    v22[-6] = a5;
    v22[-5] = a6;
    v22[-4] = a7;
    v22[-3] = a8;
    v22[-2] = a1;
    v22[-1] = a2;
    uint64_t v20 = swift_retain_n();
    LayoutComputer.withMutableEngine<A, B>(type:do:)(v20, (uint64_t)partial apply for closure #1 in StatefulRule<>.update<A>(modify:create:), (uint64_t)&v22[-8], a6);
    swift_release();
    uint64_t v23 = v18;
    uint64_t v24 = v19 + 1;
  }
  else
  {
    a3();
    LayoutComputer.init<A>(_:)((uint64_t)v16, a6, &v23);
    v22[1] = v23;
    v22[2] = v24;
  }
  AGGraphSetOutputValue();
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for Gradient.Stop(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t specialized DynamicLayoutMap.attributes(info:)(uint64_t *a1)
{
  id v2 = (_DWORD *)v1;
  int v3 = *((_DWORD *)a1 + 11);
  if (*(_DWORD *)(v1 + 16) == v3) {
    return *((void *)v2 + 1);
  }
  unint64_t v4 = *a1;
  unint64_t v5 = a1[3];
  unint64_t v6 = a1[4];
  char v49 = *((unsigned char *)a1 + 40);
  uint64_t v7 = (void *)(v1 + 8);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  int v9 = (void *)*v7;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, v9[2]);
  }
  else
  {
    *uint64_t v7 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, v9[3] >> 1);
    swift_bridgeObjectRelease();
  }
  uint64_t v48 = v2;
  int v47 = v3;
  if (v4 >> 62) {
    goto LABEL_83;
  }
  uint64_t v10 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v11 = v10 - v6 - v5;
    unint64_t v12 = v11 - 1;
    if (v11 < 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v13 = v10 - v6 - v5;
      if ((v11 & 0x8000000000000000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_68;
    }
    if (v49)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v13 = v10 - v6 - v5;
LABEL_12:
      uint64_t v14 = 0;
      unint64_t v6 = v4 & 0xC000000000000001;
      unint64_t v5 = v4 + 32;
      uint64_t v15 = (const float *)MEMORY[0x263F288F8];
      float32x2_t v16 = vld1_dup_f32(v15);
      while (v14 != v13)
      {
        unint64_t v17 = v14;
        if ((v49 & 1) == 0)
        {
          if (v11 < 0) {
            goto LABEL_81;
          }
          if (!v11) {
            goto LABEL_86;
          }
          unint64_t v17 = 0;
          if (v6)
          {
            while (v11 != v17)
            {
              int v23 = *(_DWORD *)(MEMORY[0x24C523D60](v17, v4) + 76);
              swift_unknownObjectRelease();
              int v24 = *(_DWORD *)(MEMORY[0x24C523D60](v17, v4) + 28);
              swift_unknownObjectRelease();
              if (__OFADD__(v23, v24)) {
                goto LABEL_72;
              }
              if (v14 < v23 + v24) {
                goto LABEL_15;
              }
              if (v11 == ++v17) {
                goto LABEL_86;
              }
            }
            goto LABEL_71;
          }
          while (v11 != v17)
          {
            if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) == v17) {
              goto LABEL_74;
            }
            uint64_t v42 = *(void *)(v5 + 8 * v17);
            int v43 = *(_DWORD *)(v42 + 76);
            LODWORD(v42) = *(_DWORD *)(v42 + 28);
            BOOL v20 = __OFADD__(v43, v42);
            int v44 = v43 + v42;
            if (v20) {
              goto LABEL_75;
            }
            if (v14 < v44) {
              goto LABEL_15;
            }
            if (v11 == ++v17) {
              goto LABEL_86;
            }
          }
          goto LABEL_73;
        }
LABEL_15:
        if (v6)
        {
          uint64_t v18 = MEMORY[0x24C523D60](v17, v4);
        }
        else
        {
          if (v17 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_77;
          }
          uint64_t v18 = swift_retain();
        }
        uint64_t v19 = *(int *)(v18 + 76);
        swift_release();
        BOOL v20 = __OFSUB__(v14, v19);
        uint64_t v21 = v14 - v19;
        if (v20) {
          goto LABEL_78;
        }
        if (v6) {
          uint64_t v22 = MEMORY[0x24C523D60](v17, v4);
        }
        else {
          uint64_t v22 = swift_retain();
        }
        unsigned int v25 = *(_DWORD *)(v22 + 24);
        swift_release();
        if (v21 < (uint64_t)0xFFFFFFFF80000000) {
          goto LABEL_79;
        }
        if (v21 > 0x7FFFFFFF) {
          goto LABEL_80;
        }
        unint64_t v26 = *(void *)(*(void *)v48 + 16);
        float32x2_t v27 = v16;
        if (v26)
        {
          unint64_t v28 = 0;
          uint64_t v29 = *(void *)v48 + 32;
          unint64_t v30 = *(void *)(*(void *)v48 + 16);
          while (1)
          {
            uint64_t v31 = v30 >> 1;
            unint64_t v32 = v28 + (v30 >> 1);
            if (__OFADD__(v28, v30 >> 1)) {
              goto LABEL_69;
            }
            if (v32 >= v26) {
              goto LABEL_70;
            }
            uint64_t v33 = (unsigned int *)(v29 + 16 * v32);
            unsigned int v34 = *v33;
            if (*v33 < v25 || ((int v35 = v33[1], v34 == v25) ? (v36 = v35 < (int)v21) : (v36 = 0), v36))
            {
              unint64_t v28 = v32 + 1;
              uint64_t v31 = v30 + ~v31;
            }
            unint64_t v30 = v31;
            if (v31 <= 0)
            {
              float32x2_t v27 = v16;
              if (v28 == v26) {
                break;
              }
              if (v28 < v26)
              {
                uint64_t v37 = (_DWORD *)(v29 + 16 * v28);
                float32x2_t v27 = v16;
                if (*v37 == v25)
                {
                  float32x2_t v27 = v16;
                  if (v37[1] == v21) {
                    float32x2_t v27 = *(float32x2_t *)(v29 + 16 * v28 + 8);
                  }
                }
                break;
              }
              goto LABEL_82;
            }
          }
        }
        int v38 = (void *)*v7;
        char v39 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v7 = v38;
        if ((v39 & 1) == 0)
        {
          int v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
          *uint64_t v7 = v38;
        }
        unint64_t v41 = v38[2];
        unint64_t v40 = v38[3];
        if (v41 >= v40 >> 1) {
          int v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v41 + 1, 1, v38);
        }
        ++v14;
        v38[2] = v41 + 1;
        v38[v41 + 4] = v27;
        *uint64_t v7 = v38;
        if (v14 == v13) {
          goto LABEL_62;
        }
      }
      goto LABEL_76;
    }
    if ((v4 & 0xC000000000000001) == 0) {
      break;
    }
    uint64_t v46 = MEMORY[0x24C523D60](v12, v4);
LABEL_67:
    unint64_t v5 = *(unsigned int *)(v46 + 76);
    unint64_t v6 = *(unsigned int *)(v46 + 28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v13 = (int)v6 + (int)v5;
    if ((v13 & 0x8000000000000000) == 0)
    {
LABEL_11:
      if (!v13)
      {
LABEL_62:
        id v2 = v48;
        v48[4] = v47;
        return *((void *)v2 + 1);
      }
      goto LABEL_12;
    }
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v12 < *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v46 = *(void *)(v4 + 8 * v12 + 32);
    swift_retain();
    goto LABEL_67;
  }
  __break(1u);
LABEL_86:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t DynamicLayoutComputer.containerInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = *(unsigned int *)(v1 + 8);
  if (result == *MEMORY[0x263F288F8])
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v5 = *(void *)(Value + 8);
    uint64_t v6 = *(void *)(Value + 32);
    char v7 = *(unsigned char *)(Value + 40);
    int v8 = *(_DWORD *)(Value + 44);
    *(void *)a1 = *(void *)Value;
    *(void *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(Value + 16);
    *(void *)(a1 + 32) = v6;
    *(unsigned char *)(a1 + 40) = v7;
    *(_DWORD *)(a1 + 44) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t StaticBody.updateValue()(void *a1)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v48 = (char *)v42 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v42 - v10;
  type metadata accessor for _ContiguousArrayStorage<(String, AGAttribute)>(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  unint64_t v17 = (char *)v42 - v16;
  Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    unsigned int v43 = CurrentAttribute;
    uint64_t v45 = v6;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  int v47 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v17, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v20 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v17;
  uint64_t v21 = a1[3];
  uint64_t v22 = a1[4];
  uint64_t v23 = a1[5];
  uint64_t v46 = a1[2];
  uint64_t v44 = v22;
  closure #1 in StaticBody.updateValue()(v1, v46, v21, v22, v23);
  *(void *)(StatusReg + 848) = v20;
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v17, (uint64_t)v14);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v14, 1, v3) == 1)
  {
    _sypSgWOhTm_7((uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<(String, AGAttribute)>);
  }
  else
  {
    unsigned int v25 = v11;
    unint64_t v26 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v26(v25, v14, v3);
    float32x2_t v27 = v48;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v48, v25, v3);
    swift_beginAccess();
    unint64_t v28 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v28 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v28 + 2) + 1, 1, (unint64_t)v28);
      static ObservationRegistrar.lastestAccessLists = v28;
    }
    unint64_t v31 = *((void *)v28 + 2);
    unint64_t v30 = *((void *)v28 + 3);
    if (v31 >= v30 >> 1)
    {
      unint64_t v28 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1, (unint64_t)v28);
      static ObservationRegistrar.lastestAccessLists = v28;
    }
    *((void *)v28 + 2) = v31 + 1;
    v26(&v28[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v31], v27, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v25, v3);
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  _sypSgWOhTm_7((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<(String, AGAttribute)>);
  unint64_t v32 = p_cache[338];
  uint64_t v33 = v32[2];
  if (v33)
  {
    int v35 = *(char **)(v4 + 16);
    uint64_t v34 = v4 + 16;
    uint64_t v48 = v35;
    BOOL v36 = (char *)v32 + ((*(unsigned __int8 *)(v34 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 64));
    uint64_t v37 = v43;
    uint64_t v38 = *(void *)(v34 + 56);
    v42[1] = v32;
    swift_bridgeObjectRetain();
    uint64_t v39 = (uint64_t)v45;
    do
    {
      ((void (*)(uint64_t, char *, uint64_t))v48)(v39, v36, v3);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      installObservationSlow<A>(accessList:attribute:)(v39, v37, AssociatedTypeWitness);
      (*(void (**)(uint64_t, uint64_t))(v34 - 8))(v39, v3);
      v36 += v38;
      --v33;
    }
    while (v33);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v47;
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in StaticBody.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v30 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v28 = (uint64_t)&v26 - v11;
  uint64_t v35 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v15 = type metadata accessor for StaticBody();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v26 - v21;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16);
  v23((char *)&v26 - v21, a1, v15, v20);
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v14, v22, a2);
  ((void (*)(char *, uint64_t, uint64_t))v23)(v18, a1, v15);
  uint64_t v24 = v28;
  StaticBody.container.getter(v28);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 24))(v24, 1, a2);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v24, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v14, a2);
}

uint64_t StaticBody.container.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, Value, AssociatedTypeWitness);
}

uint64_t protocol witness for DynamicView.childInfo(metadata:) in conformance <> _ConditionalContent<A, B>(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return _ConditionalContent<>.childInfo(metadata:)(a1, a2, a3, *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t _ConditionalContent<>.childInfo(metadata:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *((void *)a2 + 2);
  uint64_t v9 = *((void *)a2 + 3);
  v14[1] = *(_OWORD *)(a3 + 16);
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  long long v17 = *a2;
  uint64_t v18 = v8;
  uint64_t v19 = v9;
  type metadata accessor for (Any.Type, UniqueID?)();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)partial apply for closure #1 in _ConditionalContent<>.childInfo(metadata:), (uint64_t)v14, a3, MEMORY[0x263F8E628], v10, MEMORY[0x263F8E658], v11);
  uint64_t result = v20;
  char v13 = v22;
  *(void *)a1 = v21;
  *(unsigned char *)(a1 + 8) = v13;
  return result;
}

void type metadata accessor for (Any.Type, UniqueID?)()
{
  if (!lazy cache variable for type metadata for (Any.Type, UniqueID?))
  {
    type metadata accessor for Any.Type();
    type metadata accessor for UniqueID?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Any.Type, UniqueID?));
    }
  }
}

uint64_t UnwrapConditional.updateValue()(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, Value, v3);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = v3;
  long long v14 = *(_OWORD *)(a1 + 32);
  uint64_t v15 = v1;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v6, (uint64_t)partial apply for closure #1 in UnwrapConditional.updateValue(), (uint64_t)v11, v3, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v8);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void *specialized DynamicViewList.Item.init(type:owner:list:id:isUnary:subgraph:allItems:)(uint64_t a1, int a2, int a3, uint64_t a4, char a5, void *a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v13 = *v8;
  v8[4] = a1;
  *(_DWORD *)((char *)v8 + *(void *)(v13 + 144)) = a2;
  *(_DWORD *)((char *)v8 + *(void *)(*v8 + 152)) = a3;
  long long v14 = (char *)v8 + *(void *)(*v8 + 136);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v14, a4, AssociatedTypeWitness);
  *((unsigned char *)v8 + *(void *)(*v8 + 160)) = a5;
  *(void *)((char *)v8 + *(void *)(*v8 + 168)) = a7;
  *((_DWORD *)v8 + 6) = 1;
  v8[2] = a6;
  swift_beginAccess();
  type metadata accessor for Unmanaged();
  type metadata accessor for Array();
  swift_retain();
  id v16 = a6;
  swift_retain();
  Array.append(_:)();
  swift_endAccess();
  swift_release();
  return v8;
}

uint64_t HostPreferencesTransform.updateValue()(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unsigned int v2 = *(_DWORD *)(v1 + 4);
  unsigned int v3 = *(_DWORD *)(v1 + 8);
  int v4 = *(unsigned __int8 *)(v1 + 12);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  if (*MEMORY[0x263F288F8] == v3)
  {
    int v8 = *(unsigned __int8 *)(v1 + 13) ^ 1;
    char v10 = 1;
    uint64_t v9 = MEMORY[0x263F8EE78];
  }
  else
  {
    AGGraphGetValue();
    int v8 = v7 & 1;
    uint64_t v9 = swift_bridgeObjectRetain();
    char v10 = 0;
  }
  unint64_t v23 = v9;
  char v24 = v8;
  *(unsigned char *)(v1 + 13) = v10;
  uint64_t Value = AGGraphGetValue();
  BOOL v12 = v8 != 0;
  if ((v13 & 1) == 0)
  {
    if (v4) {
      goto LABEL_17;
    }
LABEL_13:
    if (!v8) {
      goto LABEL_21;
    }
LABEL_22:
    unint64_t v22 = v23;
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  uint64_t v14 = *(void *)(*(void *)Value + 16);
  if (!v14)
  {
LABEL_11:
    if (v4)
    {
      *(unsigned char *)(v1 + 12) = 0;
      char v24 = 1;
      goto LABEL_22;
    }
    goto LABEL_13;
  }
  uint64_t v15 = (void *)(*(void *)Value + 32);
  while (*v15 != v5)
  {
    v15 += 2;
    if (!--v14) {
      goto LABEL_11;
    }
  }
  if ((v4 & 1) == 0)
  {
    BOOL v12 = 1;
    *(unsigned char *)(v1 + 12) = 1;
    char v24 = 1;
  }
LABEL_17:
  unint64_t v22 = __PAIR64__(v3, v2);
  uint64_t v16 = AGGraphAnyInputsChanged();
  if (v16)
  {
    ++*(_DWORD *)(v1 + 16);
    char v24 = 1;
  }
  else if (!v12)
  {
    goto LABEL_21;
  }
  MEMORY[0x270FA5388](v16);
  v21[2] = v5;
  _OWORD v21[3] = v6;
  v21[4] = &v23;
  v21[5] = v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = MEMORY[0x263F8EE60] + 8;
  FunctionTypeMetadatdouble a = swift_getFunctionTypeMetadata();
  Attribute.syncMainIfReferences<A>(do:)((void (*)(void))partial apply for closure #2 in HostPreferencesTransform.updateValue(), (uint64_t)v21, FunctionTypeMetadata, v17, v19);
  if (v24) {
    goto LABEL_22;
  }
LABEL_21:
  if (!AGGraphGetOutputValue()) {
    goto LABEL_22;
  }
  return swift_bridgeObjectRelease();
}

uint64_t DynamicViewList.Item.matches(type:id:)(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v14[-v8];
  uint64_t v10 = *(void *)(v2 + 32);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v6 + 16))(&v14[-v8], a2, v5, v7);
  if (v10 == a1)
  {
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in implicit closure #1 in DynamicViewList.Item.matches(type:id:), v2, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], v11, (uint64_t)&v15);
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
    char v12 = (v15 == 2) | v15;
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t partial apply for closure #2 in Layout.updateLayoutComputer<A>(rule:layoutContext:children:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in Layout.updateLayoutComputer<A>(rule:layoutContext:children:)(*(void *)(v1 + 48), *(void *)(v1 + 56), *(_DWORD *)(v1 + 64), *(_DWORD *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 16), *(void *)(v1 + 32), a1);
}

uint64_t closure #2 in Layout.updateLayoutComputer<A>(rule:layoutContext:children:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  int v13 = a2;
  unint64_t v15 = HIDWORD(a2);
  double v16 = MEMORY[0x270FA5388](a1);
  uint64_t v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v19 + 16))(v18, v16);
  v23[0] = v13;
  v23[1] = v15;
  v23[2] = a3;
  int v21 = a4;
  uint64_t v22 = a5;
  swift_bridgeObjectRetain();
  return ViewLayoutEngine.init(layout:context:children:)((uint64_t)v18, (uint64_t)v23, &v21, a6, a7, a8);
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance StyleBodyAccessor<A, B>(uint64_t a1, int a2, uint64_t *a3)
{
  return StyleBodyAccessor.updateBody(of:changed:)(a1, a2, *v3, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t protocol witness for DynamicView.childInfo(metadata:) in conformance <A> A?(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return Optional<A>.childInfo(metadata:)(a1, a2, a3, *(void *)(a4 - 8));
}

uint64_t Optional<A>.childInfo(metadata:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v8 = *((void *)a2 + 3);
  void v13[2] = *(void *)(a3 + 16);
  v13[3] = a4;
  long long v14 = *a2;
  uint64_t v15 = v7;
  uint64_t v16 = v8;
  type metadata accessor for (Any.Type, UniqueID?)();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4, (uint64_t)partial apply for closure #1 in Optional<A>.childInfo(metadata:), (uint64_t)v13, a3, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v10);
  uint64_t result = v17;
  char v12 = v19;
  *(void *)a1 = v18;
  *(unsigned char *)(a1 + 8) = v12;
  return result;
}

uint64_t HostPreferencesWriter.updateValue()(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for PreferenceValues.Value();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v48 = (uint64_t)&v44 - v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v49 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v51 = (char *)&v44 - v11;
  LODWORD(v50) = *(_DWORD *)v1;
  int v12 = *(unsigned __int8 *)(v1 + 12);
  if (*MEMORY[0x263F288F8] == *(_DWORD *)(v1 + 8))
  {
    char v14 = *(unsigned char *)(v1 + 13) ^ 1;
    char v16 = 1;
    uint64_t v15 = MEMORY[0x263F8EE78];
  }
  else
  {
    AGGraphGetValue();
    char v14 = v13 & 1;
    uint64_t v15 = swift_bridgeObjectRetain();
    char v16 = 0;
  }
  uint64_t v54 = v15;
  char v55 = v14;
  *(unsigned char *)(v1 + 13) = v16;
  uint64_t Value = AGGraphGetValue();
  if ((v18 & 1) == 0)
  {
    if (!v12) {
      goto LABEL_21;
    }
LABEL_15:
    uint64_t v45 = v3;
    uint64_t v46 = v6;
    uint64_t v44 = v5;
    uint64_t v47 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v22 = AGGraphGetValue();
    char v24 = v23;
    uint64_t v50 = v23;
    uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v26 = AssociatedTypeWitness;
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
    uint64_t v28 = v9;
    uint64_t v29 = v51;
    v27(v51, v22, v26);
    char v30 = v24 & 1;
    v29[v47] = v24 & 1;
    uint64_t v31 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v32 = v28;
    uint64_t v33 = v29;
    uint64_t v34 = (uint64_t)v28;
    uint64_t v35 = (void (*)(char *, char *, uint64_t))v27;
    uint64_t v36 = v26;
    v35(v32, v33, v26);
    *(unsigned char *)(v34 + v31) = v30;
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v34, v26);
    if (v50)
    {
      ++*(_DWORD *)(v1 + 16);
      char v55 = 1;
      uint64_t v37 = v46;
      uint64_t v38 = v49;
      uint64_t v39 = v51;
    }
    else
    {
      uint64_t v37 = v46;
      uint64_t v38 = v49;
      uint64_t v39 = v51;
      if (v55 != 1) {
        goto LABEL_20;
      }
    }
    int v40 = merge32(_:_:)(*(unsigned int *)(v1 + 20), *(_DWORD *)(v1 + 16));
    v35((char *)v34, v39, v36);
    LODWORD(v53) = v40;
    uint64_t v41 = v48;
    PreferenceValues.Value.init(value:seed:)(v34, (int *)&v53, v36, v48);
    specialized PreferenceValues.subscript.setter(v41, v2, v2, v45);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v41, v44);
LABEL_20:
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, TupleTypeMetadata2);
    goto LABEL_21;
  }
  uint64_t v19 = *(void *)(*(void *)Value + 16);
  if (v19)
  {
    uint64_t v20 = (void *)(*(void *)Value + 32);
    while (*v20 != v2)
    {
      v20 += 2;
      if (!--v19) {
        goto LABEL_11;
      }
    }
    if ((v12 & 1) == 0)
    {
      *(unsigned char *)(v1 + 12) = 1;
      char v55 = 1;
    }
    goto LABEL_15;
  }
LABEL_11:
  if (v12)
  {
    *(unsigned char *)(v1 + 12) = 0;
    uint64_t v21 = v54;
LABEL_24:
    uint64_t v53 = v21;
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
LABEL_21:
  if (v55 == 1)
  {
    uint64_t v21 = v54;
    goto LABEL_24;
  }
  Outputuint64_t Value = AGGraphGetOutputValue();
  uint64_t v21 = v54;
  if (!OutputValue) {
    goto LABEL_24;
  }
  return swift_bridgeObjectRelease();
}

uint64_t StaticLayoutComputer.updateValue()(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v7 = *(_DWORD *)(v1 + 4);
  uint64_t v8 = *(void *)(v1 + 8);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, Value, v3);
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  StatefulRule<>.updateLayoutComputer<A>(layout:environment:attributes:)((uint64_t)v6, v7, v8, a1, v3, WitnessTable, v9);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t partial apply for closure #2 in StatefulRule<>.update<A>(to:)@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 24) - 8) + 16))(a1, *(void *)(v1 + 48));
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance EnvironmentalBodyAccessor<A>(uint64_t a1, char a2, uint64_t a3)
{
  return EnvironmentalBodyAccessor.updateBody(of:changed:)(a1, a2, *v3, *((void *)v3 + 1), *((unsigned char *)v3 + 16), *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t EnvironmentalBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v59 = a1;
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v12 = type metadata accessor for OSSignpostID();
  uint64_t v58 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  char v14 = (char *)v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v62 = (char *)v50 - v16;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v61 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v60 = (char *)v50 - v18;
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v22 = *Value;
  uint64_t result = Value[1];
  if (a2)
  {
    uint64_t v57 = result;
    swift_retain();
    swift_retain();
    goto LABEL_3;
  }
  if ((v20 & 1) == 0) {
    return result;
  }
  uint64_t v57 = result;
  swift_retain();
  swift_retain();
  if ((a5 & 1) == 0
    || (uint64_t v24 = swift_retain(), v25 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v24),
                              swift_release(),
                              (v25 & 1) != 0))
  {
LABEL_3:
    PropertyList.Tracker.reset()();
    uint64_t v56 = AssociatedTypeWitness;
    if (v22) {
      uint64_t v23 = *(void *)(v22 + 64);
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v26 = *(void *)(a4 + 16);
    swift_retain_n();
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v26 + 16));
    *(void *)(v26 + 24) = v23;
    os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 16));
    swift_release();
    swift_release();
    int v27 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled()) {
      goto LABEL_25;
    }
    int v52 = v27;
    uint64_t v53 = v22;
    uint64_t v55 = a7;
    static OSSignpostID.exclusive.getter();
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v29 = AGTypeID.description.getter();
    uint64_t v31 = v30;
    uint64_t v32 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v33 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v34 = a6;
    unint64_t v35 = v33;
    *(void *)(inited + 32) = v29;
    *(void *)(inited + 64) = v33;
    *(void *)(inited + 40) = v31;
    uint64_t v54 = v34;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    uint64_t v36 = inited + 72;
    *(void *)(inited + 96) = v32;
    *(void *)(inited + 104) = v35;
    *(void *)(inited + 80) = v37;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v38 = v58 + 16;
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v14, v62, v12);
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, MEMORY[0x263F8E0F8]);
    uint64_t v39 = swift_initStackObject();
    long long v63 = xmmword_2461BE2B0;
    *(_OWORD *)(v39 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v40 = v39;
      outlined init with copy of AnyTrackedValue(inited + 32, v39 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v50[1] = inited;
        uint64_t v51 = a4;
        uint64_t inited = v52 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(v36, v40 + 72);
        *(_OWORD *)(v40 + 128) = 0u;
        *(void *)(v40 + 144) = 0;
        *(_OWORD *)(v40 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v40, inited, (uint64_t)v14);
        outlined init with copy of CVarArg?(v40 + 112, (uint64_t)v64);
        swift_bridgeObjectRelease();
        if (!v65)
        {
LABEL_24:
          outlined destroy of CVarArg?((uint64_t)v64);
          swift_bridgeObjectRelease();
          uint64_t v45 = *(void (**)(char *, uint64_t))(v58 + 8);
          v45(v62, v12);
          v45(v14, v12);
          a4 = v51;
          a6 = v54;
          a7 = v55;
          uint64_t v22 = v53;
LABEL_25:
          AGGraphClearUpdate();
          v64[0] = v22;
          v64[1] = a4;
          uint64_t v46 = (uint64_t)v60;
          (*(void (**)(void *, uint64_t, uint64_t))(a7 + 32))(v64, a6, a7);
          AGGraphSetUpdate();
          uint64_t v47 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
          MEMORY[0x270FA5388](v47);
          v50[-2] = type metadata accessor for EnvironmentalBodyAccessor();
          v50[-1] = swift_getWitnessTable();
          uint64_t v48 = v56;
          _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v46, (uint64_t)partial apply for closure #2 in BodyAccessor.setBody(_:), (uint64_t)&v50[-4], v56, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v49);
          (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v46, v48);
          swift_release();
          swift_release_n();
          return swift_release();
        }
        a4 = v38 + 8;
        outlined destroy of CVarArg?((uint64_t)v64);
        if (one-time initialization token for continuation == -1)
        {
LABEL_19:
          uint64_t v41 = __swift_project_value_buffer(v12, (uint64_t)static OSSignpostID.continuation);
          uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))a4;
          while (1)
          {
            v42(v14, v41, v12);
            uint64_t v43 = swift_initStackObject();
            *(_OWORD *)(v43 + 16) = v63;
            *(_OWORD *)(v43 + 32) = 0u;
            *(_OWORD *)(v43 + 48) = 0u;
            *(_OWORD *)(v43 + 64) = 0u;
            *(_OWORD *)(v43 + 80) = 0u;
            *(_OWORD *)(v43 + 96) = 0u;
            *(_OWORD *)(v43 + 128) = 0u;
            *(void *)(v43 + 144) = 0;
            *(_OWORD *)(v43 + 112) = 0u;
            uint64_t v44 = v43 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v43, inited, (uint64_t)v14);
            outlined init with copy of CVarArg?(v44, (uint64_t)v64);
            swift_bridgeObjectRelease();
            if (!v65) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v64);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v41 = __swift_project_value_buffer(v12, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_24;
        }
LABEL_29:
        swift_once();
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_29;
  }
  swift_release();

  return swift_release();
}

Swift::Void __swiftcall ValueTransactionSeed.updateValue()()
{
  uint64_t v2 = v0;
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int v7 = (char *)&v21 - v6;
  uint64_t v8 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  char v14 = (char *)&v21 - v13;
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v14, Value, v3);
  uint64_t v16 = (char *)(v1 + *(int *)(v2 + 40));
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v16, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v3) == 1)
  {
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v7, v4);
    int v25 = -1;
    AGGraphSetOutputValue();
    v17(v16, v4);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v14, v3);
  }
  else
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    uint64_t v24 = v1;
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v18(v11, v7, v3);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t v19 = *(void (**)(char *, uint64_t))(v8 + 8);
      v19(v11, v3);
      v19(v14, v3);
      return;
    }
    AGGraphClearUpdate();
    int v20 = *(_DWORD *)AGGraphGetValue();
    AGGraphSetUpdate();
    int v25 = v20;
    AGGraphSetOutputValue();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v3);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v22);
    v18(v16, v14, v3);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v16, 0, 1, v3);
}

uint64_t PreferenceBinder.updateValue()(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v109 = *(void *)(a1 + 24);
  uint64_t v112 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v106 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  unsigned int v115 = (char *)v103 - v6;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v8);
  char v105 = (char *)v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  double v124 = (char *)v103 - v11;
  MEMORY[0x270FA5388](v12);
  CGFloat v123 = (char *)v103 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v103 - v15;
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v18);
  unsigned __int8 v108 = (char *)v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  unsigned __int8 v104 = (char *)v103 - v21;
  MEMORY[0x270FA5388](v22);
  CGFloat v125 = (char *)v103 - v23;
  MEMORY[0x270FA5388](v24);
  double v126 = (char *)v103 - v25;
  uint64_t v107 = v26;
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)v103 - v28;
  int v30 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v30 != *(_DWORD *)(v1 + 28))
  {
    *(_DWORD *)(v1 + 28) = v30;
    *(void *)(v1 + 16) = 0xFFFFFFFFLL;
    *(unsigned char *)(v1 + 24) = 0;
    uint64_t v31 = v1 + *(int *)(a1 + 60);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v31, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v31, 1, 1, AssociatedTypeWitness);
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v119 = v33;
  uint64_t v34 = v17 + 16;
  unint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v35(v29, Value, AssociatedTypeWitness);
  uint64_t v113 = a1;
  uint64_t v36 = *(int *)(a1 + 60);
  uint64_t v118 = v1;
  uint64_t v37 = (char *)(v1 + v36);
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  int v120 = v37;
  unsigned int v110 = v38;
  ((void (*)(char *))v38)(v16);
  uint64_t v128 = v17;
  unsigned int v111 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v39 = v111(v16, 1, AssociatedTypeWitness);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v121 = v5;
  uint64_t v122 = v7 + 8;
  uint64_t v117 = v40;
  v40(v16, v5);
  uint64_t v127 = AssociatedTypeWitness;
  CGFloat v129 = v29;
  if (v39 == 1)
  {
    uint64_t v41 = v34;
    int v116 = (void (*)(char *, char *, uint64_t))v35;
    if (one-time initialization token for v6_1 != -1) {
      swift_once();
    }
    unsigned int v42 = static Semantics.v6_1;
    uint64_t v43 = v126;
    uint64_t v44 = v127;
    uint64_t v45 = v124;
    uint64_t v46 = v125;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      char v47 = dyld_program_sdk_at_least();
      uint64_t v48 = v116;
      v116(v43, v129, v44);
      uint64_t v49 = v123;
      if (v47) {
        goto LABEL_19;
      }
    }
    else
    {
      unsigned int v68 = static Semantics.forced;
      uint64_t v48 = v116;
      v116(v43, v129, v44);
      BOOL v69 = v68 >= v42;
      uint64_t v49 = v123;
      if (v69)
      {
LABEL_19:
        uint64_t v70 = v128;
        uint64_t v51 = *(char **)(v128 + 8);
        ((void (*)(char *, uint64_t))v51)(v43, v44);
        int v52 = v129;
        uint64_t v71 = v44;
        long long v63 = v117;
        uint64_t v67 = v118;
        goto LABEL_29;
      }
    }
  }
  else
  {
    uint64_t v50 = v126;
    v35(v126, (uint64_t)v29, AssociatedTypeWitness);
    uint64_t v48 = (void (*)(char *, char *, uint64_t))v35;
    uint64_t v41 = v34;
    uint64_t v44 = AssociatedTypeWitness;
    uint64_t v43 = v50;
    uint64_t v49 = v123;
    uint64_t v45 = v124;
    uint64_t v46 = v125;
  }
  v48(v46, v43, v44);
  if ((v119 & 1) == 0)
  {
    uint64_t v51 = *(char **)(v128 + 8);
    ((void (*)(char *, uint64_t))v51)(v46, v44);
    ((void (*)(char *, uint64_t))v51)(v43, v44);
    int v52 = v129;
    return ((uint64_t (*)(char *, uint64_t))v51)(v52, v44);
  }
  uint64_t v53 = v121;
  uint64_t v54 = v41;
  uint64_t v55 = v110;
  v110(v49, v120, v121);
  int v116 = v48;
  v48(v45, v46, v44);
  uint64_t v56 = v53;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v128 + 56))(v45, 0, 1, v44);
  uint64_t v57 = v49;
  uint64_t v58 = v115;
  uint64_t v59 = &v115[*(int *)(TupleTypeMetadata2 + 48)];
  v55(v115, v57, v56);
  uint64_t v119 = v59;
  v55(v59, v45, v56);
  int v60 = v111;
  if (v111(v58, 1, v44) == 1)
  {
    uint64_t v61 = v117;
    v117(v45, v56);
    uint64_t v62 = v57;
    long long v63 = v61;
    v61(v62, v56);
    uint64_t v64 = *(void (**)(char *, uint64_t))(v128 + 8);
    v64(v125, v44);
    uint64_t v65 = (char *)v64;
    v64(v126, v44);
    int v66 = v60(v119, 1, v44);
    int v52 = v129;
    uint64_t v67 = v118;
    if (v66 == 1)
    {
      v63(v115, v56);
      uint64_t v51 = v65;
LABEL_25:
      uint64_t v44 = v127;
      return ((uint64_t (*)(char *, uint64_t))v51)(v52, v44);
    }
    uint64_t v51 = v65;
    uint64_t v70 = v128;
    uint64_t v74 = v115;
    goto LABEL_23;
  }
  v103[1] = v54;
  uint64_t v72 = v105;
  v55(v105, v58, v56);
  uint64_t v73 = v119;
  uint64_t v74 = v58;
  if (v60(v119, 1, v44) == 1)
  {
    unsigned int v75 = v72;
    long long v63 = v117;
    v117(v124, v56);
    v63(v123, v56);
    uint64_t v70 = v128;
    uint64_t v51 = *(char **)(v128 + 8);
    ((void (*)(char *, uint64_t))v51)(v125, v44);
    ((void (*)(char *, uint64_t))v51)(v126, v44);
    ((void (*)(char *, uint64_t))v51)(v75, v44);
    int v52 = v129;
    uint64_t v67 = v118;
LABEL_23:
    (*(void (**)(char *, uint64_t))(v106 + 8))(v74, TupleTypeMetadata2);
    uint64_t v48 = v116;
    goto LABEL_28;
  }
  uint64_t v70 = v128;
  BOOL v76 = v104;
  (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v104, v73, v44);
  char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v51 = *(char **)(v70 + 8);
  ((void (*)(char *, uint64_t))v51)(v76, v44);
  uint64_t v78 = v72;
  long long v63 = v117;
  v117(v124, v56);
  v63(v123, v56);
  ((void (*)(char *, uint64_t))v51)(v125, v44);
  ((void (*)(char *, uint64_t))v51)(v126, v44);
  ((void (*)(char *, uint64_t))v51)(v78, v44);
  v63(v74, v56);
  int v52 = v129;
  uint64_t v67 = v118;
  if (v77) {
    goto LABEL_25;
  }
  uint64_t v48 = v116;
LABEL_28:
  uint64_t v71 = v127;
LABEL_29:
  int v80 = v120;
  v63(v120, v121);
  v48(v80, v52, v71);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v80, 0, 1, v71);
  AGGraphClearUpdate();
  int v81 = *(_DWORD *)AGGraphGetValue();
  AGGraphSetUpdate();
  if (*(_DWORD *)(v67 + 16) == v81)
  {
    int v82 = *(_DWORD *)(v67 + 20);
    if (!v82 || (int v83 = v82 - 1, (*(_DWORD *)(v67 + 20) = v83) == 0))
    {
      if ((*(unsigned char *)(v67 + 24) & 1) == 0)
      {
        *(void *)&long long v130 = 0;
        *((void *)&v130 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(44);
        *(void *)&long long v130 = 0;
        *((void *)&v130 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(19);
        swift_bridgeObjectRelease();
        *(void *)&long long v130 = 0xD000000000000011;
        *((void *)&v130 + 1) = 0x80000002462241A0;
        v84._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v84);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v85._countAndFlagsBits = 0xD00000000000002ALL;
        v85._object = (void *)0x800000024621E040;
        String.append(_:)(v85);
        specialized static Log.externalWarning(_:)(v130, *((unint64_t *)&v130 + 1));
        swift_bridgeObjectRelease();
        *(unsigned char *)(v67 + 24) = 1;
      }
      return ((uint64_t (*)(char *, uint64_t))v51)(v52, v127);
    }
  }
  else
  {
    *(_DWORD *)(v67 + 16) = v81;
    *(_DWORD *)(v67 + 20) = 2;
  }
  double v126 = v51;
  AGGraphClearUpdate();
  uint64_t v86 = *(void *)(v113 + 32);
  uint64_t v87 = v112;
  uint64_t v88 = v109;
  closure #1 in PreferenceBinder.updateValue()(v112, v109, v86, (uint64_t (*)(void))type metadata accessor for PreferenceBinder, (void (*)(void, void, void, void))type metadata accessor for _PreferenceActionModifier, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.PreferenceKey.Value) -> (), &v130);
  AGGraphSetUpdate();
  uint64_t v89 = swift_allocObject();
  *(void *)(v89 + 16) = v87;
  *(void *)(v89 + 24) = v88;
  *(void *)(v89 + 32) = v86;
  *(_OWORD *)(v89 + 40) = v130;
  uint64_t v90 = v108;
  uint64_t v91 = v52;
  uint64_t v92 = v70;
  uint64_t v93 = v127;
  v48(v108, v91, v127);
  unint64_t v94 = (*(unsigned __int8 *)(v92 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
  uint64_t v95 = (char *)swift_allocObject();
  *((void *)v95 + 2) = v87;
  *((void *)v95 + 3) = v88;
  *((void *)v95 + 4) = v86;
  *((void *)v95 + 5) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.PreferenceKey.Value) -> (@out ());
  *((void *)v95 + 6) = v89;
  (*(void (**)(char *, char *, uint64_t))(v92 + 32))(&v95[v94], v90, v93);
  swift_retain();
  specialized static Update.begin()();
  uint64_t v96 = swift_allocObject();
  *(void *)(v96 + 16) = partial apply for closure #2 in PreferenceBinder.updateValue();
  *(void *)(v96 + 24) = v95;
  uint64_t v97 = one-time initialization token for actions;
  swift_retain();
  if (v97 != -1) {
    swift_once();
  }
  double v98 = static Update.actions;
  swift_bridgeObjectRetain();
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v99 = v129;
  }
  else
  {
    uint64_t v99 = v129;
    double v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v98[2] + 1, 1, v98);
  }
  unint64_t v101 = v98[2];
  unint64_t v100 = v98[3];
  if (v101 >= v100 >> 1) {
    double v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v100 > 1), v101 + 1, 1, v98);
  }
  v98[2] = v101 + 1;
  double v102 = &v98[2 * v101];
  v102[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v102[5] = v96;
  static Update.actions = v98;
  swift_bridgeObjectRelease();
  static Update.end()();
  swift_release();
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v126)(v99, v127);
}

uint64_t protocol witness for DynamicView.childInfo(metadata:) in conformance IDView<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IDView.childInfo(metadata:)(a1, a3);
}

uint64_t IDView.childInfo(metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 52);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, v4, v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return v5;
}

Swift::Void __swiftcall EnvironmentalViewChild.updateValue()()
{
  uint64_t v2 = v0;
  uint64_t v88 = *MEMORY[0x263EF8340];
  Swift::String v84 = (void *)type metadata accessor for OSSignpostID();
  uint64_t v71 = *(v84 - 1);
  MEMORY[0x270FA5388](v84);
  uint64_t v4 = (char *)v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v74 = v2;
  uint64_t v69 = v6;
  uint64_t v70 = (char *)v68 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v73 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v72 = (char *)v68 - v9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v76 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v78 = (char *)v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v68 - v13;
  uint64_t v81 = v15;
  uint64_t v16 = *(int *)(v15 + 48);
  uint64_t v80 = *(void *)(v1 + 8);
  uint64_t Value = AGGraphGetValue();
  char v19 = v18;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v79 = v7;
  *(void *)&long long v83 = v20;
  v20(v14, Value, v7);
  char v21 = v19 & 1;
  int v82 = v14;
  v14[v16] = v19 & 1;
  uint64_t v22 = (uint64_t *)AGGraphGetValue();
  uint64_t v25 = *v22;
  uint64_t v24 = v22[1];
  if (v19)
  {
    swift_retain();
    swift_retain();
    uint64_t v27 = v80;
  }
  else
  {
    char v26 = v23;
    swift_retain();
    swift_retain();
    uint64_t v27 = v80;
    if ((v26 & 1) == 0
      || (uint64_t v28 = swift_retain(),
          char v29 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v28),
          swift_release(),
          (v29 & 1) == 0))
    {
      if (AGGraphGetOutputValue())
      {
        (*(void (**)(char *, uint64_t))(v76 + 8))(v82, v81);
        swift_release();
        swift_release();
        return;
      }
    }
  }
  PropertyList.Tracker.reset()();
  uint64_t v30 = v81;
  v68[1] = v24;
  if (v25) {
    uint64_t v31 = *(void *)(v25 + 64);
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v32 = *(void *)(v27 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v32 + 16));
  *(void *)(v32 + 24) = v31;
  os_unfair_lock_unlock((os_unfair_lock_t)(v32 + 16));
  swift_release();
  swift_release();
  swift_release();
  uint64_t v33 = *(int *)(v30 + 48);
  uint64_t v34 = v78;
  uint64_t v35 = v79;
  ((void (*)(char *, char *, uint64_t))v83)(v78, v82, v79);
  v34[v33] = v21;
  static os_signpost_type_t.event.getter();
  is_enabledouble d = kdebug_is_enabled();
  uint64_t v75 = v25;
  if (is_enabled)
  {
    uint64_t v37 = v70;
    static OSSignpostID.exclusive.getter();
    uint64_t v38 = (void (**)(char *, uint64_t, uint64_t))static os_signpost_type_t.begin.getter();
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v40 = AGTypeID.description.getter();
    uint64_t v42 = v41;
    uint64_t v43 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v44 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v40;
    uint64_t v45 = inited + 32;
    *(void *)(inited + 64) = v44;
    *(void *)(inited + 40) = v42;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v43;
    *(void *)(inited + 104) = v44;
    *(void *)(inited + 80) = v46;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    char v47 = (char *)(v71 + 16);
    (*(void (**)(char *, char *, void *))(v71 + 16))(v4, v37, v84);
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, MEMORY[0x263F8E0F8]);
    uint64_t v48 = swift_initStackObject();
    long long v83 = xmmword_2461BE2B0;
    *(_OWORD *)(v48 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v49 = v48;
      outlined init with copy of AnyTrackedValue(inited + 32, v48 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v68[0] = inited;
        uint64_t v45 = v38 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v49 + 72);
        *(_OWORD *)(v49 + 128) = 0u;
        *(void *)(v49 + 144) = 0;
        *(_OWORD *)(v49 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v45, v49, v45, (uint64_t)v4);
        outlined init with copy of CVarArg?(v49 + 112, (uint64_t)&v85);
        swift_bridgeObjectRelease();
        if (!v87)
        {
LABEL_23:
          outlined destroy of CVarArg?((uint64_t)&v85);
          swift_bridgeObjectRelease();
          uint64_t v58 = *(void (**)(char *, void *))(v71 + 8);
          uint64_t v59 = v4;
          uint64_t v60 = (uint64_t)v84;
          v58(v59, v84);
          uint64_t v85 = v75;
          uint64_t v86 = v80;
          uint64_t v55 = (uint64_t)v72;
          uint64_t v61 = v78;
          (*(void (**)(uint64_t *, uint64_t))(v69 + 40))(&v85, v79);
          static os_signpost_type_t.end.getter();
          uint64_t v62 = v70;
          OSSignpostID.rawValue.getter();
          kdebug_trace();
          long long v63 = v62;
          uint64_t v34 = v61;
          v58(v63, (void *)v60);
          uint64_t v57 = v73;
          uint64_t v56 = v74;
          uint64_t v30 = v81;
          goto LABEL_24;
        }
        uint64_t v38 = (void (**)(char *, uint64_t, uint64_t))(v47 + 8);
        outlined destroy of CVarArg?((uint64_t)&v85);
        char v47 = (char *)&unk_268EF3000;
        if (one-time initialization token for continuation == -1)
        {
LABEL_17:
          uint64_t v50 = (uint64_t)v84;
          uint64_t v51 = __swift_project_value_buffer((uint64_t)v84, (uint64_t)static OSSignpostID.continuation);
          int v52 = *v38;
          while (1)
          {
            v52(v4, v51, v50);
            uint64_t v53 = swift_initStackObject();
            *(_OWORD *)(v53 + 16) = v83;
            *(_OWORD *)(v53 + 32) = 0u;
            *(_OWORD *)(v53 + 48) = 0u;
            *(_OWORD *)(v53 + 64) = 0u;
            *(_OWORD *)(v53 + 80) = 0u;
            *(_OWORD *)(v53 + 96) = 0u;
            *(_OWORD *)(v53 + 128) = 0u;
            *(void *)(v53 + 144) = 0;
            *(_OWORD *)(v53 + 112) = 0u;
            uint64_t v54 = v53 + 112;
            specialized withKDebugValues(_:_:closure:)(v45, v53, v45, (uint64_t)v4);
            outlined init with copy of CVarArg?(v54, (uint64_t)&v85);
            swift_bridgeObjectRelease();
            if (!v87) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v85);
            if (*((void *)v47 + 125) != -1) {
              swift_once();
            }
            uint64_t v50 = (uint64_t)v84;
            uint64_t v51 = __swift_project_value_buffer((uint64_t)v84, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_23;
        }
LABEL_27:
        swift_once();
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v85 = v25;
  uint64_t v86 = v27;
  uint64_t v55 = (uint64_t)v72;
  (*(void (**)(uint64_t *, uint64_t))(v69 + 40))(&v85, v35);
  uint64_t v57 = v73;
  uint64_t v56 = v74;
LABEL_24:
  uint64_t v64 = *(uint64_t (**)(char *, uint64_t))(v76 + 8);
  uint64_t v65 = v64(v34, v30);
  Swift::String v84 = v68;
  MEMORY[0x270FA5388](v65);
  v68[-2] = v56;
  v68[-1] = swift_getWitnessTable();
  uint64_t v66 = AssociatedTypeWitness;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v55, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v68[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v67);
  swift_release();
  swift_release_n();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v55, v66);
  v64(v82, v30);
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ViewRootBodyAccessor<A>(uint64_t a1, char a2, uint64_t a3)
{
  return ViewRootBodyAccessor.updateBody(of:changed:)(a1, a2, *(unsigned int *)v3, v3[1], *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t LeafDisplayList.updateValue()(uint64_t a1)
{
  void (*v12)(double *__return_ptr, uint64_t);
  unint64_t v13;
  unint64_t v14;
  double *v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  long long *v21;
  double v22;
  double v23;
  long long v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  unsigned __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char *v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  char *v48;
  char v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  unsigned __int16 v56;
  uint64_t v57;
  double v58;
  long long v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  __int16 v64;
  char v65;
  int v66;
  double v67;
  double v68;
  long long v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned __int16 v74;
  unsigned __int8 v75;
  int v76;
  uint64_t v77;

  uint64_t v2 = v1;
  char v77 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v55) = *(_DWORD *)v2;
  uint64_t v54 = *(unsigned __int8 *)(v2 + 20);
  LOWORD(v8) = *(_WORD *)(v2 + 22);
  uint64_t Value = AGGraphGetValue();
  char v11 = v10;
  int v52 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, Value, v4);
  uint64_t v12 = *(void (**)(double *__return_ptr, uint64_t))(*(void *)(a1 + 24) + 40);
  uint64_t v53 = v4;
  v12(&v67, v4);
  uint64_t v13 = *(void *)&v67;
  uint64_t v14 = ++static DisplayList.Version.lastValue;
  if (v11)
  {
    if (v14) {
      int v8 = (2 * ((33 * (v14 >> 16)) ^ v14)) | 1;
    }
    else {
      LOWORD(v8) = 0;
    }
    *(_WORD *)(v2 + 22) = v8;
  }
  uint64_t v15 = (double *)AGGraphGetValue();
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  char v18 = (double *)AGGraphGetValue();
  char v19 = v16 - *v18;
  uint64_t v20 = v17 - v18[1];
  type metadata accessor for CGSize(0);
  char v21 = (long long *)AGGraphGetValue();
  uint64_t v67 = v19;
  unsigned int v68 = v20;
  uint64_t v69 = *v21;
  uint64_t v70 = v14;
  uint64_t v71 = v13;
  uint64_t v72 = (unsigned __int16)v8;
  uint64_t v73 = 0;
  uint64_t v75 = 0;
  uint64_t v74 = 0;
  uint64_t v76 = v55;
  LOBYTE(v57) = v54;
  uint64_t v55 = v13;
  outlined copy of DisplayList.Content.Value(v13);
  DisplayList.Item.canonicalize(options:)((char *)&v57);
  uint64_t v22 = v67;
  char v23 = v68;
  uint64_t v24 = v69;
  uint64_t v25 = v70;
  char v26 = v71;
  uint64_t v27 = v72;
  uint64_t v28 = v73;
  char v29 = v74 | (v75 << 16);
  uint64_t v30 = v76;
  uint64_t v31 = v72 >> 62;
  if (v72 >> 62 != 3 || (v29 & 0xFFFFFF) != 0 || v72 != 0xC000000000000000 || v73 | v71)
  {
    type metadata accessor for Attribute<LayoutComputer>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_2461B9DC0;
    *(double *)(v34 + 32) = v22;
    *(double *)(v34 + 40) = v23;
    *(_OWORD *)(v34 + 48) = v24;
    *(void *)(v34 + 64) = v25;
    *(void *)(v34 + 72) = v26;
    *(void *)(v34 + 80) = v27;
    *(void *)(v34 + 88) = v28;
    *(unsigned char *)(v34 + 98) = BYTE2(v29);
    *(_WORD *)(v34 + 96) = v29;
    *(_DWORD *)(v34 + 100) = v30;
    uint64_t v57 = *(void *)&v22;
    uint64_t v58 = v23;
    uint64_t v59 = v24;
    uint64_t v60 = v25;
    uint64_t v61 = v26;
    uint64_t v62 = v27;
    long long v63 = v28;
    uint64_t v65 = BYTE2(v29);
    uint64_t v64 = v29;
    uint64_t v66 = v30;
    outlined copy of DisplayList.Item.Value(v26, v27);
    outlined copy of DisplayList.Item.Value(v26, v27);
    DisplayList.Item.features.getter((__int16 *)&v56);
    uint64_t v33 = v56;
    uint64_t v37 = v31;
    uint64_t v35 = v53;
    uint64_t v36 = v52;
    switch(v37)
    {
      case 1:
        uint64_t v54 = v56;
        switch(BYTE4(v27))
        {
          case 2u:
            swift_bridgeObjectRelease();
            uint64_t v38 = v26;
            break;
          case 7u:
            uint64_t v38 = *(unsigned __int8 *)(v26 + 26);
            outlined copy of DisplayList.Item.Value(v26, v27);
            outlined consume of DisplayList.Effect(v26, v27, 7);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Item.Value(v26, v27);
            break;
          case 0x11u:
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v26 + 120))(&v57);
            outlined copy of DisplayList.Item.Value(v26, v27);
            outlined consume of DisplayList.Effect(v26, v27, 17);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Item.Value(v26, v27);
            uint64_t v38 = v57;
            break;
          default:
            outlined copy of DisplayList.Effect(v26, v27, SBYTE4(v27));
            swift_bridgeObjectRetain();
            outlined consume of DisplayList.Effect(v26, v27, SBYTE4(v27));
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Item.Value(v26, v27);
            uint64_t v38 = 0;
            break;
        }
        uint64_t v32 = v38 | ((v29 & 0xFF0000u) >> 16);
        uint64_t v33 = v54;
        goto LABEL_32;
      case 2:
        int v39 = *(void *)(v26 + 16);
        if (!v39) {
          goto LABEL_21;
        }
        if (v39 == 1)
        {
          uint64_t v40 = 0;
          LOBYTE(v32) = 0;
        }
        else
        {
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          uint64_t v40 = v39 & 0x7FFFFFFFFFFFFFFELL;
          uint64_t v43 = (char *)(v26 + 106);
          unint64_t v44 = v39 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            uint64_t v45 = *(v43 - 40);
            uint64_t v46 = *v43;
            v43 += 80;
            v41 |= v45;
            v42 |= v46;
            v44 -= 2;
          }
          while (v44);
          LOBYTE(v32) = v42 | v41;
          if (v39 == v40)
          {
LABEL_27:
            outlined consume of DisplayList.Item.Value(v26, v27);
            goto LABEL_32;
          }
        }
        char v47 = v39 - v40;
        uint64_t v48 = (char *)(v26 + 40 * v40 + 66);
        do
        {
          uint64_t v49 = *v48;
          v48 += 40;
          LOBYTE(v32) = v49 | v32;
          --v47;
        }
        while (v47);
        goto LABEL_27;
      case 3:
        goto LABEL_21;
      default:
        if (v26 >> 60 == 9)
        {
          LOBYTE(v32) = *(unsigned char *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
          goto LABEL_27;
        }
LABEL_21:
        outlined consume of DisplayList.Item.Value(v26, v27);
        LOBYTE(v32) = 0;
        goto LABEL_32;
    }
  }
  LOBYTE(v32) = 0;
  uint64_t v33 = 0;
  uint64_t v34 = MEMORY[0x263F8EE78];
  uint64_t v35 = v53;
  uint64_t v36 = v52;
LABEL_32:
  uint64_t v57 = v34;
  LOWORD(v58) = v33;
  BYTE2(v58) = v32;
  AGGraphSetOutputValue();
  outlined consume of DisplayList.Content.Value(v55);
  swift_bridgeObjectRelease();
  outlined consume of DisplayList.Item.Value(v26, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v7, v35);
}

uint64_t EnvironmentReader.body(environment:)(long long *a1)
{
  uint64_t v2 = *v1;
  long long v4 = *a1;
  return v2(&v4);
}

void type metadata accessor for UniqueID?()
{
  if (!lazy cache variable for type metadata for UniqueID?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UniqueID?);
    }
  }
}

uint64_t protocol witness for View.body.getter in conformance OffsetShape<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getWitnessTable();

  return Shape.body.getter(a1, a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LayoutDirection()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static Text.makeCommonAttributes(view:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v139[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for ResolvedTextFilter(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v110 = (uint64_t)&v95[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  uint64_t v109 = &v95[-v9];
  uint64_t v10 = *a1;
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v132 = *(_OWORD *)(a2 + 32);
  long long v133 = v11;
  long long v134 = *(_OWORD *)(a2 + 64);
  int v135 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v130 = *(_OWORD *)a2;
  long long v131 = v12;
  long long v136 = v130;
  long long v137 = v12;
  long long v138 = v132;
  uint64_t v13 = v130;
  v139[0] = v130;
  outlined retain of _ViewInputs((uint64_t)&v130);
  outlined retain of _GraphInputs((uint64_t)&v136);
  outlined retain of ViewTransform((uint64_t)v139);
  uint64_t v118 = v13;
  uint64_t v14 = specialized find<A>(_:key:)(v13);
  if (!v14)
  {
    outlined release of ViewTransform((uint64_t)v139);
    outlined release of _GraphInputs((uint64_t)&v136);
    outlined release of _ViewInputs((uint64_t)&v130);
    goto LABEL_6;
  }
  int v15 = *(unsigned __int8 *)(v14 + 72);
  outlined release of ViewTransform((uint64_t)v139);
  outlined release of _GraphInputs((uint64_t)&v136);
  outlined release of _ViewInputs((uint64_t)&v130);
  if (v15 != 1)
  {
LABEL_6:
    int v18 = 0;
    goto LABEL_9;
  }
  outlined retain of _ViewInputs((uint64_t)&v130);
  outlined retain of _GraphInputs((uint64_t)&v136);
  outlined retain of ViewTransform((uint64_t)v139);
  uint64_t v16 = specialized find<A>(_:key:)(v118);
  if (v16) {
    int v17 = *(unsigned __int8 *)(v16 + 72);
  }
  else {
    int v17 = 0;
  }
  outlined release of ViewTransform((uint64_t)v139);
  outlined release of _GraphInputs((uint64_t)&v136);
  outlined release of _ViewInputs((uint64_t)&v130);
  int v18 = v17 ^ 1;
LABEL_9:
  outlined retain of _ViewInputs((uint64_t)&v130);
  outlined retain of _GraphInputs((uint64_t)&v136);
  outlined retain of ViewTransform((uint64_t)v139);
  uint64_t v19 = specialized find<A>(_:key:)(v118);
  int v112 = v18;
  if (v19)
  {
    uint64_t v20 = v6;
    char v21 = (uint64_t *)(v19 + 72);
    uint64_t v22 = (unsigned int *)(v19 + 76);
  }
  else
  {
    char v21 = &static TextRendererInput.defaultValue;
    uint64_t v22 = (unsigned int *)&static TextRendererInput.defaultValue + 1;
    uint64_t v20 = v6;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v23 = *v22;
  uint64_t v24 = *(unsigned int *)v21;
  outlined release of ViewTransform((uint64_t)v139);
  outlined release of _GraphInputs((uint64_t)&v136);
  outlined release of _ViewInputs((uint64_t)&v130);
  outlined retain of _ViewInputs((uint64_t)&v130);
  outlined retain of _GraphInputs((uint64_t)&v136);
  outlined retain of ViewTransform((uint64_t)v139);
  uint64_t v25 = specialized find<A>(_:key:)(v118);
  if (v25) {
    int v26 = *(unsigned __int8 *)(v25 + 72);
  }
  else {
    int v26 = 0;
  }
  outlined release of ViewTransform((uint64_t)v139);
  outlined release of _GraphInputs((uint64_t)&v136);
  outlined release of _ViewInputs((uint64_t)&v130);
  int v27 = ~(32 * v26) & 0x20;
  int Attribute = AGWeakAttributeGetAttribute();
  int v96 = *MEMORY[0x263F288F8];
  if (Attribute == v96)
  {
    uint64_t v29 = *(void *)(v133 + 16);
    if (v29)
    {
      uint64_t v30 = (ValueMetadata **)(v133 + 32);
      while (*v30 != &type metadata for Text.LayoutKey)
      {
        v30 += 2;
        if (!--v29) {
          goto LABEL_24;
        }
      }
      v27 |= 0x40u;
    }
  }
  else
  {
    v27 |= 0x48u;
  }
LABEL_24:
  outlined retain of _ViewInputs((uint64_t)&v130);
  outlined retain of _GraphInputs((uint64_t)&v136);
  outlined retain of ViewTransform((uint64_t)v139);
  uint64_t v31 = specialized find<A>(_:key:)(v118);
  if (v31)
  {
    unsigned __int8 v32 = *(unsigned char *)(v31 + 72);
    outlined release of ViewTransform((uint64_t)v139);
    outlined release of _GraphInputs((uint64_t)&v136);
    outlined release of _ViewInputs((uint64_t)&v130);
    if ((v32 & ((v27 & 0x10) == 0)) != 0) {
      v27 |= 0x10u;
    }
    int v111 = v27;
  }
  else
  {
    int v111 = v27;
    outlined release of ViewTransform((uint64_t)v139);
    outlined release of _GraphInputs((uint64_t)&v136);
    outlined release of _ViewInputs((uint64_t)&v130);
  }
  uint64_t v116 = v131;
  uint64_t v117 = v130;
  int v99 = DWORD2(v130);
  uint64_t v100 = *((void *)&v131 + 1);
  unsigned int v101 = v132;
  uint64_t v114 = *((void *)&v132 + 1);
  uint64_t v115 = v133;
  int v108 = DWORD1(v132);
  uint64_t v102 = *((void *)&v133 + 1);
  long long v103 = v134;
  int v33 = v135;
  outlined retain of _ViewInputs((uint64_t)&v130);
  outlined retain of _GraphInputs((uint64_t)&v136);
  outlined retain of ViewTransform((uint64_t)v139);
  uint64_t v34 = specialized find<A>(_:key:)(v118);
  uint64_t v113 = a3;
  unsigned int v98 = v10;
  uint64_t v97 = v24 | (v23 << 32);
  int v104 = v33;
  if (v34)
  {
    char v35 = *(unsigned char *)(v34 + 72);
    outlined release of ViewTransform((uint64_t)v139);
    outlined release of _GraphInputs((uint64_t)&v136);
    if (v35)
    {
      LODWORD(v110) = DWORD1(v138);
      unsigned int v36 = DWORD2(v134);
      uint64_t v37 = v137;
      uint64_t v109 = (_DWORD *)v137;
      swift_beginAccess();
      int v108 = *(_DWORD *)(v37 + 16);
      int v38 = DWORD2(v136);
      outlined retain of _ViewInputs((uint64_t)&v130);
      unint64_t v39 = specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs((uint64_t)&v130);
      outlined retain of _ViewInputs((uint64_t)&v130);
      specialized _ViewInputs.subscript.getter(&v121);
      outlined release of _ViewInputs((uint64_t)&v130);
      long long v127 = v133;
      long long v128 = v134;
      long long v124 = v130;
      __int16 v120 = v121;
      __int16 v119 = v111;
      int v129 = v135;
      long long v125 = v131;
      long long v126 = v132;
      char v40 = _ViewInputs.widgetAuxiliaryMetadataAsAttachment.getter();
      long long v124 = v136;
      long long v125 = v137;
      long long v126 = v138;
      _GraphInputs.interfaceIdiom.getter(v122);
      long long v124 = v122[0];
      unsigned int v41 = v36;
      unsigned int v42 = v10;
      uint64_t v43 = specialized SizeFittingTextFilter.init(size:text:environment:time:referenceDate:includeDefaultAttributes:allowsKeyColors:archiveOptions:features:attachmentsAsAuxiliaryMetadata:idiom:)(v41, v10, v108, v38, v39, 1, 1u, &v120, &v119, v40 & 1, &v124);
      uint64_t v45 = v44;
      *(void *)&long long v124 = v43;
      DWORD2(v124) = v46;
      *(void *)&long long v125 = v44;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for ResolvedStyledText();
      lazy protocol witness table accessor for type SizeFittingTextFilter and conformance SizeFittingTextFilter();
      swift_retain();
      uint64_t v47 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      *(void *)&long long v124 = __PAIR64__(v109[4], v42);
      *((void *)&v124 + 1) = __PAIR64__(v23, v24);
      *(void *)&long long v125 = v45;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type SizeFittingTextLayoutComputer and conformance SizeFittingTextLayoutComputer();
      swift_retain();
      int v48 = Attribute.init<A>(body:value:flags:update:)();
      swift_release_n();
      int v49 = 0;
      int v50 = v110 & 0xFFFFFFFD;
      uint64_t v51 = MEMORY[0x263F8EE78];
      goto LABEL_48;
    }
  }
  else
  {
    outlined release of ViewTransform((uint64_t)v139);
    outlined release of _GraphInputs((uint64_t)&v136);
  }
  uint64_t v52 = v137;
  swift_beginAccess();
  int v53 = *(_DWORD *)(v52 + 16);
  outlined retain of _ViewInputs((uint64_t)&v130);
  outlined retain of _GraphInputs((uint64_t)&v136);
  outlined retain of ViewTransform((uint64_t)v139);
  uint64_t v54 = specialized find<A>(_:key:)(v118);
  if (v54) {
    *(void *)&long long v55 = *(void *)(v54 + 72);
  }
  else {
    long long v55 = 0uLL;
  }
  long long v107 = v55;
  outlined release of ViewTransform((uint64_t)v139);
  outlined release of _GraphInputs((uint64_t)&v136);
  outlined release of _ViewInputs((uint64_t)&v130);
  outlined retain of _ViewInputs((uint64_t)&v130);
  outlined retain of _GraphInputs((uint64_t)&v136);
  outlined retain of ViewTransform((uint64_t)v139);
  uint64_t v56 = specialized find<A>(_:key:)(v118);
  if (v56)
  {
    int v106 = *(unsigned __int8 *)(v56 + 72);
    int v57 = *(unsigned __int8 *)(v56 + 73);
  }
  else
  {
    int v106 = 0;
    int v57 = 2;
  }
  int v105 = v57;
  outlined release of ViewTransform((uint64_t)v139);
  outlined release of _GraphInputs((uint64_t)&v136);
  outlined retain of _ViewInputs((uint64_t)&v130);
  outlined retain of _GraphInputs((uint64_t)&v136);
  outlined retain of ViewTransform((uint64_t)v139);
  uint64_t v58 = specialized find<A>(_:key:)(v118);
  if (v58) {
    char v59 = *(unsigned char *)(v58 + 72);
  }
  else {
    char v59 = 0;
  }
  outlined release of ViewTransform((uint64_t)v139);
  outlined release of _GraphInputs((uint64_t)&v136);
  outlined release of _ViewInputs((uint64_t)&v130);
  outlined release of _ViewInputs((uint64_t)&v130);
  outlined retain of _GraphInputs((uint64_t)&v136);
  outlined retain of ViewTransform((uint64_t)v139);
  uint64_t v60 = specialized find<A>(_:key:)(v118);
  if (!v60)
  {
    outlined release of ViewTransform((uint64_t)v139);
    goto LABEL_46;
  }
  uint64_t v62 = *(void *)(v60 + 72);
  uint64_t v61 = *(_UNKNOWN ***)(v60 + 80);
  outlined release of ViewTransform((uint64_t)v139);
  if (!v62)
  {
LABEL_46:
    type metadata accessor for InterfaceIdiomBox<PhoneInterfaceIdiom>(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<PhoneInterfaceIdiom>, (uint64_t)&type metadata for PhoneInterfaceIdiom, (uint64_t)&protocol witness table for PhoneInterfaceIdiom, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for InterfaceIdiomBox);
    uint64_t v62 = v63;
    outlined release of _GraphInputs((uint64_t)&v136);
    uint64_t v61 = &protocol witness table for InterfaceIdiomBox<A>;
    goto LABEL_47;
  }
  outlined release of _GraphInputs((uint64_t)&v136);
LABEL_47:
  int v64 = DWORD2(v136);
  uint64_t v65 = (uint64_t)v109;
  *uint64_t v109 = v10;
  *(_DWORD *)(v65 + 4) = v53;
  uint64_t v66 = v65 + *(int *)(v20 + 24);
  uint64_t v67 = type metadata accessor for ResolvedTextHelper(0);
  *(void *)(v66 + *(int *)(v67 + 56)) = 0;
  type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  swift_storeEnumTagMultiPayload();
  *(_DWORD *)uint64_t v66 = v64;
  *(void *)(v66 + 4) = v107;
  *(_WORD *)(v66 + 12) = 257;
  *(unsigned char *)(v66 + 14) = v106;
  *(unsigned char *)(v66 + 15) = v105;
  *(_WORD *)(v66 + 16) = v111;
  *(unsigned char *)(v66 + 18) = v59;
  *(void *)(v66 + 24) = v62;
  *(void *)(v66 + 32) = v61;
  type metadata accessor for PropertyList.Tracker();
  uint64_t v68 = swift_allocObject();
  _sypSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v69 = swift_allocObject();
  *(_DWORD *)(v69 + 16) = 0;
  uint64_t v70 = MEMORY[0x263F8EE80];
  *(void *)(v69 + 24) = 0;
  *(void *)(v69 + 32) = v70;
  *(void *)(v69 + 40) = v70;
  uint64_t v51 = MEMORY[0x263F8EE78];
  *(void *)(v69 + 48) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v69 + 56) = 0;
  *(void *)(v68 + 16) = v69;
  *(void *)(v66 + 40) = v68;
  *(_OWORD *)(v66 + 48) = 0u;
  *(_OWORD *)(v66 + 64) = 0u;
  *(void *)(v66 + *(int *)(v67 + 60)) = 0;
  uint64_t v71 = v110;
  _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1(v65, v110, type metadata accessor for ResolvedTextFilter);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ResolvedStyledText();
  lazy protocol witness table accessor for type ResolvedTextFilter and conformance ResolvedTextFilter(&lazy protocol witness table cache variable for type ResolvedTextFilter and conformance ResolvedTextFilter, (void (*)(uint64_t))type metadata accessor for ResolvedTextFilter);
  uint64_t v47 = Attribute.init<A>(body:value:flags:update:)();
  _s10Foundation4DateVSgWOhTm_0(v71, type metadata accessor for ResolvedTextFilter);
  _s10Foundation4DateVSgWOhTm_0(v65, type metadata accessor for ResolvedTextFilter);
  int v48 = 0;
  int v49 = 1;
  int v50 = v108;
LABEL_48:
  int v72 = v50 | 0x2000;
  uint64_t v73 = v114;
  if (!v112)
  {
    uint64_t v77 = v117;
    swift_retain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v78 = specialized find<A>(_:key:)(v77);
    if (v78)
    {
      uint64_t v79 = (uint64_t *)(v78 + 72);
      uint64_t v80 = (uint64_t *)(v78 + 80);
    }
    else
    {
      uint64_t v79 = (uint64_t *)&static _GraphInputs.TextAccessibilityProviderKey.defaultValue;
      uint64_t v80 = (uint64_t *)&static _GraphInputs.TextAccessibilityProviderKey.defaultValue + 1;
      if (one-time initialization token for defaultValue != -1) {
        swift_once();
      }
    }
    uint64_t v81 = *v80;
    uint64_t v82 = *v79;
    swift_bridgeObjectRelease();
    uint64_t v83 = v116;
    swift_release();
    uint64_t v84 = v117;
    swift_release_n();
    *(void *)&long long v124 = v84;
    *(void *)&long long v125 = v83;
    DWORD2(v124) = v99;
    *((void *)&v125 + 1) = v100;
    *(void *)&long long v126 = __PAIR64__(v72, v101);
    *((void *)&v126 + 1) = v114;
    *(void *)&long long v127 = v115;
    *((void *)&v127 + 1) = v102;
    long long v128 = v103;
    int v129 = v104;
    v122[2] = v132;
    v122[3] = v133;
    v122[4] = v134;
    int v123 = v135;
    v122[0] = v130;
    v122[1] = v131;
    BOOL v85 = _ViewInputs.isScrapeable.getter();
    static Text.makeTextChildQuery<A>(_:styledText:view:renderer:inputs:isScrapeable:)(v47, v98, v97, (uint64_t)&v124, v85, v82, v81, (double *)&v121);
    goto LABEL_59;
  }
  outlined retain of _ViewInputs((uint64_t)&v130);
  outlined retain of _GraphInputs((uint64_t)&v136);
  outlined retain of ViewTransform((uint64_t)v139);
  uint64_t v74 = specialized find<A>(_:key:)(v118);
  if (!v74)
  {
    outlined release of ViewTransform((uint64_t)v139);
    outlined release of _GraphInputs((uint64_t)&v136);
    outlined release of _ViewInputs((uint64_t)&v130);
    goto LABEL_55;
  }
  uint64_t v75 = *(void *)(v74 + 72);
  uint64_t v76 = *(void *)(v74 + 80);
  outlined release of ViewTransform((uint64_t)v139);
  outlined release of _GraphInputs((uint64_t)&v136);
  outlined release of _ViewInputs((uint64_t)&v130);
  if (!v75)
  {
LABEL_55:
    *(void *)&v122[0] = v51;
    DWORD2(v122[0]) = 0;
    HIDWORD(v122[0]) = v96;
    goto LABEL_60;
  }
  *(void *)&long long v124 = v117;
  *(void *)&long long v125 = v116;
  DWORD2(v124) = v99;
  *((void *)&v125 + 1) = v100;
  *(void *)&long long v126 = __PAIR64__(v72, v101);
  *((void *)&v126 + 1) = v73;
  *(void *)&long long v127 = v115;
  *((void *)&v127 + 1) = v102;
  long long v128 = v103;
  int v129 = v104;
  (*(void (**)(long long *__return_ptr, uint64_t, long long *, uint64_t, uint64_t))(v76 + 8))(&v121, v47, &v124, v75, v76);
LABEL_59:
  v122[0] = v121;
LABEL_60:
  outlined retain of _ViewInputs((uint64_t)&v130);
  outlined retain of _GraphInputs((uint64_t)&v136);
  outlined retain of ViewTransform((uint64_t)v139);
  uint64_t v86 = specialized find<A>(_:key:)(v118);
  if (v86)
  {
    uint64_t v87 = *(void *)(v86 + 72);
    uint64_t v88 = *(void *)(v86 + 80);
    outlined release of ViewTransform((uint64_t)v139);
    outlined release of _GraphInputs((uint64_t)&v136);
    uint64_t v89 = outlined release of _ViewInputs((uint64_t)&v130);
    if (v87)
    {
      long long v127 = v133;
      long long v128 = v134;
      int v129 = v135;
      long long v124 = v130;
      long long v125 = v131;
      long long v126 = v132;
      double v90 = MEMORY[0x270FA5388](v89);
      (*(void (**)(long long *, uint64_t (*)(), double))(v88 + 8))(&v124, partial apply for implicit closure #2 in static Text.makeCommonAttributes(view:inputs:), v90);
    }
  }
  else
  {
    outlined release of ViewTransform((uint64_t)v139);
    outlined release of _GraphInputs((uint64_t)&v136);
    outlined release of _ViewInputs((uint64_t)&v130);
  }
  int v91 = DWORD2(v122[0]);
  int v92 = HIDWORD(v122[0]);
  if (!v49)
  {
    int v92 = v48;
    int v91 = DWORD2(v122[0]) | 0x80;
  }
  uint64_t v93 = v113;
  *uint64_t v113 = *(void *)&v122[0];
  *((_DWORD *)v93 + 2) = v91;
  *((_DWORD *)v93 + 3) = v92;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t outlined release of _GraphInputs(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of _ViewInputs(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ViewTransform(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of ViewTransform(uint64_t a1)
{
  return a1;
}

uint64_t MergedElements.count.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
    return 0;
  }
  else
  {
    uint64_t v6 = a3;
    swift_unknownObjectRetain();
    uint64_t v5 = 0;
    uint64_t v8 = a2 + 72 * v6;
    while (v6 < v4)
    {
      outlined init with copy of _ViewListOutputs(v8, (uint64_t)v19);
      outlined init with copy of _ViewListOutputs.Views((uint64_t)v19, (uint64_t)v14);
      if (v15) {
        goto LABEL_12;
      }
      outlined init with take of ScrollStateRequest(v14, (uint64_t)v16);
      uint64_t v9 = v17;
      uint64_t v10 = v18;
      __swift_project_boxed_opaque_existential_1(v16, v17);
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
      BOOL v12 = __OFADD__(v5, v11);
      v5 += v11;
      if (v12) {
        goto LABEL_11;
      }
      ++v6;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      outlined destroy of _ViewListOutputs((uint64_t)v19);
      v8 += 72;
      if (v4 == v6)
      {
        swift_unknownObjectRelease();
        return v5;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    outlined destroy of _ViewListOutputs.Views((uint64_t)v14);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #3 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(uint64_t a1, void *a2, int a3, int a4, void *a5, char a6, char a7)
{
  uint64_t v8 = *(void *)(a1 + 32);
  int v43 = *(_DWORD *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 80);
  int v44 = *(_DWORD *)(a1 + 112);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  long long v42 = *(_OWORD *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 104);
  swift_beginAccess();
  int v40 = *(_DWORD *)(v9 + 16);
  uint64_t v15 = *(void *)(v9 + 24);
  long long v38 = *(_OWORD *)(v9 + 48);
  long long v39 = *(_OWORD *)(v9 + 32);
  uint64_t v16 = *(void *)(v9 + 64);
  uint64_t v37 = *(void *)(v9 + 72);
  char v17 = *(unsigned char *)(v9 + 80);
  char v18 = *(unsigned char *)(v9 + 81);
  uint64_t v19 = *(void *)(v9 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = v40;
  *(void *)(v20 + 24) = v15;
  *(_OWORD *)(v20 + 32) = v39;
  *(_OWORD *)(v20 + 48) = v38;
  *(void *)(v20 + 64) = v16;
  *(void *)(v20 + 72) = v37;
  *(unsigned char *)(v20 + 80) = v17;
  *(unsigned char *)(v20 + 81) = v18;
  *(void *)(v20 + 88) = v19;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v21 = *(void *)(a1 + 8);
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v23 = *(void *)(a1 + 24);
  *(void *)&long long v52 = v8;
  DWORD2(v52) = v43;
  *(void *)&long long v53 = v20;
  *((void *)&v53 + 1) = v12;
  *(void *)&long long v54 = v13;
  *((void *)&v54 + 1) = v10;
  *(void *)long long v55 = v11;
  *(_OWORD *)&v55[8] = v42;
  uint64_t v56 = v14;
  int v57 = v44;
  int v50 = a4;
  int v51 = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v46 = DynamicLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)(v58, a2, a3, (uint64_t)&v52, a4, (uint64_t)partial apply for closure #1 in closure #3 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:), (uint64_t)v49, v21, v22, v23);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v24 = v58[0];
  uint64_t v25 = v58[1];
  outlined init with copy of DynamicViewListItem((uint64_t)a2, (uint64_t)&v52);
  uint64_t v26 = a2[5];
  uint64_t v27 = a2[6];
  __swift_project_boxed_opaque_existential_1(a2 + 2, v26);
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8);
  id v29 = a5;
  uint64_t result = v28(v26, v27);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else
  {
    int v31 = result;
    if (result <= 0x7FFFFFFF)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for DynamicContainer._ItemInfo<DynamicLayoutViewAdaptor>, (uint64_t)&type metadata for DynamicLayoutViewAdaptor, (uint64_t)&protocol witness table for DynamicLayoutViewAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DynamicContainer._ItemInfo);
      uint64_t v32 = swift_allocObject();
      long long v33 = v52;
      *(_OWORD *)(v32 + 104) = v53;
      long long v34 = *(_OWORD *)v55;
      *(_OWORD *)(v32 + 120) = v54;
      *(_OWORD *)(v32 + 136) = v34;
      *(void *)(v32 + 160) = v46;
      *(void *)(v32 + 149) = *(void *)&v55[13];
      *(_OWORD *)(v32 + 88) = v33;
      *(void *)(v32 + 64) = 0;
      *(void *)(v32 + 72) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 80) = 0;
      *(unsigned char *)(v32 + 84) = 3;
      *(void *)(v32 + 16) = v29;
      *(_DWORD *)(v32 + 24) = a3;
      *(_DWORD *)(v32 + 28) = v31;
      *(void *)(v32 + 32) = v24;
      *(void *)(v32 + 40) = v25;
      *(unsigned char *)(v32 + 48) = a7 & 1;
      swift_beginAccess();
      *(unsigned char *)(v32 + 84) = a6;
      return v32;
    }
  }
  __break(1u);
  return result;
}

uint64_t ModifiedElements.count.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t DynamicLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)(void *a1, void *a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v71 = a7;
  uint64_t v69 = a6;
  int v70 = a5;
  uint64_t v13 = *(void *)a4;
  LODWORD(v14) = *(_DWORD *)(a4 + 8);
  uint64_t v15 = *(void *)(a4 + 16);
  unint64_t v72 = a8;
  unint64_t v68 = HIDWORD(a8);
  uint64_t v16 = *(void *)(a4 + 24);
  uint64_t v17 = *(void *)(a4 + 32);
  uint64_t v18 = *(void *)(a4 + 40);
  uint64_t v19 = *(void *)(a4 + 48);
  uint64_t v20 = *(void *)(a4 + 56);
  uint64_t v21 = *(void *)(a4 + 64);
  uint64_t v22 = *(void *)(a4 + 72);
  int v73 = *(_DWORD *)(a4 + 80);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v23 = specialized find<A>(_:key:)(v13);
  if (v23) {
    char v24 = *(unsigned char *)(v23 + 72) & 1;
  }
  else {
    char v24 = 0;
  }
  uint64_t v67 = a10;
  uint64_t v66 = a9;
  swift_bridgeObjectRelease();
  uint64_t v75 = v18;
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t v77 = v13;
  swift_release_n();
  uint64_t v25 = (void *)a2[7];
  swift_bridgeObjectRetain_n();
  char v26 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, (uint64_t)v25);
  swift_bridgeObjectRelease();
  uint64_t v65 = a1;
  uint64_t v76 = v15;
  uint64_t v74 = v19;
  if ((v26 & 1) == 0)
  {
    int v31 = (int)v14;
    swift_bridgeObjectRelease();
    uint64_t v29 = 0;
    goto LABEL_18;
  }
  uint64_t v27 = one-time initialization token for opacity;
  swift_bridgeObjectRetain();
  if (v27 != -1) {
    goto LABEL_30;
  }
  while (1)
  {
    uint64_t v28 = swift_retain();
    uint64_t v29 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(v28, (uint64_t)v25);
    swift_bridgeObjectRelease();
    uint64_t v30 = swift_release();
    if (v24)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v32 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 96))(v30);
      swift_bridgeObjectRelease();
      if (v32)
      {
        int v31 = (int)v14;
        swift_release();
        uint64_t v29 = 0;
        goto LABEL_18;
      }
    }
    swift_retain();
    uint64_t v64 = AGGraphClearUpdate();
    swift_beginAccess();
    uint64_t Value = (uint64_t *)AGGraphGetValue();
    uint64_t v34 = *Value;
    if (Value[1])
    {
      swift_retain_n();
      swift_retain_n();
      char v35 = specialized PropertyList.Tracker.value<A>(_:for:)(v34);
      swift_release_n();
    }
    else
    {
      uint64_t v36 = swift_retain_n();
      char v35 = specialized closure #1 in PropertyList.subscript.getter(v36);
      swift_release();
    }
    swift_release_n();
    uint64_t v37 = AGGraphSetUpdate();
    if ((*(uint64_t (**)(uint64_t))(*(void *)v29 + 104))(v37) & 1) != 0 && (v35)
    {
      int v31 = (int)v14;
      uint64_t v38 = static AnyTransition.opacity;
      swift_retain();
      swift_release_n();
      uint64_t v29 = v38;
    }
    else
    {
      int v31 = (int)v14;
      swift_release();
    }
LABEL_18:
    v94[0] = a3;
    v94[1] = 0;
    uint64_t v25 = a2 + 2;
    outlined init with copy of AnyTrackedValue((uint64_t)(a2 + 2), (uint64_t)&v91);
    a3 = v92;
    uint64_t v39 = v93;
    int v40 = __swift_project_boxed_opaque_existential_1(&v91, v92);
    uint64_t v64 = (uint64_t)&v64;
    MEMORY[0x270FA5388](v40);
    v54[2] = v69;
    v54[3] = v71;
    int v55 = v70;
    int v56 = v72;
    int v57 = v68;
    uint64_t v58 = v66;
    uint64_t v59 = v67;
    uint64_t v60 = v94;
    uint64_t v61 = v29;
    uint64_t v62 = a2;
    char v63 = v24;
    uint64_t v41 = swift_allocObject();
    char v24 = v41;
    uint64_t v14 = a2;
    a2 = v54;
    *(void *)(v41 + 16) = partial apply for closure #2 in DynamicLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:);
    *(void *)(v41 + 24) = v54;
    uint64_t v90 = 0;
    uint64_t v78 = v77;
    int v79 = v31;
    uint64_t v80 = v76;
    uint64_t v81 = v16;
    uint64_t v82 = v17;
    uint64_t v83 = v75;
    uint64_t v84 = v74;
    uint64_t v85 = v20;
    uint64_t v86 = v21;
    uint64_t v87 = v22;
    int v88 = v73;
    double v42 = MEMORY[0x270FA5388](v41);
    (*(void (**)(void *, uint64_t *, uint64_t *, void, uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t), double))(v39 + 16))(v89, &v90, &v78, 0, partial apply for closure #1 in closure #1 in _ViewList_Elements.makeAllElements(inputs:indirectMap:body:), v42);
    uint64_t v44 = v89[0];
    uint64_t v43 = v89[1];
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      break;
    }
    __break(1u);
LABEL_30:
    swift_once();
  }
  if (v44) {
    uint64_t v46 = v44;
  }
  else {
    uint64_t v46 = MEMORY[0x263F8EE78];
  }
  if (v44) {
    int v47 = v43;
  }
  else {
    int v47 = 0;
  }
  if (v44) {
    int v48 = HIDWORD(v43);
  }
  else {
    int v48 = *MEMORY[0x263F288F8];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v91);
  int v49 = v65;
  *uint64_t v65 = v46;
  *((_DWORD *)v49 + 2) = v47;
  *((_DWORD *)v49 + 3) = v48;
  uint64_t v51 = v14[5];
  uint64_t v50 = v14[6];
  __swift_project_boxed_opaque_existential_1(v25, v51);
  uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 32))(v51, v50);
  swift_release();
  return v52;
}

uint64_t SubgraphElements.retain()()
{
  uint64_t v1 = v0[5];
  swift_beginAccess();
  int v2 = *(_DWORD *)(v1 + 24);
  if (!v2 || !AGSubgraphIsValid()) {
    return 0;
  }
  *(_DWORD *)(v1 + 24) = v2 + 1;
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  type metadata accessor for _ViewList_ReleaseElements();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v1;
  swift_retain();
  return v6;
}

uint64_t ModifiedElements.retain()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance EverySecondEntries()
{
  return 0;
}

uint64_t type metadata accessor for _ViewList_ReleaseElements()
{
  return self;
}

uint64_t SubgraphElements.makeElements(from:inputs:indirectMap:body:)(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *a3;
  int v12 = *((_DWORD *)a3 + 2);
  uint64_t v13 = a3[2];
  long long v23 = *(_OWORD *)(a3 + 5);
  long long v24 = *(_OWORD *)(a3 + 3);
  long long v22 = *(_OWORD *)(a3 + 7);
  uint64_t v14 = a3[9];
  int v15 = *((_DWORD *)a3 + 20);
  uint64_t v16 = v6[5];
  swift_beginAccess();
  if (*(_DWORD *)(v16 + 24) && AGSubgraphIsValid())
  {
    uint64_t v21 = a6;
    uint64_t v17 = v6[3];
    uint64_t v18 = v6[4];
    __swift_project_boxed_opaque_existential_1(v6, v17);
    uint64_t v26 = v11;
    int v27 = v12;
    uint64_t v28 = v13;
    long long v29 = v24;
    long long v30 = v23;
    long long v31 = v22;
    uint64_t v32 = v14;
    int v33 = v15;
    char v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 16))(a1, a2, &v26, a4, a5, v21, v17, v18);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    char v19 = 1;
  }
  return v19 & 1;
}

uint64_t ModifiedElements.makeElements(from:inputs:indirectMap:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v14 = *(_OWORD *)(a3 + 48);
  v22[2] = *(_OWORD *)(a3 + 32);
  void v22[3] = v14;
  v22[4] = *(_OWORD *)(a3 + 64);
  int v23 = *(_DWORD *)(a3 + 80);
  long long v15 = *(_OWORD *)(a3 + 16);
  v22[0] = *(_OWORD *)a3;
  v22[1] = v15;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a5;
  *(void *)(v16 + 24) = a6;
  uint64_t v17 = *(void *)(v7 + 40);
  long long v18 = *(_OWORD *)(v7 + 64);
  v24[0] = *(_OWORD *)(v7 + 48);
  v24[1] = v18;
  void v24[2] = *(_OWORD *)(v7 + 80);
  char v19 = closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:)(a1, (uint64_t)partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewInputs, @guaranteed @escaping @callee_guaranteed (@in_guaranteed _ViewInputs) -> (@out _ViewOutputs)) -> (@out _ViewOutputs?, @unowned Bool), v16, v7, a2, (uint64_t)v22, a4, (uint64_t)v24, v17, *(void *)(a7 + 16), *(void *)(a7 + 24));
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0) {
    return v19 & 1;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  outlined init with copy of AnyTrackedValue(a4, (uint64_t)v33);
  uint64_t v15 = v34;
  uint64_t v16 = v35;
  __swift_project_boxed_opaque_existential_1(v33, v34);
  long long v17 = *(_OWORD *)(a6 + 48);
  v31[2] = *(_OWORD *)(a6 + 32);
  void v31[3] = v17;
  v31[4] = *(_OWORD *)(a6 + 64);
  int v32 = *(_DWORD *)(a6 + 80);
  long long v18 = *(_OWORD *)(a6 + 16);
  v31[0] = *(_OWORD *)a6;
  v31[1] = v18;
  uint64_t v24 = a10;
  uint64_t v25 = a11;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v28 = a8;
  uint64_t v29 = a7;
  uint64_t v30 = a9;
  LOBYTE(a7) = (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t), unsigned char *, uint64_t, uint64_t))(v16 + 16))(a1, a5, v31, a7, partial apply for closure #1 in closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:), v23, v15, v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  return a7 & 1;
}

uint64_t UnaryElements.makeElements(from:inputs:indirectMap:body:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *(void *)(a7 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](a1);
  long long v17 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v14)
  {
    uint64_t v18 = (*v14 - 1) & ~((*v14 - 1) >> 63);
    *a1 = 0;
    a1[1] = 0;
    char v19 = 1;
  }
  else
  {
    int v20 = *((_DWORD *)v15 + 20);
    uint64_t v21 = v15[2];
    int v22 = *((_DWORD *)v15 + 2);
    uint64_t v23 = *v15;
    uint64_t v29 = v16;
    uint64_t v30 = v23;
    int v31 = v22;
    uint64_t v32 = v21;
    long long v24 = *(_OWORD *)(v15 + 5);
    long long v33 = *(_OWORD *)(v15 + 3);
    long long v34 = v24;
    long long v35 = *(_OWORD *)(v15 + 7);
    uint64_t v36 = v15[9];
    int v37 = v20;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v7, a7);
    unint64_t v25 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    unint64_t v26 = (v13 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = *(_OWORD *)(a7 + 16);
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v27 + v25, v17, a7);
    *(void *)(v27 + v26) = a4;
    swift_retain();
    char v19 = v29(a1, &v30, partial apply for closure #1 in UnaryElements.makeElements(from:inputs:indirectMap:body:), v27);
    swift_release();
    uint64_t v18 = (*a2 - 1) & ~((*a2 - 1) >> 63);
  }
  *a2 = v18;
  return v19 & 1;
}

uint64_t initializeWithCopy for UnaryElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v8 + 28);
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 + 32);
  *(_DWORD *)(v7 + 36) = *(_DWORD *)(v8 + 36);
  *(void *)(v7 + 40) = *(void *)(v8 + 40);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t partial apply for closure #1 in TransitionHelper.update()(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v4 = (unsigned char *)v1[5];
  uint64_t v6 = type metadata accessor for TransitionHelper();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 24))(v5 + *(int *)(v6 + 44), a1, v3);
  unsigned char *v4 = 1;
  return result;
}

uint64_t ViewListTransition.updateValue()(uint64_t a1)
{
  v15[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v8 = (char *)v15 - v7;
  uint64_t v9 = type metadata accessor for TransitionHelper();
  if ((TransitionHelper.update()(v9) & 1) != 0 || (uint64_t result = AGGraphGetOutputValue()) == 0)
  {
    uint64_t v12 = PlaceholderContentView.init()(v4, v10);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 24))(v12, *(unsigned __int8 *)(v1 + *(int *)(v9 + 48)), v4, v3);
    MEMORY[0x270FA5388](v13);
    v15[-2] = a1;
    v15[-1] = swift_getWitnessTable();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v8, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v15[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v14);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  }
  return result;
}

uint64_t type metadata accessor for TransitionHelper()
{
  return __swift_instantiateGenericMetadata();
}

void protocol witness for Transition.body(content:phase:) in conformance OpacityTransition(char a1@<W1>, double *a2@<X8>)
{
  double v2 = 0.0;
  if (a1 == 1) {
    double v2 = 1.0;
  }
  *a2 = v2;
}

uint64_t TransitionHelper.update()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)v26 - v7;
  BOOL v31 = 0;
  TransitionHelper.info.getter((uint64_t)v28);
  uint64_t v9 = v28[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v9 + 16))
  {
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(*(_DWORD *)(v2 + 8));
    if (v11)
    {
      unint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v10);
      swift_bridgeObjectRelease();
      TransitionHelper.info.getter((uint64_t)v28);
      uint64_t v13 = v28[0];
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v13 & 0xC000000000000001) == 0)
      {
        if ((v12 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v12 < *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t v15 = *(void *)(v13 + 8 * v12 + 32);
          swift_retain();
          goto LABEL_7;
        }
        __break(1u);
        return result;
      }
      uint64_t v15 = MEMORY[0x24C523D60](v12, v13);
LABEL_7:
      swift_bridgeObjectRelease();
      swift_beginAccess();
      int v16 = *(unsigned __int8 *)(v15 + 84);
      swift_release();
      if (v16 != 3)
      {
        uint64_t v17 = *(int *)(a1 + 48);
        BOOL v31 = *(unsigned __int8 *)(v2 + v17) != v16;
        *(unsigned char *)(v2 + v17) = v16;
      }
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
LABEL_10:
  if (*(unsigned char *)(v2 + *(int *)(a1 + 48)) != 2)
  {
    TransitionHelper.list.getter((uint64_t)v28);
    uint64_t v18 = v29;
    if (v29)
    {
      uint64_t v19 = v30;
      __swift_project_boxed_opaque_existential_1(v28, v29);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v19 + 40))(&v27, v18, v19);
      uint64_t v20 = v27;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    }
    else
    {
      outlined destroy of ViewList?((uint64_t)v28);
      uint64_t v20 = MEMORY[0x263F8EE78];
    }
    uint64_t v21 = one-time initialization token for opacity;
    swift_bridgeObjectRetain();
    if (v21 != -1) {
      swift_once();
    }
    uint64_t v22 = swift_retain();
    specialized ViewTraitCollection.value<A>(for:defaultValue:)(v22, v20);
    swift_bridgeObjectRelease_n();
    swift_release();
    uint64_t v23 = *(void *)(a1 + 24);
    uint64_t v24 = AnyTransition.base<A>(as:)(v4, (uint64_t)v8);
    MEMORY[0x270FA5388](v24);
    v26[-4] = v4;
    v26[-3] = v23;
    v26[-2] = v2;
    v26[-1] = &v31;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TransitionHelper.update(), (uint64_t)&v26[-6], MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, v25, (uint64_t)v28);
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v31;
}

uint64_t ModifiedViewList.traits.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
}

uint64_t specialized ViewTraitCollection.value<A>(for:defaultValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      uint64_t v5 = v11;
      uint64_t v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for TransitionTraitKey) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v8 + 16))(&v13, &type metadata for AnyTransition, v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    return v13;
  }
  else
  {
LABEL_6:
    swift_retain();
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
      uint64_t v5 = v11;
      uint64_t v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for DepthTraitKey) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t *__return_ptr, void, uint64_t, uint64_t))(v8 + 16))(&v13, MEMORY[0x263F8D6C8], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    return v13;
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *__return_ptr);
  void v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3) {
    return a1;
  }
  uint64_t v4 = a2 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of AnyTrackedValue(v4, (uint64_t)v10);
    uint64_t v5 = v11;
    uint64_t v6 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    if ((ValueMetadata *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) == &type metadata for _DisplayList_StableIdentityScope) {
      break;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    v4 += 40;
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      return a1;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  uint64_t v8 = *(void (**)(uint64_t *__return_ptr))(v7 + 16);
  _sSiSgMaTm_0(0, &lazy cache variable for type metadata for WeakAttribute<_DisplayList_StableIdentityScope>, (uint64_t)&type metadata for _DisplayList_StableIdentityScope, MEMORY[0x263F28890]);
  v8(&v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v13;
}

uint64_t TransitionHelper.info.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = *(void *)(Value + 8);
  uint64_t v4 = *(void *)(Value + 32);
  char v5 = *(unsigned char *)(Value + 40);
  int v6 = *(_DWORD *)(Value + 44);
  *(void *)a1 = *(void *)Value;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(Value + 16);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = v5;
  *(_DWORD *)(a1 + 44) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for ViewList.traits.getter in conformance BaseViewList@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 64);
  return swift_bridgeObjectRetain();
}

uint64_t AnyTransition.base<A>(as:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  type metadata accessor for TransitionBox();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v9 = *(void *)(a1 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a2, v4 + *(void *)(*(void *)v4 + 136), a1);
    uint64_t v5 = v9;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 - 8);
    uint64_t v6 = 1;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);

  return v7(a2, v6, 1, a1);
}

uint64_t type metadata accessor for TransitionBox()
{
  return __swift_instantiateGenericMetadata();
}

void TransitionHelper.list.getter(uint64_t a1@<X8>)
{
  if (*v1 == *MEMORY[0x263F288F8])
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    uint64_t Value = AGGraphGetValue();
    outlined init with copy of AnyTrackedValue(Value, a1);
  }
}

uint64_t static Layout.makeLayoutView(root:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, Swift::UInt *)@<X2>, ValueMetadata *a4@<X4>, uint64_t *a5@<X5>, void *a6@<X8>)
{
  void (*v17)(Swift::UInt *__return_ptr, ValueMetadata *, uint64_t *);
  int v18;
  uint64_t v19;
  uint64_t v20;
  Swift::UInt value;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  char v37;
  uint64_t v38;
  int *v41;
  uint64_t *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  char v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void v69[5];
  long long v70[2];
  char v71;
  Swift::UInt v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void v85[11];

  v85[9] = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)a2;
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  int v12 = *(_DWORD *)(a2 + 24);
  int v11 = *(_DWORD *)(a2 + 28);
  int v13 = *(_DWORD *)(a2 + 32);
  unsigned int v14 = *(_DWORD *)(a2 + 36);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 48);
  int v47 = *(_DWORD *)(a2 + 56);
  int v48 = *(void *)(a2 + 60);
  int v49 = *(void *)(a2 + 68);
  uint64_t v50 = *(void *)(a2 + 76);
  uint64_t v51 = *a1;
  unint64_t v72 = v8;
  uint64_t v74 = v10;
  uint64_t v43 = v12;
  uint64_t v44 = v9;
  LODWORD(v73) = v9;
  uint64_t v75 = v12;
  uint64_t v76 = v11;
  uint64_t v45 = v11;
  uint64_t v46 = v13;
  uint64_t v77 = v13;
  uint64_t v78 = v14;
  int v79 = v15;
  (*(void (**)(unsigned int *, Swift::UInt *, ValueMetadata *))(a5[1] + 48))(&v51, &v72, a4);
  uint64_t v41 = (int *)a4;
  double v42 = a5;
  if (a4 == &type metadata for AnyLayout)
  {
    uint64_t v22 = (v14 & 0xFFFFFFFB ^ 8) & v14;
    LODWORD(v72) = v51;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for Axis?(0, (unint64_t *)&lazy cache variable for type metadata for Axis?, (uint64_t)&type metadata for Axis, MEMORY[0x263F8D8F0]);
    lazy protocol witness table accessor for type AnyLayoutProperties and conformance AnyLayoutProperties();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v23 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v24 = swift_retain();
    uint64_t v25 = specialized find<A>(_:key:)(v24);
    if (!v25 || (Swift::UInt value = v8, v23 != *(_DWORD *)(v25 + 72)))
    {
      type metadata accessor for TypedElement<DynamicStackOrientation>(0, &lazy cache variable for type metadata for TypedElement<DynamicStackOrientation>, (uint64_t)&type metadata for DynamicStackOrientation, (uint64_t)&protocol witness table for DynamicStackOrientation, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
      *(_DWORD *)(swift_allocObject() + 72) = v23;
      Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for DynamicStackOrientation, 0, v8).value;
    }
    swift_release();
    uint64_t v38 = 0;
    int v37 = 2;
  }
  else
  {
    uint64_t v17 = (void (*)(Swift::UInt *__return_ptr, ValueMetadata *, uint64_t *))a5[3];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(&v72, a4, a5);
    LOBYTE(v38) = BYTE1(v72);
    BYTE4(v38) = BYTE2(v72);
    if (v72 == 2)
    {
      uint64_t v18 = *MEMORY[0x263F288F8];
      uint64_t v19 = swift_retain();
      uint64_t v20 = specialized find<A>(_:key:)(v19);
      if (!v20 || (Swift::UInt value = v8, v18 != *(_DWORD *)(v20 + 72)))
      {
        type metadata accessor for TypedElement<DynamicStackOrientation>(0, &lazy cache variable for type metadata for TypedElement<DynamicStackOrientation>, (uint64_t)&type metadata for DynamicStackOrientation, (uint64_t)&protocol witness table for DynamicStackOrientation, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
        *(_DWORD *)(swift_allocObject() + 72) = v18;
        Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for DynamicStackOrientation, 0, v8).value;
      }
      swift_release();
      int v37 = 2;
      uint64_t v22 = v14 & 0xFFFFFFF3;
    }
    else
    {
      int v37 = v72;
      if (v72) {
        uint64_t v22 = v14 & 0xFFFFFFF3 | 4;
      }
      else {
        uint64_t v22 = v14 | 0xC;
      }
      Swift::UInt value = v8;
    }
  }
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v26 = specialized find<A>(_:key:)(value);
  if (v26)
  {
    uint64_t v27 = *(unsigned char *)(v26 + 72);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    if ((v27 & 1) == 0)
    {
      uint64_t v28 = value;
      goto LABEL_26;
    }
    swift_retain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v29 = specialized find<A>(_:key:)(value);
    if (v29) {
      uint64_t v30 = *(void *)(v29 + 72) | 0x4000;
    }
    else {
      uint64_t v30 = 0x4000;
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    BOOL v31 = swift_retain();
    uint64_t v32 = specialized find<A>(_:key:)(v31);
    if (!v32 || (uint64_t v28 = value, v30 != *(void *)(v32 + 72)))
    {
      type metadata accessor for TypedElement<DynamicStackOrientation>(0, &lazy cache variable for type metadata for TypedElement<ViewListOptionsInput>, (uint64_t)&type metadata for ViewListOptionsInput, (uint64_t)&protocol witness table for ViewListOptionsInput, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
      *(void *)(swift_allocObject() + 72) = v30;
      uint64_t v28 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ViewListOptionsInput, 0, value).value;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v28 = value;
  }
  swift_release();
LABEL_26:
  unint64_t v72 = v28;
  uint64_t v74 = v10;
  LODWORD(v73) = v44;
  uint64_t v75 = v43;
  uint64_t v76 = v45;
  uint64_t v77 = v46;
  uint64_t v78 = v22;
  int v79 = v15;
  uint64_t v80 = v16;
  uint64_t v81 = v47;
  uint64_t v82 = v48;
  uint64_t v83 = v49;
  uint64_t v84 = v50;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  long long v33 = swift_bridgeObjectRetain();
  a3(v85, v33, &v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined init with copy of _ViewListOutputs.Views((uint64_t)v85, (uint64_t)v70);
  if (v71)
  {
    long long v34 = v70[0];
    if (*((void *)&v70[0] + 1))
    {
      LODWORD(v72) = v70[0];
      int v73 = *((void *)&v70[0] + 1);
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for ViewList();
      lazy protocol witness table accessor for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers();
      swift_retain();
      long long v34 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
    }
    LODWORD(v56) = v51;
    unint64_t v72 = v28;
    uint64_t v74 = v10;
    LODWORD(v73) = v44;
    uint64_t v75 = v43;
    uint64_t v76 = v45;
    uint64_t v77 = v46;
    uint64_t v78 = v22;
    int v79 = v15;
    uint64_t v80 = v16;
    uint64_t v81 = v47;
    uint64_t v82 = v48;
    uint64_t v83 = v49;
    uint64_t v84 = v50;
    LOBYTE(v69[0]) = v37;
    BYTE1(v69[0]) = v38;
    BYTE2(v69[0]) = BYTE4(v38);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static Layout.makeDynamicView(root:inputs:properties:list:)((unsigned int *)&v56, (uint64_t)&v72, v34, (uint64_t)v41, (unint64_t)v42, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    outlined init with take of ScrollStateRequest(v70, (uint64_t)v69);
    if ((v22 & 0x800) != 0)
    {
      int v55 = v51;
      unint64_t v72 = v28;
      uint64_t v74 = v10;
      LODWORD(v73) = v44;
      uint64_t v75 = v43;
      uint64_t v76 = v45;
      uint64_t v77 = v46;
      uint64_t v78 = v22;
      int v79 = v15;
      uint64_t v80 = v16;
      uint64_t v81 = v47;
      uint64_t v82 = v48;
      uint64_t v83 = v49;
      uint64_t v84 = v50;
      uint64_t v52 = v37;
      long long v53 = v38;
      long long v54 = BYTE4(v38);
      int v56 = v8;
      int v57 = v44;
      uint64_t v58 = v10;
      uint64_t v59 = v43;
      uint64_t v60 = v45;
      uint64_t v61 = v46;
      uint64_t v62 = v14;
      char v63 = v15;
      uint64_t v64 = v16;
      uint64_t v65 = v47;
      uint64_t v66 = v48;
      uint64_t v67 = v49;
      unint64_t v68 = v50;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      long long v35 = _ViewListOutputs.makeAttribute(viewInputs:)(&v56);
      static Layout.makeDynamicView(root:inputs:properties:list:)(&v55, (uint64_t)&v72, v35, (uint64_t)v41, (unint64_t)v42, a6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      LODWORD(v56) = v51;
      unint64_t v72 = v28;
      uint64_t v74 = v10;
      LODWORD(v73) = v44;
      uint64_t v75 = v43;
      uint64_t v76 = v45;
      uint64_t v77 = v46;
      uint64_t v78 = v22;
      int v79 = v15;
      uint64_t v80 = v16;
      uint64_t v81 = v47;
      uint64_t v82 = v48;
      uint64_t v83 = v49;
      uint64_t v84 = v50;
      LOBYTE(v55) = v37;
      BYTE1(v55) = v38;
      BYTE2(v55) = BYTE4(v38);
      static Layout.makeStaticView(root:inputs:properties:list:)((unsigned int *)&v56, (uint64_t)&v72, (uint64_t)&v55, v69, v41, v42, (uint64_t)a6);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
  }
  outlined destroy of _ViewListOutputs((uint64_t)v85);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t ViewLayoutEngine.init(layout:context:children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v31 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v28 = (char *)&v25 - v12;
  Swift::UInt32 v13 = *(_DWORD *)(a2 + 8);
  uint64_t v27 = *(unsigned int *)(a2 + 4);
  int v26 = *a3;
  LODWORD(a2) = v26;
  uint64_t v14 = *((void *)a3 + 1);
  uint64_t v15 = (int *)type metadata accessor for ViewLayoutEngine();
  uint64_t v16 = a6 + v15[12];
  char v34 = 1;
  char v33 = 1;
  char v32 = 1;
  *(_OWORD *)uint64_t v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  *(unsigned char *)(v16 + 48) = 1;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(unsigned char *)(v16 + 104) = 1;
  *(_OWORD *)(v16 + 112) = 0u;
  *(_OWORD *)(v16 + 128) = 0u;
  *(_OWORD *)(v16 + 144) = 0u;
  *(unsigned char *)(v16 + 160) = 1;
  uint64_t v17 = (_OWORD *)(a6 + v15[13]);
  *uint64_t v17 = 0u;
  v17[1] = 0u;
  *(void *)(a6 + v15[14]) = MEMORY[0x263F8EE78];
  uint64_t v18 = a6 + v15[15];
  *(unsigned char *)(v18 + 16) = 0;
  *(void *)uint64_t v18 = 0;
  *(void *)(v18 + 8) = 0;
  *(unsigned char *)(v18 + 40) = 0;
  *(void *)(v18 + 24) = 0;
  *(void *)(v18 + 32) = 0;
  *(unsigned char *)(v18 + 64) = 0;
  *(void *)(v18 + 48) = 0;
  *(void *)(v18 + 56) = 0;
  *(void *)(a6 + v15[16]) = 0;
  uint64_t v19 = a6 + v15[10];
  *(_DWORD *)uint64_t v19 = a2;
  *(void *)(v19 + 8) = v14;
  uint64_t KeyPath = swift_getKeyPath();
  Swift::UInt32 v36 = v13;
  uint64_t v37 = KeyPath;
  type metadata accessor for Axis?(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(void, uint64_t))type metadata accessor for EnvironmentFetch);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v13);
  uint64_t v35 = KeyPath;
  type metadata accessor for TypedElement<DynamicStackOrientation>(0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<EnvironmentValues, LayoutDirection>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t)&type metadata for LayoutDirection, MEMORY[0x263F8EA18]);
  swift_bridgeObjectRetain();
  swift_retain();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._finalize()();
  lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>);
  lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>);
  LOBYTE(v38) = 0;
  LOBYTE(a3) = *(unsigned char *)static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
  swift_release_n();
  *(unsigned char *)(a6 + v15[11]) = (_BYTE)a3;
  uint64_t v21 = *(void *)(a4 - 8);
  uint64_t v22 = v29;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(a6, v29, a4);
  int v38 = v26;
  uint64_t v39 = v14;
  char v40 = 0;
  char v41 = (char)a3;
  uint64_t v23 = v28;
  (*(void (**)(int *, uint64_t, uint64_t))(a5 + 32))(&v38, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, a4);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v30 + 32))(a6 + v15[9], v23, v31);
}

uint64_t ViewLayoutEngine.update(layout:context:children:)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v26 = *MEMORY[0x263EF8340];
  Swift::UInt32 v8 = *(_DWORD *)(a2 + 8);
  int v9 = *a3;
  uint64_t v10 = *((void *)a3 + 1);
  uint64_t v11 = v5 + *(int *)(a4 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)uint64_t v11 = v9;
  *(void *)(v11 + 8) = v10;
  LOBYTE(v20) = HIBYTE(v8);
  unint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for Axis?(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(void, uint64_t))type metadata accessor for EnvironmentFetch);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v8);
  type metadata accessor for TypedElement<DynamicStackOrientation>(0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<EnvironmentValues, LayoutDirection>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t)&type metadata for LayoutDirection, MEMORY[0x263F8EA18]);
  swift_retain();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._finalize()();
  lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>);
  LOBYTE(v22) = 0;
  lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>);
  LOBYTE(v10) = *(unsigned char *)static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
  swift_release_n();
  *(unsigned char *)(v5 + *(int *)(a4 + 44)) = v10;
  uint64_t v12 = *(void *)(a4 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v5, a1, v12);
  uint64_t v13 = v5 + *(int *)(a4 + 48);
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  *(unsigned char *)(v13 + 48) = 1;
  *(_DWORD *)(v13 + 52) = v20;
  *(_DWORD *)(v13 + 49) = v8;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(unsigned char *)(v13 + 104) = 1;
  *(_DWORD *)(v13 + 108) = KeyPath >> 24;
  *(_DWORD *)(v13 + 105) = KeyPath;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 144) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(unsigned char *)(v13 + 160) = 1;
  uint64_t v14 = *(int *)(a4 + 56);
  swift_bridgeObjectRelease();
  *(void *)(v5 + v14) = MEMORY[0x263F8EE78];
  uint64_t v15 = v5 + *(int *)(a4 + 60);
  *(void *)uint64_t v15 = 0;
  *(void *)(v15 + 8) = 0;
  *(unsigned char *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = 0;
  *(void *)(v15 + 32) = 0;
  *(unsigned char *)(v15 + 40) = 0;
  *(void *)(v15 + 48) = 0;
  *(void *)(v15 + 56) = 0;
  *(unsigned char *)(v15 + 64) = 0;
  uint64_t v16 = *(int *)(a4 + 64);
  swift_bridgeObjectRelease();
  *(void *)(v5 + v16) = 0;
  uint64_t v17 = v5 + *(int *)(a4 + 40);
  LODWORD(v16) = *(_DWORD *)v17;
  uint64_t v18 = *(void *)(v17 + 8);
  LOBYTE(v8) = *(unsigned char *)(v5 + *(int *)(a4 + 44));
  swift_bridgeObjectRetain();
  int v22 = v16;
  uint64_t v23 = v18;
  char v24 = 0;
  char v25 = v8;
  (*(void (**)(uint64_t, int *, uint64_t))(*(void *)(a4 + 24) + 40))(v5 + *(int *)(a4 + 36), &v22, v12);
  return swift_bridgeObjectRelease();
}

uint64_t lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Axis?(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(void, uint64_t))type metadata accessor for EnvironmentFetch);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for TypedElement<DynamicStackOrientation>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t TransitionBox.hasMotion.getter()
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)(*(void *)v0 + 128) + 32))(&v2);
  return v2;
}

void *protocol witness for Layout.updateCache(_:subviews:) in conformance _VStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for Layout.updateCache(_:subviews:) in conformance _VStackLayout(a1, a2, a3, a4, 1);
}

uint64_t partial apply for closure #2 in static _VariadicView.Tree<>._makeView(view:inputs:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in static _VariadicView.Tree<>._makeView(view:inputs:)(a1, a2, *(_DWORD *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

void protocol witness for static Layout.layoutProperties.getter in conformance _VStackLayout(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 1;
  *(unsigned char *)(a1 + 2) = 1;
}

uint64_t protocol witness for Layout.makeCache(subviews:) in conformance _VStackLayout@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  long long v5 = *v2;
  char v6 = *((unsigned char *)v2 + 16);
  int v7 = *a1;
  uint64_t v8 = *((void *)a1 + 1);
  char v9 = *((unsigned char *)a1 + 16);
  char v10 = *((unsigned char *)a1 + 17);
  uint64_t v11 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  StackLayout.makeChildren()();
  uint64_t result = 0;
  *(_OWORD *)a2 = v5;
  *(unsigned char *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 17) = 1;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0xFFF0000000000000;
  *(unsigned char *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0xFFF0000000000000;
  *(unsigned char *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 64) = 0uLL;
  *(_DWORD *)(a2 + 80) = v7;
  *(void *)(a2 + 88) = v8;
  *(unsigned char *)(a2 + 96) = v9;
  *(unsigned char *)(a2 + 97) = v10;
  *(unsigned char *)(a2 + 98) = 0;
  *(void *)(a2 + 104) = v11;
  return result;
}

void protocol witness for static Layout.layoutProperties.getter in conformance _ZStackLayout(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 2;
  *(unsigned char *)(a1 + 2) = 1;
}

uint64_t partial apply for closure #1 in static View.makeImplicitRoot(view:inputs:)(uint64_t a1, uint64_t *a2)
{
  return closure #1 in static View.makeImplicitRoot(view:inputs:)(a1, a2, *(_DWORD *)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t partial apply for closure #1 in static ViewModifier.makeImplicitRoot(modifier:inputs:body:)(uint64_t a1, uint64_t *a2)
{
  return closure #1 in static ViewModifier.makeImplicitRoot(modifier:inputs:body:)(a1, a2, *(void (**)(uint64_t, uint64_t *))(v2 + 16));
}

uint64_t protocol witness for static Layout.layoutProperties.getter in conformance GeometryReaderLayout@<X0>(unsigned char *a1@<X8>)
{
  if (one-time initialization token for v2 != -1) {
    swift_once();
  }
  unsigned int v2 = static Semantics.v2;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    uint64_t result = dyld_program_sdk_at_least();
  }
  else {
    uint64_t result = static Semantics.forced >= v2;
  }
  *a1 = 2;
  a1[1] = result ^ 1;
  a1[2] = result ^ 1;
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(uint64_t a1, uint64_t *a2)
{
  return closure #1 in closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(a1, a2, *(void (**)(uint64_t, uint64_t *))(v2 + 16));
}

uint64_t closure #1 in closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[5];
  int v7 = *MEMORY[0x263F288F8];
  uint64_t v10 = *a2;
  int v11 = v4;
  uint64_t v12 = v5;
  long long v13 = *(_OWORD *)(a2 + 3);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = v6;
  int v17 = v7;
  uint64_t v18 = MEMORY[0x263F8EE88];
  char v19 = 0;
  swift_retain();
  swift_retain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

void static Layout.layoutProperties.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 2;
  *(unsigned char *)(a1 + 2) = 0;
}

{
  static Layout.layoutProperties.getter(a1);
}

void storeEnumTagSinglePayload for AsymmetricTransition(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 >= a2)
  {
    switch(v17)
    {
      case 1:
        a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_41:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v14] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 >= v10)
          {
            char v24 = *(void (**)(void))(v6 + 56);
            v24();
          }
          else
          {
            unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
            uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
            v23(v22);
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        break;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        break;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        break;
      default:
        return;
    }
  }
}

uint64_t partial apply for closure #1 in static ViewModifierContentProvider.providerMakeView(view:inputs:)(uint64_t a1, uint64_t *a2)
{
  return closure #1 in static ViewModifierContentProvider.providerMakeView(view:inputs:)(a1, a2, (_OWORD *)(v2 + 16), *(void (**)(uint64_t, uint64_t *))(v2 + 104));
}

uint64_t closure #1 in static ViewModifierContentProvider.providerMakeView(view:inputs:)(uint64_t a1, uint64_t *a2, _OWORD *a3, void (*a4)(uint64_t, uint64_t *))
{
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[5];
  long long v12 = a3[1];
  v30[0] = *a3;
  v30[1] = v12;
  void v30[2] = a3[2];
  uint64_t v13 = *(void *)&v30[0];
  uint64_t v31 = *(void *)&v30[0];
  outlined retain of _ViewInputs((uint64_t)a3);
  outlined retain of _GraphInputs((uint64_t)v30);
  outlined retain of ViewTransform((uint64_t)&v31);
  uint64_t v14 = specialized find<A>(_:key:)(v13);
  if (v14) {
    uint64_t v15 = *(void *)(v14 + 72);
  }
  else {
    uint64_t v15 = 0;
  }
  outlined release of ViewTransform((uint64_t)&v31);
  outlined release of _GraphInputs((uint64_t)v30);
  outlined release of _ViewInputs((uint64_t)a3);
  int v16 = *MEMORY[0x263F288F8];
  uint64_t v19 = v6;
  int v20 = v7;
  uint64_t v21 = v8;
  uint64_t v22 = v9;
  uint64_t v23 = v10;
  uint64_t v24 = v11;
  uint64_t v25 = 0;
  uint64_t v26 = v15;
  int v27 = v16;
  uint64_t v28 = MEMORY[0x263F8EE88];
  char v29 = 0;
  swift_retain();
  swift_retain();
  uint64_t v17 = swift_bridgeObjectRetain();
  a4(v17, &v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

_DWORD *protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance AnyLayout(_DWORD *a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for Layout.makeCache(subviews:) in conformance AnyLayout(int *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *((void *)a1 + 1);
  char v4 = *((unsigned char *)a1 + 16);
  char v5 = *((unsigned char *)a1 + 17);
  int v7 = *a1;
  uint64_t v8 = v3;
  char v9 = v4;
  char v10 = v5;
  return (*(uint64_t (**)(int *))(*(void *)v2 + 88))(&v7);
}

unint64_t lazy protocol witness table accessor for type AnyLayoutProperties and conformance AnyLayoutProperties()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyLayoutProperties and conformance AnyLayoutProperties;
  if (!lazy protocol witness table cache variable for type AnyLayoutProperties and conformance AnyLayoutProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyLayoutProperties and conformance AnyLayoutProperties);
  }
  return result;
}

void *protocol witness for static Transition.properties.getter in conformance AsymmetricTransition<A, B>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return static AsymmetricTransition.properties.getter(a1[3], a1[4], a1[5], a2);
}

void *static AsymmetricTransition.properties.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unsigned char *a4@<X8>)
{
  (*(void (**)(char *__return_ptr))(a2 + 32))((char *)&v9 + 1);
  char v7 = BYTE1(v9);
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 32))(&v9, a1, a3);
  *a4 = (v7 | v9) & 1;
  return result;
}

uint64_t protocol witness for static Transition.properties.getter in conformance FilteredTransition<A>(uint64_t a1)
{
  return static FilteredTransition.properties.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t static FilteredTransition.properties.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t protocol witness for Layout.updateCache(_:subviews:) in conformance AnyLayout(uint64_t a1, int *a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *((void *)a2 + 1);
  char v5 = *((unsigned char *)a2 + 16);
  char v6 = *((unsigned char *)a2 + 17);
  int v8 = *a2;
  uint64_t v9 = v4;
  char v10 = v5;
  char v11 = v6;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v3 + 96))(a1, &v8);
}

uint64_t ModifierTransition.body(content:phase:)@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v27 = a4;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  int v26 = a2;
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](a1);
  char v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for PlaceholderContentView();
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  int v16 = &v25[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18.n128_f64[0] = MEMORY[0x270FA5388](v17);
  int v20 = &v25[-v19];
  if (v26 == 1) {
    v5 += *(int *)(a3 + 36);
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, v5, v7, v18);
  View.modifier<A>(_:)(v11, v12, v7);
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v7);
  uint64_t v21 = *(void *)(a3 + 24);
  uint64_t v28 = &protocol witness table for PlaceholderContentView<A>;
  uint64_t v29 = v21;
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v16, v13, WitnessTable);
  uint64_t v23 = *(void (**)(unsigned char *, uint64_t))(v14 + 8);
  v23(v16, v13);
  static ViewBuilder.buildExpression<A>(_:)(v20, v13, WitnessTable);
  return ((uint64_t (*)(unsigned char *, uint64_t))v23)(v20, v13);
}

void storeEnumTagSinglePayload for ModifierTransition(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 >= a2)
  {
    switch(v11)
    {
      case 1:
        a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          int v16 = *(void (**)(void))(v6 + 56);
          v16();
        }
        break;
    }
  }
  else
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        break;
      default:
        return;
    }
  }
}

void *protocol witness for static Transition.properties.getter in conformance CombiningTransition<A, B>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return static CombiningTransition.properties.getter(a1[3], a1[4], a1[5], a2);
}

void *static CombiningTransition.properties.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unsigned char *a4@<X8>)
{
  (*(void (**)(char *__return_ptr))(a2 + 32))((char *)&v9 + 1);
  char v7 = BYTE1(v9);
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 32))(&v9, a1, a3);
  *a4 = (v7 | v9) & 1;
  return result;
}

void protocol witness for static Transition.properties.getter in conformance ModifierTransition<A>(unsigned char *a1@<X8>)
{
}

void static Transition.properties.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultAccentColorProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6, unint64_t *a7)
{
  return AGCompareValues();
}

void type metadata accessor for VibrantColorStyle.Type?(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  if (!*a2)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, a3, a4);
    unint64_t v5 = type metadata accessor for Optional();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in ArrayWith2Inline<A>()
{
  return MEMORY[0x263F8D6E0];
}

uint64_t static Edge.Set.top.getter()
{
  return 1;
}

uint64_t View.font(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.defaultForegroundColor(_:)(a1, a2, a3);
}

uint64_t EnvironmentValues.defaultAccentColorProvider.setter(uint64_t a1, uint64_t a2)
{
  return EnvironmentValues.defaultAccentColorProvider.setter(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.cuiAssetSubtype.setter(uint64_t a1)
{
  return EnvironmentValues.cuiAssetIdiom.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.cuiAssetIdiom.setter(uint64_t a1)
{
  return EnvironmentValues.cuiAssetIdiom.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

ValueMetadata *type metadata accessor for Text.TruncationMode()
{
  return &type metadata for Text.TruncationMode;
}

uint64_t _ViewInputs.animatedPosition()(uint64_t (*a1)(uint64_t *))
{
  int v3 = *((_DWORD *)v1 + 2);
  uint64_t v4 = v1[2];
  int v5 = *((_DWORD *)v1 + 20);
  uint64_t v9 = *v1;
  int v10 = v3;
  uint64_t v11 = v4;
  long long v6 = *(_OWORD *)(v1 + 5);
  long long v12 = *(_OWORD *)(v1 + 3);
  long long v13 = v6;
  long long v14 = *(_OWORD *)(v1 + 7);
  uint64_t v15 = v1[9];
  int v16 = v5;
  swift_beginAccess();
  uint64_t v7 = a1(&v9);
  swift_endAccess();
  return v7;
}

unint64_t CachedEnvironment.animatedPosition(for:)(uint64_t *a1)
{
  int v2 = *((_DWORD *)a1 + 9);
  unint64_t OffsetAttribute2 = *((unsigned int *)a1 + 16);
  if ((v2 & 0x20) != 0)
  {
    uint64_t v4 = v1;
    int v5 = *((_DWORD *)a1 + 2);
    uint64_t v6 = a1[2];
    int v7 = *((_DWORD *)a1 + 7);
    int v8 = *((_DWORD *)a1 + 8);
    uint64_t v10 = a1[5];
    uint64_t v9 = a1[6];
    int v11 = *((_DWORD *)a1 + 14);
    int v12 = *((_DWORD *)a1 + 15);
    int v13 = *((_DWORD *)a1 + 17);
    int v14 = *((_DWORD *)a1 + 18);
    int v15 = *((_DWORD *)a1 + 19);
    int v16 = *((_DWORD *)a1 + 20);
    int v17 = *((_DWORD *)a1 + 6);
    uint64_t v44 = *a1;
    int v45 = v5;
    uint64_t v46 = v6;
    int v47 = v17;
    int v48 = v7;
    int v31 = v11;
    int v32 = v8;
    int v49 = v8;
    int v50 = v2;
    uint64_t v51 = v10;
    uint64_t v52 = v9;
    int v53 = v11;
    int v54 = v12;
    int v29 = v15;
    int v30 = v12;
    int v55 = OffsetAttribute2;
    int v56 = v13;
    int v33 = v13;
    int v57 = v14;
    int v58 = v15;
    int v28 = v16;
    int v59 = v16;
    swift_retain();
    uint64_t v35 = v6;
    swift_retain();
    uint64_t v34 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v18 = _ViewInputs.geometryTransaction()();
    uint64_t KeyPath = swift_getKeyPath();
    int v20 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(unsigned char *)(v4 + 65) & 1) == 0
      && OffsetAttribute2 == *(_DWORD *)(v4 + 16)
      && v14 == *(_DWORD *)(v4 + 20)
      && v20 == *(_DWORD *)(v4 + 24)
      && v5 == *(_DWORD *)(v4 + 28)
      && v18 == *(_DWORD *)(v4 + 32)
      && v17 == *(_DWORD *)(v4 + 36))
    {
      if ((*(unsigned char *)(v4 + 48) & 1) == 0)
      {
        unint64_t OffsetAttribute2 = *(unsigned int *)(v4 + 44);
LABEL_14:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        return OffsetAttribute2;
      }
    }
    else
    {
      int v45 = v5;
      uint64_t v46 = v35;
      int v47 = v17;
      int v48 = v18;
      int v49 = v32;
      int v50 = v2;
      uint64_t v51 = v34;
      uint64_t v52 = v9;
      int v53 = v31;
      int v54 = v30;
      int v55 = OffsetAttribute2;
      int v56 = v33;
      int v57 = v14;
      int v58 = v29;
      int v59 = v28;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v44, v20, (uint64_t)&v36);
      uint64_t v22 = v37;
      unint64_t v21 = v38;
      uint64_t v23 = v39;
      unsigned __int8 v24 = v43;
      unint64_t v25 = v39 | ((unint64_t)v40 << 32);
      unint64_t v26 = v41 | ((unint64_t)v42 << 32);
      *(_OWORD *)(v4 + 16) = v36;
      *(void *)(v4 + 32) = v22;
      *(void *)(v4 + 40) = v21;
      *(void *)(v4 + 48) = v25;
      *(void *)(v4 + 56) = v26;
      *(_WORD *)(v4 + 64) = v24;
      if (v23 != 1)
      {
        unint64_t OffsetAttribute2 = HIDWORD(v21);
        goto LABEL_14;
      }
    }
    unint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v4 + 44) = OffsetAttribute2;
    *(unsigned char *)(v4 + 48) = 0;
    goto LABEL_14;
  }
  return OffsetAttribute2;
}

uint64_t CachedEnvironment.animatedSize(for:)(uint64_t *a1)
{
  int v2 = *((_DWORD *)a1 + 9);
  uint64_t OffsetAttribute2 = *((unsigned int *)a1 + 18);
  if ((v2 & 0x20) != 0)
  {
    uint64_t v4 = v1;
    int v5 = *((_DWORD *)a1 + 2);
    uint64_t v6 = a1[2];
    int v7 = *((_DWORD *)a1 + 7);
    int v8 = *((_DWORD *)a1 + 8);
    uint64_t v10 = a1[5];
    uint64_t v9 = a1[6];
    int v11 = *((_DWORD *)a1 + 14);
    int v12 = *((_DWORD *)a1 + 15);
    int v14 = *((_DWORD *)a1 + 16);
    int v13 = *((_DWORD *)a1 + 17);
    int v15 = *((_DWORD *)a1 + 19);
    int v16 = *((_DWORD *)a1 + 20);
    int v17 = *((_DWORD *)a1 + 6);
    uint64_t v41 = *a1;
    int v42 = v5;
    uint64_t v43 = v6;
    int v44 = v17;
    int v45 = v7;
    int v31 = v11;
    int v32 = v8;
    int v46 = v8;
    int v47 = v2;
    uint64_t v48 = v10;
    uint64_t v49 = v9;
    int v50 = v11;
    int v51 = v12;
    int v29 = v15;
    int v30 = v12;
    int v52 = v14;
    int v53 = v13;
    int v27 = v13;
    int v28 = v16;
    int v54 = OffsetAttribute2;
    int v55 = v15;
    int v56 = v16;
    swift_retain();
    uint64_t v34 = v6;
    swift_retain();
    uint64_t v33 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v18 = _ViewInputs.geometryTransaction()();
    uint64_t KeyPath = swift_getKeyPath();
    int v20 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(unsigned char *)(v4 + 65) & 1) == 0
      && v14 == *(_DWORD *)(v4 + 16)
      && OffsetAttribute2 == *(_DWORD *)(v4 + 20)
      && v20 == *(_DWORD *)(v4 + 24)
      && v5 == *(_DWORD *)(v4 + 28)
      && v18 == *(_DWORD *)(v4 + 32)
      && v17 == *(_DWORD *)(v4 + 36))
    {
      if ((*(unsigned char *)(v4 + 56) & 1) == 0)
      {
        uint64_t OffsetAttribute2 = *(unsigned int *)(v4 + 52);
LABEL_13:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        return OffsetAttribute2;
      }
    }
    else
    {
      int v42 = v5;
      uint64_t v43 = v34;
      int v44 = v17;
      int v45 = v18;
      int v46 = v32;
      int v47 = v2;
      uint64_t v48 = v33;
      uint64_t v49 = v9;
      int v50 = v31;
      int v51 = v30;
      int v52 = v14;
      int v53 = v27;
      int v54 = OffsetAttribute2;
      int v55 = v29;
      int v56 = v28;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v41, v20, (uint64_t)v35);
      uint64_t OffsetAttribute2 = v37;
      uint64_t v21 = v38;
      unsigned __int8 v22 = v40;
      unint64_t v23 = v36 | ((unint64_t)v37 << 32);
      unint64_t v24 = v38 | ((unint64_t)v39 << 32);
      long long v25 = v35[1];
      *(_OWORD *)(v4 + 16) = v35[0];
      *(_OWORD *)(v4 + 32) = v25;
      *(void *)(v4 + 48) = v23;
      *(void *)(v4 + 56) = v24;
      *(_WORD *)(v4 + 64) = v22;
      if (v21 != 1) {
        goto LABEL_13;
      }
    }
    uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v4 + 52) = OffsetAttribute2;
    *(unsigned char *)(v4 + 56) = 0;
    goto LABEL_13;
  }
  return OffsetAttribute2;
}

uint64_t specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, unsigned int a4@<W4>, void *a5@<X8>)
{
  v147[1] = *MEMORY[0x263EF8340];
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v144 = *(_OWORD *)a2;
  long long v145 = v7;
  long long v8 = *(_OWORD *)(a2 + 48);
  long long v146 = *(_OWORD *)(a2 + 32);
  v147[0] = v144;
  Swift::UInt value = *(void *)a2;
  int v118 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  long long v121 = *(_OWORD *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  uint64_t v13 = *(void *)(a2 + 56);
  LODWORD(v14) = *(_DWORD *)(a2 + 68);
  unsigned int v115 = *(_DWORD *)(a2 + 64);
  uint64_t v15 = *(void *)(a2 + 72);
  int v112 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)&v140[16] = *(_OWORD *)(a2 + 32);
  long long v141 = v8;
  long long v142 = *(_OWORD *)(a2 + 64);
  int v143 = *(_DWORD *)(a2 + 80);
  long long v16 = *(_OWORD *)(a2 + 16);
  long long v139 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v140 = v16;
  BOOL v17 = _ViewInputs.isScrapeable.getter();
  outlined retain of _ViewInputs(a2);
  uint64_t v111 = v144;
  if (v17)
  {
    int v18 = AGMakeUniqueID();
    uint64_t v19 = swift_retain();
    uint64_t v20 = specialized find<A>(_:key:)(v19);
    if (!v20 || *(_DWORD *)(v20 + 72) != v18)
    {
      type metadata accessor for TypedElement<_ViewInputs.ScrapeableParentID>(0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<_ViewInputs.ScrapeableParentID>, (uint64_t)&type metadata for _ViewInputs.ScrapeableParentID, (uint64_t)&protocol witness table for _ViewInputs.ScrapeableParentID, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
      *(_DWORD *)(swift_allocObject() + 72) = v18;
      Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _ViewInputs.ScrapeableParentID, 0, v111).value;
    }
    int v100 = v18;
    outlined release of ViewTransform((uint64_t)v147);
  }
  else
  {
    int v100 = 0;
  }
  uint64_t v21 = a5;
  __int16 v22 = WORD2(v146);
  if ((BYTE4(v146) & 0x20) != 0)
  {
    __int16 v99 = WORD2(v146);
    Swift::UInt v106 = value;
    uint64_t v107 = v12;
    int v108 = a5;
    uint64_t v110 = v10;
    uint64_t v23 = v145;
    swift_beginAccess();
    int v24 = *(_DWORD *)(a2 + 8);
    uint64_t v102 = *(void *)(a2 + 16);
    Swift::UInt v104 = *(void *)a2;
    int v25 = *(_DWORD *)(a2 + 24);
    uint64_t v26 = *(void *)(a2 + 32);
    uint64_t v27 = *(void *)(a2 + 40);
    uint64_t v28 = *(void *)(a2 + 48);
    uint64_t v29 = *(void *)(a2 + 56);
    uint64_t v97 = *(void *)(a2 + 72);
    uint64_t v98 = *(void *)(a2 + 64);
    int v96 = *(_DWORD *)(a2 + 80);
    long long v30 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v140[16] = *(_OWORD *)(a2 + 32);
    long long v141 = v30;
    long long v142 = *(_OWORD *)(a2 + 64);
    int v143 = *(_DWORD *)(a2 + 80);
    long long v31 = *(_OWORD *)(a2 + 16);
    long long v139 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v140 = v31;
    outlined retain of _ViewInputs(a2);
    int v32 = _ViewInputs.geometryTransaction()();
    uint64_t KeyPath = swift_getKeyPath();
    int v34 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(unsigned char *)(v145 + 81) & 1) == 0
      && v98 == *(_DWORD *)(v145 + 32)
      && v97 == *(_DWORD *)(v145 + 36)
      && v34 == *(_DWORD *)(v145 + 40)
      && v24 == *(_DWORD *)(v145 + 44)
      && v32 == *(_DWORD *)(v145 + 48)
      && v25 == *(_DWORD *)(v145 + 52))
    {
      if ((*(unsigned char *)(v145 + 64) & 1) == 0)
      {
        LODWORD(v14) = *(_DWORD *)(v145 + 60);
LABEL_20:
        uint64_t v21 = v108;
        uint64_t v10 = v110;
        uint64_t v12 = v107;
        __int16 v22 = v99;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_endAccess();
        Swift::UInt value = v106;
        goto LABEL_21;
      }
    }
    else
    {
      *(void *)&long long v139 = v104;
      DWORD2(v139) = v24;
      *(void *)uint64_t v140 = v102;
      *(_DWORD *)&v140[8] = v25;
      *(_DWORD *)&v140[12] = v32;
      *(void *)&v140[16] = v26;
      *(void *)&v140[24] = v27;
      *(void *)&long long v141 = v28;
      *((void *)&v141 + 1) = v29;
      *(void *)&long long v142 = v98;
      *((void *)&v142 + 1) = v97;
      int v143 = v96;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v139, v34, (uint64_t)&v132);
      long long v35 = v133;
      uint64_t v36 = v134;
      unsigned __int8 v37 = v138;
      unint64_t v38 = v134 | ((unint64_t)v135 << 32);
      unint64_t v39 = v136 | ((unint64_t)v137 << 32);
      *(_OWORD *)(v23 + 32) = v132;
      *(_OWORD *)(v23 + 48) = v35;
      *(void *)(v23 + 64) = v38;
      *(void *)(v23 + 72) = v39;
      *(_WORD *)(v23 + 80) = v37;
      if (v36 != 1)
      {
        uint64_t v14 = HIDWORD(*((void *)&v35 + 1));
        goto LABEL_20;
      }
    }
    LODWORD(v14) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v23 + 60) = v14;
    *(unsigned char *)(v23 + 64) = 0;
    goto LABEL_20;
  }
LABEL_21:
  *(void *)&long long v139 = value;
  DWORD2(v139) = v118;
  *(void *)uint64_t v140 = v10;
  *(_OWORD *)&v140[8] = v121;
  *(void *)&v140[24] = v11;
  *(void *)&long long v141 = v12;
  *((void *)&v141 + 1) = v13;
  *(void *)&long long v142 = __PAIR64__(v14, v115);
  *((void *)&v142 + 1) = v15;
  int v143 = v112;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v40 = swift_bridgeObjectRetain();
  closure #1 in static _OpacityEffect._makeView(modifier:inputs:body:)(v40, (uint64_t)&v139, a3, a4, (double *)&v130);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v41 = *(void *)(a2 + 48);
  uint64_t v42 = *(void *)(v41 + 16);
  if (!v42)
  {
LABEL_64:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    *uint64_t v21 = v130;
    v21[1] = v131;
    return result;
  }
  uint64_t v43 = (ValueMetadata **)(v41 + 32);
  while (*v43 != &type metadata for DisplayList.Key)
  {
    v43 += 2;
    if (!--v42) {
      goto LABEL_64;
    }
  }
  Swift::UInt32 v44 = ++lastIdentity;
  int v45 = (int *)MEMORY[0x263F288F8];
  if ((v22 & 0x100) == 0)
  {
LABEL_27:
    Swift::UInt32 v129 = v44;
    uint64_t v109 = v21;
    uint64_t v46 = v145;
    int v47 = (int *)(v145 + 16);
    swift_beginAccess();
    if ((v22 & 0x20) == 0)
    {
      LODWORD(v126) = *(_DWORD *)(a2 + 64);
      unsigned int v122 = *(_DWORD *)(a2 + 72);
      uint64_t v48 = v111;
LABEL_52:
      swift_endAccess();
      int v81 = *v47;
      *(void *)&long long v139 = v130;
      DWORD2(v139) = v131;
      unint64_t v82 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
      if ((v82 & 0x100000000) != 0) {
        int v83 = *v45;
      }
      else {
        int v83 = v82;
      }
      outlined retain of _ViewInputs(a2);
      outlined retain of ViewTransform((uint64_t)v147);
      outlined retain of _GraphInputs((uint64_t)&v144);
      uint64_t v84 = specialized find<A>(_:key:)(v48);
      if (v84) {
        char v85 = *(unsigned char *)(v84 + 72);
      }
      else {
        char v85 = 0;
      }
      outlined release of ViewTransform((uint64_t)v147);
      outlined release of _GraphInputs((uint64_t)&v144);
      outlined retain of _ViewInputs(a2);
      outlined retain of ViewTransform((uint64_t)v147);
      outlined retain of _GraphInputs((uint64_t)&v144);
      uint64_t v86 = specialized find<A>(_:key:)(v48);
      if (v86) {
        int v87 = *(_DWORD *)(v86 + 72);
      }
      else {
        int v87 = 0;
      }
      int v88 = *(_DWORD *)(a2 + 60);
      int v89 = *(_DWORD *)(a2 + 68);
      int v90 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)v147);
      outlined release of _GraphInputs((uint64_t)&v144);
      outlined release of _ViewInputs(a2);
      outlined release of _ViewInputs(a2);
      *(void *)&long long v139 = __PAIR64__(a1, v129);
      *((void *)&v139 + 1) = __PAIR64__(v122, v126);
      *(_DWORD *)uint64_t v140 = v88;
      *(_DWORD *)&v140[4] = v89;
      *(_DWORD *)&v140[8] = v81;
      *(_DWORD *)&v140[12] = v90;
      *(_DWORD *)&v140[16] = v83;
      v140[20] = v85;
      *(_DWORD *)&v140[24] = v100;
      *(_DWORD *)&v140[28] = v87;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for TypedElement<_ViewInputs.ScrapeableParentID>(0, &lazy cache variable for type metadata for RendererEffectDisplayList<_OpacityEffect>, (uint64_t)&type metadata for _OpacityEffect, (uint64_t)&protocol witness table for _OpacityEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for RendererEffectDisplayList);
      lazy protocol witness table accessor for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>(&lazy protocol witness table cache variable for type RendererEffectDisplayList<_OpacityEffect> and conformance RendererEffectDisplayList<A>, &lazy cache variable for type metadata for RendererEffectDisplayList<_OpacityEffect>, (uint64_t)&type metadata for _OpacityEffect, (uint64_t)&protocol witness table for _OpacityEffect);
      unsigned int v91 = Attribute.init<A>(body:value:flags:update:)();
      long long v92 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v140[16] = *(_OWORD *)(a2 + 32);
      long long v141 = v92;
      long long v142 = *(_OWORD *)(a2 + 64);
      int v143 = *(_DWORD *)(a2 + 80);
      long long v93 = *(_OWORD *)(a2 + 16);
      long long v139 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v140 = v93;
      if (_ViewInputs.isScrapeable.getter())
      {
        AGGraphGetFlags();
        AGGraphSetFlags();
      }
      LOBYTE(v139) = 0;
      PreferencesOutputs.subscript.setter(v91, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
      uint64_t v21 = v109;
      goto LABEL_64;
    }
    Swift::UInt v49 = *(void *)a2;
    int v50 = *(_DWORD *)(a2 + 8);
    uint64_t v51 = *(void *)(a2 + 16);
    int v52 = *(_DWORD *)(a2 + 24);
    uint64_t v53 = *(void *)(a2 + 32);
    uint64_t v119 = *(void *)(a2 + 48);
    uint64_t v123 = *(void *)(a2 + 40);
    uint64_t v54 = *(void *)(a2 + 56);
    uint64_t v127 = *(void *)(a2 + 64);
    uint64_t v116 = *(void *)(a2 + 72);
    int v113 = *(_DWORD *)(a2 + 80);
    long long v55 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v140[16] = *(_OWORD *)(a2 + 32);
    long long v141 = v55;
    long long v142 = *(_OWORD *)(a2 + 64);
    int v143 = *(_DWORD *)(a2 + 80);
    long long v56 = *(_OWORD *)(a2 + 16);
    long long v139 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v140 = v56;
    outlined retain of _ViewInputs(a2);
    int v57 = _ViewInputs.geometryTransaction()();
    uint64_t v58 = swift_getKeyPath();
    int v59 = specialized CachedEnvironment.attribute<A>(keyPath:)(v58);
    swift_release();
    if ((*(unsigned char *)(v46 + 81) & 1) == 0
      && v127 == *(_DWORD *)(v46 + 32)
      && v116 == *(_DWORD *)(v46 + 36)
      && v59 == *(_DWORD *)(v46 + 40)
      && v50 == *(_DWORD *)(v46 + 44)
      && v57 == *(_DWORD *)(v46 + 48)
      && v52 == *(_DWORD *)(v46 + 52))
    {
      if ((*(unsigned char *)(v46 + 64) & 1) == 0)
      {
        LODWORD(v126) = *(_DWORD *)(v46 + 60);
        goto LABEL_40;
      }
    }
    else
    {
      *(void *)&long long v139 = v49;
      DWORD2(v139) = v50;
      *(void *)uint64_t v140 = v51;
      *(_DWORD *)&v140[8] = v52;
      *(_DWORD *)&v140[12] = v57;
      *(void *)&v140[16] = v53;
      *(void *)&v140[24] = v123;
      *(void *)&long long v141 = v119;
      *((void *)&v141 + 1) = v54;
      *(void *)&long long v142 = v127;
      *((void *)&v142 + 1) = v116;
      int v143 = v113;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v139, v59, (uint64_t)&v132);
      long long v60 = v133;
      uint64_t v61 = v134;
      unsigned __int8 v62 = v138;
      unint64_t v63 = v134 | ((unint64_t)v135 << 32);
      unint64_t v64 = v136 | ((unint64_t)v137 << 32);
      *(_OWORD *)(v46 + 32) = v132;
      *(_OWORD *)(v46 + 48) = v60;
      *(void *)(v46 + 64) = v63;
      *(void *)(v46 + 72) = v64;
      *(_WORD *)(v46 + 80) = v62;
      if (v61 != 1)
      {
        uint64_t v126 = HIDWORD(*((void *)&v60 + 1));
LABEL_40:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        int v65 = *(_DWORD *)(a2 + 8);
        uint64_t v120 = *(void *)(a2 + 16);
        Swift::UInt v124 = *(void *)a2;
        int v66 = *(_DWORD *)(a2 + 24);
        uint64_t v67 = *(void *)(a2 + 32);
        uint64_t v68 = *(void *)(a2 + 48);
        uint64_t v117 = *(void *)(a2 + 40);
        uint64_t v69 = *(void *)(a2 + 56);
        uint64_t v114 = *(void *)(a2 + 64);
        uint64_t v105 = *(void *)(a2 + 72);
        int v103 = *(_DWORD *)(a2 + 80);
        long long v70 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v140[16] = *(_OWORD *)(a2 + 32);
        long long v141 = v70;
        long long v142 = *(_OWORD *)(a2 + 64);
        int v143 = *(_DWORD *)(a2 + 80);
        long long v71 = *(_OWORD *)(a2 + 16);
        long long v139 = *(_OWORD *)a2;
        *(_OWORD *)uint64_t v140 = v71;
        outlined retain of _ViewInputs(a2);
        int v72 = _ViewInputs.geometryTransaction()();
        uint64_t v73 = swift_getKeyPath();
        int v74 = specialized CachedEnvironment.attribute<A>(keyPath:)(v73);
        swift_release();
        if ((*(unsigned char *)(v46 + 81) & 1) == 0
          && v114 == *(_DWORD *)(v46 + 32)
          && v105 == *(_DWORD *)(v46 + 36)
          && v74 == *(_DWORD *)(v46 + 40)
          && v65 == *(_DWORD *)(v46 + 44)
          && v72 == *(_DWORD *)(v46 + 48)
          && v66 == *(_DWORD *)(v46 + 52))
        {
          uint64_t v48 = v111;
          if ((*(unsigned char *)(v46 + 72) & 1) == 0)
          {
            unsigned int OffsetAttribute2 = *(_DWORD *)(v46 + 68);
            goto LABEL_51;
          }
        }
        else
        {
          *(void *)&long long v139 = v124;
          DWORD2(v139) = v65;
          *(void *)uint64_t v140 = v120;
          *(_DWORD *)&v140[8] = v66;
          *(_DWORD *)&v140[12] = v72;
          *(void *)&v140[16] = v67;
          *(void *)&v140[24] = v117;
          *(void *)&long long v141 = v68;
          *((void *)&v141 + 1) = v69;
          *(void *)&long long v142 = v114;
          *((void *)&v142 + 1) = v105;
          int v143 = v103;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v139, v74, (uint64_t)&v132);
          unsigned int OffsetAttribute2 = v135;
          uint64_t v76 = v136;
          unsigned __int8 v77 = v138;
          unint64_t v78 = v134 | ((unint64_t)v135 << 32);
          unint64_t v79 = v136 | ((unint64_t)v137 << 32);
          long long v80 = v133;
          *(_OWORD *)(v46 + 32) = v132;
          *(_OWORD *)(v46 + 48) = v80;
          *(void *)(v46 + 64) = v78;
          *(void *)(v46 + 72) = v79;
          *(_WORD *)(v46 + 80) = v77;
          uint64_t v48 = v111;
          if (v76 != 1) {
            goto LABEL_51;
          }
        }
        unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v46 + 68) = OffsetAttribute2;
        *(unsigned char *)(v46 + 72) = 0;
LABEL_51:
        unsigned int v122 = OffsetAttribute2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        int v45 = (int *)MEMORY[0x263F288F8];
        goto LABEL_52;
      }
    }
    LODWORD(v126) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v46 + 60) = v126;
    *(unsigned char *)(v46 + 64) = 0;
    goto LABEL_40;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *v45)
  {
    LODWORD(v132) = v44;
    uint64_t v95 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v132);
    v95(&v139, 0);
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

BOOL _ViewInputs.isScrapeable.getter()
{
  if ((*(_DWORD *)(v0 + 36) & 0x20) == 0) {
    return 0;
  }
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  for (i = (ValueMetadata **)(v1 + 32); *i != &type metadata for DisplayList.Key; i += 2)
  {
    if (!--v2) {
      return 0;
    }
  }
  return (*(_DWORD *)(v0 + 36) & 0x2000) == 0;
}

void type metadata accessor for TypedElement<_ViewInputs.ScrapeableParentID>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t static _RendererEffect._makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v145 = a4;
  *(void *)&long long v146 = a3;
  v173[1] = *MEMORY[0x263EF8340];
  unsigned int v129 = *a1;
  long long v10 = a2[3];
  long long v167 = a2[2];
  long long v168 = v10;
  *(_OWORD *)uint64_t v169 = a2[4];
  *(_DWORD *)&v169[16] = *((_DWORD *)a2 + 20);
  long long v11 = a2[1];
  long long v165 = *a2;
  long long v166 = v11;
  long long v170 = v165;
  long long v171 = v11;
  long long v172 = v167;
  uint64_t v147 = v165;
  v173[0] = v165;
  LODWORD(v144) = DWORD2(v165);
  uint64_t v13 = *((void *)&v11 + 1);
  uint64_t v12 = v11;
  LODWORD(v143) = DWORD1(v167);
  LODWORD(v141) = v167;
  uint64_t v14 = *((void *)&v167 + 1);
  uint64_t v149 = v10;
  Swift::UInt value = v165;
  LODWORD(v148) = HIDWORD(v10);
  LODWORD(v142) = DWORD2(v10);
  LODWORD(v139) = *(_DWORD *)v169;
  LODWORD(v15) = *(_DWORD *)&v169[4];
  LODWORD(v138) = *(_DWORD *)&v169[8];
  uint64_t v16 = *(void *)&v169[12];
  uint64_t v18 = a6 + 56;
  BOOL v17 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 56);
  outlined retain of _ViewInputs((uint64_t)&v165);
  uint64_t v140 = a5;
  uint64_t v130 = v17;
  uint64_t v131 = v18;
  if (v17(a5, a6))
  {
    long long v162 = v167;
    long long v163 = v168;
    *(_OWORD *)double v164 = *(_OWORD *)v169;
    *(_DWORD *)&v164[16] = *(_DWORD *)&v169[16];
    long long v160 = v165;
    long long v161 = v166;
    if (_ViewInputs.isScrapeable.getter())
    {
      uint64_t v19 = AGMakeUniqueID();
      uint64_t v20 = swift_retain();
      uint64_t v21 = specialized find<A>(_:key:)(v20);
      if (!v21 || *(_DWORD *)(v21 + 72) != v19)
      {
        type metadata accessor for TypedElement<_ViewInputs.ScrapeableParentID>(0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<_ViewInputs.ScrapeableParentID>, (uint64_t)&type metadata for _ViewInputs.ScrapeableParentID, (uint64_t)&protocol witness table for _ViewInputs.ScrapeableParentID, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
        *(_DWORD *)(swift_allocObject() + 72) = v19;
        Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _ViewInputs.ScrapeableParentID, 0, v147).value;
      }
      outlined release of ViewTransform((uint64_t)v173);
    }
    else
    {
      uint64_t v19 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  int v133 = DWORD1(v172);
  uint64_t v132 = a6;
  uint64_t v128 = v19;
  if ((BYTE4(v172) & 0x20) != 0)
  {
    uint64_t v135 = v14;
    uint64_t v136 = v12;
    unsigned int v137 = a7;
    char v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 32))(v140, a6);
    uint64_t v24 = v171;
    if (v23)
    {
      swift_beginAccess();
      uint64_t v148 = v165;
      int v25 = DWORD2(v165);
      unsigned int v26 = DWORD2(v166);
      uint64_t v134 = *((void *)&v167 + 1);
      uint64_t v27 = v167;
      uint64_t v138 = v166;
      uint64_t v28 = *((void *)&v168 + 1);
      *(void *)&long long v139 = v168;
      *(void *)&long long v29 = *(void *)v169;
      long long v127 = v29;
      *(void *)&long long v29 = *(void *)&v169[8];
      long long v126 = v29;
      int v30 = *(_DWORD *)&v169[16];
      long long v162 = v167;
      long long v163 = v168;
      *(_OWORD *)double v164 = *(_OWORD *)v169;
      *(_DWORD *)&v164[16] = *(_DWORD *)&v169[16];
      long long v160 = v165;
      long long v161 = v166;
      outlined retain of _ViewInputs((uint64_t)&v165);
      unsigned int v31 = _ViewInputs.geometryTransaction()();
      uint64_t KeyPath = swift_getKeyPath();
      int v33 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_release();
      if ((*(unsigned char *)(v24 + 81) & 1) == 0
        && v127 == *(_DWORD *)(v24 + 32)
        && __PAIR64__(v33, v126) == *(void *)(v24 + 36)
        && v25 == *(_DWORD *)(v24 + 44)
        && v31 == *(_DWORD *)(v24 + 48)
        && v26 == *(_DWORD *)(v24 + 52))
      {
        uint64_t v12 = v136;
        a7 = v137;
        if ((*(unsigned char *)(v24 + 64) & 1) == 0)
        {
          LODWORD(v34) = *(_DWORD *)(v24 + 60);
LABEL_33:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_endAccess();
          *(void *)&long long v160 = __PAIR64__(HIDWORD(v168), v34);
          protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
          lazy protocol witness table accessor for type ResetPositionTransform and conformance ResetPositionTransform();
          LODWORD(v148) = Attribute.init<A>(body:value:flags:update:)();
          int v52 = *(_DWORD *)(specialized static ViewGraph.current.getter() + 248);
          swift_release();
          unsigned int v53 = *(_DWORD *)v169;
          unsigned int v54 = *(_DWORD *)&v169[8];
          uint64_t v55 = swift_getKeyPath();
          swift_beginAccess();
          outlined retain of _GraphInputs((uint64_t)&v170);
          int v56 = specialized CachedEnvironment.attribute<A>(keyPath:)(v55);
          swift_endAccess();
          outlined release of _GraphInputs((uint64_t)&v170);
          swift_release();
          *(void *)&long long v160 = __PAIR64__(v54, v53);
          DWORD2(v160) = v56;
          protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
          lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize();
          int v57 = Attribute.init<A>(body:value:flags:update:)();
          int v58 = v52;
          unsigned int v59 = v148;
          unsigned int v60 = v141 | 0x1C;
          LODWORD(v15) = v52;
          uint64_t v14 = v135;
          uint64_t v22 = v149;
          int v61 = v144;
          unsigned int v62 = v143;
          unsigned int v63 = v142;
          goto LABEL_37;
        }
      }
      else
      {
        *(void *)&long long v160 = v148;
        DWORD2(v160) = v25;
        *(void *)&long long v161 = v138;
        *((void *)&v161 + 1) = __PAIR64__(v31, v26);
        *(void *)&long long v162 = v27;
        *((void *)&v162 + 1) = v134;
        *(void *)&long long v163 = v139;
        *((void *)&v163 + 1) = v28;
        *(void *)double v164 = v127;
        *(void *)&v164[8] = v126;
        *(_DWORD *)&v164[16] = v30;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v160, v33, (uint64_t)&v153);
        long long v42 = v154;
        uint64_t v43 = v155;
        unsigned __int8 v44 = v159;
        unint64_t v45 = v155 | ((unint64_t)v156 << 32);
        unint64_t v46 = v157 | ((unint64_t)v158 << 32);
        *(_OWORD *)(v24 + 32) = v153;
        *(_OWORD *)(v24 + 48) = v42;
        *(void *)(v24 + 64) = v45;
        *(void *)(v24 + 72) = v46;
        *(_WORD *)(v24 + 80) = v44;
        uint64_t v12 = v136;
        a7 = v137;
        if (v43 != 1)
        {
          uint64_t v34 = HIDWORD(*((void *)&v42 + 1));
          goto LABEL_33;
        }
      }
      LODWORD(v34) = AGGraphCreateOffsetAttribute2();
      *(_DWORD *)(v24 + 60) = v34;
      *(unsigned char *)(v24 + 64) = 0;
      goto LABEL_33;
    }
    swift_beginAccess();
    uint64_t v134 = v165;
    int v35 = DWORD2(v165);
    *(void *)&long long v127 = v166;
    unsigned int v36 = DWORD2(v166);
    uint64_t v37 = v167;
    uint64_t v125 = v168;
    *(void *)&long long v126 = *((void *)&v167 + 1);
    uint64_t v38 = *((void *)&v168 + 1);
    *(void *)&long long v39 = *(void *)v169;
    long long v123 = v39;
    *(void *)&long long v39 = *(void *)&v169[8];
    long long v122 = v39;
    long long v162 = v167;
    long long v163 = v168;
    *(_OWORD *)double v164 = *(_OWORD *)v169;
    int v121 = *(_DWORD *)&v169[16];
    *(_DWORD *)&v164[16] = *(_DWORD *)&v169[16];
    long long v160 = v165;
    long long v161 = v166;
    outlined retain of _ViewInputs((uint64_t)&v165);
    unsigned int v40 = _ViewInputs.geometryTransaction()();
    uint64_t v41 = swift_getKeyPath();
    unsigned int v124 = specialized CachedEnvironment.attribute<A>(keyPath:)(v41);
    swift_release();
    if ((*(unsigned char *)(v24 + 81) & 1) == 0
      && v123 == *(_DWORD *)(v24 + 32)
      && __PAIR64__(v124, v122) == *(void *)(v24 + 36)
      && v35 == *(_DWORD *)(v24 + 44)
      && v40 == *(_DWORD *)(v24 + 48)
      && v36 == *(_DWORD *)(v24 + 52))
    {
      uint64_t v12 = v136;
      a7 = v137;
      uint64_t v14 = v135;
      if ((*(unsigned char *)(v24 + 64) & 1) == 0)
      {
        LODWORD(v15) = *(_DWORD *)(v24 + 60);
LABEL_35:
        uint64_t v22 = v149;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_endAccess();
        goto LABEL_36;
      }
    }
    else
    {
      *(void *)&long long v160 = v134;
      DWORD2(v160) = v35;
      *(void *)&long long v161 = v127;
      *((void *)&v161 + 1) = __PAIR64__(v40, v36);
      *(void *)&long long v162 = v37;
      *((void *)&v162 + 1) = v126;
      *(void *)&long long v163 = v125;
      *((void *)&v163 + 1) = v38;
      *(void *)double v164 = v123;
      *(void *)&v164[8] = v122;
      *(_DWORD *)&v164[16] = v121;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v160, v124, (uint64_t)&v153);
      long long v47 = v154;
      uint64_t v48 = v155;
      unsigned __int8 v49 = v159;
      unint64_t v50 = v155 | ((unint64_t)v156 << 32);
      unint64_t v51 = v157 | ((unint64_t)v158 << 32);
      *(_OWORD *)(v24 + 32) = v153;
      *(_OWORD *)(v24 + 48) = v47;
      *(void *)(v24 + 64) = v50;
      *(void *)(v24 + 72) = v51;
      *(_WORD *)(v24 + 80) = v49;
      uint64_t v12 = v136;
      a7 = v137;
      uint64_t v14 = v135;
      if (v48 != 1)
      {
        uint64_t v15 = HIDWORD(*((void *)&v47 + 1));
        goto LABEL_35;
      }
    }
    LODWORD(v15) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v24 + 60) = v15;
    *(unsigned char *)(v24 + 64) = 0;
    goto LABEL_35;
  }
  uint64_t v22 = v149;
LABEL_36:
  int v61 = v144;
  unsigned int v62 = v143;
  unsigned int v63 = v142;
  unsigned int v60 = v141;
  unsigned int v59 = v148;
  int v58 = v139;
  int v57 = v138;
LABEL_37:
  *(void *)&long long v160 = value;
  DWORD2(v160) = v61;
  *(void *)&long long v161 = v12;
  *((void *)&v161 + 1) = v13;
  *(void *)&long long v162 = __PAIR64__(v62, v60);
  *((void *)&v162 + 1) = v14;
  *(void *)&long long v163 = v22;
  *((void *)&v163 + 1) = __PAIR64__(v59, v63);
  *(_DWORD *)double v164 = v58;
  *(_DWORD *)&v164[4] = v15;
  *(_DWORD *)&v164[8] = v57;
  *(void *)&v164[12] = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v64 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t *__return_ptr, uint64_t, long long *))v146)(&v151, v64, &v160);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v65 = *(void *)(v168 + 16);
  if (!v65)
  {
LABEL_79:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    *a7 = v151;
    a7[1] = v152;
    return result;
  }
  int v66 = (ValueMetadata **)(v168 + 32);
  while (*v66 != &type metadata for DisplayList.Key)
  {
    v66 += 2;
    if (!--v65) {
      goto LABEL_79;
    }
  }
  LODWORD(v148) = ++lastIdentity;
  uint64_t v67 = (int *)MEMORY[0x263F288F8];
  char v68 = v133;
  if ((v133 & 0x100) == 0)
  {
LABEL_43:
    uint64_t v136 = v12;
    unsigned int v137 = a7;
    uint64_t v69 = v171;
    long long v70 = (unsigned int *)(v171 + 16);
    swift_beginAccess();
    uint64_t v135 = v14;
    if ((v68 & 0x20) == 0)
    {
      *(void *)&long long v146 = *(unsigned int *)v169;
      uint64_t v145 = *(unsigned int *)&v169[8];
LABEL_66:
      swift_endAccess();
      unsigned int v100 = *v70;
      *(void *)&long long v160 = v151;
      DWORD2(v160) = v152;
      unint64_t v101 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
      if ((v101 & 0x100000000) != 0) {
        int v102 = *v67;
      }
      else {
        int v102 = v101;
      }
      outlined retain of _ViewInputs((uint64_t)&v165);
      outlined retain of ViewTransform((uint64_t)v173);
      outlined retain of _GraphInputs((uint64_t)&v170);
      uint64_t v103 = specialized find<A>(_:key:)(v147);
      if (v103) {
        char v104 = *(unsigned char *)(v103 + 72);
      }
      else {
        char v104 = 0;
      }
      outlined release of ViewTransform((uint64_t)v173);
      outlined release of _GraphInputs((uint64_t)&v170);
      outlined release of _ViewInputs((uint64_t)&v165);
      outlined retain of _ViewInputs((uint64_t)&v165);
      outlined retain of ViewTransform((uint64_t)v173);
      outlined retain of _GraphInputs((uint64_t)&v170);
      uint64_t v105 = specialized find<A>(_:key:)(v147);
      if (v105) {
        unsigned int v106 = *(_DWORD *)(v105 + 72);
      }
      else {
        unsigned int v106 = 0;
      }
      unsigned int v107 = HIDWORD(v168);
      unsigned int v108 = *(_DWORD *)&v169[4];
      unsigned int v109 = *(_DWORD *)&v169[12];
      outlined release of ViewTransform((uint64_t)v173);
      outlined release of _GraphInputs((uint64_t)&v170);
      uint64_t v110 = outlined release of _ViewInputs((uint64_t)&v165);
      *(void *)&long long v160 = __PAIR64__(v129, v148);
      *((void *)&v160 + 1) = __PAIR64__(v145, v146);
      *(void *)&long long v161 = __PAIR64__(v108, v107);
      *((void *)&v161 + 1) = __PAIR64__(v109, v100);
      LODWORD(v162) = v102;
      BYTE4(v162) = v104;
      *((void *)&v162 + 1) = __PAIR64__(v106, v128);
      MEMORY[0x270FA5388](v110);
      uint64_t v111 = v140;
      uint64_t v112 = v132;
      uint64_t v119 = type metadata accessor for RendererEffectDisplayList();
      uint64_t WitnessTable = swift_getWitnessTable();
      _s14AttributeGraph0A0Vy7SwiftUI11DisplayListVGMaTm_1(0, &lazy cache variable for type metadata for Attribute<DisplayList>, (uint64_t)&type metadata for DisplayList, MEMORY[0x263F28898]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v160, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)&v118, v119, MEMORY[0x263F8E628], v113, MEMORY[0x263F8E658], v114);
      uint64_t v115 = v153;
      if (v130(v111, v112))
      {
        long long v162 = v167;
        long long v163 = v168;
        *(_OWORD *)double v164 = *(_OWORD *)v169;
        *(_DWORD *)&v164[16] = *(_DWORD *)&v169[16];
        long long v160 = v165;
        long long v161 = v166;
        if (_ViewInputs.isScrapeable.getter())
        {
          AGGraphGetFlags();
          AGGraphSetFlags();
        }
      }
      LOBYTE(v160) = 0;
      PreferencesOutputs.subscript.setter(v115, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
      a7 = v137;
      goto LABEL_79;
    }
    int v72 = DWORD2(v165);
    uint64_t v144 = v166;
    uint64_t v145 = v165;
    unsigned int v73 = DWORD2(v166);
    uint64_t v74 = v167;
    uint64_t v142 = v168;
    uint64_t v143 = *((void *)&v167 + 1);
    uint64_t v75 = *((void *)&v168 + 1);
    *(void *)&long long v71 = *(void *)v169;
    long long v146 = v71;
    *(void *)&long long v71 = *(void *)&v169[8];
    long long v141 = v71;
    int v76 = *(_DWORD *)&v169[16];
    long long v162 = v167;
    long long v163 = v168;
    *(_OWORD *)double v164 = *(_OWORD *)v169;
    *(_DWORD *)&v164[16] = *(_DWORD *)&v169[16];
    long long v160 = v165;
    long long v161 = v166;
    outlined retain of _ViewInputs((uint64_t)&v165);
    unsigned int v77 = _ViewInputs.geometryTransaction()();
    uint64_t v78 = swift_getKeyPath();
    int v79 = specialized CachedEnvironment.attribute<A>(keyPath:)(v78);
    swift_release();
    if ((*(unsigned char *)(v69 + 81) & 1) == 0
      && v146 == *(_DWORD *)(v69 + 32)
      && __PAIR64__(v79, v141) == *(void *)(v69 + 36)
      && v72 == *(_DWORD *)(v69 + 44)
      && v77 == *(_DWORD *)(v69 + 48)
      && v73 == *(_DWORD *)(v69 + 52))
    {
      if ((*(unsigned char *)(v69 + 64) & 1) == 0)
      {
        *(void *)&long long v146 = *(unsigned int *)(v69 + 60);
        goto LABEL_55;
      }
    }
    else
    {
      *(void *)&long long v160 = v145;
      DWORD2(v160) = v72;
      *(void *)&long long v161 = v144;
      *((void *)&v161 + 1) = __PAIR64__(v77, v73);
      *(void *)&long long v162 = v74;
      *((void *)&v162 + 1) = v143;
      *(void *)&long long v163 = v142;
      *((void *)&v163 + 1) = v75;
      *(void *)double v164 = v146;
      *(void *)&v164[8] = v141;
      *(_DWORD *)&v164[16] = v76;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v160, v79, (uint64_t)&v153);
      long long v80 = v154;
      uint64_t v81 = v155;
      unsigned __int8 v82 = v159;
      unint64_t v83 = v155 | ((unint64_t)v156 << 32);
      unint64_t v84 = v157 | ((unint64_t)v158 << 32);
      *(_OWORD *)(v69 + 32) = v153;
      *(_OWORD *)(v69 + 48) = v80;
      *(void *)(v69 + 64) = v83;
      *(void *)(v69 + 72) = v84;
      *(_WORD *)(v69 + 80) = v82;
      if (v81 != 1)
      {
        *(void *)&long long v146 = HIDWORD(*((void *)&v80 + 1));
LABEL_55:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        int v85 = DWORD2(v165);
        unsigned int v86 = DWORD2(v166);
        uint64_t v142 = *((void *)&v167 + 1);
        uint64_t v87 = v167;
        uint64_t v143 = v166;
        uint64_t v144 = v168;
        uint64_t v145 = v165;
        uint64_t v88 = *((void *)&v168 + 1);
        *(void *)&long long v89 = *(void *)v169;
        long long v141 = v89;
        *(void *)&long long v89 = *(void *)&v169[8];
        long long v139 = v89;
        int v90 = *(_DWORD *)&v169[16];
        long long v162 = v167;
        long long v163 = v168;
        *(_OWORD *)double v164 = *(_OWORD *)v169;
        *(_DWORD *)&v164[16] = *(_DWORD *)&v169[16];
        long long v160 = v165;
        long long v161 = v166;
        outlined retain of _ViewInputs((uint64_t)&v165);
        unsigned int v91 = _ViewInputs.geometryTransaction()();
        uint64_t v92 = swift_getKeyPath();
        int v93 = specialized CachedEnvironment.attribute<A>(keyPath:)(v92);
        swift_release();
        if ((*(unsigned char *)(v69 + 81) & 1) == 0
          && v141 == *(_DWORD *)(v69 + 32)
          && __PAIR64__(v93, v139) == *(void *)(v69 + 36)
          && v85 == *(_DWORD *)(v69 + 44)
          && v91 == *(_DWORD *)(v69 + 48)
          && v86 == *(_DWORD *)(v69 + 52))
        {
          uint64_t v67 = (int *)MEMORY[0x263F288F8];
          if ((*(unsigned char *)(v69 + 72) & 1) == 0)
          {
            uint64_t OffsetAttribute2 = *(unsigned int *)(v69 + 68);
            goto LABEL_65;
          }
        }
        else
        {
          *(void *)&long long v160 = v145;
          DWORD2(v160) = v85;
          *(void *)&long long v161 = v143;
          *((void *)&v161 + 1) = __PAIR64__(v91, v86);
          *(void *)&long long v162 = v87;
          *((void *)&v162 + 1) = v142;
          *(void *)&long long v163 = v144;
          *((void *)&v163 + 1) = v88;
          *(void *)double v164 = v141;
          *(void *)&v164[8] = v139;
          *(_DWORD *)&v164[16] = v90;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v160, v93, (uint64_t)&v153);
          uint64_t OffsetAttribute2 = v156;
          uint64_t v95 = v157;
          unsigned __int8 v96 = v159;
          unint64_t v97 = v155 | ((unint64_t)v156 << 32);
          unint64_t v98 = v157 | ((unint64_t)v158 << 32);
          long long v99 = v154;
          *(_OWORD *)(v69 + 32) = v153;
          *(_OWORD *)(v69 + 48) = v99;
          *(void *)(v69 + 64) = v97;
          *(void *)(v69 + 72) = v98;
          *(_WORD *)(v69 + 80) = v96;
          uint64_t v67 = (int *)MEMORY[0x263F288F8];
          if (v95 != 1) {
            goto LABEL_65;
          }
        }
        uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v69 + 68) = OffsetAttribute2;
        *(unsigned char *)(v69 + 72) = 0;
LABEL_65:
        uint64_t v145 = OffsetAttribute2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_66;
      }
    }
    *(void *)&long long v146 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v69 + 60) = v146;
    *(unsigned char *)(v69 + 64) = 0;
    goto LABEL_55;
  }
  outlined retain of _ViewInputs((uint64_t)&v165);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs((uint64_t)&v165);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *v67)
  {
    LODWORD(v153) = v148;
    uint64_t v117 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v153);
    v117(&v160, 0);
    char v68 = v133;
    goto LABEL_43;
  }
  __break(1u);
  return result;
}

uint64_t specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void (*a4)(uint64_t)@<X4>, unint64_t *a5@<X5>, void *a6@<X8>, unint64_t *a7)
{
  void (*v7)(uint64_t *__return_ptr, uint64_t, long long *);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  long long v28;
  int v29;
  uint64_t KeyPath;
  int v31;
  long long v32;
  uint64_t v33;
  unsigned __int8 v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  ValueMetadata **v40;
  uint64_t v41;
  int *v42;
  unsigned int OffsetAttribute2;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  long long v50;
  long long v51;
  int v52;
  uint64_t v53;
  int v54;
  long long v55;
  uint64_t v56;
  unsigned __int8 v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  long long v66;
  long long v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unsigned __int8 v72;
  unint64_t v73;
  unint64_t v74;
  long long v75;
  int v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t result;
  void (*v89)(long long *, void);
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v94;
  __int16 v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v102;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  long long v118;
  int v119;
  Swift::UInt32 v120;
  uint64_t v121;
  uint64_t v122;
  long long v123;
  long long v124;
  unsigned __int8 v125;
  unsigned int v126;
  unsigned __int8 v127;
  unsigned int v128;
  unsigned __int8 v129;
  long long v130;
  unsigned char v131[32];
  long long v132;
  long long v133;
  int v134;
  long long v135;
  long long v136;
  long long v137;
  uint64_t v138;

  uint64_t v7 = a3;
  uint64_t v9 = a6;
  uint64_t v138 = *MEMORY[0x263EF8340];
  long long v10 = *(void *)a2;
  uint64_t v115 = *(_DWORD *)(a2 + 8);
  long long v11 = *(void *)(a2 + 16);
  uint64_t v118 = *(_OWORD *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  uint64_t v14 = *(void *)(a2 + 56);
  uint64_t v15 = *(_DWORD *)(a2 + 68);
  uint64_t v112 = *(_DWORD *)(a2 + 64);
  uint64_t v16 = *(void *)(a2 + 72);
  uint64_t v119 = *(_DWORD *)(a2 + 80);
  BOOL v17 = *(_OWORD *)(a2 + 32);
  uint64_t v136 = *(_OWORD *)(a2 + 16);
  unsigned int v137 = v17;
  uint64_t v135 = *(_OWORD *)a2;
  uint64_t v18 = WORD2(v17);
  unint64_t v98 = v15;
  if ((BYTE4(v17) & 0x20) == 0)
  {
    outlined retain of _ViewInputs(a2);
    LODWORD(v19) = v15;
    goto LABEL_16;
  }
  uint64_t v95 = WORD2(v17);
  uint64_t v111 = v11;
  int v102 = v10;
  uint64_t v20 = v136;
  swift_beginAccess();
  unsigned int v108 = *(void *)a2;
  uint64_t v21 = *(_DWORD *)(a2 + 8);
  uint64_t v105 = *(void *)(a2 + 16);
  uint64_t v22 = *(_DWORD *)(a2 + 24);
  char v23 = *(void *)(a2 + 32);
  uint64_t v24 = *(void *)(a2 + 40);
  int v25 = *(void *)(a2 + 48);
  unsigned int v26 = *(void *)(a2 + 56);
  unsigned int v91 = *(void *)(a2 + 72);
  uint64_t v92 = *(void *)(a2 + 64);
  int v90 = *(_DWORD *)(a2 + 80);
  uint64_t v27 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v131[16] = *(_OWORD *)(a2 + 32);
  uint64_t v132 = v27;
  int v133 = *(_OWORD *)(a2 + 64);
  uint64_t v134 = *(_DWORD *)(a2 + 80);
  uint64_t v28 = *(_OWORD *)(a2 + 16);
  uint64_t v130 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v131 = v28;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  long long v29 = _ViewInputs.geometryTransaction()();
  uint64_t KeyPath = swift_getKeyPath();
  unsigned int v31 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(unsigned char *)(v136 + 81) & 1) != 0
    || v92 != *(_DWORD *)(v136 + 32)
    || v91 != *(_DWORD *)(v136 + 36)
    || v31 != *(_DWORD *)(v136 + 40)
    || v21 != *(_DWORD *)(v136 + 44)
    || v29 != *(_DWORD *)(v136 + 48)
    || v22 != *(_DWORD *)(v136 + 52))
  {
    *(void *)&uint64_t v130 = v108;
    DWORD2(v130) = v21;
    *(void *)uint64_t v131 = v105;
    *(_DWORD *)&v131[8] = v22;
    *(_DWORD *)&v131[12] = v29;
    *(void *)&v131[16] = v23;
    *(void *)&v131[24] = v24;
    *(void *)&uint64_t v132 = v25;
    *((void *)&v132 + 1) = v26;
    *(void *)&int v133 = v92;
    *((void *)&v133 + 1) = v91;
    uint64_t v134 = v90;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v130, v31, (uint64_t)&v123);
    int v32 = v124;
    int v33 = v125;
    uint64_t v34 = v129;
    int v35 = v125 | ((unint64_t)v126 << 32);
    unsigned int v36 = v127 | ((unint64_t)v128 << 32);
    *(_OWORD *)(v20 + 32) = v123;
    *(_OWORD *)(v20 + 48) = v32;
    *(void *)(v20 + 64) = v35;
    *(void *)(v20 + 72) = v36;
    *(_WORD *)(v20 + 80) = v34;
    if (v33 != 1)
    {
      uint64_t v19 = HIDWORD(*((void *)&v32 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (*(unsigned char *)(v136 + 64))
  {
LABEL_13:
    LODWORD(v19) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v20 + 60) = v19;
    *(unsigned char *)(v20 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v19) = *(_DWORD *)(v136 + 60);
LABEL_15:
  long long v10 = v102;
  uint64_t v9 = a6;
  long long v11 = v111;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  uint64_t v18 = v95;
  uint64_t v7 = a3;
LABEL_16:
  *(void *)&uint64_t v130 = v10;
  DWORD2(v130) = v115;
  *(void *)uint64_t v131 = v11;
  *(_OWORD *)&v131[8] = v118;
  *(void *)&v131[24] = v12;
  *(void *)&uint64_t v132 = v13;
  *((void *)&v132 + 1) = v14;
  *(void *)&int v133 = __PAIR64__(v19, v112);
  *((void *)&v133 + 1) = v16;
  uint64_t v134 = v119;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v37 = swift_bridgeObjectRetain();
  v7(&v121, v37, &v130);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v38 = *(void *)(a2 + 48);
  long long v39 = *(void *)(v38 + 16);
  if (!v39)
  {
LABEL_57:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    *uint64_t v9 = v121;
    v9[1] = v122;
    return result;
  }
  unsigned int v40 = (ValueMetadata **)(v38 + 32);
  while (*v40 != &type metadata for DisplayList.Key)
  {
    v40 += 2;
    if (!--v39) {
      goto LABEL_57;
    }
  }
  uint64_t v120 = ++lastIdentity;
  if ((v18 & 0x100) == 0)
  {
LABEL_22:
    uint64_t v41 = v136;
    long long v42 = (int *)(v136 + 16);
    swift_beginAccess();
    if ((v18 & 0x20) == 0)
    {
      LODWORD(v116) = *(_DWORD *)(a2 + 64);
      uint64_t OffsetAttribute2 = *(_DWORD *)(a2 + 72);
LABEL_47:
      swift_endAccess();
      int v76 = *v42;
      *(void *)&uint64_t v130 = v121;
      DWORD2(v130) = v122;
      unsigned int v77 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
      if ((v77 & 0x100000000) != 0) {
        uint64_t v78 = *MEMORY[0x263F288F8];
      }
      else {
        uint64_t v78 = v77;
      }
      int v79 = v135;
      *(void *)&long long v123 = v135;
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v135);
      outlined retain of ViewTransform((uint64_t)&v123);
      long long v80 = specialized find<A>(_:key:)(v79);
      if (v80) {
        uint64_t v81 = *(unsigned char *)(v80 + 72);
      }
      else {
        uint64_t v81 = 0;
      }
      outlined release of ViewTransform((uint64_t)&v123);
      outlined release of _GraphInputs((uint64_t)&v135);
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v135);
      outlined retain of ViewTransform((uint64_t)&v123);
      unsigned __int8 v82 = specialized find<A>(_:key:)(v79);
      if (v82) {
        unint64_t v83 = *(_DWORD *)(v82 + 72);
      }
      else {
        unint64_t v83 = 0;
      }
      unint64_t v84 = *(_DWORD *)(a2 + 60);
      int v85 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v123);
      outlined release of _GraphInputs((uint64_t)&v135);
      outlined release of _ViewInputs(a2);
      unsigned int v86 = outlined release of _ViewInputs(a2);
      *(void *)&uint64_t v130 = __PAIR64__(a1, v120);
      *((void *)&v130 + 1) = __PAIR64__(OffsetAttribute2, v116);
      *(_DWORD *)uint64_t v131 = v84;
      *(_DWORD *)&v131[4] = v98;
      *(_DWORD *)&v131[8] = v76;
      *(_DWORD *)&v131[12] = v85;
      *(_DWORD *)&v131[16] = v78;
      v131[20] = v81;
      *(_DWORD *)&v131[24] = 0;
      *(_DWORD *)&v131[28] = v83;
      a4(v86);
      type metadata accessor for RendererEffectDisplayList<GraphicsBlendModeEffect>(0, a5);
      lazy protocol witness table accessor for type RendererEffectDisplayList<GraphicsBlendModeEffect> and conformance RendererEffectDisplayList<A>(a7, a5);
      uint64_t v87 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v130) = 0;
      PreferencesOutputs.subscript.setter(v87, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
      goto LABEL_57;
    }
    char v104 = v9;
    unsigned __int8 v44 = *(void *)a2;
    unint64_t v45 = *(_DWORD *)(a2 + 8);
    uint64_t v113 = *(void *)(a2 + 16);
    unint64_t v46 = *(_DWORD *)(a2 + 24);
    long long v47 = *(void *)(a2 + 32);
    uint64_t v48 = *(void *)(a2 + 48);
    unsigned int v109 = *(void *)(a2 + 40);
    unsigned __int8 v49 = *(void *)(a2 + 56);
    uint64_t v117 = *(void *)(a2 + 64);
    unsigned int v106 = *(void *)(a2 + 72);
    unsigned __int8 v96 = *(_DWORD *)(a2 + 80);
    unint64_t v50 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v131[16] = *(_OWORD *)(a2 + 32);
    uint64_t v132 = v50;
    int v133 = *(_OWORD *)(a2 + 64);
    uint64_t v134 = *(_DWORD *)(a2 + 80);
    unint64_t v51 = *(_OWORD *)(a2 + 16);
    uint64_t v130 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v131 = v51;
    outlined retain of _ViewInputs(a2);
    int v52 = _ViewInputs.geometryTransaction()();
    unsigned int v53 = swift_getKeyPath();
    unsigned int v54 = specialized CachedEnvironment.attribute<A>(keyPath:)(v53);
    swift_release();
    if ((*(unsigned char *)(v41 + 81) & 1) == 0
      && v117 == *(_DWORD *)(v41 + 32)
      && v106 == *(_DWORD *)(v41 + 36)
      && v54 == *(_DWORD *)(v41 + 40)
      && v45 == *(_DWORD *)(v41 + 44)
      && v52 == *(_DWORD *)(v41 + 48)
      && v46 == *(_DWORD *)(v41 + 52))
    {
      if ((*(unsigned char *)(v41 + 64) & 1) == 0)
      {
        LODWORD(v116) = *(_DWORD *)(v41 + 60);
        goto LABEL_35;
      }
    }
    else
    {
      *(void *)&uint64_t v130 = v44;
      DWORD2(v130) = v45;
      *(void *)uint64_t v131 = v113;
      *(_DWORD *)&v131[8] = v46;
      *(_DWORD *)&v131[12] = v52;
      *(void *)&v131[16] = v47;
      *(void *)&v131[24] = v109;
      *(void *)&uint64_t v132 = v48;
      *((void *)&v132 + 1) = v49;
      *(void *)&int v133 = v117;
      *((void *)&v133 + 1) = v106;
      uint64_t v134 = v96;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v130, v54, (uint64_t)&v123);
      uint64_t v55 = v124;
      int v56 = v125;
      int v57 = v129;
      int v58 = v125 | ((unint64_t)v126 << 32);
      unsigned int v59 = v127 | ((unint64_t)v128 << 32);
      *(_OWORD *)(v41 + 32) = v123;
      *(_OWORD *)(v41 + 48) = v55;
      *(void *)(v41 + 64) = v58;
      *(void *)(v41 + 72) = v59;
      *(_WORD *)(v41 + 80) = v57;
      if (v56 != 1)
      {
        uint64_t v116 = HIDWORD(*((void *)&v55 + 1));
LABEL_35:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        unsigned int v60 = *(void *)a2;
        int v61 = *(_DWORD *)(a2 + 8);
        uint64_t v114 = *(void *)(a2 + 16);
        unsigned int v62 = *(_DWORD *)(a2 + 24);
        unsigned int v63 = *(void *)(a2 + 32);
        uint64_t v64 = *(void *)(a2 + 48);
        uint64_t v110 = *(void *)(a2 + 40);
        uint64_t v65 = *(void *)(a2 + 56);
        unsigned int v107 = *(void *)(a2 + 64);
        unint64_t v97 = *(void *)(a2 + 72);
        unint64_t v94 = *(_DWORD *)(a2 + 80);
        int v66 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v131[16] = *(_OWORD *)(a2 + 32);
        uint64_t v132 = v66;
        int v133 = *(_OWORD *)(a2 + 64);
        uint64_t v134 = *(_DWORD *)(a2 + 80);
        uint64_t v67 = *(_OWORD *)(a2 + 16);
        uint64_t v130 = *(_OWORD *)a2;
        *(_OWORD *)uint64_t v131 = v67;
        outlined retain of _ViewInputs(a2);
        char v68 = _ViewInputs.geometryTransaction()();
        uint64_t v69 = swift_getKeyPath();
        long long v70 = specialized CachedEnvironment.attribute<A>(keyPath:)(v69);
        swift_release();
        if ((*(unsigned char *)(v41 + 81) & 1) == 0
          && v107 == *(_DWORD *)(v41 + 32)
          && v97 == *(_DWORD *)(v41 + 36)
          && v70 == *(_DWORD *)(v41 + 40)
          && v61 == *(_DWORD *)(v41 + 44)
          && v68 == *(_DWORD *)(v41 + 48)
          && v62 == *(_DWORD *)(v41 + 52))
        {
          if ((*(unsigned char *)(v41 + 72) & 1) == 0)
          {
            uint64_t OffsetAttribute2 = *(_DWORD *)(v41 + 68);
            goto LABEL_46;
          }
        }
        else
        {
          *(void *)&uint64_t v130 = v60;
          DWORD2(v130) = v61;
          *(void *)uint64_t v131 = v114;
          *(_DWORD *)&v131[8] = v62;
          *(_DWORD *)&v131[12] = v68;
          *(void *)&v131[16] = v63;
          *(void *)&v131[24] = v110;
          *(void *)&uint64_t v132 = v64;
          *((void *)&v132 + 1) = v65;
          *(void *)&int v133 = v107;
          *((void *)&v133 + 1) = v97;
          uint64_t v134 = v94;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v130, v70, (uint64_t)&v123);
          uint64_t OffsetAttribute2 = v126;
          long long v71 = v127;
          int v72 = v129;
          unsigned int v73 = v125 | ((unint64_t)v126 << 32);
          uint64_t v74 = v127 | ((unint64_t)v128 << 32);
          uint64_t v75 = v124;
          *(_OWORD *)(v41 + 32) = v123;
          *(_OWORD *)(v41 + 48) = v75;
          *(void *)(v41 + 64) = v73;
          *(void *)(v41 + 72) = v74;
          *(_WORD *)(v41 + 80) = v72;
          if (v71 != 1) {
            goto LABEL_46;
          }
        }
        uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v41 + 68) = OffsetAttribute2;
        *(unsigned char *)(v41 + 72) = 0;
LABEL_46:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v9 = v104;
        goto LABEL_47;
      }
    }
    LODWORD(v116) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v41 + 60) = v116;
    *(unsigned char *)(v41 + 64) = 0;
    goto LABEL_35;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x263F288F8])
  {
    LODWORD(v123) = v120;
    long long v89 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v123);
    v89(&v130, 0);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

{
  void (*v7)(uint64_t *__return_ptr, uint64_t, long long *);
  void *v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  long long v28;
  int v29;
  uint64_t KeyPath;
  int v31;
  long long v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  ValueMetadata **v40;
  uint64_t v41;
  int *v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  long long v50;
  long long v51;
  int v52;
  uint64_t v53;
  int v54;
  long long v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  long long v67;
  long long v68;
  int v69;
  uint64_t v70;
  int v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  unint64_t v74;
  unint64_t v75;
  long long v76;
  int v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t result;
  void (*v90)(long long *, void);
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v95;
  __int16 v96;
  int v97;
  uint64_t v98;
  void *v100;
  int v101;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  unsigned int OffsetAttribute2;
  uint64_t v118;
  long long v119;
  int v120;
  Swift::UInt32 v121;
  uint64_t v122;
  uint64_t v123;
  long long v124;
  long long v125;
  unsigned __int8 v126;
  unsigned int v127;
  unsigned __int8 v128;
  unsigned int v129;
  unsigned __int8 v130;
  long long v131;
  unsigned char v132[32];
  long long v133;
  long long v134;
  int v135;
  long long v136;
  long long v137;
  long long v138;
  uint64_t v139;

  uint64_t v7 = a3;
  uint64_t v9 = a6;
  long long v139 = *MEMORY[0x263EF8340];
  long long v10 = *(_OWORD *)(a2 + 32);
  unsigned int v137 = *(_OWORD *)(a2 + 16);
  uint64_t v138 = v10;
  uint64_t v136 = *(_OWORD *)a2;
  long long v11 = *(void *)a2;
  uint64_t v116 = *(_DWORD *)(a2 + 8);
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v119 = *(_OWORD *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  uint64_t v15 = *(void *)(a2 + 56);
  uint64_t v16 = *(_DWORD *)(a2 + 68);
  uint64_t v113 = *(_DWORD *)(a2 + 64);
  BOOL v17 = *(void *)(a2 + 72);
  uint64_t v120 = *(_DWORD *)(a2 + 80);
  uint64_t v18 = WORD2(v10);
  unint64_t v101 = v16;
  if ((BYTE4(v10) & 0x20) == 0)
  {
    outlined retain of _ViewInputs(a2);
    LODWORD(v19) = v16;
    goto LABEL_16;
  }
  unsigned __int8 v96 = WORD2(v10);
  uint64_t v112 = *(void *)(a2 + 16);
  uint64_t v105 = *(void *)a2;
  uint64_t v20 = v137;
  swift_beginAccess();
  unsigned int v109 = *(void *)a2;
  uint64_t v21 = *(_DWORD *)(a2 + 8);
  unsigned int v106 = *(void *)(a2 + 16);
  uint64_t v22 = *(_DWORD *)(a2 + 24);
  char v23 = *(void *)(a2 + 32);
  uint64_t v24 = *(void *)(a2 + 40);
  int v25 = *(void *)(a2 + 48);
  unsigned int v26 = *(void *)(a2 + 56);
  uint64_t v92 = *(void *)(a2 + 72);
  int v93 = *(void *)(a2 + 64);
  unsigned int v91 = *(_DWORD *)(a2 + 80);
  uint64_t v27 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v132[16] = *(_OWORD *)(a2 + 32);
  int v133 = v27;
  uint64_t v134 = *(_OWORD *)(a2 + 64);
  uint64_t v135 = *(_DWORD *)(a2 + 80);
  uint64_t v28 = *(_OWORD *)(a2 + 16);
  uint64_t v131 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v132 = v28;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  long long v29 = _ViewInputs.geometryTransaction()();
  uint64_t KeyPath = swift_getKeyPath();
  unsigned int v31 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(unsigned char *)(v137 + 81) & 1) != 0
    || v93 != *(_DWORD *)(v137 + 32)
    || v92 != *(_DWORD *)(v137 + 36)
    || v31 != *(_DWORD *)(v137 + 40)
    || v21 != *(_DWORD *)(v137 + 44)
    || v29 != *(_DWORD *)(v137 + 48)
    || v22 != *(_DWORD *)(v137 + 52))
  {
    *(void *)&uint64_t v131 = v109;
    DWORD2(v131) = v21;
    *(void *)uint64_t v132 = v106;
    *(_DWORD *)&v132[8] = v22;
    *(_DWORD *)&v132[12] = v29;
    *(void *)&v132[16] = v23;
    *(void *)&v132[24] = v24;
    *(void *)&int v133 = v25;
    *((void *)&v133 + 1) = v26;
    *(void *)&uint64_t v134 = v93;
    *((void *)&v134 + 1) = v92;
    uint64_t v135 = v91;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v131, v31, (uint64_t)&v124);
    int v32 = v125;
    int v33 = v126;
    uint64_t v34 = v130;
    int v35 = v126 | ((unint64_t)v127 << 32);
    unsigned int v36 = v128 | ((unint64_t)v129 << 32);
    *(_OWORD *)(v20 + 32) = v124;
    *(_OWORD *)(v20 + 48) = v32;
    *(void *)(v20 + 64) = v35;
    *(void *)(v20 + 72) = v36;
    *(_WORD *)(v20 + 80) = v34;
    if ((v33 & 1) == 0)
    {
      uint64_t v19 = HIDWORD(*((void *)&v32 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (*(unsigned char *)(v137 + 64))
  {
LABEL_13:
    LODWORD(v19) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v20 + 60) = v19;
    *(unsigned char *)(v20 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v19) = *(_DWORD *)(v137 + 60);
LABEL_15:
  uint64_t v9 = a6;
  long long v11 = v105;
  uint64_t v12 = v112;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  uint64_t v18 = v96;
  uint64_t v7 = a3;
LABEL_16:
  *(void *)&uint64_t v131 = v11;
  DWORD2(v131) = v116;
  *(void *)uint64_t v132 = v12;
  *(_OWORD *)&v132[8] = v119;
  *(void *)&v132[24] = v13;
  *(void *)&int v133 = v14;
  *((void *)&v133 + 1) = v15;
  *(void *)&uint64_t v134 = __PAIR64__(v19, v113);
  *((void *)&v134 + 1) = v17;
  uint64_t v135 = v120;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v37 = swift_bridgeObjectRetain();
  v7(&v122, v37, &v131);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v38 = *(void *)(a2 + 48);
  long long v39 = *(void *)(v38 + 16);
  if (!v39)
  {
LABEL_59:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    *uint64_t v9 = v122;
    v9[1] = v123;
    return result;
  }
  unsigned int v40 = (ValueMetadata **)(v38 + 32);
  while (*v40 != &type metadata for DisplayList.Key)
  {
    v40 += 2;
    if (!--v39) {
      goto LABEL_59;
    }
  }
  int v121 = ++lastIdentity;
  if ((v18 & 0x100) == 0)
  {
LABEL_22:
    uint64_t v41 = v137;
    long long v42 = (int *)(v137 + 16);
    swift_beginAccess();
    if ((v18 & 0x20) == 0)
    {
      uint64_t OffsetAttribute2 = *(_DWORD *)(a2 + 64);
      uint64_t v43 = *(_DWORD *)(a2 + 72);
LABEL_49:
      swift_endAccess();
      unsigned int v77 = *v42;
      *(void *)&uint64_t v131 = v122;
      DWORD2(v131) = v123;
      uint64_t v78 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
      if ((v78 & 0x100000000) != 0) {
        int v79 = *MEMORY[0x263F288F8];
      }
      else {
        int v79 = v78;
      }
      long long v80 = v136;
      *(void *)&unsigned int v124 = v136;
      outlined retain of _ViewInputs(a2);
      outlined retain of ViewTransform((uint64_t)&v124);
      outlined retain of _GraphInputs((uint64_t)&v136);
      uint64_t v81 = specialized find<A>(_:key:)(v80);
      if (v81) {
        unsigned __int8 v82 = *(unsigned char *)(v81 + 72);
      }
      else {
        unsigned __int8 v82 = 0;
      }
      outlined release of ViewTransform((uint64_t)&v124);
      outlined release of _GraphInputs((uint64_t)&v136);
      outlined release of _ViewInputs(a2);
      outlined retain of _ViewInputs(a2);
      outlined retain of ViewTransform((uint64_t)&v124);
      outlined retain of _GraphInputs((uint64_t)&v136);
      unint64_t v83 = specialized find<A>(_:key:)(v80);
      if (v83) {
        unint64_t v84 = *(_DWORD *)(v83 + 72);
      }
      else {
        unint64_t v84 = 0;
      }
      int v85 = *(_DWORD *)(a2 + 60);
      unsigned int v86 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v124);
      outlined release of _GraphInputs((uint64_t)&v136);
      uint64_t v87 = outlined release of _ViewInputs(a2);
      *(void *)&uint64_t v131 = __PAIR64__(a1, v121);
      *((void *)&v131 + 1) = __PAIR64__(v43, OffsetAttribute2);
      *(_DWORD *)uint64_t v132 = v85;
      *(_DWORD *)&v132[4] = v101;
      *(_DWORD *)&v132[8] = v77;
      *(_DWORD *)&v132[12] = v86;
      *(_DWORD *)&v132[16] = v79;
      v132[20] = v82;
      *(_DWORD *)&v132[24] = 0;
      *(_DWORD *)&v132[28] = v84;
      a4(v87);
      type metadata accessor for RendererEffectDisplayList<GraphicsBlendModeEffect>(0, a5);
      lazy protocol witness table accessor for type RendererEffectDisplayList<GraphicsBlendModeEffect> and conformance RendererEffectDisplayList<A>(a7, a5);
      uint64_t v88 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v131) = 0;
      PreferencesOutputs.subscript.setter(v88, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
      goto LABEL_59;
    }
    unsigned int v100 = v9;
    unsigned __int8 v44 = *(void *)a2;
    unint64_t v45 = *(_DWORD *)(a2 + 8);
    uint64_t v114 = *(void *)(a2 + 16);
    unint64_t v46 = *(_DWORD *)(a2 + 24);
    long long v47 = *(void *)(a2 + 32);
    uint64_t v48 = *(void *)(a2 + 48);
    uint64_t v110 = *(void *)(a2 + 40);
    unsigned __int8 v49 = *(void *)(a2 + 56);
    uint64_t v118 = *(void *)(a2 + 64);
    unsigned int v107 = *(void *)(a2 + 72);
    unint64_t v97 = *(_DWORD *)(a2 + 80);
    unint64_t v50 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v132[16] = *(_OWORD *)(a2 + 32);
    int v133 = v50;
    uint64_t v134 = *(_OWORD *)(a2 + 64);
    uint64_t v135 = *(_DWORD *)(a2 + 80);
    unint64_t v51 = *(_OWORD *)(a2 + 16);
    uint64_t v131 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v132 = v51;
    outlined retain of _ViewInputs(a2);
    int v52 = _ViewInputs.geometryTransaction()();
    unsigned int v53 = swift_getKeyPath();
    unsigned int v54 = specialized CachedEnvironment.attribute<A>(keyPath:)(v53);
    swift_release();
    if ((*(unsigned char *)(v41 + 81) & 1) == 0
      && v118 == *(_DWORD *)(v41 + 32)
      && v107 == *(_DWORD *)(v41 + 36)
      && v54 == *(_DWORD *)(v41 + 40)
      && v45 == *(_DWORD *)(v41 + 44)
      && v52 == *(_DWORD *)(v41 + 48)
      && v46 == *(_DWORD *)(v41 + 52))
    {
      if (*(unsigned char *)(v41 + 64)) {
        goto LABEL_34;
      }
      LODWORD(v60) = *(_DWORD *)(v41 + 60);
    }
    else
    {
      *(void *)&uint64_t v131 = v44;
      DWORD2(v131) = v45;
      *(void *)uint64_t v132 = v114;
      *(_DWORD *)&v132[8] = v46;
      *(_DWORD *)&v132[12] = v52;
      *(void *)&v132[16] = v47;
      *(void *)&v132[24] = v110;
      *(void *)&int v133 = v48;
      *((void *)&v133 + 1) = v49;
      *(void *)&uint64_t v134 = v118;
      *((void *)&v134 + 1) = v107;
      uint64_t v135 = v97;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v131, v54, (uint64_t)&v124);
      uint64_t v55 = v125;
      int v56 = v126;
      int v57 = v130;
      int v58 = v126 | ((unint64_t)v127 << 32);
      unsigned int v59 = v128 | ((unint64_t)v129 << 32);
      *(_OWORD *)(v41 + 32) = v124;
      *(_OWORD *)(v41 + 48) = v55;
      *(void *)(v41 + 64) = v58;
      *(void *)(v41 + 72) = v59;
      *(_WORD *)(v41 + 80) = v57;
      if (v56)
      {
LABEL_34:
        uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v41 + 60) = OffsetAttribute2;
        *(unsigned char *)(v41 + 64) = 0;
LABEL_37:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        int v61 = *(void *)a2;
        unsigned int v62 = *(_DWORD *)(a2 + 8);
        uint64_t v115 = *(void *)(a2 + 16);
        unsigned int v63 = *(_DWORD *)(a2 + 24);
        uint64_t v64 = *(void *)(a2 + 32);
        uint64_t v65 = *(void *)(a2 + 48);
        uint64_t v111 = *(void *)(a2 + 40);
        int v66 = *(void *)(a2 + 56);
        unsigned int v108 = *(void *)(a2 + 64);
        unint64_t v98 = *(void *)(a2 + 72);
        uint64_t v95 = *(_DWORD *)(a2 + 80);
        uint64_t v67 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v132[16] = *(_OWORD *)(a2 + 32);
        int v133 = v67;
        uint64_t v134 = *(_OWORD *)(a2 + 64);
        uint64_t v135 = *(_DWORD *)(a2 + 80);
        char v68 = *(_OWORD *)(a2 + 16);
        uint64_t v131 = *(_OWORD *)a2;
        *(_OWORD *)uint64_t v132 = v68;
        outlined retain of _ViewInputs(a2);
        uint64_t v69 = _ViewInputs.geometryTransaction()();
        long long v70 = swift_getKeyPath();
        long long v71 = specialized CachedEnvironment.attribute<A>(keyPath:)(v70);
        swift_release();
        if ((*(unsigned char *)(v41 + 81) & 1) == 0
          && v108 == *(_DWORD *)(v41 + 32)
          && v98 == *(_DWORD *)(v41 + 36)
          && v71 == *(_DWORD *)(v41 + 40)
          && v62 == *(_DWORD *)(v41 + 44)
          && v69 == *(_DWORD *)(v41 + 48)
          && v63 == *(_DWORD *)(v41 + 52))
        {
          uint64_t v9 = v100;
          if ((*(unsigned char *)(v41 + 72) & 1) == 0)
          {
            uint64_t v43 = *(_DWORD *)(v41 + 68);
            goto LABEL_48;
          }
        }
        else
        {
          *(void *)&uint64_t v131 = v61;
          DWORD2(v131) = v62;
          *(void *)uint64_t v132 = v115;
          *(_DWORD *)&v132[8] = v63;
          *(_DWORD *)&v132[12] = v69;
          *(void *)&v132[16] = v64;
          *(void *)&v132[24] = v111;
          *(void *)&int v133 = v65;
          *((void *)&v133 + 1) = v66;
          *(void *)&uint64_t v134 = v108;
          *((void *)&v134 + 1) = v98;
          uint64_t v135 = v95;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v131, v71, (uint64_t)&v124);
          uint64_t v43 = v127;
          int v72 = v128;
          unsigned int v73 = v130;
          uint64_t v74 = v126 | ((unint64_t)v127 << 32);
          uint64_t v75 = v128 | ((unint64_t)v129 << 32);
          int v76 = v125;
          *(_OWORD *)(v41 + 32) = v124;
          *(_OWORD *)(v41 + 48) = v76;
          *(void *)(v41 + 64) = v74;
          *(void *)(v41 + 72) = v75;
          *(_WORD *)(v41 + 80) = v73;
          uint64_t v9 = v100;
          if ((v72 & 1) == 0) {
            goto LABEL_48;
          }
        }
        uint64_t v43 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v41 + 68) = v43;
        *(unsigned char *)(v41 + 72) = 0;
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_49;
      }
      unsigned int v60 = HIDWORD(*((void *)&v55 + 1));
    }
    uint64_t OffsetAttribute2 = v60;
    goto LABEL_37;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x263F288F8])
  {
    LODWORD(v124) = v121;
    int v90 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v124);
    v90(&v131, 0);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t outlined retain of _ViewInputs(uint64_t a1)
{
  return a1;
}

uint64_t _ViewInputs.geometryTransaction()()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(unsigned int *)(v0 + 28);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v3 = specialized find<A>(_:key:)(v1);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v4 = (uint64_t *)&static _GraphInputs.SavedTransactionKey.defaultValue;
  }
  uint64_t v5 = *v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  if (*(void *)(v5 + 16)) {
    uint64_t v2 = *(unsigned int *)(v5 + 32);
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeView(view:inputs:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return closure #2 in static ModifiedContent<>._makeView(view:inputs:)(a1, *(_DWORD *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

uint64_t CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)@<X0>(_DWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5 = a1[2];
  int v6 = a1[6];
  int v7 = a1[7];
  int v8 = a1[16];
  int v9 = a1[18];
  if ((a1[9] & 0x400) != 0)
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type AnimatableFrameAttributeVFD and conformance AnimatableFrameAttributeVFD();
  }
  else
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type AnimatableFrameAttribute and conformance AnimatableFrameAttribute();
  }
  int v10 = Attribute.init<A>(body:value:flags:update:)();
  AGGraphSetFlags();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *(_DWORD *)a3 = v8;
  *(_DWORD *)(a3 + 4) = v9;
  *(_DWORD *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 12) = v5;
  *(_DWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 20) = v6;
  *(_DWORD *)(a3 + 24) = v10;
  *(_DWORD *)(a3 + 28) = 0;
  *(unsigned char *)(a3 + 32) = 1;
  *(_DWORD *)(a3 + 36) = 0;
  *(unsigned char *)(a3 + 40) = 1;
  *(_DWORD *)(a3 + 44) = 0;
  *(unsigned char *)(a3 + 48) = 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableFrameAttributeVFD and conformance AnimatableFrameAttributeVFD()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableFrameAttributeVFD and conformance AnimatableFrameAttributeVFD;
  if (!lazy protocol witness table cache variable for type AnimatableFrameAttributeVFD and conformance AnimatableFrameAttributeVFD)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableFrameAttributeVFD and conformance AnimatableFrameAttributeVFD);
  }
  return result;
}

unint64_t PreferencesOutputs.subscript.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  if (v2)
  {
    uint64_t v3 = (unsigned int *)(*(void *)v1 + 48);
    while (*((void *)v3 - 2) != a1)
    {
      v3 += 6;
      if (!--v2) {
        goto LABEL_5;
      }
    }
    unsigned __int8 v4 = 0;
    uint64_t v2 = *v3;
  }
  else
  {
LABEL_5:
    unsigned __int8 v4 = 1;
  }
  return v2 | ((unint64_t)v4 << 32);
}

void type metadata accessor for Focus<EnvironmentValues, RedactionReasons>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type Focus<EnvironmentValues, RedactionReasons> and conformance Focus<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Focus<EnvironmentValues, RedactionReasons>(255, a2, (uint64_t)&type metadata for EnvironmentValues, a3, MEMORY[0x263F288B0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _ViewInputs.scrapeableParentID.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized find<A>(_:key:)(v3);
  if (v4) {
    int v5 = *(_DWORD *)(v4 + 72);
  }
  else {
    int v5 = 0;
  }
  *a1 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void type metadata accessor for RendererEffectDisplayList<GraphicsBlendModeEffect>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for RendererEffectDisplayList();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type RendererEffectDisplayList<GraphicsBlendModeEffect> and conformance RendererEffectDisplayList<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for RendererEffectDisplayList<GraphicsBlendModeEffect>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double closure #1 in static _OpacityEffect._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, unsigned int a4@<W4>, double *a5@<X8>)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  int v8 = *(_DWORD *)(a2 + 24);
  int v9 = *(_DWORD *)(a2 + 28);
  int v10 = *(_DWORD *)(a2 + 32);
  int v11 = *(_DWORD *)(a2 + 36);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  int v14 = *(_DWORD *)(a2 + 56);
  int v15 = *(_DWORD *)(a2 + 60);
  int v16 = *(_DWORD *)(a2 + 64);
  int v17 = *(_DWORD *)(a2 + 68);
  int v19 = *(_DWORD *)(a2 + 72);
  int v18 = *(_DWORD *)(a2 + 76);
  int v20 = *(_DWORD *)(a2 + 80);
  unint64_t v46 = *(void *)a2;
  int v41 = v8;
  int v42 = v6;
  LODWORD(v47) = v6;
  uint64_t v48 = v7;
  int v49 = v8;
  int v50 = v9;
  int v39 = v10;
  int v40 = v9;
  int v51 = v10;
  int v52 = v11;
  int v37 = v14;
  int v38 = v11;
  uint64_t v53 = v12;
  uint64_t v54 = v13;
  int v55 = v14;
  int v56 = v15;
  int v35 = v16;
  int v36 = v15;
  int v57 = v16;
  int v58 = v17;
  int v34 = v17;
  int v59 = v19;
  int v60 = v18;
  int v61 = v20;
  a3(&v44, a1, &v46);
  uint64_t v21 = *(void *)(v13 + 16);
  if (v21)
  {
    uint64_t v22 = 32;
    while (*(ValueMetadata **)(v13 + v22) != &type metadata for ViewRespondersKey)
    {
      v22 += 16;
      if (!--v21) {
        goto LABEL_13;
      }
    }
    uint64_t v23 = *(void *)(v44 + 16);
    if (v23)
    {
      uint64_t v24 = (ValueMetadata **)(v44 + 48);
      while (*(v24 - 2) != &type metadata for ViewRespondersKey)
      {
        v24 += 3;
        if (!--v23)
        {
          uint64_t v24 = (ValueMetadata **)MEMORY[0x263F288F8];
          break;
        }
      }
    }
    else
    {
      uint64_t v24 = (ValueMetadata **)MEMORY[0x263F288F8];
    }
    unsigned int v25 = *(_DWORD *)v24;
    type metadata accessor for OpacityViewResponder();
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 216) = 0x3FF0000000000000;
    unint64_t v46 = v5;
    LODWORD(v47) = v42;
    uint64_t v48 = v7;
    int v49 = v41;
    int v50 = v40;
    int v51 = v39;
    int v52 = v38;
    uint64_t v53 = v12;
    uint64_t v54 = v13;
    int v55 = v37;
    int v56 = v36;
    int v57 = v35;
    int v58 = v34;
    int v59 = v19;
    int v60 = v18;
    int v61 = v20;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v27 = specialized DefaultLayoutViewResponder.init(inputs:)((uint64_t *)&v46, v26);
    swift_release();
    unint64_t v46 = __PAIR64__(v25, a4);
    id v47 = v27;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for [ViewResponder](0);
    lazy protocol witness table accessor for type OpacityResponderFilter and conformance OpacityResponderFilter();
    LODWORD(v26) = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LOBYTE(v46) = 0;
    PreferencesOutputs.subscript.setter(v26, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
  }
LABEL_13:
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.getter(v5);
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t v30 = swift_release_n();
  double v31 = MEMORY[0x270FA5388](v30);
  unint64_t v46 = v5;
  LODWORD(v47) = v42;
  uint64_t v48 = v7;
  int v49 = v41;
  int v50 = v40;
  int v51 = v39;
  int v52 = v38;
  uint64_t v53 = v12;
  uint64_t v54 = v13;
  int v55 = v37;
  int v56 = v36;
  int v57 = v35;
  int v58 = v34;
  int v59 = v19;
  int v60 = v18;
  int v61 = v20;
  (*(void (**)(uint64_t (*)(), double))(v29 + 8))(partial apply for implicit closure #1 in closure #1 in static _OpacityEffect._makeView(modifier:inputs:body:), v31);
  *(void *)a5 = v44;
  double result = v45;
  a5[1] = v45;
  return result;
}

void type metadata accessor for [(_:)](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for [ViewResponder](uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TypedElement<_ViewInputs.ScrapeableParentID>(255, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for RendererEffectDisplayList);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OpacityResponderFilter and conformance OpacityResponderFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type OpacityResponderFilter and conformance OpacityResponderFilter;
  if (!lazy protocol witness table cache variable for type OpacityResponderFilter and conformance OpacityResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpacityResponderFilter and conformance OpacityResponderFilter);
  }
  return result;
}

uint64_t type metadata accessor for OpacityViewResponder()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type AnimatableFrameAttribute and conformance AnimatableFrameAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableFrameAttribute and conformance AnimatableFrameAttribute;
  if (!lazy protocol witness table cache variable for type AnimatableFrameAttribute and conformance AnimatableFrameAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableFrameAttribute and conformance AnimatableFrameAttribute);
  }
  return result;
}

uint64_t partial apply for closure #2 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in static CombinedVisualEffect._makeVisualEffect(effect:inputs:body:)(a1, a2, *(_DWORD *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

uint64_t _ViewInputs.transaction.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 28) = result;
  return result;
}

uint64_t protocol witness for AccessibilityCombinable.merge(with:) in conformance <A> A?(void (*a1)(uint64_t, char *, uint64_t), uint64_t a2, uint64_t a3)
{
  return Optional<A>.merge(with:)(a1, a2, *(void *)(a3 - 8));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _ViewList_ReleaseElements(uint64_t *a1, uint64_t *a2)
{
  return specialized static _ViewList_ReleaseElements.== infix(_:_:)(*a1, *a2);
}

uint64_t partial apply for closure #1 in ScrollStateRequestTransform.findClosestSubview<A>(idType:position:anchor:collection:containerSize:)(double *a1, uint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  a3.n128_u64[0] = *(void *)(v6 + 32);
  a4.n128_u64[0] = *(void *)(v6 + 40);
  a5.n128_u64[0] = *(void *)(v6 + 48);
  a6.n128_u64[0] = *(void *)(v6 + 56);
  return closure #1 in ScrollStateRequestTransform.findClosestSubview<A>(idType:position:anchor:collection:containerSize:)(a1, a3, a4, a5, a6, a2, *(double **)(v6 + 64), *(char **)(v6 + 72), *(void *)(v6 + 16), *(void *)(v6 + 24));
}

uint64_t View.foregroundColor(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.defaultForegroundColor(_:)(a1, a2, a3);
}

uint64_t initializeBufferWithCopyOfBuffer for LayoutSubviews(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  char v3 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t static Edge.Set.bottom.getter()
{
  return 4;
}

uint64_t instantiation function for generic protocol witness table for DynamicViewList<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void protocol witness for static AlignmentID._combineExplicit(childValue:_:into:) in conformance VerticalAlignment.LastTextBaseline(double a1, uint64_t a2, uint64_t a3)
{
  double v3 = *(double *)a3;
  if (*(unsigned char *)(a3 + 8)) {
    double v3 = -INFINITY;
  }
  if (v3 > a1) {
    a1 = v3;
  }
  *(double *)a3 = a1;
  *(unsigned char *)(a3 + 8) = 0;
}

void static AccessibilityTraits.isButton.getter(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t CountingIndexCollection.count.getter()
{
  return dispatch thunk of Collection.count.getter();
}

void *static Semantics.v5.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v5, &static Semantics.v5, a1);
}

uint64_t dispatch thunk of AnyColorBox.resolve(in:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  int v11 = (char *)&v22[-1] - v10;
  uint64_t v12 = *v3;
  if (*(void *)(v12 + 16) && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v14 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v12 + 56) + 40 * v13, (uint64_t)v22);
    uint64_t v15 = v23;
    uint64_t v16 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v16 + 8))(v25, v15, v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
  else
  {
    memset(v25, 0, sizeof(v25));
  }
  type metadata accessor for Any?(0, (unint64_t *)&lazy cache variable for type metadata for Any?);
  int v17 = swift_dynamicCast();
  int v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);
  if (v17)
  {
    uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
    v18(v11, 0, 1, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a3, v11, AssociatedTypeWitness);
  }
  else
  {
    v18(v11, 1, 1, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t AccessibilityPropertiesEntry.anyValue.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  a2[3] = v3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v5(boxed_opaque_existential_1, v2, v3);
}

void storeEnumTagSinglePayload for AccessibilityNullableOptionSet(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 >= a2)
  {
    switch(v11)
    {
      case 1:
        a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          uint64_t v16 = *(void (**)(void))(v6 + 56);
          v16();
        }
        break;
    }
  }
  else
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        break;
      default:
        return;
    }
  }
}

double protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.TraitsKey@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static AccessibilityProperties.TraitsKey.defaultValue;
  *a1 = static AccessibilityProperties.TraitsKey.defaultValue;
  return result;
}

double protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.VisibilityKey@<D0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static AccessibilityProperties.VisibilityKey.defaultValue;
  *a1 = static AccessibilityProperties.VisibilityKey.defaultValue;
  return result;
}

uint64_t GraphHost.removePreference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GraphHost.addPreference<A>(_:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))closure #1 in GraphHost.removePreference<A>(_:));
}

uint64_t LayoutSubview.dimensions(in:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v6 = *((_DWORD *)v5 + 2);
  uint64_t v12 = *v5;
  int v13 = v6;
  uint64_t v8 = a1;
  char v9 = a2 & 1;
  uint64_t v10 = a3;
  char v11 = a4 & 1;
  return LayoutProxy.dimensions(in:)((uint64_t)&v8, a5);
}

ValueMetadata *type metadata accessor for MenuStyleContext()
{
  return &type metadata for MenuStyleContext;
}

ValueMetadata *type metadata accessor for _VStackLayout()
{
  return &type metadata for _VStackLayout;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(void *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void))specialized UnaryChildGeometry.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void))specialized UnaryChildGeometry.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void))specialized UnaryChildGeometry.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized UpdateEnvironment.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void, void))ChildTransaction.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void))specialized UnaryChildGeometry.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void, void))specialized UnaryPositionAwareChildGeometry.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void))specialized UnaryChildGeometry.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void))specialized UnaryChildGeometry.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void))specialized UnaryChildGeometry.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void, void))ChildValueTransaction.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))MergeTraits.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void, void))specialized UnaryPositionAwareChildGeometry.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))_PreferenceWritingModifier<>.ColorSchemeTrait.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized _ForegroundStyleModifier2.ForegroundStyleEnvironment.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))StyledTextContentView.ArchivedTransitionEnvironment.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void))specialized UnaryChildGeometry.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void))specialized UnaryChildGeometry.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))_ContentTransitionModifier.ChildEnvironment.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void))specialized UnaryChildGeometry.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void))specialized LayoutChildEvents.value.getter, (void (*)(void))type metadata accessor for [EventID : EventType]);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void))specialized PreferenceTransform.value.getter, (void (*)(void))type metadata accessor for [ScrollTargetRole.Role : [ScrollableCollection]]);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void))specialized UnaryChildGeometry.value.getter);
}

ValueMetadata *type metadata accessor for ResetScrollInputsModifier()
{
  return &type metadata for ResetScrollInputsModifier;
}

ValueMetadata *type metadata accessor for Path()
{
  return &type metadata for Path;
}

uint64_t static Color.clear.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for clear);
}

BOOL ResolvedStyledText.isEmpty.getter()
{
  uint64_t v1 = *(void **)(v0 + 216);
  return !v1 || objc_msgSend(v1, sel_length) == 0;
}

uint64_t SectionAccumulator.RowIDs.startIndex.getter()
{
  if (*(void *)(*(void *)v0 + 16)) {
    return *(void *)(*(void *)v0 + 72);
  }
  else {
    return 0;
  }
}

uint64_t initializeWithCopy for ShapeStyledResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  return a1;
}

ValueMetadata *type metadata accessor for Transaction()
{
  return &type metadata for Transaction;
}

uint64_t type metadata completion function for StaticBody()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for AnyLayoutEngineBox()
{
  return self;
}

double static Time.infinity.getter@<D0>(void *a1@<X8>)
{
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double result = *(double *)&static Time.infinity;
  *a1 = static Time.infinity;
  return result;
}

uint64_t static EnvironmentKey<>._valuesEqual(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

BOOL specialized static UnitRect.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance BackgroundInfo(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _PreferenceActionModifier<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  return static _PreferenceActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a6);
}

uint64_t static HorizontalAlignment.leading.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for leading, (uint64_t)&static HorizontalAlignment.leading);
}

ValueMetadata *type metadata accessor for Text.Case()
{
  return &type metadata for Text.Case;
}

double ScrollGeometry.contentSize.getter()
{
  return *(double *)(v0 + 16);
}

__C::CGRect __swiftcall CGRect.init(_:)(SwiftUI::ViewFrame *a1)
{
  double x = a1->origin.value.x;
  double y = a1->origin.value.y;
  double width = a1->size.value.width;
  double height = a1->size.value.height;
  result.size.double height = height;
  result.size.double width = width;
  result.origin.double y = y;
  result.origin.double x = x;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> MutableBox<A>(uint64_t *a1, uint64_t *a2)
{
  return static MutableBox<A>.== infix(_:_:)(*a1, *a2);
}

ValueMetadata *type metadata accessor for Color.RGBColorSpace()
{
  return &type metadata for Color.RGBColorSpace;
}

double ViewTransform.init()@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t assignWithTake for Cluster #1 in static Text.Effect.stopMarkers(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t AccessibilityTraitSet.init(traits:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (unsigned __int8 *)(result + 32);
    while (1)
    {
      unsigned int v6 = *v5++;
      uint64_t v7 = 1 << v6;
      uint64_t v8 = v6 >= 0x40 ? 0 : v7;
      BOOL v9 = __CFADD__(v4, v8);
      v4 += v8;
      if (v9) {
        break;
      }
      if (!--v3) {
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v4 = 0;
LABEL_10:
    double result = swift_bridgeObjectRelease();
    *a2 = v4;
  }
  return result;
}

_OWORD *_AnyLayoutBox.updateCache(_:subviews:)(void *a1, int *a2)
{
  uint64_t v5 = *(void *)(*(void *)v2 + 184);
  uint64_t v26 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = &v22[-v6];
  uint64_t v9 = *(void *)(v8 + 192);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unsigned int v14 = &v22[-v13];
  int v15 = *a2;
  uint64_t v16 = *((void *)a2 + 1);
  char v17 = *((unsigned char *)a2 + 16);
  int v18 = *((unsigned __int8 *)a2 + 17);
  if (*a1 == v5)
  {
    int v23 = v18;
    uint64_t v24 = v11;
    uint64_t v25 = v12;
    outlined init with copy of Any((uint64_t)(a1 + 1), (uint64_t)&v31);
    swift_dynamicCast();
    uint64_t v20 = v2 + *(void *)(*(void *)v2 + 200);
    swift_beginAccess();
    uint64_t v21 = v26;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v26 + 16))(v7, v20, v5);
    int v27 = v15;
    uint64_t v28 = v16;
    char v29 = v17;
    char v30 = v23;
    (*(void (**)(unsigned char *, int *, uint64_t, uint64_t))(v9 + 40))(v14, &v27, v5, v9);
    (*(void (**)(unsigned char *, uint64_t))(v21 + 8))(v7, v5);
    $defer #1 <A>() in _AnyLayoutBox.updateCache(_:subviews:)((uint64_t)a1, (uint64_t)v14);
    return (_OWORD *)(*(uint64_t (**)(unsigned char *, uint64_t))(v25 + 8))(v14, v24);
  }
  else
  {
    outlined destroy of _AnyAnimatableData((uint64_t)a1);
    int v31 = v15;
    uint64_t v32 = v16;
    char v33 = v17;
    char v34 = v18;
    return _AnyLayoutBox.makeCache(subviews:)((uint64_t)&v31, a1);
  }
}

void *protocol witness for Layout.updateCache(_:subviews:) in conformance _HStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for Layout.updateCache(_:subviews:) in conformance _VStackLayout(a1, a2, a3, a4, 0);
}

unint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance <> VStack<A>@<X0>(double a1@<X1>, uint64_t a2@<X8>)
{
  return specialized HVStack.spacing(subviews:cache:)(a1, a2);
}

unint64_t specialized HVStack.spacing(subviews:cache:)@<X0>(double a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void **)(*(void *)&a1 + 104);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  }
  unint64_t result = StackLayout.UnmanagedImplementation.spacing()(a1, &v7);
  char v6 = *(unsigned char *)(*(void *)&a1 + 97);
  *(void *)a2 = v7;
  *(unsigned char *)(a2 + 8) = v6;
  *(void *)(*(void *)&a1 + 104) = v4;
  return result;
}

uint64_t _AnyLayoutBox.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, int a2, uint64_t a3, int a4, int *a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  int v34 = a2;
  int v35 = a4;
  uint64_t v36 = a1;
  uint64_t v37 = a3;
  uint64_t v17 = *(void *)(*(void *)v10 + 184);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v20 = &v30[-v19];
  uint64_t v22 = *(void *)(v21 + 192);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v26 = &v30[-v25];
  int v33 = *a5;
  uint64_t v32 = *((void *)a5 + 1);
  int v31 = *((unsigned __int8 *)a5 + 16);
  LOBYTE(a5) = *((unsigned char *)a5 + 17);
  outlined init with copy of Any(a6 + 8, (uint64_t)v44);
  swift_dynamicCast();
  uint64_t v27 = v10 + *(void *)(*(void *)v10 + 200);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v18 + 16))(v20, v27, v17);
  int v40 = v33;
  uint64_t v41 = v32;
  char v42 = v31;
  uint64_t v28 = *(void (**)(uint64_t, double, double, double, double))(v22 + 64);
  char v43 = (char)a5;
  char v39 = v34 & 1;
  char v38 = v35 & 1;
  v28(v36, a7, a8, a9, a10);
  (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v20, v17);
  $defer #1 <A>() in _AnyLayoutBox.updateCache(_:subviews:)(a6, (uint64_t)v26);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v24 + 8))(v26, AssociatedTypeWitness);
}

uint64_t _AnyLayoutBox.explicitAlignment(of:in:proposal:subviews:cache:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int *a6, uint64_t a7, double a8, double a9, double a10, double a11)
{
  int v36 = a3;
  int v37 = a5;
  uint64_t v39 = a2;
  uint64_t v40 = a4;
  uint64_t v38 = a1;
  uint64_t v18 = *(void *)(*(void *)v11 + 184);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v21 = &v32[-v20];
  uint64_t v23 = *(void *)(v22 + 192);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v27 = &v32[-v26];
  int v35 = *a6;
  uint64_t v34 = *((void *)a6 + 1);
  int v33 = *((unsigned __int8 *)a6 + 16);
  LOBYTE(a6) = *((unsigned char *)a6 + 17);
  outlined init with copy of Any(a7 + 8, (uint64_t)v47);
  swift_dynamicCast();
  uint64_t v28 = v11 + *(void *)(*(void *)v11 + 200);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v19 + 16))(v21, v28, v18);
  int v43 = v35;
  uint64_t v44 = v34;
  char v45 = v33;
  char v29 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v23 + 80);
  char v46 = (char)a6;
  char v42 = v36 & 1;
  char v41 = v37 & 1;
  uint64_t v30 = v29(v38, v39, a8, a9, a10, a11);
  (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v21, v18);
  $defer #1 <A>() in _AnyLayoutBox.updateCache(_:subviews:)(a7, (uint64_t)v27);
  (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v27, AssociatedTypeWitness);
  return v30;
}

{
  uint64_t v11;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedTypeWitness;
  uint64_t v25;
  uint64_t v26;
  unsigned char *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, double, double, double, double);
  uint64_t v30;
  unsigned char v32[12];
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  int v43;
  uint64_t v44;
  char v45;
  char v46;
  unsigned char v47[40];

  int v36 = a3;
  int v37 = a5;
  uint64_t v39 = a2;
  uint64_t v40 = a4;
  uint64_t v38 = a1;
  uint64_t v18 = *(void *)(*(void *)v11 + 184);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v21 = &v32[-v20];
  uint64_t v23 = *(void *)(v22 + 192);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v27 = &v32[-v26];
  int v35 = *a6;
  uint64_t v34 = *((void *)a6 + 1);
  int v33 = *((unsigned __int8 *)a6 + 16);
  LOBYTE(a6) = *((unsigned char *)a6 + 17);
  outlined init with copy of Any(a7 + 8, (uint64_t)v47);
  swift_dynamicCast();
  uint64_t v28 = v11 + *(void *)(*(void *)v11 + 200);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v19 + 16))(v21, v28, v18);
  int v43 = v35;
  uint64_t v44 = v34;
  char v45 = v33;
  char v29 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v23 + 72);
  char v46 = (char)a6;
  char v42 = v36 & 1;
  char v41 = v37 & 1;
  uint64_t v30 = v29(v38, v39, a8, a9, a10, a11);
  (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v21, v18);
  $defer #1 <A>() in _AnyLayoutBox.updateCache(_:subviews:)(a7, (uint64_t)v27);
  (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v27, AssociatedTypeWitness);
  return v30;
}

double _AnyLayoutBox.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, int a2, uint64_t a3, int a4, int *a5, uint64_t a6)
{
  int v27 = a2;
  int v28 = a4;
  uint64_t v29 = a1;
  uint64_t v30 = a3;
  uint64_t v9 = *(void *)(*(void *)v6 + 184);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = &v23[-v11];
  uint64_t v14 = *(void *)(v13 + 192);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v18 = &v23[-v17];
  int v26 = *a5;
  uint64_t v25 = *((void *)a5 + 1);
  int v24 = *((unsigned __int8 *)a5 + 16);
  LOBYTE(a5) = *((unsigned char *)a5 + 17);
  outlined init with copy of Any(a6 + 8, (uint64_t)v37);
  swift_dynamicCast();
  uint64_t v19 = v6 + *(void *)(*(void *)v6 + 200);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v12, v19, v9);
  int v33 = v26;
  uint64_t v34 = v25;
  char v35 = v24;
  uint64_t v20 = *(double (**)(uint64_t))(v14 + 56);
  char v36 = (char)a5;
  char v32 = v27 & 1;
  char v31 = v28 & 1;
  double v21 = v20(v29);
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
  $defer #1 <A>() in _AnyLayoutBox.updateCache(_:subviews:)(a6, (uint64_t)v18);
  (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  return v21;
}

_OWORD *$defer #1 <A>() in _AnyLayoutBox.updateCache(_:subviews:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_1, a2, AssociatedTypeWitness);
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  return outlined init with take of Any(&v7, (_OWORD *)(a1 + 8));
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance VStackLayout(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, __n128 *a6)
{
  return specialized HVStack.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, a6);
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance _VStackLayout(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance _VStackLayout(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, void, uint64_t))specialized HVStack.sizeThatFits(proposal:subviews:cache:));
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance _VStackLayout(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, void, uint64_t))
{
  return a9(a1, a2 & 1, a3);
}

double specialized HVStack.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 *a8)
{
  return specialized HVStack.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, a8);
}

{
  return specialized HVStack.sizeThatFits(proposal:subviews:cache:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

double specialized HVStack.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, __n128 *a5)
{
  uint64_t v10 = (void *)a5[6].n128_u64[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
  }
  uint64_t v11 = v10[2];
  v13.n128_u8[0] = a2 & 1;
  closure #1 in StackLayout.sizeThatFits(_:)(a5, (uint64_t)(v10 + 4), v11, *(double *)&a1, a2 & 1, *(double *)&a3, a4 & 1, &v13);
  double result = v13.n128_f64[0];
  a5[6].n128_u64[1] = (unint64_t)v10;
  return result;
}

__n128 closure #1 in StackLayout.sizeThatFits(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double a4@<X3>, char a5@<W4>, double a6@<X5>, char a7@<W6>, __n128 *a8@<X8>)
{
  if (a1[2].n128_u8[8])
  {
    if ((a5 & 1) == 0) {
      goto LABEL_10;
    }
  }
  else if ((a5 & 1) != 0 || a1[2].n128_f64[0] != a4)
  {
    goto LABEL_10;
  }
  if (a1[3].n128_u8[8])
  {
    if (a7) {
      goto LABEL_20;
    }
LABEL_10:
    if (!a3) {
      goto LABEL_20;
    }
    goto LABEL_11;
  }
  if (a7) {
    goto LABEL_10;
  }
  if (a1[3].n128_f64[0] != a6 && a3 != 0)
  {
LABEL_11:
    if (a1[1].n128_u8[1]) {
      uint64_t v14 = *(void *)&a4;
    }
    else {
      uint64_t v14 = *(void *)&a6;
    }
    if (a1[1].n128_u8[1]) {
      char v15 = a5;
    }
    else {
      char v15 = a7;
    }
    char v16 = a5 & 1;
    char v17 = a7 & 1;
    specialized StackLayout.UnmanagedImplementation.placeChildren1(in:minorProposalForChild:)(*(uint64_t *)&a4, a5 & 1, *(uint64_t *)&a6, a7 & 1, (uint64_t)a1, a2, a3, v14, v15 & 1);
    if (a1[6].n128_u8[2] == 1) {
      StackLayout.UnmanagedImplementation.resizeAnyChildrenWithTrailingOverflow(in:)(*(uint64_t *)&a4, v16, *(uint64_t *)&a6, v17, (uint64_t)a1, a2, a3);
    }
    a1[2].n128_f64[0] = a4;
    a1[2].n128_u8[8] = v16;
    a1[3].n128_f64[0] = a6;
    a1[3].n128_u8[8] = v17;
  }
LABEL_20:
  __n128 result = a1[4];
  *a8 = result;
  return result;
}

uint64_t specialized StackLayout.UnmanagedImplementation.placeChildren1(in:minorProposalForChild:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = a7;
  char v12 = a9 & 1;
  if (*(unsigned char *)(a5 + 17)) {
    char v13 = a4;
  }
  else {
    char v13 = a2;
  }
  if (v13) {
    uint64_t result = specialized StackLayout.UnmanagedImplementation.sizeChildrenIdeally(in:minorProposalForChild:)(a5, a6, a7, a8, v12);
  }
  else {
    uint64_t result = specialized StackLayout.UnmanagedImplementation.sizeChildrenGenerallyWithConcreteMajorProposal(in:minorProposalForChild:)(a1, a2 & 1, a3, a4 & 1, a5, a6, a7, a8, v12);
  }
  double v15 = 0.0;
  double v16 = 0.0;
  double v17 = 0.0;
  if (!a6)
  {
LABEL_33:
    if (!v9) {
      goto LABEL_59;
    }
    if (v9 < 0)
    {
LABEL_66:
      __break(1u);
      return result;
    }
    uint64_t v30 = 0;
    int v31 = *(unsigned __int8 *)(a5 + 17);
    char v32 = (double *)(a6 + 96);
    double v15 = 0.0;
    while (1)
    {
      double v35 = v15 + *(v32 - 7);
      if ((~*(void *)&v35 & 0x7FF0000000000000) != 0 || (*(void *)&v35 & 0xFFFFFFFFFFFFFLL) == 0)
      {
        if ((v31 & 1) == 0)
        {
          *(v32 - 5) = v35;
LABEL_50:
          int v37 = v32 - 4;
          goto LABEL_51;
        }
        *(v32 - 4) = v35;
      }
      else if ((v31 & 1) == 0)
      {
        goto LABEL_50;
      }
      int v37 = (double *)(a6 + 120 * v30 + 56);
LABEL_51:
      double v38 = *v37 - v16;
      if ((~*(void *)&v38 & 0x7FF0000000000000) != 0 || (*(void *)&v38 & 0xFFFFFFFFFFFFFLL) == 0)
      {
        if (v31)
        {
          *(v32 - 5) = v38;
          double v34 = *v32;
        }
        else
        {
          *(v32 - 4) = v38;
          double v34 = *(v32 - 1);
        }
      }
      else
      {
        int v33 = v32 - 1;
        if (v31) {
          int v33 = v32;
        }
        double v34 = *v33;
      }
      double v15 = v35 + v34;
      v32 += 15;
      ++v30;
      if (!--v9) {
        goto LABEL_59;
      }
    }
  }
  if (v9)
  {
    uint64_t v18 = (CGFloat *)(a6 + 96);
    uint64_t v19 = 120 * v9;
    while (1)
    {
      double v20 = *(v18 - 5);
      double v21 = *(v18 - 4);
      double v22 = *(v18 - 1);
      double v23 = *v18;
      int v24 = *(unsigned __int8 *)(a5 + 17);
      v42.origin.double x = v20;
      v42.origin.double y = v21;
      v42.size.double width = v22;
      v42.size.double height = *v18;
      uint64_t result = CGRectIsNull(v42);
      double v25 = 0.0;
      double v26 = 0.0;
      if ((result & 1) == 0)
      {
        if (v24) {
          double v27 = v22;
        }
        else {
          double v27 = v23;
        }
        if (v24) {
          double v26 = v20;
        }
        else {
          double v26 = v21;
        }
        double v28 = v26 + v27;
        if (v28 >= v26) {
          double v29 = v26;
        }
        else {
          double v29 = v28;
        }
        if (v26 <= v28) {
          double v26 = v28;
        }
        if (v29 > v26) {
          double v25 = 0.0;
        }
        else {
          double v25 = v29;
        }
        if (v29 > v26) {
          double v26 = 0.0;
        }
      }
      if (v25 < v16) {
        double v16 = v25;
      }
      if (v17 <= v26) {
        double v17 = v26;
      }
      if (v16 > v17) {
        break;
      }
      v18 += 15;
      v19 -= 120;
      if (!v19) {
        goto LABEL_33;
      }
    }
    __break(1u);
    goto LABEL_66;
  }
LABEL_59:
  double v40 = v17 - v16;
  if (*(unsigned char *)(a5 + 17)) {
    double v41 = v17 - v16;
  }
  else {
    double v41 = v15;
  }
  if (*(unsigned char *)(a5 + 17)) {
    double v40 = v15;
  }
  *(double *)(a5 + 64) = v41;
  *(double *)(a5 + 72) = v40;
  return result;
}

uint64_t specialized StackLayout.UnmanagedImplementation.sizeChildrenIdeally(in:minorProposalForChild:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (!a3) {
    return result;
  }
  if (a3 < 0) {
    goto LABEL_45;
  }
  uint64_t v5 = result;
  unint64_t v6 = 0;
  int v30 = *MEMORY[0x263F288F8];
  long long v7 = (double *)(a2 + 112);
  uint64_t v8 = 32;
  while (1)
  {
    unsigned __int8 v20 = *(unsigned char *)(v5 + 17);
    double v21 = v20 ? *(double *)&a4 : 0.0;
    double v22 = *(unsigned char *)(v5 + 17) ? 0.0 : *(double *)&a4;
    uint64_t v23 = *(void *)(v5 + 88);
    unint64_t v24 = *(void *)(v23 + 16);
    if ((*(unsigned char *)(v5 + 96) & 1) == 0) {
      break;
    }
    if (v6 >= v24) {
      goto LABEL_44;
    }
    double v25 = (_DWORD *)(v23 + v8);
LABEL_33:
    if (*v25 == v30)
    {
      Inputuint64_t Value = (double *)&static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        Inputuint64_t Value = (double *)&static LayoutComputer.defaultValue;
      }
    }
    else
    {
      Inputuint64_t Value = (double *)AGGraphGetInputValue();
    }
    double v28 = *InputValue;
    double v27 = (void *)*((void *)InputValue + 1);
    uint64_t v29 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v29 != -1) {
      swift_once();
    }
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (!_MovableLockIsOwner(static Update._lock)) {
        goto LABEL_46;
      }
    }
    ++v6;
    double v34 = v21;
    if ((v20 | a5)) {
      double v9 = NAN;
    }
    else {
      double v9 = v22;
    }
    LOBYTE(v35) = (v20 ^ 1 | a5) & 1;
    double v36 = v22;
    LOBYTE(v37) = (v20 | a5) & 1;
    if ((_BYTE)v35) {
      double v10 = NAN;
    }
    else {
      double v10 = v21;
    }
    double v11 = (*(double (**)(double *))(**(void **)&v28 + 120))(&v34);
    uint64_t v13 = v12;
    unint64_t v14 = *(void *)v5;
    double v34 = v28;
    double v35 = v27;
    double v36 = v11;
    uint64_t v37 = v12;
    double v38 = v10;
    double v39 = v9;
    ViewDimensions.subscript.getter(v14);
    double v16 = INFINITY;
    if ((*(void *)&v15 & 0xFFFFFFFFFFFFFLL) == 0) {
      double v16 = v15;
    }
    if ((~*(void *)&v15 & 0x7FF0000000000000) == 0) {
      double v15 = v16;
    }
    double v17 = -v15;
    if (*(unsigned char *)(v5 + 17)) {
      double v18 = v17;
    }
    else {
      double v18 = 0.0;
    }
    if (*(unsigned char *)(v5 + 17)) {
      double v19 = 0.0;
    }
    else {
      double v19 = v17;
    }
    uint64_t result = swift_release();
    *(v7 - 7) = v18;
    *(v7 - 6) = v19;
    *(v7 - 5) = v28;
    *((void *)v7 - 4) = v27;
    *(v7 - 3) = v11;
    *((void *)v7 - 2) = v13;
    v8 += 12;
    *(v7 - 1) = v10;
    *long long v7 = v9;
    v7 += 15;
    if (a3 == v6) {
      return result;
    }
  }
  if (v6 < v24)
  {
    double v25 = (_DWORD *)(v23 + 8 * v6 + 32);
    goto LABEL_33;
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double static UnitPoint.topTrailing.getter()
{
  return 1.0;
}

void *__swift_memcpy15_8(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 7) = *(uint64_t *)((char *)a2 + 7);
  *uint64_t result = v2;
  return result;
}

uint64_t type metadata completion function for ConcatenatedCollectionIndex()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = type metadata accessor for _ConcatenatedCollectionIndexRepresentation();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t static ConcatenatedCollectionIndex.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = a1;
  uint64_t v49 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v43 = (char *)v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  CGRect v42 = (char *)v39 - v5;
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v45 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  double v41 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  double v40 = (char *)v39 - v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedConformanceWitness();
  uint64_t v50 = v6;
  uint64_t v51 = AssociatedTypeWitness;
  v39[0] = v11;
  v39[1] = AssociatedConformanceWitness;
  uint64_t v52 = AssociatedConformanceWitness;
  uint64_t v53 = v11;
  uint64_t v12 = type metadata accessor for _ConcatenatedCollectionIndexRepresentation();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  double v15 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  double v18 = (char *)v39 - v17;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v44 = *(void *)(TupleTypeMetadata2 - 8);
  double v20 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  double v22 = (char *)v39 - v21;
  unint64_t v24 = (char *)v39 + *(int *)(v23 + 48) - v21;
  uint64_t v46 = v13;
  double v25 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
  v25((char *)v39 - v21, v48, v12, v20);
  ((void (*)(char *, uint64_t, uint64_t))v25)(v24, v49, v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    ((void (*)(char *, char *, uint64_t))v25)(v15, v22, v12);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v26 = v47;
      double v27 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
      double v28 = v42;
      v27(v42, v15, AssociatedTypeWitness);
      uint64_t v29 = v43;
      v27(v43, v24, AssociatedTypeWitness);
      char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      int v31 = *(void (**)(char *, uint64_t))(v26 + 8);
      v31(v29, AssociatedTypeWitness);
      v31(v28, AssociatedTypeWitness);
LABEL_9:
      uint64_t v32 = v46;
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v47 + 8))(v15, AssociatedTypeWitness);
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v25)(v18, v22, v12);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v33 = v45;
      double v34 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
      double v35 = v40;
      v34(v40, v18, v6);
      double v36 = v41;
      v34(v41, v24, v6);
      char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v37 = *(void (**)(char *, uint64_t))(v33 + 8);
      v37(v36, v6);
      v37(v35, v6);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v6);
  }
  char v30 = 0;
  uint64_t v32 = v44;
  uint64_t v12 = TupleTypeMetadata2;
LABEL_10:
  (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v12);
  return v30 & 1;
}

uint64_t ConcatenatedCollection.endIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness - 8);
  uint64_t v4 = (char *)&v6 - v3;
  dispatch thunk of Collection.endIndex.getter();
  return ConcatenatedCollectionIndex.init(second:)((uint64_t)v4, a1);
}

uint64_t ConcatenatedCollection.startIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness - 8);
  uint64_t v4 = (char *)&v9 - v3;
  uint64_t v5 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v9 - v6;
  if (dispatch thunk of Collection.isEmpty.getter())
  {
    dispatch thunk of Collection.startIndex.getter();
    return ConcatenatedCollectionIndex.init(second:)((uint64_t)v7, a1);
  }
  else
  {
    dispatch thunk of Collection.startIndex.getter();
    return ConcatenatedCollectionIndex.init(first:)((uint64_t)v4, a1);
  }
}

uint64_t ConcatenatedCollectionIndex.init(second:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a2, a1, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for _ConcatenatedCollectionIndexRepresentation();
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for _ConcatenatedCollectionIndexRepresentation()
{
  return swift_getGenericMetadata();
}

ValueMetadata *type metadata accessor for Namespace.ID()
{
  return &type metadata for Namespace.ID;
}

uint64_t type metadata accessor for LinearKeyframe()
{
  return __swift_instantiateGenericMetadata();
}

BOOL static LayoutDirection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t instantiation function for generic protocol witness table for UnwrapConditional<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for DynamicBody()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

BOOL static GraphHost.isUpdating.getter()
{
  if (one-time initialization token for sharedGraph != -1) {
    swift_once();
  }
  return AGGraphGetCounter() != 0;
}

uint64_t static Update.ensure<A>(_:)(void (*a1)(uint64_t))
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v2 = static Update._lock;
  _MovableLockLock(static Update._lock);
  closure #1 in static Update.ensure<A>(_:)(a1);
  return _MovableLockUnlock(v2);
}

uint64_t closure #1 in static Update.ensure<A>(_:)(void (*a1)(uint64_t))
{
  uint64_t v2 = specialized static Update.begin()();
  a1(v2);
  return static Update.end()();
}

uint64_t static Alignment.topLeading.getter()
{
  return static Alignment.center.getter(&one-time initialization token for topLeading, (uint64_t)&static Alignment.topLeading);
}

void static ContentShapeKinds.contextMenuPreview.getter(void *a1@<X8>)
{
  *a1 = 4;
}

uint64_t EnvironmentObject.init()()
{
  return 0;
}

uint64_t partial apply for closure #2 in static DynamicPropertyCache.fields(of:)(uint64_t a1, uint64_t a2, void *a3)
{
  return closure #2 in static DynamicPropertyCache.fields(of:)(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t _ViewInputs.time.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t Anchor.Source.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  return Anchor.Source.init<A>(_:)(a1, a2, (void (*)(void))type metadata accessor for OptionalAnchorBox);
}

{
  return Anchor.Source.init<A>(_:)(a1, a2, (void (*)(void))type metadata accessor for ArrayAnchorBox);
}

ValueMetadata *type metadata accessor for Circle()
{
  return &type metadata for Circle;
}

uint64_t Bindable<A>.init(wrappedValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.defaultFont : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.symbolFont : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t getEnumTagSinglePayload for AccessibilityValueStorage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

void *ViewDimensions.init(guideComputer:size:proposal:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5 = result[1];
  double v6 = *(double *)a2;
  double v7 = *(double *)(a2 + 16);
  if (*(unsigned char *)(a2 + 8)) {
    double v6 = NAN;
  }
  if (*(unsigned char *)(a2 + 24)) {
    double v7 = NAN;
  }
  *(void *)a3 = *result;
  *(void *)(a3 + 8) = v5;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = v6;
  *(double *)(a3 + 40) = v7;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Text.Modifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of Text.Modifier(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t _withObservation<A>(do:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v41 = a3;
  CGRect v42 = a4;
  uint64_t v40 = a1;
  _s11Observation0A8TrackingV11_AccessListVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v7);
  double v10 = (char *)&v37 - v9;
  uint64_t v11 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v39 = *(void *)(a5 - 8);
  double v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v12 + 56))(a2, 1, 1, v11, v19);
  uint64_t v44 = a5;
  uint64_t v45 = v41;
  uint64_t v46 = v42;
  unint64_t v22 = type metadata accessor for Error();
  uint64_t v23 = v48;
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a2, (uint64_t)_s7SwiftUI16_withObservation2dox5value_0D00D8TrackingV11_AccessListVSg06accessI0txyKXE_tKlFxSpyAJGKXEfU_TA_0, (uint64_t)v43, v8, v22, a5, MEMORY[0x263F8E4E0], (uint64_t)v47);
  if (v23) {
    return _s11Observation0A8TrackingV11_AccessListVSgWOhTm_0(a2, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  }
  uint64_t v41 = 0;
  CGRect v42 = v14;
  uint64_t v48 = v17;
  _s11Observation0A8TrackingV11_AccessListVSgWOcTm_1(a2, (uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    _s11Observation0A8TrackingV11_AccessListVSgWOhTm_0((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
    uint64_t v26 = v39;
    uint64_t v25 = v40;
    double v27 = v21;
  }
  else
  {
    double v28 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    uint64_t v29 = v48;
    v28(v48, v10, v11);
    if (one-time initialization token for lastestAccessLists != -1) {
      swift_once();
    }
    char v30 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    uint64_t v38 = v11;
    v30(v42, v29, v11);
    swift_beginAccess();
    int v31 = static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      int v31 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    double v27 = v21;
    unint64_t v34 = *((void *)v31 + 2);
    unint64_t v33 = *((void *)v31 + 3);
    if (v34 >= v33 >> 1)
    {
      int v31 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    *((void *)v31 + 2) = v34 + 1;
    unint64_t v35 = (unint64_t)v31
        + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
        + *(void *)(v12 + 72) * v34;
    uint64_t v36 = v38;
    v28((char *)v35, v42, v38);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v48, v36);
    uint64_t v26 = v39;
    uint64_t v25 = v40;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v25, v27, a5);
}

uint64_t Rule.withObservation<A>(do:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  return StatefulRule.withObservation<A>(do:)(a1, a2, a3, a4, a5, (uint64_t)_s7SwiftUI16_withObservation2dox5value_0D00D8TrackingV11_AccessListVSg06accessI0txyKXE_tKlFxSpyAJGKXEfU_TA_0, MEMORY[0x263F288A8], MEMORY[0x263F288E0], a6);
}

uint64_t IDView.makeChildViewList(metadata:view:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v52 = a4;
  int v48 = a1;
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v51 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v50 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v47 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v46 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 + 40);
  uint64_t v54 = *(void *)(v12 + 32);
  uint64_t v45 = v13;
  uint64_t v70 = v6;
  uint64_t v71 = v9;
  uint64_t v72 = v54;
  *(void *)&long long v73 = v13;
  uint64_t v14 = type metadata accessor for CachedView();
  uint64_t v49 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v45 - v15;
  LODWORD(v15) = *(_DWORD *)(a2 + 8);
  uint64_t v17 = *(void *)(a2 + 16);
  uint64_t v18 = *(void *)(a2 + 40);
  int v19 = *(_DWORD *)(a2 + 64);
  uint64_t v20 = *(void *)(a2 + 72);
  char v21 = *(unsigned char *)(a2 + 80);
  uint64_t v70 = *(void *)a2;
  LODWORD(v71) = v15;
  uint64_t v72 = v17;
  long long v73 = *(_OWORD *)(a2 + 24);
  uint64_t v74 = v18;
  long long v75 = *(_OWORD *)(a2 + 48);
  int v76 = v19;
  uint64_t v77 = v20;
  uint64_t v22 = v53 + *(int *)(a3 + 52);
  char v78 = v21;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v23 = v45;
  _GraphInputs.pushStableID<A>(_:)(v22, v9);
  uint64_t v25 = v46;
  uint64_t v24 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v22, v9);
  *(_DWORD *)uint64_t v16 = v48;
  uint64_t v60 = v6;
  uint64_t v61 = v9;
  uint64_t v62 = v54;
  *(void *)&long long v63 = v23;
  uint64_t v26 = type metadata accessor for CachedView();
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v16[*(int *)(v26 + 52)], v25, v9);
  v59[2] = v6;
  v59[3] = v14;
  v59[4] = swift_getWitnessTable();
  uint64_t v27 = type metadata accessor for Attribute();
  uint64_t v28 = MEMORY[0x263F8E628];
  uint64_t v29 = MEMORY[0x263F8E658];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v59, v14, MEMORY[0x263F8E628], v27, MEMORY[0x263F8E658], v30);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v14);
  uint64_t v31 = v60;
  uint64_t v33 = (uint64_t)v50;
  uint64_t v32 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v53, v6);
  v57[2] = v6;
  int v58 = v31;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v33, (uint64_t)partial apply for closure #1 in Attribute.setValue(_:), (uint64_t)v57, v6, v28, MEMORY[0x263F8D4F8], v29, v34);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v6);
  _GraphValue.init(_:)(v31, v56);
  uint64_t v35 = v56[0];
  uint64_t v36 = v70;
  LODWORD(v53) = v71;
  uint64_t v37 = v72;
  long long v38 = v73;
  uint64_t v39 = v74;
  uint64_t v51 = *((void *)&v75 + 1);
  uint64_t v40 = v75;
  LODWORD(v50) = v76;
  uint64_t v41 = v77;
  char v42 = v78;
  LODWORD(v28) = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v28) {
    AGSubgraphBeginTreeElement();
  }
  int v55 = v35;
  uint64_t v60 = v36;
  LODWORD(v61) = v53;
  uint64_t v62 = v37;
  long long v63 = v38;
  uint64_t v64 = v39;
  uint64_t v65 = v40;
  uint64_t v66 = v51;
  int v67 = (int)v50;
  uint64_t v68 = v41;
  char v69 = v42;
  uint64_t v43 = v54;
  (*(void (**)(int *, uint64_t *, uint64_t, uint64_t))(v54 + 32))(&v55, &v60, v6, v54);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v35, v6, v43);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t closure #2 in ForEachState.item(at:offset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _DWORD *a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t v84 = a6;
  uint64_t v93 = a5;
  uint64_t v91 = a4;
  uint64_t v100 = a2;
  uint64_t v101 = a1;
  uint64_t v94 = a7;
  uint64_t v115 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void **)a3;
  uint64_t v9 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  unint64_t v83 = (char *)&v83 - v14;
  type metadata accessor for _ContiguousArrayStorage<ObservationTracking._AccessList>(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v92 = (uint64_t)&v83 - v16;
  uint64_t v17 = v8[12];
  uint64_t v90 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v18);
  long long v89 = (char *)&v83 - v19;
  uint64_t v20 = v8[11];
  uint64_t v87 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v21);
  unsigned int v86 = (char *)&v83 - v22;
  uint64_t v23 = v8[13];
  uint64_t v24 = v8[14];
  uint64_t v25 = v8[15];
  uint64_t v97 = v8[10];
  uint64_t v105 = v97;
  uint64_t v106 = v20;
  uint64_t v107 = v17;
  *(void *)&long long v108 = v23;
  uint64_t v98 = v23;
  *((void *)&v108 + 1) = v24;
  uint64_t v109 = v25;
  uint64_t v85 = type metadata accessor for ForEachChild();
  uint64_t v88 = *(void *)(v85 - 8);
  MEMORY[0x270FA5388](v85);
  uint64_t v27 = (char *)&v83 - v26;
  uint64_t v99 = v20;
  uint64_t v96 = v24;
  _GraphInputs.pushStableID<A>(_:)(v100, v20);
  if (*(unsigned char *)(a3 + 116)) {
    __break(1u);
  }
  uint64_t v95 = a3;
  int v28 = *(_DWORD *)(a3 + 112);
  uint64_t v29 = v87;
  uint64_t v30 = v86;
  uint64_t v31 = v99;
  (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v86, v100, v99);
  *(_DWORD *)uint64_t v27 = v28;
  uint64_t v105 = v97;
  uint64_t v106 = v31;
  uint64_t v107 = v17;
  *(void *)&long long v108 = v98;
  *((void *)&v108 + 1) = v96;
  uint64_t v109 = v25;
  uint64_t v100 = v25;
  uint64_t v32 = type metadata accessor for ForEachChild();
  uint64_t v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v29 + 32))(&v27[*(int *)(v32 + 68)], v30, v31);
  MEMORY[0x270FA5388](v33);
  uint64_t v34 = v85;
  *(&v83 - 4) = (char *)v17;
  *(&v83 - 3) = (char *)v34;
  *(&v83 - 2) = (char *)swift_getWitnessTable();
  uint64_t v35 = type metadata accessor for Attribute();
  uint64_t v36 = MEMORY[0x263F8E628];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v27, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)(&v83 - 6), v34, MEMORY[0x263F8E628], v35, MEMORY[0x263F8E658], v37);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v27, v34);
  uint64_t v38 = v105;
  uint64_t v39 = v90;
  uint64_t v40 = (uint64_t)v89;
  uint64_t v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 16))(v89, v91, v17);
  MEMORY[0x270FA5388](v41);
  *(&v83 - 2) = (char *)v17;
  *((_DWORD *)&v83 - 2) = v38;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v40, (uint64_t)partial apply for closure #1 in Attribute.setValue(_:), (uint64_t)(&v83 - 4), v17, v36, MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v42);
  uint64_t v91 = 0;
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v17);
  uint64_t v43 = v92;
  outlined init with copy of ObservationTracking._AccessList?(v93, v92);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v43, 1, v9) == 1)
  {
    uint64_t v44 = MEMORY[0x263F8EE78];
    uint64_t v45 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v45) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 32);
    uint64_t v53 = v83;
    v52(v83, v43, v9);
    type metadata accessor for _ContiguousArrayStorage<ObservationTracking._AccessList>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObservationTracking._AccessList>, MEMORY[0x263F8E0F8]);
    unint64_t v54 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_2461B9DC0;
    v52((char *)(v44 + v54), (uint64_t)v53, v9);
    uint64_t v45 = *(void *)(v44 + 16);
    if (v45)
    {
LABEL_4:
      int v48 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
      uint64_t v47 = v10 + 16;
      uint64_t v46 = v48;
      uint64_t v49 = v44;
      unint64_t v50 = v44 + ((*(unsigned __int8 *)(v47 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 64));
      uint64_t v51 = *(void *)(v47 + 56);
      uint64_t v93 = v49;
      swift_bridgeObjectRetain();
      do
      {
        v46(v12, v50, v9);
        installObservationSlow<A>(accessList:attribute:)((uint64_t)v12, v38, v17);
        (*(void (**)(char *, uint64_t))(v47 - 8))(v12, v9);
        v50 += v51;
        --v45;
      }
      while (v45);
      swift_bridgeObjectRelease_n();
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
LABEL_9:
  _GraphValue.init(_:)(v38, &v103);
  uint64_t v55 = v103;
  uint64_t v56 = *(void *)v101;
  LODWORD(v93) = *(_DWORD *)(v101 + 8);
  uint64_t v57 = *(void *)(v101 + 16);
  uint64_t v58 = *(void *)(v101 + 24);
  uint64_t v59 = *(void *)(v101 + 32);
  uint64_t v60 = *(void *)(v101 + 40);
  uint64_t v61 = *(void *)(v101 + 48);
  uint64_t v62 = *(void *)(v101 + 56);
  LODWORD(v92) = *(_DWORD *)(v101 + 64);
  uint64_t v63 = *(void *)(v101 + 72);
  char v64 = *(unsigned char *)(v101 + 80);
  char ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  v102[0] = v55;
  uint64_t v105 = v56;
  LODWORD(v106) = v93;
  uint64_t v107 = v57;
  *(void *)&long long v108 = v58;
  *((void *)&v108 + 1) = v59;
  uint64_t v109 = v60;
  uint64_t v110 = v61;
  uint64_t v111 = v62;
  int v112 = v92;
  uint64_t v113 = v63;
  char v114 = v64;
  uint64_t v66 = v100;
  uint64_t v67 = v94;
  (*(void (**)(int *, uint64_t *, uint64_t, uint64_t))(v100 + 32))(v102, &v105, v17, v100);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v55, v17, v66);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = v95;
  uint64_t v69 = *(void *)(v95 + 72);
  if ((v69 & 0x800) != 0)
  {
    int v70 = *(_DWORD *)(v95 + 24);
    uint64_t v71 = *(void *)(v95 + 32);
    uint64_t v72 = *(void *)(v95 + 56);
    uint64_t v73 = *(void *)(v95 + 64);
    int v74 = *(_DWORD *)(v95 + 80);
    uint64_t v75 = *(void *)(v95 + 88);
    char v76 = *(unsigned char *)(v95 + 96);
    uint64_t v105 = *(void *)(v95 + 16);
    LODWORD(v106) = v70;
    uint64_t v107 = v71;
    long long v108 = *(_OWORD *)(v95 + 40);
    uint64_t v109 = v72;
    uint64_t v110 = v73;
    uint64_t v111 = v69;
    int v112 = v74;
    uint64_t v113 = v75;
    char v114 = v76;
    uint64_t v77 = _ViewListOutputs.makeAttribute(inputs:)(&v105);
    unsigned int v103 = v77;
    uint64_t v104 = 0;
    MEMORY[0x270FA5388](v77);
    uint64_t v105 = v97;
    uint64_t v106 = v99;
    uint64_t v107 = v17;
    *(void *)&long long v108 = v98;
    *((void *)&v108 + 1) = v96;
    uint64_t v109 = v66;
    uint64_t v78 = type metadata accessor for ForEachState.ItemList();
    *(&v83 - 2) = (char *)v78;
    *(&v83 - 1) = (char *)swift_getWitnessTable();
    type metadata accessor for Attribute<ViewList>();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v103, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)(&v83 - 4), v78, MEMORY[0x263F8E628], v79, MEMORY[0x263F8E658], v80);
    swift_release();
    uint64_t v81 = v95;
    uint64_t result = v105;
    unsigned __int8 v82 = v84;
    *unint64_t v84 = v105;
    *((unsigned char *)v82 + 4) = 0;
    if (*(unsigned char *)(v81 + 124))
    {
      __break(1u);
    }
    else
    {
      uint64_t result = AGGraphAddInput();
      if ((v82[1] & 1) == 0)
      {
        LODWORD(v105) = *v82;
        uint64_t v106 = 0;
        LOBYTE(v109) = 1;
        return outlined assign with take of _ViewListOutputs.Views((uint64_t)&v105, v67);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ForEachChild()
{
  return swift_getGenericMetadata();
}

void _GraphInputs.pushStableID<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v5 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x270FA5388](v8);
  if (*(unsigned char *)(v2 + 37))
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v11);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for StronglyHashable);
    if (swift_dynamicCast())
    {
      outlined init with take of ScrollStateRequest(&v16, (uint64_t)&v19);
      uint64_t v12 = v22;
      uint64_t v13 = v23;
      uint64_t v14 = __swift_project_boxed_opaque_existential_1(&v19, v22);
      _GraphInputs.pushScope<A>(id:)((uint64_t)v14, v12, v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
    }
    else
    {
      uint64_t v18 = 0;
      long long v16 = 0u;
      long long v17 = 0u;
      outlined destroy of AnyTrackedValue?((uint64_t)&v16, &lazy cache variable for type metadata for StronglyHashable?, &lazy cache variable for type metadata for StronglyHashable);
      makeStableIDData<A>(from:)(a1, a2, (uint64_t)&v19);
      if (v21)
      {
        UUID.init()();
        specialized StrongHash.init<A>(of:)(v7, (uint64_t)&v16);
        unint64_t v15 = v17;
      }
      else
      {
        unint64_t v15 = v20;
        long long v16 = v19;
      }
      specialized _GraphInputs.pushScope<A>(id:)(v16, *((uint64_t *)&v16 + 1), (void *)v15);
    }
  }
}

uint64_t destroy for ForEachChild(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80));
}

uint64_t type metadata accessor for CachedView()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance AnyView@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v5[2] = *(_OWORD *)(a1 + 32);
  v5[3] = v2;
  v5[4] = *(_OWORD *)(a1 + 64);
  char v6 = *(unsigned char *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  return specialized static DynamicView.makeDynamicViewList(metadata:view:inputs:)((uint64_t)v5, a2);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _VariadicView_Children.Element@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<BackdropView>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_VariadicView_Children.Element>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_VariadicView_Children.Element>, (uint64_t)&type metadata for _VariadicView_Children.Element, (uint64_t)&protocol witness table for _VariadicView_Children.Element);
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(void *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(void *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v7;
  *(_DWORD *)(v14 + 60) = v8;
  *(void *)(v14 + 64) = v9;
  uint64_t v22 = v2;
  int v23 = v3;
  uint64_t v24 = v4;
  int v25 = v5;
  int v26 = v6;
  int v27 = v7;
  int v28 = v8;
  uint64_t v29 = v9;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  int v32 = v18;
  uint64_t v33 = v17;
  char v34 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance IDView<A, B>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _DWORD *a4@<X8>)
{
  return static IDView._makeViewList(view:inputs:)(a1, a2, a3[2], a3[3], a3[5], a4);
}

uint64_t static IDView._makeViewList(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, _DWORD *a6@<X8>)
{
  uint64_t v20 = a3;
  int v7 = *a1;
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  long long v18 = *(_OWORD *)(a2 + 5);
  uint64_t v11 = a2[7];
  int v12 = *((_DWORD *)a2 + 16);
  uint64_t v13 = a2[9];
  char v14 = *((unsigned char *)a2 + 80);
  int v22 = HIDWORD(a4);
  *(void *)&long long v24 = a5;
  uint64_t v15 = type metadata accessor for IDView();
  int v30 = v7;
  uint64_t v20 = v8;
  int v21 = v9;
  uint64_t v23 = v10;
  long long v24 = *(_OWORD *)(a2 + 3);
  long long v25 = v18;
  uint64_t v26 = v11;
  int v27 = v12;
  uint64_t v28 = v13;
  char v29 = v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  return static DynamicView.makeDynamicViewList(metadata:view:inputs:)(WitnessTable, &v30, (uint64_t)&v20, v15, WitnessTable, a6);
}

uint64_t View.id<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  char v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v16, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  return IDView.init(_:id:)((uint64_t)v14, (uint64_t)v10, a2, a3, a4);
}

uint64_t IDView.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for IDView();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t CachedView.updateValue()(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v31 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](a1);
  int v30 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v4 + 40);
  uint64_t v35 = v2;
  long long v32 = *(_OWORD *)(v4 + 24);
  long long v36 = v32;
  v29[1] = v5;
  uint64_t v37 = v5;
  uint64_t v6 = type metadata accessor for IDView();
  uint64_t v33 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v29 - v7;
  uint64_t v9 = v32;
  uint64_t v10 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v29 - v15;
  uint64_t v17 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!AGGraphGetOutputValue()) {
    goto LABEL_3;
  }
  int v21 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  *(void *)&long long v32 = v2;
  v21(v20, v34, a1);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, &v20[*(int *)(a1 + 52)], v9);
  uint64_t v2 = v32;
  CachedView.view.getter((uint64_t)v8);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, &v8[*(int *)(v6 + 52)], v9);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v6);
  char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v10 + 8);
  v23(v13, v9);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v16, v9);
  if (v22)
  {
LABEL_3:
    CachedView.view.getter((uint64_t)v8);
    uint64_t v26 = (uint64_t)v30;
    uint64_t v25 = v31;
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v30, v8, v2);
    uint64_t v27 = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v8, v6);
    MEMORY[0x270FA5388](v27);
    v29[-2] = a1;
    v29[-1] = swift_getWitnessTable();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v26, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v29[-4], v2, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v28);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v26, v2);
  }
  return result;
}

uint64_t CachedView.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for IDView();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t type metadata accessor for IDView()
{
  return swift_getGenericMetadata();
}

uint64_t static Subview._makeViewList(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  v35[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 28);
  int v16 = *(_DWORD *)(a1 + 36);
  int v17 = *(_DWORD *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 72);
  char v18 = *(unsigned char *)(a1 + 80);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  AGGraphCreateOffsetAttribute2();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type MergeTraits and conformance MergeTraits();
  int v9 = Attribute.init<A>(body:value:flags:update:)();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Subview>>();
  v35[3] = v13;
  v35[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(void *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v3;
  *(void *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 48) = v5;
  *(_DWORD *)(v14 + 52) = v6;
  *(_DWORD *)(v14 + 56) = v17;
  *(_DWORD *)(v14 + 60) = v16;
  *(void *)(v14 + 64) = v7;
  uint64_t v22 = v2;
  int v23 = v3;
  uint64_t v24 = v4;
  int v25 = v5;
  int v26 = v6;
  int v27 = v17;
  int v28 = v16;
  uint64_t v29 = v7;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  int v32 = v9;
  uint64_t v33 = v8;
  char v34 = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Subview>>()
{
  if (!lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<Subview>>)
  {
    type metadata accessor for TypedUnaryViewGenerator<Subview>();
    unint64_t v0 = type metadata accessor for UnaryElements();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<Subview>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MergeTraits and conformance MergeTraits()
{
  unint64_t result = lazy protocol witness table cache variable for type MergeTraits and conformance MergeTraits;
  if (!lazy protocol witness table cache variable for type MergeTraits and conformance MergeTraits)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MergeTraits and conformance MergeTraits);
  }
  return result;
}

uint64_t outlined init with copy of _VariadicView_Children.Element(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for _VariadicView_Children.Element(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  int v6 = *(void **)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  id v7 = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined init with copy of Subview.ID(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ViewTransform.appendCoordinateSpace(name:)(uint64_t a1)
{
  outlined init with copy of AnyHashable(a1, (uint64_t)v11);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  outlined init with copy of CoordinateSpaceElement((uint64_t)v11, (uint64_t)v10);
  type metadata accessor for Element<ProjectionTransformElement>(0, (unint64_t *)&lazy cache variable for type metadata for Element<CoordinateSpaceElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type CoordinateSpaceElement and conformance CoordinateSpaceElement, (uint64_t)&type metadata for CoordinateSpaceElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  uint64_t v5 = (void *)swift_allocObject();
  v5[4] = v3;
  _OWORD v5[5] = v4;
  outlined init with copy of CoordinateSpaceElement((uint64_t)v10, (uint64_t)(v5 + 6));
  v5[2] = v2;
  if (v2)
  {
    uint64_t v6 = *(void *)(v2 + 24);
    BOOL v7 = __OFADD__(v6, 1);
    uint64_t v8 = v6 + 1;
    if (!v7) {
      goto LABEL_6;
    }
    __break(1u);
  }
  uint64_t v8 = 1;
LABEL_6:
  v5[3] = v8;
  swift_retain();
  outlined destroy of CodableEffectAnimation((uint64_t)v10);
  swift_release();
  *uint64_t v1 = (uint64_t)v5;
  v1[3] = 0;
  v1[4] = 0;
  return outlined destroy of CodableEffectAnimation((uint64_t)v11);
}

uint64_t outlined init with copy of CoordinateSpaceElement(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for TimeDataFormattingContainer(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

void type metadata accessor for TypedUnaryViewGenerator<Subview>()
{
  if (!lazy cache variable for type metadata for TypedUnaryViewGenerator<Subview>)
  {
    unint64_t v0 = type metadata accessor for TypedUnaryViewGenerator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedUnaryViewGenerator<Subview>);
    }
  }
}

uint64_t StatefulRule.withObservation<A>(do:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  return StatefulRule.withObservation<A>(do:)(a1, a2, a3, a4, a5, (uint64_t)_s7SwiftUI16_withObservation2dox5value_0D00D8TrackingV11_AccessListVSg06accessI0txyKXE_tKlFxSpyAJGKXEfU_TA_0, MEMORY[0x263F288A0], MEMORY[0x263F288D8], a6);
}

uint64_t TypedElement.__deallocating_deinit()
{
  TypedElement.deinit();

  return swift_deallocClassInstance();
}

uint64_t TypedElement.deinit()
{
  PropertyList.Element.deinit();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 248);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return v0;
}

uint64_t PropertyList.Element.deinit()
{
  uint64_t v1 = swift_retain();
  while (v1)
  {
    uint64_t v2 = *(void *)(v1 + 32);
    *(void *)(v1 + 32) = 0;
    swift_release();
    char isUniquelyReferenced_native = swift_isUniquelyReferenced_native();
    uint64_t v1 = v2;
    if ((isUniquelyReferenced_native & 1) == 0)
    {
      swift_release();
      break;
    }
  }
  swift_release();
  swift_release();
  return v0;
}

uint64_t StatefulRule.withObservation<A>(do:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v73 = a6;
  uint64_t v71 = a1;
  uint64_t v72 = a2;
  int v70 = a9;
  v80[6] = *MEMORY[0x263EF8340];
  uint64_t v76 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v14 = *(void *)(v76 - 8);
  MEMORY[0x270FA5388](v76);
  int v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v68 = (char *)&v60 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v61 = (char *)&v60 - v20;
  _s11Observation0A8TrackingV11_AccessListVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  uint64_t v22 = v21;
  MEMORY[0x270FA5388](v21);
  uint64_t v66 = (uint64_t)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  int v26 = (char *)&v60 - v25;
  uint64_t v69 = *(a4 - 1);
  MEMORY[0x270FA5388](v27);
  uint64_t v77 = (char *)&v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v67 = (char *)&v60 - v30;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    unsigned int v63 = CurrentAttribute;
    uint64_t v75 = a4;
    uint64_t v78 = a8;
    uint64_t v65 = a3;
    uint64_t v64 = a5;
    uint64_t v79 = a7;
    uint64_t v62 = v16;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  int v32 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v33 = v14;
  char v34 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  uint64_t v35 = v76;
  uint64_t v36 = v34(v26, 1, 1, v76);
  MEMORY[0x270FA5388](v36);
  uint64_t v37 = (uint64_t)v75;
  uint64_t v38 = v71;
  *(&v60 - 4) = (uint64_t)v75;
  *(&v60 - 3) = v38;
  *(&v60 - 2) = v72;
  unint64_t v39 = type metadata accessor for Error();
  uint64_t v40 = v74;
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v26, v73, (uint64_t)(&v60 - 6), v22, v39, v37, MEMORY[0x263F8E4E0], (uint64_t)v80);
  if (v40)
  {
    _s11Observation0A8TrackingV11_AccessListVSgWOhTm_0((uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
    static ObservationRegistrar.lastestAccessLists = v32;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v73 = 0;
    int v74 = v32;
    uint64_t v42 = v66;
    _s11Observation0A8TrackingV11_AccessListVSgWOcTm_1((uint64_t)v26, v66, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v42, 1, v35) == 1)
    {
      _s11Observation0A8TrackingV11_AccessListVSgWOhTm_0(v42, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
      uint64_t v43 = v74;
    }
    else
    {
      uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 32);
      uint64_t v45 = v61;
      v44(v61, v42, v35);
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v68, v45, v35);
      swift_beginAccess();
      uint64_t v46 = (char *)static ObservationRegistrar.lastestAccessLists;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      static ObservationRegistrar.lastestAccessLists = v46;
      uint64_t v43 = v74;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v46 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v46 + 2) + 1, 1, (unint64_t)v46);
        static ObservationRegistrar.lastestAccessLists = v46;
      }
      unint64_t v49 = *((void *)v46 + 2);
      unint64_t v48 = *((void *)v46 + 3);
      if (v49 >= v48 >> 1)
      {
        uint64_t v46 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1, (unint64_t)v46);
        static ObservationRegistrar.lastestAccessLists = v46;
      }
      *((void *)v46 + 2) = v49 + 1;
      uint64_t v35 = v76;
      v44(&v46[((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(void *)(v33 + 72) * v49], (uint64_t)v68, v76);
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v45, v35);
      uint64_t v37 = (uint64_t)v75;
    }
    unint64_t v50 = *(void (**)(char *, char *, uint64_t))(v69 + 32);
    uint64_t v51 = v67;
    v50(v67, v77, v37);
    _s11Observation0A8TrackingV11_AccessListVSgWOhTm_0((uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
    v50(v70, v51, v37);
    uint64_t v52 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
    if (v52)
    {
      unint64_t v54 = *(char **)(v33 + 16);
      uint64_t v53 = v33 + 16;
      uint64_t v77 = v54;
      uint64_t v55 = (char *)static ObservationRegistrar.lastestAccessLists
          + ((*(unsigned __int8 *)(v53 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 64));
      uint64_t v56 = *(void *)(v53 + 56);
      uint64_t v75 = static ObservationRegistrar.lastestAccessLists;
      uint64_t v76 = v56;
      swift_bridgeObjectRetain();
      uint64_t v57 = (uint64_t)v62;
      uint64_t v58 = v63;
      do
      {
        ((void (*)(uint64_t, char *, uint64_t))v77)(v57, v55, v35);
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        installObservationSlow<A>(accessList:attribute:)(v57, v58, AssociatedTypeWitness);
        (*(void (**)(uint64_t, uint64_t))(v53 - 8))(v57, v35);
        v55 += v76;
        --v52;
      }
      while (v52);
      swift_bridgeObjectRelease();
      uint64_t v43 = v74;
    }
    static ObservationRegistrar.lastestAccessLists = v43;
    return swift_bridgeObjectRelease();
  }
}

uint64_t outlined destroy of ObservationTracking._AccessList?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _s11Observation0A8TrackingV11_AccessListVSgWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  _s11Observation0A8TrackingV11_AccessListVSgMaTm_1(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _s11Observation0A8TrackingV11_AccessListVSgWOhTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  _s11Observation0A8TrackingV11_AccessListVSgMaTm_2(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

id installObservationSlow<A>(accessList:attribute:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s11Observation0A8TrackingV11_AccessListVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  BOOL v7 = (char *)&v33 - v6;
  uint64_t v8 = type metadata accessor for ObservationTracking();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8);
  int v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v33 - v13;
  id result = (id)AGGraphGetAttributeSubgraph2();
  if (result)
  {
    int v16 = result;
    Currentint Attribute = AGGraphGetCurrentAttribute();
    int v18 = *MEMORY[0x263F288F8];
    uint64_t v34 = a1;
    uint64_t v35 = a3;
    if (CurrentAttribute == v18)
    {
      id v19 = (id)AGSubgraphGetCurrent();
      if (!v19) {
        goto LABEL_10;
      }
      uint64_t v20 = v19;
      id v21 = (id)AGSubgraphGetGraph();
    }
    else
    {
      id v21 = (id)AGGraphGetAttributeGraph();
    }
    uint64_t v36 = v8;
    if (AGGraphGetContext())
    {
      swift_retain();

      swift_weakInit();
      swift_weakAssign();
      swift_release();
      outlined init with take of WeakUncheckedSendable<GraphHost>((uint64_t)v37, (uint64_t)v38);
      unint64_t v22 = AGCreateWeakAttribute();
      int v23 = v22;
      unint64_t v33 = HIDWORD(v22);
      uint64_t v24 = type metadata accessor for ObservationTracking._AccessList();
      uint64_t v25 = *(void *)(v24 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v7, v34, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v7, 0, 1, v24);
      ObservationTracking.init(_:)();
      uint64_t v26 = v36;
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, v36);
      unint64_t v27 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      uint64_t v28 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v28 + v27, v11, v26);
      uint64_t v29 = AGSubgraphAddObserver();
      swift_release();
      _s11Observation0A8TrackingV11_AccessListVSgWOcTm_1((uint64_t)v38, (uint64_t)v37, &lazy cache variable for type metadata for WeakUncheckedSendable<GraphHost>, (uint64_t (*)(uint64_t))type metadata accessor for GraphHost, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakUncheckedSendable);
      uint64_t v30 = swift_allocObject();
      *(void *)(v30 + 16) = v35;
      *(void *)(v30 + 24) = v16;
      int v31 = v33;
      *(_DWORD *)(v30 + 32) = v23;
      *(_DWORD *)(v30 + 36) = v31;
      *(void *)(v30 + 40) = v29;
      outlined init with take of WeakUncheckedSendable<GraphHost>((uint64_t)v37, v30 + 48);
      id v32 = v16;
      static ObservationTracking._installTracking(_:willSet:didSet:)();

      swift_release();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v26);
      return (id)_s11Observation0A8TrackingV11_AccessListVSgWOhTm_0((uint64_t)v38, &lazy cache variable for type metadata for WeakUncheckedSendable<GraphHost>, (uint64_t (*)(uint64_t))type metadata accessor for GraphHost, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakUncheckedSendable);
    }
    __break(1u);
LABEL_10:
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t outlined init with take of WeakUncheckedSendable<GraphHost>(uint64_t a1, uint64_t a2)
{
  _s11Observation0A8TrackingV11_AccessListVSgMaTm_1(0, &lazy cache variable for type metadata for WeakUncheckedSendable<GraphHost>, (uint64_t (*)(uint64_t))type metadata accessor for GraphHost, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakUncheckedSendable);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ObservationTracking._AccessList?(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t _s11Observation0A8TrackingV11_AccessListVSgWOcTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  _s11Observation0A8TrackingV11_AccessListVSgMaTm_0(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t _s11Observation0A8TrackingV11_AccessListVSgWOcTm_1(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  _s11Observation0A8TrackingV11_AccessListVSgMaTm_1(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t _s11Observation0A8TrackingV11_AccessListVSgWOcTm_2(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  _s11Observation0A8TrackingV11_AccessListVSgMaTm_2(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t destroy for ContentTransition.State(uint64_t a1)
{
  outlined consume of ContentTransition.Storage(*(void *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32), *(unsigned char *)(a1 + 13));

  return swift_release();
}

void type metadata accessor for (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, uint64_t a2)
{
  _OWORD v10[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenURLActionKey>, (uint64_t)&type metadata for OpenURLActionKey, (uint64_t)&protocol witness table for OpenURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  if (!specialized find1<A>(_:key:filter:)(v4, v10[0])
    || (outlined init with take of OpenURLAction?(a2, (uint64_t)v10),
        type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for OpenURLAction?, (uint64_t)&type metadata for OpenURLAction, MEMORY[0x263F8D8F0]), uint64_t result = AGCompareValues(), !result))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<OpenURLActionKey>>();
    uint64_t v9 = swift_allocObject();
    outlined init with take of OpenURLAction?(a2, v9 + 72);
    outlined retain of OpenURLAction?(a2);
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v5;
  Swift::Int v6;
  Swift::Int v7;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, MEMORY[0x263F8D8F0]), uint64_t result = AGCompareValues(), !result))
  {
    v5.Swift::UInt value = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultForegroundStyleKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultForegroundStyleKey>, (uint64_t)&type metadata for DefaultForegroundStyleKey, (uint64_t)&protocol witness table for DefaultForegroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    uint64_t v7 = v6;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v7, 0, v5.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v5;
  Swift::Int v6;
  Swift::Int v7;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, MEMORY[0x263F8D8F0]), uint64_t result = AGCompareValues(), !result))
  {
    v5.Swift::UInt value = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<ForegroundStyleKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ForegroundStyleKey>, (uint64_t)&type metadata for ForegroundStyleKey, (uint64_t)&protocol witness table for ForegroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    uint64_t v7 = v6;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v7, 0, v5.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultFontKey>, (uint64_t)&type metadata for DefaultFontKey, (uint64_t)&protocol witness table for DefaultFontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v13);
  if (!result) {
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)(result + 72);
  if (!a2)
  {
    if (!v8) {
      return result;
    }
    goto LABEL_7;
  }
  if (!v8
    || (uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 96),
        uint64_t v10 = swift_retain(),
        int v11 = v9(v10),
        uint64_t result = swift_release(),
        (v11 & 1) == 0))
  {
LABEL_7:
    uint64_t v12 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultFontKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v12);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontKey>, (uint64_t)&type metadata for FontKey, (uint64_t)&protocol witness table for FontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v13);
  if (!result) {
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)(result + 72);
  if (!a2)
  {
    if (!v8) {
      return result;
    }
    goto LABEL_7;
  }
  if (!v8
    || (uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 96),
        uint64_t v10 = swift_retain(),
        int v11 = v9(v10),
        uint64_t result = swift_release(),
        (v11 & 1) == 0))
  {
LABEL_7:
    uint64_t v12 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<FontKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v12);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt value;
  uint64_t v13[6];

  _OWORD v13[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityTextAttributeResolverKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t v7 = specialized find1<A>(_:key:filter:)(v4, v13[0]);
  if (!v7
    || (outlined init with copy of AccessibilityTextAttributeResolver?(v7 + 72, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver, (uint64_t)&protocol descriptor for AccessibilityTextAttributeResolver, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AnyTrackedValue?), type metadata accessor for AnyTrackedValue?(0, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver), uint64_t v8 = AGCompareValues(), result = outlined destroy of AnyTrackedValue?((uint64_t)v13, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver), !v8))
  {
    outlined init with copy of AccessibilityTextAttributeResolver?(a2, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver, (uint64_t)&protocol descriptor for AccessibilityTextAttributeResolver, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AnyTrackedValue?);
    uint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey>>();
    int v11 = swift_allocObject();
    outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v13, v11 + 72, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (uint64_t)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver, (uint64_t)&protocol descriptor for AccessibilityTextAttributeResolver, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AnyTrackedValue?);
    swift_retain();
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10).value;
    outlined destroy of AnyTrackedValue?((uint64_t)v13, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTextAttributeResolver);
    *a1 = value;
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = *a1;
  BloomFilter.init(hashValue:)((Swift::Int)&type metadata for StyleableViewContextInput);
  if (!specialized find1<A>(_:key:filter:)(v4, v7)
    || (type metadata accessor for Date?(0, &lazy cache variable for type metadata for Any.Type?, (uint64_t (*)(uint64_t))type metadata accessor for Any.Type, MEMORY[0x263F8D8F0]), uint64_t result = AGCompareValues(), !result))
  {
    Swift::Int v6 = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<StyleableViewContextInput>, (uint64_t)&type metadata for StyleableViewContextInput, (uint64_t)&protocol witness table for StyleableViewContextInput, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for StyleableViewContextInput, 0, v6);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::UInt value;
  void v17[2];

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  Swift::Int v6 = (char *)v17 - v5;
  uint64_t v7 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>, (uint64_t)&type metadata for EnvironmentValues.StringResolutionDate, (uint64_t)&protocol witness table for EnvironmentValues.StringResolutionDate, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v9 = v8;
  BloomFilter.init(hashValue:)(v8);
  uint64_t v10 = specialized find1<A>(_:key:filter:)(v7, v17[1]);
  if (!v10
    || (uint64_t result = specialized static EnvironmentPropertyKey.valuesEqual(_:_:)(a2, v10 + *(void *)(*(void *)v10 + 248)), (result & 1) == 0))
  {
    uint64_t v12 = MEMORY[0x263F07490];
    uint64_t v13 = MEMORY[0x263F8D8F0];
    outlined init with copy of AccessibilityTextAttributeResolver?(a2, (uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Date?);
    uint64_t v14 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.StringResolutionDate>>();
    uint64_t v15 = swift_allocObject();
    outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v6, v15 + *(void *)(*(void *)v15 + 248), (uint64_t)&lazy cache variable for type metadata for Date?, v12, v13, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Date?);
    swift_retain();
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)(v9, 0, v14).value;
    outlined destroy of Date?((uint64_t)v6);
    *a1 = value;
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t v7 = specialized find1<A>(_:key:filter:)(v4, v10);
  if (!v7 || (uint64_t result = specialized static Array<A>.== infix(_:_:)(a2, *(void *)(v7 + 72)), (result & 1) == 0))
  {
    uint64_t v9 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v9);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt value;
  uint64_t v13[2];

  v13[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>, (uint64_t)&type metadata for EnvironmentValues.PreferenceBridgeKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferenceBridgeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t v7 = specialized find1<A>(_:key:filter:)(v4, v13[0]);
  if (!v7
    || (outlined init with copy of EnvironmentValues.PreferenceBridgeKey.Value(v7 + 72, (uint64_t)v13),
        uint64_t v8 = AGCompareValues(),
        uint64_t result = outlined destroy of EnvironmentValues.PreferenceBridgeKey.Value((uint64_t)v13),
        !v8))
  {
    outlined init with copy of EnvironmentValues.PreferenceBridgeKey.Value(a2, (uint64_t)v13);
    uint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.PreferenceBridgeKey>>();
    int v11 = swift_allocObject();
    outlined init with copy of EnvironmentValues.PreferenceBridgeKey.Value((uint64_t)v13, v11 + 72);
    swift_retain();
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10).value;
    outlined destroy of EnvironmentValues.PreferenceBridgeKey.Value((uint64_t)v13);
    *a1 = value;
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccentColorKey>, (uint64_t)&type metadata for AccentColorKey, (uint64_t)&protocol witness table for AccentColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v13);
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(result + 72);
  if (!a2)
  {
    if (!v8) {
      return result;
    }
    goto LABEL_8;
  }
  if (!v8
    || a2 != v8
    && (uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 88),
        uint64_t v10 = swift_retain(),
        int v11 = v9(v10),
        uint64_t result = swift_release(),
        (v11 & 1) == 0))
  {
LABEL_8:
    uint64_t v12 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<AccentColorKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v12);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v5;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for Stack<ImageStyleProtocol.Type>(), uint64_t result = AGCompareValues(), !result))
  {
    v5.Swift::UInt value = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<Image.Style>, (uint64_t)&type metadata for Image.Style, (uint64_t)&protocol witness table for Image.Style, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for Image.Style, 0, v5.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v5;
  Swift::Int v6;
  Swift::Int v7;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AnimationListener?, (uint64_t (*)(uint64_t))type metadata accessor for AnimationListener, MEMORY[0x263F8D8F0]), uint64_t result = AGCompareValues(), !result))
  {
    v5.Swift::UInt value = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.AnimationListenerKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationListenerKey>, (uint64_t)&type metadata for Transaction.AnimationListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationListenerKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    uint64_t v7 = v6;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v7, 0, v5.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  char v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int v11;

  uint64_t result = specialized find<A>(_:key:)(*a1);
  if (!result) {
    goto LABEL_7;
  }
  Swift::Int v5 = *(void *)(result + 72);
  if (!a2)
  {
    if (!v5) {
      return result;
    }
    goto LABEL_7;
  }
  if (!v5
    || (Swift::Int v6 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 104),
        uint64_t v7 = swift_retain(),
        uint64_t v8 = v6(v7),
        uint64_t result = swift_release(),
        (v8 & 1) == 0))
  {
LABEL_7:
    uint64_t v9 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<AnimationKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    int v11 = v10;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v11, 0, v9);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt value;
  uint64_t v18[4];

  uint64_t v4 = type metadata accessor for TimeZone();
  Swift::Int v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TimeZoneKey>, (uint64_t)&type metadata for TimeZoneKey, (uint64_t)&protocol witness table for TimeZoneKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v10 = v9;
  BloomFilter.init(hashValue:)(v9);
  int v11 = specialized find1<A>(_:key:filter:)(v8, v18[3]);
  if (!v11)
  {
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    goto LABEL_5;
  }
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v7, v11 + *(void *)(*(void *)v11 + 248), v4);
  lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
  uint64_t v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v13 & 1) == 0)
  {
LABEL_5:
    v12(v7, a2, v4);
    uint64_t v15 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TimeZoneKey>>();
    int v16 = swift_allocObject();
    v12((char *)(v16 + *(void *)(*(void *)v16 + 248)), (uint64_t)v7, v4);
    swift_retain();
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)(v10, 0, v15).value;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *a1 = value;
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt value;
  uint64_t v18[4];

  uint64_t v4 = type metadata accessor for Calendar();
  Swift::Int v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<CalendarKey>, (uint64_t)&type metadata for CalendarKey, (uint64_t)&protocol witness table for CalendarKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v10 = v9;
  BloomFilter.init(hashValue:)(v9);
  int v11 = specialized find1<A>(_:key:filter:)(v8, v18[3]);
  if (!v11)
  {
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    goto LABEL_5;
  }
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v7, v11 + *(void *)(*(void *)v11 + 248), v4);
  lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
  uint64_t v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v13 & 1) == 0)
  {
LABEL_5:
    v12(v7, a2, v4);
    uint64_t v15 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<CalendarKey>>();
    int v16 = swift_allocObject();
    v12((char *)(v16 + *(void *)(*(void *)v16 + 248)), (uint64_t)v7, v4);
    swift_retain();
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)(v10, 0, v15).value;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *a1 = value;
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt value;
  uint64_t v18[4];

  uint64_t v4 = type metadata accessor for Locale();
  Swift::Int v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LocaleKey>, (uint64_t)&type metadata for LocaleKey, (uint64_t)&protocol witness table for LocaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v10 = v9;
  BloomFilter.init(hashValue:)(v9);
  int v11 = specialized find1<A>(_:key:filter:)(v8, v18[3]);
  if (!v11)
  {
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    goto LABEL_5;
  }
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v7, v11 + *(void *)(*(void *)v11 + 248), v4);
  lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  uint64_t v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v13 & 1) == 0)
  {
LABEL_5:
    v12(v7, a2, v4);
    uint64_t v15 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<LocaleKey>>();
    int v16 = swift_allocObject();
    v12((char *)(v16 + *(void *)(*(void *)v16 + 248)), (uint64_t)v7, v4);
    swift_retain();
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)(v10, 0, v15).value;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *a1 = value;
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(void *)(result + 72) != a2)
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(void *)(result + 72) != a2)
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v5;
  Swift::Int v6;

  if (!specialized find<A>(_:key:)(*a1, (uint64_t (*)(void))type metadata accessor for MatchedGeometryScope, specialized find1<A>(_:key:filter:))|| (type metadata accessor for Date?(0, &lazy cache variable for type metadata for MatchedGeometryScope?, (uint64_t (*)(uint64_t))type metadata accessor for MatchedGeometryScope, MEMORY[0x263F8D8F0]), uint64_t result = AGCompareValues(), !result))
  {
    v5.Swift::UInt value = *a1;
    type metadata accessor for TypedElement<BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>>(0, &lazy cache variable for type metadata for TypedElement<MatchedGeometryScope>, (void (*)(uint64_t))type metadata accessor for MatchedGeometryScope);
    *(void *)(swift_allocObject() + 72) = a2;
    Swift::Int v6 = type metadata accessor for MatchedGeometryScope();
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v5.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TintKey>, (uint64_t)&type metadata for TintKey, (uint64_t)&protocol witness table for TintKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  if (!specialized find1<A>(_:key:filter:)(v4, v9)
    || (type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, MEMORY[0x263F8D8F0]), uint64_t result = AGCompareValues(), !result))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TintKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt value;
  uint64_t v16[2];

  v16[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for EnvironmentValues.CapitalizationContext();
  MEMORY[0x270FA5388](v4);
  Swift::Int v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.Key>, (uint64_t)&type metadata for EnvironmentValues.Key, (uint64_t)&protocol witness table for EnvironmentValues.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v9 = v8;
  BloomFilter.init(hashValue:)(v8);
  uint64_t v10 = specialized find1<A>(_:key:filter:)(v7, v16[0]);
  if (!v10
    || (outlined init with copy of TypesettingConfiguration(v10 + *(void *)(*(void *)v10 + 248), (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext), int v11 = AGCompareValues(), result = outlined destroy of TypesettingConfiguration((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext), !v11))
  {
    outlined init with copy of TypesettingConfiguration(a2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
    uint64_t v13 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.Key>>();
    uint64_t v14 = swift_allocObject();
    outlined init with copy of TypesettingConfiguration((uint64_t)v6, v14 + *(void *)(*(void *)v14 + 248), (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
    swift_retain();
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)(v9, 0, v13).value;
    outlined destroy of TypesettingConfiguration((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
    *a1 = value;
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>, (uint64_t)&type metadata for RedactionReasonsKey, (uint64_t)&protocol witness table for RedactionReasonsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(void *)(result + 72) != a2)
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<RedactionReasonsKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  long long v11;
  long long v12;
  long long v13;
  _OWORD v14[3];
  uint64_t v15;
  unsigned char v16[56];

  uint64_t v4 = specialized find<A>(_:key:)(*a1);
  if (!v4) {
    goto LABEL_3;
  }
  uint64_t v12 = *(_OWORD *)(v4 + 88);
  uint64_t v13 = *(_OWORD *)(v4 + 72);
  int v11 = *(_OWORD *)(v4 + 104);
  Swift::Int v5 = *(void *)(v4 + 120);
  outlined init with take of ResolvedTextSuffix(a2, (uint64_t)v16);
  v14[0] = v13;
  v14[1] = v12;
  long long v14[2] = v11;
  uint64_t v15 = v5;
  uint64_t result = specialized static ResolvedTextSuffix.== infix(_:_:)((uint64_t)v16, (unint64_t *)v14);
  if ((result & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TextSuffixKey>>();
    uint64_t v8 = swift_allocObject();
    outlined init with take of ResolvedTextSuffix(a2, v8 + 72);
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSuffixKey>, (uint64_t)&type metadata for TextSuffixKey, (uint64_t)&protocol witness table for TextSuffixKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    uint64_t v10 = v9;
    outlined retain of ResolvedTextSuffix(a2);
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v10, 0, v7);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;

  uint64_t result = specialized find<A>(_:key:)(*a1);
  if (!result) {
    goto LABEL_8;
  }
  Swift::Int v5 = *(unsigned char *)(result + 76);
  if ((a2 & 0x100000000) != 0)
  {
    if (*(unsigned char *)(result + 76)) {
      return result;
    }
LABEL_8:
    Swift::Int v6 = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<AnimationReasonKey>>();
    uint64_t v7 = swift_allocObject();
    *(_DWORD *)(v7 + 72) = a2;
    *(unsigned char *)(v7 + 76) = BYTE4(a2) & 1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationReasonKey>, (uint64_t)&type metadata for AnimationReasonKey, (uint64_t)&protocol witness table for AnimationReasonKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    uint64_t v9 = v8;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v9, 0, v6);
    return swift_release();
  }
  if (*(_DWORD *)(result + 72) != a2) {
    Swift::Int v5 = 1;
  }
  if (v5) {
    goto LABEL_8;
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v5;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]), uint64_t result = static WeakAttribute.== infix(_:_:)(), (result & 1) == 0))
  {
    v5.Swift::UInt value = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<ReferenceDateInput>, (uint64_t)&type metadata for ReferenceDateInput, (uint64_t)&protocol witness table for ReferenceDateInput, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ReferenceDateInput, 0, v5.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  uint64_t v4 = specialized find<A>(_:key:)(*a1);
  if (!v4 || (uint64_t result = specialized static Array<A>.== infix(_:_:)(a2, *(void *)(v4 + 72)), (result & 1) == 0))
  {
    Swift::Int v6 = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<_GraphInputs.SavedTransactionKey>, (uint64_t)&type metadata for _GraphInputs.SavedTransactionKey, (uint64_t)&protocol witness table for _GraphInputs.SavedTransactionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.SavedTransactionKey, 0, v6);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v5;

  if (!specialized find<A>(_:key:)(*a1) || (uint64_t result = static WeakAttribute.== infix(_:_:)(), (result & 1) == 0))
  {
    v5.Swift::UInt value = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<_DisplayList_StableIdentityScope>, (uint64_t)&type metadata for _DisplayList_StableIdentityScope, (uint64_t)&protocol witness table for _DisplayList_StableIdentityScope, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _DisplayList_StableIdentityScope, 0, v5.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;

  uint64_t v4 = specialized find<A>(_:key:)(*a1, (uint64_t (*)(void))type metadata accessor for BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>, specialized find1<A>(_:key:filter:));
  if (!v4
    || (Swift::Int v5 = *(void *)(v4 + 72),
        swift_retain(),
        Swift::Int v6 = specialized static Stack<A>.== infix(_:_:)(a2, v5),
        uint64_t result = swift_release(),
        !v6))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>>(0, &lazy cache variable for type metadata for TypedElement<BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>>, (void (*)(uint64_t))type metadata accessor for BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>);
    *(void *)(swift_allocObject() + 72) = a2;
    type metadata accessor for BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>();
    uint64_t v10 = v9;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v10, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v5;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for TextRendererBoxBase(),
        uint64_t result = static WeakAttribute.== infix(_:_:)(),
        (result & 1) == 0))
  {
    v5.Swift::UInt value = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TypedElement<TextRendererInput>, (uint64_t)&type metadata for TextRendererInput, (uint64_t)&protocol witness table for TextRendererInput, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for TextRendererInput, 0, v5.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::UInt value;
  void v17[2];

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  Swift::Int v6 = (char *)v17 - v5;
  uint64_t v7 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvableStringReferenceDateKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v9 = v8;
  BloomFilter.init(hashValue:)(v8);
  uint64_t v10 = specialized find1<A>(_:key:filter:)(v7, v17[1]);
  if (!v10
    || (uint64_t result = specialized static EnvironmentPropertyKey.valuesEqual(_:_:)(a2, v10 + *(void *)(*(void *)v10 + 248)), (result & 1) == 0))
  {
    uint64_t v12 = MEMORY[0x263F07490];
    uint64_t v13 = MEMORY[0x263F8D8F0];
    outlined init with copy of AccessibilityTextAttributeResolver?(a2, (uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Date?);
    uint64_t v14 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>>();
    uint64_t v15 = swift_allocObject();
    outlined init with copy of AccessibilityTextAttributeResolver?((uint64_t)v6, v15 + *(void *)(*(void *)v15 + 248), (uint64_t)&lazy cache variable for type metadata for Date?, v12, v13, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Date?);
    swift_retain();
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)(v9, 0, v14).value;
    outlined destroy of Date?((uint64_t)v6);
    *a1 = value;
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(void *)(result + 72) != a2)
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  SwiftUI::BloomFilter v5;
  Swift::Int v6;
  Swift::Int v7;

  if (!specialized find<A>(_:key:)(*a1)
    || (type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for AnimationListener?, (uint64_t (*)(uint64_t))type metadata accessor for AnimationListener, MEMORY[0x263F8D8F0]), uint64_t result = AGCompareValues(), !result))
  {
    v5.Swift::UInt value = *a1;
    type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.AnimationLogicalListenerKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationLogicalListenerKey>, (uint64_t)&type metadata for Transaction.AnimationLogicalListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationLogicalListenerKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    uint64_t v7 = v6;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v7, 0, v5.value);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[6];

  _OWORD v10[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenSensitiveURLActionKey>, (uint64_t)&type metadata for OpenSensitiveURLActionKey, (uint64_t)&protocol witness table for OpenSensitiveURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  if (!specialized find1<A>(_:key:filter:)(v4, v10[0])
    || (outlined init with take of OpenURLAction?(a2, (uint64_t)v10),
        type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for OpenURLAction?, (uint64_t)&type metadata for OpenURLAction, MEMORY[0x263F8D8F0]), uint64_t result = AGCompareValues(), !result))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<OpenSensitiveURLActionKey>>();
    uint64_t v9 = swift_allocObject();
    outlined init with take of OpenURLAction?(a2, v9 + 72);
    outlined retain of OpenURLAction?(a2);
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>, (uint64_t)&type metadata for EnvironmentValues.ContentShapesKey, (uint64_t)&protocol witness table for EnvironmentValues.ContentShapesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  if (!specialized find1<A>(_:key:filter:)(v4, v9) || (uint64_t result = AGCompareValues(), !result))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>, (uint64_t)&type metadata for EnvironmentValues.SymbolEffectsKey, (uint64_t)&protocol witness table for EnvironmentValues.SymbolEffectsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t v7 = specialized find1<A>(_:key:filter:)(v4, v12);
  if (!v7
    || (uint64_t v8 = *(void *)(v7 + 72),
        swift_bridgeObjectRetain(),
        uint64_t v9 = specialized static Array<A>.== infix(_:_:)(a2, v8),
        uint64_t result = swift_bridgeObjectRelease(),
        (v9 & 1) == 0))
  {
    int v11 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v11);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  int v16;
  char *v17;
  double v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt value;
  uint64_t v25[2];

  uint64_t v4 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x270FA5388](v4);
  Swift::Int v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v25 - v8;
  uint64_t v10 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TypesettingConfigurationKey>, (uint64_t)&type metadata for TypesettingConfigurationKey, (uint64_t)&protocol witness table for TypesettingConfigurationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v12 = v11;
  BloomFilter.init(hashValue:)(v11);
  uint64_t v13 = specialized find1<A>(_:key:filter:)(v10, v25[1]);
  if (!v13) {
    goto LABEL_11;
  }
  outlined init with copy of TypesettingConfiguration(v13 + *(void *)(*(void *)v13 + 248), (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
  if (!specialized static TypesettingLanguage.Storage.== infix(_:_:)(a2, (uint64_t)v9)) {
    goto LABEL_10;
  }
  uint64_t v14 = *(int *)(v4 + 20);
  uint64_t v15 = *(double *)(a2 + v14);
  int v16 = *(unsigned __int8 *)(a2 + v14 + 8);
  uint64_t v17 = &v9[v14];
  int v18 = *(double *)v17;
  id v19 = v17[8];
  if (v16 != 1)
  {
    if (v15 != v18) {
      LOBYTE(v19) = 1;
    }
    if ((v19 & 1) == 0) {
      return outlined destroy of TypesettingConfiguration((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
    }
    goto LABEL_10;
  }
  if (v15 == 0.0)
  {
    uint64_t v20 = *(void *)&v18 == 0;
  }
  else
  {
    if (*(void *)&v15 != 1)
    {
      if (*(void *)&v18 <= 1uLL) {
        id v19 = 0;
      }
      if (v19 == 1) {
        return outlined destroy of TypesettingConfiguration((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
      }
      goto LABEL_10;
    }
    uint64_t v20 = *(void *)&v18 == 1;
  }
  if (!v20) {
    LOBYTE(v19) = 0;
  }
  if ((v19 & 1) == 0)
  {
LABEL_10:
    outlined destroy of TypesettingConfiguration((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
LABEL_11:
    outlined init with copy of TypesettingConfiguration(a2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
    id v21 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TypesettingConfigurationKey>>();
    unint64_t v22 = swift_allocObject();
    outlined init with copy of TypesettingConfiguration((uint64_t)v6, v22 + *(void *)(*(void *)v22 + 248), (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
    swift_retain();
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)(v12, 0, v21).value;
    outlined destroy of TypesettingConfiguration((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
    *a1 = value;
    return swift_release();
  }
  return outlined destroy of TypesettingConfiguration((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundStyleKey>, (uint64_t)&type metadata for BackgroundStyleKey, (uint64_t)&protocol witness table for BackgroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  if (!specialized find1<A>(_:key:filter:)(v4, v9)
    || (type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, MEMORY[0x263F8D8F0]), uint64_t result = AGCompareValues(), !result))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundStyleKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolFontKey>, (uint64_t)&type metadata for SymbolFontKey, (uint64_t)&protocol witness table for SymbolFontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v13);
  if (!result) {
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)(result + 72);
  if (!a2)
  {
    if (!v8) {
      return result;
    }
    goto LABEL_7;
  }
  if (!v8
    || (uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 96),
        uint64_t v10 = swift_retain(),
        int v11 = v9(v10),
        uint64_t result = swift_release(),
        (v11 & 1) == 0))
  {
LABEL_7:
    uint64_t v12 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolFontKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v12);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultSymbolFontKey>, (uint64_t)&type metadata for DefaultSymbolFontKey, (uint64_t)&protocol witness table for DefaultSymbolFontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v13);
  if (!result) {
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)(result + 72);
  if (!a2)
  {
    if (!v8) {
      return result;
    }
    goto LABEL_7;
  }
  if (!v8
    || (uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 96),
        uint64_t v10 = swift_retain(),
        int v11 = v9(v10),
        uint64_t result = swift_release(),
        (v11 & 1) == 0))
  {
LABEL_7:
    uint64_t v12 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultSymbolFontKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v12);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt value;
  uint64_t v13[6];

  _OWORD v13[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FallbackFontProviderKey>, (uint64_t)&type metadata for FallbackFontProviderKey, (uint64_t)&protocol witness table for FallbackFontProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t v7 = specialized find1<A>(_:key:filter:)(v4, v13[0]);
  if (!v7
    || (outlined init with copy of AnyTrackedValue(v7 + 72, (uint64_t)v13),
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for FallbackFontProvider), uint64_t v8 = AGCompareValues(), result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13), !v8))
  {
    outlined init with copy of AnyTrackedValue(a2, (uint64_t)v13);
    uint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<FallbackFontProviderKey>>();
    int v11 = swift_allocObject();
    outlined init with copy of AnyTrackedValue((uint64_t)v13, v11 + 72);
    swift_retain();
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10).value;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    *a1 = value;
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlacementTintKey>, (uint64_t)&type metadata for PlacementTintKey, (uint64_t)&protocol witness table for PlacementTintKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  if (!specialized find1<A>(_:key:filter:)(v4, v9)
    || (type metadata accessor for [TintPlacement : AnyShapeStyle](), uint64_t result = AGCompareValues(), !result))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<PlacementTintKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for BodyCountInput<_ViewModifier_Content<SafeAreaPaddingModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for BodyCountInput);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  if (!specialized find1<A>(_:key:filter:)(v4, v9)
    || (type metadata accessor for Date?(0, &lazy cache variable for type metadata for Stack<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for Stack), uint64_t result = AGCompareValues(), !result))
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<BodyCountInput<_ViewModifier_Content<SafeAreaPaddingModifier>>>(0, &lazy cache variable for type metadata for TypedElement<BodyCountInput<_ViewModifier_Content<SafeAreaPaddingModifier>>>, (unint64_t *)&lazy cache variable for type metadata for BodyCountInput<_ViewModifier_Content<SafeAreaPaddingModifier>>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for BodyCountInput);
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  uint64_t v4 = *a1;
  type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for BodyInput<_ViewModifier_Content<SafeAreaPaddingModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for BodyInput);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t v7 = specialized find1<A>(_:key:filter:)(v4, v12);
  if (!v7
    || (uint64_t v8 = *(void *)(v7 + 72),
        swift_retain(),
        uint64_t v9 = specialized static Stack<A>.== infix(_:_:)(a2, v8),
        uint64_t result = swift_release(),
        !v9))
  {
    int v11 = *a1;
    type metadata accessor for TypedElement<BodyCountInput<_ViewModifier_Content<SafeAreaPaddingModifier>>>(0, &lazy cache variable for type metadata for TypedElement<BodyInput<_ViewModifier_Content<SafeAreaPaddingModifier>>>, (unint64_t *)&lazy cache variable for type metadata for BodyInput<_ViewModifier_Content<SafeAreaPaddingModifier>>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for BodyInput);
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v11);
    return swift_release();
  }
  return result;
}

uint64_t outlined retain of OpenURLAction?(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of OpenURLAction?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 != -1) {
    return outlined copy of OpenURLAction.Handler(result, a2, a3, a4, a5 & 1);
  }
  return result;
}

uint64_t assignWithTake for OpenURLAction(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of OpenURLAction.Handler(v5, v6, v7, v8, v9);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  return a1;
}

uint64_t key path setter for EnvironmentValues.openURL : EnvironmentValues(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  __int16 v5 = *(unsigned __int8 *)(a1 + 32);
  if (*(unsigned char *)(a1 + 33)) {
    __int16 v6 = 256;
  }
  else {
    __int16 v6 = 0;
  }
  v8[0] = *(void *)a1;
  v8[1] = v2;
  v8[2] = v3;
  void v8[3] = v4;
  __int16 v9 = v6 | v5;
  outlined copy of OpenURLAction.Handler(v1, v2, v3, v4, v5);
  specialized EnvironmentValues.subscript.setter((uint64_t)v8);

  return outlined consume of OpenURLAction.Handler(v1, v2, v3, v4, v5);
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v7 = *v3;
  swift_retain_n();
  outlined retain of OpenURLAction?(a1, (void (*)(void, void, void, void, void))outlined copy of OpenURLAction?);
  a2(v3, a1, &v10);
  swift_release();
  outlined retain of OpenURLAction?(a1, (void (*)(void, void, void, void, void))outlined consume of OpenURLAction?);
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v7, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v7 = *v3;
  swift_retain();
  swift_retain_n();
  a2(v3, a1, &v10);
  swift_release();
  swift_release();
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v7, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t outlined retain of OpenURLAction?(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t assignWithCopy for OpenURLAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  outlined copy of OpenURLAction.Handler(*(void *)a2, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  char v13 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of OpenURLAction.Handler(v9, v10, v11, v12, v13);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  return a1;
}

uint64_t outlined consume of OpenURLAction.Handler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result = swift_release();
  if (a5)
  {
    return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a3);
  }
  return result;
}

uint64_t initializeWithCopy for OpenURLAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  outlined copy of OpenURLAction.Handler(*(void *)a2, v5, v6, v7, v8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  return a1;
}

uint64_t outlined copy of OpenURLAction.Handler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result = swift_retain();
  if (a5)
  {
    return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a3);
  }
  return result;
}

uint64_t outlined consume of OpenURLAction?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 != -1) {
    return outlined consume of OpenURLAction.Handler(result, a2, a3, a4, a5 & 1);
  }
  return result;
}

uint64_t outlined init with take of OpenURLAction?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for OpenURLAction?, (uint64_t)&type metadata for OpenURLAction, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<OpenURLActionKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<OpenURLActionKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenURLActionKey>, (uint64_t)&type metadata for OpenURLActionKey, (uint64_t)&protocol witness table for OpenURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<OpenURLActionKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<OpenURLActionKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<OpenURLActionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<OpenURLActionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<OpenURLActionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<OpenURLActionKey>, (uint64_t)&type metadata for OpenURLActionKey, (uint64_t)&protocol witness table for OpenURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<OpenURLActionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t initializeWithCopy for ShapeStyleResolver(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

unsigned char *storeEnumTagSinglePayload for Font.Leading(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void DisplayList.Version.init(forUpdate:)(void *a1@<X8>)
{
  *a1 = ++static DisplayList.Version.lastValue;
}

Swift::Void __swiftcall ViewGeometry.finalizeLayoutDirection(_:parentSize:)(SwiftUI::LayoutDirection _, CGSize parentSize)
{
  if (*(unsigned char *)_ == 1)
  {
    double width = parentSize.width;
    v4.origin.double x = *v2;
    v4.origin.double y = v2[1];
    v4.size.double width = v2[4];
    v4.size.double height = v2[5];
    *uint64_t v2 = width - CGRectGetMaxX(v4);
  }
}

uint64_t closure #1 in GraphHost.init(data:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = (*(uint64_t (**)(void))(*(void *)result + 192))();
    uint64_t v3 = v2;
    uint64_t result = swift_release();
    if (v1)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t (*)(void, void), void, uint64_t, uint64_t, uint64_t))(v3 + 8))(_ViewInputs.base.modify, 0, MEMORY[0x263F8EE60] + 8, ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #2 in GraphHost.init(data:)(unsigned int a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    GraphHost.graphInvalidation(from:)(a1);
    return swift_release();
  }
  return result;
}

uint64_t GraphHost.graphInvalidation(from:)(uint64_t a1)
{
  if ((a1 & 0x100000000) == 0)
  {
    id v2 = (id)AGGraphGetAttributeGraph();
    uint64_t result = AGGraphGetContext();
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = result;
    swift_retain();

    swift_beginAccess();
    unint64_t v5 = *(void *)AGGraphGetValue();
    swift_beginAccess();
    char v6 = 0;
    if (v1[168] == 1)
    {
      swift_beginAccess();
      char v6 = *(unsigned char *)(v4 + 168);
    }
    v1[168] = v6;
    if (v5)
    {
      swift_retain();
      uint64_t v7 = _threadTransactionID();
      specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(v5, v7, 1, 1);
      swift_release();
      return swift_release();
    }
    a1 = swift_release();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 192))(a1);
  if (result)
  {
    uint64_t v9 = v8;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v9 + 16))(ObjectType, v9);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ViewGraph.graphDelegate.getter()
{
  swift_beginAccess();
  return MEMORY[0x24C527E00](v0 + 200);
}

Swift::Void __swiftcall ViewRendererHost.graphDidChange()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v4 = static Update._lock;
  _MovableLockLock(static Update._lock);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 80))(&v5, v3, v2);
  if (!(_BYTE)v5) {
    (*(void (**)(uint64_t, double))(*(void *)(v2 + 8) + 32))(v3, 0.0);
  }

  _MovableLockUnlock(v4);
}

uint64_t _ViewList_ReleaseElements.deinit()
{
  uint64_t v1 = v0;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v2 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v3 = *(_DWORD **)(v0 + 24);
  swift_beginAccess();
  int v4 = v3[6] - 1;
  v3[6] = v4;
  if (!v4)
  {
    uint64_t v5 = *(void (**)(uint64_t))(*(void *)v3 + 104);
    uint64_t v6 = swift_retain();
    v5(v6);
    IsValidouble d = AGSubgraphIsValid();
    if (IsValid)
    {
      MEMORY[0x270FA5388](IsValid);
      AGSubgraphApply();
      AGSubgraphInvalidate();
    }
    swift_release();
  }
  static Update.end()();
  _MovableLockUnlock(v2);
  swift_release();
  uint64_t v8 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v8)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native()) {
        break;
      }
      uint64_t v9 = *(void *)(v8 + 16);
      swift_retain();
      swift_release();
      uint64_t v8 = v9;
    }
    while (v9);
  }
  swift_release();
  return v1;
}

uint64_t static Update.locked<A>(_:)(void (*a1)(uint64_t))
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v2 = static Update._lock;
  uint64_t v3 = _MovableLockLock(static Update._lock);
  a1(v3);
  return _MovableLockUnlock(v2);
}

uint64_t specialized static Update.begin()()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  int v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v25 - v6;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t result = _MovableLockLock(static Update._lock);
  uint64_t v9 = static Update.depth + 1;
  if (__OFADD__(static Update.depth, 1))
  {
    __break(1u);
LABEL_21:
    swift_once();
    goto LABEL_6;
  }
  ++static Update.depth;
  if (v9 != 1) {
    return result;
  }
  uint64_t v0 = static os_signpost_type_t.begin.getter();
  if (one-time initialization token for traceHost != -1) {
    goto LABEL_21;
  }
LABEL_6:
  static os_signpost_type_t.event.getter();
  uint64_t result = kdebug_is_enabled();
  if (!result) {
    return result;
  }
  uint64_t v10 = one-time initialization token for _signpostLog;
  swift_unknownObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  id v11 = (id)_signpostLog;
  OSSignpostID.init(log:object:)();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8E0F8];
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 0;
  uint64_t v14 = MEMORY[0x263F8D750];
  *(void *)(inited + 56) = MEMORY[0x263F8D6C8];
  *(void *)(inited + 64) = v14;
  *(void *)(inited + 72) = static Update.traceHost;
  uint64_t v15 = MEMORY[0x263F8D9D0];
  uint64_t v16 = MEMORY[0x263F8DA20];
  *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
  *(void *)(inited + 96) = v15;
  *(void *)(inited + 104) = v16;
  uint64_t v26 = v7;
  uint64_t v27 = v2;
  uint64_t v17 = (void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  (*(void (**)(char *))(v2 + 16))(v4);
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, v12);
  uint64_t v18 = swift_initStackObject();
  long long v28 = xmmword_2461BE2B0;
  *(_OWORD *)(v18 + 16) = xmmword_2461BE2B0;
  if (!*(void *)(inited + 16))
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v19 = v18;
  outlined init with copy of AnyTrackedValue(inited + 32, v18 + 32);
  if (*(void *)(inited + 16) < 2uLL)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    swift_once();
LABEL_13:
    uint64_t v20 = __swift_project_value_buffer(v1, (uint64_t)static OSSignpostID.continuation);
    id v21 = *v17;
    while (1)
    {
      v21(v4, v20, v1);
      uint64_t v22 = swift_initStackObject();
      *(_OWORD *)(v22 + 16) = v28;
      *(_OWORD *)(v22 + 32) = 0u;
      *(_OWORD *)(v22 + 48) = 0u;
      *(_OWORD *)(v22 + 64) = 0u;
      *(_OWORD *)(v22 + 80) = 0u;
      *(_OWORD *)(v22 + 96) = 0u;
      *(_OWORD *)(v22 + 128) = 0u;
      *(void *)(v22 + 144) = 0;
      *(_OWORD *)(v22 + 112) = 0u;
      uint64_t v23 = v22 + 112;
      specialized withKDebugValues(_:_:closure:)(v0, v22, v0, (uint64_t)v4);
      outlined init with copy of CVarArg?(v23, (uint64_t)v29);
      swift_bridgeObjectRelease();
      if (!v30) {
        break;
      }
      outlined destroy of CVarArg?((uint64_t)v29);
      if (one-time initialization token for continuation != -1) {
        swift_once();
      }
      uint64_t v20 = __swift_project_value_buffer(v1, (uint64_t)static OSSignpostID.continuation);
    }
    goto LABEL_18;
  }
  v25[1] = inited;
  uint64_t v0 = v0 | 0x14110024u;
  outlined init with copy of AnyTrackedValue(inited + 72, v19 + 72);
  *(_OWORD *)(v19 + 128) = 0u;
  *(void *)(v19 + 144) = 0;
  *(_OWORD *)(v19 + 112) = 0u;
  specialized withKDebugValues(_:_:closure:)(v0, v19, v0, (uint64_t)v4);
  outlined init with copy of CVarArg?(v19 + 112, (uint64_t)v29);
  swift_bridgeObjectRelease();
  if (v30)
  {
    ++v17;
    outlined destroy of CVarArg?((uint64_t)v29);
    if (one-time initialization token for continuation == -1) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_18:
  outlined destroy of CVarArg?((uint64_t)v29);
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v27 + 8);
  v24(v26, v1);
  return ((uint64_t (*)(char *, uint64_t))v24)(v4, v1);
}

uint64_t _MovableLockLock(uint64_t a1)
{
  uint64_t result = (uint64_t)pthread_self();
  if (result == *(void *)(a1 + 216))
  {
    int v4 = *(_DWORD *)(a1 + 224) + 1;
  }
  else
  {
    uint64_t v3 = result;
    uint64_t result = pthread_mutex_lock((pthread_mutex_t *)a1);
    while (*(void *)(a1 + 216))
      uint64_t result = wait_for_lock((pthread_mutex_t *)a1, v3);
    *(void *)(a1 + 216) = v3;
    int v4 = 1;
  }
  *(_DWORD *)(a1 + 224) = v4;
  return result;
}

uint64_t static Update.end()()
{
  uint64_t v64 = type metadata accessor for OSSignpostID();
  uint64_t v0 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  uint64_t v2 = (char *)&v54 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v54 - v4;
  if (static Update.depth != 1) {
    goto LABEL_48;
  }
  static Update.dispatchActions()();
  unsigned __int8 v6 = static os_signpost_type_t.end.getter();
  if (one-time initialization token for traceHost != -1) {
    swift_once();
  }
  static os_signpost_type_t.event.getter();
  if (!kdebug_is_enabled()) {
    goto LABEL_48;
  }
  uint64_t v7 = one-time initialization token for _signpostLog;
  swift_unknownObjectRetain();
  if (v7 != -1) {
    swift_once();
  }
  id v8 = (id)_signpostLog;
  OSSignpostID.init(log:object:)();
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8E0F8];
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
  *(void *)(inited + 32) = 0;
  uint64_t v58 = inited + 32;
  uint64_t v11 = MEMORY[0x263F8D6C8];
  *(void *)(inited + 72) = static Update.traceHost;
  uint64_t v57 = inited + 72;
  uint64_t v12 = MEMORY[0x263F8D750];
  *(void *)(inited + 56) = v11;
  *(void *)(inited + 64) = v12;
  uint64_t v13 = MEMORY[0x263F8DA20];
  *(void *)(inited + 96) = MEMORY[0x263F8D9D0];
  *(void *)(inited + 104) = v13;
  uint64_t v59 = inited;
  unsigned int v66 = v6 | 0x14110024;
  uint64_t v55 = v5;
  uint64_t v56 = v0;
  (*(void (**)(char *, char *, uint64_t))(v0 + 16))(v2, v5, v64);
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, v9);
  uint64_t v63 = v14;
  char v15 = 0;
  unint64_t v16 = 0;
  uint64_t v60 = (void (**)(char *, uint64_t, uint64_t))(v0 + 24);
  long long v62 = xmmword_2461BE2B0;
  uint64_t v61 = v2;
  while (2)
  {
    uint64_t v17 = (_OWORD *)swift_initStackObject();
    uint64_t v18 = v17;
    v17[1] = v62;
    uint64_t v19 = v17 + 2;
    if (v15)
    {
      long long v20 = 0uLL;
      void v17[5] = 0u;
      v17[6] = 0u;
      int v17[3] = 0u;
      v17[4] = 0u;
      *uint64_t v19 = 0u;
    }
    else
    {
      uint64_t v21 = v59;
      if (v16 >= *(void *)(v59 + 16))
      {
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      outlined init with copy of AnyTrackedValue(v58 + 40 * v16, (uint64_t)v19);
      if (*(void *)(v21 + 16) < 2uLL)
      {
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      outlined init with copy of AnyTrackedValue(v57, (uint64_t)v18 + 72);
      long long v20 = 0uLL;
    }
    v18[7] = v20;
    *((void *)v18 + 18) = 0;
    uint64_t v65 = v18 + 7;
    v18[8] = v20;
    int v70 = (void *)MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0);
    for (uint64_t i = 32; i != 152; i += 40)
    {
      outlined init with copy of CVarArg?((uint64_t)v18 + i, (uint64_t)v69);
      outlined init with copy of CVarArg?((uint64_t)v69, (uint64_t)v67);
      uint64_t v23 = v68;
      if (v68)
      {
        __swift_project_boxed_opaque_existential_1(v67, v68);
        uint64_t v24 = CVarArg.kdebugValue(_:)(v66, v23);
        uint64_t v26 = v25;
        uint64_t v28 = v27;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
        if (v26)
        {
          uint64_t v29 = swift_allocObject();
          *(void *)(v29 + 16) = v26;
          *(void *)(v29 + 24) = v28;
          uint64_t v30 = (uint64_t)partial apply for closure #1 in Transaction.addAnimationLogicalListener(allFinished:);
        }
        else
        {
          uint64_t v30 = 0;
          uint64_t v29 = 0;
        }
      }
      else
      {
        outlined destroy of CVarArg?((uint64_t)v67);
        uint64_t v24 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 1;
      }
      outlined destroy of CVarArg?((uint64_t)v69);
      int v31 = v70;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1);
        int v31 = v70;
      }
      unint64_t v33 = v31[2];
      unint64_t v32 = v31[3];
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        int v31 = v70;
      }
      v31[2] = v33 + 1;
      uint64_t v34 = &v31[3 * v33];
      v34[4] = v24;
      v34[5] = v30;
      v34[6] = v29;
    }
    v69[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33 + 1, 0);
    uint64_t v35 = v69[0];
    unint64_t v36 = *(void *)(v69[0] + 16);
    unint64_t v37 = v33 + 1;
    uint64_t v38 = v31 + 5;
    do
    {
      if (*v38 == 1) {
        uint64_t v39 = 0;
      }
      else {
        uint64_t v39 = *(v38 - 1);
      }
      v69[0] = v35;
      unint64_t v40 = *(void *)(v35 + 24);
      if (v36 >= v40 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v36 + 1, 1);
        uint64_t v35 = v69[0];
      }
      v38 += 3;
      *(void *)(v35 + 16) = v36 + 1;
      *(void *)(v35 + 8 * v36++ + 32) = v39;
      --v37;
    }
    while (v37);
    uint64_t v41 = v61;
    OSSignpostID.rawValue.getter();
    unint64_t v42 = *(void *)(v35 + 16);
    if (!v42)
    {
      __break(1u);
      goto LABEL_52;
    }
    if (v42 == 1)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    if (v42 < 3)
    {
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    kdebug_trace();
    swift_bridgeObjectRelease();
    uint64_t v43 = v31[2];
    if (!v43) {
      goto LABEL_42;
    }
    swift_retain();
    uint64_t v44 = v31 + 6;
    do
    {
      uint64_t v46 = *(v44 - 2);
      uint64_t v47 = (void (*)(uint64_t))*(v44 - 1);
      if (!v47) {
        goto LABEL_36;
      }
      if (v47 != (void (*)(uint64_t))1)
      {
        uint64_t v45 = outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(v44 - 1));
        v47(v45);
LABEL_36:
        _ss6UInt64V3arg_xRi_zRi0_zlyytIsegr_Sg10destructortSgWOe(v46, (uint64_t)v47);
      }
      v44 += 3;
      --v43;
    }
    while (v43);
    swift_release();
LABEL_42:
    swift_release();
    if (*((void *)v18 + 2) < 3uLL) {
      goto LABEL_54;
    }
    outlined init with copy of CVarArg?((uint64_t)v65, (uint64_t)v69);
    swift_bridgeObjectRelease();
    uint64_t v48 = v69[3];
    outlined destroy of CVarArg?((uint64_t)v69);
    if (v48)
    {
      if (one-time initialization token for continuation != -1) {
        swift_once();
      }
      uint64_t v49 = v64;
      uint64_t v50 = __swift_project_value_buffer(v64, (uint64_t)static OSSignpostID.continuation);
      (*v60)(v41, v50, v49);
      char v15 = 1;
      unint64_t v16 = 2;
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  uint64_t v51 = *(void (**)(char *, uint64_t))(v56 + 8);
  uint64_t v52 = v64;
  v51(v55, v64);
  v51(v41, v52);
LABEL_48:
  if (__OFSUB__(static Update.depth, 1)) {
    goto LABEL_57;
  }
  --static Update.depth;
  if (one-time initialization token for _lock != -1) {
LABEL_58:
  }
    swift_once();
  return _MovableLockUnlock(static Update._lock);
}

uint64_t _MovableLockUnlock(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 224) - 1;
  *(_DWORD *)(result + 224) = v1;
  if (!v1)
  {
    uint64_t v2 = result;
    if (*(_DWORD *)(result + 228)) {
      pthread_cond_signal((pthread_cond_t *)(result + 64));
    }
    *(void *)(v2 + 216) = 0;
    return pthread_mutex_unlock((pthread_mutex_t *)v2);
  }
  return result;
}

void static Update.dispatchActions()()
{
  uint64_t v31 = type metadata accessor for OSSignpostID();
  uint64_t v0 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v35 = (char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (lockAssertionsAreEnabled)
  {
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    if (!_MovableLockIsOwner(static Update._lock)) {
      goto LABEL_41;
    }
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (!_MovableLockIsOwner(static Update._lock))
      {
LABEL_41:
        while (1)
        {
LABEL_37:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
    }
  }
  if (static Update.depth == 1)
  {
    if (one-time initialization token for actions != -1) {
      swift_once();
    }
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
    uint64_t v3 = static Update.actions;
    if (*((void *)static Update.actions + 2))
    {
      uint64_t v4 = self;
      uint64_t v34 = v37;
      uint64_t v5 = (void *)*MEMORY[0x263EFF588];
      uint64_t v30 = (void (**)(char *, uint64_t))(v0 + 8);
      long long v33 = xmmword_2461B9DC0;
      unint64_t v32 = v4;
      do
      {
        p_cache[510] = (void *)MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16) = v3;
        swift_bridgeObjectRetain();
        if (objc_msgSend(v4, sel_isMainThread))
        {
          if (one-time initialization token for traceHost != -1) {
            swift_once();
          }
          static os_signpost_type_t.event.getter();
          if (kdebug_is_enabled())
          {
            uint64_t v12 = one-time initialization token for _signpostLog;
            swift_unknownObjectRetain();
            if (v12 != -1) {
              swift_once();
            }
            id v13 = (id)_signpostLog;
            OSSignpostID.init(log:object:)();
            static os_signpost_type_t.begin.getter();
            OSSignpostID.rawValue.getter();
            kdebug_trace();
            uint64_t v14 = specialized static Update.begin()();
            uint64_t v15 = static Update.dispatchDepth;
            uint64_t v16 = static Update.depth;
            static Update.dispatchDepth = static Update.depth;
            uint64_t v17 = v3[2];
            if (v17)
            {
              swift_bridgeObjectRetain();
              uint64_t v18 = (char *)(v3 + 5);
              do
              {
                uint64_t v19 = (void (*)(uint64_t))*((void *)v18 - 1);
                uint64_t v20 = swift_retain();
                v19(v20);
                swift_release();
                if (static Update.depth != v16) {
                  goto LABEL_37;
                }
                v18 += 16;
                --v17;
              }
              while (v17);
              uint64_t v14 = swift_bridgeObjectRelease();
              p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
            }
            static Update.dispatchDepth = v15;
            static Update.end()(v14);
            static os_signpost_type_t.end.getter();
            uint64_t v21 = v35;
            OSSignpostID.rawValue.getter();
            kdebug_trace();
            (*v30)(v21, v31);
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v4 = v32;
          }
          else
          {
            uint64_t v22 = specialized static Update.begin()();
            uint64_t v23 = static Update.dispatchDepth;
            uint64_t v24 = static Update.depth;
            static Update.dispatchDepth = static Update.depth;
            uint64_t v25 = v3[2];
            if (v25)
            {
              swift_bridgeObjectRetain();
              uint64_t v26 = (char *)(v3 + 5);
              do
              {
                uint64_t v27 = (void (*)(uint64_t))*((void *)v26 - 1);
                uint64_t v28 = swift_retain();
                v27(v28);
                swift_release();
                if (static Update.depth != v24) {
                  goto LABEL_37;
                }
                v26 += 16;
                --v25;
              }
              while (v25);
              uint64_t v22 = swift_bridgeObjectRelease();
              p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
              uint64_t v4 = v32;
            }
            static Update.dispatchDepth = v23;
            static Update.end()(v22);
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          id v6 = objc_msgSend(self, sel_mainRunLoop);
          _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NSRunLoopMode>, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, MEMORY[0x263F8E0F8]);
          uint64_t v7 = swift_allocObject();
          *(_OWORD *)(v7 + 16) = v33;
          *(void *)(v7 + 32) = v5;
          type metadata accessor for NSRunLoopMode(0);
          id v8 = v5;
          isdouble a = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          _OWORD v37[2] = partial apply for closure #1 in static Update.dispatchActions();
          _DWORD v37[3] = v11;
          aBlock[0] = MEMORY[0x263EF8330];
          aBlock[1] = 1107296256;
          v37[0] = thunk for @escaping @callee_guaranteed () -> ();
          v37[1] = &block_descriptor_14;
          uint64_t v10 = _Block_copy(aBlock);
          swift_retain();
          swift_release();
          objc_msgSend(v6, sel_performInModes_block_, isa, v10);
          _Block_release(v10);
          swift_bridgeObjectRelease();
          swift_release();
        }
        uint64_t v3 = p_cache[510];
      }
      while (v3[2]);
    }
  }
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> ()()
{
  return thunk for @escaping @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t partial apply for closure #1 in Transaction.addAnimationListener(allFinished:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

Swift::Void __swiftcall ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)(Swift::Double interval, Swift::Bool updateDisplayList, SwiftUI::Time_optional targetTimestamp)
{
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  uint64_t v8 = v3;
  uint64_t v9 = *(void *)&targetTimestamp.is_nil;
  BOOL v10 = updateDisplayList;
  uint64_t v12 = type metadata accessor for OSSignpostID();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)v9;
  int v17 = *(unsigned __int8 *)(v9 + 8);
  specialized static Update.begin()();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 80))(&v23, v8, v7);
  if ((_BYTE)v23)
  {
  }
  else
  {
    static os_signpost_type_t.event.getter();
    if (kdebug_is_enabled())
    {
      BOOL v21 = v10;
      uint64_t v22 = v13;
      uint64_t v18 = one-time initialization token for _signpostLog;
      swift_unknownObjectRetain();
      if (v18 != -1) {
        swift_once();
      }
      id v19 = (id)_signpostLog;
      OSSignpostID.init(log:object:)();
      static os_signpost_type_t.begin.getter();
      OSSignpostID.rawValue.getter();
      kdebug_trace();
      closure #1 in ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)(interval, v6, v21, v16, v17, v8, v7);
      static os_signpost_type_t.end.getter();
      OSSignpostID.rawValue.getter();
      kdebug_trace();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v12);
    }
    else
    {
      closure #1 in ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)(interval, v6, v10, v16, v17, v8, v7);
    }
  }
  static Update.end()();
}

uint64_t closure #1 in ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)(double a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  int v30 = a5;
  uint64_t v29 = a4;
  uint64_t v28 = type metadata accessor for OSSignpostID();
  uint64_t v27 = *(void *)(v28 - 8);
  double v11 = MEMORY[0x270FA5388](v28);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, double))(a7 + 16))(a6, a7, v11);
  uint64_t v15 = (void (*)(uint64_t (**)(), void))(*(uint64_t (**)(uint64_t (**)(), uint64_t, uint64_t))(a7 + 40))(&v41, a6, a7);
  *uint64_t v16 = *v16 + a1;
  v15(&v41, 0);
  (*(void (**)(uint64_t (**__return_ptr)(), uint64_t, uint64_t))(a7 + 24))(&v41, a6, a7);
  int v17 = v41;
  GraphHost.flushTransactions()();
  AGGraphClearUpdate();
  ViewRendererHost.updateGraph()();
  AGGraphSetUpdate();
  LOBYTE(v41) = 1;
  uint64_t v18 = *(void (**)(uint64_t (**)(), uint64_t, uint64_t))(a7 + 88);
  v18(&v41, a6, a7);
  uint64_t v41 = (uint64_t (*)())MEMORY[0x263F8EE78];
  __int16 v42 = 0;
  char v43 = 0;
  uint64_t v44 = 0;
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    HIDWORD(v26) = a3;
    uint64_t v19 = one-time initialization token for _signpostLog;
    swift_unknownObjectRetain();
    if (v19 != -1) {
      swift_once();
    }
    id v20 = (id)_signpostLog;
    OSSignpostID.init(log:object:)();
    static os_signpost_type_t.begin.getter();
    OSSignpostID.rawValue.getter();
    kdebug_trace();
    char v21 = BYTE4(v26);
    closure #2 in closure #1 in ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)(*(double *)&v17, v14, BYTE4(v26) & 1, (uint64_t)&v41);
    static os_signpost_type_t.end.getter();
    LOBYTE(a3) = v21;
    OSSignpostID.rawValue.getter();
    kdebug_trace();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v28);
  }
  else
  {
    closure #2 in closure #1 in ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)(*(double *)&v17, v14, a3 & 1, (uint64_t)&v41);
  }
  swift_beginAccess();
  uint64_t v22 = *(uint64_t *)(v14 + 376);
  if (a3)
  {
    ++static DisplayList.Version.lastValue;
    unint64_t v37 = v41;
    __int16 v38 = v42;
    char v39 = v43;
    uint64_t v35 = v22;
    unint64_t v36 = v17;
    char v34 = v30 & 1;
    uint64_t v32 = v44;
    uint64_t v33 = v29;
    uint64_t v31 = static DisplayList.Version.lastValue;
    swift_bridgeObjectRetain();
    ViewRendererHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)((uint64_t)&v37, 0, &v36, &v35, (uint64_t)&v33, &v32, &v31, a6, &v40, a7);
    swift_bridgeObjectRelease();
    uint64_t v22 = v40;
  }
  LOBYTE(v37) = 0;
  v18(&v37, a6, a7);
  if ((~v22 & 0x7FF0000000000000) != 0)
  {
    if (*(double *)&v17 >= *(double *)&v22) {
      double v24 = *(double *)&v17;
    }
    else {
      double v24 = *(double *)&v22;
    }
    v23.n128_f64[0] = v24 - *(double *)&v17;
    if (v23.n128_f64[0] <= 0.000001) {
      v23.n128_f64[0] = 0.000001;
    }
    (*(void (**)(uint64_t, __n128))(*(void *)(a7 + 8) + 32))(a6, v23);
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t ViewGraphDelegate.updateGraph<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[2] = a3;
  v6[3] = a4;
  v6[4] = a5;
  v6[5] = a1;
  v6[6] = a2;
  return (*(uint64_t (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(a5 + 24))(partial apply for closure #1 in ViewGraphDelegate.updateGraph<A>(body:), v6, a4, a3);
}

uint64_t ViewRendererHost.updateViewGraph<A>(body:)(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  specialized static Update.begin()();
  AGGraphClearUpdate();
  ViewRendererHost.updateGraph()();
  (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
  a1();
  swift_release();
  AGGraphSetUpdate();

  return static Update.end()();
}

Swift::Void __swiftcall ViewRendererHost.updateGraph()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = (*(void *(**)(void *__return_ptr))(v1 + 56))(v15);
  __int16 v6 = v15[0];
  if (LOWORD(v15[0]))
  {
    MEMORY[0x270FA5388](v5);
    v12[2] = v4;
    v12[3] = v3;
    __int16 v13 = v6;
    uint64_t v14 = v2;
    if (objc_msgSend(self, sel_isMainThread))
    {
      closure #1 in ViewRendererHost.updateGraph()(v6, v2, v4, v3);
    }
    else
    {
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = partial apply for closure #1 in ViewRendererHost.updateGraph();
      *(void *)(v7 + 24) = v12;
      id v8 = (id)AGSubgraphGetCurrent();
      Currentint Attribute = AGGraphGetCurrentAttribute();
      v15[0] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
      v15[1] = v7;
      id v16 = v8;
      int v17 = CurrentAttribute;
      uint64_t v10 = one-time initialization token for _lock;
      swift_retain();
      if (v10 != -1) {
        swift_once();
      }
      _MovableLockSyncMain(static Update._lock, (uint64_t)v15, (void (*)(uint64_t))@objc closure #1 in closure #1 in closure #1 in static Update.syncMain(_:));
      swift_release();

      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (isEscapingClosureAtFileLocation) {
        __break(1u);
      }
    }
  }
}

uint64_t partial apply for closure #1 in ViewGraphDelegate.updateGraph<A>(body:)()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

void closure #2 in closure #1 in ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  int v6 = 1;
  p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  id v8 = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  uint64_t v9 = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  while (1)
  {
    int v11 = v6;
    static Update.dispatchActions()();
    double v26 = a1;
    ViewGraph.beginNextUpdate(at:)(&v26);
    ViewGraph.updateOutputs(async:)(0);
    static Update.dispatchActions()();
    GraphHost.flushTransactions()();
    if (a3)
    {
      type metadata accessor for (DisplayList, DisplayList.Version)();
      Weakuint64_t Value = AGGraphGetWeakValue();
      if (WeakValue)
      {
        uint64_t v13 = *(void *)WeakValue;
        int v14 = v11;
        uint64_t v15 = a3;
        id v16 = v9;
        int v17 = v8;
        uint64_t v18 = p_cache;
        __int16 v19 = *(_WORD *)(WeakValue + 8);
        char v20 = *(unsigned char *)(WeakValue + 10);
        uint64_t v21 = *(void *)(WeakValue + 16);
        swift_bridgeObjectRetain();
        if (v13)
        {
          uint64_t v22 = v13;
        }
        else
        {
          uint64_t v21 = 0;
          uint64_t v22 = MEMORY[0x263F8EE78];
        }
        if (v13) {
          __int16 v23 = v19;
        }
        else {
          __int16 v23 = 0;
        }
        p_cache = v18;
        id v8 = v17;
        uint64_t v9 = v16;
        a3 = v15;
        int v11 = v14;
        if (v13) {
          char v24 = v20;
        }
        else {
          char v24 = 0;
        }
      }
      else
      {
        uint64_t v21 = 0;
        __int16 v23 = 0;
        char v24 = 0;
        uint64_t v22 = MEMORY[0x263F8EE78];
      }
      *(void *)a4 = v22;
      *(_WORD *)(a4 + 8) = v23;
      *(unsigned char *)(a4 + 10) = v24;
      swift_bridgeObjectRelease();
      *(void *)(a4 + 16) = v21;
    }
    if (p_cache[508] != (void *)-1) {
      swift_once();
    }
    if (*((unsigned char *)v8 + 2984) == 1)
    {
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (!_MovableLockIsOwner(static Update._lock)) {
        break;
      }
    }
    if (v9[213] != (void *)1) {
      goto LABEL_2;
    }
    if (one-time initialization token for actions != -1) {
      swift_once();
    }
    if (*((void *)static Update.actions + 2))
    {
      int v6 = 0;
      if ((v11 & 1) == 0) {
        return;
      }
    }
    else
    {
LABEL_2:
      IsDirtdouble y = AGSubgraphIsDirty();
      int v6 = 0;
      if ((v11 & IsDirty & 1) == 0) {
        return;
      }
    }
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall GraphHost.flushTransactions()()
{
  uint64_t v1 = (id *)v0;
  swift_beginAccess();
  if (!*(void *)(v0 + 16)) {
    return;
  }
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v29 = *(void *)(v2 + 16);
  if (!v29) {
    return;
  }
  unint64_t v3 = 0;
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 144) = MEMORY[0x263F8EE78];
  uint64_t v5 = (uint64_t *)(v0 + 160);
  uint64_t v27 = v2 + 32;
  uint64_t v28 = (id *)v0;
  uint64_t v26 = v2;
  do
  {
    if (v3 >= *(void *)(v2 + 16)) {
      __break(1u);
    }
    int v6 = (uint64_t *)(v27 + 24 * v3);
    uint64_t v7 = *v6;
    uint64_t v8 = v6[2];
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    GraphHost.instantiateIfNeeded()();
    if (v7) {
      AGGraphSetValue();
    }
    *((unsigned char *)v1 + 152) = 1;
    AGGraphGetValue();
    AGGraphSetValue();
    swift_retain();
    _threadTransactionData();
    uint64_t v9 = one-time initialization token for v5;
    swift_retain();
    if (v9 != -1) {
      swift_once();
    }
    unsigned int v10 = static Semantics.v5;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F4504 == 1)
    {
      if ((dyld_program_minos_at_least() & 1) == 0) {
        goto LABEL_20;
      }
    }
    else if (dword_26B0F4500 < v10)
    {
      goto LABEL_20;
    }
    if (_threadTransactionData())
    {
      swift_unknownObjectRetain();
      swift_release();
      type metadata accessor for PropertyList.Element();
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_release();
    }
    PropertyList.merge(_:)(v7);
LABEL_20:
    _setThreadTransactionData();
    uint64_t v11 = *(void *)(v8 + 16);
    if (v11)
    {
      unint64_t v30 = v3;
      uint64_t v12 = (void *)(v8 + 32);
      swift_bridgeObjectRetain();
      do
      {
        uint64_t v14 = v12[3];
        uint64_t v13 = v12[4];
        __swift_project_boxed_opaque_existential_1(v12, v14);
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v13);
        v12 += 5;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
      unint64_t v3 = v30;
    }
    unint64_t v31 = v3 + 1;
    _setThreadTransactionData();
    swift_release();
    swift_release();
    id v15 = v1[3];
    swift_beginAccess();
    uint64_t v16 = 0;
    int v17 = v1[20];
    do
    {
      *uint64_t v5 = v4;
      uint64_t v18 = v17[2];
      if (v18)
      {
        __int16 v19 = v17 + 5;
        do
        {
          char v20 = (void (*)(uint64_t))*(v19 - 1);
          uint64_t v21 = swift_retain();
          v20(v21);
          swift_release();
          v19 += 2;
          --v18;
        }
        while (v18);
      }
      ++v16;
      swift_bridgeObjectRelease();
      AGSubgraphUpdate();
      if (v16 == 8) {
        break;
      }
      int v17 = (void *)*v5;
    }
    while (*(void *)(*v5 + 16));
    uint64_t v1 = v28;
    *((unsigned char *)v28 + 152) = 0;

    if (v7) {
      AGGraphSetValue();
    }
    swift_bridgeObjectRelease_n();
    swift_release_n();
    uint64_t v2 = v26;
    unint64_t v3 = v31;
  }
  while (v31 != v29);
  uint64_t v22 = swift_bridgeObjectRelease();
  if ((*((uint64_t (**)(uint64_t))*v28 + 24))(v22))
  {
    uint64_t v24 = v23;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v24 + 16))(ObjectType, v24);
    swift_unknownObjectRelease();
  }
  swift_beginAccess();
  *((unsigned char *)v28 + 168) = 1;
}

void type metadata accessor for (DisplayList, DisplayList.Version)()
{
  if (!lazy cache variable for type metadata for (DisplayList, DisplayList.Version))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (DisplayList, DisplayList.Version));
    }
  }
}

uint64_t ViewGraph.beginNextUpdate(at:)(double *a1)
{
  double v2 = *a1;
  swift_beginAccess();
  if (*(double *)AGGraphGetValue() != v2)
  {
    AGGraphSetValue();
    swift_beginAccess();
    if (one-time initialization token for infinity != -1) {
      swift_once();
    }
    v1[47] = static Time.infinity;
    uint64_t v3 = MEMORY[0x263F8EE88];
    v1[48] = 0x7FF0000000000000;
    v1[49] = v3;
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  AGGraphGetValue();
  AGGraphSetValue();
  if (!v1[2]) {
    __break(1u);
  }
  uint64_t result = AGGraphGetCounter();
  v1[46] = result;
  return result;
}

uint64_t ViewGraph.updateOutputs(async:)(char a1)
{
  uint64_t v2 = v1;
  uint64_t v41 = *MEMORY[0x263EF8340];
  __int16 v37 = 0;
  char v36 = 0;
  uint64_t v4 = v1 + 160;
  uint64_t v33 = v1 + 352;
  swift_beginAccess();
  uint64_t v32 = (uint64_t *)(v1 + 216);
  swift_beginAccess();
  uint64_t v31 = 0;
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v34 = v1;
  do
  {
    uint64_t v35 = v6;
    GraphHost.instantiateIfNeeded()();
    *(unsigned char *)(v2 + 152) = 1;
    LODWORD(v38[0]) = *(_DWORD *)AGGraphGetValue() + 1;
    AGGraphSetValue();
    id v7 = *(id *)(v2 + 24);
    swift_beginAccess();
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(v2 + 160);
    do
    {
      *(void *)uint64_t v4 = MEMORY[0x263F8EE78];
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        uint64_t v11 = v9 + 40;
        do
        {
          uint64_t v12 = *(void (**)(uint64_t))(v11 - 8);
          uint64_t v13 = swift_retain();
          v12(v13);
          swift_release();
          v11 += 16;
          --v10;
        }
        while (v10);
      }
      ++v8;
      swift_bridgeObjectRelease();
      AGSubgraphUpdate();
      if (v8 == 8) {
        break;
      }
      uint64_t v9 = *(void *)v4;
    }
    while (*(void *)(*(void *)v4 + 16));
    uint64_t v2 = v34;
    *(unsigned char *)(v34 + 152) = 0;

    if (GraphHost.updatePreferences()())
    {
      LODWORD(v31) = 1;
      HIBYTE(v37) = 1;
    }
    swift_beginAccess();
    char v14 = specialized ViewGraphGeometryObservers.needsUpdate(graph:)(v2);
    swift_endAccess();
    if (v14)
    {
      HIDWORD(v31) = 1;
      char v36 = 1;
    }
    int v15 = *(_DWORD *)(v2 + 228);
    if (v15)
    {
      uint64_t v16 = *v32;
      if (*v32)
      {
        int v17 = 0;
        int v18 = v15 - 1;
        while (1)
        {
          char v20 = (uint64_t *)(v16 + v17);
          if (v18)
          {
            v17 += *((_DWORD *)v20 + 2);
            if (a1) {
              goto LABEL_21;
            }
          }
          else
          {
            int v17 = 0;
            if (a1)
            {
LABEL_21:
              if ((*((unsigned char *)v20 + 12) & 2) != 0) {
                goto LABEL_16;
              }
            }
          }
          if ((*((unsigned char *)v20 + 12) & 1) == 0)
          {
            uint64_t v21 = *v20;
            v38[0] = v20;
            if (((*(uint64_t (**)(void *, uint64_t))(v21 + 152))(v38, v2) & 1) == 0) {
              goto LABEL_16;
            }
            *((_DWORD *)v20 + 3) |= 1u;
          }
          int v5 = 1;
          LOBYTE(v37) = 1;
LABEL_16:
          if (!(v18-- | v17)) {
            goto LABEL_25;
          }
        }
      }
LABEL_36:
      __break(1u);
    }
LABEL_25:
    uint64_t v6 = v35 + 1;
    uint64_t result = AGSubgraphIsDirty();
  }
  while (v35 != 7 && (result & 1) != 0);
  if (((v31 | v5 | HIDWORD(v31)) & 1) == 0) {
    return result;
  }
  MEMORY[0x270FA5388](result);
  void v28[2] = (char *)&v37 + 1;
  unint64_t v28[3] = v2;
  v28[4] = &v37;
  char v29 = a1 & 1;
  unint64_t v30 = &v36;
  if (objc_msgSend(self, sel_isMainThread))
  {
    uint64_t result = (uint64_t)closure #1 in ViewGraph.updateOutputs(async:)((unsigned char *)&v37 + 1, v2, &v37, a1 & 1, &v36);
    goto LABEL_33;
  }
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = partial apply for closure #1 in ViewGraph.updateOutputs(async:);
  *(void *)(v23 + 24) = v28;
  id v24 = (id)AGSubgraphGetCurrent();
  Currentint Attribute = AGGraphGetCurrentAttribute();
  v38[0] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v38[1] = v23;
  id v39 = v24;
  int v40 = CurrentAttribute;
  uint64_t v26 = one-time initialization token for _lock;
  swift_retain();
  if (v26 != -1) {
    swift_once();
  }
  _MovableLockSyncMain(static Update._lock, (uint64_t)v38, (void (*)(uint64_t))@objc closure #1 in closure #1 in closure #1 in static Update.syncMain(_:));
  swift_release();

  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_36;
  }
LABEL_33:
  --*(void *)(v2 + 368);
  return result;
}

uint64_t static ViewGraphFeatureBuffer._VTable.needsUpdate(elt:graph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 168);
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 + 176) + 48))(a2, v4) & 1;
}

Swift::Void __swiftcall GraphHost.instantiateIfNeeded()()
{
  uint64_t v1 = (unsigned char *)v0;
  uint64_t v2 = (Swift::OpaquePointer *)(v0 + 128);
  swift_beginAccess();
  if ((v1[128] & 1) == 0)
  {
    if (one-time initialization token for waitingForPreviewThunks != -1) {
      goto LABEL_24;
    }
    while (waitingForPreviewThunks)
    {
      if (one-time initialization token for blockedGraphHosts != -1) {
        swift_once();
      }
      uint64_t v2 = &blockedGraphHosts;
      swift_beginAccess();
      uint64_t v3 = *((void *)blockedGraphHosts._rawValue + 2);
      if (!v3) {
        goto LABEL_13;
      }
      if (*((unsigned char **)blockedGraphHosts._rawValue + 4) == v1) {
        return;
      }
      if (v3 == 1)
      {
LABEL_13:
        swift_beginAccess();
        rawuint64_t Value = blockedGraphHosts._rawValue;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        blockedGraphHosts._rawuint64_t Value = rawValue;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          rawuint64_t Value = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, rawValue[2] + 1, 1, rawValue);
          blockedGraphHosts._rawuint64_t Value = rawValue;
        }
        unint64_t v8 = rawValue[2];
        unint64_t v9 = rawValue[3];
        unint64_t v10 = v8 + 1;
        if (v8 >= v9 >> 1)
        {
          int v15 = rawValue;
          unint64_t v16 = rawValue[2];
          int v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v8 + 1, 1, v15);
          unint64_t v8 = v16;
          rawuint64_t Value = v17;
          blockedGraphHosts._rawuint64_t Value = v17;
        }
        rawValue[2] = v10;
        rawValue[v8 + 4] = v1;
        swift_endAccess();
        return;
      }
      uint64_t v4 = 5;
      while (1)
      {
        uint64_t v5 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        if (*((unsigned char **)blockedGraphHosts._rawValue + v4) == v1) {
          return;
        }
        ++v4;
        if (v5 == v3) {
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_24:
      swift_once();
    }
    if (((uint64_t)v2->_rawValue & 1) == 0)
    {
      uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v1 + 192))();
      if (v11)
      {
        uint64_t v13 = v12;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t (*)(void, void), void, uint64_t, uint64_t, uint64_t))(v13 + 8))(_ViewInputs.base.modify, 0, MEMORY[0x263F8EE60] + 8, ObjectType, v13);
        uint64_t v11 = swift_unknownObjectRelease();
      }
      (*(void (**)(uint64_t))(*(void *)v1 + 208))(v11);
      v1[128] = 1;
    }
  }
}

uint64_t specialized ViewGraphGeometryObservers.needsUpdate(graph:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  if (*(unsigned char *)(a1 + 41))
  {
    LOBYTE(v4) = 0;
    return v4 & 1;
  }
  uint64_t v56 = *v2 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(*v2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(*v2 + 64);
  uint64_t v59 = *v2;
  swift_bridgeObjectRetain();
  uint64_t v58 = (unsigned char *)(a1 + 361);
  swift_beginAccess();
  int v4 = 0;
  int64_t v8 = 0;
  int64_t v57 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      uint64_t v10 = (v7 - 1) & v7;
      unint64_t v11 = v9 | (v8 << 6);
    }
    else
    {
      int64_t v12 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_67;
      }
      if (v12 >= v57)
      {
LABEL_63:
        swift_release();
        return v4 & 1;
      }
      unint64_t v13 = *(void *)(v56 + 8 * v12);
      ++v8;
      if (!v13)
      {
        int64_t v8 = v12 + 1;
        if (v12 + 1 >= v57) {
          goto LABEL_63;
        }
        unint64_t v13 = *(void *)(v56 + 8 * v8);
        if (!v13)
        {
          int64_t v8 = v12 + 2;
          if (v12 + 2 >= v57) {
            goto LABEL_63;
          }
          unint64_t v13 = *(void *)(v56 + 8 * v8);
          if (!v13)
          {
            int64_t v8 = v12 + 3;
            if (v12 + 3 >= v57) {
              goto LABEL_63;
            }
            unint64_t v13 = *(void *)(v56 + 8 * v8);
            if (!v13)
            {
              int64_t v8 = v12 + 4;
              if (v12 + 4 >= v57) {
                goto LABEL_63;
              }
              unint64_t v13 = *(void *)(v56 + 8 * v8);
              if (!v13)
              {
                int64_t v14 = v12 + 5;
                if (v14 >= v57) {
                  goto LABEL_63;
                }
                unint64_t v13 = *(void *)(v56 + 8 * v14);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v8 = v14 + 1;
                    if (__OFADD__(v14, 1)) {
                      goto LABEL_68;
                    }
                    if (v8 >= v57) {
                      goto LABEL_63;
                    }
                    unint64_t v13 = *(void *)(v56 + 8 * v8);
                    ++v14;
                    if (v13) {
                      goto LABEL_27;
                    }
                  }
                }
                int64_t v8 = v14;
              }
            }
          }
        }
      }
LABEL_27:
      uint64_t v10 = (v13 - 1) & v13;
      unint64_t v11 = __clz(__rbit64(v13)) + (v8 << 6);
    }
    uint64_t v15 = *(void *)(v59 + 48) + 32 * v11;
    uint64_t v16 = *(void *)v15;
    char v17 = *(unsigned char *)(v15 + 8);
    uint64_t v18 = *(void *)(v15 + 16);
    char v19 = *(unsigned char *)(v15 + 24);
    uint64_t v64 = *(void *)v15;
    char v65 = v17;
    uint64_t v66 = v18;
    char v67 = v19;
    if ((*v58 & 0x10) == 0) {
      goto LABEL_69;
    }
    unint64_t v60 = v10;
    int64_t v61 = v8;
    GraphHost.instantiateIfNeeded()();
    Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
    int v62 = v4;
    if (WeakValue)
    {
      uint64_t v22 = *WeakValue;
      uint64_t v21 = WeakValue[1];
      swift_retain();
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v21 = 0;
    }
    v63[0] = v22;
    v63[1] = v21;
    uint64_t v23 = a1;
    ViewGraph.rootViewInsets.getter();
    specialized static ViewGraph.sizeThatFits(_:layoutComputer:insets:)((uint64_t)&v64, v63, v24, v25, v26, v27);
    double v29 = v28;
    double v31 = v30;
    swift_release();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v64 = *v2;
    uint64_t v33 = v64;
    uint64_t v34 = v2;
    *uint64_t v2 = 0x8000000000000000;
    LOBYTE(v63[0]) = v17;
    unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17, v18, v19);
    uint64_t v37 = *(void *)(v33 + 16);
    BOOL v38 = (v35 & 1) == 0;
    uint64_t v39 = v37 + v38;
    if (__OFADD__(v37, v38)) {
      break;
    }
    char v40 = v35;
    if (*(void *)(v33 + 24) >= v39)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if ((v35 & 1) == 0) {
          goto LABEL_66;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v40 & 1) == 0) {
          goto LABEL_66;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, isUniquelyReferenced_nonNull_native);
      LOBYTE(v63[0]) = v17;
      unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17, v18, v19);
      if ((v40 & 1) != (v42 & 1)) {
        goto LABEL_70;
      }
      unint64_t v36 = v41;
      if ((v40 & 1) == 0) {
        goto LABEL_66;
      }
    }
    uint64_t v43 = v64;
    uint64_t v44 = *(void *)(v64 + 56) + 56 * v36;
    double v45 = *(double *)v44;
    double v46 = *(double *)(v44 + 8);
    double v47 = *(double *)(v44 + 16);
    double v48 = *(double *)(v44 + 24);
    long long v49 = *(_OWORD *)(v44 + 40);
    if (*(unsigned char *)(v44 + 32))
    {
      unint64_t v7 = v60;
      int64_t v8 = v61;
      if (*(unsigned char *)(v44 + 32) == 1)
      {
        if (v29 == v45 && v31 == v46)
        {
LABEL_54:
          double v47 = 0.0;
          double v48 = 0.0;
          int v52 = 0;
          double v45 = v29;
          double v46 = v31;
          if (!(void)v49) {
            goto LABEL_6;
          }
          goto LABEL_60;
        }
      }
      else
      {
        if (*(void *)&v47 | *(void *)&v46 | *(void *)&v45 | *(void *)&v48) {
          goto LABEL_54;
        }
        if (one-time initialization token for invalidValue != -1)
        {
          long long v55 = *(_OWORD *)(v44 + 40);
          swift_once();
          long long v49 = v55;
        }
        double v46 = *((double *)&static SizeThatFitsMeasurer.invalidValue + 1);
        double v45 = *(double *)&static SizeThatFitsMeasurer.invalidValue;
      }
    }
    else
    {
      BOOL v51 = v29 == v45 && v31 == v46;
      unint64_t v7 = v60;
      int64_t v8 = v61;
      if (v51)
      {
        int v52 = 0;
        if (!(void)v49) {
          goto LABEL_6;
        }
        goto LABEL_60;
      }
    }
    double v47 = v29;
    double v48 = v31;
    int v52 = 1;
    if (!(void)v49)
    {
LABEL_6:
      specialized _NativeDictionary._delete(at:)(v36, v43);
      goto LABEL_7;
    }
LABEL_60:
    uint64_t v53 = *(void *)(v43 + 56) + 56 * v36;
    *(double *)uint64_t v53 = v45;
    *(double *)(v53 + 8) = v46;
    *(double *)(v53 + 16) = v47;
    *(double *)(v53 + 24) = v48;
    *(unsigned char *)(v53 + 32) = v52;
    *(_OWORD *)(v53 + 40) = v49;
LABEL_7:
    uint64_t v2 = v34;
    uint64_t *v34 = v43;
    int v4 = v52 | v62;
    a1 = v23;
  }
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_70:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Bool __swiftcall GraphHost.updatePreferences()()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    uint64_t v9 = *WeakValue;
    PreferenceValues.seed.getter(&v8);
    int v3 = v8;
  }
  else
  {
    int v3 = 0;
  }
  swift_beginAccess();
  int v4 = *(_DWORD *)(v1 + 140);
  Swift::Bool result = v3 == -1 || v4 == -1 || v3 != v4;
  *(_DWORD *)(v1 + 140) = v3;
  return result;
}

void PreferenceValues.seed.getter(_DWORD *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    int v4 = (unsigned int *)(*(void *)v1 + 48);
    do
    {
      unsigned int v6 = *v4;
      v4 += 14;
      uint64_t v5 = v6;
      if (v3 != 0xFFFFFFFFLL && v5 != 0)
      {
        if (!v3 || v5 == 0xFFFFFFFFLL)
        {
          uint64_t v3 = v5;
        }
        else
        {
          unint64_t v8 = (v5 | (v3 << 32)) + ~(v5 << 32);
          unint64_t v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
          unint64_t v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
          uint64_t v3 = ((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~(v10 << 27));
        }
      }
      --v2;
    }
    while (v2);
    *a1 = v3;
  }
  else
  {
    *a1 = 0;
  }
}

uint64_t ViewGraph.rootViewInsets.getter()
{
  uint64_t result = AGGraphGetValue();
  uint64_t v1 = *(float64x2_t **)result;
  uint64_t v2 = *(void *)(*(void *)result + 16);
  if (!v2) {
    return result;
  }
  if (v2 == 1)
  {
    uint64_t v3 = 0;
    float64x2_t v4 = 0uLL;
    float64x2_t v5 = 0uLL;
LABEL_8:
    uint64_t v12 = v2 - v3;
    unint64_t v13 = (float64x2_t *)((char *)v1 + 40 * v3 + 40);
    do
    {
      float64x2_t v5 = vaddq_f64(v5, v13[1]);
      float64x2_t v4 = vaddq_f64(v4, *v13);
      unint64_t v13 = (float64x2_t *)((char *)v13 + 40);
      --v12;
    }
    while (v12);
    goto LABEL_10;
  }
  uint64_t v3 = v2 & 0x7FFFFFFFFFFFFFFELL;
  unsigned int v6 = v1 + 5;
  float64x2_t v4 = 0uLL;
  uint64_t v7 = v2 & 0x7FFFFFFFFFFFFFFELL;
  float64x2_t v5 = 0uLL;
  do
  {
    float64x2_t v8 = *(float64x2_t *)((char *)v6 - 24);
    float64x2_t v9 = *(float64x2_t *)((char *)v6 - 40);
    float64x2_t v11 = *v6;
    float64x2_t v10 = v6[1];
    v6 += 5;
    float64x2_t v5 = vaddq_f64(vaddq_f64(v5, v8), v10);
    float64x2_t v4 = vaddq_f64(vaddq_f64(v4, v9), v11);
    v7 -= 2;
  }
  while (v7);
  if (v2 != v3) {
    goto LABEL_8;
  }
LABEL_10:
  if (v4.f64[1] != v5.f64[1])
  {
    swift_beginAccess();
    uint64_t Value = (uint64_t *)AGGraphGetValue();
    uint64_t v15 = *Value;
    if (Value[1])
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v15, &v17);
      swift_release_n();
      return swift_release_n();
    }
    else
    {
      uint64_t v16 = swift_retain_n();
      specialized find<A>(_:key:)(v16);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t specialized static ViewGraph.sizeThatFits(_:layoutComputer:insets:)(uint64_t result, uint64_t *a2, double a3, double a4, double a5, double a6)
{
  double v6 = *(double *)result;
  char v7 = *(unsigned char *)(result + 8);
  char v8 = *(unsigned char *)(result + 24);
  uint64_t v9 = *a2;
  if (v7)
  {
    double v10 = *(double *)(result + 16);
    if (*(unsigned char *)(result + 24)) {
      goto LABEL_3;
    }
LABEL_15:
    if (v10 - (a3 + a5) < 0.0) {
      double v10 = 0.0;
    }
    else {
      double v10 = v10 - (a3 + a5);
    }
    if (!v9) {
      return result;
    }
    goto LABEL_4;
  }
  if (v6 - (a4 + a6) < 0.0) {
    double v6 = 0.0;
  }
  else {
    double v6 = v6 - (a4 + a6);
  }
  double v10 = *(double *)(result + 16);
  if ((*(unsigned char *)(result + 24) & 1) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  if (!v9) {
    return result;
  }
LABEL_4:
  uint64_t v11 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v11 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_10;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_10:
    double v12 = v6;
    char v13 = v7;
    double v14 = v10;
    char v15 = v8;
    (*(void (**)(double *))(*(void *)v9 + 120))(&v12);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in ViewRendererHost.updateGraph()(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7 = a1;
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = a3;
  v9[3] = a4;
  v9[4] = a2;
  swift_unknownObjectRetain();
  if (v7)
  {
    uint64_t v11 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 72))(v37, a3, a4);
    if (*v10) {
      *v10 &= ~1u;
    }
    v11(v37, 0);
    (*(void (**)(void))(v9[3] + 128))(v9[2]);
  }
  swift_release();
  double v12 = (void *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  void v12[4] = a2;
  swift_unknownObjectRetain();
  if ((a1 & 2) != 0)
  {
    double v14 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 72))(v37, a3, a4);
    if ((*v13 & 2) != 0) {
      *v13 &= ~2u;
    }
    v14(v37, 0);
    (*(void (**)(void))(v12[3] + 136))(v12[2]);
  }
  swift_release();
  char v15 = (void *)swift_allocObject();
  void v15[2] = a3;
  v15[3] = a4;
  v15[4] = a2;
  swift_unknownObjectRetain();
  if ((a1 & 4) != 0)
  {
    char v17 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 72))(v37, a3, a4);
    if ((*v16 & 4) != 0) {
      *v16 &= ~4u;
    }
    v17(v37, 0);
    (*(void (**)(void))(v15[3] + 144))(v15[2]);
  }
  swift_release();
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = a3;
  void v18[3] = a4;
  v18[4] = a2;
  swift_unknownObjectRetain();
  if ((a1 & 8) != 0)
  {
    char v20 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 72))(v37, a3, a4);
    if ((*v19 & 8) != 0) {
      *v19 &= ~8u;
    }
    v20(v37, 0);
    (*(void (**)(void))(v18[3] + 152))(v18[2]);
  }
  swift_release();
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = a3;
  _OWORD v21[3] = a4;
  v21[4] = a2;
  swift_unknownObjectRetain();
  if ((a1 & 0x10) != 0)
  {
    uint64_t v23 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 72))(v37, a3, a4);
    if ((*v22 & 0x10) != 0) {
      *v22 &= ~0x10u;
    }
    v23(v37, 0);
    (*(void (**)(void))(v21[3] + 160))(v21[2]);
  }
  swift_release();
  double v24 = (void *)swift_allocObject();
  void v24[2] = a3;
  _OWORD v24[3] = a4;
  v24[4] = a2;
  swift_unknownObjectRetain();
  if ((a1 & 0x20) != 0)
  {
    double v26 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 72))(v37, a3, a4);
    if ((*v25 & 0x20) != 0) {
      *v25 &= ~0x20u;
    }
    v26(v37, 0);
    (*(void (**)(void))(v24[3] + 168))(v24[2]);
  }
  swift_release();
  double v27 = (void *)swift_allocObject();
  v27[2] = a3;
  v27[3] = a4;
  v27[4] = a2;
  swift_unknownObjectRetain();
  if ((a1 & 0x40) != 0)
  {
    double v29 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 72))(v37, a3, a4);
    if ((*v28 & 0x40) != 0) {
      *v28 &= ~0x40u;
    }
    v29(v37, 0);
    (*(void (**)(void))(v27[3] + 176))(v27[2]);
  }
  swift_release();
  double v30 = (void *)swift_allocObject();
  void v30[2] = a3;
  _OWORD v30[3] = a4;
  unsigned char v30[4] = a2;
  swift_unknownObjectRetain();
  if ((a1 & 0x80) != 0)
  {
    uint64_t v32 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 72))(v37, a3, a4);
    if ((*v31 & 0x80) != 0) {
      *v31 &= ~0x80u;
    }
    v32(v37, 0);
    (*(void (**)(void))(v30[3] + 184))(v30[2]);
  }
  swift_release();
  uint64_t v33 = (void *)swift_allocObject();
  _OWORD v33[2] = a3;
  void v33[3] = a4;
  v33[4] = a2;
  swift_unknownObjectRetain();
  if ((a1 & 0x100) != 0)
  {
    char v35 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 72))(v37, a3, a4);
    if ((*v34 & 0x100) != 0) {
      *v34 &= ~0x100u;
    }
    v35(v37, 0);
    (*(void (**)(void))(v33[3] + 192))(v33[2]);
  }
  return swift_release();
}

uint64_t partial apply for closure #1 in _AppearanceActionModifier.MergedBox.update()()
{
  return closure #1 in _AppearanceActionModifier.MergedBox.update()(v0);
}

uint64_t closure #1 in _AppearanceActionModifier.MergedBox.update()(uint64_t result)
{
  *(unsigned char *)(result + 64) = 0;
  int v1 = *(_DWORD *)(result + 20);
  int v2 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v1;
  if (v2 <= 0)
  {
    if (v1 < 1) {
      return result;
    }
    uint64_t v3 = *(void (**)(uint64_t))(result + 32);
    if (!v3) {
      return result;
    }
  }
  else
  {
    if (v1 > 0) {
      return result;
    }
    uint64_t v3 = *(void (**)(uint64_t))(result + 48);
    if (!v3) {
      return result;
    }
  }
  uint64_t v4 = swift_retain();
  v3(v4);

  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v3);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out ())()
{
  return thunk for @escaping @callee_guaranteed () -> (@out ())(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t protocol witness for GraphMutation.apply() in conformance ObservationGraphMutation()
{
  return ObservationGraphMutation.apply()(*v0, v0[1], v0[2]);
}

uint64_t ObservationGraphMutation.apply()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = type metadata accessor for ObservationTracking();
  uint64_t v6 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  char v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = a3 + 40;
    do
    {
      AGSubgraphRemoveObserver();
      v10 += 16;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for latestTriggers != -1) {
    swift_once();
  }
  swift_beginAccess();
  unint64_t v11 = static ObservationRegistrar.latestTriggers;
  if (static ObservationRegistrar.latestTriggers < 0
    || (static ObservationRegistrar.latestTriggers & 0x4000000000000000) != 0
    || (char isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(),
        unint64_t v11 = static ObservationRegistrar.latestTriggers,
        (isUniquelyReferenced_nonNull_bridgeObject & 1) == 0))
  {
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      if (result < 0) {
        goto LABEL_33;
      }
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v14 < 0 || v24 < v14)
      {
        __break(1u);
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1;
    }
    static ObservationRegistrar.latestTriggers = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, v14);
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  if ((unint64_t)static ObservationRegistrar.latestTriggers >> 62)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v13 & 0x8000000000000000) == 0) {
      goto LABEL_12;
    }
    __break(1u);
LABEL_33:
    __break(1u);
    return result;
  }
  uint64_t v13 = *(void *)((static ObservationRegistrar.latestTriggers & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_12:
  specialized Array.replaceSubrange<A>(_:with:)(0, v13);
LABEL_16:
  swift_endAccess();
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15)
  {
    v25[0] = a2;
    v25[1] = a1;
    uint64_t v16 = v6 + 16;
    char v17 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v18 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v19 = *(void *)(v6 + 72);
    char v20 = (void (**)(char *, uint64_t))(v16 - 8);
    swift_bridgeObjectRetain();
    uint64_t v21 = v26;
    do
    {
      v17(v8, v18, v21);
      if (ObservationTracking.changed.getter())
      {
        swift_beginAccess();
        uint64_t v22 = swift_retain();
        MEMORY[0x24C522D60](v22);
        if (*(void *)((static ObservationRegistrar.latestTriggers & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((static ObservationRegistrar.latestTriggers & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();
        swift_release();
        uint64_t v21 = v26;
      }
      ObservationTracking.cancel()();
      (*v20)(v8, v21);
      v18 += v19;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
  }
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x263F288F8]) {
    return AGGraphInvalidateValue();
  }
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v3 = a2;
    uint64_t v5 = a1;
    unint64_t v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v21 < v3) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v8 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v11 = v10 + v8;
    if (!__OFADD__(v10, v8)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v7 = *v4;
  if (*v4 >> 62) {
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v11 = v10 - v9;
  if (__OFADD__(v10, v8)) {
    goto LABEL_38;
  }
LABEL_8:
  unint64_t v7 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v4 = v7;
  uint64_t v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v10 = 1;
  }
  if (v7 >> 62) {
    goto LABEL_39;
  }
  uint64_t v14 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11) {
    uint64_t v14 = v11;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = MEMORY[0x24C523D70](v10, v14, 1, v7);
  swift_bridgeObjectRelease();
  unint64_t *v4 = v7;
  uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v6(0);
  swift_arrayDestroy();
  if (v8)
  {
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v16 = v22 - v3;
      if (!__OFSUB__(v22, v3))
      {
LABEL_21:
        if (v16 < 0)
        {
LABEL_46:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        char v17 = (const void *)(v13 + 32 + 8 * v3);
        if (v5 != v3 || v13 + 32 + 8 * v5 >= (unint64_t)v17 + 8 * v16) {
          memmove((void *)(v13 + 32 + 8 * v5), v17, 8 * v16);
        }
        if (!(v7 >> 62))
        {
          uint64_t v18 = *(void *)(v13 + 16);
          uint64_t v19 = v18 + v8;
          if (!__OFADD__(v18, v8))
          {
LABEL_27:
            *(void *)(v13 + 16) = v19;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v19 = v23 + v8;
        if (!__OFADD__(v23, v8)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(v13 + 16);
      uint64_t v16 = v15 - v3;
      if (!__OFSUB__(v15, v3)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:

  return specialized Array._endMutation()();
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, MEMORY[0x263F8DAB0]);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(void))type metadata accessor for AnyFontModifier);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(void))type metadata accessor for TextLinesLayer);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(void))type metadata accessor for TextRunsLayer);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(void))type metadata accessor for StaticEffectLayer);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(void))type metadata accessor for DynamicEffectLayer);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (unint64_t *)&lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.AnimatableData>.Fork, (void (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &lazy cache variable for type metadata for AnimatorState<ShaderVectorData>.Fork, (void (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(void))type metadata accessor for ViewResponder);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for CALayer);
}

void _AppearanceActionModifier.MergedBox.appear()()
{
  int v2 = *(_DWORD *)(v1 + 20);
  if (!v2)
  {
    if ((*(unsigned char *)(v1 + 64) & 1) == 0)
    {
      *(unsigned char *)(v1 + 64) = 1;
      swift_retain();
      specialized static Update.begin()();
      uint64_t v0 = swift_allocObject();
      *(void *)(v0 + 16) = partial apply for closure #1 in _AppearanceActionModifier.MergedBox.update();
      *(void *)(v0 + 24) = v1;
      uint64_t v3 = one-time initialization token for actions;
      swift_retain();
      if (v3 == -1) {
        goto LABEL_5;
      }
      goto LABEL_13;
    }
    int v2 = 0;
  }
  while (1)
  {
    BOOL v9 = __OFADD__(v2, 1);
    int v10 = v2 + 1;
    if (!v9) {
      break;
    }
    __break(1u);
LABEL_13:
    swift_once();
LABEL_5:
    uint64_t v4 = static Update.actions;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    }
    unint64_t v5 = v4[2];
    unint64_t v6 = v4[3];
    unint64_t v7 = v5 + 1;
    if (v5 >= v6 >> 1)
    {
      unint64_t v14 = v5 + 1;
      uint64_t v11 = v4;
      unint64_t v12 = v4[2];
      uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v5 + 1, 1, v11);
      unint64_t v5 = v12;
      unint64_t v7 = v14;
      uint64_t v4 = v13;
    }
    v4[2] = v7;
    uint64_t v8 = &v4[2 * v5];
    void v8[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
    v8[5] = v0;
    static Update.actions = v4;
    swift_bridgeObjectRelease();
    static Update.end()();
    swift_release();
    int v2 = *(_DWORD *)(v1 + 20);
  }
  *(_DWORD *)(v1 + 20) = v10;
}

uint64_t partial apply for closure #1 in ViewRendererHost.sizeThatFits(_:)@<X0>(void *a1@<X8>)
{
  return closure #1 in ViewRendererHost.sizeThatFits(_:)(*(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40), a1);
}

uint64_t ImageRendererHost.renderingPhase.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 66) = v2;
  return result;
}

unsigned char *closure #1 in ViewGraph.updateOutputs(async:)(unsigned char *result, uint64_t a2, unsigned char *a3, char a4, unsigned char *a5)
{
  if (*result == 1)
  {
    swift_beginAccess();
    if (MEMORY[0x24C527E00](a2 + 200))
    {
      uint64_t v9 = *(void *)(a2 + 208);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v9 + 8) + 24))(ObjectType);
      swift_unknownObjectRelease();
    }
    uint64_t result = (unsigned char *)swift_weakLoadStrong();
    if (result)
    {
      swift_beginAccess();
      uint64_t v11 = *(unsigned int *)(a2 + 56);
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        LOBYTE(v20[0]) = 0;
        GraphHost.graphInvalidation(from:)(v11);
        swift_release();
      }
      uint64_t result = (unsigned char *)swift_release();
    }
  }
  if (*a3 == 1
    && (unint64_t v12 = (uint64_t *)(a2 + 216), result = (unsigned char *)swift_beginAccess(), (v13 = *(_DWORD *)(a2 + 228)) != 0))
  {
    uint64_t v14 = *v12;
    if (*v12)
    {
      int v15 = 0;
      int v16 = v13 - 1;
      while (1)
      {
        uint64_t v18 = (uint64_t *)(v14 + v15);
        if (v16)
        {
          v15 += *((_DWORD *)v18 + 2);
          if ((a4 & 1) == 0) {
            goto LABEL_18;
          }
        }
        else
        {
          int v15 = 0;
          if ((a4 & 1) == 0) {
            goto LABEL_18;
          }
        }
        if ((*((unsigned char *)v18 + 12) & 2) == 0)
        {
LABEL_18:
          if (*((unsigned char *)v18 + 12))
          {
            uint64_t v19 = *v18;
            v20[0] = v18;
            uint64_t result = (unsigned char *)(*(uint64_t (**)(void *, uint64_t))(v19 + 160))(v20, a2);
            *((_DWORD *)v18 + 3) &= ~1u;
          }
        }
        if (!(v16-- | v15)) {
          goto LABEL_20;
        }
      }
    }
    __break(1u);
  }
  else
  {
LABEL_20:
    if (*a5 == 1)
    {
      swift_beginAccess();
      specialized ViewGraphGeometryObservers.notify()();
      return (unsigned char *)swift_endAccess();
    }
  }
  return result;
}

uint64_t StoredLocationBase.BeginUpdate.apply()()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    StoredLocationBase.beginUpdate()(result);
    return swift_release();
  }
  return result;
}

uint64_t StoredLocationBase.beginUpdate()(uint64_t a1)
{
  uint64_t v2 = *(void *)(*v1 + 168);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v5 = (char *)&v9 - v4;
  swift_beginAccess();
  unint64_t v6 = (os_unfair_lock_s *)v1[2];
  type metadata accessor for StoredLocationBase.Data();
  swift_retain();
  os_unfair_lock_lock(v6 + 4);
  type metadata accessor for Array();
  swift_getWitnessTable();
  RangeReplaceableCollection.removeFirst()();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  $defer #1 <A>() in AtomicBox.wrappedValue.modify(v6 + 4);
  uint64_t v7 = swift_release();
  return (*(uint64_t (**)(uint64_t))(*v1 + 224))(v7);
}

uint64_t StoredLocation.notifyObservers()()
{
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x263F288F8])
  {
    return AGGraphInvalidateValue();
  }
  return result;
}

uint64_t partial apply for closure #1 in ViewRendererHost.explicitAlignment(of:at:)@<X0>(uint64_t (*a1)(void, double, double)@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = a1(*(void *)(v2 + 16), *(double *)(v2 + 24), *(double *)(v2 + 32));
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v5 & 1;
  return result;
}

uint64_t static ViewGraphFeatureBuffer._VTable.update(elt:graph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 168);
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 + 176) + 56))(a2, v4);
}

uint64_t partial apply for closure #1 in ViewRendererHost.explicitAlignment(of:at:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in ViewRendererHost.explicitAlignment(of:at:)(ViewGraph.explicitAlignment(of:at:), a1);
}

{
  return partial apply for closure #1 in ViewRendererHost.explicitAlignment(of:at:)(ViewGraph.explicitAlignment(of:at:), a1);
}

uint64_t ImageRendererHost.renderingPhase.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 66);
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.currentTimestamp.modify in conformance ImageRendererHost<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ImageRendererHost.currentTimestamp.modify();
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t closure #1 in closure #1 in ImageRendererHost.render(ifNewerThan:renderer:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for (DisplayList, DisplayList.Version)();
  uint64_t result = AGGraphGetWeakValue();
  if (result)
  {
    uint64_t v3 = *(void *)result;
    __int16 v4 = *(_WORD *)(result + 8);
    char v5 = *(unsigned char *)(result + 10);
    uint64_t v6 = *(void *)(result + 16);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v3) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = MEMORY[0x263F8EE78];
    }
    if (v3) {
      __int16 v9 = v4;
    }
    else {
      __int16 v9 = 0;
    }
    if (v3) {
      char v10 = v5;
    }
    else {
      char v10 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
    __int16 v9 = 0;
    char v10 = 0;
    uint64_t v8 = MEMORY[0x263F8EE78];
  }
  *(void *)a1 = v8;
  *(_WORD *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 10) = v10;
  *(void *)(a1 + 16) = v7;
  return result;
}

double ImageRendererHost.currentTimestamp.getter@<D0>(double *a1@<X8>)
{
  swift_beginAccess();
  double result = *(double *)(v1 + 72);
  *a1 = result;
  return result;
}

uint64_t (*ImageRendererHost.currentTimestamp.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t (*protocol witness for ViewRendererHost.propertiesNeedingUpdate.modify in conformance ImageRendererHost<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ImageRendererHost.propertiesNeedingUpdate.modify();
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*ImageRendererHost.propertiesNeedingUpdate.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t partial apply for closure #2 in PreferenceBinder.updateValue()()
{
  uint64_t v1 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  return (*(uint64_t (**)(unint64_t))(v0 + 40))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.PreferenceKey.Value) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(unint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v5 = v4;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v10 = static Update._lock;
  _MovableLockLock(static Update._lock);
  swift_beginAccess();
  if (*(void *)(v5 + 16))
  {
    BOOL v11 = (a3 & 1) != 0 || AGGraphGetCounter() != 0;
    swift_beginAccess();
    *(unsigned char *)(v5 + 168) &= a4 & 1;
    uint64_t v12 = v5 + 144;
    uint64_t v13 = swift_beginAccess();
    unint64_t v14 = *(void *)(*(void *)(v5 + 144) + 16);
    if (v14)
    {
      swift_beginAccess();
      int v15 = *(void **)v12;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v12 = v15;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        int v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
        *(void *)uint64_t v12 = v15;
      }
      if (v14 > v15[2])
      {
        __break(1u);
        goto LABEL_39;
      }
      char v17 = &v15[3 * v14];
      if (*((_DWORD *)v17 + 4) == a2)
      {
        int v15 = v17 + 1;
        unint64_t v14 = v17[1];
        if (v14)
        {
          if (a1)
          {
            v35[0] = MEMORY[0x263F8EE78];
            swift_retain();
            swift_retain();
            BOOL v18 = compareLists(_:_:ignoredTypes:)(v14, a1, (uint64_t)v35);
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            if (v18)
            {
LABEL_15:
              specialized AsyncTransaction.append<A>(_:)();
              swift_endAccess();
              if (v11)
              {
LABEL_31:
                uint64_t v10 = static Update._lock;
                return _MovableLockUnlock(v10);
              }
              swift_beginAccess();
              if (*(void *)(*(void *)v12 + 16))
              {
                specialized Array._customRemoveLast()((uint64_t)&v36);
                a1 = v37;
                if (v37)
                {
                  LODWORD(v14) = DWORD2(v36);
                  a2 = v36;
                }
                else
                {
                  specialized Array.remove(at:)(*(void *)(*(void *)v12 + 16) - 1, (uint64_t)&v36);
                  a2 = v36;
                  LODWORD(v14) = DWORD2(v36);
                  a1 = v37;
                }
                swift_endAccess();
                GraphHost.flushTransactions()();
                swift_beginAccess();
                int v15 = *(void **)(v5 + 144);
                swift_retain();
                swift_bridgeObjectRetain();
                char v31 = swift_isUniquelyReferenced_nonNull_native();
                *(void *)(v5 + 144) = v15;
                if (v31)
                {
LABEL_35:
                  unint64_t v33 = v15[2];
                  unint64_t v32 = v15[3];
                  if (v33 >= v32 >> 1)
                  {
                    int v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v15);
                    *(void *)uint64_t v12 = v15;
                  }
                  void v15[2] = v33 + 1;
                  uint64_t v34 = &v15[3 * v33];
                  v34[4] = a2;
                  *((_DWORD *)v34 + 10) = v14;
                  v34[6] = a1;
                  swift_endAccess();
                  swift_bridgeObjectRelease();
                  swift_release();
                  goto LABEL_31;
                }
LABEL_40:
                int v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
                *(void *)uint64_t v12 = v15;
                goto LABEL_35;
              }
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
          }
        }
        else if (!a1)
        {
          goto LABEL_15;
        }
      }
      swift_endAccess();
      if (!v11) {
        GraphHost.flushTransactions()();
      }
    }
    else if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 192))(v13))
    {
      uint64_t v20 = v19;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v20 + 32))(ObjectType, v20);
      swift_unknownObjectRelease();
    }
    swift_retain();
    uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v24 = v22[2];
    unint64_t v23 = v22[3];
    if (v24 >= v23 >> 1) {
      uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v22);
    }
    BOOL v38 = &type metadata for EmptyGraphMutation;
    uint64_t v39 = &protocol witness table for EmptyGraphMutation;
    v22[2] = v24 + 1;
    outlined init with take of ScrollStateRequest(&v36, (uint64_t)&v22[5 * v24 + 4]);
    swift_beginAccess();
    double v25 = *(void **)v12;
    char v26 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v12 = v25;
    if ((v26 & 1) == 0)
    {
      double v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
      *(void *)uint64_t v12 = v25;
    }
    unint64_t v28 = v25[2];
    unint64_t v27 = v25[3];
    if (v28 >= v27 >> 1)
    {
      double v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v25);
      *(void *)uint64_t v12 = v25;
    }
    void v25[2] = v28 + 1;
    double v29 = &v25[3 * v28];
    v29[4] = a1;
    *((_DWORD *)v29 + 10) = a2;
    v29[6] = v22;
    swift_endAccess();
    goto LABEL_31;
  }
  return _MovableLockUnlock(v10);
}

uint64_t protocol witness for GraphMutation.apply() in conformance InvalidatingGraphMutation()
{
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x263F288F8])
  {
    return AGGraphInvalidateValue();
  }
  return result;
}

uint64_t protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance ImageRendererHost<A>(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ViewRendererHost.updateViewGraph<A>(body:)(a1, a2, *v4, a4, (uint64_t)&protocol witness table for ImageRendererHost<A>);
}

uint64_t protocol witness for GraphDelegate.updateGraph<A>(body:) in conformance ImageRendererHost<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ViewGraphDelegate.updateGraph<A>(body:)(a1, a2, *v3, a3, (uint64_t)&protocol witness table for ImageRendererHost<A>);
}

uint64_t protocol witness for GraphMutation.apply() in conformance CustomGraphMutation()
{
  return (*v0)();
}

uint64_t partial apply for closure #1 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)()
{
  return closure #1 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(*(void *)(v0 + 16));
}

uint64_t partial apply for closure #1 in DynamicContainerInfo.tryRemovingItem(at:disableTransitions:)()
{
  return closure #1 in DynamicContainerInfo.tryRemovingItem(at:disableTransitions:)(v0);
}

uint64_t partial apply for closure #1 in GraphHost.continueTransaction(_:)()
{
  return closure #1 in GraphHost.continueTransaction(_:)(*(void *)(v0 + 16), *(void ***)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in _AppearanceActionModifier.MergedCallbacks.updateValue()()
{
  return implicit closure #4 in implicit closure #3 in _AppearanceActionModifier.MergedCallbacks.updateValue()(v0);
}

uint64_t implicit closure #4 in implicit closure #3 in _AppearanceActionModifier.MergedCallbacks.updateValue()(uint64_t result)
{
  int v2 = *(_DWORD *)(result + 20);
  BOOL v3 = __OFSUB__(v2, 1);
  int v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v5 = result;
  *(_DWORD *)(result + 20) = v4;
  if (v4 || (*(unsigned char *)(result + 64) & 1) != 0) {
    return result;
  }
  *(unsigned char *)(result + 64) = 1;
  swift_retain();
  specialized static Update.begin()();
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = partial apply for closure #1 in _AppearanceActionModifier.MergedBox.update();
  *(void *)(v1 + 24) = v5;
  uint64_t v6 = one-time initialization token for actions;
  swift_retain();
  if (v6 != -1) {
    goto LABEL_14;
  }
LABEL_6:
  uint64_t v7 = static Update.actions;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  }
  unint64_t v8 = v7[2];
  unint64_t v9 = v7[3];
  unint64_t v10 = v8 + 1;
  if (v8 >= v9 >> 1)
  {
    unint64_t v15 = v8 + 1;
    uint64_t v12 = v7;
    unint64_t v13 = v7[2];
    unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v8 + 1, 1, v12);
    unint64_t v8 = v13;
    unint64_t v10 = v15;
    uint64_t v7 = v14;
  }
  v7[2] = v10;
  BOOL v11 = &v7[2 * v8];
  v11[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  _OWORD v11[5] = v1;
  static Update.actions = v7;
  swift_bridgeObjectRelease();
  static Update.end()();

  return swift_release();
}

uint64_t partial apply for closure #1 in View.onChange<A>(of:initial:_:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8);
  return (*(uint64_t (**)(unint64_t, unint64_t))(v0 + 48))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), v0 + ((*(unsigned __int8 *)(v1 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t wait_for_lock(pthread_mutex_t *a1, uint64_t a2)
{
  ++*(_DWORD *)&a1[3].__opaque[28];
  if (*(void *)&a1[3].__opaque[8] == a2)
  {
    uint64_t v5 = &a1[3].__opaque[32];
    uint64_t v4 = *(void *)&a1[3].__opaque[32];
    a1[3].__opaque[49] = 1;
    if (v4)
    {
      unint64_t v6 = atomic_load((unint64_t *)&a1[3].__opaque[16]);
      int v7 = *(_DWORD *)&a1[3].__opaque[24];
      *(void *)&a1[3].__opaque[16] = *(void *)&a1[3].__opaque[8];
      *(_DWORD *)&a1[3].__opaque[24] = v7 + 1;
      (*(void (**)(void))&a1[3].__opaque[32])(*(void *)&a1[3].__opaque[40]);
      *(_DWORD *)&a1[3].__opaque[24] = v7;
      *(void *)&a1[3].__opaque[16] = v6;
      *(void *)uint64_t v5 = 0;
      *(void *)&a1[3].__opaque[40] = 0;
      pthread_cond_signal((pthread_cond_t *)&a1[1].__opaque[40]);
    }
  }
  uint64_t result = pthread_cond_wait((pthread_cond_t *)&a1[1], a1);
  if (*(void *)&a1[3].__opaque[8] == a2) {
    a1[3].__opaque[49] = 0;
  }
  --*(_DWORD *)&a1[3].__opaque[28];
  return result;
}

void @objc closure #1 in closure #1 in closure #1 in static Update.syncMain(_:)()
{
  id v0 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  swift_retain();
  AGGraphWithUpdate();
  swift_release();
  AGSubgraphSetCurrent();
}

uint64_t *closure #1 in ViewRendererHost.responderNode.getter@<X0>(uint64_t *a1@<X8>)
{
  _sSay7SwiftUI13ViewResponderCGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  uint64_t result = (uint64_t *)AGGraphGetWeakValue();
  if (!result)
  {
    uint64_t v4 = 0;
    goto LABEL_9;
  }
  uint64_t v3 = *result;
  if ((unint64_t)*result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = (uint64_t *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = (uint64_t)result;
    if (!result) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = (uint64_t *)swift_bridgeObjectRetain();
    if (!v4)
    {
LABEL_7:
      uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
LABEL_9:
      *a1 = v4;
      return result;
    }
  }
  if ((v3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x24C523D60](0, v3);
    goto LABEL_7;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v4 = *(void *)(v3 + 32);
    swift_retain();
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #4 in MatchedGeometryScope.frame<A>(index:for:view:)()
{
  return closure #4 in MatchedGeometryScope.frame<A>(index:for:view:)();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(void *a1, uint64_t a2, void (*a3)(void *__return_ptr, void, void))
{
  v4[8] = *MEMORY[0x263EF8340];
  a3(v4, *a1, a1[1]);
  AGGraphSetOutputValue();
  return swift_release();
}

unint64_t PreferenceValues.modifyValue<A>(for:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v12 = &v29[-v11];
  uint64_t v13 = type metadata accessor for PreferenceValues.Value();
  uint64_t v33 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  unint64_t v15 = &v29[-v14];
  int v16 = *(void (**)(unsigned char *))a2;
  uint64_t v31 = *(void *)(a2 + 8);
  unint64_t v32 = v16;
  unsigned int v30 = *(_DWORD *)(a2 + 16);
  uint64_t v34 = v4;
  uint64_t v35 = a1;
  v36[0] = *v4;
  uint64_t v17 = v36[0];
  unint64_t result = PreferenceValues._index(of:)(a1);
  unint64_t v19 = result;
  unint64_t v20 = *(void *)(v17 + 16);
  if (result == v20) {
    goto LABEL_4;
  }
  if (result >= v20)
  {
    __break(1u);
    return result;
  }
  uint64_t v21 = v17 + 56 * result;
  uint64_t v23 = *(void *)(v21 + 32);
  uint64_t v22 = v21 + 32;
  if (v23 == v35)
  {
    outlined init with copy of PreferenceValues.Entry(v22, (uint64_t)v36);
    PreferenceValues.Entry.subscript.getter(AssociatedTypeWitness, (uint64_t)v15);
    outlined destroy of PreferenceValues.Entry((uint64_t)v36);
  }
  else
  {
LABEL_4:
    (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v15, v12, AssociatedTypeWitness);
    *(_DWORD *)&v15[*(int *)(v13 + 28)] = 0;
  }
  uint64_t v24 = *(int *)(v13 + 28);
  uint64_t v25 = *(unsigned int *)&v15[v24];
  unsigned int v26 = v30;
  if (v25 != -1 && v30 != 0)
  {
    if (v25) {
      BOOL v28 = v30 == -1;
    }
    else {
      BOOL v28 = 1;
    }
    if (!v28) {
      unsigned int v26 = merge32(_:_:)(v25, v30);
    }
    *(_DWORD *)&v15[v24] = v26;
  }
  v32(v15);
  PreferenceValues.setValue<A>(_:of:at:)((uint64_t)v15, v35, a4, v19, AssociatedTypeWitness);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v33 + 8))(v15, v13);
}

uint64_t partial apply for closure #1 in project #1 <A><A1>(key:) in closure #1 in static DynamicContainer.makeContainer<A>(adaptor:inputs:)(_DWORD *a1)
{
  int v3 = *(_DWORD *)(v1 + 48);
  uint64_t result = type metadata accessor for DynamicPreferenceCombiner();
  *a1 = v3;
  return result;
}

uint64_t _s7SwiftUI16DynamicContainerV04makeD07adaptor6inputs14AttributeGraph0H0VyAC4InfoVG_AA12_ViewOutputsVtx_AA01_K6InputsVtAA0cD7AdaptorRzlFZyAA13PreferenceKey_pXp_So11AGAttributeatXEfU_7projectL_3keyyqd__m_tAaQRzAaRRd__r__lFyAA0cO8Combiner33_E7D4CD2D59FB8C77D6C7E9C534464C17LLVyqd__GzXEfU_TA_0(_DWORD *a1)
{
  return closure #1 in project #1 <A><A1>(key:) in closure #1 in static DynamicContainer.makeContainer<A>(adaptor:inputs:)(a1, *(_DWORD *)(v1 + 32));
}

uint64_t closure #1 in project #1 <A><A1>(key:) in closure #1 in static DynamicContainer.makeContainer<A>(adaptor:inputs:)(_DWORD *a1, int a2)
{
  uint64_t result = type metadata accessor for DynamicPreferenceCombiner();
  *a1 = a2;
  return result;
}

uint64_t partial apply for closure #1 in mapMutator #1 <A>(thunk:) in static Layout.makeDynamicView(root:inputs:properties:list:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(v1 + 32))(a1 + 16);
}

uint64_t partial apply for closure #1 in closure #2 in DynamicLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)()
{
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 40);
  if (*(unsigned char *)(v2 + 68)) {
    int v3 = (int *)MEMORY[0x263F288F8];
  }
  else {
    int v3 = (int *)(v2 + 64);
  }
  int v4 = *v3;
  v7[0] = *(_DWORD *)(v0 + 36);
  v7[1] = v4;
  uint64_t v6 = *v1;
  return DynamicLayoutMap.subscript.setter((uint64_t)v7, (unsigned int *)&v6);
}

uint64_t DynamicLayoutMap.subscript.setter(uint64_t result, unsigned int *a2)
{
  uint64_t v3 = *(unsigned int *)result;
  uint64_t v4 = *(unsigned int *)(result + 4);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  int v7 = *(void **)v2;
  unint64_t v8 = *(void *)(*(void *)v2 + 16);
  if (!v8) {
    goto LABEL_20;
  }
  unint64_t v9 = 0;
  uint64_t v10 = v7 + 4;
  unint64_t v11 = *(void *)(*(void *)v2 + 16);
  do
  {
    uint64_t v12 = v11 >> 1;
    unint64_t v13 = v9 + (v11 >> 1);
    if (__OFADD__(v9, v11 >> 1))
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
      int v7 = (void *)result;
LABEL_33:
      if (v9 < v7[2])
      {
        unint64_t v20 = &v7[2 * v9];
        *((_DWORD *)v20 + 10) = v3;
        *((_DWORD *)v20 + 11) = v4;
        *(void *)uint64_t v2 = v7;
        goto LABEL_26;
      }
      __break(1u);
      return result;
    }
    if (v13 >= v8) {
      goto LABEL_36;
    }
    uint64_t v14 = (int *)&v10[2 * v13];
    int v15 = *v14;
    if (*v14 < v5 || ((int v16 = v14[1], v15 == v5) ? (v17 = v16 < (int)v6) : (v17 = 0), v17))
    {
      unint64_t v9 = v13 + 1;
      uint64_t v12 = v11 + ~v12;
    }
    unint64_t v11 = v12;
  }
  while (v12 > 0);
  if (v9 == v8) {
    goto LABEL_14;
  }
  if (v9 >= v8) {
    goto LABEL_37;
  }
  if (v10[2 * v9] == __PAIR64__(v6, v5))
  {
    if (v3 == *MEMORY[0x263F288F8] && v4 == *MEMORY[0x263F288F8])
    {
      uint64_t result = specialized Array.remove(at:)(v9, &v21);
      goto LABEL_26;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }
LABEL_14:
  if (v3 == *MEMORY[0x263F288F8] && v4 == *MEMORY[0x263F288F8]) {
    goto LABEL_26;
  }
  if ((uint64_t)v8 >= (uint64_t)v9) {
    goto LABEL_25;
  }
  __break(1u);
LABEL_20:
  if (v3 != *MEMORY[0x263F288F8] || v4 != *MEMORY[0x263F288F8])
  {
    unint64_t v9 = 0;
LABEL_25:
    uint64_t result = (uint64_t)specialized Array.replaceSubrange<A>(_:with:)(v9, v9, v5 | (v6 << 32), v3 | (v4 << 32));
  }
LABEL_26:
  v2[4] = 0;
  return result;
}

void *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = *(void **)v4;
  int64_t v7 = *(void *)(*(void *)v4 + 16);
  if (v7 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v11 > v6[3] >> 1)
  {
    if (v7 <= v11) {
      int64_t v15 = v7 + v10;
    }
    else {
      int64_t v15 = v7;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v15, 1, v6);
    uint64_t v6 = result;
  }
  int v16 = &v6[2 * a1 + 4];
  if (!v10) {
    goto LABEL_20;
  }
  uint64_t v17 = v6[2];
  BOOL v18 = __OFSUB__(v17, a2);
  uint64_t v19 = v17 - a2;
  if (v18) {
    goto LABEL_26;
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    uint64_t result = v16 + 2;
    unint64_t v20 = &v6[2 * a2 + 4];
    if (v16 + 2 != v20 || result >= &v20[2 * v19]) {
      uint64_t result = memmove(result, v20, 16 * v19);
    }
    uint64_t v21 = v6[2];
    BOOL v18 = __OFADD__(v21, v10);
    uint64_t v22 = v21 + v10;
    if (!v18)
    {
      v6[2] = v22;
LABEL_20:
      *int v16 = a3;
      v16[1] = a4;
      *(void *)uint64_t v4 = v6;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(id: DynamicContainerID, value: LayoutProxyAttributes)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(id: DynamicContainerID, value: LayoutProxyAttributes)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, &lazy cache variable for type metadata for (id: DynamicContainerID, value: LayoutProxyAttributes));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(id: DynamicContainerID, value: LayoutProxyAttributes)>);
    }
  }
}

uint64_t partial apply for specialized closure #2 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(uint64_t result)
{
  *(_DWORD *)(result + 12) = *(_DWORD *)(v1 + 28);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in static AutomaticPaddingViewModifier._makeView(modifier:inputs:body:)(uint64_t result)
{
  *(_DWORD *)(result + 8) = *(_DWORD *)(v1 + 28);
  return result;
}

void PreferenceValues.setValue<A>(_:of:at:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = type metadata accessor for PreferenceValues.Value();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x270FA5388](v12);
  int v16 = &v20[-v15];
  uint64_t v17 = *(void **)v6;
  unint64_t v18 = *(void *)(*(void *)v6 + 16);
  if (v18 == a4) {
    goto LABEL_5;
  }
  if (v18 > a4)
  {
    if (v17[7 * a4 + 4] == a2)
    {
      if (*(_DWORD *)(a1 + *(int *)(v12 + 28)))
      {
        (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v13 + 16))(v16, a1, v12, v14);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_12;
        }
        goto LABEL_16;
      }
      specialized Array.remove(at:)(a4, (uint64_t)v21);
      goto LABEL_8;
    }
LABEL_5:
    uint64_t v12 = *(unsigned int *)(a1 + *(int *)(v12 + 28));
    if (!v12) {
      return;
    }
    _DWORD v23[3] = a5;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    v21[0] = a2;
    v21[1] = a3;
    int v22 = v12;
    if (v17[2] < a4) {
      goto LABEL_15;
    }
    outlined init with copy of PreferenceValues.Entry((uint64_t)v21, (uint64_t)v20);
    specialized Array.replaceSubrange<A>(_:with:)(a4, a4, (uint64_t)v20);
LABEL_8:
    outlined destroy of PreferenceValues.Entry((uint64_t)v21);
    return;
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
LABEL_12:
  if (v17[2] <= a4)
  {
    __break(1u);
  }
  else
  {
    specialized PreferenceValues.Entry.subscript.setter((uint64_t)v16, a5);
    (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v16, v12);
    *(void *)uint64_t v6 = v17;
  }
}

uint64_t partial apply for closure #1 in static Layout.makeDynamicView(root:inputs:properties:list:)(uint64_t a1)
{
  int v3 = **(_DWORD **)(v1 + 32);
  uint64_t result = type metadata accessor for DynamicLayoutComputer();
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

uint64_t static Layout.makeDynamicView(root:inputs:properties:list:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, int a3@<W3>, uint64_t a4@<X4>, unint64_t a5@<X5>, void *a6@<X8>)
{
  unint64_t v135 = a5;
  uint64_t v145 = a4;
  LODWORD(v136) = a3;
  uint64_t v130 = a6;
  uint64_t v182 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)a2;
  unint64_t v153 = *(void *)(a2 + 16);
  uint64_t v154 = v6;
  unsigned int v152 = *(_DWORD *)(a2 + 36);
  unint64_t v151 = *(void *)(a2 + 40);
  unint64_t v155 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(v155 + 16);
  uint64_t v128 = v7;
  if (v7)
  {
    unint64_t v8 = (ValueMetadata **)(v155 + 32);
    uint64_t v9 = v7 - 1;
    uint64_t v10 = (ValueMetadata **)(v155 + 32);
    uint64_t v11 = v9;
    do
    {
      uint64_t v12 = *v10;
      v10 += 2;
      BOOL v13 = v12 == &type metadata for ScrollablePreferenceKey;
    }
    while (v12 != &type metadata for ScrollablePreferenceKey && v11-- != 0);
    do
    {
      uint64_t v15 = *v8;
      v8 += 2;
      BOOL v16 = v15 == &type metadata for ScrollTargetRole.ContentKey;
    }
    while (v15 != &type metadata for ScrollTargetRole.ContentKey && v9-- != 0);
  }
  else
  {
    BOOL v16 = 0;
    BOOL v13 = 0;
  }
  unsigned int v18 = *a1;
  int v19 = *(_DWORD *)(a2 + 8);
  unsigned int v20 = *(_DWORD *)(a2 + 24);
  unsigned int v139 = *(_DWORD *)(a2 + 28);
  unsigned int v140 = v20;
  unsigned int v21 = *(_DWORD *)(a2 + 32);
  int v137 = v19;
  unsigned int v138 = v21;
  unsigned int v141 = *(_DWORD *)(a2 + 56);
  unsigned int v22 = *(_DWORD *)(a2 + 64);
  unsigned int v146 = *(_DWORD *)(a2 + 60);
  unsigned int v147 = v22;
  unsigned int v23 = *(_DWORD *)(a2 + 68);
  unsigned int v133 = *(_DWORD *)(a2 + 72);
  unsigned int v134 = v23;
  unsigned int v24 = *(_DWORD *)(a2 + 76);
  int v131 = *(_DWORD *)(a2 + 80);
  unsigned int v132 = v24;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  unsigned int v25 = specialized closure #1 in PropertyList.subscript.getter(v154);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  uint64_t v26 = *MEMORY[0x263F288F8];
  unsigned int v148 = v25;
  if (v25 == v26) {
    unsigned int v27 = 0;
  }
  else {
    unsigned int v27 = v25;
  }
  unsigned int v127 = v27;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  LODWORD(v129) = specialized closure #1 in PropertyList.subscript.getter(v154);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  int v149 = 0;
  if ((v152 & 0x1000) != 0)
  {
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    int v149 = specialized closure #1 in PropertyList.subscript.getter(v154);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  unint64_t v144 = 0;
  uint64_t v28 = swift_allocObject();
  *(_DWORD *)(v28 + 16) = 0;
  uint64_t v143 = (_DWORD *)(v28 + 16);
  uint64_t v150 = v28;
  *(unsigned char *)(v28 + 20) = 1;
  unsigned int v142 = v26;
  if ((v13 | ((v152 & 0x20) >> 5)) & 1) != 0 || (v152 & 2) != 0 || (v149)
  {
    uint64_t v34 = swift_beginAccess();
    unint64_t v161 = __PAIR64__(*(_DWORD *)(v153 + 16), v18);
    int v162 = v26;
    unint64_t v164 = MEMORY[0x263F8EE78];
    long long v165 = (ValueMetadata *)MEMORY[0x263F8EE78];
    LODWORD(v166) = 0;
    MEMORY[0x270FA5388](v34);
    unint64_t v33 = v135;
    uint64_t v116 = (unint64_t *)type metadata accessor for DynamicLayoutComputer();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for [ViewGeometry](0, &lazy cache variable for type metadata for Attribute<LayoutComputer>, (uint64_t)&type metadata for LayoutComputer, MEMORY[0x263F28898]);
    unint64_t v35 = v144;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v161, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_0, (uint64_t)v115, (uint64_t)v116, MEMORY[0x263F8E628], v36, MEMORY[0x263F8E658], v37);
    unint64_t v144 = v35;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v38 = v180[0];
    uint64_t v32 = v150;
    *(_DWORD *)(v150 + 16) = v180[0];
    *(unsigned char *)(v32 + 20) = 0;
    unsigned int v31 = v133;
    unint64_t v161 = __PAIR64__(v147, v133);
    unsigned int v30 = v147;
    int v162 = v38;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for [ViewGeometry](0, &lazy cache variable for type metadata for [ViewGeometry], (uint64_t)&type metadata for ViewGeometry, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type LayoutChildGeometries and conformance LayoutChildGeometries();
    LODWORD(v26) = v142;
    uint64_t v29 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    uint64_t v29 = v26;
    unsigned int v30 = v147;
    unsigned int v31 = v133;
    uint64_t v32 = v150;
    unint64_t v33 = v135;
  }
  uint64_t v39 = (void *)swift_allocObject();
  char v40 = v39;
  void v39[2] = v145;
  _OWORD v39[3] = v33;
  v39[4] = v32;
  *(void *)&long long v174 = v154;
  DWORD2(v174) = v137;
  *(void *)&long long v175 = v153;
  *((void *)&v175 + 1) = __PAIR64__(v139, v140);
  *((void *)&v176 + 1) = v151;
  *(void *)&long long v177 = v155;
  *((void *)&v177 + 1) = __PAIR64__(v146, v141);
  *(void *)&long long v178 = __PAIR64__(v134, v30);
  *((void *)&v178 + 1) = __PAIR64__(v132, v31);
  int v179 = v131;
  LODWORD(v176) = v138;
  DWORD1(v176) = v152 & 0xFFFFFFFD;
  if (v16)
  {
    uint64_t v41 = (uint64_t)v39;
    unint64_t v42 = v144;
    if ((v129 & 1) != 0 && (uint64_t v43 = *(void *)(v155 + 16)) != 0)
    {
      unint64_t v44 = 0;
      uint64_t v45 = 32;
      while (*(ValueMetadata **)(v155 + v45) != &type metadata for ScrollTargetRole.ContentKey)
      {
        ++v44;
        v45 += 16;
        if (v43 == v44)
        {
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          LODWORD(v26) = v142;
          unint64_t v46 = v155;
          goto LABEL_62;
        }
      }
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      specialized Array.remove(at:)(v44);
      unint64_t v46 = v177;
      uint64_t v43 = *(void *)(v177 + 16);
      if (!v43)
      {
        LODWORD(v26) = v142;
        goto LABEL_34;
      }
      LODWORD(v26) = v142;
LABEL_62:
      unint64_t v88 = 0;
      long long v89 = (ValueMetadata **)(v46 + 32);
      while (*v89 != &type metadata for UpdateScrollStateRequestKey)
      {
        ++v88;
        v89 += 2;
        if (v43 == v88) {
          goto LABEL_34;
        }
      }
      specialized Array.remove(at:)(v88);
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v41 = (uint64_t)v40;
    unint64_t v42 = v144;
  }
LABEL_34:
  if (v148 != v26)
  {
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v174, v26);
    swift_release();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v174, 1);
    swift_release();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v174, 0xFF00000000uLL, (uint64_t)&v156);
    swift_release();
    int v47 = v26;
    uint64_t v48 = v174;
    uint64_t v49 = swift_retain();
    uint64_t v50 = specialized find<A>(_:key:)(v49);
    if (!v50 || v47 != *(_DWORD *)(v50 + 72))
    {
      type metadata accessor for _TraitWritingModifier<ZIndexTraitKey>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.ContentScrollPositionAnchorKey>, (uint64_t)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey, (uint64_t)&protocol witness table for _GraphInputs.ContentScrollPositionAnchorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
      *(_DWORD *)(swift_allocObject() + 72) = v47;
      *(SwiftUI::BloomFilter *)&long long v174 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey, 0, v48);
    }
    swift_release();
    LODWORD(v26) = v47;
  }
  v180[2] = v176;
  v180[3] = v177;
  v180[4] = v178;
  int v181 = v179;
  v180[0] = v174;
  v180[1] = v175;
  outlined retain of _ViewInputs((uint64_t)v180);
  int v51 = specialized static DynamicContainer.makeContainer<A>(adaptor:inputs:)(&v157, v136 | (unint64_t)(v29 << 32), (uint64_t)partial apply for mapMutator #1 <A>(thunk:) in static Layout.makeDynamicView(root:inputs:properties:list:), v41, (uint64_t)v180);
  outlined release of _ViewInputs((uint64_t)v180);
  swift_release();
  int v160 = v51;
  uint64_t v52 = swift_beginAccess();
  if ((*(unsigned char *)(v150 + 20) & 1) == 0)
  {
    MEMORY[0x270FA5388](v52);
    v115[0] = v145;
    v115[1] = v135;
    uint64_t v116 = (unint64_t *)&v160;
    uint64_t v53 = type metadata accessor for DynamicLayoutComputer();
    MEMORY[0x270FA5388](v53);
    LODWORD(v26) = v142;
    AGGraphMutateAttribute();
  }
  int v54 = v148 != v26 || v13;
  if ((v54 | v149))
  {
    uint64_t v145 = v41;
    unint64_t v144 = AGCreateWeakAttribute();
    unint64_t v136 = AGCreateWeakAttribute();
    unint64_t v135 = AGCreateWeakAttribute();
    unint64_t v129 = AGCreateWeakAttribute();
    unint64_t v55 = AGCreateWeakAttribute();
    uint64_t v56 = v154;
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    int v57 = specialized closure #1 in PropertyList.subscript.getter(v56);
    unint64_t v118 = v42;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    if (v57 == v26)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      unint64_t v125 = 0;
      unint64_t v126 = 0;
    }
    else
    {
      unint64_t v58 = AGCreateWeakAttribute();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      unint64_t v125 = HIDWORD(v58);
      unint64_t v126 = v58;
    }
    int v59 = v144;
    int v61 = v135;
    int v60 = v136;
    unint64_t v120 = HIDWORD(v144);
    unint64_t v121 = HIDWORD(v136);
    int v62 = v129;
    unint64_t v122 = HIDWORD(v135);
    unint64_t v123 = HIDWORD(v129);
    unint64_t v124 = HIDWORD(v55);
    uint64_t v63 = *(void *)(v157 + 16);
    if (v63)
    {
      uint64_t v64 = v157 + 48;
      do
      {
        if (*(ValueMetadata **)(v64 - 16) == &type metadata for ScrollablePreferenceKey) {
          break;
        }
        v64 += 24;
        --v63;
      }
      while (v63);
    }
    unint64_t v65 = AGCreateWeakAttribute();
    int v66 = v65;
    unint64_t v119 = HIDWORD(v65);
    if ((v13 | v149))
    {
      type metadata accessor for [Scrollable](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, &lazy cache variable for type metadata for Scrollable, (uint64_t)&protocol descriptor for Scrollable, MEMORY[0x263F8E0F8]);
      uint64_t v67 = swift_allocObject();
      *(_OWORD *)(v67 + 16) = xmmword_2461B9DC0;
      *(void *)(v67 + 56) = &type metadata for DynamicLayoutScrollable;
      *(void *)(v67 + 64) = &protocol witness table for DynamicLayoutScrollable;
      uint64_t v68 = (_DWORD *)swift_allocObject();
      *(void *)(v67 + 32) = v68;
      int v69 = v120;
      v68[4] = v59;
      v68[5] = v69;
      int v70 = v121;
      v68[6] = v60;
      v68[7] = v70;
      int v71 = v122;
      v68[8] = v61;
      v68[9] = v71;
      int v72 = v123;
      v68[10] = v62;
      v68[11] = v72;
      int v73 = v124;
      v68[12] = v55;
      v68[13] = v73;
      int v74 = v125;
      v68[14] = v126;
      v68[15] = v74;
      int v75 = v119;
      v68[16] = v66;
      v68[17] = v75;
      unint64_t v161 = v67;
      type metadata accessor for [Scrollable](0, &lazy cache variable for type metadata for [Scrollable], &lazy cache variable for type metadata for Scrollable, (uint64_t)&protocol descriptor for Scrollable, MEMORY[0x263F8D488]);
      type metadata accessor for External<[Scrollable]>();
      lazy protocol witness table accessor for type External<[Scrollable]> and conformance External<A>();
      LODWORD(v26) = v142;
      unsigned int v76 = Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      LOBYTE(v161) = 0;
      PreferencesOutputs.subscript.setter(v76, &type metadata for ScrollablePreferenceKey, (uint64_t)&protocol witness table for ScrollablePreferenceKey);
    }
    if (v148 != v26)
    {
      long long v165 = &type metadata for DynamicLayoutScrollable;
      long long v166 = &protocol witness table for DynamicLayoutScrollable;
      uint64_t v77 = (_DWORD *)swift_allocObject();
      unint64_t v161 = (unint64_t)v77;
      int v78 = v120;
      v77[4] = v59;
      v77[5] = v78;
      int v79 = v121;
      v77[6] = v60;
      v77[7] = v79;
      int v80 = v122;
      v77[8] = v61;
      v77[9] = v80;
      int v81 = v123;
      v77[10] = v62;
      v77[11] = v81;
      int v82 = v124;
      v77[12] = v55;
      v77[13] = v82;
      int v83 = v125;
      v77[14] = v126;
      v77[15] = v83;
      int v84 = v119;
      v77[16] = v66;
      v77[17] = v84;
      type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      type metadata accessor for [Scrollable](0, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, (uint64_t)&protocol descriptor for ScrollableCollection, MEMORY[0x263F288C8]);
      lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>();
      unsigned int v85 = Attribute.init<A>(body:value:flags:update:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v161);
      uint64_t v86 = v128;
      if (v128)
      {
        uint64_t v87 = 32;
        while (*(ValueMetadata **)(v155 + v87) != &type metadata for ScrollTargetRole.ContentKey)
        {
          v87 += 16;
          if (!--v86) {
            goto LABEL_75;
          }
        }
        unint64_t v161 = __PAIR64__(v85, v127);
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        type metadata accessor for (_:)();
        lazy protocol witness table accessor for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout();
        swift_bridgeObjectRetain();
        unsigned int v90 = v142;
        unsigned int v91 = Attribute.init<A>(body:value:flags:update:)();
        uint64_t v92 = *(void *)(v157 + 16);
        unsigned int v93 = v90;
        if (v92)
        {
          uint64_t v94 = (ValueMetadata **)(v157 + 48);
          while (*(v94 - 2) != &type metadata for ScrollTargetRole.ContentKey)
          {
            v94 += 3;
            if (!--v92)
            {
              unsigned int v93 = v90;
              goto LABEL_74;
            }
          }
          unsigned int v93 = *(_DWORD *)v94;
        }
LABEL_74:
        unint64_t v161 = __PAIR64__(v93, v91);
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        type metadata accessor for [ScrollTargetRole.Role : [ScrollableCollection]]();
        type metadata accessor for _TraitWritingModifier<ZIndexTraitKey>(0, &lazy cache variable for type metadata for PreferenceTransform<ScrollTargetRole.ContentKey>, (uint64_t)&type metadata for ScrollTargetRole.ContentKey, (uint64_t)&protocol witness table for ScrollTargetRole.ContentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PreferenceTransform);
        LODWORD(v26) = v142;
        lazy protocol witness table accessor for type PreferenceTransform<ScrollTargetRole.ContentKey> and conformance PreferenceTransform<A>(&lazy protocol witness table cache variable for type PreferenceTransform<ScrollTargetRole.ContentKey> and conformance PreferenceTransform<A>, &lazy cache variable for type metadata for PreferenceTransform<ScrollTargetRole.ContentKey>, (uint64_t)&type metadata for ScrollTargetRole.ContentKey, (uint64_t)&protocol witness table for ScrollTargetRole.ContentKey);
        unsigned int v95 = Attribute.init<A>(body:value:flags:update:)();
        LOBYTE(v161) = 0;
        PreferencesOutputs.subscript.setter(v95, &type metadata for ScrollTargetRole.ContentKey, (uint64_t)&protocol witness table for ScrollTargetRole.ContentKey);
        swift_bridgeObjectRelease();
      }
LABEL_75:
      uint64_t KeyPath = swift_getKeyPath();
      unint64_t v97 = v153;
      swift_beginAccess();
      uint64_t v98 = v154;
      swift_retain_n();
      swift_retain_n();
      unint64_t v99 = v151;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      int v100 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v101 = swift_release();
      int v162 = v140;
      unsigned int v163 = v85;
      unint64_t v161 = __PAIR64__(v146, v147);
      LODWORD(v164) = v100;
      long long v165 = (ValueMetadata *)v98;
      LODWORD(v166) = v137;
      unint64_t v167 = v97;
      unint64_t v168 = __PAIR64__(v139, v140);
      unsigned int v169 = v138;
      unsigned int v170 = v152;
      unint64_t v171 = v99;
      long long v172 = 0u;
      memset(v173, 0, sizeof(v173));
      MEMORY[0x270FA5388](v101);
      uint64_t v116 = &v161;
      uint64_t v102 = swift_bridgeObjectRetain();
      specialized PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)(v102, v141, (void (*)(void))partial apply for implicit closure #9 in static Layout.makeDynamicView(root:inputs:properties:list:));
      swift_bridgeObjectRelease();
      outlined destroy of ScrollStateRequestTransform((uint64_t)&v161);
    }
    unsigned int v103 = v147;
    if (v149)
    {
      uint64_t v104 = v154;
      swift_retain_n();
      unint64_t v105 = v153;
      swift_retain_n();
      unint64_t v106 = v151;
      swift_bridgeObjectRetain_n();
      unint64_t v107 = v155;
      swift_bridgeObjectRetain();
      unsigned int v108 = v103;
      uint64_t v109 = specialized closure #1 in PropertyList.subscript.getter(v104);
      uint64_t v111 = v110;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();
      unint64_t v161 = v104;
      int v162 = v137;
      unint64_t v164 = v105;
      long long v165 = (ValueMetadata *)__PAIR64__(v139, v140);
      long long v166 = (_UNKNOWN **)__PAIR64__(v152, v138);
      unint64_t v167 = v106;
      unint64_t v168 = v107;
      unsigned int v169 = v141;
      unsigned int v170 = v146;
      unint64_t v171 = __PAIR64__(v134, v108);
      *(void *)&long long v172 = __PAIR64__(v132, v133);
      DWORD2(v172) = v131;
      (*(void (**)(unint64_t *, uint64_t *, uint64_t, uint64_t))(v111 + 8))(&v161, &v157, v109, v111);
    }
  }
  if ((v152 & 2) != 0)
  {
    if ((*(unsigned char *)(v150 + 20) & 1) == 0) {
      LODWORD(v26) = *v143;
    }
    swift_release();
    int v112 = v158 | 0x80;
  }
  else
  {
    swift_release();
    int v112 = v158;
    LODWORD(v26) = v159;
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  char v114 = v130;
  *uint64_t v130 = v157;
  *((_DWORD *)v114 + 2) = v112;
  *((_DWORD *)v114 + 3) = v26;
  return result;
}

uint64_t type metadata accessor for DynamicLayoutComputer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t DynamicLayoutViewChildGeometry.updateValue()()
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  uint64_t v2 = *(void *)(Value + 32);
  char v3 = *(unsigned char *)(Value + 40);
  int v4 = *(_DWORD *)(Value + 44);
  long long v5 = *(_OWORD *)(Value + 16);
  long long v17 = *(_OWORD *)Value;
  long long v18 = v5;
  *(void *)&long long v19 = v2;
  BYTE8(v19) = v3;
  HIDWORD(v19) = v4;
  uint64_t v16 = *(void *)(v0 + 8);
  unint64_t v6 = DynamicContainer.Info.viewIndex(id:)((unsigned int *)&v16);
  if ((v7 & 1) != 0
    || (int64_t v8 = v6,
        type metadata accessor for [ViewGeometry](0, &lazy cache variable for type metadata for [ViewGeometry], (uint64_t)&type metadata for ViewGeometry, MEMORY[0x263F8D488]), uint64_t v9 = AGGraphGetValue(), v8 >= *(void *)(*(void *)v9 + 16)))
  {
    uint64_t result = AGGraphGetOutputValue();
    if (result) {
      return result;
    }
    if (one-time initialization token for zero != -1) {
      swift_once();
    }
    long long v17 = static ViewGeometry.zero;
    long long v18 = xmmword_268EEAD40;
    long long v19 = xmmword_268EEAD50;
    long long v20 = unk_268EEAD60;
  }
  else
  {
    if (v8 < 0) {
      __break(1u);
    }
    int64_t v10 = *(void *)v9 + (v8 << 6);
    uint64_t v11 = *(void *)(v10 + 48);
    uint64_t v12 = *(void *)(v10 + 56);
    long long v13 = *(_OWORD *)(v10 + 64);
    long long v14 = *(_OWORD *)(v10 + 80);
    long long v17 = *(_OWORD *)(v10 + 32);
    *(void *)&long long v18 = v11;
    *((void *)&v18 + 1) = v12;
    long long v19 = v13;
    long long v20 = v14;
  }
  return AGGraphSetOutputValue();
}

void type metadata accessor for [ViewGeometry](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t initializeWithCopy for ViewGeometry(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  swift_retain();
  return a1;
}

void type metadata accessor for [Scrollable](uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for ScrollStateRequest(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type LayoutChildGeometries and conformance LayoutChildGeometries()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutChildGeometries and conformance LayoutChildGeometries;
  if (!lazy protocol witness table cache variable for type LayoutChildGeometries and conformance LayoutChildGeometries)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutChildGeometries and conformance LayoutChildGeometries);
  }
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *(void *)uint64_t v3 = v5;
  }
  uint64_t v14 = (uint64_t)&v5[7 * a1 + 4];
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v15 = v5[2];
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_26;
  }
  if ((v17 & 0x8000000000000000) == 0)
  {
    long long v18 = (char *)(v14 + 56);
    long long v19 = (char *)&v5[7 * a2 + 4];
    if ((char *)(v14 + 56) != v19 || v18 >= &v19[56 * v17]) {
      memmove(v18, v19, 56 * v17);
    }
    uint64_t v20 = v5[2];
    BOOL v16 = __OFADD__(v20, v9);
    uint64_t v21 = v20 + v9;
    if (!v16)
    {
      v5[2] = v21;
LABEL_20:
      outlined init with copy of PreferenceValues.Entry(a3, (uint64_t)&v5[7 * a1 + 4]);
      return _sypSgWOhTm_3(a3, &lazy cache variable for type metadata for CollectionOfOne<PreferenceValues.Entry>, (uint64_t)&type metadata for PreferenceValues.Entry, MEMORY[0x263F8DD68]);
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t initializeWithCopy for _OpacityShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(_DWORD *)((*(void *)(v5 + 48) + 3 + a1) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v5 + 48) + 3 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t initializeWithCopy for DynamicBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 3;
  char v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *char v7 = *v8;
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  uint64_t v11 = (_OWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (_OWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  *(_DWORD *)(((unint64_t)v11 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for EnvironmentalBodyAccessor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_retain();
  return a1;
}

void type metadata accessor for External<[Scrollable]>()
{
  if (!lazy cache variable for type metadata for External<[Scrollable]>)
  {
    type metadata accessor for [Scrollable](255, &lazy cache variable for type metadata for [Scrollable], &lazy cache variable for type metadata for Scrollable, (uint64_t)&protocol descriptor for Scrollable, MEMORY[0x263F8D488]);
    unint64_t v0 = type metadata accessor for External();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<[Scrollable]>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type External<[Scrollable]> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>)
  {
    type metadata accessor for External<[Scrollable]>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>);
  }
  return result;
}

void specialized UnaryChildGeometry.value.getter(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2 = HIDWORD(a1);
  double v4 = *(double *)AGGraphGetValue();
  uint64_t v5 = *(void *)AGGraphGetValue();
  uint64_t v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_6;
  }
  if (one-time initialization token for _lock != -1) {
    goto LABEL_9;
  }
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_FlexFrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v8 = MEMORY[0x270FA5388](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v5 + 80))(&v22, v8);
    swift_release();
    uint64_t v5 = v22;
    char v9 = v23;
    uint64_t v10 = v24;
    char v11 = v25;
    uint64_t v12 = v26;
    uint64_t v13 = v27;
    uint64_t v14 = v28;
    uint64_t v15 = v29;
    Currentint Attribute = AGGraphGetCurrentAttribute();
    int v17 = *MEMORY[0x263F288F8];
    if (CurrentAttribute != *MEMORY[0x263F288F8])
    {
      int v19 = CurrentAttribute;
      int v20 = v2;
      int v21 = v17;
      uint64_t v22 = v5;
      char v23 = v9;
      uint64_t v24 = v10;
      char v25 = v11;
      uint64_t v26 = v12;
      uint64_t v27 = v13;
      uint64_t v28 = v14;
      uint64_t v29 = v15;
      unsigned __int8 v18 = *(unsigned char *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  int v2 = HIDWORD(a1);
  double v4 = *(double *)AGGraphGetValue();
  uint64_t v5 = *(void *)AGGraphGetValue();
  uint64_t v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_6;
  }
  if (one-time initialization token for _lock != -1) {
    goto LABEL_9;
  }
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v8 = MEMORY[0x270FA5388](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v5 + 80))(&v22, v8);
    swift_release();
    uint64_t v5 = v22;
    char v9 = v23;
    uint64_t v10 = v24;
    char v11 = v25;
    uint64_t v12 = v26;
    uint64_t v13 = v27;
    uint64_t v14 = v28;
    uint64_t v15 = v29;
    Currentint Attribute = AGGraphGetCurrentAttribute();
    int v17 = *MEMORY[0x263F288F8];
    if (CurrentAttribute != *MEMORY[0x263F288F8])
    {
      int v19 = CurrentAttribute;
      int v20 = v2;
      int v21 = v17;
      uint64_t v22 = v5;
      char v23 = v9;
      uint64_t v24 = v10;
      char v25 = v11;
      uint64_t v26 = v12;
      uint64_t v27 = v13;
      uint64_t v28 = v14;
      uint64_t v29 = v15;
      unsigned __int8 v18 = *(unsigned char *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  int v2 = HIDWORD(a1);
  double v4 = *(double *)AGGraphGetValue();
  uint64_t v5 = *(void *)AGGraphGetValue();
  uint64_t v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_6;
  }
  if (one-time initialization token for _lock != -1) {
    goto LABEL_9;
  }
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v8 = MEMORY[0x270FA5388](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v5 + 80))(&v22, v8);
    swift_release();
    uint64_t v5 = v22;
    char v9 = v23;
    uint64_t v10 = v24;
    char v11 = v25;
    uint64_t v12 = v26;
    uint64_t v13 = v27;
    uint64_t v14 = v28;
    uint64_t v15 = v29;
    Currentint Attribute = AGGraphGetCurrentAttribute();
    int v17 = *MEMORY[0x263F288F8];
    if (CurrentAttribute != *MEMORY[0x263F288F8])
    {
      int v19 = CurrentAttribute;
      int v20 = v2;
      int v21 = v17;
      uint64_t v22 = v5;
      char v23 = v9;
      uint64_t v24 = v10;
      char v25 = v11;
      uint64_t v26 = v12;
      uint64_t v27 = v13;
      uint64_t v28 = v14;
      uint64_t v29 = v15;
      unsigned __int8 v18 = *(unsigned char *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  int v2 = HIDWORD(a1);
  double v4 = *(double *)AGGraphGetValue();
  uint64_t v5 = *(void *)AGGraphGetValue();
  uint64_t v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_6;
  }
  if (one-time initialization token for _lock != -1) {
    goto LABEL_9;
  }
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for UnaryLayoutEngine<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v8 = MEMORY[0x270FA5388](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v5 + 80))(&v22, v8);
    swift_release();
    uint64_t v5 = v22;
    char v9 = v23;
    uint64_t v10 = v24;
    char v11 = v25;
    uint64_t v12 = v26;
    uint64_t v13 = v27;
    uint64_t v14 = v28;
    uint64_t v15 = v29;
    Currentint Attribute = AGGraphGetCurrentAttribute();
    int v17 = *MEMORY[0x263F288F8];
    if (CurrentAttribute != *MEMORY[0x263F288F8])
    {
      int v19 = CurrentAttribute;
      int v20 = v2;
      int v21 = v17;
      uint64_t v22 = v5;
      char v23 = v9;
      uint64_t v24 = v10;
      char v25 = v11;
      uint64_t v26 = v12;
      uint64_t v27 = v13;
      uint64_t v28 = v14;
      uint64_t v29 = v15;
      unsigned __int8 v18 = *(unsigned char *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  int v2 = HIDWORD(a1);
  double v4 = *(double *)AGGraphGetValue();
  uint64_t v5 = *(void *)AGGraphGetValue();
  uint64_t v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_6;
  }
  if (one-time initialization token for _lock != -1) {
    goto LABEL_9;
  }
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_AspectRatioLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v8 = MEMORY[0x270FA5388](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v5 + 80))(&v22, v8);
    swift_release();
    uint64_t v5 = v22;
    char v9 = v23;
    uint64_t v10 = v24;
    char v11 = v25;
    uint64_t v12 = v26;
    uint64_t v13 = v27;
    uint64_t v14 = v28;
    uint64_t v15 = v29;
    Currentint Attribute = AGGraphGetCurrentAttribute();
    int v17 = *MEMORY[0x263F288F8];
    if (CurrentAttribute != *MEMORY[0x263F288F8])
    {
      int v19 = CurrentAttribute;
      int v20 = v2;
      int v21 = v17;
      uint64_t v22 = v5;
      char v23 = v9;
      uint64_t v24 = v10;
      char v25 = v11;
      uint64_t v26 = v12;
      uint64_t v27 = v13;
      uint64_t v28 = v14;
      uint64_t v29 = v15;
      unsigned __int8 v18 = *(unsigned char *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  int v2 = HIDWORD(a1);
  double v4 = *(double *)AGGraphGetValue();
  uint64_t v5 = *(void *)AGGraphGetValue();
  uint64_t v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_6;
  }
  if (one-time initialization token for _lock != -1) {
    goto LABEL_9;
  }
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v8 = MEMORY[0x270FA5388](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v5 + 80))(&v22, v8);
    swift_release();
    uint64_t v5 = v22;
    char v9 = v23;
    uint64_t v10 = v24;
    char v11 = v25;
    uint64_t v12 = v26;
    uint64_t v13 = v27;
    uint64_t v14 = v28;
    uint64_t v15 = v29;
    Currentint Attribute = AGGraphGetCurrentAttribute();
    int v17 = *MEMORY[0x263F288F8];
    if (CurrentAttribute != *MEMORY[0x263F288F8])
    {
      int v19 = CurrentAttribute;
      int v20 = v2;
      int v21 = v17;
      uint64_t v22 = v5;
      char v23 = v9;
      uint64_t v24 = v10;
      char v25 = v11;
      uint64_t v26 = v12;
      uint64_t v27 = v13;
      uint64_t v28 = v14;
      uint64_t v29 = v15;
      unsigned __int8 v18 = *(unsigned char *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  int v2 = HIDWORD(a1);
  double v4 = *(double *)AGGraphGetValue();
  uint64_t v5 = *(void *)AGGraphGetValue();
  uint64_t v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_6;
  }
  if (one-time initialization token for _lock != -1) {
    goto LABEL_9;
  }
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for UnaryLayoutEngine<SpacingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout, (uint64_t)&type metadata for SpacingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v8 = MEMORY[0x270FA5388](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v5 + 80))(&v22, v8);
    swift_release();
    uint64_t v5 = v22;
    char v9 = v23;
    uint64_t v10 = v24;
    char v11 = v25;
    uint64_t v12 = v26;
    uint64_t v13 = v27;
    uint64_t v14 = v28;
    uint64_t v15 = v29;
    Currentint Attribute = AGGraphGetCurrentAttribute();
    int v17 = *MEMORY[0x263F288F8];
    if (CurrentAttribute != *MEMORY[0x263F288F8])
    {
      int v19 = CurrentAttribute;
      int v20 = v2;
      int v21 = v17;
      uint64_t v22 = v5;
      char v23 = v9;
      uint64_t v24 = v10;
      char v25 = v11;
      uint64_t v26 = v12;
      uint64_t v27 = v13;
      uint64_t v28 = v14;
      uint64_t v29 = v15;
      unsigned __int8 v18 = *(unsigned char *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  int v2 = HIDWORD(a1);
  double v4 = *(double *)AGGraphGetValue();
  uint64_t v5 = *(void *)AGGraphGetValue();
  uint64_t v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_6;
  }
  if (one-time initialization token for _lock != -1) {
    goto LABEL_9;
  }
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v8 = MEMORY[0x270FA5388](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v5 + 80))(&v22, v8);
    swift_release();
    uint64_t v5 = v22;
    char v9 = v23;
    uint64_t v10 = v24;
    char v11 = v25;
    uint64_t v12 = v26;
    uint64_t v13 = v27;
    uint64_t v14 = v28;
    uint64_t v15 = v29;
    Currentint Attribute = AGGraphGetCurrentAttribute();
    int v17 = *MEMORY[0x263F288F8];
    if (CurrentAttribute != *MEMORY[0x263F288F8])
    {
      int v19 = CurrentAttribute;
      int v20 = v2;
      int v21 = v17;
      uint64_t v22 = v5;
      char v23 = v9;
      uint64_t v24 = v10;
      char v25 = v11;
      uint64_t v26 = v12;
      uint64_t v27 = v13;
      uint64_t v28 = v14;
      uint64_t v29 = v15;
      unsigned __int8 v18 = *(unsigned char *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  int v2 = HIDWORD(a1);
  double v4 = *(double *)AGGraphGetValue();
  uint64_t v5 = *(void *)AGGraphGetValue();
  uint64_t v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_6;
  }
  if (one-time initialization token for _lock != -1) {
    goto LABEL_9;
  }
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v8 = MEMORY[0x270FA5388](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v5 + 80))(&v22, v8);
    swift_release();
    uint64_t v5 = v22;
    char v9 = v23;
    uint64_t v10 = v24;
    char v11 = v25;
    uint64_t v12 = v26;
    uint64_t v13 = v27;
    uint64_t v14 = v28;
    uint64_t v15 = v29;
    Currentint Attribute = AGGraphGetCurrentAttribute();
    int v17 = *MEMORY[0x263F288F8];
    if (CurrentAttribute != *MEMORY[0x263F288F8])
    {
      int v19 = CurrentAttribute;
      int v20 = v2;
      int v21 = v17;
      uint64_t v22 = v5;
      char v23 = v9;
      uint64_t v24 = v10;
      char v25 = v11;
      uint64_t v26 = v12;
      uint64_t v27 = v13;
      uint64_t v28 = v14;
      uint64_t v29 = v15;
      unsigned __int8 v18 = *(unsigned char *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  int v2 = HIDWORD(a1);
  double v4 = *(double *)AGGraphGetValue();
  uint64_t v5 = *(void *)AGGraphGetValue();
  uint64_t v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_6;
  }
  if (one-time initialization token for _lock != -1) {
    goto LABEL_9;
  }
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for UnaryLayoutEngine<MoveTransition.MoveLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v8 = MEMORY[0x270FA5388](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v5 + 80))(&v22, v8);
    swift_release();
    uint64_t v5 = v22;
    char v9 = v23;
    uint64_t v10 = v24;
    char v11 = v25;
    uint64_t v12 = v26;
    uint64_t v13 = v27;
    uint64_t v14 = v28;
    uint64_t v15 = v29;
    Currentint Attribute = AGGraphGetCurrentAttribute();
    int v17 = *MEMORY[0x263F288F8];
    if (CurrentAttribute != *MEMORY[0x263F288F8])
    {
      int v19 = CurrentAttribute;
      int v20 = v2;
      int v21 = v17;
      uint64_t v22 = v5;
      char v23 = v9;
      uint64_t v24 = v10;
      char v25 = v11;
      uint64_t v26 = v12;
      uint64_t v27 = v13;
      uint64_t v28 = v14;
      uint64_t v29 = v15;
      unsigned __int8 v18 = *(unsigned char *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  int v2 = HIDWORD(a1);
  double v4 = *(double *)AGGraphGetValue();
  uint64_t v5 = *(void *)AGGraphGetValue();
  uint64_t v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_6;
  }
  if (one-time initialization token for _lock != -1) {
    goto LABEL_9;
  }
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v8 = MEMORY[0x270FA5388](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v5 + 80))(&v22, v8);
    swift_release();
    uint64_t v5 = v22;
    char v9 = v23;
    uint64_t v10 = v24;
    char v11 = v25;
    uint64_t v12 = v26;
    uint64_t v13 = v27;
    uint64_t v14 = v28;
    uint64_t v15 = v29;
    Currentint Attribute = AGGraphGetCurrentAttribute();
    int v17 = *MEMORY[0x263F288F8];
    if (CurrentAttribute != *MEMORY[0x263F288F8])
    {
      int v19 = CurrentAttribute;
      int v20 = v2;
      int v21 = v17;
      uint64_t v22 = v5;
      char v23 = v9;
      uint64_t v24 = v10;
      char v25 = v11;
      uint64_t v26 = v12;
      uint64_t v27 = v13;
      uint64_t v28 = v14;
      uint64_t v29 = v15;
      unsigned __int8 v18 = *(unsigned char *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void LayoutProxy.finallyPlaced(at:in:layoutDirection:)(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v7 = *a1;
  char v8 = *((unsigned char *)a1 + 8);
  uint64_t v9 = a1[2];
  char v10 = *((unsigned char *)a1 + 24);
  double v11 = *((double *)a1 + 4);
  double v12 = *((double *)a1 + 5);
  double v13 = *((double *)a1 + 6);
  double v14 = *((double *)a1 + 7);
  int v15 = *a2;
  int v16 = *((_DWORD *)v4 + 2);
  uint64_t v28 = *v4;
  int v29 = v16;
  uint64_t v24 = v7;
  char v25 = v8;
  uint64_t v26 = v9;
  char v27 = v10;
  LayoutProxy.dimensions(in:)((uint64_t)&v24, (uint64_t)v30);
  uint64_t v17 = v30[0];
  uint64_t v18 = v30[1];
  double v19 = rect;
  uint64_t v20 = v33;
  double v21 = v13 - v11 * rect;
  long long v22 = v32;
  double v23 = v14 - v12 * *(double *)&v32;
  *(double *)a3 = v21;
  *(double *)(a3 + 8) = v23;
  *(void *)(a3 + 16) = v17;
  *(void *)(a3 + 24) = v18;
  *(double *)(a3 + 32) = v19;
  *(_OWORD *)(a3 + 40) = v22;
  *(void *)(a3 + 56) = v20;
  if (v15 == 1) {
    *(double *)a3 = a4 - CGRectGetMaxX(*(CGRect *)&v21);
  }
}

uint64_t LayoutComputer.withMutableEngine<A, B>(type:do:)(uint64_t IsOwner, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *v4;
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    IsOwner = swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  IsOwner = _MovableLockIsOwner(static Update._lock);
  if ((IsOwner & 1) == 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    double v7 = MEMORY[0x270FA5388](IsOwner);
    return (*(uint64_t (**)(uint64_t, uint64_t (*)(), double))(*(void *)v6 + 80))(a4, partial apply for closure #1 in LayoutComputer.withMutableEngine<A, B>(type:do:), v7);
  }
  return result;
}

uint64_t LayoutEngineBox.mutateEngine<A, B>(as:do:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(*(void *)v4 + 160) == a4)
  {
    MEMORY[0x270FA5388](a1);
    v16[2] = v5;
    void v16[3] = v5;
    uint64_t v7 = *(void *)(v6 + 168);
    uint64_t v8 = *(void *)(v6 + 176);
    v16[4] = v9;
    v16[5] = v7;
    void v16[6] = v11;
    void v16[7] = v10;
    v16[8] = v12;
    return _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4 + v8, (uint64_t)partial apply for closure #1 in LayoutEngineBox.mutateEngine<A, B>(as:do:), (uint64_t)v16, v5, MEMORY[0x263F8E628], v14, MEMORY[0x263F8E658], v13);
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized PreferenceValues.Entry.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
  __swift_destroy_boxed_opaque_existential_1(v2 + 24);
  outlined init with take of Any(&v7, (_OWORD *)(v2 + 24));
  uint64_t result = type metadata accessor for PreferenceValues.Value();
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a1 + *(int *)(result + 28));
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ViewRootBodyAccessor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  id v4 = v3;
  return a1;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t type metadata accessor for UnaryLayoutEngine()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.PreferenceKey.Value) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t partial apply for closure #3 in static Layout.makeStaticView(root:inputs:properties:list:)(uint64_t a1)
{
  uint64_t v3 = **(void **)(v1 + 32);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = v3;
  return result;
}

uint64_t partial apply for closure #1 in AnchorTransform.value.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  id v4 = *(void (**)(uint64_t, uint64_t))(v1 + 48);
  int v5 = *(_DWORD *)(v1 + 72);
  uint64_t v8 = *(void *)(v1 + 64);
  int v9 = v5;
  uint64_t v6 = Anchor.Source.prepare(geometry:)(&v8, v3);
  v4(a1, v6);

  return swift_release();
}

uint64_t Anchor.Source.prepare(geometry:)(uint64_t *a1, uint64_t a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  swift_retain();
  uint64_t v7 = *a1;
  int v8 = v4;
  uint64_t v5 = (*(uint64_t (**)(uint64_t *))(*(void *)a2 + 88))(&v7);
  swift_release();
  return v5;
}

uint64_t OptionalAnchorBox.prepare(geometry:)(uint64_t a1)
{
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(*v1 + 104);
  type metadata accessor for OptionalAnchorValueBox();
  uint64_t v11 = v1[2];
  void v9[2] = v4;
  v9[3] = *(void *)a1;
  int v10 = v3;
  type metadata accessor for Anchor.Source();
  type metadata accessor for Optional();
  uint64_t v5 = type metadata accessor for Anchor();
  swift_retain();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in OptionalAnchorBox.prepare(geometry:), (uint64_t)v9, MEMORY[0x263F8E628], v5, v6, (uint64_t)&v12);
  swift_release();
  uint64_t v7 = v12;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v7;
  return result;
}

uint64_t type metadata accessor for Anchor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Anchor.Source()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for OptionalAnchorValueBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AnchorBox.prepare(geometry:)(uint64_t *a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 112);
  uint64_t v4 = *(void *)(*(void *)v1 + 104);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness - 8);
  uint64_t v7 = (char *)&v10 - v6;
  int v8 = *((_DWORD *)a1 + 2);
  type metadata accessor for AnchorValueBox();
  uint64_t v10 = *a1;
  int v11 = v8;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 32))(&v10, v4, v3);
  swift_allocObject();
  return AnchorValueBox.init(_:)((uint64_t)v7);
}

void protocol witness for AnchorProtocol.prepare(geometry:) in conformance UnitRect(void *a1@<X8>)
{
  UnitRect.prepare(geometry:)();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
}

void UnitRect.prepare(geometry:)()
{
  double v1 = *v0;
  double v2 = v0[1];
  double v3 = v0[2];
  double v4 = v0[3];
  type metadata accessor for CGSize(0);
  uint64_t Value = (double *)AGGraphGetValue();
  CGRect.prepare(geometry:)(v1 * *Value, v2 * Value[1], v3 * *Value, v4 * Value[1]);
}

uint64_t AnchorValueBox.init(_:)(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 144);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v3, a1, AssociatedTypeWitness);
  return v1;
}

uint64_t type metadata accessor for AnchorValueBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in addValue #1 <A>(key:) in PreferenceBridge.addValue(_:for:)()
{
  return closure #1 in addValue #1 <A>(key:) in PreferenceBridge.addValue(_:for:)();
}

uint64_t closure #1 in addValue #1 <A>(key:) in PreferenceBridge.addValue(_:for:)()
{
  return Array.append(_:)();
}

uint64_t partial apply for closure #1 in closure #1 in ViewGraph.instantiateOutputs()(_DWORD *a1)
{
  return closure #1 in closure #1 in ViewGraph.instantiateOutputs()(a1);
}

uint64_t closure #1 in closure #1 in ViewGraph.instantiateOutputs()(_DWORD *a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  swift_beginAccess();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  int v3 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t result = swift_release_n();
  *a1 = v3;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ()(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@inout [ScrollTargetRole.Role : [ScrollableCollection]]) -> ()(a1, *(uint64_t (**)(void))(v1 + 32));
}

uint64_t partial apply for closure #1 in AnchorGeometryTransform.value.getter(uint64_t a1)
{
  double v2 = *(uint64_t (**)(uint64_t, uint64_t *))(v1 + 32);
  int v3 = *(_DWORD *)(v1 + 56);
  uint64_t v5 = *(void *)(v1 + 48);
  int v6 = v3;
  return v2(a1, &v5);
}

uint64_t partial apply for closure #2 in static GeometryReader._makeView(view:inputs:)(uint64_t result)
{
  *(_DWORD *)(result + 12) = *(_DWORD *)(*(void *)(v1 + 16) + 12);
  return result;
}

void partial apply for closure #1 in DynamicLayoutViewAdaptor.removeItemLayout(uniqueId:itemLayout:)(int a1)
{
  closure #1 in DynamicLayoutViewAdaptor.removeItemLayout(uniqueId:itemLayout:)(a1, *(_DWORD *)(v1 + 16));
}

void _s7SwiftUI24DynamicLayoutViewAdaptorV010removeItemD08uniqueId04itemD0ys6UInt32V_AC0hD0VtFyAA0cD3MapVzXEfU_TA_0()
{
  DynamicLayoutMap.remove(uniqueId:)(*(_DWORD *)(v0 + 16));
}

void closure #1 in DynamicLayoutViewAdaptor.removeItemLayout(uniqueId:itemLayout:)(int a1, Swift::UInt32 uniqueId)
{
}

uint64_t partial apply for specialized closure #1 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(uint64_t result)
{
  *(_DWORD *)(result + 24) = *(_DWORD *)(v1 + 28);
  return result;
}

uint64_t partial apply for closure #4 in static _MatchedGeometryEffect.makeView<A>(modifier:inputs:clipShape:body:)(uint64_t result)
{
  *(_DWORD *)(result + 20) = *(_DWORD *)(*(void *)(v1 + 16) + 12);
  return result;
}

uint64_t partial apply for closure #1 in PreferenceBridge.addHostValues(_:for:)()
{
  return HostPreferencesCombiner.addChild(keys:values:)(*(_DWORD *)(v0 + 16), *(void *)(v0 + 20));
}

uint64_t _s7SwiftUI16PreferenceBridgeC13addHostValues_3fory14AttributeGraph04WeakI0VyAA0cG0VG_AF0I0VyAA0C4KeysVGtFyAA0F19PreferencesCombinerVzXEfU_TA_0(uint64_t a1)
{
  return closure #1 in PreferenceBridge.addHostValues(_:for:)(a1, *(_DWORD *)(v1 + 16), *(void *)(v1 + 20));
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in CanvasSymbols.updateValue()(uint64_t result)
{
  *(_DWORD *)(result + 4) = *(_DWORD *)(v1 + 28);
  return result;
}

uint64_t type metadata accessor for UnaryPositionAwareLayoutEngine()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in static PreferenceValueAttribute.setSource(_:of:)(uint64_t a1)
{
  uint64_t result = AGCreateWeakAttribute();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t partial apply for closure #1 in static _ViewOutputs.makeMaskView(inputs:contentBody:maskBody:outputsFromMask:mayUseForegroundColor:alignment:)(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *(_DWORD *)(result + 16) = *(_DWORD *)(*(void *)(v1 + 16) + 12);
  *(_DWORD *)(result + 20) = *(_DWORD *)(v2 + 12);
  return result;
}

unint64_t lazy protocol witness table accessor for type ColorView and conformance ColorView()
{
  unint64_t result = lazy protocol witness table cache variable for type ColorView and conformance ColorView;
  if (!lazy protocol witness table cache variable for type ColorView and conformance ColorView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorView and conformance ColorView);
  }
  return result;
}

unint64_t partial apply for closure #1 in PreferenceBridge.removeHostValues(for:isInvalidating:)(unint64_t a1)
{
  return closure #1 in PreferenceBridge.removeHostValues(for:isInvalidating:)(a1, *(char **)(v1 + 16), *(_DWORD *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection;
  if (!lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection;
  if (!lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection;
  if (!lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection;
  if (!lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection);
  }
  return result;
}

uint64_t specialized PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)(uint64_t result, uint64_t a2, void (*a3)(void))
{
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    for (uint64_t i = (ValueMetadata **)(result + 32); *i != &type metadata for UpdateScrollStateRequestKey; i += 2)
    {
      if (!--v4) {
        return result;
      }
    }
    a3();
    uint64_t v6 = *(void *)(*(void *)v3 + 16);
    if (v6)
    {
      uint64_t v7 = *(void *)v3 + 48;
      do
      {
        if (*(ValueMetadata **)(v7 - 16) == &type metadata for UpdateScrollStateRequestKey) {
          break;
        }
        v7 += 24;
        --v6;
      }
      while (v6);
    }
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for [Scrollable](0, &lazy cache variable for type metadata for [ScrollStateRequest], (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, MEMORY[0x263F8D488]);
    type metadata accessor for _TraitWritingModifier<ZIndexTraitKey>(0, &lazy cache variable for type metadata for PreferenceTransform<UpdateScrollStateRequestKey>, (uint64_t)&type metadata for UpdateScrollStateRequestKey, (uint64_t)&protocol witness table for UpdateScrollStateRequestKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PreferenceTransform);
    lazy protocol witness table accessor for type PreferenceTransform<ScrollTargetRole.ContentKey> and conformance PreferenceTransform<A>(&lazy protocol witness table cache variable for type PreferenceTransform<UpdateScrollStateRequestKey> and conformance PreferenceTransform<A>, &lazy cache variable for type metadata for PreferenceTransform<UpdateScrollStateRequestKey>, (uint64_t)&type metadata for UpdateScrollStateRequestKey, (uint64_t)&protocol witness table for UpdateScrollStateRequestKey);
    unsigned int v8 = Attribute.init<A>(body:value:flags:update:)();
    return PreferencesOutputs.subscript.setter(v8, &type metadata for UpdateScrollStateRequestKey, (uint64_t)&protocol witness table for UpdateScrollStateRequestKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<ScrollableCollection> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<ScrollableCollection> and conformance External<A>)
  {
    type metadata accessor for [Scrollable](255, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, (uint64_t)&protocol descriptor for ScrollableCollection, MEMORY[0x263F288C8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<ScrollableCollection> and conformance External<A>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.defaultForegroundColor : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultForegroundColor : EnvironmentValues(a1, (uint64_t (*)(uint64_t))EnvironmentValues.defaultForegroundStyle.getter, a2);
}

unint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance LayoutSubviews(unint64_t *a1, unint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Pair<A, B>()
{
  return static Pair<>.== infix(_:_:)();
}

uint64_t static AGAttributeFlags.invalidatable.getter()
{
  return 4;
}

void *static Semantics.v3.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v3, &static Semantics.v3, a1);
}

uint64_t partial apply for closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:)(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@inout [ScrollTargetRole.Role : [ScrollableCollection]]) -> ()(a1, *(uint64_t (**)(void))(v1 + 24));
}

uint64_t _sSo11AGAttributea14AttributeGraphE10mutateBody2as12invalidating_yxm_SbyxzXEtlFySvXEfU_TA_0()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t partial apply for closure #1 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(uint64_t a1)
{
  int v3 = *(_DWORD *)(v1 + 44);
  int v4 = *MEMORY[0x263F288F8];
  uint64_t result = type metadata accessor for UnaryLayoutComputer();
  if (v4 == v3) {
    int v6 = 0;
  }
  else {
    int v6 = v3;
  }
  if (v4 == v3) {
    int v7 = v4;
  }
  else {
    int v7 = v6;
  }
  *(_DWORD *)(a1 + 8) = v7;
  return result;
}

{
  uint64_t v1;
  int v3;
  int v4;
  uint64_t result;
  int v6;
  int v7;

  int v3 = *(_DWORD *)(v1 + 44);
  int v4 = *MEMORY[0x263F288F8];
  uint64_t result = type metadata accessor for UnaryPositionAwareChildGeometry();
  if (v4 == v3) {
    int v6 = 0;
  }
  else {
    int v6 = v3;
  }
  if (v4 == v3) {
    int v7 = v4;
  }
  else {
    int v7 = v6;
  }
  *(_DWORD *)(a1 + 24) = v7;
  return result;
}

uint64_t partial apply for closure #2 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(uint64_t a1)
{
  int v3 = *(_DWORD *)(v1 + 44);
  int v4 = *MEMORY[0x263F288F8];
  uint64_t result = type metadata accessor for UnaryChildGeometry();
  if (v4 == v3) {
    int v6 = 0;
  }
  else {
    int v6 = v3;
  }
  if (v4 == v3) {
    int v7 = v4;
  }
  else {
    int v7 = v6;
  }
  *(_DWORD *)(a1 + 12) = v7;
  return result;
}

uint64_t static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  void (*v78)(uint64_t *__return_ptr, uint64_t, unint64_t *);
  uint64_t *v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86[6];
  unint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;

  uint64_t v104 = *MEMORY[0x263EF8340];
  unint64_t v7 = *(void *)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  int v11 = *(_DWORD *)(a2 + 24);
  int v10 = *(_DWORD *)(a2 + 28);
  int v12 = *(_DWORD *)(a2 + 32);
  int v13 = *(_DWORD *)(a2 + 36);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  int v17 = *(_DWORD *)(a2 + 56);
  int v16 = *(_DWORD *)(a2 + 60);
  unsigned int v19 = *(_DWORD *)(a2 + 64);
  int v18 = *(_DWORD *)(a2 + 68);
  int v21 = *(_DWORD *)(a2 + 72);
  int v20 = *(_DWORD *)(a2 + 76);
  int v22 = *(_DWORD *)(a2 + 80);
  if ((v13 & 0x22) != 0)
  {
    unsigned int v66 = *(_DWORD *)(a2 + 72);
    unsigned int v68 = v19;
    int v72 = v17;
    int v73 = v16;
    int v74 = v18;
    int v75 = v20;
    int v76 = v22;
    uint64_t v77 = a4;
    int v78 = a3;
    int v82 = v14;
    int v79 = a7;
    v86[0] = *a1;
    uint64_t v87 = v7;
    int v69 = v8;
    unint64_t v88 = v8;
    unsigned int v90 = v9;
    int v70 = v11;
    unsigned int v91 = v11;
    uint64_t v92 = v10;
    int v71 = v10;
    unsigned int v93 = v12;
    uint64_t v94 = v13;
    unsigned int v95 = v15;
    uint64_t v23 = *(void *)(a6 + 8);
    int v81 = v7;
    int v67 = v12;
    unsigned int v26 = static Animatable.makeAnimatable(value:inputs:)(v86, (uint64_t *)&v87, a5, v23);
    uint64_t v27 = swift_beginAccess();
    int v28 = *MEMORY[0x263F288F8];
    uint64_t v87 = __PAIR64__(*(_DWORD *)(v9 + 16), v26);
    int v62 = v28;
    unint64_t v88 = v28;
    MEMORY[0x270FA5388](v27);
    uint64_t v60 = type metadata accessor for UnaryLayoutComputer();
    uint64_t WitnessTable = swift_getWitnessTable();
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for Attribute<LayoutComputer>, (uint64_t)&type metadata for LayoutComputer, MEMORY[0x263F28898]);
    uint64_t v63 = v60;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v87, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)&v58, v60, MEMORY[0x263F8E628], v29, MEMORY[0x263F8E658], v30);
    int v31 = v83;
    uint64_t v65 = a6;
    uint64_t v64 = a5;
    int v80 = v83;
    if ((v13 & 0x20) != 0)
    {
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      swift_retain_n();
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      unsigned int v41 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v42 = swift_release();
      uint64_t v87 = __PAIR64__(v41, v66);
      unint64_t v88 = v31;
      long long v89 = v62;
      MEMORY[0x270FA5388](v42);
      uint64_t v43 = type metadata accessor for UnaryChildGeometry();
      uint64_t v60 = v43;
      uint64_t WitnessTable = swift_getWitnessTable();
      _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for Attribute<ViewGeometry>, (uint64_t)&type metadata for ViewGeometry, MEMORY[0x263F28898]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v87, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)&v58, v43, MEMORY[0x263F8E628], v44, MEMORY[0x263F8E658], v45);
      uint64_t v33 = v82;
      int v34 = v83;
      int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      uint64_t v87 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v68);
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      unsigned int v37 = Attribute.init<A>(body:value:flags:update:)();
      int v36 = v67 | 0x18;
      int v35 = v13 | 2;
      unint64_t v32 = v81;
    }
    else
    {
      unint64_t v32 = v81;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v33 = v82;
      swift_bridgeObjectRetain();
      int v34 = 0;
      int v35 = v13;
      int v36 = v67;
      unsigned int v37 = v68;
      int OffsetAttribute2 = v66;
    }
    uint64_t v87 = v32;
    unint64_t v88 = v69;
    unsigned int v90 = v9;
    unsigned int v91 = v70;
    uint64_t v92 = v71;
    unsigned int v93 = v36;
    uint64_t v94 = v35;
    unsigned int v95 = v15;
    uint64_t v96 = v33;
    unint64_t v97 = v72;
    uint64_t v98 = v73;
    unint64_t v99 = v37;
    int v100 = v74;
    uint64_t v101 = OffsetAttribute2;
    uint64_t v102 = v75;
    unsigned int v103 = v76;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v46 = swift_bridgeObjectRetain();
    v78(&v83, v46, &v87);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v47 = swift_release();
    uint64_t v48 = v83;
    unsigned int v49 = v84;
    unsigned int v50 = v85;
    if ((v13 & 0x20) != 0)
    {
      MEMORY[0x270FA5388](v47);
      uint64_t v51 = v64;
      LODWORD(v78) = v34;
      uint64_t v52 = v65;
      uint64_t v58 = v64;
      uint64_t v59 = v65;
      uint64_t v60 = v48;
      uint64_t WitnessTable = __PAIR64__(v50, v49);
      MEMORY[0x270FA5388](v53);
      uint64_t v54 = AGGraphMutateAttribute();
      MEMORY[0x270FA5388](v54);
      uint64_t v58 = v51;
      uint64_t v59 = v52;
      uint64_t v60 = v48;
      uint64_t WitnessTable = __PAIR64__(v50, v49);
      uint64_t v55 = type metadata accessor for UnaryChildGeometry();
      MEMORY[0x270FA5388](v55);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    unsigned int v56 = v80;
    if ((v13 & 2) == 0) {
      unsigned int v56 = v50;
    }
    int v57 = v79;
    *int v79 = v48;
    *((_DWORD *)v57 + 2) = v49 | ((v13 & 2) << 6);
    *((_DWORD *)v57 + 3) = v56;
  }
  else
  {
    uint64_t v87 = *(void *)a2;
    unint64_t v88 = v8;
    unsigned int v90 = v9;
    unsigned int v91 = v11;
    uint64_t v92 = v10;
    unsigned int v93 = v12;
    uint64_t v94 = v13;
    unsigned int v95 = v15;
    uint64_t v96 = v14;
    unint64_t v97 = v17;
    uint64_t v98 = v16;
    unint64_t v99 = v19;
    int v100 = v18;
    uint64_t v101 = v21;
    uint64_t v102 = v20;
    unsigned int v103 = v22;
    return ((uint64_t (*)(unsigned int *, unint64_t *))a3)(a1, &v87);
  }
  return result;
}

uint64_t type metadata accessor for UnaryChildGeometry()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for UnaryLayoutComputer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _ProposedSize.width.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t protocol witness for static _AttributeBody._destroySelf(_:) in conformance AnimatableFrameAttribute(uint64_t result)
{
  if (*(void *)(result + 72)) {
    return specialized AnimatorState.removeListeners()();
  }
  return result;
}

uint64_t type metadata completion function for AnyLocation()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BackgroundStyleModifier<A>@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  return static _BackgroundStyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t partial apply for closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:)(a1, a2, a3, a4, *(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16));
}

void *static Semantics.v4.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v4, &static Semantics.v4, a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DynamicViewList<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t destroy for DynamicViewList.WrappedList(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = (((a1 + 47) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = v3;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness);
  if (!result)
  {
    int v6 = *(uint64_t (**)(unint64_t, uint64_t))(v7 + 8);
    return v6(v4, AssociatedTypeWitness);
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollPhaseStateConfigurationModifier()
{
  return &type metadata for ScrollPhaseStateConfigurationModifier;
}

uint64_t Attribute<A>.origin()()
{
  return AGGraphCreateOffsetAttribute2();
}

uint64_t Attribute<A>.size()()
{
  return AGGraphCreateOffsetAttribute2();
}

BOOL EdgeInsets.isEmpty.getter(double a1, double a2, double a3, double a4)
{
  BOOL v4 = a1 == 0.0;
  if (a2 != 0.0) {
    BOOL v4 = 0;
  }
  if (a3 != 0.0) {
    BOOL v4 = 0;
  }
  return a4 == 0.0 && v4;
}

uint64_t EnvironmentValues.accessibilityPrefersCrossFadeTransitions.setter(uint64_t a1)
{
  return EnvironmentValues.accessibilityEnabled.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.accessibilityDifferentiateWithoutColor.setter(uint64_t a1)
{
  return EnvironmentValues.accessibilityDifferentiateWithoutColor.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.accessibilityReduceTransparency.setter(uint64_t a1)
{
  return EnvironmentValues.accessibilityDifferentiateWithoutColor.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.accessibilityDimFlashingLights.setter(uint64_t a1)
{
  return EnvironmentValues.accessibilityEnabled.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.accessibilityShowButtonShapes.setter(uint64_t a1)
{
  return EnvironmentValues.accessibilityDifferentiateWithoutColor.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.accessibilityReduceMotion.setter(uint64_t a1)
{
  return EnvironmentValues.accessibilityDifferentiateWithoutColor.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.accessibilityInvertColors.setter(uint64_t a1)
{
  return EnvironmentValues.accessibilityDifferentiateWithoutColor.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues._colorSchemeContrast.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.colorScheme.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.displayCornerRadius.setter(uint64_t a1, char a2)
{
  return EnvironmentValues.defaultPixelLength.setter(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.verticalSizeClass.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.horizontalSizeClass.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.legibilityWeight.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.imageScale.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.displayScale.setter(double a1)
{
  return EnvironmentValues.displayScale.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

uint64_t EnvironmentValues.displayGamut.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.displayGamut.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.accessibilityPrefersOnOffLabels.setter(uint64_t a1)
{
  return EnvironmentValues.accessibilityEnabled.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.accessibilityPlayAnimatedImages.setter(uint64_t a1)
{
  return EnvironmentValues.accessibilityEnabled.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t (*protocol witness for Collection.subscript.read in conformance CountingIndexCollection<A>(uint64_t **a1))()
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)CountingIndexCollection.subscript.read(v2);
  return protocol witness for Collection.subscript.read in conformance UnsafeMutableBufferProjectionPointer<A, B>;
}

uint64_t (*CountingIndexCollection.subscript.read(uint64_t *a1))()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  a1[1] = v3;
  BOOL v4 = malloc(*(void *)(v3 + 64));
  a1[2] = (uint64_t)v4;
  CountingIndexCollection.subscript.getter((uint64_t)v4);
  return CountingIndexCollection.subscript.read;
}

uint64_t CountingIndexCollection.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (uint64_t (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v4 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, v4, AssociatedTypeWitness);
  return v2(&v7, 0);
}

void *initializeBufferWithCopyOfBuffer for OpacityResponderFilter(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  return a1;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance SectionAccumulator.RowIDs(uint64_t a1, uint64_t *a2))()
{
  return destroy for MouseEvent;
}

uint64_t SectionAccumulator.RowIDs.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  void (*v17)(uint64_t *__return_ptr, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v4 = *(void *)(*(void *)v2 + 16);
  if (v4)
  {
    uint64_t v5 = (void *)(*(void *)v2 + 72);
    while (1)
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v6 = *v5;
      BOOL v8 = __OFADD__(*v5, v7);
      uint64_t v9 = *v5 + v7;
      if (v8) {
        break;
      }
      if (v9 > result) {
        goto LABEL_7;
      }
      v5 += 6;
      if (!--v4) {
        goto LABEL_6;
      }
    }
    __break(1u);
    goto LABEL_28;
  }
LABEL_6:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_7:
  uint64_t v10 = result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v11 = *(v5 - 5);
  uint64_t v12 = *(v5 - 4);
  if (*((unsigned char *)v5 - 16))
  {
    if (*((unsigned char *)v5 - 16) == 1)
    {
      if (v10 < 0)
      {
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      if ((unint64_t)v10 >= *(void *)(v11 + 16))
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      unint64_t v13 = v11 + 16 * v10;
      LODWORD(v10) = *(_DWORD *)(v13 + 32);
      LODWORD(v11) = *(_DWORD *)(v13 + 36);
      uint64_t v14 = *(void *)(v13 + 40);
      if (*(void *)(v14 + 16))
      {
        int v15 = *(unsigned __int8 *)(v14 + 52);
        uint64_t result = swift_retain();
        if (v15) {
          LODWORD(v11) = -1;
        }
        goto LABEL_24;
      }
    }
    else
    {
      if (v10 < (uint64_t)0xFFFFFFFF80000000)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      if (v10 > 0x7FFFFFFF)
      {
LABEL_32:
        __break(1u);
        return result;
      }
      v11 >>= 32;
      if (*(void *)(v12 + 16))
      {
        int v22 = *(unsigned __int8 *)(v12 + 52);
        uint64_t result = swift_retain();
        if (v22) {
          LODWORD(v11) = -1;
        }
        goto LABEL_24;
      }
    }
    uint64_t result = 0;
LABEL_24:
    *(_DWORD *)a2 = v10;
    *(_DWORD *)(a2 + 4) = v11;
    *(void *)(a2 + 8) = result;
    return result;
  }
  uint64_t v16 = *(v5 - 3);
  int v17 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v11 + 96);
  outlined copy of SectionAccumulator.RowIDs.IDs(*(v5 - 5), *(v5 - 4), v16, 0);
  v17(&v23, v10);
  int v18 = v23;
  unsigned int v19 = HIDWORD(v23);
  if (*(void *)(v24 + 16))
  {
    int v20 = *(void *)(v24 + 32);
    int v21 = *(unsigned __int8 *)(v24 + 52);
    swift_retain();
    outlined consume of SectionAccumulator.RowIDs.IDs(v11, v12, v16, 0);
    uint64_t result = swift_bridgeObjectRelease();
    if (v21) {
      unsigned int v19 = -1;
    }
  }
  else
  {
    outlined consume of SectionAccumulator.RowIDs.IDs(v11, v12, v16, 0);
    uint64_t result = swift_bridgeObjectRelease();
    int v20 = 0;
  }
  *(_DWORD *)a2 = v18;
  *(_DWORD *)(a2 + 4) = v19;
  *(void *)(a2 + 8) = v20;
  return result;
}

uint64_t outlined consume of SectionAccumulator.RowIDs.IDs(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 2 || a4 == 1) {
    return swift_bridgeObjectRelease();
  }
  if (!a4) {
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of SectionAccumulator.RowIDs.IDs(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 2 || a4 == 1) {
    return swift_bridgeObjectRetain();
  }
  if (!a4) {
    return swift_retain();
  }
  return result;
}

uint64_t ViewRendererHost.explicitAlignment(of:at:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  return ViewRendererHost.explicitAlignment(of:at:)(a1, a2, a3, (uint64_t)partial apply for closure #1 in ViewRendererHost.explicitAlignment(of:at:), a4, a5);
}

{
  return ViewRendererHost.explicitAlignment(of:at:)(a1, a2, a3, (uint64_t)partial apply for closure #1 in ViewRendererHost.explicitAlignment(of:at:), a4, a5);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance TextSelectionForbidden(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

void *static Axis.allCases.getter()
{
  return &outlined read-only object #0 of static Axis.allCases.getter;
}

double static UnitPoint.topLeading.getter(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(double *)a2;
}

uint64_t static GestureMask.subviews.getter()
{
  return 2;
}

ValueMetadata *type metadata accessor for _HStackLayout()
{
  return &type metadata for _HStackLayout;
}

_DWORD *initializeWithCopy for DynamicContainerInfo(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 16;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 4) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 4) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 48) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v10 = *(void *)v11;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
  *(void *)(v10 + 16) = *(void *)(v11 + 16);
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(v11 + 24);
  *(_DWORD *)(v10 + 28) = *(_DWORD *)(v11 + 28);
  *(_DWORD *)(v10 + 32) = *(_DWORD *)(v11 + 32);
  *(_DWORD *)(v10 + 36) = *(_DWORD *)(v11 + 36);
  *(void *)(v10 + 40) = *(void *)(v11 + 40);
  *(void *)(v10 + 48) = *(void *)(v11 + 48);
  *(_DWORD *)(v10 + 56) = *(_DWORD *)(v11 + 56);
  *(_DWORD *)(v10 + 60) = *(_DWORD *)(v11 + 60);
  *(_DWORD *)(v10 + 64) = *(_DWORD *)(v11 + 64);
  *(_DWORD *)(v10 + 68) = *(_DWORD *)(v11 + 68);
  *(_DWORD *)(v10 + 72) = *(_DWORD *)(v11 + 72);
  *(_DWORD *)(v10 + 76) = *(_DWORD *)(v11 + 76);
  *(_DWORD *)(v10 + 80) = *(_DWORD *)(v11 + 80);
  unint64_t v12 = (v10 + 91) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + 91) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v12 = *(void *)v13;
  *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
  *(_DWORD *)(v12 + 12) = *(_DWORD *)(v13 + 12);
  uint64_t v14 = (void *)((v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v15 = (void **)((v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = *v15;
  *uint64_t v14 = *v15;
  unint64_t v17 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v17 = *(void *)v18;
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  *(void *)(v17 + 16) = *(void *)(v18 + 16);
  *(void *)(v17 + 24) = *(void *)(v18 + 24);
  *(void *)(v17 + 32) = *(void *)(v18 + 32);
  *(unsigned char *)(v17 + 40) = *(unsigned char *)(v18 + 40);
  *(_DWORD *)(v17 + 44) = *(_DWORD *)(v18 + 44);
  unsigned int v19 = (_DWORD *)((v18 + 51) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v20 = (unint64_t)v19 + 11;
  int v21 = (_DWORD *)((v17 + 51) & 0xFFFFFFFFFFFFFFF8);
  *int v21 = *v19;
  v21[1] = v19[1];
  unint64_t v22 = ((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v22 = *(_DWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)(v22 + 4) = *(unsigned char *)((v20 & 0xFFFFFFFFFFFFFFF8) + 4);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v23 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *initializeBufferWithCopyOfBuffer for SizeFittingTextLayoutComputer(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_retain();
  return a1;
}

BOOL static DynamicTypeSize.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

ValueMetadata *type metadata accessor for SymbolVariants()
{
  return &type metadata for SymbolVariants;
}

void ViewSize.value.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t assignWithCopy for DynamicContainer.Info(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  return a1;
}

void _DisplayList_Identity.init()(_DWORD *a1@<X8>)
{
  *a1 = ++lastIdentity;
}

uint64_t type metadata completion function for _BackgroundModifier()
{
  return type metadata completion function for _OverlayModifier();
}

uint64_t Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v279 = a6;
  int v276 = a4;
  v264 = (uint64_t (*)(void))a1;
  uint64_t v265 = a2;
  type metadata accessor for TimelineSchedule?(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
  MEMORY[0x270FA5388](v10 - 8);
  v270 = (char *)&v262 - v11;
  uint64_t v12 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v272 = *(void *)(v12 - 8);
  uint64_t v273 = v12;
  MEMORY[0x270FA5388](v12);
  v267 = (char *)&v262 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v263 = type metadata accessor for Locale();
  uint64_t v266 = *(void *)(v263 - 8);
  MEMORY[0x270FA5388](v263);
  int v15 = (char *)&v262 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TypesettingLanguage(0);
  MEMORY[0x270FA5388](v16);
  uint64_t v271 = (uint64_t)&v262 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  unint64_t v20 = (char *)&v262 - v19;
  uint64_t v269 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x270FA5388](v269);
  unint64_t v22 = (char *)&v262 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  char v25 = (char *)&v262 - v24;
  uint64_t v27 = *a3;
  uint64_t v26 = a3[1];
  uint64_t v275 = *a5;
  v300[0] = MEMORY[0x263F8EE80];
  uint64_t v278 = v27;
  if (v26)
  {
    swift_retain_n();
    swift_retain_n();
    int v274 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v27);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    long long v282 = (unint64_t)v27;
    swift_retain();
    int v274 = specialized static ShouldRedactContentKey.value(in:)((uint64_t *)&v282);
    swift_release();
  }
  v277 = (int *)type metadata accessor for Text.Style(0);
  uint64_t v28 = *(void *)(*(void *)(v7 + v277[24]) + 16);
  uint64_t v280 = v26;
  if (v28)
  {
    if (v26)
    {
      uint64_t v29 = v278;
      swift_retain_n();
      swift_retain_n();
      unint64_t v30 = specialized PropertyList.Tracker.value<A>(_:for:)(v29);
      swift_release_n();
    }
    else
    {
      uint64_t v34 = swift_retain_n();
      unint64_t v30 = specialized closure #1 in PropertyList.subscript.getter(v34);
      swift_bridgeObjectRetain();
    }
    uint64_t v31 = swift_release_n();
    MEMORY[0x270FA5388](v31);
    uint64_t v261 = v7;
    uint64_t v33 = (uint64_t)specialized _ArrayProtocol.filter(_:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:), &v259, v30);
  }
  else
  {
    if (v26)
    {
      uint64_t v32 = v278;
      swift_retain_n();
      swift_retain_n();
      uint64_t v33 = specialized PropertyList.Tracker.value<A>(_:for:)(v32);
      swift_release_n();
    }
    else
    {
      uint64_t v244 = swift_retain_n();
      uint64_t v33 = specialized closure #1 in PropertyList.subscript.getter(v244);
      swift_bridgeObjectRetain();
    }
    swift_release_n();
  }
  *(void *)&long long v282 = v33;
  unint64_t v35 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v35);
  uint64_t v299 = v282;
  uint64_t v36 = v279;
  *(void *)(v279 + 120) = 0;
  v268 = (void *)(v36 + 120);
  uint64_t v37 = v277[21];
  uint64_t v281 = v7;
  uint64_t v38 = v7 + v37;
  _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_0(v38, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
  if (one-time initialization token for automatic != -1) {
    swift_once();
  }
  uint64_t v39 = __swift_project_value_buffer(v16, (uint64_t)static TypesettingLanguage.automatic);
  _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_0(v39, (uint64_t)v20, type metadata accessor for TypesettingLanguage);
  BOOL v40 = specialized static TypesettingLanguage.Storage.== infix(_:_:)((uint64_t)v25, (uint64_t)v20);
  outlined destroy of Text.Style((uint64_t)v20, type metadata accessor for TypesettingLanguage);
  outlined destroy of Text.Style((uint64_t)v25, type metadata accessor for TypesettingLanguage);
  if (v40)
  {
    char v41 = v276;
LABEL_26:
    uint64_t v42 = v280;
    goto LABEL_27;
  }
  _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_0(v38, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
  outlined init with take of ResolvableStringResolutionContext((uint64_t)v22, v271, type metadata accessor for TypesettingLanguage);
  char v41 = v276;
  uint64_t v42 = v280;
  if (v280)
  {
    uint64_t v43 = v278;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v43, (uint64_t)v15);
  }
  else
  {
    uint64_t v44 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v44, (uint64_t)v15);
  }
  uint64_t v45 = v264;
  uint64_t v46 = v263;
  swift_release_n();
  swift_release_n();
  uint64_t v47 = v271;
  TypesettingLanguage.resolve(with:locale:)(v45, (uint64_t)v15, (uint64_t)&v282);
  (*(void (**)(char *, uint64_t))(v266 + 8))(v15, v46);
  outlined destroy of Text.Style(v47, type metadata accessor for TypesettingLanguage);
  unsigned __int8 v48 = BYTE1(v283);
  if (BYTE1(v283) != 2)
  {
    long long v49 = v282;
    uint64_t v50 = v283;
    if (BYTE1(v283) == 1) {
      goto LABEL_23;
    }
    uint64_t v51 = (void *)*MEMORY[0x263F081E8];
    uint64_t v284 = MEMORY[0x263F8D310];
    outlined init with take of Any(&v282, &v297);
    outlined copy of TypesettingLanguage.Resolved(v49, *((uint64_t *)&v49 + 1), v50, 0);
    outlined copy of TypesettingLanguage.Resolved(v49, *((uint64_t *)&v49 + 1), v50, 0);
    id v52 = v51;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v295[0] = v300[0];
    v300[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v297, v52, isUniquelyReferenced_nonNull_native);
    v300[0] = *(void *)&v295[0];

    swift_bridgeObjectRelease();
    uint64_t v54 = (void *)MEMORY[0x24C522820](v49, *((void *)&v49 + 1));
    outlined consume of TypesettingLanguage.Resolved(v49, *((uint64_t *)&v49 + 1), v50, 0);
    LODWORD(v52) = CTParagraphStyleGetCompositionLanguageForLanguage();

    void *v268 = v52;
    if (v50)
    {
LABEL_23:
      specialized static AnyFontModifier.languageModifier(_:)(v49, *((uint64_t *)&v49 + 1));
      outlined consume of TypesettingLanguage.Resolved(v49, *((uint64_t *)&v49 + 1), v50, v48);
      uint64_t v55 = swift_retain();
      MEMORY[0x24C522D60](v55);
      if (*(void *)((v299 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v299 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
    }
    else
    {
      outlined consume of TypesettingLanguage.Resolved(v49, *((uint64_t *)&v49 + 1), v50, 0);
    }
    goto LABEL_26;
  }
LABEL_27:
  uint64_t v56 = v38 + *(int *)(v269 + 20);
  uint64_t v57 = *(void *)v56;
  if (*(unsigned char *)(v56 + 8) == 1)
  {
    uint64_t v58 = v281;
    uint64_t v59 = v278;
    if (!v57) {
      goto LABEL_36;
    }
    type metadata accessor for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>, (void (*)(void))lazy protocol witness table accessor for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier);
    if (v57 == 1) {
      *(void *)(swift_allocObject() + 16) = 0;
    }
    else {
      *(void *)(swift_allocObject() + 16) = 0x3FD51EB851EB851FLL;
    }
  }
  else
  {
    type metadata accessor for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>, (void (*)(void))lazy protocol witness table accessor for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier);
    *(void *)(swift_allocObject() + 16) = v57;
    uint64_t v58 = v281;
    uint64_t v59 = v278;
  }
  uint64_t v60 = swift_retain();
  MEMORY[0x24C522D60](v60);
  if (*(void *)((v299 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v299 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();
LABEL_36:
  if (one-time initialization token for kitFont != -1) {
    swift_once();
  }
  *(void *)&long long v297 = *(void *)v58;
  *(void *)&long long v282 = v59;
  *((void *)&v282 + 1) = v42;
  id v61 = (id)static NSAttributedStringKey.kitFont;
  unint64_t v62 = Text.Style.TextStyleFont.resolve(in:includeDefaultAttributes:)((unint64_t *)&v282, v41 & 1);
  if (v62)
  {
    *(void *)&long long v282 = v59;
    *((void *)&v282 + 1) = v42;
    uint64_t v63 = Font.platformFont(in:modifiers:)((uint64_t *)&v282, v299, v62);
    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for CTFontRef(0);
    uint64_t v284 = v64;
    *(void *)&long long v282 = v63;
    uint64_t v42 = v280;
    outlined init with take of Any(&v282, &v297);
    char v65 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v295[0] = v300[0];
    v300[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v297, v61, v65);
    v300[0] = *(void *)&v295[0];

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v61, &v282);

    outlined destroy of Text.Style((uint64_t)&v282, (uint64_t (*)(void))type metadata accessor for Any?);
  }
  *(void *)&long long v297 = *(void *)(v58 + 16);
  *(void *)&long long v282 = v59;
  *((void *)&v282 + 1) = v42;
  *(void *)&v295[0] = v275;
  unint64_t v66 = Text.Style.TextStyleColor.resolve(in:with:properties:includeDefaultAttributes:)((uint64_t *)&v282, (uint64_t *)v295, v279, v41 & ((v275 & 4) == 0));
  if ((v69 & 1) == 0)
  {
    unint64_t v70 = v66;
    float v71 = v67;
    if (v274) {
      float v72 = v68 * 0.16;
    }
    else {
      float v72 = v68;
    }
    if (one-time initialization token for kitForegroundColor != -1) {
      swift_once();
    }
    uint64_t v73 = one-time initialization token for cache;
    id v74 = (id)static NSAttributedStringKey.kitForegroundColor;
    if (v73 != -1) {
      swift_once();
    }
    uint64_t v75 = specialized ObjectCache.subscript.getter(*(float *)&v70, *((float *)&v70 + 1), v71, v72);
    uint64_t v284 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    *(void *)&long long v282 = v75;
    outlined init with take of Any(&v282, &v297);
    char v76 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v295[0] = v300[0];
    v300[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v297, v74, v76);
    v300[0] = *(void *)&v295[0];

    swift_bridgeObjectRelease();
    __int16 v77 = *(_WORD *)(v279 + 32);
    if ((v77 & 1) == 0 && *(float *)&v70 == -1.0 && *((float *)&v70 + 1) == -1.0) {
      *(_WORD *)(v279 + 32) = v77 | 1;
    }
  }
  uint64_t v78 = *(void *)(v58 + 24);
  if (v78)
  {
    *(void *)&long long v282 = v59;
    *((void *)&v282 + 1) = v42;
    float v79 = (*(float (**)(long long *))(*(void *)v78 + 104))(&v282);
    float v81 = v80;
    float v83 = v82;
    float v85 = v84;
    if (one-time initialization token for kitBackgroundColor != -1) {
      swift_once();
    }
    uint64_t v86 = one-time initialization token for cache;
    id v87 = (id)static NSAttributedStringKey.kitBackgroundColor;
    if (v86 != -1) {
      swift_once();
    }
    uint64_t v88 = specialized ObjectCache.subscript.getter(v79, v81, v83, v85);
    uint64_t v284 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    *(void *)&long long v282 = v88;
    outlined init with take of Any(&v282, &v297);
    char v89 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v295[0] = v300[0];
    v300[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v297, v87, v89);
    v300[0] = *(void *)&v295[0];

    swift_bridgeObjectRelease();
    __int16 v90 = *(_WORD *)(v279 + 32);
    if ((v90 & 1) == 0 && v79 == -1.0 && v81 == -1.0) {
      *(_WORD *)(v279 + 32) = v90 | 1;
    }
  }
  if (*(unsigned char *)(v58 + 40))
  {
    if (v42)
    {
      swift_retain_n();
      swift_retain_n();
      double v91 = specialized PropertyList.Tracker.value<A>(_:for:)(v59);
    }
    else
    {
      uint64_t v100 = swift_retain_n();
      double v91 = specialized closure #1 in PropertyList.subscript.getter(v100);
    }
    swift_release_n();
    swift_release_n();
    if (v91 == 0.0)
    {
LABEL_77:
      if (*(unsigned char *)(v58 + 56)) {
        goto LABEL_78;
      }
LABEL_69:
      double v95 = *(double *)(v58 + 48);
      if (v95 == 0.0) {
        goto LABEL_82;
      }
      goto LABEL_70;
    }
  }
  else
  {
    double v91 = *(double *)(v58 + 32);
    if (v91 == 0.0) {
      goto LABEL_77;
    }
  }
  if (one-time initialization token for kitBaselineOffset != -1) {
    swift_once();
  }
  uint64_t v92 = (void *)static NSAttributedStringKey.kitBaselineOffset;
  uint64_t v284 = MEMORY[0x263F8EF38];
  *(double *)&long long v282 = v91;
  outlined init with take of Any(&v282, &v297);
  id v93 = v92;
  char v94 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v295[0] = v300[0];
  v300[0] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v297, v93, v94);
  v300[0] = *(void *)&v295[0];

  swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v58 + 56) & 1) == 0) {
    goto LABEL_69;
  }
LABEL_78:
  if (v42)
  {
    swift_retain_n();
    swift_retain_n();
    double v95 = specialized PropertyList.Tracker.value<A>(_:for:)(v59);
  }
  else
  {
    uint64_t v101 = swift_retain_n();
    double v95 = specialized closure #1 in PropertyList.subscript.getter(v101);
  }
  swift_release_n();
  swift_release_n();
  if (v95 == 0.0)
  {
LABEL_82:
    if (*(unsigned char *)(v58 + 72)) {
      goto LABEL_83;
    }
    goto LABEL_73;
  }
LABEL_70:
  if (one-time initialization token for kitKern != -1) {
    swift_once();
  }
  uint64_t v96 = (void *)static NSAttributedStringKey.kitKern;
  uint64_t v284 = MEMORY[0x263F8EF38];
  *(double *)&long long v282 = v95;
  outlined init with take of Any(&v282, &v297);
  id v97 = v96;
  char v98 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v295[0] = v300[0];
  v300[0] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v297, v97, v98);
  v300[0] = *(void *)&v295[0];

  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v58 + 72))
  {
LABEL_83:
    if (v42)
    {
      swift_retain_n();
      swift_retain_n();
      double v99 = specialized PropertyList.Tracker.value<A>(_:for:)(v59);
    }
    else
    {
      uint64_t v102 = swift_retain_n();
      double v99 = specialized closure #1 in PropertyList.subscript.getter(v102);
    }
    swift_release_n();
    swift_release_n();
    if (v99 == 0.0) {
      goto LABEL_90;
    }
    goto LABEL_87;
  }
LABEL_73:
  double v99 = *(double *)(v58 + 64);
  if (v99 == 0.0) {
    goto LABEL_90;
  }
LABEL_87:
  if (one-time initialization token for kitTracking != -1) {
    swift_once();
  }
  unsigned int v103 = (void *)static NSAttributedStringKey.kitTracking;
  uint64_t v284 = MEMORY[0x263F8EF38];
  *(double *)&long long v282 = v99;
  outlined init with take of Any(&v282, &v297);
  id v104 = v103;
  char v105 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v295[0] = v300[0];
  v300[0] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v297, v104, v105);
  v300[0] = *(void *)&v295[0];

  swift_bridgeObjectRelease();
LABEL_90:
  long long v297 = *(_OWORD *)(v58 + 80);
  *(void *)&v295[0] = v59;
  *((void *)&v295[0] + 1) = v42;
  swift_retain();
  swift_retain();
  specialized Text.Style.LineStyle.resolve(in:fallbackStyle:)(v295, (uint64_t *)&v297, v59, v42, (uint64_t)&v282);
  if ((v284 & 0x100) == 0)
  {
    uint64_t v107 = *((void *)&v282 + 1);
    uint64_t v106 = v282;
    uint64_t v108 = v283;
    char v109 = v284;
    if (one-time initialization token for kitStrikethroughStyle != -1) {
      swift_once();
    }
    uint64_t v110 = (void *)static NSAttributedStringKey.kitStrikethroughStyle;
    id v111 = objc_allocWithZone(NSNumber);
    id v112 = v110;
    id v113 = objc_msgSend(v111, sel_initWithInteger_, v106);
    uint64_t v284 = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    *(void *)&long long v282 = v113;
    outlined init with take of Any(&v282, &v297);
    char v114 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v295[0] = v300[0];
    v300[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v297, v112, v114);
    v300[0] = *(void *)&v295[0];

    swift_bridgeObjectRelease();
    if ((v109 & 1) == 0)
    {
      if (one-time initialization token for kitStrikethroughColor != -1) {
        swift_once();
      }
      uint64_t v115 = one-time initialization token for cache;
      id v116 = (id)static NSAttributedStringKey.kitStrikethroughColor;
      if (v115 != -1) {
        swift_once();
      }
      uint64_t v117 = specialized ObjectCache.subscript.getter(*(float *)&v107, *((float *)&v107 + 1), *(float *)&v108, *((float *)&v108 + 1));
      uint64_t v284 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      *(void *)&long long v282 = v117;
      outlined init with take of Any(&v282, &v297);
      char v118 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v295[0] = v300[0];
      v300[0] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v297, v116, v118);
      v300[0] = *(void *)&v295[0];

      swift_bridgeObjectRelease();
      __int16 v119 = *(_WORD *)(v279 + 32);
      if ((v119 & 1) == 0 && *(float *)&v107 == -1.0 && *((float *)&v107 + 1) == -1.0) {
        *(_WORD *)(v279 + 32) = v119 | 1;
      }
    }
  }
  uint64_t v120 = v280;
  long long v297 = *(_OWORD *)(v281 + 96);
  uint64_t v121 = v278;
  *(void *)&v295[0] = v278;
  *((void *)&v295[0] + 1) = v280;
  swift_retain();
  swift_retain();
  specialized Text.Style.LineStyle.resolve(in:fallbackStyle:)(v295, (uint64_t *)&v297, v121, v120, (uint64_t)&v282);
  if ((v284 & 0x100) != 0)
  {
    uint64_t v122 = v281;
  }
  else
  {
    uint64_t v124 = *((void *)&v282 + 1);
    uint64_t v123 = v282;
    uint64_t v125 = v283;
    char v126 = v284;
    if (one-time initialization token for kitUnderlineStyle != -1) {
      swift_once();
    }
    unsigned int v127 = (void *)static NSAttributedStringKey.kitUnderlineStyle;
    id v128 = objc_allocWithZone(NSNumber);
    id v129 = v127;
    id v130 = objc_msgSend(v128, sel_initWithInteger_, v123);
    uint64_t v284 = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    *(void *)&long long v282 = v130;
    outlined init with take of Any(&v282, &v297);
    char v131 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v295[0] = v300[0];
    v300[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v297, v129, v131);
    v300[0] = *(void *)&v295[0];

    swift_bridgeObjectRelease();
    uint64_t v122 = v281;
    if ((v126 & 1) == 0)
    {
      if (one-time initialization token for kitUnderlineColor != -1) {
        swift_once();
      }
      uint64_t v132 = one-time initialization token for cache;
      id v133 = (id)static NSAttributedStringKey.kitUnderlineColor;
      if (v132 != -1) {
        swift_once();
      }
      uint64_t v134 = specialized ObjectCache.subscript.getter(*(float *)&v124, *((float *)&v124 + 1), *(float *)&v125, *((float *)&v125 + 1));
      uint64_t v284 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      *(void *)&long long v282 = v134;
      outlined init with take of Any(&v282, &v297);
      char v135 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v295[0] = v300[0];
      v300[0] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v297, v133, v135);
      v300[0] = *(void *)&v295[0];

      swift_bridgeObjectRelease();
      __int16 v136 = *(_WORD *)(v279 + 32);
      if ((v136 & 1) == 0 && *(float *)&v124 == -1.0 && *((float *)&v124 + 1) == -1.0) {
        *(_WORD *)(v279 + 32) = v136 | 1;
      }
    }
  }
  uint64_t v137 = *(void *)(v122 + 176);
  if (v137 != 1)
  {
    char v138 = *(unsigned char *)(v122 + 208);
    uint64_t v139 = *(void *)(v281 + 200);
    uint64_t v140 = *(void *)(v281 + 192);
    uint64_t v141 = *(void *)(v281 + 184);
    uint64_t v142 = *(void *)(v281 + 168);
    uint64_t v143 = *(void *)(v281 + 160);
    uint64_t v144 = *(void *)(v281 + 152);
    uint64_t v145 = *(void *)(v281 + 144);
    uint64_t v146 = *(void *)(v281 + 136);
    uint64_t v147 = *(void *)(v281 + 128);
    uint64_t v148 = *(void *)(v281 + 120);
    uint64_t v149 = *(void *)(v281 + 112);
    uint64_t v150 = (void *)*MEMORY[0x263F03960];
    *(void *)&long long v282 = v149;
    BYTE8(v282) = v148 & 1;
    uint64_t v283 = v147;
    LOBYTE(v284) = v146 & 1;
    uint64_t v285 = v145;
    uint64_t v265 = v144;
    uint64_t v266 = v145;
    char v286 = v144 & 1;
    uint64_t v287 = v143;
    uint64_t v263 = v142;
    v264 = (uint64_t (*)(void))v143;
    char v288 = v142 & 1;
    uint64_t v289 = v137;
    uint64_t v290 = v141;
    uint64_t v269 = v141;
    uint64_t v271 = v140;
    char v291 = v140 & 1;
    uint64_t v292 = v139;
    char v293 = v138 & 1;
    *(void *)&long long v297 = v278;
    *((void *)&v297 + 1) = v280;
    LOBYTE(v261) = v138;
    uint64_t v259 = v140;
    uint64_t v260 = v139;
    outlined copy of Text.Encapsulation?(v149, v148, v147, v146, v145, v144, v143, v142, v137);
    id v151 = v150;
    unsigned int v152 = Text.Encapsulation.resolve(in:)((uint64_t *)&v297);
    uint64_t v284 = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSTextEncapsulation);
    *(void *)&long long v282 = v152;
    outlined init with take of Any(&v282, &v297);
    char v153 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v295[0] = v300[0];
    v300[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v297, v151, v153);
    v300[0] = *(void *)&v295[0];

    swift_bridgeObjectRelease();
    LOBYTE(v261) = v138;
    uint64_t v260 = v139;
    uint64_t v122 = v281;
    uint64_t v259 = v271;
    outlined consume of Text.Encapsulation?(v149, v148, v147, v146, v266, v265, (uint64_t)v264, v263, v137);
  }
  if (!v280)
  {
    uint64_t v154 = v278;
    long long v282 = (unint64_t)v278;
    swift_retain();
    char v161 = specialized static ShouldRedactContentKey.value(in:)((uint64_t *)&v282);
    swift_release();
    swift_release();
    int v156 = v276;
    int v157 = v274;
    uint64_t v158 = (uint64_t)v270;
    if (v161) {
      goto LABEL_130;
    }
    int v159 = *(unsigned __int8 *)(v122 + 320);
    type metadata accessor for EnvironmentPropertyKey<TextScaleKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextScaleKey>, (uint64_t)&type metadata for TextScaleKey, (uint64_t)&protocol witness table for TextScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v162);
    uint64_t v163 = v282;
    int v160 = 2;
    swift_retain_n();
    swift_retain();
    uint64_t v164 = specialized find1<A>(_:key:filter:)(v154, v163);
    if (v164) {
      int v160 = *(unsigned __int8 *)(v164 + 72);
    }
    swift_release();
    swift_release_n();
    if (v159 != 2) {
      goto LABEL_126;
    }
LABEL_125:
    LOBYTE(v159) = v160;
    if (v160 == 2) {
      goto LABEL_130;
    }
    goto LABEL_126;
  }
  uint64_t v154 = v278;
  swift_retain_n();
  swift_retain_n();
  char v155 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v154);
  swift_release_n();
  swift_release_n();
  int v156 = v276;
  int v157 = v274;
  uint64_t v158 = (uint64_t)v270;
  if (v155) {
    goto LABEL_130;
  }
  int v159 = *(unsigned __int8 *)(v122 + 320);
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v154, (char *)&v297);
  swift_release_n();
  swift_release_n();
  int v160 = v297;
  if (v159 == 2) {
    goto LABEL_125;
  }
LABEL_126:
  if (v159)
  {
    if (one-time initialization token for _textScale != -1) {
      swift_once();
    }
    long long v165 = (void *)static NSAttributedStringKey._textScale;
    type metadata accessor for CFStringRef(0);
    uint64_t v284 = v166;
    *(void *)&long long v282 = @"NSTextScaleSecondary";
    outlined init with take of Any(&v282, &v297);
    id v167 = v165;
    unint64_t v168 = @"NSTextScaleSecondary";
    char v169 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v295[0] = v300[0];
    v300[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v297, v167, v169);
    v300[0] = *(void *)&v295[0];

    swift_bridgeObjectRelease();
  }
LABEL_130:
  int v170 = v157;
  outlined init with copy of AttributedString.AdaptiveImageGlyph?(v122 + v277[23], v158);
  uint64_t v171 = v272;
  uint64_t v172 = v273;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v272 + 48))(v158, 1, v273) == 1)
  {
    outlined destroy of TimelineSchedule?(v158, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
  }
  else
  {
    unint64_t v173 = v267;
    (*(void (**)(char *, uint64_t, uint64_t))(v171 + 32))(v267, v158, v172);
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for CTAdaptiveImageGlyph);
    long long v174 = (void *)static CTAdaptiveImageGlyph._adaptiveImageGlyph(convertingFrom:)();
    long long v175 = (void *)*MEMORY[0x263F81498];
    id v176 = objc_allocWithZone(MEMORY[0x263F81618]);
    id v177 = v175;
    id v178 = objc_msgSend(v176, sel_initWithCTAdaptiveImageGlyph_, v174);
    uint64_t v284 = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSAdaptiveImageGlyph);
    *(void *)&long long v282 = v178;
    outlined init with take of Any(&v282, &v297);
    char v179 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v295[0] = v300[0];
    v300[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v297, v177, v179);
    v300[0] = *(void *)&v295[0];

    swift_bridgeObjectRelease();
    double v180 = v173;
    uint64_t v122 = v281;
    (*(void (**)(char *, uint64_t))(v171 + 8))(v180, v172);
    int v156 = v276;
  }
  uint64_t v181 = *(void *)(v122 + 304);
  int v182 = v170;
  if (!v181)
  {
    uint64_t v187 = v280;
    if ((v275 & 8) != 0)
    {
      uint64_t v211 = *(void *)(v122 + 312);
      if (v211)
      {
        double v212 = (double)*(uint64_t *)(*(void *)(v279 + 48) + 16);
        swift_retain();
        id v213 = CoreMakeNSShadowWithCustomStyleIndex(0, v212);
        if (v213)
        {
          id v214 = v213;
          if (one-time initialization token for kitShadow != -1) {
            swift_once();
          }
          CGRect v215 = (void *)static NSAttributedStringKey.kitShadow;
          uint64_t v284 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
          *(void *)&long long v282 = v214;
          outlined init with take of Any(&v282, &v297);
          id v216 = v215;
          char v217 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v295[0] = v300[0];
          v300[0] = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v297, v216, v217);
          v300[0] = *(void *)&v295[0];

          swift_bridgeObjectRelease();
        }
        uint64_t v218 = *(void *)(v211 + 16);
        unint64_t v219 = *(unsigned int *)(v211 + 24) | ((unint64_t)*(unsigned __int8 *)(v211 + 28) << 32);
        char v220 = *(unsigned char *)(v211 + 29);
        char v221 = *(unsigned char *)(v211 + 30);
        v222 = *(void **)(v279 + 48);
        outlined copy of ContentTransition.Storage(v218, v219, v220);
        int v223 = v156;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v222 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v222[2] + 1, 1, v222);
        }
        unint64_t v225 = v222[2];
        unint64_t v224 = v222[3];
        if (v225 >= v224 >> 1) {
          v222 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v224 > 1), v225 + 1, 1, v222);
        }
        v222[2] = v225 + 1;
        v226 = &v222[2 * v225];
        v226[4] = v218;
        *((_DWORD *)v226 + 10) = v219;
        *((unsigned char *)v226 + 44) = BYTE4(v219);
        *((unsigned char *)v226 + 45) = v220;
        *((unsigned char *)v226 + 46) = v221;
        swift_release();
        uint64_t v154 = v278;
        *(void *)(v279 + 48) = v222;
        uint64_t v187 = v280;
        uint64_t v122 = v281;
        int v156 = v223;
        int v182 = v274;
      }
    }
LABEL_159:
    if (((v156 | v182) & 1) == 0) {
      goto LABEL_163;
    }
    goto LABEL_160;
  }
  uint64_t v183 = *(void *)(v181 + 16);
  double v185 = *(double *)(v181 + 24);
  double v184 = *(double *)(v181 + 32);
  double v186 = *(double *)(v181 + 40);
  uint64_t v187 = v280;
  *(void *)&long long v282 = v154;
  *((void *)&v282 + 1) = v280;
  v188 = *(float (**)(long long *))(*(void *)v183 + 104);
  swift_retain();
  float v189 = v188(&v282);
  float v191 = v190;
  float v193 = v192;
  float v195 = v194;
  swift_release();
  double v196 = v185 * -2.8;
  double v197 = v185 * -2.8 + v186;
  double v198 = v185 * -2.8 + v184;
  CGRect v199 = (double *)v279;
  if (v197 >= *(double *)v279) {
    double v197 = *(double *)v279;
  }
  double v200 = v196 - v186;
  double v201 = v196 - v184;
  if (v198 >= *(double *)(v279 + 8)) {
    double v198 = *(double *)(v279 + 8);
  }
  *(double *)uint64_t v279 = v197;
  v199[1] = v198;
  double v202 = v199[2];
  if (v200 < v202) {
    double v202 = v200;
  }
  if (v201 >= v199[3]) {
    double v201 = v199[3];
  }
  v199[2] = v202;
  v199[3] = v201;
  CGRect v203 = specialized static CoreColor.platformColor(resolvedColor:)(v189, v191, v193, v195);
  if (!v203) {
    goto LABEL_159;
  }
  v204 = v203;
  id v205 = CoreMakeNSShadow(v203, v184, v186, v185 + v185);
  if (!v205)
  {

    if (((v156 | v182) & 1) == 0) {
      goto LABEL_163;
    }
    goto LABEL_160;
  }
  CGRect v206 = v205;
  if (one-time initialization token for kitShadow != -1) {
    swift_once();
  }
  CGRect v207 = (void *)static NSAttributedStringKey.kitShadow;
  uint64_t v284 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  *(void *)&long long v282 = v206;
  outlined init with take of Any(&v282, &v297);
  id v208 = v207;
  id v209 = v206;
  char v210 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v295[0] = v300[0];
  v300[0] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v297, v208, v210);
  v300[0] = *(void *)&v295[0];

  swift_bridgeObjectRelease();
  if ((v156 | v182))
  {
LABEL_160:
    if (one-time initialization token for kitParagraphStyle != -1) {
      swift_once();
    }
    *(void *)&long long v282 = v154;
    *((void *)&v282 + 1) = v187;
    id v227 = (id)static NSAttributedStringKey.kitParagraphStyle;
    id v228 = Text.ResolvedProperties.Paragraph.style(environment:)((uint64_t *)&v282);
    uint64_t v284 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
    *(void *)&long long v282 = v228;
    outlined init with take of Any(&v282, &v297);
    char v229 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v295[0] = v300[0];
    v300[0] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v297, v227, v229);
    v300[0] = *(void *)&v295[0];

    swift_bridgeObjectRelease();
  }
LABEL_163:
  if (!(((v275 & 1) == 0) | v182 & 1))
  {
    *(void *)&long long v282 = v154;
    *((void *)&v282 + 1) = v187;
    Text.Style.resolveAccessibilitySpeechAttributes(into:environment:includeDefaultAttributes:)((uint64_t)v300, (uint64_t *)&v282, v156 & 1);
    *(void *)&long long v282 = v154;
    *((void *)&v282 + 1) = v187;
    Text.Style.resolveAccessibilityTextAttributes(into:environment:)((uint64_t)v300, (uint64_t *)&v282);
  }
  unint64_t v230 = *(void *)(v122 + v277[22]);
  if (v230 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v258 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v258) {
      goto LABEL_170;
    }
  }
  else if (!*(void *)((v230 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_170;
  }
  if (one-time initialization token for customAttributes != -1) {
    swift_once();
  }
  v231 = (void *)static NSAttributedStringKey.customAttributes;
  uint64_t v284 = (uint64_t)&type metadata for Text.CustomAttributes;
  *(void *)&long long v282 = v230;
  outlined init with take of Any(&v282, &v297);
  swift_bridgeObjectRetain();
  id v232 = v231;
  char v233 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v295[0] = v300[0];
  v300[0] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v297, v232, v233);
  v300[0] = *(void *)&v295[0];

  swift_bridgeObjectRelease();
LABEL_170:
  if ((*(unsigned char *)(v122 + 321) & 1) == 0)
  {
    uint64_t v234 = v300[0];
    if (*(void *)(v300[0] + 16))
    {
      id v235 = (id)static NSAttributedStringKey.kitFont;
      uint64_t v236 = specialized __RawDictionaryStorage.find<A>(_:)(v235);
      if (v237)
      {
        outlined init with copy of Any(*(void *)(v234 + 56) + 32 * v236, (uint64_t)&v297);
      }
      else
      {
        long long v297 = 0u;
        long long v298 = 0u;
      }

      if (*((void *)&v298 + 1))
      {
        outlined init with take of Any(&v297, &v282);
        outlined init with copy of Any((uint64_t)&v282, (uint64_t)&v297);
        type metadata accessor for CTFontRef(0);
        uint64_t v239 = v238;
        swift_dynamicCast();
        if (one-time initialization token for kitBaselineOffset != -1) {
          swift_once();
        }
        uint64_t v240 = v300[0];
        if (*(void *)(v300[0] + 16))
        {
          id v241 = (id)static NSAttributedStringKey.kitBaselineOffset;
          uint64_t v242 = specialized __RawDictionaryStorage.find<A>(_:)(v241);
          if (v243)
          {
            outlined init with copy of Any(*(void *)(v240 + 56) + 32 * v242, (uint64_t)&v297);
          }
          else
          {
            long long v297 = 0u;
            long long v298 = 0u;
          }

          if (*((void *)&v298 + 1))
          {
            if (swift_dynamicCast())
            {
              double v245 = *(double *)v295;
LABEL_193:
              v246 = v296;
              v247 = CTFontRef.scaled(by:toMultipleOf:maintainVisualWeight:)(0x3FD0000000000000, 0, 1, 0.65);
              double CapHeight = CTFontGetCapHeight(v246);

              double v249 = v245 + CapHeight - CTFontGetCapHeight(v247);
              v296 = v247;
              v250 = (void *)static NSAttributedStringKey.kitFont;
              *((void *)&v298 + 1) = v239;
              *(void *)&long long v297 = v247;
              outlined init with take of Any(&v297, v295);
              id v251 = v250;
              v252 = v247;
              char v253 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v294 = v300[0];
              v300[0] = 0x8000000000000000;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v295, v251, v253);
              v300[0] = v294;

              swift_bridgeObjectRelease();
              v254 = (void *)static NSAttributedStringKey.kitBaselineOffset;
              *((void *)&v298 + 1) = MEMORY[0x263F8EF38];
              *(double *)&long long v297 = v249;
              outlined init with take of Any(&v297, v295);
              id v255 = v254;
              char v256 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v294 = v300[0];
              v300[0] = 0x8000000000000000;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v295, v255, v256);
              v300[0] = v294;

              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v282);

              return v300[0];
            }
LABEL_192:
            double v245 = 0.0;
            goto LABEL_193;
          }
        }
        else
        {
          long long v297 = 0u;
          long long v298 = 0u;
        }
        outlined destroy of Text.Style((uint64_t)&v297, (uint64_t (*)(void))type metadata accessor for Any?);
        goto LABEL_192;
      }
    }
    else
    {
      long long v297 = 0u;
      long long v298 = 0u;
    }
    outlined destroy of Text.Style((uint64_t)&v297, (uint64_t (*)(void))type metadata accessor for Any?);
  }
  return v300[0];
}

uint64_t type metadata accessor for CAPresentationModifier(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t specialized PropertyList.Tracker.derivedValue<A>(_:for:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v18 = a1;
    uint64_t v19 = 0;
    swift_retain();
    char v12 = specialized static ShouldRedactContentKey.value(in:)(&v18);
    swift_release();
    LOBYTE(v17[0]) = v12 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>(0, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<ShouldRedactContentKey>, (uint64_t)&type metadata for ShouldRedactContentKey, (uint64_t)&protocol witness table for ShouldRedactContentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DerivedEnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 40);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v17);
    outlined init with take of ScrollStateRequest(v17, (uint64_t)&v18);
    uint64_t v10 = v20;
    uint64_t v11 = v21;
    __swift_project_boxed_opaque_existential_1(&v18, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v17, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
  }
  else
  {
    uint64_t v18 = a1;
    uint64_t v19 = 0;
    swift_retain();
    char v13 = specialized static ShouldRedactContentKey.value(in:)(&v18);
    swift_release();
    LOBYTE(v17[0]) = v13 & 1;
    type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<ShouldRedactContentKey>>();
    uint64_t v20 = v14;
    uint64_t v21 = &protocol witness table for DerivedValue<A>;
    LOBYTE(v18) = v13 & 1;
    specialized Dictionary.subscript.setter((uint64_t)&v18, v6);
  }
LABEL_9:
  uint64_t v15 = LOBYTE(v17[0]);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return v15;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  long long v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _UNKNOWN **v27;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (a1)
  {
    if (v4 == *(void *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>(0, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>, (uint64_t)&type metadata for ShouldRedactSymbolImagesKey, (uint64_t)&protocol witness table for ShouldRedactSymbolImagesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DerivedEnvironmentPropertyKey);
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(v3 + 40);
      if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v23);
        outlined init with take of ScrollStateRequest(v23, (uint64_t)&v24);
        uint64_t v10 = v26;
        uint64_t v11 = v27;
        __swift_project_boxed_opaque_existential_1(&v24, v26);
        ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v23, MEMORY[0x263F8D4F8], v10, v11);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
      }
      else
      {
        uint64_t v24 = a1;
        char v25 = 0;
        swift_retain_n();
        uint64_t v16 = specialized static ShouldRedactContentKey.value(in:)(&v24);
        swift_release();
        if (v16)
        {
          uint64_t v17 = swift_retain_n();
          uint64_t v18 = specialized closure #1 in PropertyList.subscript.getter(v17);
          swift_release_n();
          uint64_t v19 = v18 ^ 1;
        }
        else
        {
          swift_release();
          uint64_t v19 = 0;
        }
        uint64_t v20 = v19 & 1;
        LOBYTE(v23[0]) = v19 & 1;
        type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>>();
        uint64_t v26 = v21;
        uint64_t v27 = &protocol witness table for DerivedValue<A>;
        LOBYTE(v24) = v20;
        specialized Dictionary.subscript.setter((uint64_t)&v24, v6);
      }
      goto LABEL_15;
    }
  }
  else if (!v4)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(v3 + 56) = 1;
  uint64_t v24 = a1;
  char v25 = 0;
  swift_retain_n();
  char v12 = specialized static ShouldRedactContentKey.value(in:)(&v24);
  swift_release();
  if (v12)
  {
    char v13 = swift_retain_n();
    uint64_t v14 = specialized closure #1 in PropertyList.subscript.getter(v13);
    swift_release_n();
    uint64_t v15 = v14 ^ 1;
  }
  else
  {
    swift_release();
    uint64_t v15 = 0;
  }
  LOBYTE(v23[0]) = v15 & 1;
LABEL_15:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v23[0]);
}

uint64_t protocol witness for AnyTrackedValue.unwrap<A>() in conformance DerivedValue<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return TrackedValue.unwrap<A>()(a1, a2);
}

uint64_t protocol witness for AnyTrackedValue.unwrap<A>() in conformance TrackedValue<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return TrackedValue.unwrap<A>()(a1, a2);
}

uint64_t TrackedValue.unwrap<A>()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  double v9 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v13 - v10;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v13 - v10, v3, AssociatedTypeWitness, v9);
  if (v8 == *(void *)(*(void *)(a1 - 8) + 64))
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v11, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined destroy of AnyTrackedValue?(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  type metadata accessor for AnyTrackedValue?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined destroy of TimelineSchedule?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for TimelineSchedule?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _s7SwiftUI16TimelineSchedule_pSgWOhTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void type metadata accessor for AnyTrackedValue?(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for ScrollStateRequest(255, a3);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for TimelineSchedule?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s7SwiftUI16TimelineSchedule_pSgMaTm_0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for ScrollStateRequest(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, void *a2, char a3, void (*a4)(void), void (*a5)(void), void (*a6)(void), void (*a7)(unint64_t, void *, _OWORD *, uint64_t))
{
  char v12 = v7;
  uint64_t v15 = *v7;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 < v20 || (a3 & 1) == 0)
  {
    if (v22 >= v20 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    a5();
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v21 & 1) == (v27 & 1))
    {
      unint64_t v17 = v26;
      uint64_t v23 = *v12;
      if (v21) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    a6(0);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v23 = *v12;
  if (v21)
  {
LABEL_8:
    uint64_t v24 = (_OWORD *)(*(void *)(v23 + 56) + 32 * v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    return outlined init with take of Any(a1, v24);
  }
LABEL_13:
  a7(v17, a2, a1, v23);

  return a2;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, void *a2, char a3)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), type metadata accessor for NSAttributedStringKey, (void (*)(unint64_t, void *, _OWORD *, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  void *v3;
  void **v4;
  void *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  _OWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;
  uint64_t vars8;

  unint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v10 = v7[2];
  uint64_t v11 = (v8 & 1) == 0;
  char v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
    uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      uint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for CFStringRef(0);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    char v16 = (_OWORD *)(v15[7] + 32 * v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    return outlined init with take of Any(a1, v16);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);

  return a2;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), type metadata accessor for RBSymbolAnimationOptionKey, (void (*)(unint64_t, void *, _OWORD *, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), type metadata accessor for RBDisplayListInterpolatorOptionKey, (void (*)(unint64_t, void *, _OWORD *, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

uint64_t static EnvironmentValues.FontContextKey.value(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v22 = *a1;
  uint64_t v23 = v4;
  EnvironmentValues.sizeCategory.getter(&v24);
  char v5 = v24;
  if (v4)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v24);
    swift_release_n();
    swift_release_n();
    char v6 = v24;
    swift_retain_n();
    swift_retain_n();
    uint64_t v7 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    uint64_t v9 = v8;
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    char v10 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v24);
    swift_release_n();
    uint64_t result = swift_release_n();
    char v12 = v24;
  }
  else
  {
    type metadata accessor for DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v13);
    char v6 = 2;
    uint64_t v14 = swift_retain_n();
    uint64_t v15 = specialized find1<A>(_:key:filter:)(v14, v22);
    if (v15) {
      char v6 = *(unsigned char *)(v15 + 72);
    }
    swift_release_n();
    uint64_t v16 = swift_retain_n();
    uint64_t v7 = specialized closure #1 in PropertyList.subscript.getter(v16);
    uint64_t v9 = v17;
    swift_release_n();
    uint64_t v22 = v3;
    uint64_t v23 = 0;
    swift_retain();
    char v10 = specialized static ShouldRedactContentKey.value(in:)(&v22);
    swift_release();
    type metadata accessor for DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WatchDisplayVariantKey>, (uint64_t)&type metadata for EnvironmentValues.WatchDisplayVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.WatchDisplayVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v18);
    uint64_t v19 = v22;
    uint64_t v20 = swift_retain_n();
    uint64_t v21 = specialized find1<A>(_:key:filter:)(v20, v19);
    if (v21) {
      char v12 = *(unsigned char *)(v21 + 72);
    }
    else {
      char v12 = 1;
    }
    uint64_t result = swift_release_n();
  }
  *(unsigned char *)a2 = v5;
  *(unsigned char *)(a2 + 1) = v6;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 24) = v12;
  *(unsigned char *)(a2 + 25) = v10 & 1;
  return result;
}

void type metadata accessor for DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t specialized static ShouldRedactContentKey.value(in:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (v2)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, &v11);
    swift_release_n();
    swift_release_n();
    LOBYTE(v3) = v11;
    if (v11) {
      return 1;
    }
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<RedactionReasonsKey>();
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v11);
    if (v6) {
      uint64_t v3 = *(void *)(v6 + 72);
    }
    else {
      LOBYTE(v3) = 0;
    }
    swift_release_n();
    if (v3) {
      return 1;
    }
  }
  if ((v3 & 2) != 0)
  {
    if (v2)
    {
      swift_retain_n();
      swift_retain_n();
      char v7 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
      swift_release_n();
      swift_release_n();
      if (v7) {
        return 1;
      }
    }
    else
    {
      uint64_t v9 = swift_retain_n();
      uint64_t v10 = specialized closure #1 in PropertyList.subscript.getter(v9);
      swift_release_n();
      if (v10) {
        return 1;
      }
    }
  }
  return 0;
}

void type metadata accessor for EnvironmentPropertyKey<RedactionReasonsKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>);
    }
  }
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, void (*a3)(void))
{
  Swift::Int v4 = v3;
  uint64_t v6 = *v3;
  a3(0);
  char v36 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_41;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v35 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v34 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v34) {
      break;
    }
    uint64_t v19 = (void *)(v6 + 64);
    unint64_t v20 = *(void *)(v35 + 8 * v18);
    ++v14;
    if (!v20)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v34) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v14);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v34)
        {
LABEL_34:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v34) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v35 + 8 * v14);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v21;
      }
    }
LABEL_21:
    unint64_t v11 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    uint64_t v22 = *(void **)(*(void *)(v6 + 48) + 8 * v17);
    uint64_t v23 = (_OWORD *)(*(void *)(v6 + 56) + 32 * v17);
    if (v36)
    {
      outlined init with take of Any(v23, v37);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v23, (uint64_t)v37);
      id v24 = v22;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v25 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = v25 & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v12 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v8 + 48) + 8 * v15) = v22;
    uint64_t result = (uint64_t)outlined init with take of Any(v37, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v19 = (void *)(v6 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v6 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v19 = -1 << v33;
  }
  *(void *)(v6 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt64 v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  void *v33;

  Swift::Int v4 = v3;
  uint64_t v6 = *v3;
  a3(0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 0;
    uint64_t v33 = (void *)(v6 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v6 + 32);
    if (v10 < 64) {
      unint64_t v11 = ~(-1 << v10);
    }
    else {
      unint64_t v11 = -1;
    }
    uint64_t v12 = v11 & *(void *)(v6 + 64);
    uint64_t v32 = (unint64_t)(v10 + 63) >> 6;
    Swift::Int v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v9 << 6);
      }
      else
      {
        int64_t v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v6 + 64;
        if (v21 >= v32) {
          goto LABEL_33;
        }
        uint64_t v22 = v33[v21];
        ++v9;
        if (!v22)
        {
          uint64_t v9 = v21 + 1;
          if (v21 + 1 >= v32) {
            goto LABEL_33;
          }
          uint64_t v22 = v33[v9];
          if (!v22)
          {
            uint64_t v23 = v21 + 2;
            if (v23 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                Swift::Int v4 = v3;
                goto LABEL_40;
              }
              BOOL v31 = 1 << *(unsigned char *)(v6 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v33 = -1 << v31;
              }
              Swift::Int v4 = v3;
              *(void *)(v6 + 16) = 0;
              break;
            }
            uint64_t v22 = v33[v23];
            if (!v22)
            {
              while (1)
              {
                uint64_t v9 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v9 >= v32) {
                  goto LABEL_33;
                }
                uint64_t v22 = v33[v9];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v9 = v23;
          }
        }
LABEL_30:
        uint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      unint64_t v28 = 8 * v20;
      char v29 = *(void *)(*(void *)(v6 + 48) + v28);
      unint64_t v30 = *(void *)(*(void *)(v6 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v29);
      uint64_t result = Hasher._finalize()();
      int64_t v14 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        id v24 = 0;
        Swift::Int v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      int64_t v18 = 8 * v17;
      *(void *)(*(void *)(v8 + 48) + v18) = v29;
      *(void *)(*(void *)(v8 + 56) + v18) = v30;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v4 = v8;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>)
  {
    type metadata accessor for NSAttributedStringKey(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
    }
  }
}

uint64_t destroy for TextLayoutProperties()
{
  return swift_bridgeObjectRelease();
}

void type metadata accessor for CTFontRef(uint64_t a1)
{
}

void *destroy for ResolvedTextSuffix(uint64_t a1)
{
  return outlined consume of ResolvedTextSuffix(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t specialized Text.Style.LineStyle.resolve(in:fallbackStyle:)@<X0>(long long *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(long long *__return_ptr, uint64_t)@<X4>, void (*a6)(long long *__return_ptr, uint64_t, unsigned char *)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9 = a2[1];
  if (v9 == 2)
  {
LABEL_7:
    swift_release();
    uint64_t result = swift_release();
    *(void *)a7 = 0;
    *(void *)(a7 + 8) = 0;
    *(void *)(a7 + 16) = 0;
    *(_WORD *)(a7 + 24) = 256;
    return result;
  }
  long long v10 = *a1;
  uint64_t v11 = *a2;
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  if (v9 == 1)
  {
    long long v27 = *a1;
    if (a4)
    {
      swift_retain();
      swift_retain();
      a5(&v30, a3);
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v16 = swift_retain_n();
      a6(&v30, v16, v29);
      swift_release_n();
    }
    uint64_t v13 = *((void *)&v30 + 1);
    if (*((void *)&v30 + 1) == 1) {
      goto LABEL_7;
    }
    uint64_t v12 = v30;
    swift_retain();
    long long v10 = v27;
  }
  if (v13)
  {
    long long v30 = v10;
    int64_t v18 = *(double (**)(long long *))(*(void *)v13 + 104);
    outlined copy of Text.Style.LineStyle(v11, v9);
    outlined copy of Text.Style.LineStyle(v11, v9);
    swift_retain();
    unsigned int v25 = COERCE_UNSIGNED_INT64(v18(&v30));
    unsigned int v28 = v19;
    unsigned int v24 = v20;
    unsigned int v26 = v21;
    outlined consume of Text.LineStyle?(v12, v13);
    swift_release_n();
    swift_release();
    uint64_t result = swift_release();
    v22.i64[0] = v25;
    v22.i64[1] = v24;
    int8x16_t v23 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(v26, v28), 0x20uLL), v22);
  }
  else
  {
    outlined copy of Text.Style.LineStyle(v11, v9);
    outlined copy of Text.Style.LineStyle(v11, v9);
    outlined consume of Text.LineStyle?(v12, 0);
    swift_release();
    uint64_t result = swift_release();
    int8x16_t v23 = 0uLL;
  }
  *(void *)a7 = v12;
  *(int8x16_t *)(a7 + 8) = v23;
  *(unsigned char *)(a7 + 24) = v13 == 0;
  *(unsigned char *)(a7 + 25) = 0;
  return result;
}

uint64_t initializeWithCopy for TextLayoutProperties(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 27);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  swift_bridgeObjectRetain();
  return a1;
}

void *initializeWithCopy for ResolvedTextSuffix(void *a1, uint64_t a2)
{
  long long v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  outlined copy of ResolvedTextSuffix(*(void **)a2, v4, v5, v6, v7, v8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  return a1;
}

void *outlined copy of ResolvedTextSuffix(void *result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a6 & 0x8000000000000000) == 0)
  {
    outlined copy of Text.Layout.Line.Line(result, a2, a3 & 1);
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t specialized ObjectCache.subscript.getter(float a1, float a2, float a3, float a4)
{
  return specialized ObjectCache.subscript.getter((uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), a1, a2, a3, a4);
}

{
  return specialized ObjectCache.subscript.getter((uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), a1, a2, a3, a4);
}

unint64_t Text.Style.TextStyleFont.resolve(in:includeDefaultAttributes:)(unint64_t *a1, char a2)
{
  unint64_t v3 = *v2;
  if (v3 >= 2)
  {
    swift_retain();
  }
  else if (a2)
  {
    unint64_t v4 = *a1;
    unint64_t v5 = a1[1];
    if (!v3)
    {
      if (!v5)
      {
        v13[0] = *a1;
        v13[1] = 0;
        swift_retain();
        unint64_t v3 = specialized static EnvironmentValues.EffectiveFontKey.value(in:)(v13);
        swift_release();
        return v3;
      }
      swift_retain_n();
      swift_retain_n();
      uint64_t v6 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v4);
      goto LABEL_11;
    }
    if (v5)
    {
      swift_retain_n();
      swift_retain_n();
      unint64_t v3 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
      swift_release_n();
      swift_release_n();
      if (!v3)
      {
        swift_retain_n();
        swift_retain_n();
        uint64_t v6 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v4);
LABEL_11:
        unint64_t v3 = v6;
        swift_release_n();
LABEL_14:
        swift_release_n();
      }
    }
    else
    {
      uint64_t v7 = swift_retain_n();
      unint64_t v3 = specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)v16);
      swift_release_n();
      if (!v3)
      {
        uint64_t v8 = swift_retain_n();
        specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)v13);
        swift_release_n();
        uint64_t v9 = v14;
        uint64_t v10 = v15;
        __swift_project_boxed_opaque_existential_1(v13, v14);
        v12[0] = v4;
        v12[1] = 0;
        unint64_t v3 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 8))(v12, v9, v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
        goto LABEL_14;
      }
    }
  }
  else
  {
    return 0;
  }
  return v3;
}

void type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<ShouldRedactContentKey>>()
{
  if (!lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<ShouldRedactContentKey>>)
  {
    type metadata accessor for DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>(255, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<ShouldRedactContentKey>, (uint64_t)&type metadata for ShouldRedactContentKey, (uint64_t)&protocol witness table for ShouldRedactContentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DerivedEnvironmentPropertyKey);
    lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<ShouldRedactContentKey> and conformance DerivedEnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type DerivedEnvironmentPropertyKey<ShouldRedactContentKey> and conformance DerivedEnvironmentPropertyKey<A>, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<ShouldRedactContentKey>, (uint64_t)&type metadata for ShouldRedactContentKey, (uint64_t)&protocol witness table for ShouldRedactContentKey);
    unint64_t v0 = type metadata accessor for DerivedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<ShouldRedactContentKey>>);
    }
  }
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x24C523D70](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

{
  unint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t vars8;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  unint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v5 = v4 + v3;
  if (__OFADD__(v4, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  uint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  unint64_t v4 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    unint64_t v4 = 1;
  }
  if (v6 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v5) {
      uint64_t v9 = v5;
    }
    swift_bridgeObjectRetain();
    *uint64_t v1 = MEMORY[0x24C523D70](v4, v9, 1, v6);
    swift_bridgeObjectRelease();
    uint64_t v8 = *v1 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = *v1;
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        type metadata accessor for [AnyFontModifier](0, &lazy cache variable for type metadata for [AnyFontModifier], (uint64_t (*)(uint64_t))type metadata accessor for AnyFontModifier, MEMORY[0x263F8D488]);
        lazy protocol witness table accessor for type [ViewResponder] and conformance [A](&lazy protocol witness table cache variable for type [AnyFontModifier] and conformance [A], &lazy cache variable for type metadata for [AnyFontModifier], (uint64_t (*)(uint64_t))type metadata accessor for AnyFontModifier);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for AnyFontModifier();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        type metadata accessor for [AnyFontModifier](0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
        lazy protocol witness table accessor for type [ViewResponder] and conformance [A](&lazy protocol witness table cache variable for type [ViewResponder] and conformance [A], (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for ViewResponder();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Text.Style.LineStyle.resolve(in:fallbackStyle:)@<X0>(long long *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return specialized Text.Style.LineStyle.resolve(in:fallbackStyle:)(a1, a2, a3, a4, (void (*)(long long *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(long long *__return_ptr, uint64_t, unsigned char *))specialized closure #1 in PropertyList.subscript.getter, a5);
}

{
  return specialized Text.Style.LineStyle.resolve(in:fallbackStyle:)(a1, a2, a3, a4, (void (*)(long long *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(long long *__return_ptr, uint64_t, unsigned char *))specialized closure #1 in PropertyList.subscript.getter, a5);
}

id Text.ResolvedProperties.Paragraph.style(environment:)(uint64_t *a1)
{
  long long v2 = (void *)v1[1];
  if (!v2)
  {
    unint64_t v4 = v1;
    uint64_t v6 = *a1;
    uint64_t v5 = a1[1];
    uint64_t v15 = *a1;
    uint64_t v16 = v5;
    uint64_t v7 = makeParagraphStyle(environment:)((unint64_t *)&v15);
    objc_msgSend(v7, sel_setCompositionLanguage_, *v4);
    if (v5)
    {
      swift_retain_n();
      swift_retain_n();
      char v8 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v6);
      swift_release_n();
      swift_release_n();
      if (v8)
      {
        objc_msgSend(v7, sel_setFullyJustified_, 1);
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v6, &v15);
        swift_release_n();
        swift_release_n();
        unsigned int v9 = v15;
LABEL_11:
        objc_msgSend(v7, sel_setBaseWritingDirection_, v9);
        objc_msgSend(v7, sel_setLineBreakMode_, 1);
      }
    }
    else
    {
      uint64_t v15 = v6;
      uint64_t v16 = 0;
      swift_retain();
      uint64_t v10 = specialized static ShouldRedactContentKey.value(in:)(&v15);
      swift_release();
      if (v10)
      {
        objc_msgSend(v7, sel_setFullyJustified_, 1);
        uint64_t v11 = swift_retain_n();
        uint64_t v12 = specialized find<A>(_:key:)(v11);
        if (v12) {
          unsigned int v9 = *(unsigned __int8 *)(v12 + 72);
        }
        else {
          unsigned int v9 = 0;
        }
        swift_release_n();
        goto LABEL_11;
      }
    }
    v4[1] = v7;
    id v3 = v7;
    goto LABEL_13;
  }
  id v3 = (id)v1[1];
LABEL_13:
  id v13 = v2;
  return v3;
}

uint64_t outlined init with copy of AttributedString.AdaptiveImageGlyph?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TimelineSchedule?(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized PropertyList.Tracker.value<A>(_:for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<StrikethroughStyleKey>, (uint64_t)&type metadata for StrikethroughStyleKey, (uint64_t)&protocol witness table for StrikethroughStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v20);
    outlined init with take of ScrollStateRequest(v20, (uint64_t)v21);
    uint64_t v12 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    id v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, (unint64_t *)&lazy cache variable for type metadata for Text.LineStyle?, (uint64_t)&type metadata for Text.LineStyle, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    uint64_t v16 = *a2;
    uint64_t v17 = a2[1];
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<StrikethroughStyleKey>>();
    uint64_t v22 = v18;
    int8x16_t v23 = &protocol witness table for TrackedValue<A>;
    v21[0] = v16;
    v21[1] = v17;
    outlined copy of Text.LineStyle?(v16, v17);
    specialized Dictionary.subscript.setter((uint64_t)v21, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  long long v24[2];
  void v25[3];
  uint64_t v26;
  _UNKNOWN **v27;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (a1)
  {
    if (v6 == *(void *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundMaterialKey>, (uint64_t)&type metadata for BackgroundMaterialKey, (uint64_t)&protocol witness table for BackgroundMaterialKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(v5 + 32);
      if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v24);
        outlined init with take of ScrollStateRequest(v24, (uint64_t)v25);
        uint64_t v12 = v27;
        __swift_project_boxed_opaque_existential_1(v25, v26);
        id v13 = (void (*)(void))v12[1];
        type metadata accessor for [LayoutDirection](0, (unint64_t *)&lazy cache variable for type metadata for Material?, (uint64_t)&type metadata for Material, MEMORY[0x263F8D8F0]);
        v13();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
      }
      else
      {
        uint64_t v18 = swift_retain();
        unsigned int v19 = specialized find<A>(_:key:)(v18);
        if (v19)
        {
          unsigned int v20 = *(void *)(v19 + 72);
          unsigned int v21 = *(void *)(v19 + 80);
          *a2 = v20;
          a2[1] = v21;
          outlined copy of Material?(v20, v21);
        }
        else
        {
          unsigned int v20 = 0;
          *(_OWORD *)a2 = xmmword_2461B99D0;
          unsigned int v21 = 255;
        }
        swift_release();
        type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundMaterialKey>>();
        unsigned int v26 = v22;
        long long v27 = &protocol witness table for TrackedValue<A>;
        v25[0] = v20;
        v25[1] = v21;
        outlined copy of Material?(v20, v21);
        specialized Dictionary.subscript.setter((uint64_t)v25, v8);
      }
      goto LABEL_15;
    }
  }
  else if (!v6)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(v5 + 56) = 1;
  uint64_t v14 = swift_retain();
  uint64_t v15 = specialized find<A>(_:key:)(v14);
  if (v15)
  {
    uint64_t v17 = *(void *)(v15 + 72);
    uint64_t v16 = *(void *)(v15 + 80);
    *a2 = v17;
    a2[1] = v16;
    outlined copy of Material?(v17, v16);
  }
  else
  {
    *(_OWORD *)a2 = xmmword_2461B99D0;
  }
  swift_release();
LABEL_15:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    id v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for TextSizeVariant, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    uint64_t v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>>();
    unsigned int v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _UNKNOWN **v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v20[2];
  void v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<UnderlineStyleKey>, (uint64_t)&type metadata for UnderlineStyleKey, (uint64_t)&protocol witness table for UnderlineStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v20);
    outlined init with take of ScrollStateRequest(v20, (uint64_t)v21);
    uint64_t v12 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    id v13 = (void (*)(void))v12[1];
    type metadata accessor for [LayoutDirection](0, (unint64_t *)&lazy cache variable for type metadata for Text.LineStyle?, (uint64_t)&type metadata for Text.LineStyle, MEMORY[0x263F8D8F0]);
    v13();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    uint64_t v16 = *a2;
    uint64_t v17 = a2[1];
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<UnderlineStyleKey>>();
    uint64_t v22 = v18;
    int8x16_t v23 = &protocol witness table for TrackedValue<A>;
    v21[0] = v16;
    v21[1] = v17;
    outlined copy of Text.LineStyle?(v16, v17);
    specialized Dictionary.subscript.setter((uint64_t)v21, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v20[2];
  void v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v20);
    outlined init with take of ScrollStateRequest(v20, (uint64_t)v21);
    uint64_t v12 = v22;
    id v13 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for BackgroundInfo, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    uint64_t v16 = *a2;
    uint64_t v17 = a2[1];
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundInfoKey>>();
    uint64_t v22 = v18;
    int8x16_t v23 = &protocol witness table for TrackedValue<A>;
    v21[0] = v16;
    v21[1] = v17;
    specialized Dictionary.subscript.setter((uint64_t)v21, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>, (uint64_t)&type metadata for RedactionReasonsKey, (uint64_t)&protocol witness table for RedactionReasonsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    id v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for RedactionReasons, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    uint64_t v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<RedactionReasonsKey>>();
    unsigned int v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v16;
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (!a1)
  {
    if (!v6) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t v14 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v14, a2);
    swift_release();
    goto LABEL_9;
  }
  if (v6 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>, (uint64_t)&type metadata for EnvironmentValues.ContentShapesKey, (uint64_t)&protocol witness table for EnvironmentValues.ContentShapesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 32);
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v12 = v21;
    id v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(ValueMetadata *, uint64_t, _UNKNOWN **))v13[1])(&type metadata for ContentShapes, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v15, a2);
    swift_release();
    uint64_t v16 = *a2;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ContentShapesKey>>();
    unsigned int v21 = v17;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v16;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v20, v8);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

double specialized PropertyList.Tracker.value<A>(_:for:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    double v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)uint64_t v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTrackingKey>, (uint64_t)&type metadata for DefaultTrackingKey, (uint64_t)&protocol witness table for DefaultTrackingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    char v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8EF38], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    uint64_t v14 = swift_retain();
    double v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)uint64_t v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultTrackingKey>>();
    uint64_t v20 = v16;
    unsigned int v21 = &protocol witness table for TrackedValue<A>;
    *(double *)unsigned int v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    double v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)uint64_t v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultKerningKey>, (uint64_t)&type metadata for DefaultKerningKey, (uint64_t)&protocol witness table for DefaultKerningKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    char v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8EF38], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    uint64_t v14 = swift_retain();
    double v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)uint64_t v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultKerningKey>>();
    uint64_t v20 = v16;
    unsigned int v21 = &protocol witness table for TrackedValue<A>;
    *(double *)unsigned int v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    double v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)uint64_t v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultBaselineOffsetKey>, (uint64_t)&type metadata for DefaultBaselineOffsetKey, (uint64_t)&protocol witness table for DefaultBaselineOffsetKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    char v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8EF38], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    uint64_t v14 = swift_retain();
    double v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)uint64_t v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultBaselineOffsetKey>>();
    uint64_t v20 = v16;
    unsigned int v21 = &protocol witness table for TrackedValue<A>;
    *(double *)unsigned int v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    double v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)uint64_t v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BodyHeadOutdentKey>, (uint64_t)&type metadata for BodyHeadOutdentKey, (uint64_t)&protocol witness table for BodyHeadOutdentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    char v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8EF38], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    uint64_t v14 = swift_retain();
    double v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)uint64_t v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<BodyHeadOutdentKey>>();
    uint64_t v20 = v16;
    unsigned int v21 = &protocol witness table for TrackedValue<A>;
    *(double *)unsigned int v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    double v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)uint64_t v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayScaleKey>, (uint64_t)&type metadata for DisplayScaleKey, (uint64_t)&protocol witness table for DisplayScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    char v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8EF38], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    uint64_t v14 = swift_retain();
    double v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)uint64_t v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DisplayScaleKey>>();
    uint64_t v20 = v16;
    unsigned int v21 = &protocol witness table for TrackedValue<A>;
    *(double *)unsigned int v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    double v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)uint64_t v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumScaleFactorKey>, (uint64_t)&type metadata for MinimumScaleFactorKey, (uint64_t)&protocol witness table for MinimumScaleFactorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    char v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8EF38], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    uint64_t v14 = swift_retain();
    double v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)uint64_t v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<MinimumScaleFactorKey>>();
    uint64_t v20 = v16;
    unsigned int v21 = &protocol witness table for TrackedValue<A>;
    *(double *)unsigned int v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    double v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)uint64_t v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineSpacingKey>, (uint64_t)&type metadata for LineSpacingKey, (uint64_t)&protocol witness table for LineSpacingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    char v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8EF38], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    uint64_t v14 = swift_retain();
    double v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)uint64_t v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<LineSpacingKey>>();
    uint64_t v20 = v16;
    unsigned int v21 = &protocol witness table for TrackedValue<A>;
    *(double *)unsigned int v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    double v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)uint64_t v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineHeightMultipleKey>, (uint64_t)&type metadata for LineHeightMultipleKey, (uint64_t)&protocol witness table for LineHeightMultipleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    char v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8EF38], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    uint64_t v14 = swift_retain();
    double v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)uint64_t v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<LineHeightMultipleKey>>();
    uint64_t v20 = v16;
    unsigned int v21 = &protocol witness table for TrackedValue<A>;
    *(double *)unsigned int v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    double v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)uint64_t v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaximumLineHeightKey>, (uint64_t)&type metadata for MaximumLineHeightKey, (uint64_t)&protocol witness table for MaximumLineHeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    char v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8EF38], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    uint64_t v14 = swift_retain();
    double v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)uint64_t v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<MaximumLineHeightKey>>();
    uint64_t v20 = v16;
    unsigned int v21 = &protocol witness table for TrackedValue<A>;
    *(double *)unsigned int v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    double v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)uint64_t v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumLineHeightKey>, (uint64_t)&type metadata for MinimumLineHeightKey, (uint64_t)&protocol witness table for MinimumLineHeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    char v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8EF38], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    uint64_t v14 = swift_retain();
    double v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)uint64_t v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<MinimumLineHeightKey>>();
    uint64_t v20 = v16;
    unsigned int v21 = &protocol witness table for TrackedValue<A>;
    *(double *)unsigned int v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    double v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    *(double *)uint64_t v18 = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationFactorKey>, (uint64_t)&type metadata for HyphenationFactorKey, (uint64_t)&protocol witness table for HyphenationFactorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    char v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8EF38], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    uint64_t v14 = swift_retain();
    double v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    *(double *)uint64_t v18 = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<HyphenationFactorKey>>();
    uint64_t v20 = v16;
    unsigned int v21 = &protocol witness table for TrackedValue<A>;
    *(double *)unsigned int v19 = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)v18;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  long long v31;
  uint64_t v32;
  uint64_t v33;
  void v34[3];
  uint64_t v35;
  _UNKNOWN **v36;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    double v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    double v15 = v14;
    uint64_t v17 = v16;
    unsigned int v19 = v18;
    swift_release();
    *(double *)&BOOL v31 = v13;
    *((void *)&v31 + 1) = v15;
    uint64_t v32 = v17;
    uint64_t v33 = v19;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPaddingKey>, (uint64_t)&type metadata for DefaultPaddingKey, (uint64_t)&protocol witness table for DefaultPaddingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)&v31);
    outlined init with take of ScrollStateRequest(&v31, (uint64_t)v34);
    uint64_t v10 = v35;
    char v11 = v36;
    __swift_project_boxed_opaque_existential_1(v34, v35);
    ((void (*)(long long *__return_ptr, ValueMetadata *, uint64_t, _UNKNOWN **))v11[1])(&v31, &type metadata for EdgeInsets, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  }
  else
  {
    uint64_t v20 = swift_retain();
    unsigned int v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    int8x16_t v23 = v22;
    unsigned int v25 = v24;
    long long v27 = v26;
    swift_release();
    *(double *)&BOOL v31 = v21;
    *((void *)&v31 + 1) = v23;
    uint64_t v32 = v25;
    uint64_t v33 = v27;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultPaddingKey>>();
    uint64_t v35 = v28;
    char v36 = &protocol witness table for TrackedValue<A>;
    char v29 = (double *)swift_allocObject();
    v34[0] = v29;
    void v29[2] = v21;
    *((void *)v29 + 3) = v23;
    *((void *)v29 + 4) = v25;
    *((void *)v29 + 5) = v27;
    specialized Dictionary.subscript.setter((uint64_t)v34, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(double *)&v31;
}